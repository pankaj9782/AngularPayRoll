{"version":3,"sources":["webpack:///src/app/pages/graderule/graderule.component.ts","webpack:///src/app/pages/graderule/graderule.component.html","webpack:///src/app/pages/graderule/list-graderule/list-graderule.component.html","webpack:///src/app/pages/graderule/list-graderule/list-graderule.component.ts","webpack:///src/app/pages/graderule/add-graderule/add-graderule.component.html","webpack:///src/app/pages/graderule/add-graderule/add-graderule.component.ts","webpack:///src/app/pages/graderule/update-graderule/update-graderule.component.html","webpack:///src/app/pages/graderule/update-graderule/update-graderule.component.ts","webpack:///src/app/pages/graderule/managePaymentHeads/list-managePaymentHeads/list-managePaymentHeads.component.html","webpack:///src/app/pages/graderule/managePaymentHeads/add-managePaymentHeads/add-managePaymentHeads.component.html","webpack:///src/app/pages/graderule/managePaymentHeads/update-managePaymentHeads/update-managePaymentHeads.component.html","webpack:///src/app/pages/graderule/graderule-routing.module.ts","webpack:///src/app/pages/graderule/managePaymentHeads/list-managePaymentHeads/list-managePaymentHeads.component.ts","webpack:///src/app/pages/graderule/managePaymentHeads/add-managePaymentHeads/add-managePaymentHeads.component.ts","webpack:///src/app/pages/graderule/managePaymentHeads/update-managePaymentHeads/update-managePaymentHeads.component.ts","webpack:///src/app/pages/graderule/graderule.module.ts"],"names":["GraderuleComponent","ListGraderuleComponent","api","fb","route","util","this","listGradRule","permissionInfo","permissionRoleInfo","getGradeRuleList","subscribe","data","status","listGradRuleData","Object","keys","length","navigateByUrl","err","console","log","gradeRuleid","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","type","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","value","removeData","message","dismiss","DismissReason","cancel","gradeRuleStatus","addGradeRule","AddGraderuleComponent","router","Fixed","Percent","percentErrorMsg","gradeType","successMessage","serverErrorMsg","fixedPaymentHeadsList","percentOfValue","validationMessage","isListAvaliable","paymentHeadList","addMemberValidation","fixedPaymentHeads","search","graderuleForm","disable","name","dynamicValidation","fixed","required","maxLength","pattern","percent","target","options","selectedIndex","errorMsg","get","setValidators","updateValueAndValidity","switchTypeValidation","group","paymentHead","paymentHeadId","compose","getPaymentHeadData","paymentHeadDataList","getGradeRule","successMsg","setTimeout","handleErrors","errMsg","document","getElementById","inputValue","toString","undefined","error","graderuleData","check","demo","UpdateGraderuleComponent","ngZone","gradeRuleId","snapshot","paramMap","moduleExists","existingData","graderuleUpdateForm","cleanUpdateGradeRuleForm","cleanFormLevelOne","updateGadeRule","run","graderuleUpdateData","path","component","canActivate","children","ListManagePaymentHeadsComponent","showCard","leaveListData","Array","companyShowData","removeAttribute","listGradeRule","setAttribute","gradeRuleTitle","dataValue","paymentHeads","paymentHeadsId","removeGradeData","AddManagePaymentHeadsComponent","managePaymentForm","filterPaymentHeads","addGradules","managePaymentData","UpdateManagePaymentHeadsComponent","percentOfFunction","percentValue","existing","fixedPaymentHeadList","updateManagePaymentForm","existingGradeRule","forEach","items","_id","existingPaymentHeadId","existingPaymentHeadName","paymentHeadName","updatePaymentHeads","redirectTo","pathMatch","GraderuleRoutingModule","forChild","GraderuleModule"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-graderule',\n  templateUrl: './graderule.component.html',\n  styleUrls: ['./graderule.component.scss']\n})\n\nexport class GraderuleComponent implements OnInit {\n\n  constructor() {}\n  ngOnInit() {\n\n  }\n\n}","<router-outlet></router-outlet>","<div class=\"card\">\n   <div class=\"card-header\" style=\"text-align: center\">\n         <h2>Grade Rule</h2>\n         <button [disabled]=\"permissionInfo.search('Create GradeRule') === -1\"\n          class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/graderule/add-graderule\" style=\"float:right;\" (click)= \"addGradeRule()\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Grade Rule</button\n            >\n   </div>\n   <table class=\"table\" style=\"text-align: center;\">\n      <thead class=\" text-primary\">\n          <tr>\n          <th> S.No </th>\n          <th> Title </th>\n          </tr>\n      </thead>\n      <tbody *ngFor=\"let list of listGradRuleData; let i = index\">\n          <tr >\n          <td><b>{{i+1}}.</b></td>\n          <td> {{list.title}} </td>\n          <td>\n              <a [class.disabled]=\"permissionInfo.search('Edit GradeRule') === -1\"\n              routerLink=\"/pages/graderule/update-graderule/{{list._id}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>&nbsp;\n              <button  [disabled]=\"permissionInfo.search('Delete GradeRule') === -1\"\n              class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i>\n              </button>&nbsp;\n              <button [disabled]=\"permissionInfo.search('Create PaymentHeads') === -1\"\n              class=\"btn btn-info\" type=\"button\" routerLink=\"../list-managePaymentHeads/{{list._id}}\">Manage Payment Heads</button>\n          </td>\n          </tr>\n  </table>\n</div>\n","import { GraderuleApiService } from '../graderule-service/graderule-api.service';\nimport { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n\n@Component({\n  selector: 'app-list-graderule',\n  templateUrl: './list-graderule.component.html',\n  styleUrls: ['./list-graderule.component.css']\n})\n\nexport class ListGraderuleComponent implements OnInit {\n\n  listGradRuleData: any [];\n  permissionInfo: any;\n\n  constructor(private api: GraderuleApiService, private fb: FormBuilder,public route:Router, private util:UtilitiesService) { }\n\n  ngOnInit() {\n   this.listGradRule();\n   this.permissionInfo = this.util.permissionRoleInfo;\n  }\n\n  listGradRule(){\n   try{\n     this.api.getGradeRuleList().subscribe(data=>{\n       if (data.status === 'success' || data.status === 200){\n        this.listGradRuleData = data.data;\n        const len = Object.keys(this.listGradRuleData).length;\n        if(len == 0){\n          this.route.navigateByUrl(\"pages/graderule/add-graderule\");\n        }else{\n          this.listGradRuleData = data.data;\n        }\n      }\n     })\n   }catch(err){\n     console.log(err)\n   }\n  }\n\n  showConfirmationMessage(gradeRuleid:string){\n    const swalWithBootstrapButtons = Swal.mixin({\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger'\n      },\n      buttonsStyling: false\n    })\n    swalWithBootstrapButtons.fire({\n      title: 'Are you sure?',\n      text: \"You want to delete it\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'No',\n      reverseButtons: true\n    }).then((result) => {\n      if (result.value) {\n        this.api.removeData(gradeRuleid).subscribe((data)=>{\n          if(data.status === 'success'){\n            swalWithBootstrapButtons.fire(\n              'Deleted!',\n              data.message,\n              'success'\n            )\n          } else if (data.status === 'error'){\n            swalWithBootstrapButtons.fire(\n              'ERROR!',\n              data.message,\n              'error'\n            )\n          }\n          this.listGradRule();\n      })\n      } else if (\n        result.dismiss === Swal.DismissReason.cancel\n      ) {\n        swalWithBootstrapButtons.fire(\n          'Cancelled',\n          'Your list data safe',\n          'error'\n        )\n      }\n    })\n}\naddGradeRule(){\n  try{\n    this.util.gradeRuleStatus = 1;\n  }catch(err){\n    console.log(err)\n  }\n}\n\n\n\n\n}\n","<div class=\"card card-user\">\n        <div class=\"card-header\">\n            <h2 class=\"card-title text-center\">Grade Rule Details</h2>\n        </div>\n        <div class=\"card-body\">\n            <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-danger\" *ngIf=\"serverErrorMsg\">\n                    <strong>{{ errMsg }}</strong>\n                </p>\n            </div>\n            <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                    <strong>{{ successMsg }}</strong>\n                </p>\n            </div>\n            <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"graderuleForm\" (ngSubmit)=\"graderuleData()\"\n            novalidate>\n                <div class=\"cols\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" id=\"title\" placeholder=\"Enter Title\" formControlName=\"title\"\n                        required>\n                        <div *ngFor=\"let validation of validationMessage.title\">\n                            <div style=\"color: red;margin-left: 1%;\"\n                                *ngIf=\"graderuleForm.get('title').hasError(validation.type) && (graderuleForm.get('title').dirty || graderuleForm.get('title').touched)\"\n                                style=\"color: red;margin-left: 1%;\">\n                                {{ validation.message }}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n                <div [formGroup]=\"graderuleForm.get('paymentHead')\">\n                    <label class=\"col-sm-6 control-label\"><b>Payment Head:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <select class=\"dropdown dropdown-toggle form-control\" name=\"Payment Heades\" (change)=\"check($event.target)\" formControlName=\"paymentHeadId\">\n                        <option ng-selected=\"true\" value=\"\" disabled>----------Select Payment Head Name----------</option>\n                        <option *ngFor=\"let list of paymentHeadDataList\" [ngValue]=\"list._id\" selected>{{ list.title }}</option>\n                    </select>\n                    <div *ngFor=\"let validation of validationMessage.paymentHeadId\">\n                        <div style=\"color: red;margin-left: 1%;\"\n                            *ngIf=\"graderuleForm.get('paymentHead.paymentHeadId').hasError(validation.type) && (graderuleForm.get('paymentHead.paymentHeadId').dirty || graderuleForm.get('paymentHead.paymentHeadId').touched)\"\n                            style=\"color: red;margin-left: 1%;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                <br>\n                    <div class=\"row\">\n                        <div class=\"col-md-4\">\n                            <label class=\"col-sm-4 control-label\"><b>Type:&nbsp;</b></label>\n                            <select class=\"dropdown dropdown-toggle form-control\" id=\"typeValue\" (change)=\"check($event)\" formControlName=\"type\">\n                                <option ng-selected=\"true\" value=\"\" disabled>----------Select Grade Type----------</option>\n                                <option class=\"dropdown-item\"  *ngFor='let type of gradeType' >{{ type }}</option>\n\n                            </select>\n                            <div *ngFor=\"let validation of validationMessage.type\">\n                                <div style=\"color: red;margin-left: 1%;\"\n                                    *ngIf=\"graderuleForm.get('paymentHead.type').hasError(validation.type) && (graderuleForm.get('paymentHead.type').dirty || graderuleForm.get('paymentHead.type').touched)\"\n                                    style=\"color: red;margin-left: 1%;\">\n                                    {{ validation.message }}\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"col-md-4\" *ngIf=\"Fixed\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>Enter Amount:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"text\" id=\"value\" placeholder=\"Enter Amount\" formControlName=\"value\" required >\n                                </div>\n                            </div>\n                            <div *ngFor=\"let validation of validationMessage.value\">\n                                <div style=\"color: red;margin-left: 1%;\"\n                                    *ngIf=\"graderuleForm.get('paymentHead.value').hasError(validation.type) && (graderuleForm.get('paymentHead.value').dirty || graderuleForm.get('paymentHead.value').touched)\"\n                                    style=\"color: red;margin-left: 1%;\">\n                                    {{ validation.message }}\n                                </div>\n                            </div>\n                        </div>\n\n\n                        <div class=\"col-md-4\" *ngIf=\"Percent\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>Enter Percent:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"number\" id=\"percentValue\" (input)=\"demo()\" placeholder=\"Enter Percent\" formControlName=\"value\" required>\n                                </div>\n                            </div>\n                            <div><p style=\"color:red;\">{{percentErrorMsg}}</p></div>\n                            <div><p style=\"color:red;\"> {{ errorMsg }}</p></div>\n                        </div>\n\n                        <div class=\"col-md-4\" *ngIf=\"Percent\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>Percent Of:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                <select class=\"dropdown dropdown-toggle form-control\" name=\"Payment Heades\">\n                                    <option ng-selected=\"true\" value=\"\" disabled>----Select Percent Of----</option>\n                                    <option *ngFor=\"let fixedHeads of fixedPaymentHeadsList\" [ngValue]=\"fixedHeads.value\" selected>{{ fixedHeads.name }}</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <button type=\"submit\" class=\"btn btn-success\"  [disabled]=\"graderuleForm.invalid || errorMsg || percentErrorMsg || permissionInfo.search('Create GradeRule') === -1\" (click)=\"demo()\">Submit</button>\n                <button class=\"btn btn-danger\" routerLink=\"/pages/graderule/list-graderule\">Cancel</button>\n            </form>\n        </div>\n    </div>","import { Component, NgZone,OnInit } from \"@angular/core\";\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { GraderuleApiService } from '../graderule-service/graderule-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\ndeclare const $: any;\n\n@Component({\n    selector: 'app-add-graderule',\n    templateUrl: './add-graderule.component.html'\n})\n\nexport class AddGraderuleComponent implements OnInit {\n\n    paymentHeadDataList: any;\n    graderuleForm: any;\n    Fixed: Boolean = false;\n    Percent: Boolean = false;\n    inputValue;\n    errorMsg: String;\n    percentErrorMsg = 'Percent is Required';\n    gradeType = ['Fixed','Percent']\n    successMsg: String;\n    successMessage: boolean = false;\n    errMsg: String;\n    serverErrorMsg: boolean = false;\n    fixedPaymentHeadsList = [];\n    percentOfValue = 'basicSalary';\n\n\n\n    validationMessage = {\n        'title': [\n          { type: 'required', message: 'Title is required' },\n        ],\n        'value': [\n          { type: 'required', message: 'Amount is required' },\n          { type: 'maxlength', message: 'Amount is too Large' },\n          { type: 'pattern', message: 'Amount not valid' },\n        ],\n        'paymentHeadId':[\n            { type: 'required', message: 'Payment Head is required' },\n        ],\n        'type': [\n          { type: 'required', message: 'Type  is required' },\n        ],\n    }\n    permissionInfo: any;\n\n    constructor(private api:GraderuleApiService,private fb:FormBuilder,public router:Router,\n        private util: UtilitiesService){\n            this.isListAvaliable();\n        }\n\n    ngOnInit() {\n        this.paymentHeadList();\n        this.addMemberValidation();\n        this.fixedPaymentHeads();\n        this.permissionInfo = this.util.permissionRoleInfo;\n        if(this.permissionInfo.search('Create GradeRule') === -1){\n          this.graderuleForm.disable();\n        }\n    }\n\n    check(name){\n        let dynamicValidation = {\n            fixed: [\n              Validators.required,\n              Validators.maxLength(8),\n              Validators.pattern('^[0-9]*$')\n            ],\n            percent: [\n              Validators.required,\n              Validators.maxLength(8),\n              Validators.pattern(/^\\d{0,2}(?:\\.\\d{0,2})?$/)\n            ]\n          }\n\n        let gradeType = name.target.options[name.target.options.selectedIndex].text;\n        if(gradeType == 'Fixed')\n        {\n            this.Fixed = true;\n            this.Percent = false;\n            this.errorMsg = '';\n            this.percentErrorMsg = '';\n\n            this.graderuleForm.get('paymentHead.value').setValidators(dynamicValidation['fixed']);\n            this.graderuleForm.get('paymentHead.value').updateValueAndValidity();\n\n        } else if (gradeType == 'Percent') {\n            this.Percent = true;\n            this.Fixed = false;\n            if(this.graderuleForm.get('paymentHead.value').value){\n                this.switchTypeValidation(this.graderuleForm.get('paymentHead.value').value);\n            }\n\n            this.graderuleForm.get('paymentHead.value').setValidators(dynamicValidation['percent']);\n            this.graderuleForm.get('paymentHead.value').updateValueAndValidity();\n        }\n    }\n\n    addMemberValidation() {\n        this.graderuleForm = this.fb.group({\n            title: new FormControl('',Validators.required),\n            paymentHead: new FormGroup({\n                paymentHeadId: new FormControl('',Validators.required),\n                type: new FormControl('',Validators.required),\n                value: new FormControl('',Validators.compose([\n                    Validators.required,\n                    Validators.maxLength(8),\n                    Validators.pattern('^[0-9]*$'),])),\n            })\n        })\n    }\n\n    paymentHeadList(){\n        this.api.getPaymentHeadData().subscribe(data=>{\n            this.paymentHeadDataList = data.data;\n        })\n    }\n\n    graderuleData(){\n        try{\n            this.api.getGradeRule(this.graderuleForm.value, this.percentOfValue).subscribe(data=>{\n                if(data.status === 'success'){\n                    this.successMessage = true ;\n                    this.serverErrorMsg = false ;\n                    this.successMsg = data.message;\n                    setTimeout(() => {\n                        this.handleErrors();\n                        this.router.navigateByUrl(\"pages/graderule/list-graderule\");\n                    },2000)\n                } else {\n                    this.serverErrorMsg = true;\n                    this.successMessage = false;\n                    this.errMsg = data.message;\n                    setTimeout(()=>{\n                        this.handleErrors();\n                    },3000)\n                }\n            })\n        } catch(err){\n            console.log(err);\n        }\n\n    }\n\n    demo(){\n        if((document.getElementById('typeValue') as HTMLInputElement).value != 'Fixed') {\n            this.inputValue = (document.getElementById('percentValue') as HTMLInputElement).value;\n        if(this.inputValue >0 && this.inputValue <= 100 ){\n            this.percentErrorMsg = '';\n            this.errorMsg = '';\n        } else if(this.inputValue.length == 0){\n            this.percentErrorMsg = 'Percent is Required';\n            this.errorMsg = '';\n        } else if(this.inputValue.length >6){\n            this.percentErrorMsg = 'Percent Value is too Large';\n            this.errorMsg = '';\n        } else {\n            this.percentErrorMsg = '';\n            this.errorMsg = 'Enter value is not valid';\n        }\n    }\n        }\n\n// Check For Validation When User Switch The Type\n  switchTypeValidation(inputValue:Number){\n    if(inputValue >0 && inputValue <= 100 ){\n        this.percentErrorMsg = '';\n        this.errorMsg = '';\n    } else if((inputValue).toString().length == 0){\n        this.percentErrorMsg = 'Percent is Required';\n        this.errorMsg = '';\n    } else if((inputValue).toString().length > 6) {\n        this.percentErrorMsg = 'Percent Value is too Large';\n        this.errorMsg = '';\n    } else {\n        this.percentErrorMsg = '';\n        this.errorMsg = 'Enter value is not valid';\n    }\n}\n\nhandleErrors(){\n    this.serverErrorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\nisListAvaliable(){\n    try{\n      this.api.getGradeRuleList().subscribe((data) =>{\n        if(data.status === 'success'){\n          if(data.data.length > 0 && this.util.gradeRuleStatus !== 1){\n            this.router.navigateByUrl(\"/pages/graderule/list-graderule\");\n            this.util.gradeRuleStatus = 0;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n  // Fixed Payment Heads\n  fixedPaymentHeads(){\n      try {\n          this.api.fixedPaymentHeads(undefined).subscribe((data) => {\n              if(data.status === 'success'){\n                 this.fixedPaymentHeadsList = data.data;\n              }\n          })\n      } catch (error) {\n          console.log(error);\n      }\n  }\n\n}\n\n\n","<div class=\"card card-user\">\n    <div class=\"card-header\">\n        <h2 class=\"card-title text-center\">Update Grade Rule Details</h2>\n    </div>\n    <div class=\"card-body\">\n        <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{ errMsg }}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{ successMsg }}</strong>\n         </p>\n      </div>\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"graderuleUpdateForm\" (ngSubmit)=\"graderuleUpdateData()\"\n        novalidate>\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" placeholder=\"Enter Title\" formControlName=\"title\"\n                    >\n                    <div *ngFor=\"let validation of validationMessage.title\">\n                        <div style=\"color: red;margin-left: 1%;\"\n                            *ngIf=\"graderuleUpdateForm.get('title').hasError(validation.type) && (graderuleUpdateForm.get('title').dirty || graderuleUpdateForm.get('title').touched)\"\n                            style=\"color: red;margin-left: 1%;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"graderuleUpdateForm.invalid || this.permissionInfo.search('Edit GradeRule') === -1\">Update</button>\n            <button class=\"btn btn-danger\" routerLink=\"/pages/graderule/list-graderule\">Cancel</button>\n        </form>\n    </div>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { GraderuleApiService } from '../graderule-service/graderule-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-graderule',\n  templateUrl: 'update-graderule.component.html'\n})\n\nexport class UpdateGraderuleComponent implements OnInit {\n\n  graderuleUpdateForm: any;\n  gradeRuleId:any;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  permissionInfo: any;\n\nconstructor(private api:GraderuleApiService, private fb:FormBuilder,private route:ActivatedRoute,private ngZone: NgZone,private router:Router,\n  private util: UtilitiesService){\n    this.gradeRuleId = this.route.snapshot.paramMap.get(\"gradeRuleId\");\n    this.util.moduleExists(this.gradeRuleId,'GradeRule').subscribe((data)=>{\n      if(data.status === 'success'){\n        if(!data.data){\n          this.router.navigateByUrl('/pages/graderule/list-graderule');\n        }\n      }\n    })\n  }\n\n  ngOnInit() {\n    this.addMemberValidation();\n    this.existingData();\n    this.permissionInfo = this.util.permissionRoleInfo;\n        if(this.permissionInfo.search('Edit GradeRule') === -1){\n          this.graderuleUpdateForm.disable();\n        }\n  }\n\n  validationMessage = {\n    'title': [\n      { type: 'required', message: 'Title is required' },\n    ],\n  }\n\n  addMemberValidation() {\n    this.graderuleUpdateForm = this.fb.group({\n      title: new FormControl('',Validators.required),\n    })\n  }\n\n  existingData(){\n    this.api.existingData(this.gradeRuleId).subscribe(data=>{\n        this.graderuleUpdateForm = this.fb.group({\n          title: new FormControl(data.data.title,Validators.required)\n        })\n    })\n  }\n\n  graderuleUpdateData(){\n    try{\n      let cleanUpdateGradeRuleForm = this.util.cleanFormLevelOne(this.graderuleUpdateForm);\n      this.api.updateGadeRule(cleanUpdateGradeRuleForm.value,this.gradeRuleId).subscribe(data=>{\n        if(data.status === 'success') {\n          this.successMessage = true ;\n          this.errorMsg = false ;\n          this.successMsg = data.message;\n          setTimeout(() => {\n            this.handleErrors();\n            this.ngZone.run(()=>this.router.navigateByUrl('/pages/graderule/list-graderule'));\n          },2000)\n        } else {\n          this.successMessage = false ;\n          this.errorMsg = true ;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrors();\n          },3000)\n        }\n      })\n    } catch(err){\n      console.log(err);\n    }\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n\n}","<div class=\"card\">\n    <div class=\"card-header\">\n        <h2 style=\"text-align: center\">Payment Heads List</h2>\n\n        <button [disabled]=\"permissionInfo.search('Create PaymentHeads') === -1\"\n        class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/graderule/add-managePaymentHeads/{{gradeRuleId}}\"\n            style=\"float: right;\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Payment Heads</button>\n\n            <button class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/graderule/list-graderule\"\n            style=\"float: right;\"><i class=\"fa fa-arrow-left\"></i></button>\n\n            <h4>{{ gradeRuleTitle }}</h4>\n    </div>\n\n    <table class=\"table\" style=\"text-align: center;\">\n      <thead class=\" text-primary\">\n          <tr>\n          <th>S.No</th>\n          <th>Title</th>\n          <th>Amount/Rate</th>\n          <th>Category</th>\n          <th>Action</th>\n          </tr>\n      </thead>\n      <tbody *ngFor=\"let list of dataValue; let i = index\">\n          <tr >\n          <td><b>{{i+1}}.</b></td>\n          <td> {{list.paymentHeadName}} </td>\n          <td>{{list.value}}</td>\n          <td >{{list.type}}</td>\n          <td>\n              <a [class.disabled]=\"permissionInfo.search('Edit PaymentHeads') === -1\"\n              routerLink=\"/pages/graderule/update-managePaymentHeads/{{list._id}}/{{gradeRuleId}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>&nbsp;\n\n              <button [disabled]=\"permissionInfo.search('Delete PaymentHeads') === -1\"\n              class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i>\n              </button>&nbsp;\n          </td>\n          </tr>\n          </tbody>\n    </table>\n</div>","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Manage Payment Heads Details</h2>\n   </div>\n   <div class=\"card-body\">\n       <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-danger\" *ngIf=\"serverErrorMsg\">\n                    <strong>{{ errMsg }}</strong>\n                </p>\n            </div>\n            <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                    <strong>{{ successMsg }}</strong>\n                </p>\n            </div>\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"managePaymentForm\" (ngSubmit)=\"managePaymentData()\"\n    novalidate>\n        <div [formGroup]=\"managePaymentForm.get('paymentHead')\">\n            <label class=\"col-sm-6 control-label\"><b>Payment Head:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <select class=\"dropdown dropdown-toggle form-control\" name=\"Payment Heades\" formControlName=\"paymentHeadId\">\n                <option ng-selected=\"true\" value=\"\" disabled>----------Select Payment Head Name----------</option>\n                <option *ngFor=\"let list of paymentHeadDataList\" [ngValue]=\"list._id\" selected>{{ list.title }}</option>\n            </select>\n            <div *ngFor=\"let validation of validationMessage.paymentHeadId\">\n                <div style=\"color: red;margin-left: 1%;\"\n                    *ngIf=\"managePaymentForm.get('paymentHead.paymentHeadId').hasError(validation.type) && (managePaymentForm.get('paymentHead.paymentHeadId').dirty || managePaymentForm.get('paymentHead.paymentHeadId').touched)\"\n                    style=\"color: red;margin-left: 1%;\">\n                    {{ validation.message }}\n                </div>\n            </div>\n        <br>\n            <div class=\"row\">\n                <div class=\"col-md-4\">\n                    <label class=\"col-sm-8 control-label\"><b>Type:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <select class=\"dropdown dropdown-toggle form-control\" id=\"typeValue\" (change)=\"check($event)\" formControlName=\"type\">\n                            <option ng-selected=\"true\" value=\"\" disabled>----------Select Grade Type----------</option>\n                            <option class=\"dropdown-item\"  *ngFor='let type of gradeType' >{{ type }}</option>\n                    </select>\n                  <div *ngFor=\"let validation of validationMessage.type\">\n                        <div style=\"color: red;margin-left: 1%;\"\n                            *ngIf=\"managePaymentForm.get('paymentHead.type').hasError(validation.type) && (managePaymentForm.get('paymentHead.type').dirty || managePaymentForm.get('paymentHead.type').touched)\"\n                            style=\"color: red;margin-left: 1%;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"col-md-4\" *ngIf=\"Fixed\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Enter Amount:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <div class=\"col-sm-offset-2\">\n                            <input class=\"form-control\" type=\"text\" id=\"value\" placeholder=\"Enter Amount\" formControlName=\"value\" required >\n                        </div>\n                    </div>\n                    <div *ngFor=\"let validation of validationMessage.value\">\n                        <div style=\"color: red;margin-left: 1%;\"\n                            *ngIf=\"managePaymentForm.get('paymentHead.value').hasError(validation.type) && (managePaymentForm.get('paymentHead.value').dirty || managePaymentForm.get('paymentHead.value').touched)\"\n                            style=\"color: red;margin-left: 1%;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"col-md-4\" *ngIf=\"Percent\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Enter Percent:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <div class=\"col-sm-offset-2\">\n                            <input class=\"form-control\" type=\"number\" id=\"percentValue\" (input)=\"demo()\" placeholder=\"Enter Percent\" formControlName=\"value\" required>\n                        </div>\n                    </div>\n                    <div><p style=\"color:red;\">{{percentErrorMsg}}</p></div>\n                    <div><p style=\"color:red;\"> {{ errorMsg }}</p></div>\n\n                </div>\n                <div class=\"col-md-4\" *ngIf=\"Percent\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Percent Of:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <select class=\"dropdown dropdown-toggle form-control\" name=\"Payment Heades\" (change)=\"percentOf($event.target.value)\">\n                            <option ng-selected=\"true\" value=\"\" disabled>----Select Percent Of----</option>\n                            <option *ngFor=\"let fixedHeads of fixedPaymentHeadsList\" [value]=\"fixedHeads.value\" selected>{{ fixedHeads.name }}</option>\n                        </select>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n        <button type=\"submit\" class=\"btn btn-success\"[disabled]='managePaymentForm.invalid || errorMsg || percentErrorMsg || permissionInfo.search(\"Create PaymentHeads\") === -1'>Submit</button>\n        <button class=\"btn btn-danger\" routerLink=\"/pages/graderule/list-managePaymentHeads/{{gradeRuleId}}\">Cancel</button>\n    </form>\n</div>\n</div>\n\n","<div class=\"card card-user\">\n      <div class=\"card-header\">\n         <h2 class=\"card-title text-center\">Update Payment Heads</h2>\n      </div>\n      <div class=\"card-body\">\n            <div class=\"col-sm-offset-2\">\n                    <p class=\"alert alert-danger\" *ngIf=\"serverErrorMsg\">\n                        <strong>{{ errMsg }}</strong>\n                    </p>\n                </div>\n                <div class=\"col-sm-offset-2\">\n                    <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                        <strong>{{ successMsg }}</strong>\n                    </p>\n                </div>\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"updateManagePaymentForm\" (ngSubmit)=\"updatePaymentHeads()\"\n       novalidate>\n           <div [formGroup]=\"updateManagePaymentForm.get('paymentHead')\">\n               <label class=\"col-sm-6 control-label\"><b>Payment Head:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n               <select class=\"dropdown dropdown-toggle form-control\" name=\"Payment Heades\" formControlName=\"paymentHeadId\">\n                   <option *ngFor=\"let list of paymentHeadDataList\" [ngValue]=\"list._id\" selected>{{ list.title }}</option>\n               </select>\n               <div *ngFor=\"let validation of validationMessage.paymentHeadId\">\n                   <div style=\"color: red;margin-left: 1%;\"\n                       *ngIf=\"updateManagePaymentForm.get('paymentHead.paymentHeadId').hasError(validation.type) && (updateManagePaymentForm.get('paymentHead.paymentHeadId').dirty || updateManagePaymentForm.get('paymentHead.paymentHeadId').touched)\"\n                       style=\"color: red;margin-left: 1%;\">\n                       {{ validation.message }}\n                   </div>\n               </div>\n           <br>\n           <div class=\"row\">\n                <div class=\"col-md-4\">\n                    <label class=\"col-sm-8 control-label\"><b>Type:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <select class=\"dropdown dropdown-toggle form-control\" id=\"typeValue\" (change)=\"check($event)\" formControlName=\"type\">\n                        <!-- <option ng-selected=\"true\" value=\"\" disabled>----------Select Grade Type----------</option> -->\n                        <option class=\"dropdown-item\"  *ngFor='let type of gradeType' >{{ type }}</option>\n\n                    </select>\n                    <div *ngFor=\"let validation of validationMessage.type\">\n                        <div style=\"color: red;margin-left: 1%;\"\n                            *ngIf=\"updateManagePaymentForm.get('paymentHead.type').hasError(validation.type) && (updateManagePaymentForm.get('paymentHead.type').dirty || updateManagePaymentForm.get('paymentHead.type').touched)\"\n                            style=\"color: red;margin-left: 1%;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"col-md-4\" *ngIf=\"Fixed\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Enter Amount:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <div class=\"col-sm-offset-2\">\n                            <input class=\"form-control\" type=\"text\" id=\"value\" placeholder=\"Enter Amount\" formControlName=\"value\" >\n                        </div>\n                    </div>\n                    <div *ngFor=\"let validation of validationMessage.value\">\n                        <div style=\"color: red;margin-left: 1%;\"\n                            *ngIf=\"updateManagePaymentForm.get('paymentHead.value').hasError(validation.type) && (updateManagePaymentForm.get('paymentHead.value').dirty || updateManagePaymentForm.get('paymentHead.value').touched)\"\n                            style=\"color: red;margin-left: 1%;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"col-md-4\" *ngIf=\"Percent\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Enter Percent:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <div class=\"col-sm-offset-2\">\n                            <input class=\"form-control\" type=\"number\" id=\"percentValue\" (input)=\"demo()\" placeholder=\"Enter Percent\" formControlName=\"value\" required>\n                        </div>\n                    </div>\n                    <div><p style=\"color:red;\">{{percentErrorMsg}}</p></div>\n                    <div><p style=\"color:red;\"> {{ errorMsg }}</p></div>\n\n                </div>\n                <div class=\"col-md-4\" *ngIf=\"Percent\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Percent Of:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <select class=\"dropdown dropdown-toggle form-control\" name=\"Payment Heades\" (change)=\"percentOf($event.target.value)\" id=\"percentOfValue\">\n                            <option ng-selected=\"true\" value=\"\" disabled>----Select Percent Of----</option>\n                            <option *ngFor=\"let fixedHeads of fixedPaymentHeadsList\" [value]=\"fixedHeads.value\" selected>{{ fixedHeads.name }}</option>\n                        </select>\n                    </div>\n\n                </div>\n            </div>\n           </div>\n           <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"updateManagePaymentForm.invalid || errorMsg || percentErrorMsg || permissionInfo.search('Edit PaymentHeads') === -1\">Update</button>\n           <button class=\"btn btn-danger\" routerLink=\"/pages/graderule/list-managePaymentHeads/{{gradeRuleId}}\">Cancel</button>\n   </form>\n   </div>\n   </div>\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { GraderuleComponent } from './graderule.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListGraderuleComponent } from './list-graderule/list-graderule.component';\nimport { AddGraderuleComponent } from './add-graderule/add-graderule.component';\nimport { UpdateGraderuleComponent } from './update-graderule/update-graderule.component';\nimport { ListManagePaymentHeadsComponent } from './managePaymentHeads/list-managePaymentHeads/list-managePaymentHeads.component';\nimport { AddManagePaymentHeadsComponent } from './managePaymentHeads/add-managePaymentHeads/add-managePaymentHeads.component';\nimport {UpdateManagePaymentHeadsComponent } from './managePaymentHeads/update-managePaymentHeads/update-managePaymentHeads.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : GraderuleComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-graderule',\n        component: ListGraderuleComponent,\n      },\n      {\n        path: 'list-managePaymentHeads/:gradeRuleId',\n        component:  ListManagePaymentHeadsComponent\n      },\n      {\n        path: 'add-managePaymentHeads/:gradeRuleId',\n        component: AddManagePaymentHeadsComponent\n      },\n      {\n        path: 'update-managePaymentHeads/:paymentHeadId/:gradeRuleId',\n        component: UpdateManagePaymentHeadsComponent\n      },\n      {\n        path: 'add-graderule',\n        component: AddGraderuleComponent\n      },\n      {\n        path: 'update-graderule/:gradeRuleId',\n        component: UpdateGraderuleComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-graderule',\n        pathMatch:'full',\n      },\n\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class GraderuleRoutingModule { }","import { Component, OnInit, NgZone, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { GraderuleApiService } from '../../graderule-service/graderule-api.service';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n\n@Component ({\n    selector: 'app-list-managePaymentHeads',\n    templateUrl: './list-managePaymentHeads.component.html',\n    styleUrls: ['./list-managePaymentHeads.component.scss']\n})\n\nexport class ListManagePaymentHeadsComponent implements OnInit, OnDestroy{\n  permissionInfo: any;\n  ngOnDestroy(): void {\n    (document.getElementById('headerCompanyDropDown')as HTMLInputElement).removeAttribute('disabled');\n  }\n\n    showCard = {};\n    leaveListData = new Array();\n    companyShowData = [];\n    gradeRuleId;\n    dataValue:any [];\n    paymentHeadId;\n    companyName: String;\n    gradeRuleTitle: any;\n\n    constructor(private api:GraderuleApiService,\n      private fb:FormBuilder,\n      private route:ActivatedRoute,\n      private ngZone: NgZone,\n      private router:Router,\n      private util: UtilitiesService\n      ){}\n\n    ngOnInit(){\n        this.gradeRuleId = this.route.snapshot.paramMap.get(\"gradeRuleId\");\n        this.listGradeRule();\n        (document.getElementById('headerCompanyDropDown')as HTMLInputElement).setAttribute('disabled','disabled');\n        this.permissionInfo = this.util.permissionRoleInfo;\n    }\n\n    listGradeRule(){\n        this.api.existingData(this.gradeRuleId).subscribe(data=>{\n            this.gradeRuleTitle = data.data.title\n            this.dataValue = data.data.paymentHeads;\n        })\n    }\n\n    showConfirmationMessage(paymentHeadsId:string){\n        const swalWithBootstrapButtons = Swal.mixin({\n          customClass: {\n            confirmButton: 'btn btn-success',\n            cancelButton: 'btn btn-danger'\n          },\n          buttonsStyling: false\n        })\n        swalWithBootstrapButtons.fire({\n          title: 'Are you sure?',\n          text: \"You want to delete it\",\n          type: 'warning',\n          showCancelButton: true,\n          confirmButtonText: 'Yes',\n          cancelButtonText: 'No',\n          reverseButtons: true\n        }).then((result) => {\n          if (result.value) {\n            this.api.removeGradeData(paymentHeadsId,this.gradeRuleId).subscribe((data)=>{\n            swalWithBootstrapButtons.fire(\n              'Deleted!',\n              data.message,\n              'success'\n            )\n            this.listGradeRule();\n          })\n          } else if (\n            result.dismiss === Swal.DismissReason.cancel\n          ) {\n            swalWithBootstrapButtons.fire(\n              'Cancelled',\n              'Your list data safe',\n              'error'\n            )\n          }\n        })\n    }\n\n}","import { Component, OnInit,NgZone, OnDestroy } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router,ActivatedRoute } from '@angular/router';\nimport { GraderuleApiService } from '../../graderule-service/graderule-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n    selector: 'app-add-managePaymentHeads',\n    templateUrl: './add-managePaymentHeads.component.html'\n})\n\nexport class AddManagePaymentHeadsComponent implements OnInit,OnDestroy {\n  permissionInfo: any;\n  fixedPaymentHeadsList = [];\n  ngOnDestroy(): void {\n    (document.getElementById('headerCompanyDropDown')as HTMLInputElement).removeAttribute('disabled');\n  }\n\n    paymentHeadDataList: any;\n    managePaymentForm: any;\n    Fixed: Boolean =false;\n    Percent: Boolean = false;\n    inputValue:any;\n    errorMsg: String;\n    percentErrorMsg: String;\n    gradeRuleId:any;\n    gradeType = ['Fixed','Percent'];\n    successMsg: String;\n    successMessage: boolean = false;\n    errMsg: String;\n    serverErrorMsg: boolean = false;\n    percentOfValue = 'basicSalary';\n\n    constructor(private api:GraderuleApiService, private fb:FormBuilder,private route:ActivatedRoute,private ngZone: NgZone,private router:Router,\n      private util: UtilitiesService){}\n\n    // constructor(private api:GraderuleApiService,private fb:FormBuilder,public route:Router,){}\n\n    ngOnInit() {\n      this.gradeRuleId = this.route.snapshot.paramMap.get(\"gradeRuleId\");\n      this.addMemberValidation();\n      this.fixedPaymentHeads();\n      this.paymentHeadList();\n      (document.getElementById('headerCompanyDropDown')as HTMLInputElement).setAttribute('disabled','disabled');\n      this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Create PaymentHeads') === -1){\n        this.managePaymentForm.disable();\n      }\n    }\n\n    check(name){\n\n      let dynamicValidation = {\n        fixed: [\n          Validators.required,\n          Validators.maxLength(8),\n          Validators.pattern('^[0-9]*$')\n        ],\n        percent: [\n          Validators.required,\n          Validators.maxLength(8),\n          Validators.pattern(/^\\d{0,2}(?:\\.\\d{0,2})?$/)\n        ]\n      }\n\n      try{\n        let gradeType = name.target.options[name.target.options.selectedIndex].text;\n        if(gradeType == 'Fixed')\n        {\n            this.Fixed = true;\n            this.Percent = false;\n            this.errorMsg = '';\n            this.percentErrorMsg = '';\n\n        this.managePaymentForm.get('paymentHead.value').setValidators(dynamicValidation['fixed']);\n        this.managePaymentForm.get('paymentHead.value').updateValueAndValidity();\n\n        } else if (gradeType == 'Percent') {\n            this.Percent = true;\n            this.Fixed = false;\n            if(this.managePaymentForm.get('paymentHead.value').value){\n                this.switchTypeValidation(this.managePaymentForm.get('paymentHead.value').value);\n            }\n\n            this.managePaymentForm.get('paymentHead.value').setValidators(dynamicValidation['percent']);\n            this.managePaymentForm.get('paymentHead.value').updateValueAndValidity();\n        }\n      }catch(err){\n        console.log(err);\n      }\n    }\n\n    addMemberValidation() {\n      try{\n        this.managePaymentForm = this.fb.group({\n          paymentHead: new FormGroup({\n            paymentHeadId: new FormControl('',Validators.required),\n            type: new FormControl('',Validators.required),\n            value: new FormControl('',Validators.compose([Validators.required,\n              Validators.pattern('^[0-9]*$'),])),\n          })\n        })\n      }catch(err){\n        console.log(err)\n      }\n    }\n\n    paymentHeadList(){\n      this.api.filterPaymentHeads(this.gradeRuleId).subscribe(data=>{\n        this.paymentHeadDataList = data.data;\n      })\n    }\n\n    managePaymentData(){\n      try{\n        this.api.addGradules(this.managePaymentForm.value,this.gradeRuleId,this.percentOfValue).subscribe(data=>{\n          if(data.status === 'success') {\n            this.successMessage = true ;\n            this.serverErrorMsg = false ;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n              this.router.navigateByUrl(`pages/graderule/list-managePaymentHeads/${this.gradeRuleId}`);\n            },2000)\n          } else {\n            this.serverErrorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(()=>{\n              this.handleErrors();\n            },3000)\n          }\n        })\n      }catch(err){\n        console.log(err);\n      }\n\n    }\n\n    validationMessage = {\n      'value': [\n        { type: 'required', message: 'Amount is Required' },\n        { type: 'maxlength', message: 'Amount is too Large' },\n        { type: 'pattern', message: 'Amount not valid' },\n      ],\n      'paymentHeadId':[\n          { type: 'required', message: 'Payment Head is Required' },\n      ],\n      'type': [\n        { type: 'required', message: 'Type  is Required' },\n      ],\n  }\n\n  handleErrors(){\n    this.serverErrorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n\n    demo(){\n      if((document.getElementById('typeValue') as HTMLInputElement).value != 'Fixed') {\n          this.inputValue = (document.getElementById('percentValue') as HTMLInputElement).value;\n      if(this.inputValue >0 && this.inputValue <= 100 ){\n          this.percentErrorMsg = '';\n          this.errorMsg = '';\n      } else if(this.inputValue.length == 0){\n          this.percentErrorMsg = 'Percent is Required';\n          this.errorMsg = '';\n      } else {\n          this.percentErrorMsg = '';\n          this.errorMsg = 'Enter value is not valid';\n      }\n  }\n      }\n\n    // Check For Validation When User Switch The Type\n  switchTypeValidation(inputValue:Number){\n    if(inputValue >0 && inputValue <= 100 ){\n        this.percentErrorMsg = '';\n        this.errorMsg = '';\n    } else if((inputValue).toString().length == 0){\n        this.percentErrorMsg = 'Percent is Required';\n        this.errorMsg = '';\n    } else if((inputValue).toString().length > 6) {\n        this.percentErrorMsg = 'Percent Value is too Large';\n        this.errorMsg = '';\n    } else {\n        this.percentErrorMsg = '';\n        this.errorMsg = 'Enter value is not valid';\n    }\n}\n\n// Fixed Payment Heads\nfixedPaymentHeads(){\n  try {\n      this.api.fixedPaymentHeads(this.gradeRuleId).subscribe((data) => {\n          if(data.status === 'success'){\n             this.fixedPaymentHeadsList = data.data;\n          }\n      })\n  } catch (error) {\n      console.log(error);\n  }\n}\n\npercentOf(value){\n  this.percentOfValue = value;\n}\n\n}","import { Component, OnInit, NgZone, OnDestroy} from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { GraderuleApiService } from '../../graderule-service/graderule-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-managePaymentHeads',\n  templateUrl: 'update-managePaymentHeads.component.html'\n})\n\nexport class UpdateManagePaymentHeadsComponent implements OnInit,OnDestroy {\n  permissionInfo: any;\n  fixedPaymentHeadsList: any;\n  percentOfValue: any;\n  routePercentOfValue: any;\n  ngOnDestroy(): void {\n    (document.getElementById('headerCompanyDropDown')as HTMLInputElement).removeAttribute('disabled');\n  }\n\n  gradeRuleId;\n  updateManagePaymentForm: any;\n  paymentHeadDataList: any;\n  paymentHeadId;\n  existingGradeRule: any;\n  existingPaymentHeadId: any;\n  existingPaymentHeadName: any;\n  gradeType = ['Fixed','Percent'];\n  Fixed: Boolean = false;\n  Percent: Boolean = false;\n  percentErrorMsg: String;\n  errorMsg: String;\n  inputValue;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  serverErrorMsg: boolean = false;\n\n\n\n  constructor(\n    public fb: FormBuilder,private api:GraderuleApiService,\n    private router: Router, private ngZone: NgZone, private route: ActivatedRoute,\n    private util: UtilitiesService) { }\n\n  ngOnInit() {\n    this.paymentHeadId = this.route.snapshot.paramMap.get(\"paymentHeadId\");\n    this.gradeRuleId = this.route.snapshot.paramMap.get(\"gradeRuleId\");\n    this.paymentHeadList();\n    this.addMemberValidation();\n    this.existing();\n    this.fixedPaymentHeadList();\n    (document.getElementById('headerCompanyDropDown')as HTMLInputElement).setAttribute('disabled','disabled');\n    this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Edit PaymentHeads') === -1){\n        this.updateManagePaymentForm.disable();\n      }\n  }\n\n  existing(){\n    try{\n      this.api.existingData(this.gradeRuleId).subscribe(data=>{\n        if(data.status === 'success'){\n          this.existingGradeRule = data.data.paymentHeads;\n          this.existingGradeRule.forEach((items) => {\n            if(items._id == this.paymentHeadId){\n              if(items.type === 'Percent'){\n                this.Percent = true;\n                this.Fixed = false;\n                this.percentOfValue = items.percentOfValue;\n                this.percentOfFunction(items.percentOfValue);\n                this.errorMsg = '';\n                this.percentErrorMsg = '';\n                this.updateManagePaymentForm = this.fb.group({\n                  paymentHead: new FormGroup({\n                    paymentHeadId: new FormControl(items.paymentHeadId),\n                    type: new FormControl(items.type),\n                    value: new FormControl(items.value, Validators.compose([Validators.required,\n                      Validators.maxLength(8),\n                      Validators.pattern(/^\\d{0,2}(?:\\.\\d{0,2})?$/),])),\n                  })\n                })\n              } else {\n                this.Percent = false;\n                this.Fixed = true;\n                this.updateManagePaymentForm = this.fb.group({\n                  paymentHead: new FormGroup({\n                    paymentHeadId: new FormControl(items.paymentHeadId),\n                    type: new FormControl(items.type),\n                    value: new FormControl(items.value, Validators.compose([Validators.required,\n                      Validators.maxLength(8),\n                      Validators.pattern('^[0-9]*$'),])),\n                  })\n                })\n              }\n              this.existingPaymentHeadId = items._id;\n              this.existingPaymentHeadName = items.paymentHeadName\n            } else {\n              return;\n            }\n          })\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n  paymentHeadList(){\n    this.api.getPaymentHeadData().subscribe(data=>{\n      this.paymentHeadDataList = data.data;\n    })\n  }\n\n  // Update Payment Heads\n  updatePaymentHeads(){\n    try{\n\n      this.api.updatePaymentHeads(this.updateManagePaymentForm.value,this.paymentHeadId,this.gradeRuleId,this.percentOfValue,this.Percent).subscribe(data => {\n        if(data.status === 'success'){\n          this.successMessage = true ;\n          this.serverErrorMsg = false ;\n          this.successMsg = data.message;\n          setTimeout(() => {\n              this.router.navigateByUrl(\"pages/graderule/list-graderule\");\n          },1000)\n        } else {\n          this.serverErrorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n        }\n      })\n    } catch(err){\n      console.log(err);\n    }\n  }\n\n  addMemberValidation() {\n    try{\n      this.updateManagePaymentForm = this.fb.group({\n        paymentHead: new FormGroup({\n          paymentHeadId: new FormControl('',Validators.required),\n          type: new FormControl('',Validators.required),\n          value: new FormControl('',Validators.compose([Validators.required,\n            Validators.maxLength(8),\n            Validators.pattern(/^\\d{0,2}(?:\\.\\d{0,2})?$/),])),\n        })\n      })\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n  check(name){\n    let dynamicValidation = {\n      fixed: [\n        Validators.required,\n        Validators.maxLength(8),\n        Validators.pattern('^[0-9]*$')\n      ],\n      percent: [\n        Validators.required,\n        Validators.maxLength(8),\n        Validators.pattern(/^\\d{0,2}(?:\\.\\d{0,2})?$/)\n      ]\n    }\n    let gradeType = name.target.options[name.target.options.selectedIndex].text;\n    if(gradeType == 'Fixed')\n    {\n        this.Fixed = true;\n        this.Percent = false;\n        this.errorMsg = '';\n        this.percentErrorMsg = '';\n\n        this.updateManagePaymentForm.get('paymentHead.value').setValidators(dynamicValidation['fixed']);\n        this.updateManagePaymentForm.get('paymentHead.value').updateValueAndValidity();\n\n    } else if (gradeType == 'Percent') {\n        this.Percent = true;\n        this.Fixed = false;\n        if(this.updateManagePaymentForm.get('paymentHead.value').value){\n            this.switchTypeValidation(this.updateManagePaymentForm.get('paymentHead.value').value);\n        }\n        this.updateManagePaymentForm.get('paymentHead.value').setValidators(dynamicValidation['percent']);\n        this.updateManagePaymentForm.get('paymentHead.value').updateValueAndValidity();\n    }\n}\n\ndemo(){\n  if((document.getElementById('typeValue') as HTMLInputElement).value != 'Fixed') {\n      this.inputValue = (document.getElementById('percentValue') as HTMLInputElement).value;\n  if(this.inputValue >0 && this.inputValue <= 100 ){\n      this.percentErrorMsg = '';\n      this.errorMsg = '';\n  } else if(this.inputValue.length == 0){\n      this.percentErrorMsg = 'Percent is Required';\n      this.errorMsg = '';\n  } else if(this.inputValue.length >6){\n      this.percentErrorMsg = 'Percent Value is too Large';\n      this.errorMsg = '';\n  } else {\n      this.percentErrorMsg = '';\n      this.errorMsg = 'Enter value is not valid';\n  }\n}\n  }\n\n// Check For Validation When User Switch The Type\nswitchTypeValidation(inputValue:Number){\n  if(inputValue >0 && inputValue <= 100 ){\n      this.percentErrorMsg = '';\n      this.errorMsg = '';\n  } else if((inputValue).toString().length == 0){\n      this.percentErrorMsg = 'Percent is Required';\n      this.errorMsg = '';\n  } else if((inputValue).toString().length > 6) {\n      this.percentErrorMsg = 'Percent Value is too Large';\n      this.errorMsg = '';\n  } else {\n      this.percentErrorMsg = '';\n      this.errorMsg = 'Enter value is not valid';\n  }\n}\n\nvalidationMessage = {\n  'value': [\n    { type: 'required', message: 'Amount is Required' },\n    { type: 'maxlength', message: 'Amount is too Large' },\n    { type: 'pattern', message: 'Amount not valid' },\n  ],\n  'paymentHeadId':[\n      { type: 'required', message: 'Payment Head is Required' },\n  ],\n  'type': [\n    { type: 'required', message: 'Type  is Required' },\n  ],\n}\n\nfixedPaymentHeadList(){\n  this.api.fixedPaymentHeads(this.gradeRuleId).subscribe((data) => {\n    if(data.status === 'success'){\n       this.fixedPaymentHeadsList = data.data;\n    }\n})\n}\n\npercentOf(value){\n  this.percentOfValue = value;\n}\n\npercentOfFunction = function percentOfFunction(percentValue) {\n  setTimeout(() => {\n    (document.getElementById('percentOfValue') as HTMLInputElement).value = percentValue;\n  },200);\n}\n\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GraderuleRoutingModule } from './graderule-routing.module';\nimport { GraderuleComponent } from './graderule.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListGraderuleComponent } from './list-graderule/list-graderule.component';\nimport { AddGraderuleComponent } from './add-graderule/add-graderule.component';\nimport { UpdateGraderuleComponent } from './update-graderule/update-graderule.component';\nimport { ListManagePaymentHeadsComponent } from './managePaymentHeads/list-managePaymentHeads/list-managePaymentHeads.component';\nimport { AddManagePaymentHeadsComponent } from './managePaymentHeads/add-managePaymentHeads/add-managePaymentHeads.component';\nimport {UpdateManagePaymentHeadsComponent } from './managePaymentHeads/update-managePaymentHeads/update-managePaymentHeads.component';\n\n\n@NgModule({\n  declarations: [\n    GraderuleComponent,\n    ListGraderuleComponent,\n    AddGraderuleComponent,\n    UpdateGraderuleComponent,\n    ListManagePaymentHeadsComponent,\n    AddManagePaymentHeadsComponent,UpdateManagePaymentHeadsComponent\n  ],\n  \n  imports: [\n    CommonModule,\n    GraderuleRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\n\nexport class GraderuleModule { }\n"]}