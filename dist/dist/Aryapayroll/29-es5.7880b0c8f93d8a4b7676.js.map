{"version":3,"sources":["webpack:///src/app/users/users.component.ts","webpack:///src/app/users/users.component.html","webpack:///src/app/users/login/login.component.html","webpack:///src/app/users/login/login.component.ts","webpack:///src/app/users/register/register.component.html","webpack:///src/app/users/register/register.component.ts","webpack:///src/app/users/generate-password/generate-password.component.html","webpack:///src/app/users/forgot-password/forgot-password.component.html","webpack:///src/app/users/reset-password/reset-password.component.html","webpack:///src/app/users/users-routing.module.ts","webpack:///src/app/users/reset-password/reset-password.component.ts","webpack:///src/app/users/forgot-password/forgot-password.component.ts","webpack:///src/app/users/generate-password/generate-password.component.ts","webpack:///src/app/users/users.module.ts"],"names":["UsersComponent","LoginComponent","api","fb","ngZone","router","permissionAPI","util","flag","loginFlag","adminLogin","userLogin","validationErrorMessage","type","message","this","loginData","loginForm","group","email","required","password","err","console","log","valid","submitLogin","value","subscribe","data","status","localStorage","setItem","JSON","stringify","user","local","_id","successMessage","getCompanyList","permissionDetails","permissionRoleInfo","errorMessageServer","setTimeout","handleErrors","getListData","company","length","run","navigateByUrl","sessionStorage","error","login","RegisterComponent","spinner","signupFlag","successFlag","submitData","registerForm","compose","pattern","show","submitSignup","errMessage","hide","register","ResetPasswordComponent","ForgotPasswordComponent","GeneratePasswordComponent","UsersModule","UsersRoutingModule","routes","path","component","children","route","apiService","passwordFlag","submitPassword","snapshotParam","snapshot","paramMap","get","set","setPasswordForm","minLength","maxLength","passwordConfirmation","compare","fieldName","submitPasswordData","successMsg","setPassword","forgotFlag","submitEmail","forgotPassForm","submitForgotPasswordData","forgotPassword","submitResetPassword","resetPasswordForm","submitResetPasswordData","resetPassword","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss']\n})\nexport class UsersComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<router-outlet></router-outlet>\n","<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n  <div class=\"card-body\">\n    <div class=\"card-header\">\n      <h1 class=\"card-title\">Login</h1>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-danger\" *ngIf=\"flag\">\n        <strong>{{ errorMessageServer }}</strong>\n      </p>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"loginFlag\">\n        <strong>{{ successMessage }}</strong>\n      </p>\n    </div>\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"loginForm\" (ngSubmit)=\"login()\" novalidate>\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Email:</b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Your Email\"\n            formControlName=\"email\">\n          <div *ngFor=\"let validation of validationErrorMessage.email\">\n            <div style=\"color: red;margin-left: 14px;\"\n              *ngIf=\"loginForm.get('email').hasError(validation.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Password:</b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"password\" id=\"inputPassword\" placeholder=\"Enter Your Password\"\n            formControlName=\"password\">\n\n          <!-- Check for password validation -->\n          <div *ngFor=\"let validation of validationErrorMessage.password\">\n            <div\n              *ngIf=\"loginForm.get('password').hasError(validation.type) && (loginForm.get('password').dirty || loginForm.get('password').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n          <a class=\"text-link\" id=\"forgot\" routerLink=\"../forgot-password\"\n            routerLinkActive=\"active\">Forgot-Password?</a>\n        </div>\n\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"loginForm.invalid\">Login</button>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <section>Already have an account? &nbsp;<a class=\"text-link\" routerLink=\"../register\"\n              routerLinkAcitve=\"active\">REGISTER</a></section>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport { Router } from '@angular/router';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  flag: boolean = false;\n  errorMessageServer: String;\n  successMessage: String;\n  loginFlag: boolean = false;\n  successMsg: String;\n  adminLogin: boolean = false;\n  userLogin: boolean = false;\n\n  ngOnInit() {    //Calling validation method\n    this.loginData();\n  }\n\n  constructor(private api: ApiService,\n     public fb: FormBuilder,\n     private ngZone: NgZone,\n     private router: Router,\n     private permissionAPI: ApiService,\n     private util: UtilitiesService\n     ) { }\n\n  //create method for validation\n  loginData() {\n    try {\n      this.loginForm = this.fb.group({\n        email:new FormControl(null, Validators.required),\n        password:new FormControl(null,Validators.required),\n      })\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Create method for submit form value and calling API.\n  login() {\n    try {\n      if (this.loginForm.valid) {\n        this.api.submitLogin(this.loginForm.value).subscribe((data) => {\n          if (data.status === \"success\"|| data.status === 200) {\n              localStorage.setItem('myVal',JSON.stringify(data.user.local.email));\n              localStorage.setItem(\"token\", data.user._id);\n              this.loginFlag = true;\n              this.successMessage = data.message;\n              this.flag = false;\n              this.getCompanyList();\n              this.permissionAPI.permissionDetails().subscribe((data)=>{\n                if(data.status === 'success'){\n                  this.util.permissionRoleInfo = data.data;\n                }\n              })\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.flag = true;\n            this.errorMessageServer = data.message;\n            this.loginFlag = false;\n            setTimeout(() => {\n              this.handleErrors();\n            }, 4000);\n          }\n        });\n      }\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  getCompanyList(){\n   try{\n    this.api.getListData().subscribe((data)=>{\n      if(data.status === \"success\" || data.status === 200){\n        if (data.company.length === 0) {\n         this.ngZone.run(() => this.router.navigateByUrl('/pages/company/add-company'));\n          sessionStorage.setItem('companyId',undefined);\n        } else {\n          sessionStorage.setItem(\"companyId\",data.company[0]._id);\n          localStorage.setItem('companyId',data.company[0]._id)\n          setTimeout(() => {\n            this.ngZone.run(() => this.router.navigateByUrl('/pages/dashboard/company-list'));\n          }, 500)\n        }\n      }\n    })\n   }\n   catch(err){\n     console.log(err.message);\n   }\n  }\n\n  //For print Validation and error message.\n  validationErrorMessage = {\n    'email': [\n      { type: 'required', message: 'Email is required' },\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required' },\n    ],\n  }\n\n  handleErrors(){\n    try {\n      this.loginFlag = false;\n      this.successMessage = '';\n      this.errorMessageServer = '';\n      this.flag = false;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n","<ngx-spinner\nbdColor=\"rgba(51,51,51,0.8)\"\nsize=\"medium\"\ncolor=\"#fff\"\ntype=\"ball-scale-ripple-multiple\"\n>\n<p style=\"font-size: 20px; color: white\">Loading...</p>\n</ngx-spinner>\n<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n  <div class=\"card-body\">\n    <div class=\"card-header\">\n      <h1 class=\"card-title\">Register</h1>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"!successFlag\">\n        <strong>{{ successMessage }}</strong>\n      </p>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-danger\" *ngIf=\"!signupFlag\">\n        <strong>{{ errMessage }}</strong>\n      </p>\n    </div>\n\n\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n      <div class=\"form-group\">\n        <label for=\"inputEmail\" class=\"col-sm-6 control-label\"><b>Enter Your Email: </b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Your Email\"\n            formControlName=\"email\">\n          <div *ngFor=\"let validation of validationErrorMessage.email\">\n            <div\n              *ngIf=\"registerForm.get('email').hasError(validation.type) && (registerForm.get('email').dirty || registerForm.get('email').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" [disabled]=\"registerForm.pristine || registerForm.invalid\"\n            class=\"btn btn-success\">Register</button>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <section>Already have an account?&nbsp;<a class=\"text-link\" routerLink=\"../login\">LOGIN</a></section>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ApiService } from 'src/app/services/api.service';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm: FormGroup;\n  signupFlag: boolean = true;\n  errMessage: string;\n  successFlag:boolean = true;\n  successMessage:string;\n\n  ngOnInit() { //Calling validation method\n    this.submitData();\n  }\n\n  constructor(private api: ApiService, public fb: FormBuilder, private ngZone: NgZone,\n     private router: Router,\n     private spinner: NgxSpinnerService) { }\n\n  //Create method for validation\n  submitData() {\n    try {\n      this.registerForm = this.fb.group({\n        email: new FormControl(null, Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n        ])),\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Create method for submit input value and calling API\n  register() {\n    try {\n      this.spinner.show();\n      //console.log(this.registerForm.value);\n      this.api.submitSignup(this.registerForm.value).subscribe((data) => {\n        //Manage server status when giving error\n        if (data.status === \"error\" || data.status === 404) {\n          this.signupFlag = false;\n          this.errMessage = data.message;\n          this.successFlag = true;\n          this.spinner.hide();\n          setTimeout(() => {\n            this.handleErrors();\n          }, 5000);\n        }\n        //Manage server status when giving success\n        else if (data.status === \"success\" || data.status === 200) {\n          this.successFlag = false;\n          this.successMessage = data.message;\n          this.signupFlag = true;\n          this.spinner.hide();\n          setTimeout(()=>{\n            this.ngZone.run(() => this.router.navigateByUrl('/users/login'));\n            this.handleErrors();\n          },10000)\n        }\n      });\n    }\n    catch (err) {\n      console.log(err);\n    }\n\n  }\n\n  //For print validation and error message\n  validationErrorMessage = {\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ],\n\n  }\n\n  handleErrors(){\n    try {\n      this.signupFlag = false;\n      this.errMessage = '';\n      this.successFlag = true;\n      this.successMessage = '';\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n","<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n  <div class=\"card-body\">\n    <div class=\"card-header\">\n      <h2 class=\"card-title\">Set Password</h2>\n    </div>\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-danger\" *ngIf=\"!passwordFlag\">\n          <strong>{{ errMessage }}</strong>\n        </p>\n    </div>\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"successFlag\">\n          <strong>{{ successMsg }}</strong>\n        </p>\n    </div>\n<div>\n  <form  [formGroup]=\"setPasswordForm\" (ngSubmit)=\"setPassword()\">\n    <div class=\"form-group\">\n      <label class=\"col-sm-6 control-label\"><b>Password:</b></label>\n      <input type=\"password\" formControlName=\"password\" placeholder=\"Enter Password\" class=\"form-control\"  />\n      <div *ngFor=\"let validation of validationErrorMessage.password\">\n        <div\n          *ngIf=\"setPasswordForm.get('password').hasError(validation.type) && (setPasswordForm.get('password').dirty || setPasswordForm.get('password').touched)\"\n          style=\"color: red;margin-left: 14px;\">\n          {{ validation.message }}\n     </div>\n     </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"col-sm-8 control-label\"><b>Confirm Password:</b></label>\n      <input type=\"password\" formControlName=\"passwordConfirmation\" placeholder=\"Confirm Password\" class=\"form-control\"  />\n      <div *ngFor=\"let validation of validationErrorMessage.passwordConfirmation\">\n        <div\n          *ngIf=\"setPasswordForm.get('passwordConfirmation').hasError(validation.type) && (setPasswordForm.get('passwordConfirmation').dirty || setPasswordForm.get('passwordConfirmation').touched)\"\n          style=\"color: red;margin-left: 14px;\">\n          {{ validation.message }}\n        </div>\n      </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" class=\"btn btn-success\"\n            [disabled]=\"setPasswordForm.pristine || setPasswordForm.invalid\" >Submit\n            Password</button>\n        </div>\n      </div>\n  </form>\n  </div>\n  </div>\n  </div>","<ngx-spinner\nbdColor=\"rgba(51,51,51,0.8)\"\nsize=\"medium\"\ncolor=\"#fff\"\ntype=\"ball-scale-ripple-multiple\"\n>\n<p style=\"font-size: 20px; color: white\">Loading...</p>\n</ngx-spinner>\n<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n    <div class=\"card-body\">\n        <div class=\"card-header\">\n            <h2 class=\"card-title\">Forgot-Password</h2>\n        </div>\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-success\" *ngIf=\"flag\">\n                <strong>{{ successMsg }}</strong>\n            </p>\n        </div>\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"!forgotFlag\">\n                <strong>{{ errMessage }}</strong>\n            </p>\n        </div>\n\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"forgotPassForm\" (ngSubmit)=\"forgotPassword()\">\n            <div class=\"form-group\">\n                <label for=\"inputEmail\" class=\"col-sm-6 control-label\"><b>Email: </b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Your Registered Email\"\n                        formControlName=\"email\">\n                    <div *ngFor=\"let validation of validationErrorMessage.email\">\n                        <div *ngIf=\"forgotPassForm.get('email').hasError(validation.type) && (forgotPassForm.get('email').dirty || forgotPassForm.get('email').touched)\"\n                        style=\"color: red;margin-left: 14px;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <button type=\"submit\" [disabled]=\"forgotPassForm.pristine || forgotPassForm.invalid\"\n                        class=\"btn btn-success\">Submit</button>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <section>Go Back?&nbsp;<a class=\"text-link\" routerLink=\"../login\">LOGIN</a>\n                    </section>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>","<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n  <div class=\"card-body\">\n    <div class=\"card-header\">\n      <h2 class=\"card-title\">Reset Password</h2>\n    </div>\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-danger\" *ngIf=\"!passwordFlag\">\n        <strong>{{ errMessage }}</strong>\n      </p>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"successFlag\">\n        <strong>{{ successMsg }}</strong>\n      </p>\n    </div>\n    <div>\n      <form  [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"resetPassword()\" novalidate>\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>Password:</b></label>\n          <input type=\"password\" formControlName=\"password\" placeholder=\"Enter Password\" class=\"form-control\" />\n          <div *ngFor=\"let validation of validationErrorMessage.password\">\n            <div\n              *ngIf=\"resetPasswordForm.get('password').hasError(validation.type) && (resetPasswordForm.get('password').dirty || resetPasswordForm.get('password').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-8 control-label\"><b>Confirm Password:</b></label>\n          <input type=\"password\" formControlName=\"passwordConfirmation\" placeholder=\"Confirm Password\" class=\"form-control\" />\n          <div *ngFor=\"let validation of validationErrorMessage.passwordConfirmation\">\n            <div\n              *ngIf=\"resetPasswordForm.get('passwordConfirmation').hasError(validation.type) && (resetPasswordForm.get('passwordConfirmation').dirty || resetPasswordForm.get('passwordConfirmation').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <div class=\"col-sm-offset-2 col-sm-10\">\n            <button type=\"submit\" [disabled]=\"!resetPasswordForm.valid\" class=\"btn btn-success\">Submit</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>","import { NgModule, Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { UsersComponent } from './users.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { GeneratePasswordComponent } from './generate-password/generate-password.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes : Routes= [\n  {\n    path:'',\n    component : UsersComponent,\n    children: [\n    {\n      path: 'login',\n      component: LoginComponent,\n    },\n    {\n      path: 'register',\n      component: RegisterComponent,\n    },\n    {\n      path: 'generate-password/:token',\n      component:GeneratePasswordComponent,\n    },\n    {\n      path: 'forgot-password',\n      component: ForgotPasswordComponent,\n    },\n    {\n      path:'reset-password/:token',\n      component: ResetPasswordComponent,\n    },\n    {\n      path: '',\n      redirectTo: 'login',\n      pathMatch:'full',\n    }\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes)\n  ]\n})\nexport class UsersRoutingModule { }\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiService } from 'src/app/services/api.service';\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  resetPasswordForm: FormGroup;\n  snapshotParam: string;\n  passwordFlag: boolean = true;\n  errMessage: string;\n  successFlag:Boolean = false;\n  successMsg:string;\n\n  constructor(private route: ActivatedRoute, private apiService: ApiService, public fb: FormBuilder, private ngZone: NgZone, private router: Router) { }\n\n  ngOnInit() {    //Calling validation method\n    this.submitResetPassword();\n    this.snapshotParam = this.route.snapshot.paramMap.get(\"token\");\n  }\n\n\n  submitResetPassword() { //create method for validation\n    try {\n      this.resetPasswordForm = this.fb.group({\n        password: new FormControl('', Validators.compose([\n          Validators.minLength(8),\n          Validators.maxLength(12),\n          Validators.required,\n          Validators.pattern(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/) //this is for the letters both uppercase & lowercase and numbers.\n        ])),\n        passwordConfirmation: new FormControl('', Validators.compose([\n          Validators.required,\n          RxwebValidators.compare({ fieldName: 'password' })\n        ]))\n      });\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  resetPassword() {  //Create method for submit form value and calling API.\n    try {\n      if (this.resetPasswordForm.valid) {\n        this.apiService.submitResetPasswordData(this.resetPasswordForm.value, this.snapshotParam).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successFlag = true;\n            this.successMsg = data.message;\n            this.passwordFlag = true;\n            setTimeout(() => {\n              this.ngZone.run(() => this.router.navigateByUrl('/users/login'));\n            }, 1000)\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.passwordFlag = false;\n            this.errMessage = data.message;\n          }\n        })\n      }\n    }\n    catch (err) {\n      console.log(err);\n    }\n\n  }\n\n  //For print Validation and error message.\n  validationErrorMessage = {\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: `Password must be at least 8 characters long` },\n      { type: 'maxlength', message: `Password should not be greater than 12 characters` },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, one digit and one special characters' }\n    ],\n    'passwordConfirmation': [\n      { type: 'required', message: 'Confirm Password is required' },\n      { type: 'compare', message: 'Passwords do not match' },\n    ],\n  }\n}\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ApiService } from 'src/app/services/api.service';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  forgotPassForm: FormGroup;\n  errMessage: string;\n  successMsg: string;\n  forgotFlag: boolean = true;\n  flag: boolean = false;\n\n  constructor(private api: ApiService, public fb: FormBuilder,\n    private ngZone: NgZone,\n    private router: Router,\n    private spinner: NgxSpinnerService) { }\n\n  ngOnInit() {\n    this.submitEmail();\n  }\n\n\n  //Create method for validation\n  submitEmail() {\n    try {\n      this.forgotPassForm = this.fb.group({\n        email: new FormControl(null, Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n\n        ])),\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  forgotPassword() {   //Create method for submit form value and calling API.\n    try {\n      this.spinner.show();\n      this.api.submitForgotPasswordData(this.forgotPassForm.value).subscribe((data) => {\n        if (data.status === \"error\" || data.status === 404) {\n          this.forgotFlag = false;\n          this.errMessage = data.message;\n          this.flag = false;\n          this.spinner.hide();\n          setTimeout(() => {\n            this.handleErrors();\n          }, 5000);\n        }\n        else if (data.status == \"success\" || data.status === 200) {\n          this.flag = true;\n          this.successMsg = data.message;\n          this.forgotFlag = true;\n          this.spinner.hide();\n          setTimeout(() => {\n            this.ngZone.run(() => this.router.navigateByUrl('/users/login'));\n            this.handleErrors();\n          }, 3000)\n        }\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //For print Validation and error message.\n  validationErrorMessage = {\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ],\n\n  }\n\n  handleErrors(){\n    try {\n      this.forgotFlag = false;\n      this.errMessage = '';\n      this.flag = false;\n      this.successMsg = '';\n    } catch (error) {\n      console.log(error);\n    }\n    }\n}\n\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport { RxwebValidators, ReactiveFormConfig, pattern } from '@rxweb/reactive-form-validators';\n\n@Component({\n  selector: 'app-generate-password',\n  templateUrl: './generate-password.component.html',\n  styleUrls: ['./generate-password.component.scss']\n})\nexport class GeneratePasswordComponent implements OnInit {\n\n  setPasswordForm: FormGroup;\n  snapshotParam: string;\n  passwordFlag: Boolean = true;\n  errMessage: String;\n  successFlag: Boolean = false;\n  successMsg: String;\n\n  constructor(private route: ActivatedRoute, private apiService: ApiService, public fb: FormBuilder, private ngZone: NgZone, private router: Router) { }\n\n  ngOnInit() {  //Calling validation method\n    this.submitPassword();\n    this.snapshotParam = this.route.snapshot.paramMap.get(\"token\");\n    ReactiveFormConfig.set({ \"validationMessage\": { \"compare\": \"Input does not match\" } });\n  }\n\n  submitPassword() {   //create method for validation\n    this.setPasswordForm = this.fb.group({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(8),\n        Validators.maxLength(12),\n        Validators.required,\n        Validators.pattern(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/),\n      ])),\n      passwordConfirmation: new FormControl('', Validators.compose([\n        Validators.required,\n        RxwebValidators.compare({ fieldName: 'password' })\n      ]))\n    });\n  }\n\n  setPassword() {  //Create method for submit form value and calling API.\n    try {\n      if (this.setPasswordForm.valid) {\n        this.apiService.submitPasswordData(this.setPasswordForm.value, this.snapshotParam).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successFlag = true;\n            this.successMsg = data.message;\n            this.passwordFlag = true;\n            setTimeout(() => {\n              this.ngZone.run(() => this.router.navigateByUrl('/users/login'));\n            }, 1000)\n          } else if (data.status == \"error\" || data.status === 404) {\n            this.passwordFlag = false;\n            this.errMessage = data.message;\n            this.successFlag = false;\n          }\n        })\n      }\n    }\n    catch (err) {\n      console.log(err);\n    }\n\n  }\n\n\n\n  //For print Validation and error message.\n  validationErrorMessage = {\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: 'Password must be at least 8 characters long' },\n      { type: 'maxlength', message: 'Password is too large(maximum length 12)' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, one digit and one special characters' }\n    ],\n    'passwordConfirmation': [\n      { type: 'required', message: 'Confirm Password is required' },\n      { type: 'compare', message: 'Password not match' },\n    ],\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UsersRoutingModule } from './users-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { UsersComponent } from './users.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { GeneratePasswordComponent } from './generate-password/generate-password.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { NgxSpinnerModule } from 'ngx-spinner';\n\n\n@NgModule({\n  declarations: [LoginComponent, UsersComponent, RegisterComponent, GeneratePasswordComponent, ForgotPasswordComponent, ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    UsersRoutingModule,\n    ReactiveFormsModule,\n    RouterModule,\n    NgxSpinnerModule,\n\n  ]\n})\nexport class UsersModule { }\n"]}