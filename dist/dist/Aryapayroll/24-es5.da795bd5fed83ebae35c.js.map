{"version":3,"sources":["webpack:///src/app/pages/payroll/payroll.component.ts","webpack:///src/app/pages/payroll/payroll-service/payroll-api.service.ts","webpack:///src/app/pages/payroll/payroll.component.html","webpack:///src/app/pages/payroll/list-payroll/list-payroll.component.html","webpack:///src/app/pages/payroll/list-payroll/list-report.component.ts","webpack:///src/app/pages/payroll/add-payroll/add-payroll.component.ts","webpack:///src/app/pages/payroll/update-payroll/update-payroll.component.html","webpack:///src/app/pages/payroll/update-payroll/update-report.component.ts","webpack:///src/app/pages/payroll/payroll-sheet/payroll-sheet.component.ts","webpack:///src/app/pages/payroll/payroll-routing.module.ts","webpack:///src/app/pages/payroll/payroll.module.ts","webpack:///src/app/pages/payroll/payroll-sheet/payroll-sheet.component.html"],"names":["PayrollComponent","PayrollApiService","http","endpoint","environment","apiBaseUrl","headers","set","error","errorMessage","ErrorEvent","message","status","console","log","throwError","err","year","month","data","companyId","sessionStorage","getItem","this","post","pipe","catchError","errorMgmt","salarySlipId","get","employeeIdArray","modeType","type","salaryId","value","AddPayrollComponent","ListPayrollComponent","api","fb","employeeListAPI","spinner","notifier","existingData","demo","dataSalary","showPayrollDetials","salarySlipStatus","paymentModeType","name","showSalaryDetailsCards","showCheckbox","selectAllCheckBox","generateSalaryForEmployees","salarySlipDetails","currentMonthValue","filterOnEmployee","currentSalarySlipFilterStatus","showChequeBtn","dataSetting","currentMonthSetting","listSalarySlipDetails","monthValue","Number","i","toString","padStart","employeeList","getEmployeeList","subscribe","companyEmployeelist","show","document","getElementById","length","hide","fire","generateSlip","currentDate","Date","getFullYear","monthlyGenerateSlip","forEach","generatePdf","generateSalarySlip","items","_id","id","getSalarySlip","grossAmt","push","gross","amt","netSalaryAmt","netSalary","totalDeductionAmt","totalDeduction","employeeDetails","doc","src","image","Image","companyImageUrl","setFontSize","rect","addImage","setFontStyle","text","companyName","employeeName","accountNum","designation","present","earnedLeaves","unsanctionedLeave","payDays","monthlyctc","annuallyctc","textY","deductions","earnings","maxLength","undefined","rectY","label","save","headerSpace","yearValue","result","match","earnedLeaveYearMsg","key","getMonth","substring","filterEmployeeId","paymentMode","filterSalarySlip","filterCurrentSalarySlip","curretDate","returnData","String","setAttribute","getPayrolData","employeeFilter","isGenerated","employeeId","splice","employeeSalaryDetails","deductionDetails","earningDetails","removeAttribute","getChequeApi","response","title","input","inputValue","chequeNum","showCancelButton","inputValidator","then","addChequeApi","checkNum","notify","filterFunctionality","yearValidation","resetFunctionality","allDownload","UpdatePayrollComponent","PayrollSheetComponent","PayrollRoutingModule","PayrollModule","route","ngZone","router","salarySlipDeductions","salarySlipEarnings","buttonValue","showButtonValue","salarySlipPattern","didUpdate","errorMsg","successMessage","snapshot","paramMap","requestMonth","requestYear","salarySlipForm","existingSalaryDetails","updateSalarySlipForm","group","deduction","totalDeductions","deductionForm","totalEarnings","earningsForm","element","updatedSalaryForm","successMsg","setTimeout","navigateByUrl","handelErrors","errMsg","scrollIntoView","showFunctinality","updateSalarySlip","path","component","canActivate","children","apiService","titleCase","minMode","bsValue","requestDateDetails","bsConfig","Object","assign","dateInputFormat","getCompanyDetails","dateValues","localStorage","companyDetails","sheetType","bankStatement","statementType","generateBankSheet","generateCashStatement","generateChequeStatement","bankStatementData","workbook","Workbook","worksheet","addWorksheet","subHeading","totalAmoutPaid","transform","totalAmoutPaidWords","tableSubHeading","header1","headerDetails","footer","bankData","addRow","getCell","sheetHeading","subject","mergeCells","font","family","size","underline","bold","alignment","vertical","horizontal","wrapText","sheetSubHeading1","border","top","style","left","bottom","right","sheetSubHeading2","eachCell","cell","number","getColumn","width","d","f","xlsx","writeBuffer","blob","Blob","salaryStatementData","salaryInfo","index","cashAmt","footerRow","totalCashAmtPaid","chequeAmt","totalChequeAmtPaid","rangeDatesUpdated","statementSheet","redirectTo","pathMatch","forChild","customNotifierOptions","position","distance","gap","theme","behaviour","autoHide","onClick","onMouseover","showDismissButton","stacking","animations","enabled","preset","speed","easing","offset","shift","overlap","withConfig","forRoot"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-payroll',\n  templateUrl: './payroll.component.html',\n  styleUrls: ['./payroll.component.scss']\n})\n\nexport class PayrollComponent implements OnInit {\n\n  constructor() {}\n  ngOnInit() {\n  \n  }\n\n}","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class PayrollApiService {\n\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n/**Create method for manage errors when request and return response from the server*/\nerrorMgmt(error: HttpErrorResponse) {\n  try {\n    let errorMessage = '';\n    /** Handle client side error */\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    }\n    /** Handle server side error */\n    else {\n      errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n  catch (err) {\n    console.log(err.message);\n  }\n}\n\ngetPayrolData(year,month):Observable<any>{\n  try{\n    let data = {\n      year:year,\n      month:month\n    }\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/employee/salary-slip-list/${companyId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\ngetSalarySlip(salarySlipId:String): Observable<any> {\n  try {\n    let apiURL = `${this.endpoint}/employee/salary-slip-details/${salarySlipId}`;\n    return this.http.get(apiURL).pipe(\n    catchError(this.errorMgmt)\n    )\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n\n// Generate Salary Slip\ngenerateSalarySlip(employeeIdArray,year,month): Observable<any>{\n  try{\n    let data = {\n      year:year,\n      month:month,\n      employeeIdArray: employeeIdArray.employeeIdArray\n    }\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/employee/generate-salary-slip/${companyId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Filter Employee Data\nfilterSalarySlip(modeType,year,month):Observable<any>{\n  try {\n    let companyId = sessionStorage.getItem('companyId');\n    let apiURL = `${this.endpoint}/employee/filter-salary-slip/${companyId}/${modeType}/${year}/${month}`;\n    return this.http.get(apiURL).pipe(\n    catchError(this.errorMgmt)\n    )\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n\n// List Employee salary slip upto date\nlistSalarySlipDetails(month,year):Observable<any>{\n  try {\n    let companyId = sessionStorage.getItem('companyId');\n    let apiURL = `${this.endpoint}/employee/current-month-salary-slip/${companyId}/${year}/${month}`;\n    return this.http.get(apiURL).pipe(\n    catchError(this.errorMgmt)\n    )\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n// Generate and Update the employee salary slip\nmonthlyGenerateSlip(data,month,year,type): Observable<any>{\ntry {\n  let companyId = sessionStorage.getItem('companyId');\n  let apiURL = `${this.endpoint}/employee/generate-current-month-slip/${companyId}/${year}/${month}/${type}`;\n      return this.http.post(apiURL,data).pipe(\n        catchError(this.errorMgmt)\n      )\n} catch (error) {\n  console.log(error);\n}\n}\n\n// Filter Employee Data\nfilterCurrentSalarySlip(modeType,year,month):Observable<any>{\n  try {\n    let companyId = sessionStorage.getItem('companyId');\n    let apiURL = `${this.endpoint}/employee/filter-current-month-salary-slip/${companyId}/${modeType}/${year}/${month}`;\n    return this.http.get(apiURL).pipe(\n    catchError(this.errorMgmt)\n    )\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n\n\n// GENERATE BANK STATEMENT(SALARY UPLOAD) API\n bankStatement(data): Observable<any> {\n   try {\n    let companyId = sessionStorage.getItem('companyId');\n    let apiURL = `${this.endpoint}/company/bank-statement/${companyId}`;\n    return this.http.post(apiURL, data).pipe(\n    catchError(this.errorMgmt)\n    )\n   } catch (error) {\n     console.log(error);\n   }\n }\n\n\n//  ADD CHEQUE DETAILS API\naddChequeApi(salaryId,data):Observable<any> {\n  try {\n    let apiUrl = `${this.endpoint}/user/add-cheque-details/${salaryId}`;\n    return this.http.post(apiUrl, data).pipe(\n      catchError(this.errorMgmt)\n      )\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n\n//  GET CHEQUE DETAILS API\ngetChequeApi(salaryId):Observable<any> {\n  try {\n    let apiUrl = `${this.endpoint}/user/get-cheque-details/${salaryId}`;\n    return this.http.get(apiUrl).pipe(\n      catchError(this.errorMgmt)\n      )\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n//  GET CHEQUE DETAILS API\ngetCompanyDetails(companyId):Observable<any> {\n  try {\n    let apiUrl = `${this.endpoint}/company/details/${companyId}`;\n    return this.http.get(apiUrl).pipe(\n      catchError(this.errorMgmt)\n      )\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n\n}\n","<router-outlet></router-outlet>","<ngx-spinner bdColor=\"rgba(51,51,51,0.8)\" size=\"medium\" color=\"#fff\" type=\"timer\">\n</ngx-spinner>\n<notifier-container></notifier-container>\n<div class=\"card card-user\">\n    <div class=\"card-header\" (keyup.enter)=\"filterFunctionality()\">\n        <h2 class=\"card-title text-center\">Payroll Details</h2>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"form-row\">\n            <div class=\"col-lg-3 col-md-3 col-sm-12\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label \"><b>Select Employee:</b></label>\n                    <select class=\"dropdown dropdown-toggle form-control\" id=\"salaryEmployee\" (change)=\"employeeFilter()\">\n                        <option class=\"dropdown-item\" value=\"\" disabled selected>--Select Employee--</option>\n                        <option class=\"dropdown-item\" *ngFor=\"let employee of companyEmployeelist\"\n                            value=\"{{employee._id}}\">{{employee.name}}</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"col-lg-3 col-md-3 col-sm-12\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label \"><b>Enter Year:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" id=\"payrollYear\" (keyup)=\"yearValidation()\" placeholder=\"Enter Year\">\n                    </div>\n                    <div>\n                        <p style=\"color:red;\">{{earnedLeaveYearMsg}}</p>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-lg-3 col-md-3 col-sm-12\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label \"><b>Enter Month:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                        <select class=\"dropdown dropdown-toggle form-control\" id=\"salarySlipMonth\">\n                            <option [disabled]=\"!currentMonthValue['01']\" class=\"dropdown-item\" id=\"01\" value=\"01\">Jan\n                            </option>\n                            <option [disabled]=\"!currentMonthValue['02']\" class=\"dropdown-item\" id=\"02\" value=\"02\">Feb\n                            </option>\n                            <option [disabled]=\"!currentMonthValue['03']\" class=\"dropdown-item\" id=\"03\" value=\"03\">Mar\n                            </option>\n                            <option [disabled]=\"!currentMonthValue['04']\" class=\"dropdown-item\" id=\"04\" value=\"04\">Apr\n                            </option>\n                            <option [disabled]=\"!currentMonthValue['05']\" class=\"dropdown-item\" id=\"05\" value=\"05\">May\n                            </option>\n                            <option [disabled]=\"!currentMonthValue['06']\" class=\"dropdown-item\" id=\"06\" value=\"06\">Jun\n                            </option>\n                            <option [disabled]=\"!currentMonthValue['07']\" class=\"dropdown-item\" id=\"07\" value=\"07\">Jul\n                            </option>\n                            <option [disabled]=\"!currentMonthValue['08']\" class=\"dropdown-item\" id=\"08\" value=\"08\">Aug\n                            </option>\n                            <option [disabled]=\"!currentMonthValue['09']\" class=\"dropdown-item\" id=\"09\" value=\"09\">Sep\n                            </option>\n                            <option [disabled]=\"!currentMonthValue['10']\" class=\"dropdown-item\" id=\"10\" value=\"10\">Oct\n                            </option>\n                            <option [disabled]=\"!currentMonthValue['11']\" class=\"dropdown-item\" id=\"11\" value=\"11\">Nov\n                            </option>\n                            <option [disabled]=\"!currentMonthValue['12']\" class=\"dropdown-item\" id=\"12\" value=\"12\">Dec\n                            </option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-lg-3 col-md-3 col-sm-12\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label \"><b>Salary Slip</b></label>\n                    <div class=\"col-sm-offset-2\">\n                        <select class=\"dropdown dropdown-toggle form-control\" id=\"salarySlipType\" [disabled]='filterOnEmployee'>\n                            <option class=\"dropdown-item\" value=\"former\">Formerly Generated</option>\n                            <option class=\"dropdown-item\" value=\"later\">Generate Later</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        <div class=\"form-row\">\n            <div class=\"col-lg-3 col-md-3 col-sm-12\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label \"><b>Pay Mode:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                        <select class=\"dropdown dropdown-toggle form-control\" id=\"salaryModeType\" [disabled]='filterOnEmployee'>\n                                <option class=\"dropdown-item\" value=\"\" disabled selected>--Select Payment Mode--</option>\n                                <option class=\"dropdown-item\" *ngFor=\"let modeType of paymentModeType\" value=\"{{modeType.value}}\">\n                                    {{modeType.name}}</option>\n                            </select>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-lg-3 col-md-3 col-sm-12\">\n                <div class=\"form-group right-buttongroup\">\n                    <button class=\"btn btn-primary btn-margin\" [disabled]=\"earnedLeaveYearMsg\" (click)=\"filterFunctionality()\"><i class=\"fa fa-filter\"></i>&nbsp; Filter</button>\n                    <button class=\"btn btn-danger btn-margin\" (click)=\"resetFunctionality()\"><i class=\"fa fa-trash\"></i>&nbsp;  Reset</button>\n                </div>\n            </div>\n\n        </div>\n\n\n\n        <!-- <button style=\"float: right;\" class=\"btn btn-primary btn-round\" [disabled]=\"earnedLeaveYearMsg || bankStatementFlag\" (click)=\"bankStatement()\"><i class=\"fas fa-download\"></i>&nbsp;{{statementName}}</button> -->\n        <button style=\"float: right;\" class=\"btn btn-success btn-round\" [disabled]=\"earnedLeaveYearMsg || dataSalary.length ===0\" (click)=\"allDownload()\"><i class=\"fas fa-download\"></i>&nbsp; Download All</button>\n        <table class=\"table\" style=\"text-align: center;\">\n            <thead class=\" text-primary\">\n                <tr>\n                    <th>Generate Payroll\n                        <div *ngIf=\"dataSalary.length > 0 && currentSalarySlipFilterStatus === 'later'\">\n                            <input type=\"checkbox\" [checked]=\"selectAllCheckBox\" (change)=\"headerCheckBox()\" /> Select All\n                        </div>\n                    </th>\n                    <th>Name</th>\n                    <!-- <th>Designation</th> -->\n                    <th>Gross Salary</th>\n                    <th>Salary Deduction</th>\n                    <th>Net Salary</th>\n                    <th>Action</th>\n                </tr>\n            </thead>\n            <tbody *ngFor=\"let list of dataSalary\">\n                <tr>\n                    <td *ngIf=\"!list.isGenerated\"><input type=\"checkbox\" [checked]=\"showCheckbox[list._id]\" (change)=listCheckBoxes(list._id) /></td>\n                    <td *ngIf=\"list.isGenerated\"><i class=\"fa fa-check\" style=\"color: green; font-size: 25px;\"></i></td>\n                    <td>{{list.employeeDetails.employeeName}}</td>\n                    <!-- <td>{{ list.employeeDetails.designation }}</td>   -->\n                    <td>{{ list.gross.amt }}</td>\n                    <td>{{ list.totalDeduction.amt }}</td>\n                    <td>{{list.netSalary.amt}}</td>\n                    <td>\n                        <button *ngIf=\"showChequeBtn\" class=\"btn btn-danger\" type=\"button\" (click)=\"addChequeNo(list._id)\"><i class=\"fas fa-edit\"></i></button>&nbsp;\n                        <button title=\"info\" class=\"btn btn-primary\" type=\"button\" (click)=\"showSalarySlipDetails(list._id)\"><i class=\"fas fa-info\"></i></button>&nbsp;\n                        <button *ngIf=\"list.isGenerated\" class=\"btn btn-default btn-fab btn-icon btn-round\" type=\"button\" (click)=\"generatePdf(list._id)\"><i class=\"fas fa-file-download\"></i></button>\n\n                    </td>\n                </tr>\n                <tr>\n                    <td colspan=\"6\">\n                        <div class=\"card\" style=\"background-color:whitesmoke\" [hidden]=\"showSalaryDetailsCards[list._id]\">\n                            <div *ngIf=\"salarySlipDetails[list._id] !== undefined\">\n                                <table width=100% class=\"payrollDetails1\" *ngFor=\"let empDetails of salarySlipDetails[list._id].employeeSalaryDetails\">\n                                    <tr>\n                                        <th class=\"text-center\" colspan=\"6\" ><b class=\"display-flex\">Payroll Details\n                                            <div *ngIf=\"!list.isGenerated\" class=\"margin-top3\">\n                                            <button title=\"Update\" class=\"editbutton\">\n                                                <a href=\"javascript:void(0);\" routerLink=\"/pages/payroll/update-payroll/{{list._id}}/{{list.month}}/{{list.year}}\"><i  class=\"fa fa-pencil-square-o\"></i></a>\n                                            </button>\n                                        </div></b>\n\n                                        </th>\n                                    </tr>\n                                    <tr>\n                                        <th>Annual CTC:</th>\n                                        <th>Monthly Pay:</th>\n                                        <th>Earned Leave Balance:</th>\n                                        <th>Account Number:</th>\n                                        <th>Present Days:</th>\n                                        <th>Pay Days:</th>\n                                    </tr>\n                                    <tr>\n                                        <td>{{ empDetails.annuallyctc }}</td>\n                                        <td>{{ empDetails.monthlyctc }}</td>\n                                        <td>{{ empDetails.earnedLeaves }}</td>\n                                        <td>{{ empDetails.accountNum }}</td>\n                                        <td>{{ empDetails.present }}</td>\n                                        <td>{{ empDetails.payDays }}</td>\n                                    </tr>\n                                    <tr>\n                                        <td colspan=\"3\">\n                                            <table width=\"100%\" class=\"innertable\" *ngFor=\"let empDetailsEarnings of salarySlipDetails[list._id].earningDetails; let i = index\">\n                                                <tr *ngIf=\"i===0\">\n                                                    <th colspan=\"2\">Total Earnings</th>\n                                                </tr>\n                                                <tr>\n                                                    <th>{{ empDetailsEarnings.label }}</th>\n                                                    <td>{{ empDetailsEarnings.amt }}</td>\n                                                </tr>\n                                            </table>\n                                        </td>\n                                        <td colspan=\"3\">\n                                            <table width=\"100%\" class=\"innertable\" *ngFor=\"let empDetailsDeductions of salarySlipDetails[list._id].deductionDetails; let i = index\">\n                                                <tr *ngIf=\"i===0\">\n                                                    <th colspan=2>Total Deductions</th>\n                                                </tr>\n                                                <tr>\n                                                    <th>{{ empDetailsDeductions.label }}</th>\n                                                    <td>{{ empDetailsDeductions.amt }}</td>\n                                                </tr>\n                                            </table>\n                                        </td>\n                                    </tr>\n\n                                </table>\n                            </div>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        <div *ngIf=\"salarySlipStatus.length != 0\">\n            <h3 style=\"text-align: center;\">{{ salarySlipStatus }}</h3>\n        </div>\n    </div>\n</div>","import { PayrollApiService } from '../payroll-service/payroll-api.service';\nimport { Component, OnInit } from '@angular/core';\nimport Swal from 'sweetalert2';\nimport * as jsPDF from 'jspdf'\nimport { FormBuilder } from '@angular/forms';\nimport { EmployeeService } from '../../employee-wizard/services/employee.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { NotifierService } from 'angular-notifier';\n\n\n\n@Component({\n  selector: 'app-list-payroll',\n  templateUrl: './list-payroll.component.html',\n  styleUrls: ['./list-payroll.component.scss']\n})\n\nexport class ListPayrollComponent implements OnInit {\n\n  paymentData: any[];\n  existingData = [];\n  fixdetails: any[];\n  deductionList: any[];\n  earningsList: any[];\n  demo = [];\n  grossAmt;\n  netSalaryAmt;\n  totalDeductionAmt;\n  imgData;\n\n  dataSalary = [];\n  salarySlip: any[];\n  employeeDetails: any;\n  earnedLeaveYearMsg: string;\n  showPayrollDetials = false;\n  salarySlipStatus = '';\n  paymentModeType = [\n    {name: 'Transfer to Bank Account', value: 'Tansfer to Bank Account'},\n    {name: 'Cash', value: 'Cash'},\n    {name: 'Cheque', value: 'Cheque'}\n  ];\n  status = \"Active\";\n  companyEmployeelist: any;\n  showSalaryDetailsCards = {};\n  showCheckbox = {};\n  selectAllCheckBox = false;\n  generateSalaryForEmployees = [];\n  salarySlipDetails = {};\n  currentMonthValue = {};\n  filterOnEmployee = false;\n  filterEmployeeId: any;\n  currentSalarySlipFilterStatus = 'later';\n\n  showChequeBtn = false;\n\n  constructor(\n    private api: PayrollApiService,\n    private fb: FormBuilder,\n    private employeeListAPI: EmployeeService,\n    private spinner: NgxSpinnerService,\n    public notifier: NotifierService,\n\n\n  ) { }\n\n  ngOnInit() {\n    let dataSetting = this.currentMonthSetting();\n    this.listSalarySlipDetails(dataSetting.monthValue, dataSetting.year, 'later', false);\n    let monthValue = Number(dataSetting.monthValue);\n    for (var i = 1; i <= 12; i++) {\n      if (monthValue >= i) {\n        this.currentMonthValue[i.toString().padStart(2, '0')] = true;\n      } else {\n        this.currentMonthValue[i.toString().padStart(2, '0')] = false;\n      }\n    }\n    this.employeeList();\n  }\n\n  // Employee List\n  employeeList() {\n    try {\n      this.employeeListAPI.getEmployeeList(this.status).subscribe((data) => {\n        if (data.status === 'success') {\n          this.companyEmployeelist = data.data;\n        }\n      })\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  allDownload() {\n    try {\n      this.spinner.show();\n      if ((document.getElementById('salarySlipType') as HTMLInputElement).value === 'later') {\n        if (this.generateSalaryForEmployees.length === 0) {\n          this.spinner.hide();\n          Swal.fire('No Salary Slip Selected');\n        } else {\n\n          let generateSlip = {\n            employeeIdArray: this.generateSalaryForEmployees\n          }\n\n          let year = (document.getElementById('payrollYear') as HTMLInputElement).value\n          let month = (document.getElementById('salarySlipMonth') as HTMLInputElement).value\n          let currentDate = new Date();\n          if (Number(year) === currentDate.getFullYear()) {\n            this.api.monthlyGenerateSlip(generateSlip, month, year, 'multipleGenerate').forEach(async (data) => {\n              if (data.status === 'success') {\n                for (var i = 0; i < data.data.length; i++) {\n                  this.generatePdf(data.data[i]);\n                }\n                this.listSalarySlipDetails(month, year, 'later', false);\n                this.spinner.hide();\n              }\n            })\n            this.generateSalaryForEmployees = [];\n          } else {\n            this.api.generateSalarySlip(generateSlip, year, month).forEach((data) => {\n              if (data.status === 'success') {\n                for (var i = 0; i < data.data.length; i++) {\n                  this.generatePdf(data.data[i]);\n                }\n                this.listSalarySlipDetails(month, year, 'later', false);\n                this.spinner.hide();\n              }\n            })\n          }\n        }\n\n      } else if ((document.getElementById('salarySlipType') as HTMLInputElement).value === 'former') {\n        this.dataSalary.forEach((items) => {\n          this.generatePdf(items._id);\n        })\n        this.spinner.hide();\n      }\n      // this.spinner.hide();\n    } catch (error) {\n      console.log(error);\n      this.spinner.hide();\n    }\n  }\n\n  // download pdf start\n  async generatePdf(id) {\n    this.api.getSalarySlip(id).subscribe(async (data) => {\n      this.existingData = await data.data;\n      this.demo.push(data.data);\n\n      this.grossAmt = await data.data.gross.amt;\n      this.netSalaryAmt = await data.data.netSalary.amt;\n      this.totalDeductionAmt = await data.data.totalDeduction.amt;\n\n      this.employeeDetails = await data.data.employeeDetails;\n      var doc = await new jsPDF();\n      var image = new Image();\n\n      image.src = await data.data.companyImageUrl;\n\n      await doc.setFontSize(12);\n      await doc.rect(155, 20, 50, 24);\n      await doc.addImage(image, 'PNG', 170, 22, 20, 20, 'Default Logo', 'NONE');\n      await doc.rect(5, 20, 150, 8);\n      await doc.setFontStyle(\"bold\");\n      await doc.text(await this.employeeDetails.companyName, 75, 26, \"center\", \"a\");\n      await doc.setFontStyle(\"normal\");\n      await doc.rect(5, 28, 150, 8);\n      await doc.setFontStyle(\"bold\");\n      await doc.text(`Salary Slip for the Month of ${data.data.month}, ${data.data.year}`, 75, 34, \"center\", \"a\");\n      await doc.setFontStyle(\"normal\");\n      await doc.rect(5, 36, 75, 8);\n      await doc.text(\"Employee Name\", 22, 42, \"center\", \"a\");\n      await doc.rect(80, 36, 75, 8);\n      await doc.setFontStyle(\"bold\");\n      await doc.text(await this.employeeDetails.employeeName, 120, 42, \"center\", \"a\");\n      await doc.setFontStyle(\"normal\");\n\n\n      await doc.rect(5, 44, 50, 13);\n      await doc.text(\"Account No.\", 18, 52, \"center\", \"a\");\n      await doc.rect(55, 44, 50, 13);\n      if (await this.employeeDetails.accountNum) {\n        await doc.text(await this.employeeDetails.accountNum, 80, 52, \"center\", \"a\");\n      } else {\n        await doc.text('', 80, 52, \"center\", \"a\");\n      }\n      await doc.rect(105, 44, 50, 13);\n      await doc.text(\"Designation\", 125, 52, \"center\", \"a\");\n      await doc.rect(155, 44, 50, 13);\n      await doc.text(await this.employeeDetails.designation, 180, 52, \"center\", \"a\");\n\n      await doc.rect(5, 57, 50, 8);\n      await doc.text(\"Days Present\", 19, 63, \"center\", \"a\");\n      await doc.rect(55, 57, 50, 8);\n      await doc.text(await this.employeeDetails.present, 80, 63, \"center\", \"a\");\n      await doc.rect(105, 57, 50, 8);\n      await doc.text(\"Earned Leaves\", 125, 63, \"center\", \"a\");\n      await doc.rect(155, 57, 50, 8);\n      await doc.text(await this.employeeDetails.earnedLeaves, 175, 63, \"center\", \"a\");\n\n      await doc.rect(5, 65, 100, 8);\n      await doc.text(\"ESIC No :-\", 17, 71, \"center\", \"a\");\n      await doc.rect(105, 65, 100, 8);\n      await doc.text(\"P.F. No :-\", 120, 71, \"center\", \"a\");\n\n      await doc.rect(5, 73, 65, 8);\n      await doc.text(\"Leave Without Sanction\", 29, 79, \"center\", \"a\");\n      await doc.rect(70, 73, 35, 8);\n      await doc.text(await this.employeeDetails.unsanctionedLeave, 83, 79, \"center\", \"a\");\n      await doc.rect(105, 73, 60, 8);\n      await doc.text(\"Payable Days\", 125, 79, \"center\", \"a\");\n      await doc.rect(165, 73, 40, 8);\n      await doc.text(await this.employeeDetails.payDays, 180, 79, \"center\", \"a\");\n\n      await doc.rect(5, 81, 65, 8);\n      await doc.text(\"Total CTC/Month\", 22, 87, \"center\", \"a\");\n      await doc.rect(70, 81, 35, 8);\n      await doc.setFontStyle(\"bold\");\n      await doc.text(await this.employeeDetails.monthlyctc, 85, 87, \"center\", \"a\");\n      await doc.setFontStyle(\"normal\");\n      await doc.rect(105, 81, 60, 8);\n      await doc.text(\"Total CTC/Annum\", 129, 87, \"center\", \"a\");\n      await doc.rect(165, 81, 40, 8);\n      await doc.text(await this.employeeDetails.annuallyctc, 180, 87, \"center\", \"a\");\n\n      await doc.rect(5, 89, 100, 12);\n      await doc.setFontStyle(\"bold\");\n      await doc.text(\"Earnings\", 40, 97, \"center\", \"a\");\n      await doc.rect(105, 89, 100, 12);\n      await doc.text(\"Deductions\", 135, 97, \"center\", \"a\");\n\n\n      await doc.rect(5, 101, 65, 8);\n      await doc.rect(70, 101, 35, 8);\n      await doc.text(\"Amount\", 85, 107, \"center\", \"a\");\n      await doc.rect(105, 101, 60, 8);\n      await doc.rect(165, 101, 40, 8);\n      await doc.text(\"Amount\", 185, 107, \"center\", \"a\");\n      await doc.setFontStyle(\"normal\");\n\n      // Daynamic part start\n      var textY = 115;\n      var maxLength;\n      if (this.demo[0].deductions.length > this.demo[0].earnings.length) {\n        maxLength = await this.demo[0].deductions.length;\n      } else {\n        maxLength = await this.demo[0].earnings.length;\n      }\n      for (var i = 0; i < maxLength; i++) {\n        var rectY = textY - 6;\n        if (await this.demo[0].earnings[i] == undefined) {\n          await doc.rect(5, rectY, 65, 8);\n          await doc.rect(70, rectY, 35, 8);\n          textY = textY + 8;\n        } else {\n          await doc.rect(5, rectY, 65, 8);\n          await doc.text(this.demo[0].earnings[i].label, 8, textY, \"left\", \"a\");\n          await doc.rect(70, rectY, 35, 8);\n          await doc.text(this.demo[0].earnings[i].amt, 95, textY, \"center\", \"a\");\n        }\n        if (await this.demo[0].deductions[i] == undefined) {\n          await doc.rect(105, rectY, 60, 8);\n          await doc.rect(165, rectY, 40, 8);\n          textY = textY + 8;\n        } else {\n          await doc.rect(105, rectY, 60, 8);\n          await doc.text(this.demo[0].deductions[i].label, 117, textY, \"left\", \"a\");\n          await doc.rect(165, rectY, 40, 8);\n          await doc.text(this.demo[0].deductions[i].amt, 195, textY, \"center\", \"a\");\n          textY = textY + 8;\n        }\n      }\n\n      textY = textY - 6;\n      await doc.rect(5, textY, 65, 8);\n      await doc.text(\"Gross\", 13, textY + 6, \"center\", \"a\");\n      await doc.rect(70, textY, 35, 8);\n      await doc.text(this.grossAmt, 90, textY + 6, \"center\", \"a\");\n      await doc.rect(105, textY, 60, 8);\n      await doc.text(\"Total Deductions\", 134, textY + 6, \"center\", \"a\");\n      await doc.rect(165, textY, 40, 8);\n      await doc.text(this.totalDeductionAmt, 192, textY + 6, \"center\", \"a\");\n\n      textY = textY + 8;\n      await doc.rect(5, textY, 65, 8);\n      await doc.setFontStyle(\"bold\");\n      await doc.text(\"Net Salary\", 17, textY + 6, \"center\", \"a\");\n      await doc.rect(5, textY, 200, 8);\n      await doc.text(this.netSalaryAmt, 90, textY + 6, \"center\", \"a\");\n      await doc.setFontStyle(\"normal\");\n\n      textY = textY + 8;\n      await doc.rect(5, textY, 200, 8);\n\n      // doc.save('my.pdf');\n      await doc.save(this.employeeDetails.employeeName + '.pdf');\n    })\n  }\n\n  // account pdf start\n  accountpdfPdf() {\n\n\n    var doc = new jsPDF('a', 'mm', [700, 1000]);\n\n    doc.setFontSize(10);\n\n    var headerSpace = 30;\n\n    doc.text(18, headerSpace + 7, \"To\");\n\n    doc.text(23, headerSpace + 20, \"Indusind bank, Jaipur\");\n    doc.text(190, headerSpace + 7, \"Date:10/2019\");\n\n    doc.text(80, headerSpace + 30, \"Sub: Salary Transfer for the Month of sep 2019\");\n\n    doc.rect(15, headerSpace + 35, 200, 30);\n    doc.rect(15, headerSpace + 65, 200, 5);\n\n    doc.rect(15, headerSpace + 70, 15, 5);\n    doc.rect(15, headerSpace + 70, 70, 5);\n    doc.rect(15, headerSpace + 70, 105, 5);\n    doc.rect(15, headerSpace + 70, 140, 5);\n    doc.rect(15, headerSpace + 70, 200, 5);\n\n    doc.rect(15, headerSpace + 75, 15, 5); doc.text(\"Sr. No\", 17, headerSpace + 79, \"left\", \"a\");\n    doc.rect(15, headerSpace + 75, 70, 5); doc.text(\"Name\", 31, headerSpace + 79, \"left\", \"a\");\n    doc.rect(15, headerSpace + 75, 105, 5); doc.text(\"Account Number\", 86, headerSpace + 79, \"left\", \"a\");\n    doc.rect(15, headerSpace + 75, 140, 5); doc.text(\"Amount\", 123, headerSpace + 79, \"left\", \"a\");\n    doc.rect(15, headerSpace + 75, 200, 5); doc.text(\"Salary for the month\", 157, headerSpace + 79, \"left\", \"a\");\n\n    headerSpace = headerSpace + 80;\n    for (var i = 0; i < 20; i++) {\n      doc.rect(15, headerSpace, 15, 5);\n      doc.rect(15, headerSpace, 70, 5);\n      doc.rect(15, headerSpace, 105, 5);\n      doc.rect(15, headerSpace, 140, 5);\n      doc.rect(15, headerSpace, 200, 5);\n      headerSpace = headerSpace + 5;\n    }\n\n    // doc.addPage();\n\n    doc.save('my.pdf');\n  }\n  // accoutn pdf end\n\n  // Year Validation\n  yearValidation() {\n    try {\n      let currentDate = new Date();\n      let year = currentDate.getFullYear();\n      let yearValue = (document.getElementById('payrollYear') as HTMLInputElement).value;\n      let yearRegularExpression = /^(19|20)\\d{2}$/;\n      let result = yearValue.match(yearRegularExpression);\n\n      if (yearValue.length === 0 && result === null) {\n        this.earnedLeaveYearMsg = '';\n      } else if (result === null) {\n        this.earnedLeaveYearMsg = \"Year Value is not acceptable\";\n      } else {\n        this.earnedLeaveYearMsg = '';\n      }\n\n      if (Number(yearValue) < year) {\n        for (var key in this.currentMonthValue) {\n          this.currentMonthValue[key] = true;\n        }\n        (document.getElementById('salarySlipMonth') as HTMLInputElement).value = '01';\n      } else if (Number(yearValue) === year) {\n        let monthValue = currentDate.getMonth() + 1;\n        for (var i = 1; i <= 12; i++) {\n          if (monthValue >= i) {\n            this.currentMonthValue[i.toString().padStart(2, '0')] = true;\n          } else {\n            this.currentMonthValue[i.toString().padStart(2, '0')] = false;\n          }\n        }\n      } else if (Number(yearValue) > year) {\n        this.earnedLeaveYearMsg = \"Forthcoming data is not available\";\n      }\n\n\n\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  // Filter Functionality\n  filterFunctionality() {\n    this.selectAllCheckBox = false;\n\n    if ((document.getElementById('payrollYear') as HTMLInputElement).value.length === 0) {\n      let currentDate = new Date().toString();\n      (document.getElementById('payrollYear') as HTMLInputElement).value = currentDate.substring(11, 15);\n    }\n\n    if ((document.getElementById('salaryEmployee') as HTMLInputElement).value.length !== 0) {\n      this.filterEmployeeId = (document.getElementById('salaryEmployee') as HTMLInputElement).value;\n      let month = (document.getElementById('salarySlipMonth') as HTMLInputElement).value;\n      let year = (document.getElementById('payrollYear') as HTMLInputElement).value;\n      this.listSalarySlipDetails(month, year, 'later', true);\n    } else {\n      if ((document.getElementById('salarySlipType') as HTMLInputElement).value === 'former') {\n        this.currentSalarySlipFilterStatus = 'former';\n        let month = (document.getElementById('salarySlipMonth') as HTMLInputElement).value;\n        let year = (document.getElementById('payrollYear') as HTMLInputElement).value;\n\n        if ((document.getElementById('salaryModeType') as HTMLInputElement).value.length !== 0) {\n          let paymentMode = (document.getElementById('salaryModeType') as HTMLInputElement).value;\n          this.filterSalarySlip(paymentMode, year, month);\n        } else {\n          this.listSalarySlipDetails(month, year, 'former', false);\n        }\n\n      } else if ((document.getElementById('salarySlipType') as HTMLInputElement).value === 'later') {\n        this.currentSalarySlipFilterStatus = 'later';\n        let month = (document.getElementById('salarySlipMonth') as HTMLInputElement).value;\n        let year = (document.getElementById('payrollYear') as HTMLInputElement).value;\n\n        if ((document.getElementById('salaryModeType') as HTMLInputElement).value.length !== 0) {\n          let paymentMode = (document.getElementById('salaryModeType') as HTMLInputElement).value;\n          this.filterCurrentSalarySlip(paymentMode, year, month);\n        } else {\n          this.listSalarySlipDetails(month, year, 'later', false);\n        }\n      }\n    }\n\n    (document.getElementById('salaryModeType') as HTMLInputElement).value === 'Cheque'? this.showChequeBtn = true : this.showChequeBtn = false;\n\n  }\n\n  // Current Month Setting\n  currentMonthSetting() {\n    try {\n      let curretDate = new Date(); let manipulateDate, month, year, monthValue,\n        returnData = {\n          month: String,\n          year: String,\n          monthValue: String\n        };\n\n      monthValue = (curretDate.getMonth() + 1).toString().padStart(2, '0');\n      year = curretDate.toString();\n      year = year.substring(11, 15);\n      month = curretDate.toString();\n      month = month.substring(4, 7);\n      returnData.month = month;\n      returnData.monthValue = monthValue;\n      returnData.year = year;\n      (document.getElementById('payrollYear') as HTMLInputElement).value = year;\n      (document.getElementById(monthValue) as HTMLInputElement).setAttribute('selected', 'selected');\n      (document.getElementById('salarySlipType') as HTMLInputElement).value = 'later';\n\n      return (returnData);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // List Salary Slips\n  listSalarySlips(year, monthValue) {\n    try {\n      this.api.getPayrolData(year, monthValue).subscribe((data) => {\n        if (data.status === 'success') {\n          if (data.data.length > 0) {\n            this.dataSalary = data.data;\n            this.salarySlipStatus = '';\n          } else {\n            this.dataSalary = [];\n            this.salarySlipStatus = 'Salary Slip Not Found';\n          }\n        }\n      })\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Filter Employee According to payment Mode\n  filterSalarySlip(modeType, year, month) {\n    try {\n\n      this.api.filterSalarySlip(modeType, year, month).subscribe((data) => {\n        if (data.status === 'success') {\n          if (data.data.length > 0) {\n            this.dataSalary = data.data;\n            this.salarySlipStatus = '';\n          } else {\n            this.dataSalary = [];\n            this.salarySlipStatus = 'No Salary Slip Found';\n          }\n        }\n      })\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // List Employee Salary Details\n  listSalarySlipDetails(monthValue, year, type, employeeFilter) {\n    try {\n      if (employeeFilter) {\n        this.api.listSalarySlipDetails(monthValue, year).subscribe((data) => {\n          if (data.status === 'success') {\n            this.dataSalary = [];\n            for (var i = 0; i < data.data.length; i++) {\n              if (data.data[i].isGenerated) {\n                if (data.data[i].employeeId == this.filterEmployeeId) {\n                  this.dataSalary.push(data.data[i]);\n                  (document.getElementById('salarySlipType') as HTMLInputElement).value = 'former';\n                  this.currentSalarySlipFilterStatus = 'former';\n                  break;\n                } else {\n                  continue;\n                }\n              } else if (!data.data[i].isGenerated) {\n                if (data.data[i]._id == this.filterEmployeeId) {\n                  this.dataSalary.push(data.data[i]);\n                  (document.getElementById('salarySlipType') as HTMLInputElement).value = 'later';\n                  this.currentSalarySlipFilterStatus = 'later';\n                  break;\n                } else {\n                  continue;\n                }\n              }\n            }\n\n            this.showSalaryDetailsCards = {};\n            this.showCheckbox = {};\n\n            for (var i = 0; i < this.dataSalary.length; i++) {\n              this.showSalaryDetailsCards[this.dataSalary[i]._id] = true;\n              if (!this.dataSalary[i].isGenerated) {\n                this.showCheckbox[this.dataSalary[i]._id] = false;\n              }\n            }\n\n            if (this.dataSalary.length === 0) {\n              this.salarySlipStatus = 'No Salary Slip Found';\n              this.selectAllCheckBox = false;\n            } else {\n              this.salarySlipStatus = '';\n            }\n          }\n        })\n      } else {\n        this.api.listSalarySlipDetails(monthValue, year).subscribe((data) => {\n          if (data.status === 'success') {\n            this.dataSalary = [];\n            if (type === 'later') {\n              for (var i = 0; i < data.data.length; i++) {\n                if (!data.data[i].isGenerated) {\n                  this.dataSalary.push(data.data[i]);\n                }\n              }\n            } else if (type === 'former') {\n              for (var i = 0; i < data.data.length; i++) {\n                if (data.data[i].isGenerated) {\n                  this.dataSalary.push(data.data[i]);\n                }\n              }\n            }\n\n            this.showSalaryDetailsCards = {};\n            this.showCheckbox = {};\n\n            for (var i = 0; i < this.dataSalary.length; i++) {\n              this.showSalaryDetailsCards[this.dataSalary[i]._id] = true;\n              if (!this.dataSalary[i].isGenerated) {\n                this.showCheckbox[this.dataSalary[i]._id] = false;\n              }\n            }\n            if (this.dataSalary.length === 0) {\n              this.salarySlipStatus = 'No Salary Slip Found';\n              this.selectAllCheckBox = false;\n            } else {\n              this.salarySlipStatus = '';\n            }\n          }\n        })\n      }\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Header Checkbox Functionality\n  headerCheckBox() {\n    try {\n      this.selectAllCheckBox = !this.selectAllCheckBox;\n      if (this.selectAllCheckBox) {\n        this.generateSalaryForEmployees = [];\n        for (var key in this.showCheckbox) {\n          this.showCheckbox[key] = true;\n          this.generateSalaryForEmployees.push(key);\n        }\n      } else {\n        for (var key in this.showCheckbox) {\n          this.showCheckbox[key] = false;\n          this.generateSalaryForEmployees = [];\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // List CheckBoxes Functionalities\n  listCheckBoxes(id) {\n    try {\n      this.showCheckbox[id] = !this.showCheckbox[id];\n      if (this.showCheckbox[id]) {\n        this.generateSalaryForEmployees.push(id);\n      } else {\n        for (var i = 0; i < this.generateSalaryForEmployees.length; i++) {\n          if (id == this.generateSalaryForEmployees[i]) {\n            this.generateSalaryForEmployees.splice(i, 1);\n            break;\n          }\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Show Salary Details\n  showSalarySlipDetails(employeeId) {\n    try {\n      this.showSalaryDetailsCards[employeeId] = !this.showSalaryDetailsCards[employeeId];\n      this.salarySlipDetails[employeeId] = {};\n      this.salarySlipDetails[employeeId].employeeSalaryDetails = [];\n      this.salarySlipDetails[employeeId].deductionDetails = [];\n      this.salarySlipDetails[employeeId].earningDetails = [];\n      for (var i = 0; i < this.dataSalary.length; i++) {\n        if (this.dataSalary[i]._id == employeeId) {\n          this.salarySlipDetails[employeeId].employeeSalaryDetails.push(this.dataSalary[i].employeeDetails);\n          this.salarySlipDetails[employeeId].deductionDetails = this.dataSalary[i].deductions;\n          this.salarySlipDetails[employeeId].earningDetails = this.dataSalary[i].earnings;\n          break;\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Filter the later generate salary slip\n  filterCurrentSalarySlip(modeType, year, month) {\n    try {\n      this.showSalaryDetailsCards = {};\n      this.showCheckbox = {};\n\n      this.api.filterCurrentSalarySlip(modeType, year, month).subscribe((data) => {\n        if (data.status === 'success') {\n          if (data.data.length > 0) {\n\n            this.dataSalary = data.data;\n            this.salarySlipStatus = '';\n\n            for (var i = 0; i < data.data.length; i++) {\n              this.showSalaryDetailsCards[data.data[i]._id] = true;\n              if (!data.data[i].isGenerated) {\n                this.showCheckbox[data.data[i]._id] = false;\n              }\n            }\n          } else {\n            this.dataSalary = [];\n            this.salarySlipStatus = 'No Salary Slip Found';\n          }\n        }\n      })\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Reset Functionality\n  resetFunctionality() {\n    try {\n      this.earnedLeaveYearMsg = '';\n      this.currentSalarySlipFilterStatus = 'later';\n      this.filterOnEmployee = false;\n      let dataSetting = this.currentMonthSetting();\n      let currentDate = new Date();\n      // let monthValue = (currentDate.getMonth()+1).toString().padStart(2,'0');\n      let monthValue = (currentDate.getMonth() + 1);\n      for (var i = 1; i <= 12; i++) {\n        if (monthValue >= i) {\n          this.currentMonthValue[i.toString().padStart(2, '0')] = true;\n        } else {\n          this.currentMonthValue[i.toString().padStart(2, '0')] = false;\n        }\n      }\n\n      (document.getElementById(`${dataSetting.monthValue}`) as HTMLInputElement).removeAttribute('selected');\n      (document.getElementById('salarySlipType') as HTMLInputElement).value = 'later';\n      (document.getElementById('salaryEmployee') as HTMLInputElement).value = '';\n      (document.getElementById('salaryModeType') as HTMLInputElement).value = '';\n      (document.getElementById('salarySlipMonth') as HTMLInputElement).value = monthValue.toString().padStart(2, '0');\n      this.listSalarySlipDetails(dataSetting.monthValue, dataSetting.year, 'later', false);\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  employeeFilter() {\n    this.filterOnEmployee = true;\n  }\n\n  // ADD CHEQUE NO.\n  addChequeNo(salaryId){\n    try {\n\n      this.api.getChequeApi(salaryId).subscribe(response => {\n        if(response.status === 'success'){\n          Swal.fire({\n            title: \"Cheque Details\",\n            text: \"Enter Cheque No.:\",\n            input: 'text',\n            inputValue: response.data.chequeNum,\n            showCancelButton: true,\n            inputValidator: (value) => {\n              return !value && 'Cheque No. Mandatory'\n            }\n            }).then((result) => {\n            if (result.value) {\n              this.api.addChequeApi(salaryId, {checkNum: result.value}).subscribe(response => {\n                (response.status === 'success') ?  this.notifier.notify(response.status, response.message) :\n                this.notifier.notify(response.status, response.message) ;\n              }, error => {\n                console.log(error);\n              });\n            }\n        });\n        }\n\n        if(response.status === 'error'){\n          this.notifier.notify(response.status, response.message);\n        }\n      }, error => {\n        console.log(error);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}\n\n\n","import { Component, OnInit,NgZone } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n\n@Component({\n    selector: 'app-add-payroll',\n    templateUrl: './add-payroll.component.html'\n})\n\nexport class AddPayrollComponent implements OnInit {\n    \n    constructor(){}\n\n    ngOnInit() {\n    }\n\n  }","<div class=\"card card-u\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\" #target>Update Salary Slip</h2>\n   </div>\n\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{errMsg}}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{successMsg}}</strong>\n         </p>\n      </div>\n\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"updateSalarySlipForm\">\n         <div [formGroup]=\"updateSalarySlipForm.get('employeeDetails')\">\n               <div class=\"row\">\n                 <div class=\"col-lg-6 col-md-6 col-sm-6\">\n                   <div class=\"form-group\">\n                      <label class=\"control-label \"><b>Employee Name:</b></label><br>\n                       <input type=\"text\" class=\"form-control\" formControlName=\"employeeName\" readonly>\n                     </div>\n                 </div>\n                 <div class=\"col-lg-6 col-md-6 col-sm-6\">\n                   <div class=\"form-group\">\n                     <label class=\"control-label \"><b>Designation:</b></label><br>\n                     <input type=\"text\" class=\"form-control\" formControlName=\"designation\" readonly>\n                 </div>\n                 </div>\n               </div>\n               <div class=\"row\">\n                  <div class=\"col-lg-6 col-md-6 col-sm-6\">\n                    <div class=\"form-group\">\n                       <label class=\"control-label\"><b>Present Days:</b></label><br>\n                        <input type=\"text\" class=\"form-control\" formControlName=\"present\">\n                      </div>\n                  </div>\n                  <div class=\"col-lg-6 col-md-6 col-sm-6\">\n                    <div class=\"form-group\">\n                      <label class=\"control-label col-sm-6\"><b>Pay Days:</b></label><br>\n                      <input type=\"text\" class=\"form-control\" formControlName=\"payDays\">\n                  </div>\n                  </div>\n                </div>\n                <div class=\"row\">\n                  <div class=\"col-lg-6 col-md-6 col-sm-6\">\n                    <div class=\"form-group\">\n                       <label class=\"control-label \"><b>Earned Leaves:</b></label><br>\n                        <input type=\"text\" class=\"form-control\" formControlName=\"earnedLeaves\" readonly>\n                      </div>\n                  </div>\n                  <div class=\"col-lg-6 col-md-6 col-sm-6\">\n                    <div class=\"form-group\">\n                      <label class=\"control-label \"><b>Unsactioned Leaves:</b></label><br>\n                      <input type=\"text\" class=\"form-control\" formControlName=\"unsanctionedLeave\" readonly>\n                  </div>\n                  </div>\n                </div>\n         </div>\n      </form>\n\n      <button class=\"btn btn-success\" (click)=\"showFunctinality()\">{{buttonValue}}</button>\n<div class=\"row\" *ngIf='showButtonValue'>\n<div class=\"col-lg-6 col-md-6 col-sm-6\">\n<!-- Earning Form Values -->\n<form class=\"form-horizontal\" role=\"form\" [formGroup]=\"earningsForm\">\n   <div [formGroup]=\"earningsForm.get('earnings')\">\n         <div class=\"edit-form-heading\">\n            <h3>Total Earnings</h3>\n         </div>\n   <div class=\"row\">\n      <div class=\"col-lg-6 col-md-6 col-sm-6\" *ngFor=\"let earnings of salarySlipEarnings\">\n         <div class=\"form-group\">\n            <label class=\"control-label \"><b>{{ earnings.label }}<sup class=\"redtext\">*</sup>:</b></label><br>\n            <input type=\"text\" class=\"form-control\" id=\"{{ earnings.label }}\" (keyup)=\"checkValidation(earnings.label)\" formControlName=\"{{earnings.label}}\">\n            <div><p class=\"errortext bottomspace-none\">{{salarySlipPattern[earnings.label]}}</p></div>\n        </div>\n      </div>\n   </div>\n   </div>\n</form>\n</div>\n<div class=\"col-lg-6 col-md-6 col-sm-6\">\n<!-- Deduction Form Values -->\n<form class=\"form-horizontal\" role=\"form\" [formGroup]=\"deductionForm\">\n   <div [formGroup]=\"deductionForm.get('deductions')\">\n         <div class=\"edit-form-heading\">\n            <h3>Total Deductions</h3>\n         </div>\n   <div class=\"row\">\n      <div class=\"col-lg-6 col-md-6 col-sm-6\" *ngFor=\"let deductions of salarySlipDeductions\">\n         <div class=\"form-group\">\n            <label class=\"control-label \"><b>{{ deductions.label }}<sup class=\"redtext\">*</sup>:</b></label><br>\n            <input type=\"text\" class=\"form-control\" id=\"{{ deductions.label }}\" (keyup)=\"checkValidation(deductions.label)\" formControlName=\"{{deductions.label}}\">\n            <div><p class=\"errortext bottomspace-none\">{{salarySlipPattern[deductions.label]}}</p></div>\n        </div>\n      </div>\n   </div>\n\n   </div>\n</form>\n   </div>\n</div>\n            <div class=\"form-group\">\n               <div class=\"\">\n                  <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"didUpdate\" (click)=\"updateSalarySlip(target)\">Update</button>\n                  <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"/pages/payroll/list-payroll\">Cancel</button>\n               </div>\n            </div>\n   </div>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators, FormArray, FormArrayName } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { PayrollApiService } from '../payroll-service/payroll-api.service';\n\n@Component({\n  selector: 'app-update-payroll',\n  templateUrl: 'update-payroll.component.html',\n  styleUrls:['update-payroll.component.scss']\n})\n\nexport class UpdatePayrollComponent implements OnInit {\nemployeeId: any;\nrequestMonth: any;\nrequestYear: any;\nexistingSalaryDetails: any;\nupdateSalarySlipForm: any;\nsalarySlipDeductions = [];\nsalarySlipEarnings = [];\ndeductionForm: any;\nearningsForm: any;\nbuttonValue = 'Show More';\nshowButtonValue = false;\nsalarySlipPattern = {};\ndidUpdate = false;\nupdatedSalaryForm: any;\nisGenerated: any;\nerrorMsg = false;\nsuccessMessage = false;\nerrMsg: any;\nsuccessMsg: any;\n\nconstructor(private api:PayrollApiService, private fb:FormBuilder,private route:ActivatedRoute,private ngZone: NgZone,private router:Router){}\n\nngOnInit() {\n  try {\n  this.employeeId = this.route.snapshot.paramMap.get(\"employeeId\");\n  this.requestMonth = this.route.snapshot.paramMap.get(\"month\");\n  this.requestYear = this.route.snapshot.paramMap.get(\"year\");\n  this.salarySlipForm();\n  this.api.listSalarySlipDetails(this.requestMonth,this.requestYear).subscribe((data)=>{\n    if(data.status === 'success'){\n      for(var i = 0; i<data.data.length; i++){\n        if(data.data[i]._id == this.employeeId){\n          this.existingSalaryDetails = data.data[i];\n          this.salarySlipDeductions = data.data[i].deductions;\n          this.salarySlipEarnings = data.data[i].earnings;\n          this.isGenerated = data.data[i].isGenerated;\n          break;\n        }\n      }\n      // Basic Details\n      this.updateSalarySlipForm = this.fb.group({\n        employeeDetails: new FormGroup ({\n          employeeName: new FormControl(this.existingSalaryDetails.employeeDetails.employeeName),\n          designation: new FormControl(this.existingSalaryDetails.employeeDetails.designation),\n          present: new FormControl(this.existingSalaryDetails.employeeDetails.present),\n          earnedLeaves: new FormControl(this.existingSalaryDetails.employeeDetails.earnedLeaves),\n          unsanctionedLeave: new FormControl(this.existingSalaryDetails.employeeDetails.unsanctionedLeave),\n          payDays: new FormControl(this.existingSalaryDetails.employeeDetails.payDays),\n        })\n      })\n\n      // Create Deduction Form Dynamically\n      let deduction = {};\n      this.salarySlipDeductions.forEach(totalDeductions =>{\n        deduction[totalDeductions.label] = new FormControl(totalDeductions.amt)\n        this.salarySlipPattern[totalDeductions.label] = '';\n      })\n      this.deductionForm = this.fb.group({\n        deductions: new FormGroup(deduction)\n      })\n\n      // Create Earnings Form Dynamically\n      let earnings = {};\n      this.salarySlipEarnings.forEach(totalEarnings=>{\n        earnings[totalEarnings.label] = new FormControl(totalEarnings.amt)\n        this.salarySlipPattern[totalEarnings.label] = '';\n      })\n      this.earningsForm = this.fb.group({\n        earnings: new FormGroup(earnings)\n      })\n    }\n  })\n  } catch (error) {\n    console.log(error);\n  }\n}\nsalarySlipForm(){\n  try {\n    this.updateSalarySlipForm = this.fb.group({\n      employeeDetails: new FormGroup ({\n        employeeName: new FormControl(''),\n        designation: new FormControl(''),\n        present: new FormControl(''),\n        earnedLeaves: new FormControl(''),\n        unsanctionedLeave: new FormControl(''),\n        payDays: new FormControl(''),\n      })\n    })\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nupdateSalarySlip(element){\n  try{\n    this.updatedSalaryForm = this.fb.group({\n      employeeDetails: new FormGroup({\n        employeeName: new FormControl(this.updateSalarySlipForm.get('employeeDetails.employeeName').value),\n        designation: new FormControl (this.updateSalarySlipForm.get('employeeDetails.designation').value),\n        present: new FormControl (this.updateSalarySlipForm.get('employeeDetails.present').value),\n        earnedLeaves: new FormControl (this.updateSalarySlipForm.get('employeeDetails.earnedLeaves').value),\n        unsanctionedLeave: new FormControl (this.updateSalarySlipForm.get('employeeDetails.unsanctionedLeave').value),\n        payDays: new FormControl (this.updateSalarySlipForm.get('employeeDetails.payDays').value),\n      }),\n      deductions : this.deductionForm,\n      earnings: this.earningsForm,\n      employeeIdArray: new FormArray([\n        new FormControl(this.employeeId),\n      ]),\n      isGenerated: new FormControl(this.isGenerated)\n    });\n\n   let currentDate = new Date();\n\n   // If salary Slip is not generated for the current month\n\n   if((currentDate.getMonth()+1).toString().padStart(2,'0') === this.requestMonth && !this.isGenerated){\n     this.api.monthlyGenerateSlip(this.updatedSalaryForm.value,this.requestMonth,this.requestYear,'Generate').subscribe((data)=>{\n       if(data.status === 'success'){\n         this.successMessage = true;\n         this.errorMsg = false;\n         this.successMsg = data.message;\n         setTimeout(() => {\n           this.router.navigateByUrl(\"/pages/payroll/list-payroll\");\n           this.handelErrors();\n         }, 2000);\n       } else if(data.status === 'error'){\n         this.successMessage = false;\n         this.errorMsg = true;\n         this.errMsg = data.message;\n         setTimeout(() => {\n           this.handelErrors();\n         }, 5000);\n       }\n     })\n   }\n\n   // If salary Slip is generated for the current month and user want to update the data\n   if((currentDate.getMonth()+1).toString().padStart(2,'0') === this.requestMonth && this.isGenerated){\n    this.api.monthlyGenerateSlip(this.updatedSalaryForm.value,this.requestMonth,this.requestYear,'Update').subscribe((data) =>{\n      if(data.status === 'success'){\n        this.successMessage = true;\n        this.errorMsg = false;\n        this.successMsg = data.message;\n        setTimeout(() => {\n          this.router.navigateByUrl(\"/pages/payroll/list-payroll\");\n          this.handelErrors();\n        }, 2000);\n      } else if(data.status === 'error'){\n        this.successMessage = false;\n        this.errorMsg = true;\n        this.errMsg = data.message;\n        setTimeout(() => {\n          this.handelErrors();\n        }, 5000);\n      }\n    })\n   }\n\n\n\n\n\n   element.scrollIntoView();\n  }catch(err){\n    console.log(err);\n  }\n}\n\nshowFunctinality(){\n  try{\n    this.showButtonValue = !this.showButtonValue;\n    if(this.showButtonValue){\n      this.buttonValue = 'Show Less';\n    } else {\n      this.buttonValue = 'Show More';\n    }\n  }catch(err){\n    console.log(err);\n  }\n}\n\ncheckValidation(label){\n  try {\n   if((document.getElementById(label)as HTMLInputElement).value.match(/^\\$?[0-9]?((\\.[0-9]+)|([0-9]+(\\.[0-9]+)?))$/) === null){\n     this.salarySlipPattern[label] = `${label} value is not acceptable`;\n   } else {\n    this.salarySlipPattern[label] = '';\n  }\n   for(var key in this.salarySlipPattern){\n     if(this.salarySlipPattern[key].length > 0){\n       this.didUpdate = true;\n       break;\n     } else {\n       this.didUpdate = false;\n     }\n   }\n\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nhandelErrors(){\n  try {\n    this.successMessage = false;\n    this.errorMsg = false;\n    this.successMsg = '';\n    this.errMsg = '';\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n}","import { Component, OnInit } from '@angular/core';\nimport { BsDatepickerConfig, BsDatepickerViewMode } from 'ngx-bootstrap/datepicker';\nimport moment from 'moment';\nimport { PayrollApiService } from '../payroll-service/payroll-api.service';\nimport { Workbook } from 'exceljs';\nimport * as fs from 'file-saver';\nimport Swal from 'sweetalert2';\nimport { TitleCasePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-payroll-sheet',\n  templateUrl: './payroll-sheet.component.html',\n  styleUrls: ['./payroll-sheet.component.scss']\n})\nexport class PayrollSheetComponent implements OnInit {\n\n  minMode: BsDatepickerViewMode = 'month'; // change for month:year\n  bsValue = new Date();\n  bsConfig: Partial<BsDatepickerConfig>;\n  companyDetails: any;\n  requestDateDetails = {\n    year: `${new Date().getFullYear()}`,\n    month: `${new Date().getMonth() + 1}`.padStart(2,'0')\n  }\n\n  constructor(\n    private apiService: PayrollApiService,\n    private titleCase: TitleCasePipe,\n  ) {\n    this.bsConfig = Object.assign({}, {\n      minMode : this.minMode,\n      dateInputFormat: 'MM-YYYY'\n    });\n   }\n\n  ngOnInit(): void {\n    this.getCompanyDetails();\n  }\n\n  rangeDatesUpdated(dateValues){\n    try {\n      this.requestDateDetails = {\n        year: `${moment(dateValues).get('years')}`,\n        month: `${moment(dateValues).get('months') + 1}`.padStart(2,'0')\n      }\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  getCompanyDetails() {\n    this.apiService.getCompanyDetails(localStorage.getItem('companyId')).subscribe((companyDetails) => {\n      if(companyDetails.status === 'success') {\n        this.companyDetails = companyDetails.data;\n      }\n    })\n  }\n\n\n  // GENERATE SALARY UPLOAD(BANK STATEMENT)\n  statementSheet(sheetType) {\n    try {\n        this.apiService.bankStatement({year: this.requestDateDetails.year, month: this.requestDateDetails.month, statementType: sheetType}).subscribe(response => {\n\n        if(response.status === 'success'){\n\n            (response.data.bankStatement.length === 0) ?\n            sheetType === 'Bank' ?\n            Swal.fire(\"Bank Statement is not available or may be you didn't add Empolyees Bank Details\" ) :\n            sheetType === 'Cash' ?\n            Swal.fire(\"Cash Statement is not available\" ):\n            Swal.fire(\"Cheque Statement is not available\" )\n            : sheetType === 'Bank' ?\n            this.generateBankSheet(response.data) :\n            sheetType === 'Cash' ?\n            this.generateCashStatement(response.data):\n            this.generateChequeStatement(response.data);\n\n        }\n        if(response.status === 'error'){\n          Swal.fire(response.message);\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n\n  }\n\n// FOR GENRATE EXCEL SHEET FOR BANK STATEMENT\n  async generateBankSheet(bankStatementData) {\n      // Create workbook and worksheet\n      const workbook = new Workbook();\n      const worksheet = workbook.addWorksheet('Bank Statement');\n      const subHeading = [`We request you to transfer our Salary from Indusind salary account for the amount of  ₹ ${bankStatementData.totalAmoutPaid} (${this.titleCase.transform(bankStatementData.totalAmoutPaidWords)} Only). Please refer  transfer from Aryavrat Infotech Pvt. Ltd. to IndusInd Salary Account of IndusInd Bank of amount ₹ ${bankStatementData.totalAmoutPaid}/-through cheque on 10th ${bankStatementData.month}.`];\n      const subject = 'IndusInd bank, Jaipur';\n      const tableSubHeading = [`Please find the list below for the salary transfer of ${bankStatementData.month} ${bankStatementData.year}`];\n      const header1 = bankStatementData.headerDetails;\n      const header2 = ['', '', '', '', ''];\n      const footer = [\n        ['', 'Total', '', bankStatementData.totalAmoutPaid, ''],\n      ];\n\n\n      const bankData = [];\n      for(let i = 0; i < bankStatementData.bankStatement.length; i++){\n        const data  = [];\n        data.push(i+1);\n        for(let key in bankStatementData.bankStatement[i]){\n           data.push(bankStatementData.bankStatement[i][key]);\n        }\n        bankData.push(data);\n      }\n          // Add Row and formatting\n      const subTitleRow = worksheet.addRow(['TO', '', '', '', 'Date : ' + bankStatementData.currentDate]);\n      worksheet.getCell('B2').value = subject;\n      // Add sheet heading\n      const sheetHeading = worksheet.addRow([bankStatementData.subject]);\n      worksheet.mergeCells('A3:E3');\n      worksheet.addRow([]);\n      sheetHeading.font = { name: 'Arial', family: 4, size: 10, underline: 'double', bold: true, };\n      sheetHeading.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n      // Add sheet sub heading\n      const sheetSubHeading1 = worksheet.addRow(subHeading);\n      worksheet.mergeCells('A5:E7');\n      sheetSubHeading1.getCell(5).border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n      sheetSubHeading1.getCell(5).alignment = { vertical: 'top', horizontal: 'left', wrapText: true };\n\n      // Add table sub heading\n      const sheetSubHeading2 = worksheet.addRow(tableSubHeading);\n      worksheet.mergeCells('A8:E8');\n      sheetSubHeading2.eachCell((cell, number) => {\n        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n      });\n\n      const headerRow1 = worksheet.addRow(header2);\n      headerRow1.eachCell((cell, number) => {\n        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n      });\n\n      const headerRow2 = worksheet.addRow(header1);\n      headerRow2.eachCell((cell, number) => {\n        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        cell.font = { name: 'Arial', family: 4, size: 10, bold: true, };\n      });\n\n      worksheet.getColumn(2).width = 30;\n      worksheet.getColumn(3).width = 30;\n      worksheet.getColumn(5).width = 30;\n\n      bankData.forEach(d => {\n        const row = worksheet.addRow(d);\n        row.eachCell((cell, number) => {\n          cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n          cell.alignment = { vertical: 'bottom', horizontal: 'left', wrapText: true };\n        });\n      });\n\n      footer.forEach(f => {\n        const footerRow = worksheet.addRow(f);\n        footerRow.eachCell((cell, number) => {\n          cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n          cell.alignment = { vertical: 'bottom', horizontal: 'left', wrapText: true };\n          cell.font = { name: 'Arial', family: 4, size: 10, bold: true, };\n        });\n      });\n      // Generate Excel sheet\n      workbook.xlsx.writeBuffer().then((data) => {\n        const blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n        fs.saveAs(blob, 'Bank Statement.xlsx');\n      });\n  }\n\n// FOR GENRATE EXCEL SHEET FOR CASH STATEMENT\n  async generateCashStatement(salaryStatementData){\n    try {\n         // Create workbook and worksheet\n    const workbook = new Workbook();\n    const worksheet = workbook.addWorksheet('Cash Statement');\n    worksheet.addRow([]);\n    worksheet.mergeCells('A2:E2');\n    worksheet.getCell('A2').value =`${salaryStatementData.companyName}, ${salaryStatementData.month} ${salaryStatementData.year}`;\n    worksheet.getCell('A2').font = { name: 'Trebuchet MS', family: 4, size: 15, bold: true, };\n    worksheet.getCell('A2').alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n    worksheet.addRow([]);\n    worksheet.addRow([]);\n\n    const header1 = salaryStatementData.headerDetails;\n    const data = [];\n\n    salaryStatementData.bankStatement.forEach((salaryInfo, index) => {\n      let salaryDetail = [index+1, salaryInfo.name, salaryInfo.cashAmt, '', ''];\n      data.push(salaryDetail);\n    });\n\n    const headerRow2 = worksheet.addRow(header1);\n    headerRow2.eachCell((cell) => {\n      cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n      cell.font = { name: 'Arial', family: 4, size: 10, bold: true, };\n    });\n\n    data.forEach(d => {\n      const row = worksheet.addRow(d);\n      row.eachCell((cell) => {\n        cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n      });\n    });\n\n\n    worksheet.getColumn(2).width = 30;\n    worksheet.getColumn(3).width = 30;\n    worksheet.getColumn(4).width = 30;\n    worksheet.getColumn(5).width = 30;\n\n        // Footer Row\n        const footerRow = worksheet.addRow(['Total','',salaryStatementData.totalCashAmtPaid,'']);\n        footerRow.font = { name: 'Arial', family: 4, size: 10, bold: true, };\n        footerRow.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n\n\n    // Generate Excel sheet\n    workbook.xlsx.writeBuffer().then((data) => {\n      const blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n      fs.saveAs(blob, 'Cash-Statement.xlsx');\n    });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // FOR GENRATE EXCEL SHEET FOR CASH STATEMENT\n  async generateChequeStatement(salaryStatementData){\n    try {\n         // Create workbook and worksheet\n    const workbook = new Workbook();\n    const worksheet = workbook.addWorksheet('Cheque Statement');\n    worksheet.addRow([]);\n    worksheet.mergeCells('A2:E2');\n    worksheet.getCell('A2').value =`${salaryStatementData.companyName}, ${salaryStatementData.month} ${salaryStatementData.year}`;\n    worksheet.getCell('A2').font = { name: 'Trebuchet MS', family: 4, size: 15, bold: true, };\n    worksheet.getCell('A2').alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n    worksheet.addRow([]);\n    worksheet.addRow([]);\n\n    const header1 = salaryStatementData.headerDetails;\n    const data = [];\n\n    salaryStatementData.bankStatement.forEach((salaryInfo, index) => {\n      let salaryDetail = [index+1, salaryInfo.name, salaryInfo.chequeAmt, salaryInfo.chequeNum, '', ''];\n      data.push(salaryDetail);\n    });\n\n    const headerRow2 = worksheet.addRow(header1);\n    headerRow2.eachCell((cell) => {\n      cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n      cell.font = { name: 'Arial', family: 4, size: 10, bold: true, };\n    });\n\n    data.forEach(d => {\n      const row = worksheet.addRow(d);\n      row.eachCell((cell) => {\n        cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n      });\n    });\n\n\n    worksheet.getColumn(2).width = 30;\n    worksheet.getColumn(3).width = 30;\n    worksheet.getColumn(4).width = 30;\n    worksheet.getColumn(5).width = 30;\n\n        // Footer Row\n        const footerRow = worksheet.addRow(['Total', '', salaryStatementData.totalChequeAmtPaid, '', '', '']);\n        footerRow.font = { name: 'Arial', family: 4, size: 10, bold: true, };\n        footerRow.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n\n\n    // Generate Excel sheet\n    workbook.xlsx.writeBuffer().then((data) => {\n      const blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n      fs.saveAs(blob, 'Cheque-Statement.xlsx');\n    });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PayrollComponent } from './payroll.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListPayrollComponent } from './list-payroll/list-report.component';\nimport { AddPayrollComponent } from './add-payroll/add-payroll.component';\nimport { UpdatePayrollComponent } from './update-payroll/update-report.component';\nimport { PayrollSheetComponent } from './payroll-sheet/payroll-sheet.component';\n\n\nconst route : Routes = [\n  {\n    path :'',\n    component : PayrollComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-payroll',\n        component: ListPayrollComponent,\n      },\n      {\n        path: 'add-payroll',\n        component: AddPayrollComponent\n      },\n      {\n        path: 'update-payroll/:employeeId/:month/:year',\n        component: UpdatePayrollComponent\n      },\n      {\n        path: 'payroll-sheet',\n        component: PayrollSheetComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-payroll',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  exports: [RouterModule],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class PayrollRoutingModule { }","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PayrollRoutingModule } from './payroll-routing.module';\nimport { PayrollComponent } from './payroll.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListPayrollComponent } from './list-payroll/list-report.component';\nimport { AddPayrollComponent } from './add-payroll/add-payroll.component';\nimport { UpdatePayrollComponent } from './update-payroll/update-report.component';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { NotifierModule, NotifierOptions } from 'angular-notifier';\nimport { PayrollSheetComponent } from './payroll-sheet/payroll-sheet.component';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\n\nconst customNotifierOptions: NotifierOptions = {\n  position: {\n    horizontal: {\n      position: 'right',\n      distance: 12\n    },\n    vertical: {\n      position: 'top',\n      distance: 12,\n      gap: 10\n    }\n  },\n  theme: 'material',\n  behaviour: {\n    autoHide: 3000,\n    onClick: 'hide',\n    onMouseover: 'pauseAutoHide',\n    showDismissButton: true,\n    stacking: 4\n  },\n  animations: {\n    enabled: true,\n    show: {\n      preset: 'slide',\n      speed: 300,\n      easing: 'ease'\n    },\n    hide: {\n      preset: 'fade',\n      speed: 300,\n      easing: 'ease',\n      offset: 50\n    },\n    shift: {\n      speed: 300,\n      easing: 'ease'\n    },\n    overlap: 150\n  }\n};\n\n@NgModule({\n  declarations: [\n    PayrollComponent,\n    ListPayrollComponent,\n    AddPayrollComponent,\n    UpdatePayrollComponent,\n    PayrollSheetComponent\n  ],\n\n  imports: [\n    CommonModule,\n    PayrollRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    NgxSpinnerModule,\n    NotifierModule.withConfig(customNotifierOptions),\n    BsDatepickerModule.forRoot(),\n\n  ]\n})\n\nexport class PayrollModule { }\n","<ngx-spinner bdColor=\"rgba(51,51,51,0.8)\" size=\"medium\" color=\"#fff\" type=\"timer\">\n</ngx-spinner>\n<notifier-container></notifier-container>\n<div class=\"card card-user\">\n    <div class=\"card-header\" >\n        <h2 class=\"card-title text-center\">Salary Sheets</h2>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"form-row\">\n            <div class=\"col-lg-3 col-md-3 col-sm-12\">\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2\">\n                        <input type=\"text\" class=\"form-control\" [bsConfig]=\"bsConfig\" placeholder=\"Select Months\"  [bsValue]=\"bsValue\" bsDatepicker (bsValueChange)=\"rangeDatesUpdated($event)\">\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-lg-9 col-md-9 col-sm-12\" >\n                <div class=\"form-group sheet-btn\" >\n                    <button class=\"btn btn-secondary sheet-btn-format\" type=\"button\" (click) = \"statementSheet('Bank')\"><i class=\"fa fa-download\"></i>Bank Statement</button>\n                    <button class=\"btn btn-secondary sheet-btn-format\" type=\"button\" (click) = \"statementSheet('Cash')\"><i class=\"fa fa-download\"></i>Cash Statement</button>\n                    <button class=\"btn btn-secondary sheet-btn-format\" type=\"button\" (click) = \"statementSheet('Cheque')\"><i class=\"fa fa-download\"></i>Cheque Statement</button>\n                </div>\n            </div>\n        </div>\n\n\n\n        <table class=\"table\" style=\"margin: auto\">\n            <tr>\n                <td><strong>Name:</strong></td>\n                <td> {{companyDetails?.name}} </td>\n                <td><strong>Address:</strong></td>\n                <td> {{companyDetails?.address}} </td>\n            </tr>\n            <tr>\n                <td><strong>Domicile:</strong></td>\n                <td> {{companyDetails?.domicile}} </td>\n                <td><strong>Official Company Number:</strong></td>\n                <td> {{companyDetails?.officialNumber}} </td>\n            </tr>\n            <tr>\n                <td><strong>Fax Number:</strong></td>\n                <td> {{companyDetails?.fax}} </td>\n                <td><strong>Email Address:</strong></td>\n                <td> {{companyDetails?.email}} </td>\n            </tr>\n            <tr>\n                <td><strong>Bank Name:</strong></td>\n                <td> {{companyDetails?.bankName}} </td>\n                <td><strong>Account No:</strong></td>\n                <td> {{companyDetails?.bankAccNum}} </td>\n            </tr>\n            <tr>\n                <td><strong>Country:</strong></td>\n                <td> {{companyDetails?.countryName}} </td>\n                <td><strong>Currency:</strong></td>\n                <td> {{companyDetails?.currency}} </td>\n            </tr>\n            <tr>\n                <td><strong>Taxation No:</strong></td>\n                <td> {{companyDetails?.taxationNumber}} </td>\n                <td><strong>PAN No:</strong></td>\n                <td> {{companyDetails?.panNumber}} </td>\n            </tr>\n            <tr>\n                <td><strong>BCC Address for all outgoing mails:</strong></td>\n                <td> {{companyDetails?.bccEmail}} </td>\n                <td></td>\n                <td></td>\n            </tr>\n        </table>\n\n\n\n\n\n    </div>\n\n\n\n</div>"]}