{"version":3,"sources":["webpack:///src/app/pages/branches/branches.component.ts","webpack:///src/app/pages/branches/branches.component.html","webpack:///src/app/pages/branches/branch-service/branch.service.ts","webpack:///src/app/pages/branches/add-branches/add-branches.component.html","webpack:///src/app/pages/branches/add-branches/add-branches.component.ts","webpack:///src/app/pages/branches/show-branches/show-branches.component.html","webpack:///src/app/pages/branches/show-branches/show-branches.component.ts","webpack:///src/app/pages/branches/update-branch-data/update-branch-data.component.html","webpack:///src/app/pages/branches/department/show-departments/show-departments.component.html","webpack:///src/app/pages/branches/department/update-department/update-department.component.html","webpack:///src/app/pages/branches/branches-routing.module.ts","webpack:///src/app/pages/branches/update-branch-data/update-branch-data.component.ts","webpack:///src/app/pages/branches/department/show-departments/show-departments.component.ts","webpack:///src/app/pages/branches/department/update-department/update-department.component.ts","webpack:///src/app/pages/branches/branches.module.ts"],"names":["BranchesComponent","BranchService","http","endpoint","environment","apiBaseUrl","headers","set","data","companyParentId","countryName","stateName","countryState","this","post","pipe","catchError","errorMgmt","err","console","log","sessionStorage","getItem","get","branchId","message","error","errorMessage","ErrorEvent","status","throwError","delete","departmentId","AddBranchesComponent","route","api","fb","ngZone","router","util","successMessage","errorMsg","validationMessage","type","isListAvaliable","permissionInfo","permissionRoleInfo","branchDataValidate","populateCountries","snapshotParam","search","branchForm","disable","group","name","compose","required","officialNumber","minLength","maxLength","pattern","email","fax","address","outGoingMails","taxationNumber","panNumber","bankName","bankAccNum","bankType","element","scrollIntoView","cleanAddCompanyForm","cleanFormLevelOne","valid","submitBranchFormData","value","selectCountryName","selectStateName","subscribe","successMsg","setTimeout","handleErrors","run","navigateByUrl","errMsg","getBranchListData","branch","length","branchesSatus","document","getElementById","countryMsg","stateOption","branchFormData","scroll","ShowBranchesComponent","branchList","showBranchCard","showBranchList","i","_id","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","removeData","dismiss","DismissReason","cancel","addBranches","routes","path","component","canActivate","children","UpdateBranchDataComponent","currencyApi","getBranchList","Object","branchData","String","snapshot","paramMap","moduleExists","updateBranchDataValidate","getExistingData","updateBranchForm","getBranchDetails","bankDetails","cleanUpdateBranchForm","submitUpdatedData","updateBranchFormData","ShowDepartmentsComponent","departmentList","Array","showDepartmentCard","getDepartmentListData","getDepartmentData","department","len","keys","removeDepartmentData","navigate","UpdateDepartmentComponent","departmentData","departmentParam","updateFormValidation","updateDepartmentForm","description","updateDepartmentData","push","redirectTo","pathMatch","BranchesRoutingModule","forChild","BranchesModule"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-branches',\n  templateUrl: './branches.component.html',\n  styleUrls: ['./branches.component.scss']\n})\nexport class BranchesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<router-outlet></router-outlet>","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { BranchData } from 'src/app/auth/branch';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../../environments/environment';\nimport { Department } from 'src/app/auth/department';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BranchService {\n\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n  //Method For submit branch form data to the server\n  submitBranchFormData(data: BranchData, companyParentId: String,countryName,stateName): Observable<any> {\n    try {\n      data.countryName = countryName;\n      data.countryState = stateName;\n      let apiUrl = `${this.endpoint}/company/add-branch/${companyParentId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for get branch list Data\n  getBranchListData(): Observable<any> {\n    try {\n      const companyParentId = sessionStorage.getItem(\"companyId\");\n      let apiUrl = `${this.endpoint}/company/branch-list/${companyParentId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for Individual Branch Details\n  getBranchDetails(branchId: String): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/company/branch-details/${branchId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for submit updated branch data\n  submitUpdatedData(data: BranchData, branchId: String): Observable<any> {\n    try {\n      const companyParentId = sessionStorage.getItem(\"companyId\");\n      let apiUrl = `${this.endpoint}/company/update-branch/${companyParentId}/${branchId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n\n  }\n\n  //Create method for manage errors when request and return response from the server\n  errorMgmt(error: HttpErrorResponse) {\n    try {\n      let errorMessage = '';\n      //Handle client side error\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      }\n      //Handle server side error\n      else {\n        errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n      }\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for delete branch\n  removeData(branchId: String): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/company/delete-branch/${branchId}`;\n      return this.http.delete(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n\n  }\n\n  //Method for add department\n  submitDepartmentData(data: Department, branchId: String): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/branch/add-department/${branchId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n    //Method for add department\n    updateDepartmentData(data: Department, branchId: String, departmentId:String): Observable<any> {\n      try {\n        let apiUrl = `${this.endpoint}/branch/update-department/${branchId}/${departmentId}`;\n        return this.http.post(apiUrl, data).pipe(\n          catchError(this.errorMgmt)\n        )\n      } catch (err) {\n        console.log(err.message);\n      }\n    }\n\n\n  //Method for get department list\n  getDepartmentData(branchId:String):Observable<any>{\n    try{\n      let apiUrl = `${this.endpoint}/branch/list-department/${branchId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n  //Method for remove department\n  removeDepartmentData(departmentId:String):Observable<any>{\n    try{\n      let apiUrl = `${this.endpoint}/branch/delete-department/${departmentId}`;\n      return this.http.delete(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n  }\n\n\n}\n","<div class=\"card card-user\">\n    <div class=\"card-header\">\n      <h2 class=\"card-title\" #target>Branch Details</h2>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"col-sm-offset-2\">\n          <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{ errMsg }}</strong>\n          </p>\n        </div>\n\n        <div class=\"col-sm-offset-2\">\n          <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{ successMsg }}</strong>\n          </p>\n        </div>\n\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"branchForm\" (ngSubmit)=\"branchFormData()\" novalidate>\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Name (to appear on reports):&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Branch Name\" formControlName=\"name\"\n                >\n              <div *ngFor=\"let validation of validationMessage.name\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"branchForm.get('name').hasError(validation.type) && (branchForm.get('name').dirty || branchForm.get('name').touched)\"\n                  style=\"color: red;margin-left: 14px;\">\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n\n\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Address:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n              <textarea class=\"form-control\" id=\"inputAddress\" placeholder=\"Address\" formControlName=\"address\"\n                ></textarea>\n              <div *ngFor=\"let validation of validationMessage.address\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"branchForm.get('address').hasError(validation.type) && (branchForm.get('address').dirty || branchForm.get('address').touched)\"\n                  style=\"color: red;margin-left: 14px;\">\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-row\">\n            <div class=\"form-group col-md-6\">\n              <label class=\"col-sm-4 control-label\"><b>Country:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n              <select class=\"dropdown dropdown-toggle form-control\" id=\"country\" name =\"country\" (change)=\"countryName()\">\n              </select>\n              <div [ngStyle]=\"{display: countryMsg === undefined?'none':'block'}\" ><p style=\"color:red;\">{{countryMsg}}</p></div>\n            </div>\n            <div class=\"form-group col-md-6\" *ngIf=\"stateOption\">\n              <label class=\"col-sm-4 control-label\"><b>State:</b></label>\n              <select class=\"dropdown dropdown-toggle form-control\" name =\"state\" id =\"state\" (change)=\"stateName()\"></select>\n            </div>\n            <div class=\"form-group col-md-6\" *ngIf=\"!stateOption\">\n              <label class=\"col-sm-4 control-label\"><b>State:</b></label>\n              <select class=\"dropdown dropdown-toggle form-control\" disabled>\n                <option class=\"dropdown-item\">----Country Not Selected----</option>\n              </select>\n            </div>\n          </div>\n\n          <div class=\"form-row\">\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Email Address:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Email \" formControlName=\"email\"\n                    >\n                  <div *ngFor=\"let validation of validationMessage.email\">\n                    <div style=\"color: red;margin-left: 14px;\"\n                      *ngIf=\"branchForm.get('email').hasError(validation.type) && (branchForm.get('email').dirty || branchForm.get('email').touched)\"\n                      style=\"color: red;margin-left: 14px;\">\n                      {{ validation.message }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>BCC Address for all outgoing mails:</b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"email\" id=\"inputBcc\" placeholder=\"Enter BCC Address\"\n                    formControlName=\"outGoingMails\">\n                  <div *ngFor=\"let validation of validationMessage.outGoingMails\">\n                    <div style=\"color: red;margin-left: 14px;\"\n                      *ngIf=\"branchForm.get('outGoingMails').hasError(validation.type) && (branchForm.get('outGoingMails').dirty || branchForm.get('outGoingMails').touched)\"\n                      style=\"color: red;margin-left: 14px;\">\n                      {{ validation.message }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n          </div>\n\n\n          <div class=\"form-row\">\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Bank Name:</b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"email\" placeholder=\"Enter Bank Name \" formControlName=\"bankName\">\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Account Type:</b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"email\" placeholder=\"Enter Account Type\"\n                    formControlName=\"bankType\">\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-row\">\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Account No:</b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"inputFax\" placeholder=\"Enter Account Number:\" formControlName=\"bankAccNum\">\n                  <div *ngFor=\"let validation of validationMessage.bankAccNum\">\n                    <div style=\"color: red;margin-left: 14px;\"\n                      *ngIf=\"branchForm.get('bankAccNum').hasError(validation.type) && (branchForm.get('bankAccNum').dirty || branchForm.get('bankAccNum').touched)\"\n                      style=\"color: red;margin-left: 14px;\">\n                      {{ validation.message }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Official Branch Number:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"inputCompanyNo\" placeholder=\"Enter Official Branch Number\"\n                    formControlName=\"officialNumber\" >\n                  <div *ngFor=\"let validation of validationMessage.officialNumber\">\n                    <div style=\"color: red;margin-left: 14px;\"\n                      *ngIf=\"branchForm.get('officialNumber').hasError(validation.type) && (branchForm.get('officialNumber').dirty || branchForm.get('officialNumber').touched)\"\n                      style=\"color: red;margin-left: 14px;\">\n                      {{ validation.message }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-row\">\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Fax Number:</b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"inputFax\" placeholder=\"Enter Fax Number:\" formControlName=\"fax\">\n                  <div *ngFor=\"let validation of validationMessage.fax\">\n                    <div style=\"color: red;margin-left: 14px;\"\n                      *ngIf=\"branchForm.get('fax').hasError(validation.type) && (branchForm.get('fax').dirty || branchForm.get('fax').touched)\"\n                      style=\"color: red;margin-left: 14px;\">\n                      {{ validation.message }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Taxation No:</b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"inputTaxationno.\" placeholder=\"Enter Taxation Number\"\n                    formControlName=\"taxationNumber\">\n                  <div *ngFor=\"let validation of validationMessage.taxNumber\">\n                    <div style=\"color: red;margin-left: 14px;\"\n                      *ngIf=\"branchForm.get('taxationNumber').hasError(validation.type) && (branchForm.get('taxationNumber').dirty || branchForm.get('taxationNumber').touched)\"\n                      style=\"color: red;margin-left: 14px;\">\n                      {{ validation.message }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                  <label class=\"col-sm-6 control-label\"><b>PAN (Permanent Account Number):</b></label>\n                  <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" onkeyup=\"this.value = this.value.toUpperCase().trim();\" type=\"text\" id=\"inputPanno\" placeholder=\"Enter PAN Number\"\n                      formControlName=\"panNumber\">\n                    <div *ngFor=\"let validation of validationMessage.panNumber\">\n                      <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"branchForm.get('panNumber').hasError(validation.type) && (branchForm.get('panNumber').dirty || branchForm.get('panNumber').touched)\"\n                        style=\"color: red;margin-left: 14px;\">\n                        {{ validation.message }}\n                      </div>\n                    </div>\n                  </div>\n              </div>\n            </div>\n         </div>\n\n          <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n              <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"branchForm.invalid || countryMsg || countryMsg === undefined\" (click)=\"scroll(target)\">Add Branch</button>\n              <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"../show-branches\">Cancel</button>\n\n            </div>\n          </div>\n        </form>\n        </div>\n    </div>\n\n","import { Component, OnInit, NgZone, ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ } from '@angular/core';\nimport { BranchService } from '../branch-service/branch.service';\nimport { FormBuilder, FormControl, Validators, FormGroup } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\ndeclare var populateCountries: any ;\n\n@Component({\n  selector: 'app-add-branches',\n  templateUrl: './add-branches.component.html',\n  styleUrls: ['./add-branches.component.scss']\n})\nexport class AddBranchesComponent implements OnInit {\n\n  branchForm:FormGroup;\n  snapshotParam:String;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  countryMsg: string;\n  stateOption: boolean;\n  selectCountryName: string;\n  selectStateName: string;\n  permissionInfo: any;\n\n  constructor(private route: ActivatedRoute,private api: BranchService, public fb: FormBuilder, private ngZone: NgZone,\n    private router: Router,\n    private util: UtilitiesService,\n    ) {\n      this.isListAvaliable();\n    }\n\n  ngOnInit() {\n    this.permissionInfo = this.util.permissionRoleInfo;\n    this.branchDataValidate();\n    populateCountries(\"country\", \"state\");\n    this.snapshotParam = sessionStorage.getItem(\"companyId\");\n    if(this.permissionInfo.search('Create Branch') === -1){\n      this.branchForm.disable();\n    }\n  }\n\n   //Method for Validation\n  branchDataValidate() {\n    try {\n      this.branchForm = this.fb.group({\n        name: new FormControl('', Validators.compose([\n          Validators.required,\n        ])),\n        officialNumber: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(15),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n        ])),\n        email: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n        ])),\n        fax: new FormControl('', Validators.compose([\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n          Validators.minLength(10),\n          Validators.maxLength(10),\n        ])),\n        address: new FormControl('', Validators.required),\n        outGoingMails: new FormControl('', Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')),\n        taxationNumber: new FormControl(''),\n        panNumber: new FormControl('', Validators.pattern('(^[A-Za-z]{5}[0-9]{4}[A-Za-z]$)')),\n        bankName: new FormControl(''),\n        bankAccNum: new FormControl('',Validators.compose([Validators.maxLength(16),\n          Validators.pattern(/^[0-9]*$/)])),\n        bankType: new FormControl('')\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  scroll(element) {\n    element.scrollIntoView();\n}\n\n//Method for submit form data\n  branchFormData(){\n    try{\n      let cleanAddCompanyForm = this.util.cleanFormLevelOne(this.branchForm);\n      if(this.branchForm.valid){\n        this.api.submitBranchFormData(cleanAddCompanyForm.value,this.snapshotParam,this.selectCountryName,this.selectStateName).subscribe((data)=>{\n          if(data.status === \"success\"|| data.status === 200){\n            this.successMessage = true ;\n            this.errorMsg = false ;\n            this.successMsg = data.message;\n            setTimeout(()=>{\n            this.handleErrors();\n            this.ngZone.run(()=>this.router.navigateByUrl('/pages/branches/show-branches'));\n             }, 1500);\n          }\n          else if(data.status == \"error\"){\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(()=> {\n              this.handleErrors();\n            },4000)\n          }\n        })\n      }\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n  //Method for show validdation message\n  validationMessage = {\n    'name': [\n      { type: 'required', message: 'Name is required' },\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ],\n    'address':[\n      { type: 'required', message: 'Address is required' },\n    ],\n    'officialNumber': [\n      { type: 'required', message: 'Number is required' },\n      { type: 'minlength', message: 'Number too short ' },\n      { type: 'maxlength', message: 'Number is too large' },\n      { type: 'pattern', message: 'Company Number not valid' },\n    ],\n    'fax': [\n      { type: 'minlength', message: 'Fax number too short ' },\n      { type: 'maxlength', message: 'Fax no. is too large' },\n      { type: 'pattern', message: 'Fax Number not valid' },\n    ],\n    'outGoingMails':[\n      { type: 'pattern', message: 'Invalid Mail'},\n    ],\n    'taxNumber':[\n      { type: 'pattern', message: 'Invalid Taxation No.'},\n    ],\n    'panNumber':[\n      { type: 'pattern', message: 'Invalid PAN Number'},\n    ],\n    'bankAccNum':[\n      { type: 'maxlength', message: 'Account No. limit exceeded'},\n      { type: 'pattern', message: 'Invalid Account No.'},\n    ],\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\nisListAvaliable(){\n  try{\n    this.api.getBranchListData().subscribe((data) =>{\n      if(data.status === 'success'){\n        if(data.branch.length > 0 && this.util.branchesSatus !== 1){\n          this.router.navigateByUrl(\"/pages/branches/show-branches\");\n          this.util.branchesSatus = 0;\n        }\n      }\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\n//Check For Country Validation\ncountryName(){\n  if((document.getElementById('country')as HTMLInputElement).value === '-1'){\n   this.countryMsg = \"Country Name is Required\";\n   this.stateOption = false;\n  } else {\n    this.selectCountryName = (document.getElementById('country')as HTMLInputElement).value\n    this.countryMsg = '';\n    this.stateOption = true;\n    this.stateName();\n  }\n}\n// State Option Functionality\nstateName(){\n  if((document.getElementById('state')as HTMLInputElement) === null){\n    this.selectStateName = '';\n  } else if((document.getElementById('state')as HTMLInputElement).value === ''){\n    this.selectStateName = '';\n  } else {\n    this.selectStateName = (document.getElementById('state')as HTMLInputElement).value\n  }\n}\n\n}\n","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Branches List</h2>\n        <a [class.disabled]=\"permissionInfo.search('Create Branch') === -1\"\n        class=\"btn btn-primary\" routerLink=\"../add-branch\" style=\"float: right;\" (click) = \"addBranches()\"><i\n                class=\"fa fa-plus-square\"></i>&nbsp; Add Branch</a>\n    </div>\n    <div class=\"panel-body\">\n        <ul class=\"list-group\">\n            <li class=\"list-group-item\" *ngFor=\"let list of branchList\">\n                <strong><b (click)=\"showData(list._id)\" style=\"cursor: pointer\">{{ list.name}}</b></strong>\n                <div style=\"float: right;\">\n                    <i class=\"dropdown-toggle\" (click)=\"showData(list._id)\"></i>\n                </div>\n                <div class=\"card\" style=\"background-color:ghostwhite\" [hidden]=\"showBranchCard[list._id]\">\n                    <table class=\"table\" style=\"margin: auto\">\n                        <tr>\n                            <td><b>Name:</b></td>\n                            <td>{{ list.name }}</td>\n                            <td><b>Address:</b></td>\n                            <td>{{ list.address }}</td>\n                        </tr>\n                        <tr>\n                            <td><b>Official Number:</b></td>\n                            <td>{{ list.officialNumber }}</td>\n                            <td><b>Fax:</b></td>\n                            <td>{{ list.fax }}</td>\n                        </tr>\n                        <tr>\n                            <td><b>Email:</b></td>\n                            <td>{{ list.email }}</td>\n                            <td><b>Bank Name:</b></td>\n                            <td>{{ list.bankName }}</td>\n                        </tr>\n                        <tr>\n                            <td><b>Account No:</b></td>\n                            <td>{{ list.bankAccNum }}</td>\n                            <td><b>Country Name:</b></td>\n                            <td>{{ list.countryName }}</td>\n                        </tr>\n                        <tr>\n                            <td><b>Taxation No:</b></td>\n                            <td>{{ list.taxationNumber }}</td>\n                            <td><b>State Name:</b></td>\n                            <td>{{ list.countryState }}</td>\n                        </tr>\n                        <tr>\n                            <td><b>PAN No:</b></td>\n                            <td>{{ list.panNumber }}</td>\n                            <td><b>Currency:</b></td>\n                            <td>{{ list.currency }}</td>\n                        </tr>\n                        <tr>\n                            <td><b>BCC Address for all outgoing mails:</b></td>\n                            <td>{{ list.outGoingMails }}</td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n                    </table>\n                    <div>\n                        <a [class.disabled]=\"permissionInfo.search('Edit Branch') === -1\"\n                         routerLink=\"../update-branch-data/{{ list._id }}\" style=\"float: right\" class=\"btn btn-primary\">\n                            <i class=\"fa fa-pencil-square-o\"></i>\n                        </a\n                        >\n                        <button [disabled]=\"permissionInfo.search('Delete Branch') === -1\"\n                         style=\"float: right;\" class=\"btn btn-danger\" type=\"button\"\n                            (click)=\"showConfirmationMessage(list._id)\">\n                            <i class=\"fa fa-trash\"></i></button>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { BranchService } from '../branch-service/branch.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-show-branches',\n  templateUrl: './show-branches.component.html',\n  styleUrls: ['./show-branches.component.scss']\n})\nexport class ShowBranchesComponent implements OnInit {\n\n  snapShot:String;\n  // branchList: any =Object;\n  branchList: any = [];\n  showBranchCard = {};\n  permissionInfo: any;\n\n  constructor(private api:BranchService,\n     private route:ActivatedRoute,\n     private ngZone: NgZone,\n     private router: Router,\n     private util: UtilitiesService) { }\n\n  ngOnInit() {\n    this.permissionInfo = this.util.permissionRoleInfo;\n    this.showBranchList();\n  }\n\n//Method for Show branch list\n  showBranchList(){\n    try{\n    this.api.getBranchListData().subscribe((data)=>{\n      if(data.status === \"success\" || data.status === 200){\n        this.branchList = data.branch;\n        if(data.branch.length == 0){\n          this.router.navigateByUrl(\"/pages/branches/add-branch\");\n        }else{\n        for(var i = 0; i < this.branchList.length; i++){\n          this.showBranchCard[this.branchList[i]._id] = true;\n        }\n        }\n      }\n    })\n  }\n  catch(err){\n    console.log(err);\n  }\n}\n\n  //Method for onclick data show when collapse\n  showData(branchId: String) {\n    try{\n    this.showBranchCard[`${branchId}`] = !this.showBranchCard[`${branchId}`];\n    }\n    catch(err){\n      console.log(err);\n    }\n  }\n\n   //Method for remove company branch\n   showConfirmationMessage(branchId: String) {\n    try {\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeData(branchId).subscribe((data) => {\n            if (data.status === \"success\" || data.status === 200) {\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                data.message,\n                'success'\n              )\n              this.ngZone.run(()=>{\n                this.router.navigateByUrl('/pages/branches/show-branches');\n              })\n              this.showBranchList();\n            } else if(data.status === 'error'){\n              swalWithBootstrapButtons.fire(\n                'ERROR!',\n                data.message,\n                'error'\n              )\n            }\n          })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your list data safe',\n            'error'\n          )\n        }\n      })\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n  addBranches(){\n    try{\n      this.util.branchesSatus = 1;\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n}\n","<div class=\"card card-user\">\n        <div class=\"card-header\">\n          <h2 class=\"card-title\" #target style=\"text-align: center\">Update Branch Details</h2>\n        </div>\n        <div class=\"card-body\">\n            <div class=\"col-sm-offset-2\">\n              <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                <strong>{{errMsg}}</strong>\n              </p>\n            </div>\n            <div class=\"col-sm-offset-2\">\n              <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                <strong>{{successMsg}}</strong>\n              </p>\n            </div>\n\n            <form class=\"form-horizontal\"  [formGroup]=\"updateBranchForm\" (ngSubmit)=\"updateBranchFormData()\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Name (to appear on reports):&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Branch Name\" formControlName=\"name\"\n                    >\n                    <div *ngFor=\"let validation of validationMessage.name\">\n                      <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"updateBranchForm.get('name').hasError(validation.type) && (updateBranchForm.get('name').dirty || updateBranchForm.get('name').touched)\"\n                        >\n                        {{ validation.message }}\n                      </div>\n                    </div>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Address:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                  <textarea class=\"form-control\" id=\"inputAddress\" placeholder=\"Address\" formControlName=\"address\"\n                    ></textarea>\n                    <div *ngFor=\"let validation of validationMessage.address\">\n                      <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"updateBranchForm.get('address').hasError(validation.type) && (updateBranchForm.get('address').dirty || updateBranchForm.get('address').touched)\"\n                        >\n                        {{ validation.message }}\n                      </div>\n                    </div>\n                </div>\n              </div>\n\n              <div class=\"form-row\">\n                <div class=\"form-group col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>BCC Address for all outgoing mails:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"email\" id=\"inputBcc\" placeholder=\"Enter BCC Address\"\n                        formControlName=\"outGoingMails\">\n                      <div *ngFor=\"let validation of validationMessage.outGoingMails\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                          *ngIf=\"updateBranchForm.get('outGoingMails').hasError(validation.type) && (updateBranchForm.get('outGoingMails').dirty || updateBranchForm.get('outGoingMails').touched)\"\n                          style=\"color: red;margin-left: 14px;\">\n                          {{ validation.message }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                </div>\n                <div class=\"form-group col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Bank Name:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"text\" placeholder=\"Enter Bank Name\"\n                        formControlName=\"bankName\">\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"form-row\">\n                <div class=\"form-group col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Account Type:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"text\" placeholder=\"Enter Account Type\"\n                        formControlName=\"bankType\">\n                    </div>\n                  </div>\n                </div>\n                <div class=\"form-group col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Account Number:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"email\" placeholder=\"Enter Account Number\"\n                        formControlName=\"bankAccNum\">\n                      <div *ngFor=\"let validation of validationMessage.bankAccNum\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                          *ngIf=\"updateBranchForm.get('bankAccNum').hasError(validation.type) && (updateBranchForm.get('bankAccNum').dirty || updateBranchForm.get('bankAccNum').touched)\"\n                          style=\"color: red;margin-left: 14px;\">\n                          {{ validation.message }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"form-row\">\n                <div class=\"form-group col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Fax Number:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"text\" id=\"inputFax\" placeholder=\"Enter Fax Number:\" formControlName=\"fax\" >\n                      <div *ngFor=\"let validation of validationMessage.fax\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                          *ngIf=\"updateBranchForm.get('fax').hasError(validation.type) && (updateBranchForm.get('fax').dirty || updateBranchForm.get('fax').touched)\"\n                          style=\"color: red;margin-left: 14px;\">\n                          {{ validation.message }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"form-group col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Official Branch Number:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"text\" id=\"inputCompanyNo\" placeholder=\"Enter Official Branch Number\"\n                        formControlName=\"officialNumber\" >\n                      <div *ngFor=\"let validation of validationMessage.officialNumber\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                          *ngIf=\"updateBranchForm.get('officialNumber').hasError(validation.type) && (updateBranchForm.get('officialNumber').dirty || updateBranchForm.get('officialNumber').touched)\"\n                          style=\"color: red;margin-left: 14px;\">\n                          {{ validation.message }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"form-row\">\n                <div class=\"col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Taxation No:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"text\" id=\"inputTaxationno.\" placeholder=\"Enter Taxation Number\"\n                        formControlName=\"taxationNumber\">\n                      <div *ngFor=\"let validation of validationMessage.taxNumber\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                          *ngIf=\"updateBranchForm.get('taxationNumber').hasError(validation.type) && (updateBranchForm.get('taxationNumber').dirty || updateBranchForm.get('taxationNumber').touched)\"\n                          style=\"color: red;margin-left: 14px;\">\n                          {{ validation.message }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-md-6\">\n                  <div class=\"form-group\">\n                      <label class=\"col-sm-6 control-label\"><b>PAN (Permanent Account Number):</b></label>\n                      <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" onkeyup=\"this.value = this.value.toUpperCase().trim();\" type=\"text\" id=\"inputPanno\" placeholder=\"Enter PAN Number\"\n                          formControlName=\"panNumber\">\n                        <div *ngFor=\"let validation of validationMessage.panNumber\">\n                          <div style=\"color: red;margin-left: 14px;\"\n                            *ngIf=\"updateBranchForm.get('panNumber').hasError(validation.type) && (updateBranchForm.get('panNumber').dirty || updateBranchForm.get('panNumber').touched)\"\n                            style=\"color: red;margin-left: 14px;\">\n                            {{ validation.message }}\n                          </div>\n                        </div>\n                      </div>\n                  </div>\n                </div>\n             </div>\n              <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                  <button type=\"submit\" class=\"btn btn-success\" (click)=\"scroll(target)\" [disabled]=\"updateBranchForm.invalid || permissionInfo.search('Edit Branch')=== -1\" >Update Branch</button>\n                  <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../../show-branches\" >Cancel</button>\n                </div>\n              </div>\n            </form>\n            </div>\n        </div>","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Departments List</h2>\n        <button class=\"btn btn-primary\" (click)=\"navigate()\"  style=\"float: right;\"><i\n                class=\"fa fa-plus-square\"></i>&nbsp; Add Department</button>\n    </div>\n\n    <div class=\"panel-body\">\n            <ul class=\"list-group\">\n                <li class=\"list-group-item\" *ngFor=\"let list of departmentList\">\n                    <strong><b (click)=\"showData(list._id)\" style=\"cursor: pointer\">{{ list.title }}</b></strong>\n                    <div style=\"float: right;\">\n                        <i class=\"dropdown-toggle\" (click)=\"showData(list._id)\"></i>\n                    </div>\n                    <div class=\"card\" style=\"background-color:ghostwhite\" [hidden]=\"showDepartmentCard[list._id]\">\n                        <table class=\"table\" style=\"margin: auto\">\n                            <tr>\n                                <th>Title:</th>\n                                <td>{{ list.title }}</td>\n                            </tr>\n                            <tr>\n                                <th>Description:</th>\n                                <td>{{ list.description }}</td>\n                            </tr>\n                        </table>\n                        <div>\n                            <a  routerLink=\"../../update-department/{{ snapshotParam }}/{{ list._id}}\" style=\"float: right\" class=\"btn btn-primary\">\n                                <i class=\"fa fa-pencil-square-o\"></i>&nbsp;\n                                update\n                            </a>\n                            <button style=\"float: right;\" class=\"btn btn-danger\" type=\"button\"\n                               (click)=deleteList(list._id)  >\n                                <i class=\"fa fa-trash\"></i>&nbsp; Delete\n                            </button>\n                        </div>\n                    </div>\n                </li>\n            </ul>\n        </div> \n</div>","<div class=\"card card-user\">\n    <div class=\"card-header\">\n        <h2 class=\"card-title\" style=\"text-align: center\">Update Department Details</h2>\n        <a routerLink=\"../../../show-departments/{{ snapshotParam }}\" class=\"btn btn-primary btn-circle\"\n            style=\"float: right;\"><i class=\"fa  fa-arrow-right\"></i></a>\n    </div>\n\n\n    <div class=\"card-body\">\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                <strong>{{ errMsg }}</strong>\n            </p>\n        </div>\n\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                <strong>{{ successMsg }}</strong>\n            </p>\n        </div>\n\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"updateDepartmentForm\" *ngFor=\"let list of departmentData\"\n            (ngSubmit)=\"updateDepartmentFormData()\" novalidate>\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"inputTitle\"\n                        formControlName=\"title\">\n\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Description:</b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"inputDescription\" \n                        formControlName=\"description\">\n\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"updateDepartmentForm.invalid\">Add\n                        Department</button>\n                </div>\n            </div>\n\n        </form>\n    </div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BranchesComponent } from './branches.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { AddBranchesComponent } from './add-branches/add-branches.component';\nimport { ShowBranchesComponent } from './show-branches/show-branches.component';\nimport { UpdateBranchDataComponent } from './update-branch-data/update-branch-data.component';\n// import { AddDepartmentComponent } from './department/add-department/add-department.component';\nimport { ShowDepartmentsComponent } from './department/show-departments/show-departments.component';\nimport { UpdateDepartmentComponent } from './department/update-department/update-department.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BranchesComponent,\n    canActivate:[AuthGuard],\n    children: [\n      {\n        path:'add-branch',\n        component:AddBranchesComponent,\n      },\n      {\n        path:'show-branches',\n        component:ShowBranchesComponent,\n      },\n      {\n        path:'update-branch-data/:branchId',\n        component:UpdateBranchDataComponent,\n      },\n      // {\n      //   path:'add-department/:branchId',\n      //   component:AddDepartmentComponent,\n      // },\n      {\n        path:'show-departments/:branchId',\n        component:ShowDepartmentsComponent,\n      },\n      {\n        path:'update-department/:branchId/:departmentId',\n        component:UpdateDepartmentComponent,\n      },\n      {\n        path:'',\n        redirectTo :'show-branches',\n        pathMatch:'full',\n      },\n    ],\n  },\n]\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n  ]\n})\nexport class BranchesRoutingModule { }","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BranchService } from '../branch-service/branch.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\nimport { ApiService } from 'src/app/services/api.service';\n\n\n@Component({\n  selector: 'app-update-branch-data',\n  templateUrl: './update-branch-data.component.html',\n  styleUrls: ['./update-branch-data.component.scss']\n})\nexport class UpdateBranchDataComponent implements OnInit {\n\n  updateBranchForm: FormGroup;\n  getBranchList:any =Object;\n  branchData: Object[] = [];\n  snapshotParam: String;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: any = String;\n  errorMsg: boolean = false;\n  permissionInfo: any;\n\n\n  constructor(private route: ActivatedRoute, private api: BranchService, public fb: FormBuilder, private ngZone: NgZone,\n    private router: Router,\n    private util: UtilitiesService,\n    private currencyApi: ApiService) {\n      this.snapshotParam = this.route.snapshot.paramMap.get(\"branchId\");\n      this.util.moduleExists(this.snapshotParam,'Branches').subscribe((data)=>{\n        if(data.status === 'success'){\n          if(!data.data){\n            this.router.navigateByUrl('/pages/branches/show-branches');\n          }\n        }\n      })\n    }\n\n  ngOnInit() {\n    this.updateBranchDataValidate();\n    this.permissionInfo = this.util.permissionRoleInfo;\n    this.getExistingData();\n    if(this.permissionInfo.search('Edit Branch') === -1){\n      this.updateBranchForm.disable();\n    }\n  }\n\n  //Method for Validation\n  updateBranchDataValidate() {\n    try {\n      this.updateBranchForm = this.fb.group({\n        name: new FormControl('', Validators.compose([ Validators.required\n        ])),\n        officialNumber: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(15),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n        ])),\n        fax: new FormControl('', Validators.compose([\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n          Validators.minLength(10),\n          Validators.maxLength(10),\n        ])),\n        address: new FormControl('', Validators.required),\n        outGoingMails: new FormControl('', Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')),\n        taxationNumber: new FormControl(''),\n        panNumber: new FormControl('', Validators.pattern('(^[A-Za-z]{5}[0-9]{4}[A-Za-z]$)')),\n        bankName: new FormControl(''),\n        bankAccNum: new FormControl('',Validators.compose([Validators.maxLength(16),\n          Validators.pattern(/^[0-9]*$/)])),\n        bankType: new FormControl('')\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  scroll(element) {\n    element.scrollIntoView();\n  }\n\n  //Method for get existing data show on update form\n  getExistingData() {\n    try{\n      this.api.getBranchDetails(this.snapshotParam).subscribe((data) => {\n        if (data.status === \"success\") {\n          this.getBranchList = data.data;\n              this.updateBranchForm = this.fb.group({\n                name: new FormControl(this.getBranchList.name, Validators.compose([ Validators.required\n                ])),\n                officialNumber: new FormControl(this.getBranchList.officialNumber, Validators.compose([\n                  Validators.required,\n                  Validators.minLength(10),\n                  Validators.maxLength(15),\n                  Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n                ])),\n                fax: new FormControl(this.getBranchList.fax, Validators.compose([\n                  Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n                  Validators.minLength(10),\n                  Validators.maxLength(10),\n                ])),\n                address: new FormControl(this.getBranchList.address, Validators.required),\n                outGoingMails: new FormControl(this.getBranchList.outGoingMails, Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')),\n                taxationNumber: new FormControl(this.getBranchList.taxationNumber),\n                panNumber: new FormControl(this.getBranchList.panNumber, Validators.pattern('(^[A-Za-z]{5}[0-9]{4}[A-Za-z]$)')),\n                bankName: new FormControl(this.getBranchList.bankDetails.bankName),\n                bankAccNum: new FormControl(this.getBranchList.bankDetails.bankAccNum,Validators.compose([Validators.maxLength(16),\n                  Validators.pattern(/^[0-9]*$/)])),\n                bankType: new FormControl(this.getBranchList.bankDetails.bankType)\n              })\n        }\n      })\n    } catch(err){\n      console.log(err);\n    }\n\n  }\n\n  //Method for submit updated form data\n  updateBranchFormData() {\n    try {\n      let cleanUpdateBranchForm = this.util.cleanFormLevelOne(this.updateBranchForm);\n      if (this.updateBranchForm.valid) {\n        this.api.submitUpdatedData(cleanUpdateBranchForm.value, this.snapshotParam).subscribe(data => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n              this.router.navigateByUrl(\"/pages/branches/show-branches\");\n            }, 2000);\n          }\n          else if (data.status === \"error\" || data.status === 404) {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n            },3000)\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method for show validdation message\n  validationMessage = {\n    'name':[{ type: 'required', message: 'Name is Required ' }],\n    'address':[{ type: 'required', message: 'Address is Required ' }],\n    'officialNumber': [\n      { type: 'required', message: 'Official Number is Required ' },\n      { type: 'minlength', message: 'Number too short ' },\n      { type: 'maxlength', message: 'Number is too large' },\n      { type: 'pattern', message: 'Company Number not valid' },\n    ],\n    'fax': [\n      { type: 'minlength', message: 'Fax number too short ' },\n      { type: 'maxlength', message: 'Fax no. is too large' },\n      { type: 'pattern', message: 'Fax Number not valid' },\n    ],\n    'outGoingMails': [\n      { type: 'pattern', message: 'Invalid Mail' },\n    ],\n    'taxNumber':[\n      { type: 'pattern', message: 'Invalid Taxation No.'},\n    ],\n    'panNumber':[\n      { type: 'pattern', message: 'Invalid PAN Number'},\n    ],\n    'bankAccNum':[\n      { type: 'maxlength', message: 'Account No. limit exceeded'},\n      { type: 'pattern', message: 'Invalid Account No.'},\n    ],\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n}\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BranchService } from '../../branch-service/branch.service';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-show-departments',\n  templateUrl: './show-departments.component.html',\n  styleUrls: ['./show-departments.component.scss']\n})\nexport class ShowDepartmentsComponent implements OnInit {\n\n  snapshotParam: String;\n  departmentList= new Array();\n  showDepartmentCard = {};\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private api: BranchService,\n    private ngZone: NgZone, ) { }\n\n  ngOnInit() {\n    this.getDepartmentListData();\n  }\n\n  navigate() {\n    this.router.navigateByUrl(`/pages/branches/add-department/${this.snapshotParam}`)\n  }\n\n  getDepartmentListData() {\n    try {\n      this.snapshotParam = this.route.snapshot.paramMap.get(\"branchId\");\n      this.api.getDepartmentData(this.snapshotParam).subscribe((data) => {\n        if (data.status === \"success\" || data.status === 200) {\n          this.departmentList = data.department;\n          const len = Object.keys(data.department).length;\n          for (var i = 0; i < len; i++) {\n            this.showDepartmentCard[this.departmentList[i]._id] = true;\n          }\n        }\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method for onclick data show when collapse\n  showData(departmentId: String) {\n    try {\n      this.showDepartmentCard[`${departmentId}`] = !this.showDepartmentCard[`${departmentId}`];\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for remove company branch\n  deleteList(departmentId: String) {\n    try {\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeDepartmentData(departmentId).subscribe((data) => {\n            if (data.status === \"success\" || data.status === 200) {\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                data.message,\n                'success'\n              )\n              this.ngZone.run(() => {\n                this.router.navigateByUrl(`/pages/branches/show-departments/${this.snapshotParam}`);\n              })\n              this.getDepartmentListData();\n            }\n          })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your list data safe',\n            'error'\n          )\n        }\n      })\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n}\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BranchService } from '../../branch-service/branch.service';\n\n@Component({\n  selector: 'app-update-department',\n  templateUrl: './update-department.component.html',\n  styleUrls: ['./update-department.component.scss']\n})\n\nexport class UpdateDepartmentComponent implements OnInit {\n\n  updateDepartmentForm:FormGroup;\n  snapshotParam: String;\n  departmentParam:String;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  departmentList= new Array();\n  // public departmentList: any=[];\n  // public departmentData:any =[];\n  departmentData= new Array();\n\n  constructor(\n    private route: ActivatedRoute,\n    private api: BranchService,\n    public fb: FormBuilder,\n    private ngZone: NgZone,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.snapshotParam = this.route.snapshot.paramMap.get(\"branchId\");\n    this.departmentParam = this.route.snapshot.paramMap.get(\"departmentId\");\n    this.updateFormValidation();\n    this.getExistingData();\n  }\n\n  //Method for form validation\n  updateFormValidation() {\n    try {\n      this.updateDepartmentForm = this.fb.group({\n        title: new FormControl(null),\n        description: new FormControl(null),\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n   //Method for submit form data\n   updateDepartmentFormData() {\n    try {\n      if (this.updateDepartmentForm.valid) {\n        this.api.updateDepartmentData(this.updateDepartmentForm.value, this.snapshotParam, this.departmentParam).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successMessage = true;\n            setTimeout(() => {\n              this.ngZone.run(()=>{this.router.navigateByUrl(`/pages/branches/show-departments/${this.snapshotParam}`)});\n            }, 1000);\n            this.errorMsg = false;\n            this.successMsg = data.message;\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n   //Method for get existing data show on update form\n   getExistingData() {\n    this.api.getDepartmentData(this.snapshotParam).subscribe((data) => {\n      if (data.status === \"success\" || data.status === 200) {\n        this.departmentList = data.department;\n        const len = Object.keys(this.departmentList).length;\n        for (var i = 0; i < len; i++) {\n          if (this.departmentList[i]._id === this.departmentParam) {\n            this.departmentData.push(this.departmentList[i]);\n            this.updateDepartmentForm = this.fb.group({\n              title: new FormControl(this.departmentList[i].title),\n              description: new FormControl(this.departmentList[i].description),\n            })\n          }\n        }\n      }\n    })\n  }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BranchesRoutingModule } from './branches-routing.module';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { BranchesComponent } from './branches.component';\nimport { AddBranchesComponent } from './add-branches/add-branches.component';\nimport { ShowBranchesComponent } from './show-branches/show-branches.component';\nimport { BranchService } from './branch-service/branch.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { UpdateBranchDataComponent } from './update-branch-data/update-branch-data.component';\nimport { AddDepartmentComponent } from './department/add-department/add-department.component';\nimport { ShowDepartmentsComponent } from './department/show-departments/show-departments.component';\nimport { UpdateDepartmentComponent } from './department/update-department/update-department.component';\n\n@NgModule({\n  declarations: [BranchesComponent, AddBranchesComponent, ShowBranchesComponent, UpdateBranchDataComponent, AddDepartmentComponent, ShowDepartmentsComponent, UpdateDepartmentComponent],\n  imports: [\n    CommonModule,\n    BranchesRoutingModule,\n    RouterModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n  ],\n  providers:[AuthGuard,BranchService]\n})\nexport class BranchesModule { }\n"]}