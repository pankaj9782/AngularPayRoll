{"version":3,"sources":["webpack:///src/app/pages/employee-wizard/employee-wizard.component.ts","webpack:///src/app/pages/employee-wizard/employee-wizard.component.html","webpack:///src/app/pages/employee-wizard/employee-profile/employee-profile.component.html","webpack:///src/app/pages/employee-wizard/employee-profile/employee-profile.component.ts","webpack:///src/app/pages/employee-wizard/employee-list/employee-list.component.html","webpack:///src/app/pages/employee-wizard/employee-wizard-routing.module.ts","webpack:///src/app/pages/employee-wizard/employee-list/employee-list.component.ts","webpack:///src/app/pages/employee-wizard/employee-wizard.module.ts"],"names":["EmployeeWizardComponent","EmployeeProfileComponent","fb","docApi","api","ngZone","router","route","skillApi","http","util","companyListData","Array","branchList","departmentList","jobProfileList","successMessage","errorMsg","address","familyType","familyDetailsList","divShow","formShow","showAddFamilyButton","educationBtn","imageSrc","actionBox","relivingIs","basicDetail","checkbox","relation","items","openval","shown","show","addAddess","buttonName","button","addressMsg","EducationForm","addessBtn","listMesg","workExperience","listExprience","addExpbtn","showCard","bankList","bankForm","payrollList","payrollForm","paymentType","bioForm","bioList","languageSkillList","lsnguageSkillForm","addLanguageBtn","percentErrorMsg","basicDetailsData","educationalStatus","employeeLeaveList","employeeLeaveForm","leaveSettingButton","idProofsList","idProofsForm","idProofsSettingButton","bannBtn","experienceBtn","educationBtnadd","addfamilyBtn","skillLanguageBtn","payrollButton","leaveButton","idProofsButton","bioValidationMessage","type","message","validationMessageZip","validationMessageEducation","validationMessage","validationMessageFamily","validationMessageExper","validationMessageBank","payrollValidations","validationMessageLeaveSettings","validationMessageIdProofsSettings","uploadedDocumentDetails","employeeDocumentsDetails","document","getElementById","removeAttribute","this","snapShotParam","snapshot","paramMap","get","getTlList","existingBasicDetails","formDataValidation","listDocument","getList","addressValidation","educationDetailsValidation","empBioValidation","bankDataValidation","experienceValidation","skillCate","addMemberValidation","payrollValidation","languageSkillValidation","leaveSettingForm","uploadImageForm","idProofsSettingForm","setAttribute","employeeBasicForm","group","departmentId","required","branchId","companyId","jobProfileId","name","dob","contactDetails","personal","phone","compose","minLength","maxLength","pattern","landLineNum","email","official","officialEmailAsLoginEmail","isTL","tlId","employeeList","subscribe","data","status","push","i","length","onSelect","getDepartmentListData","employeeName","personalContactNum","personalPhoneNum","personalEmail","officialContactNum","officialPhoneNum","officialEmail","cleanBasicDetailForm","cleanFormLevelTwo","valid","submitData","value","successMsg","hidden","employeeDetails","_id","setTimeout","run","navigateByUrl","handleErrroMessage","errMsg","updateEmployeeBasicDetails","err","console","log","action","existingPersonalDetails","setValue","employeeBioForm","bio","height","weight","color","moleIdentification","bloodGroup","eyePower","handicapped","handicappedPercent","multipleHandicapped","multipleHandicappedPercent","illness","physical","physicalIllnessName","treatmentName","hospitalName","treatmentDuration","illnessStatus","mental","mentalIllnessName","biodata","bioDataList","Object","keys","employeeBioButton","of","cleanBioData","cleanFormLevelThree","submitBioData","bioListData","updateBio","dynamicValidation","setValidators","updateValueAndValidity","clearValidators","employeeAddressForm","doorNum","streetName1","streetName2","landmark","zipcode","district","state","addressType","oldAddress","titleName","addressList","reset","addressId","cleanAddressForm","cleanFormLevelOne","submitAddress","showAddress","updateAddess","previousValue","id","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","deleteAddress","dismiss","DismissReason","cancel","getJobProfileListData","empEducationForm","educationalDetails","courseName","instituteName","passOutYear","description","scoredPercent","getCompanyData","company","getBranchListData","branch","showBranchList","getJobProfile","element","scrollIntoView","getDepartmentData","department","documentData","docData","e","file","dataTransfer","files","target","reader","FileReader","match","onload","_handleReaderLoaded","bind","readAsDataURL","alert","imagePath","skillCategoryData","skillValue","skillCategory","showForm","addRelationForm","family","members","age","occupation","education","income","familyId","familyIdValue","familyTypeList","cleanFamilyForm","nativeElement","addFamilyMember","getFamilyDetails","updateFamilyDetails","getFamilyData","response","familyDetails","showAddFamilyForm","removeFamilyDetails","educationDetails","educationData","inputValue","errorMsgg","toString","eduBtn","educationCurentId","removeEducation","showEducationDetails","cleanEducationalFormData","submitEducationalData","updateEducation","workExprience","exprienceTitle","exprienceListData","expCurentId","workExperienceForm","workExperiences","companyName","designation","experienceYears","max","jobDescription","relivingReason","remarks","removeExprience","showWorkList","cleanWorkExperienceForm","experiAdd","updateWokExprience","bankDetailsList","lenthoffical","lenthperosnal","bankDetailsForm","bankListData","bankDetails","accountNum","accountPlace","accountType","debitCardNum","debitCardType","existingBankDetails","cleanBankForm","employBank","payrollDetailsForm","payroll","ctc","ctcEffectiveFromDate","ctcEffectiveToDate","paidLeaveBalance","earnedLeaveBalance","gradeRule","basicPay","mode","payrollDataSubmit","payrollListData","updatePayrollSettings","payollDataList","gradeRuleList","payollDataLength","payrollData","payrollGradeRuleList","substring","leaveEmployeeDataList","leaveSettings","leaveSettingHeadingButton","employeeLeaveData","cleanLeaveSettingForm","employeeLeaveDetailsForm","addLeaveSettings","employeeLeaveDataList","updateLeaveSettings","leaveSettingId","startDate","endDate","leavePerMonth","reason","employeeIdProofsDataList","idProofsHeadingButton","idProofsData","cleanIdProofsSettingForm","idProofsDetailsForm","addEmployeeIdProofs","getEmployeeIdProofsList","updateIdProofsSettings","idProofsSettingId","proofsId","identityProofs","identityName","identityNum","authorityName","issuePlace","expiryDate","proofId","removeIdProofsDetails","LanguageSkill","addLanguageSkillList","LanguageData","languageSkillEditId","languageSkillTitle","languageSkillForm","languageSkills","toSpeak","toRead","toWrite","cleanLaungugeSkillForm","addLanguageSkill","listSkillLanguage","updateLanguageSkill","companyTlList","uploadedDocuments","employeeDocumentList","uploadForm","documentTypeId","index","uploadDocuments","click","uploadedDocumentList","event","imageUrl","window","open","allowOutsideClick","deleteEmployeeDocument","employeeForm","onClick","sameAsPersonalDetails","scroll","onFileSelect","uploadDocs","path","component","canActivate","children","EmployeeListComponent","uploadAvatarAPI","filterEmployeeDataMsg","minPasswordLength","maxPasswordLength","employeeLabelName","activeStatus","filterEmployeeList","statusStatus","validationErrorMessage","assignTLValidation","assignTLForm","getEmployeeListData","passwordFormValidation","userProfileForm","permissionInfo","permissionRoleInfo","search","classList","add","remove","error","getEmployeeList","employeeCount","setPasswordForm","password","passwordConfirmation","compare","fieldName","employeeId","resetModal","employeeTlList","setPassword","successFlag","passwordFlag","errMessage","filterEmployeeDetails","assignTlForm","parentIdsData","userId","parentUserId","assignTl","unassignTl","parentUsersIds","companyEmployeeTlList","updateEmployeeStatus","filterFunctionality","url","avatar","userAvatar","uploadProfileImage","employeeFilter","changeStatus","resetFunctionality","setPasswordFormData","actionOnTl","redirectTo","pathMatch","EmployeeWizardRouitngModule","forChild","EmployeeWizardModule"],"mappings":"yNAOO,Y,MAAMA,EAEX,eAEA,a,6CAJWA,I,uBAAAA,EAAuB,+ECPpC,yB,kCDOO,G,6JEDC,eACI,eAA6D,gEAA4C,uBAAY,OACzH,Q,uCACA,eACI,eAAgD,gEAA2E,kBAAO,OACtI,Q,uCACA,eACI,eAAsC,yEAAsG,4BAAiB,OACjK,Q,uCACA,eACI,eAAsC,yEAAkG,0BACpI,OACR,Q,uCACA,eACI,eAAsC,gEAAmF,uBAAY,OACzI,Q,uCACA,eACI,eAA6D,iEAAmE,0BAAe,OACnJ,Q,sBACA,eACI,eAA2F,yBAAc,OAC7G,Q,uCACA,eACI,eAAmE,qEAAuD,yBAAc,OAC5I,Q,uCACA,eACI,eAAwE,oEAA2D,2BAAgB,OACvJ,Q,uCACA,eACI,eAAuE,sEAA4D,0BAAe,OACtJ,Q,uCACA,eACI,eAAsE,0EAA+D,yBAAc,OACvJ,Q,uCACA,eACI,eAAwE,4EAAmE,0BAAe,OAC9J,Q,yBAQQ,eACI,iBAAQ,QAAY,OACxB,Q,oBADY,wB,yBAIZ,eACI,iBAAQ,QAAgB,OAC5B,Q,oBADY,4B,yBAYR,oBAEI,QACJ,Q,yBAHsE,wBAClE,oBACA,8B,yBAIQ,iBAOI,QACJ,Q,8BADI,iC,yBARR,cACI,uBASJ,Q,kCAT+C,wK,yBAoBvD,oBACI,QACJ,Q,yBAFgE,oBAC5D,8B,yBAIQ,iBAOI,QACJ,Q,8BADI,iC,yBARR,cACI,uBASJ,Q,kCAT+C,qK,yBAoBvD,oBACI,QACJ,Q,yBAFwE,oBACpE,+B,yBAIQ,iBAOI,QACJ,Q,8BADI,iC,yBARR,cACI,uBASJ,Q,kCAT+C,iL,yBAsBvD,oBACI,QACJ,Q,yBAFwE,oBACpE,uD,yBAIQ,iBAOI,QACJ,Q,8BADI,iC,yBARR,cACI,uBASJ,Q,kCAT+C,iL,yBAmBvC,iBAKI,QACJ,Q,8BADI,iC,yBANR,cACI,uBAOJ,Q,kCAP+C,yJ,yBAiB3C,iBAKI,QACJ,Q,8BADI,iC,yBANR,cACI,uBAOJ,Q,kCAP+C,sJ,yBAmBnD,iBASI,QACJ,Q,8BADI,iC,yBAVR,cACI,uBAWJ,Q,kCAX+C,oO,yBAiB3C,iBASI,QACJ,Q,8BADI,iC,yBAVR,cACI,uBAWJ,Q,kCAX+C,sP,yBAiB3C,iBASI,QACJ,Q,8BADI,iC,yBAVR,cACI,uBAWJ,Q,kCAX+C,oO,0BAwB3C,iBASI,QACJ,Q,8BADI,iC,0BAVR,cACI,wBAWJ,Q,kCAX+C,oO,0BAiB3C,iBASI,QACJ,Q,8BADI,iC,0BAVR,cACI,wBAWJ,Q,kCAX+C,sP,0BAiB3C,iBASI,QACJ,Q,8BADI,iC,0BAVR,cACI,wBAWJ,Q,kCAX+C,oO,wCAmBnD,cACI,mBAAuB,4DAAvB,OAAkE,kCACtE,Q,0BAIR,oBAEI,QACJ,Q,yBAH+D,wBAC3D,oBACA,8B,wCALI,iBACI,oBAA4F,6EACxG,oBAA4E,4BAAiB,OAC7F,2BAIF,OACU,O,uBALsB,yC,0BAOlB,iBAOI,QACJ,Q,8BADI,iC,0BARR,cACI,wBASJ,Q,kCAT+C,wK,wCA+B3C,iBACI,kBACI,iBAAgC,gCAAqB,OACrD,oBACI,aACI,aAAI,kBAAO,OACX,aAAI,QAAiB,OACrB,cAAI,mBAAO,OACX,cAAI,SAAgB,OACxB,OACA,cACI,cAAI,kBAAM,OACV,cAAI,SAAe,OACnB,cAAI,gCAAoB,OACxB,cAAI,SAA4B,OACpC,OACA,cACI,cAAI,iCAAqB,OACzB,cAAI,SAA6B,OACjC,cAAI,yCAA6B,OACjC,cAAI,SAAoC,OAC5C,OACA,cACI,cAAI,sBAAU,OACd,cAAI,SAAkB,OACtB,cAAI,wBAAY,OAChB,cAAI,SAAoB,OAE5B,OACJ,OACA,kBAAgC,wCAA4B,OAC5D,qBACI,cACI,cAAI,0BAAc,OAClB,cAAI,SAAsC,OAC1C,cAAI,gCAAoB,OACxB,cAAI,SAA0C,OAClD,OACA,cACI,cAAI,+BAAmB,OACvB,cAAI,SAA0C,OAC9C,cAAI,2BAAe,OACnB,cAAI,SAAsC,OAC9C,OACJ,OACA,kBAAgC,sCAA0B,OAC1D,qBACI,cACI,cAAI,0BAAc,OAClB,cAAI,SAAwC,OAC5C,cAAI,2BAAe,OACnB,cAAI,SAAwC,OAChD,OACA,cACI,cAAI,kCAAsB,OAC1B,cAAI,SAA8C,OAClD,cAAI,+BAAmB,OACvB,cAAI,SAA4C,OACpD,OACA,cACI,cAAI,2BAAe,OACnB,cAAI,SAAwC,OAChD,OACJ,OACA,eACI,sBAA6B,6DAA4C,iBAAqC,sBAAY,OAC9H,OACJ,OACJ,O,4BA9DoB,uBAEA,uBAIA,sBAEA,mCAIA,oCAEA,2CAIA,yBAEA,2BAQA,4CAEA,iDAIA,iDAEA,6CAOA,8CAEA,+CAIA,qDAEA,mDAIA,gD,0BAjEhC,kBAEI,iBACI,gBACI,0BAqEJ,OACJ,OACJ,Q,oBAvEwC,mC,0BA0EpC,eACI,iBAAQ,QAAY,OACxB,Q,oBADY,wB,0BAIZ,eACI,iBAAQ,QAAgB,OAC5B,Q,oBADY,4B,0BAcY,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,qK,0BAiB3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,qK,0BAmE3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,iL,0BAuC3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,yM,0BAN3D,iBACI,iBACI,oBAAsC,YAAG,sCAA6B,OAAI,OAC1E,gBACI,oBACA,wBASJ,OACJ,OACJ,Q,qBAXiB,mE,0BAgCD,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,iO,0BAN3D,kBACI,iBACI,oBAAsC,YAAG,+CAAsC,OAAI,OACnF,gBACI,oBACA,wBASJ,OACJ,OACJ,Q,qBAXiB,2E,wCApK7B,kBAAwE,2EACpE,aAAI,uBAAY,OAChB,aACA,kBACI,iBACI,iBACI,iBACI,oBAAsC,YAAG,+DAAsD,OAAI,OACnG,iBACI,qBACA,yBASJ,OACJ,OACJ,OACA,kBACI,kBACI,oBAAsC,aAAG,sDAA8C,OAAI,OAC3F,iBACI,qBACA,yBASJ,OACJ,OACJ,OAUA,kBAEI,kBACI,oBAAsC,aAAG,gCAAsB,OAAI,OACnE,iBACI,sBACZ,qBAAgD,8CAEhD,OACF,wBACI,sBAA4C,iBAAK,OACrD,OACA,wBACI,sBAA4C,iBAAK,OACrD,OACA,wBACI,sBAA6C,kBAAM,OACvD,OACA,wBACI,sBAA4C,iBAAK,OACrD,OACA,wBACI,sBAA4C,iBAAK,OACrD,OACA,wBACI,sBAAgD,qBAAS,OAC7D,OACF,OACY,OACJ,OACJ,OACJ,OACA,kBACI,mBACI,kBACI,oBAAsC,aAAG,mDAAyC,OAAI,OACtF,iBACI,qBACJ,OACJ,OACJ,OACA,mBACI,kBACI,oBAAsC,aAAG,yCAA+B,OAAI,OAC5E,iBACI,qBACA,yBASJ,OACJ,OACJ,OACJ,OACA,kBACI,kBACI,kBACI,oBAAsC,aAAG,0BAAgB,OAAI,OAC7D,iBACI,qBACJ,OACJ,OACJ,OACA,kBACI,kBACI,qBAAsC,aAAG,4BAAkB,OAAI,OAC/D,sBAAsD,0EAChE,qBAAgD,qCAEhD,OACA,sBAA4C,cAAE,OAC9C,sBAA2C,eAAG,OAClD,OACU,OACJ,OACA,0BAiBJ,OACA,kBACI,mBACI,kBACI,qBAAsC,aAAG,qCAA2B,OAAI,OACxE,sBAA4F,4EACtG,qBAAgD,qCAEhD,OACA,sBAA4C,cAAE,OAC9C,sBAA2C,eAAG,OAClD,OACU,OACJ,OACA,0BAiBJ,OACJ,OACA,eAAI,iCAAoB,OACxB,oBACI,oBACI,mBACI,sBAAuC,cAAG,oEAAyD,OAAI,OACvG,kBACI,sBACJ,OACJ,OACJ,OACA,oBACI,mBACI,sBAAsC,cAAG,6CAAkC,OAAI,OAC/E,kBACI,sBACJ,OACJ,OACJ,OACA,mBACI,mBACI,qBAAsC,cAAG,+BAAoB,OAAI,OACjE,kBACI,sBACJ,OACJ,OACJ,OACA,mBACI,mBACI,sBAAsC,cAAG,uCAA4B,OAAI,OACzE,kBACI,sBACJ,OACJ,OACJ,OACA,mBACI,mBACI,sBAAsC,cAAG,2CAAgC,OAAI,OAC7E,kBACI,sBACJ,OACJ,OACJ,OACJ,OACA,eAAI,+BAAkB,OACtB,oBACI,oBACI,mBACI,sBAAsC,cAAG,iEAAsD,OAAI,OACnG,kBACI,sBACJ,OACJ,OACJ,OACA,mBACI,mBACI,sBAAsC,cAAG,6CAAkC,OAAI,OAC/E,kBACI,sBACJ,OACJ,OACJ,OACA,mBACI,mBACI,qBAAsC,cAAG,+BAAoB,OAAI,OACjE,kBACI,sBACJ,OACJ,OACJ,OACA,mBACI,mBACI,sBAAsC,cAAG,uCAA4B,OAAI,OACzE,kBACI,sBACJ,OACJ,OACJ,OACA,mBACI,mBACI,sBAAsC,cAAG,2CAAgC,OAAI,OAC7E,kBACI,sBACJ,OACJ,OACJ,OACA,mBACI,sBAAmF,gFAC/F,UACA,OACY,uBAA6C,8DAAsB,mBAAM,OAE7E,OACJ,OACJ,O,uBA/Q0C,oCAGjC,uDAOoB,sDAiBA,sDAmEA,2DAkCgB,6BA+BA,8BAoBnB,wEA2CA,uEA0CgC,oDAC1D,2C,wCA4BwB,gBACI,aACI,aAAK,QAAiB,OACtB,aAAK,QAAiB,OACtB,aAAK,QAAoB,OACzB,aAAK,QAAoB,OACzB,cACI,sBAAQ,0FAA8E,iBACpG,OAAS,iBACK,sBAA6C,2FAAiC,iBAC5F,OACJ,OACF,OACJ,O,4BAXyB,gCACA,gCACA,mCACA,oC,0BAlBjC,iBACI,iBACI,gBACI,iBACI,mBACI,mBACI,aACI,aAAI,uBAAY,OAChB,aAAI,qBAAS,OACb,cAAI,0BAAc,OAClB,cAAI,wBAAY,OACpB,OACJ,OACA,4BAcd,OACJ,OACF,OACJ,OACF,Q,oBAlBiC,wC,0BAsBzB,eACE,iBAAQ,QAAY,OACtB,Q,qBADU,wB,0BAIV,eACE,iBAAQ,QAAgB,OAC1B,Q,qBADU,4B,0BA4BJ,qBACA,QACA,Q,yBAFQ,kBACR,yB,0BA8BI,iBASE,QACF,Q,8BADE,iC,0BAVN,cACI,wBAWJ,Q,mCAX+C,gM,wCAnE7D,cACI,gBACI,qBAGJ,OACA,gBACI,sBAGJ,OACF,kBAA4E,mEAE5E,aAAI,QAAa,OACjB,iBACI,iBACE,kBACI,oBAAsC,aAAG,yBAAe,mBAAoC,OAAI,OAChG,iBACE,qBAEF,OACJ,OACA,kBACI,oBAAsC,aAAG,0BAAgB,mBACzB,OAAI,OACpC,iBACE,qBACF,OACJ,OACA,kBACI,oBAAsC,aAAG,0BAAc,OAAI,OAC3D,sBACE,sBAAoD,2CAEpD,OACA,6BAGF,OACJ,OACF,OACA,kBACE,mBACI,oBAAsC,aAAG,+BAAqB,mBAC9B,OAAI,OACpC,iBACE,qBAEF,OACJ,OACA,mBACI,oBAAsC,aAAG,+BAAqB,mBAC9B,OAAI,OACpC,iBACE,qBAEF,OACJ,OACF,OACA,kBACE,kBACI,oBAAsC,aAAG,yBAAe,mBAA6B,aAAC,OAAO,OAAI,OACjG,iBACE,qBAEA,yBAaF,OACJ,OACA,kBACI,oBAAsC,aAAG,sBAAY,mBAAoC,OAAI,OAC7F,iBACE,qBACF,OACJ,OACA,kBACI,oBAAsC,aAAG,uBAAa,mBAAoC,OAAI,OAC9F,iBACE,qBACF,OACJ,OACF,OACJ,OACA,kBACI,sBACA,SACA,OACgC,sBAAsB,kEACpD,oBACF,OACY,OACA,OACR,O,uBAtG4B,gCAKC,sCAIK,gDAEtC,0BACoB,+DAsB6B,mCA8BpC,wDA8BiC,wDAC9C,oC,wCASA,qBAAQ,kEAAqG,sBAAW,Q,wCAoBpG,gBACI,aACI,aAAK,QAAqB,OAC1B,aAAK,QAAwB,OAC7B,aAAK,QAAqB,OAC1B,aAAK,QAAuB,OAC5B,cAEI,sBAAQ,4FAAgF,iBAC1G,OAAS,iBACS,sBAA6C,8FAAoC,iBACnG,OACc,OACJ,OACJ,O,4BAZa,gDACA,mDACA,gDACA,mD,0BAlBjC,iBACI,iBACI,gBACI,iBACI,mBACI,mBACI,aACI,aAAI,uBAAY,OAChB,aAAI,2BAAe,OACnB,cAAI,0BAAc,OAClB,cAAI,8BAAkB,OAC1B,OACJ,OACA,4BAeJ,OACJ,OACJ,OACJ,OACJ,Q,oBAnB2B,0C,0BAuBnB,eACI,iBAAQ,QAAY,OACxB,Q,qBADY,wB,0BAIZ,eACI,iBAAQ,QAAgB,OAC5B,Q,qBADY,4B,0BA2BQ,iBASI,QACJ,Q,8BADI,iC,0BAVR,cACI,wBAWJ,Q,mCAX+C,oO,0BAsB3D,qBACA,QACA,Q,yBAFuD,kBACvD,yB,0BAoBgB,iBASI,QACJ,Q,8BADI,iC,0BAVR,cACI,wBAWJ,Q,mCAX+C,0O,wCA9EvE,cACI,gBACI,qBAGJ,OACA,gBACI,sBAGJ,OACA,kBAAyE,qEACrE,aAAI,QAAa,OACjB,iBACI,iBACI,kBACI,oBAAsC,aAAG,4BAAkB,mBAC3C,OAAI,OACpB,iBACI,qBACJ,OACJ,OACA,kBACI,oBAAsC,aAAG,+BAAqB,mBAC9C,OAAI,OACpB,iBACI,qBACJ,OACJ,OACA,kBACI,oBAAsC,aAAG,8BAAoB,mBACpD,aAAC,OAAO,OAAI,OACrB,iBACI,qBACA,yBAaJ,OACJ,OACA,kBACI,oBAAsC,aAAG,uBAAa,mBACtC,OAAI,OACpB,iBACI,sBACZ,sBAAoD,4CAEpD,OACA,6BAGF,OACU,OACJ,OACA,kBACI,oBAAsC,aAAG,sCAA4B,mBACrD,OAAI,OACpB,iBACI,qBACJ,OACJ,OAGA,kBACI,oBAAsC,aAAG,kCAAwB,mBAA6B,aAAC,OAAO,OAAI,OAC1G,iBACI,qBAEA,yBAaJ,OACJ,OACA,kBACI,kBACI,sBAClB,SACA,OACkB,sBAA6C,oEAC7D,oBACF,OACc,OACJ,OACJ,OACJ,OACJ,OACJ,O,uBAvGsC,gCAKC,sCAIO,6CAClC,0BACoB,uEAqBH,kEAuBT,6CAoBS,oEAiByC,oDAChE,yC,wCAWN,gBAAG,oEAA0G,wBAAa,Q,uBAwB1F,aAAyC,gBAAkE,Q,uBAC3G,aAA0C,gBAAgE,Q,wCAJlH,gBACI,aACI,aAAK,QAA4B,OACjC,uBACA,uBACA,aAAK,oBAAkF,qEAAlF,OACL,qBACA,OACA,aACI,qBAAkD,iGAA4C,EAAE,UACpH,gBAAoC,oBACtC,OACkB,OACJ,OACJ,O,sCAZa,8BACD,kCACA,mCACsD,8C,0BAnBtF,iBACI,iBAAgC,iBAAQ,6CAAkC,OAAS,OACnF,iBACI,gBACI,iBACI,mBACI,mBACI,aACI,cAAI,0BAAc,OAClB,cAAI,qBAAS,OACb,cAAI,4BAAgB,OACpB,cAAI,kBAAM,OACd,OACJ,OACA,4BAeJ,OACJ,OACJ,OACJ,OACJ,Q,oBAnB2B,oD,uBAsCC,aAAyC,gBAAkE,Q,uBAC3G,aAA0C,gBAAgE,Q,wCAJlH,gBACI,aACI,aAAK,QAAuC,OAC5C,uBACA,uBACA,aAAK,QAA+B,OACpC,aAAI,Q,gCAA0H,OAC9H,cACI,sBAA8I,yGAA4D,iBAC5N,OAAS,iBACS,sBAAgE,yFAA4C,iBAC9H,OAAS,iBACS,sBAA8C,wGAA2D,iBAA2B,OACxI,OACJ,OACJ,O,4BAba,yCACD,kCACA,mCACC,iCACD,gH,0BArBhC,iBACI,iBAAgC,iBAAQ,sCAA2B,OAAS,OAC5E,iBACI,gBACI,iBACI,mBACI,mBACI,aACI,cAAI,0BAAc,OAClB,cAAI,qBAAS,OACb,cAAI,qBAAS,OACb,cAAI,uBAAW,OACf,cAAI,kBAAM,OACd,OACJ,OACA,6BAgBJ,OACJ,OACJ,OACJ,OACJ,Q,oBApB2B,qD,wCA+BnB,iBACI,kBACI,iBAAgC,gCAAqB,OACrD,oBACI,aACI,aAAI,qBAAU,OACd,aAAI,QAAwB,OAC5B,cAAI,2BAAe,OACnB,cAAI,SAA6B,OACrC,OACA,cACI,cAAI,0BAAc,OAClB,cAAI,SAA+B,OACnC,cAAI,yBAAa,OACjB,cAAI,SAA8B,OACtC,OACA,cACI,cAAI,oBAAQ,OACZ,cAAI,SAA0B,OAClC,OACJ,OACA,kBAAgC,iCAAqB,OACrD,qBACI,cACI,cAAI,sBAAU,OACd,cAAI,SAAwB,OAC5B,cAAI,2BAAe,OACnB,cAAI,SAA6B,OACrC,OACA,cACI,cAAI,0BAAc,OAClB,cAAI,SAA+B,OACnC,cAAI,yBAAa,OACjB,cAAI,SAA8B,OACtC,OACA,cACI,cAAI,oBAAQ,OACZ,cAAI,SAA0B,OAClC,OACJ,OACA,eACI,sBAA6B,qEAAoD,iBAAqC,sBAAY,OACtI,OACJ,OACJ,O,4BAtCoB,8BAEA,oCAIA,sCAEA,qCAIA,iCAOA,8BAEA,oCAIA,sCAEA,qCAIA,kC,0BAxChC,kBACI,iBACI,gBACI,0BA6CJ,OACJ,OACJ,Q,oBA/CwC,wC,0BAkDpC,eACI,iBAAQ,QAAY,OACxB,Q,oBADY,wB,0BAIZ,eACI,iBAAQ,QAAgB,OAC5B,Q,oBADY,4B,0BAaY,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,kN,0BAe3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,oO,0BAmD3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,kN,0BAe3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,oO,wCA3FvE,kBAAwE,sEACpE,iBAAwB,YAAG,2BAAgB,OAAI,OAC/C,kBACI,kBACI,kBACI,iBACI,mBAAsC,YAAG,qBAAW,mBAA6B,aAAC,OAAO,OAAI,OAC7F,iBACI,qBACA,yBASJ,OACJ,OACA,kBACI,oBAAsC,aAAG,+BAAqB,mBAA6B,aAAC,OAAO,OAAI,OACvG,iBACI,qBACA,yBASJ,OACJ,OACA,kBACI,oBAAsC,aAAG,2BAAe,OAAI,OAC5D,iBACI,qBACJ,OACJ,OAEJ,OACA,mBACI,kBACI,oBAAsC,aAAG,oBAAQ,OAAI,OACrD,iBACI,qBACJ,OACJ,OACA,kBACI,oBAAsC,aAAG,yBAAa,OAAI,OAC1D,iBACI,qBACJ,OACJ,OACJ,OACJ,OACJ,OAEA,cAGA,qBAAuC,gGAAvC,OAA0G,sCAAyB,cAAI,cAIvI,mBACI,kBAAwB,aAAG,4BAAgB,OAAI,OAC/C,mBACI,mBACI,kBACI,oBAAsC,aAAG,qBAAW,mBAA6B,aAAC,OAAO,OAAI,OAC7F,iBACI,qBACA,yBASJ,OACJ,OACA,kBACI,oBAAsC,aAAG,+BAAqB,mBAA6B,aAAC,OAAO,OAAI,OACvG,iBACI,qBACA,yBASJ,OACJ,OACA,kBACI,oBAAsC,aAAG,2BAAe,OAAI,OAC5D,iBACI,qBACJ,OACJ,OAEJ,OACA,mBACI,kBACI,oBAAsC,aAAG,oBAAQ,OAAI,OACrD,iBACI,qBACJ,OACJ,OACA,kBACI,oBAAsC,aAAG,yBAAa,OAAI,OAC1D,iBACI,qBACJ,OACJ,OAEJ,OACJ,OACA,qBAAmF,gFAAyB,SAAW,OACvH,sBAA6C,sEAA8B,kBAAM,OAErF,OAEJ,O,uBAlI0C,oCAEjC,wEAOoB,sDAeA,2DAuC0D,qCAI9E,wEAQoB,sDAeA,2DAmCyB,oDAA8D,yB,wCAyBhG,gBACI,aACI,aAAK,QAAsB,OAC3B,aAAK,QAA0B,OAC/B,aAAK,QAAqB,OAC1B,aAAK,QAAiB,OACtB,cACI,sBAAQ,4FAAgF,iBAAsC,OAAS,iBACvI,sBAA6C,8FAAoC,iBAA2B,OAChH,OACJ,OACJ,O,4BATa,iDACA,qDACA,gDACA,6C,0BAlBjC,iBACI,iBACI,gBACI,iBACI,mBACI,mBACI,aACI,aAAI,wBAAa,OACjB,aAAI,6BAAiB,OACrB,cAAI,wBAAY,OAChB,cAAI,oBAAQ,OAChB,OACJ,OACA,4BAYJ,OACJ,OACJ,OACJ,OACJ,Q,oBAhB2B,8C,0BAoBnB,eACI,iBAAQ,QAAY,OACxB,Q,qBADY,wB,0BAIZ,eACI,iBAAQ,QAAgB,OAC5B,Q,qBADY,4B,0BAyBQ,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,6O,0BA8BjE,qBAAoE,QAAe,Q,yBAAtC,kBAAuB,yB,wCA/D1E,cACI,gBACI,qBAGJ,OACA,gBACI,sBAGJ,OACA,kBAA2E,kEACvE,aAAI,QAAkB,OACtB,kBACI,kBACI,kBACI,oBAAsC,aAAG,6BAAmB,mBAA6B,aAAC,OAAO,OAAI,OACrG,iBACI,qBACJ,OACJ,OACA,kBACI,oBAAsC,aAAG,wBAAY,OAAI,OACzD,iBACI,qBACJ,OACJ,OACA,kBACI,oBAAsC,aAAG,6BAAiB,OAAI,OAC9D,iBACI,qBAEA,yBAUJ,OACJ,OACA,kBACI,oBAAsC,aAAG,4BAAgB,OAAI,OAC7D,iBACI,qBACJ,OACJ,OACJ,OACA,mBACI,kBACI,oBAAsC,aAAG,4BAAgB,OAAI,OAC7D,iBACI,qBACJ,OACJ,OACA,kBACI,oBAAsC,aAAG,wBAAY,OAAI,OACzD,iBACI,sBAClB,sBAAkC,4CAAgC,OAClE,6BACF,OACgB,OACJ,OACA,kBACI,oBAAsC,aAAG,oBAAQ,OAAI,OACrD,iBACI,qBACJ,OACJ,OACJ,OACJ,OACA,qBAAsF,gFAAyB,SAAiB,OAChI,sBAA+B,qEAA6B,kBAAM,OACtE,OACJ,O,uBA5EsC,gCAKC,sCAIO,+CAClC,+BACa,sEAmBI,kEA8Bf,8BACA,qCAYwC,sDAAiE,+B,wCAIvH,gBAAG,kEAAqG,yBAAc,Q,wCA6BlG,gBACI,aACI,aAAK,QAAkB,OACvB,aAAK,QAAc,OACnB,aAAK,QAAkB,OACvB,aAAK,QAAmB,OACxB,cACI,sBAAgC,+FAAqC,iBAEvF,OAAS,iBACS,sBAA6C,kGAAwC,iBAC3E,OACd,OACJ,OACJ,O,4BAZa,iCACA,6BACA,iCACA,mC,0BAnBjC,kBACI,iBACI,gBACI,iBACI,mBACI,mBACI,aACI,aAAI,oBAAS,OACb,aAAI,gBAAI,OACR,cAAI,qBAAS,OACb,cAAI,sBAAU,OACd,cAAI,kBAAM,OACd,OACJ,OACA,4BAeJ,OACJ,OACJ,OACJ,OACJ,Q,oBAnB2B,8C,0BAsBnB,eACI,iBAAQ,QAAY,OACxB,Q,qBADY,wB,0BAIZ,eACI,iBAAQ,QAAgB,OAC5B,Q,qBADY,4B,0BAWlB,oBACI,QACJ,Q,yBAFsE,gBAClE,yB,0BAgB8B,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,6L,0BAqCrF,qBAAkE,QAAU,Q,yBAApE,kBAA0D,iB,wCAzE5D,cACI,gBACI,qBAGJ,OACA,gBACI,sBAGJ,OACA,iBAA+B,QAA0B,OACzD,kBAAwE,wEACpE,kBACI,kBACI,oBAAsC,aAAG,gCAAsB,mBACtD,aAAC,OAAO,OAAI,OACrB,sBACZ,sBAAoD,0CAA8B,OACpF,4BAGF,OACgB,mBACI,mBACI,kBACI,oBAAsC,aAAG,iBAAK,OAAI,OAClD,iBACI,qBACJ,OACJ,OACA,kBACI,oBAAsC,aAAG,gBAAI,OAAI,OACjD,iBACI,qBACA,yBASJ,OACJ,OACA,kBACI,oBAAsC,aAAG,uBAAW,OAAI,OACxD,iBACI,qBACJ,OACJ,OACJ,OACA,mBACI,kBACI,oBAAsC,aAAG,sBAAU,OAAI,OACvD,iBACI,qBACJ,OACJ,OACA,kBACI,oBAAsC,aAAG,4BAAgB,OAAI,OAC7D,iBACI,qBACJ,OACJ,OACJ,OACJ,OACJ,OACJ,OACA,oBAAsC,aAAG,wBAAY,OAAI,OACzD,sBACd,sBAAoD,wCAA4B,OAChF,6BACA,OACc,qBAAmF,gFAAyB,SAAgB,OAC5H,sBAA+B,gEAAwB,kBAAM,OACjE,OACJ,O,uBA5EsC,gCAKC,sCAIJ,2CACW,4CACjC,0DACI,kEAKe,mCAgBK,uDAsClB,sCAEmC,mDAA8D,8B,wCAIpH,qBAA+F,sEAA8B,gBAAiC,yBAAgB,Q,wCAUlK,iBACI,kBACI,iBAAgC,2BAAgB,OAChD,oBACI,aACI,aAAI,eAAI,OACR,aAAI,QAAc,OAClB,cAAI,oCAAwB,OAC5B,cAAI,S,gBAAqC,OAC7C,OACA,cACI,cAAI,kCAAsB,OAC1B,cAAI,S,gBAAmC,OACvC,cAAI,iCAAqB,OACzB,cAAI,SAA4B,OACpC,OACA,cACI,cAAI,uBAAW,OACf,cAAI,SAAuB,OAC3B,cAAI,+BAAmB,OACvB,cAAI,SAA0B,OAClC,OACA,cACI,cAAI,qBAAS,OACb,cAAI,SAAkB,OACtB,cAAI,wBAAY,OAChB,cAAI,SAAc,OACtB,OACJ,OAEA,eACI,sBAA6B,wEAAuD,iBAAqC,sBAAY,OACzI,OACJ,OACJ,O,4BA5BoB,oBAEA,gDAIA,+CAEA,mCAIA,8BAEA,iCAIA,yBAEA,sB,0BA7BhC,kBACI,iBACI,gBACI,0BAmCJ,OACJ,OACJ,Q,oBArCwC,uC,0BAwCpC,eACI,iBAAQ,QAAY,OACxB,Q,oBADY,wB,0BAIZ,eACI,iBAAQ,QAAgB,OAC5B,Q,oBADY,4B,0BAcY,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,iL,0BAgB3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,oO,0BAgB3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,8N,0BAe3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,wN,0BAwBjE,qBAA2F,QAAqB,Q,yBAAxD,sBAAmC,uB,0BAGrE,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,mM,0BAgB3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,gM,0BAiBnE,qBACA,QACA,Q,yBAFQ,kBACR,yB,wCAvHJ,kBAA2E,kEACvE,kBACI,iBAAwB,YAAG,0BAAe,OAAI,OAC9C,kBACI,kBACI,iBACI,mBAAsC,YAAG,oBAAU,mBAC5C,aAAC,OAAO,OAAI,OACnB,iBACI,qBACA,yBASJ,OACJ,OACA,kBACI,oBAAsC,aAAG,wCAA8B,mBAChE,aAAC,OAAO,OAAI,OACnB,iBACI,qBACA,yBASJ,OACJ,OACA,kBACI,oBAAsC,aAAG,sCAA4B,mBAC9D,aAAC,OAAO,OAAI,OACnB,iBACI,qBACA,yBASJ,OACJ,OACA,kBACI,oBAAsC,aAAG,+BAAmB,OAAI,OAChE,iBACI,qBACA,yBASJ,OACJ,OACJ,OACA,mBACI,kBACI,oBAAsC,aAAG,iCAAqB,OAAI,OAClE,iBACI,qBACJ,OACJ,OACA,kBACI,oBAAsC,aAAG,2BAAiB,mBACnD,aAAC,OAAO,OAAI,OACnB,iBACI,sBAClB,qBAAgD,4CAAgC,OAChF,6BACF,OACoB,yBASJ,OACJ,OACA,kBACI,oBAAsC,aAAG,0BAAgB,mBAClD,aAAC,OAAO,OAAI,OACnB,iBACI,qBACA,yBASJ,OACJ,OACA,kBACI,oBAAsC,aAAG,6BAAmB,mBACvD,aAAC,OAAO,OAAI,OACjB,sBAChB,sBAAoD,2CAEpD,OACA,6BAGF,OACc,OACJ,OACJ,OACJ,OACA,qBAAsF,gFAAyB,SAAmB,OAClI,sBAA6C,mEAA2B,kBAAM,OAClF,O,uBAhI0C,uCACjC,8DASoB,kDAgBA,kEAgBA,gEAeA,8DAyBd,gDAEc,uDAgBA,8DAkBgB,uCAQK,sDAAiE,+B,wCAqB/F,gBACI,aACI,aAAK,QAAgB,OACrB,aAAK,QAAiB,OACtB,aAAK,QAAgB,OACrB,aACI,qBAAQ,gGAAoF,iBAAsC,OACtI,OACJ,OACJ,O,4BAPa,+BACA,gCACA,gC,0BAhBjC,iBACI,iBACI,gBACI,iBACI,mBACI,mBACI,aACI,aAAI,gBAAK,OACT,aAAI,kBAAM,OACV,cAAI,kBAAM,OACd,OACJ,OACA,4BAUJ,OACJ,OACJ,OACJ,OACJ,Q,oBAd2B,yC,0BAkBnB,eACI,iBAAQ,QAAY,OACxB,Q,qBADY,wB,0BAIZ,eACI,iBAAQ,QAAgB,OAC5B,Q,qBADY,4B,wCARpB,cACI,gBACI,qBAGJ,OACA,gBACI,sBAGJ,OACA,kBAA0E,wEACtE,aAAI,QAA+B,OACnC,kBACI,iBACI,oBAAsC,aAAG,kBAAM,OAAI,OACnD,iBACI,qBACJ,OACJ,OACA,kBACI,oBAAsC,aAAG,iBAAK,OAAI,OAClD,iBACI,qBACJ,OACJ,OACA,kBACI,oBAAsC,aAAG,kBAAM,OAAI,OACnD,iBACI,qBACJ,OACJ,OACJ,OACA,qBAAqF,gFAAyB,SAAoB,OAClI,sBAA+B,wEAAgC,kBAAM,OACzE,OACJ,O,uBAlCsC,gCAKC,sCAIO,8CAClC,kDACC,oEAoByC,sDAAgE,kC,wCAItH,qBAAQ,yEAAiH,uBAAY,Q,wCAuB7G,gBACI,aACI,aAAK,Q,eAA0B,OAC/B,aAAK,Q,eAAwB,OAC7B,aAAK,QAAsB,OAC3B,cAAK,SAAe,OACpB,cACI,sBAAQ,wGAA4F,iBACpH,OACY,OACJ,OACJ,O,4BATa,4CACA,0CACA,qCACA,+B,0BAnBjC,iBACI,iBACI,gBACI,iBACI,mBACI,mBACI,aACI,aAAI,sBAAW,OACf,aAAI,qBAAS,OACb,cAAI,4BAAgB,OACpB,cAAI,kBAAM,OACV,cAAI,kBAAM,OACd,OACJ,OACA,4BAYJ,OACJ,OACJ,OACJ,OACJ,Q,oBAhB2B,8C,0BAoBnB,eACI,iBAAQ,QAAY,OACxB,Q,qBADY,wB,0BAIZ,eACI,iBAAQ,QAAgB,OAC5B,Q,qBADY,4B,0BAYQ,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,6L,0BAgB3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,yM,0BAkB3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,uL,wCAtDvE,cACI,gBACI,qBAGJ,OACA,gBACI,sBAGJ,OACA,kBAAiF,uEAC7E,iBAAgC,QAA6B,OAC7D,kBACI,kBACI,kBACI,oBAAsC,aAAG,4BAAkB,mBAA6B,aAAC,OAAO,OAAI,OACpG,iBACI,qBACA,yBASJ,OACJ,OACA,kBACI,oBAAsC,aAAG,iCAAuB,mBACvD,aAAC,OAAO,OAAI,OACrB,iBACI,qBACA,yBASJ,OACJ,OACJ,OACA,mBACI,kBACI,oBAAsC,aAAG,0BAAgB,mBAChD,aAAC,OAAO,OAAI,OACrB,iBACI,qBACA,yBASJ,OACJ,OACA,kBACI,oBAAsC,aAAG,oBAAQ,OAAI,OACrD,iBACI,qBACJ,OACJ,OACJ,OAGJ,OACA,kBACI,sBACd,SACA,OACc,sBAAsB,uEAClC,oBACF,OACU,OACJ,OACJ,O,uBAjFsC,gCAKC,sCAIO,qDACN,0CAOX,oEAgBA,uEAkBA,kEAsB6B,4DAC5D,qC,wCASF,qBAAQ,wEAAoH,6BAAkB,Q,wCAqBtH,gBACI,aACI,aAAK,QAAsB,OAC3B,aAAK,QAAqB,OAC1B,aAAK,Q,eAA0B,OAC/B,aAEI,sBAAQ,2GAA+F,iBAE3H,OAAS,iBACW,sBAA6C,mGAAyC,iBAChF,OACV,OACJ,OACJ,O,4BAZa,qCACA,oCACA,6C,0BAjBjC,iBACI,iBACI,gBACI,iBACI,mBACI,mBACI,aACI,aAAI,yBAAc,OAClB,aAAI,2BAAe,OACnB,cAAI,uBAAW,OACf,cAAI,kBAAM,OACd,OACJ,OACA,4BAeJ,OACJ,OACJ,OACJ,OACJ,Q,oBAnB2B,yC,0BAuBnB,eACI,iBAAQ,QAAY,OACxB,Q,qBADY,wB,0BAIZ,eACI,iBAAQ,QAAgB,OAC5B,Q,qBADY,4B,0BAaY,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,oO,0BAgB3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,iO,0BAgC3C,iBAKI,QACJ,Q,8BADI,iC,0BANR,cACI,wBAOJ,Q,mCAP+C,8N,wCArE3E,cACI,gBACI,qBAGJ,OACA,gBACI,sBAGJ,OACA,kBAA4E,mEACxE,kBACI,iBAAgC,QAAyB,OACzD,kBACI,mBACI,kBACI,oBAAsC,aAAG,+BAAqB,mBAA6B,aAAC,OAAO,OAAI,OACvG,iBACI,qBACA,yBASJ,OACJ,OACA,kBACI,oBAAsC,aAAG,iCAAuB,mBAC7D,aAAC,OAAO,OAAI,OACf,iBACI,qBACA,yBASJ,OACJ,OACJ,OACA,mBACI,kBACI,oBAAsC,aAAG,gCAAsB,OAAI,OACnE,iBACI,qBACJ,OACJ,OACA,kBACI,oBAAsC,aAAG,6BAAmB,OAAI,OAChE,iBACI,qBACJ,OACJ,OACJ,OACA,mBACI,kBACI,oBAAsC,aAAG,6BAAmB,mBACvD,aAAC,OAAO,OAAI,OACjB,iBACI,qBACA,yBASJ,OACJ,OACJ,OACA,mBACI,kBACI,oBAAsC,aAAG,yBAAe,OAAI,OAC5D,iBACI,qBACJ,OACJ,OACJ,OACJ,OACJ,OACA,mBACI,sBAChB,SACA,OACgB,sBAAsB,2EACpC,oBACF,OACY,OACJ,OACJ,O,uBAjGsC,gCAKC,sCAIO,gDACjC,sEAC+B,sCAOX,0EAgBA,wEAgCA,wEAuByB,uDAC9D,wC,wCASA,qBAAQ,2EAA0H,8BAAmB,QCz/D9J,a,MAAMC,EA2Ib,YAAmBC,EACTC,EACAC,EACDC,EACCC,EACAC,EACAC,EACAC,EACAC,GARS,KAAAR,KACT,KAAAC,SACA,KAAAC,MACD,KAAAC,SACC,KAAAC,SACA,KAAAC,QACA,KAAAC,WACA,KAAAC,OACA,KAAAC,OArIR,KAAAC,gBAAkB,IAAIC,MACtB,KAAAC,WAAa,IAAID,MACjB,KAAAE,eAAiB,IAAIF,MACrB,KAAAG,eAAiB,IAAIH,MAErB,KAAAI,gBAA0B,EAE1B,KAAAC,UAAoB,EAGpB,KAAAC,QAAU,CAAC,UAAW,YAAa,UAGnC,KAAAC,WAAa,CAAC,QAAS,kBACvB,KAAAC,kBAAoB,IAAIR,MAExB,KAAAS,SAAmB,EACnB,KAAAC,UAAmB,EAGnB,KAAAC,qBAA8B,EAC9B,KAAAC,cAAwB,EAIxB,KAAAC,SAAmB,GAInB,KAAAC,WAAY,EAEZ,KAAAC,WAAa,CAAC,SAAU,YAGxB,KAAAC,YAAc,SACd,KAAAC,UAAW,EAKX,KAAAC,SAAU,CAAC,SAAS,SAAS,UAAU,SAAS,QAAQ,OAAO,SAAS,MAAM,YAG9E,KAAAC,MAAQ,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YACpE,KAAAC,QAAU,EAEjB,KAAAC,OAAiB,EACjB,KAAAC,MAAgB,EAEhB,KAAAC,WAAqB,EAGrB,KAAAC,WAAa,SACb,KAAAC,QAAiB,EACjB,KAAAC,YAAqB,EAErB,KAAAC,eAAyB,EAGzB,KAAAC,WAAmB,EAEnB,KAAAC,UAAmB,EAGnB,KAAAC,gBAA0B,EAC1B,KAAAC,eAAyB,EAGzB,KAAAC,WAAqB,EAErB,KAAAC,SAAW,GACX,KAAAC,UAAoB,EACpB,KAAAC,UAAoB,EAKpB,KAAAC,aAAuB,EACvB,KAAAC,aAAuB,EAEvB,KAAAC,YAAc,CAAC,OAAQ,SAAU,2BAEjC,KAAAC,SAAkB,EAClB,KAAAC,SAAkB,EAElB,KAAAC,mBAA6B,EAC7B,KAAAC,mBAA6B,EAC7B,KAAAC,gBAA0B,EAI1B,KAAAC,gBAAkB,sBAGlB,KAAAC,iBAAmB,GACnB,KAAAC,kBAAoB,CAAC,YAAY,YAEjC,KAAAC,mBAA6B,EAC7B,KAAAC,mBAA6B,EAI7B,KAAAC,oBAAqB,EAKrB,KAAAC,cAAwB,EACxB,KAAAC,cAAwB,EAIxB,KAAAC,uBAAwB,EAGxB,KAAAC,QAAU,SACV,KAAAC,cAAgB,SAChB,KAAAC,gBAAkB,SAClB,KAAAC,aAAe,SACf,KAAAC,iBAAmB,SACnB,KAAAC,cAAgB,SAEhB,KAAAC,YAAc,SACd,KAAAC,eAAiB,SA+bnB,KAAAC,qBAAuB,CACrB,OAAU,CACR,CAAEC,KAAM,UAAWC,QAAS,oCAE9B,OAAU,CACR,CAAED,KAAM,UAAWC,QAAS,oCAE9B,WAAc,CACZ,CAAED,KAAM,UAAWC,QAAS,yCAE9B,mBAAsB,CACpB,CAAED,KAAM,UAAWC,QAAS,iCAC5B,CAAED,KAAM,WAAYC,QAAS,4BAG/B,2BAA8B,CAC5B,CAAED,KAAM,UAAWC,QAAS,uCAC5B,CAAED,KAAM,WAAYC,QAAS,6BAoCjC,KAAAC,qBAAuB,CACrB,QAAW,CACT,CAAEF,KAAM,WAAYC,QAAS,uBAC7B,CAAED,KAAM,UAAWC,QAAS,mBAC5B,CAAED,KAAM,YAAaC,QAAS,kBAC9B,CAAED,KAAM,YAAaC,QAAS,0BA6MlC,KAAAE,2BAA6B,CAC3B,YAAe,CACb,CAAEH,KAAM,WAAYC,QAAS,6BAC7B,CAAED,KAAM,UAAWC,QAAS,iBAE9B,cAAiB,CACf,CAAED,KAAM,WAAYC,QAAS,0BAC7B,CAAED,KAAM,UAAWC,QAAS,wBA0EhC,KAAAG,kBAAoB,CAClB,KAAQ,CACN,CAAEJ,KAAM,WAAYC,QAAS,qBAE/B,aAAgB,CACd,CAAED,KAAM,WAAYC,QAAS,gCAE/B,SAAY,CACV,CAAED,KAAM,WAAYC,QAAS,4BAE/B,UAAa,CACX,CAAED,KAAM,WAAYC,QAAS,6BAE/B,aAAgB,CACd,CAAED,KAAM,WAAYC,QAAS,iCAE/B,IAAO,CACL,CAAED,KAAM,WAAYC,QAAS,8BAE/B,MAAS,CACP,CAAED,KAAM,WAAYC,QAAS,qBAC7B,CAAED,KAAM,UAAWC,QAAS,wBAE9B,MAAS,CACP,CAAED,KAAM,WAAYC,QAAS,4BAC7B,CAAED,KAAM,UAAWC,QAAS,wBAC5B,CAAED,KAAM,YAAaC,QAAS,uBAC9B,CAAED,KAAM,YAAaC,QAAS,2BAEhC,YAAe,CACb,CAAED,KAAM,UAAWC,QAAS,2BAC5B,CAAED,KAAM,YAAaC,QAAS,0BAC9B,CAAED,KAAM,YAAaC,QAAS,+BA+ElC,KAAAI,wBAA0B,CACxB,IAAO,CACL,CAAEL,KAAM,UAAWC,QAAS,iBA0fhC,KAAAK,uBAAyB,CACvB,gBAAmB,CACjB,CAAEN,KAAM,UAAWC,QAAS,4BAC5B,CAAED,KAAM,MAAOC,QAAS,6CAgL5B,KAAAM,sBAAwB,CACtB,KAAQ,CACN,CAAEP,KAAM,WAAYC,QAAS,0BAE/B,WAAc,CACZ,CAAED,KAAM,WAAYC,QAAS,8BAC7B,CAAED,KAAM,YAAaC,QAAS,0CAC9B,CAAED,KAAM,UAAWC,QAAS,sCAyBhC,KAAAO,mBAAqB,CACnB,IAAO,CACL,CAAER,KAAM,WAAYC,QAAS,yBAC7B,CAAED,KAAM,UAAWC,QAAS,gCAE9B,qBAAwB,CACtB,CAAED,KAAM,WAAYC,QAAS,8BAE/B,mBAAsB,CACpB,CAAED,KAAM,WAAYC,QAAS,8BAE/B,iBAAoB,CAClB,CAAED,KAAM,UAAWC,QAAS,yCAE9B,UAAa,CACX,CAAED,KAAM,YAAaC,QAAS,8BAEhC,SAAY,CACV,CAAED,KAAM,WAAYC,QAAS,+BAC7B,CAAED,KAAM,UAAWC,QAAS,uCAmPhC,KAAAQ,+BAAiC,CAC/B,UAAa,CACX,CAAET,KAAM,WAAYC,QAAS,2BAE/B,QAAW,CACT,CAAED,KAAM,WAAYC,QAAS,yBAE/B,cAAiB,CACf,CAAED,KAAM,WAAYC,QAAS,iCA0LjC,KAAAS,kCAAoC,CAClC,aAAgB,CACd,CAAEV,KAAM,WAAYC,QAAS,8BAE/B,YAAe,CACb,CAAED,KAAM,WAAYC,QAAS,gCAE/B,cAAiB,CACf,CAAED,KAAM,WAAYC,QAAS,+BAE/B,WAAc,CACZ,CAAED,KAAM,WAAYC,QAAS,4BAE/B,WAAc,CACZ,CAAED,KAAM,WAAYC,QAAS,4BAE/B,QAAW,CACT,CAAED,KAAM,WAAYC,QAAS,yBAuJjC,KAAAU,wBAA0B,GAC1B,KAAAC,yBAA2B,GA90EzB,cACGC,SAASC,eAAe,yBAA6CC,gBAAgB,YAsJ1F,WACEC,KAAKC,cAAgBD,KAAKnF,MAAMqF,SAASC,SAASC,IAAI,cACvBJ,KAAK9D,YAAZ,OAAvB8D,KAAKC,cAA4C,SAA6B,SAC/ED,KAAKK,YACLL,KAAKM,uBACLN,KAAKO,qBACLP,KAAKQ,eACLR,KAAKS,UACLT,KAAKU,oBACLV,KAAKW,6BACLX,KAAKY,mBACLZ,KAAKa,qBACLb,KAAKc,uBACLd,KAAKe,YACLf,KAAKgB,sBACLhB,KAAKiB,oBACLjB,KAAKkB,0BACLlB,KAAKmB,mBACLnB,KAAKoB,kBACLpB,KAAKqB,sBACJxB,SAASC,eAAe,yBAA6CwB,aAAa,WAAW,YAQhG,qBACEtB,KAAKuB,kBAAoBvB,KAAKxF,GAAGgH,MAAM,CACrCC,aAAc,IAAI,IAAY,GAAI,IAAWC,UAC7CC,SAAU,IAAI,IAAY,GAAI,IAAWD,UACzCE,UAAW,IAAI,IAAY,GAAI,IAAWF,UAC1CG,aAAc,IAAI,IAAY,GAAI,IAAWH,UAC7CI,KAAM,IAAI,IAAY,GAAI,IAAWJ,UACrCK,IAAK,IAAI,IAAY,GAAI,IAAWL,UACpCM,eAAgB,IAAI,IAAU,CAC5BC,SAAU,IAAI,IAAU,CACtBC,MAAO,IAAI,IAAY,GAAI,IAAWC,QAAQ,CAC5C,IAAWT,SACX,IAAWU,UAAU,IACrB,IAAWC,UAAU,IACrB,IAAWC,QAAQ,kCAErBC,YAAa,IAAI,IAAY,GAAI,IAAWJ,QAAQ,CAClD,IAAWC,UAAU,IACrB,IAAWC,UAAU,IACrB,IAAWC,QAAQ,iDAErBE,MAAO,IAAI,IAAY,GAAI,IAAWL,QAAQ,CAC5C,IAAWT,SACX,IAAWY,QAAQ,wDAGvBG,SAAU,IAAI,IAAU,CACtBP,MAAO,IAAI,IAAY,GAAI,IAAWC,QAAQ,CAC5C,IAAWC,UAAU,IACrB,IAAWC,UAAU,IACrB,IAAWC,QAAQ,kCAErBC,YAAa,IAAI,IAAY,GAAI,IAAWJ,QAAQ,CAClD,IAAWC,UAAU,IACrB,IAAWC,UAAU,IACrB,IAAWC,QAAQ,iDAErBE,MAAO,IAAI,IAAY,GAAI,IAAWL,QAAQ,CAAC,IAAWT,SACxD,IAAWY,QAAQ,0DAIzBI,0BAA2B,IAAI,KAAY,GAC3CC,KAAM,IAAI,KAAY,GACtBC,KAAM,IAAI,IAAY,MAU1B,uBACE5C,KAAKtF,IAAImI,aAAa7C,KAAKC,eAAe6C,UAAUC,IAClD,GAAmB,YAAhBA,EAAKC,OAAqB,CAC3BhD,KAAKjC,iBAAiBkF,KAAKF,EAAKA,MAChC,IAAK,IAAIG,EAAI,EAAGA,EAAIlD,KAAKjC,iBAAiBoF,OAAQD,IACvB,MAAtBlD,KAAKC,gBACND,KAAKoD,SAASpD,KAAKjC,iBAAiBmF,GAAGtB,WACvC5B,KAAKqD,sBAAsBrD,KAAKjC,iBAAiBmF,GAAGvB,WAEtD3B,KAAKuB,kBAAoBvB,KAAKxF,GAAGgH,MAAM,CACrCC,aAAc,IAAI,IAAYzB,KAAKjC,iBAAiBmF,GAAGzB,cACvDE,SAAU,IAAI,IAAY3B,KAAKjC,iBAAiBmF,GAAGvB,UACnDE,aAAc,IAAI,IAAY7B,KAAKjC,iBAAiBmF,GAAGrB,cACvDD,UAAW,IAAI,IAAY5B,KAAKjC,iBAAiBmF,GAAGtB,WACpDE,KAAM,IAAI,IAAY9B,KAAKjC,iBAAiBmF,GAAGI,cAC/CvB,IAAK,IAAI,IAAY/B,KAAKjC,iBAAiBmF,GAAGnB,KAC9CC,eAAgB,IAAI,IAAU,CAC5BC,SAAU,IAAI,IAAU,CACtBC,MAAO,IAAI,IAAYlC,KAAKjC,iBAAiBmF,GAAGK,mBAAmB,IAAWpB,QAAQ,CACpF,IAAWC,UAAU,IACrB,IAAWC,UAAU,IACrB,IAAWC,QAAQ,kCAErBC,YAAa,IAAI,IAAYvC,KAAKjC,iBAAiBmF,GAAGM,iBAAiB,IAAWrB,QAAQ,CACxF,IAAWC,UAAU,IACrB,IAAWC,UAAU,IACrB,IAAWC,QAAQ,iDAErBE,MAAO,IAAI,IAAYxC,KAAKjC,iBAAiBmF,GAAGO,cAAc,IAAWtB,QAAQ,CAC/E,IAAWT,SACX,IAAWY,QAAQ,wDAGvBG,SAAU,IAAI,IAAU,CACtBP,MAAO,IAAI,IAAYlC,KAAKjC,iBAAiBmF,GAAGQ,mBAAmB,IAAWvB,QAAQ,CACpF,IAAWC,UAAU,IACrB,IAAWC,UAAU,IACrB,IAAWC,QAAQ,kCAErBC,YAAa,IAAI,IAAYvC,KAAKjC,iBAAiBmF,GAAGS,iBAAiB,IAAWxB,QAAQ,CACxF,IAAWC,UAAU,IACrB,IAAWC,UAAU,IACrB,IAAWC,QAAQ,iDAErBE,MAAO,IAAI,IAAYxC,KAAKjC,iBAAiBmF,GAAGU,cAAc,IAAWzB,QAAQ,CAC/E,IAAWT,SACX,IAAWY,QAAQ,0DAIzBI,0BAA2B,IAAI,KAAY,GAC3CC,KAAM,IAAI,KAAY,GACtBC,KAAM,IAAI,IAAY,SAYhC,eACE,IAEE,IAAIiB,EAAuB7D,KAAKhF,KAAK8I,kBAAkB9D,KAAKuB,mBAClC,OAAvBvB,KAAKC,cACFD,KAAKuB,kBAAkBwC,OACzB/D,KAAKtF,IAAIsJ,WAAWH,EAAqBI,OAAOnB,UAAWC,IACtC,WAAfA,EAAKC,QAAuC,MAAhBD,EAAKC,QACnChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBe,KAAKmE,OAASpB,EAAKA,KAAKqB,gBAAgBC,IACxCC,WAAW,KACTtE,KAAKrF,OAAO4J,IAAI,IAAMvE,KAAKpF,OAAO4J,cAAc,2CAA2CxE,KAAKmE,SAChGnE,KAAKyE,sBACJ,OAEmB,SAAf1B,EAAKC,QAAqC,MAAhBD,EAAKC,SACtChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACJ,SAKLzE,KAAKuB,kBAAkBwC,OACzB/D,KAAKtF,IAAIiK,2BAA2Bd,EAAqBI,MAAMjE,KAAKC,eAAe6C,UAAWC,IACzE,WAAfA,EAAKC,QAAuC,MAAhBD,EAAKC,QACnChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAKyE,sBACJ,OAEmB,SAAf1B,EAAKC,QAAqC,MAAhBD,EAAKC,SACtChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACJ,SAMX,MAAOG,GACPC,QAAQC,IAAIF,IAMhB,sBAAsBG,IACN,IAAXA,EACD/E,KAAKhE,WAAY,GACE,IAAX+I,IACR/E,KAAKhE,WAAY,IAGG,IAAnBgE,KAAKhE,WACNgE,KAAKgF,wBAA0BhF,KAAKuB,kBAAkB0C,MAAMjC,eAAeC,SAC3EjC,KAAKuB,kBAAkBnB,IAAI,iCAAiC6E,SAASjF,KAAKgF,wBAAwB9C,OAClGlC,KAAKuB,kBAAkBnB,IAAI,uCAAuC6E,SAASjF,KAAKgF,wBAAwBzC,aACxGvC,KAAKuB,kBAAkBnB,IAAI,iCAAiC6E,SAASjF,KAAKgF,wBAAwBxC,SACtE,IAAnBxC,KAAKhE,YACdgE,KAAKuB,kBAAkBnB,IAAI,iCAAiC6E,SAAS,IACrEjF,KAAKuB,kBAAkBnB,IAAI,uCAAuC6E,SAAS,IAC3EjF,KAAKuB,kBAAkBnB,IAAI,iCAAiC6E,SAAS,KAYzE,mBACE,IACEjF,KAAKkF,gBAAkBlF,KAAKxF,GAAGgH,MAAM,CACnC2D,IAAK,IAAI,IAAU,CACjBC,OAAQ,IAAI,IAAY,GAAG,IAAWjD,QAAQ,CAAC,IAAWG,QAAQ,kDAClE+C,OAAQ,IAAI,IAAY,GAAG,IAAWlD,QAAQ,CAAC,IAAWG,QAAQ,oBAClEgD,MAAO,IAAI,IAAY,IACvBC,mBAAoB,IAAI,IAAY,IACpCC,WAAY,IAAI,IAAY,GAAG,IAAWrD,QAAQ,CAAC,IAAWG,QAAQ,uBACtEmD,SAAU,IAAI,IAAY,IAC1BC,YAAa,IAAI,KAAY,GAC7BC,mBAAoB,IAAI,IAAY,GAAG,IAAWxD,QAAQ,CAAC,IAAWG,QAAQ,+DAC9EsD,oBAAqB,IAAI,KAAY,GACrCC,2BAA4B,IAAI,IAAY,GAAG,IAAW1D,QAAQ,CAAC,IAAWG,QAAQ,+DACtFwD,QAAS,IAAI,IAAU,CACrBC,SAAU,IAAI,IAAU,CACtBC,oBAAqB,IAAI,IAAY,IACrCC,cAAe,IAAI,IAAY,IAC/BC,aAAc,IAAI,IAAY,IAC9BC,kBAAmB,IAAI,IAAY,IACnCC,cAAe,IAAI,IAAY,MAEjCC,OAAQ,IAAI,IAAU,CACpBC,kBAAmB,IAAI,IAAY,IACnCL,cAAe,IAAI,IAAY,IAC/BC,aAAc,IAAI,IAAY,IAC9BC,kBAAmB,IAAI,IAAY,IACnCC,cAAe,IAAI,IAAY,YAKvC,MAAOxB,GACPC,QAAQC,IAAIF,EAAI3F,UASpB,UACEe,KAAKtC,SAAU,EACfsC,KAAKvC,SAAU,EACfuC,KAAKzD,MAAQyD,KAAKuG,QAAQ,GAAGX,oBAC7B5F,KAAKxD,KAAOwD,KAAKuG,QAAQ,GAAGb,YAC5B,IAAI,IAAIxC,EAAE,EAAEA,EAAElD,KAAKuG,QAAQpD,OAAOD,IAChClD,KAAKkF,gBAAkBlF,KAAKxF,GAAGgH,MAAM,CACnC2D,IAAK,IAAI,IAAU,CACjBC,OAAQ,IAAI,IAAYpF,KAAKuG,QAAQrD,GAAGkC,OAAO,IAAWjD,QAAQ,CAAC,IAAWG,QAAQ,kDACtF+C,OAAQ,IAAI,IAAYrF,KAAKuG,QAAQrD,GAAGmC,OAAO,IAAWlD,QAAQ,CAAC,IAAWG,QAAQ,oBACtFgD,MAAO,IAAI,IAAYtF,KAAKuG,QAAQrD,GAAGoC,OACvCC,mBAAoB,IAAI,IAAYvF,KAAKuG,QAAQrD,GAAGqC,oBACpDC,WAAY,IAAI,IAAYxF,KAAKuG,QAAQrD,GAAGsC,WAAW,IAAWrD,QAAQ,CAAC,IAAWG,QAAQ,uBAC9FmD,SAAU,IAAI,IAAYzF,KAAKuG,QAAQrD,GAAGuC,UAC1CC,YAAa,IAAI,IAAY1F,KAAKuG,QAAQrD,GAAGwC,aAC7CC,mBAAoB,IAAI,IAAY3F,KAAKuG,QAAQrD,GAAGyC,mBAAmB,IAAWxD,QAAQ,CAAC,IAAWG,QAAQ,+DAC9GsD,oBAAqB,IAAI,IAAY5F,KAAKuG,QAAQrD,GAAG0C,qBACrDC,2BAA4B,IAAI,IAAY7F,KAAKuG,QAAQrD,GAAG2C,2BAA2B,IAAW1D,QAAQ,CAAC,IAAWG,QAAQ,+DAC9HwD,QAAS,IAAI,IAAU,CACrBC,SAAU,IAAI,IAAU,CACtBC,oBAAqB,IAAI,IAAYhG,KAAKuG,QAAQrD,GAAG4C,QAAQC,SAASC,qBACtEC,cAAe,IAAI,IAAYjG,KAAKuG,QAAQrD,GAAG4C,QAAQC,SAASE,eAChEC,aAAc,IAAI,IAAYlG,KAAKuG,QAAQrD,GAAG4C,QAAQC,SAASG,cAC/DC,kBAAmB,IAAI,IAAYnG,KAAKuG,QAAQrD,GAAG4C,QAAQC,SAASI,mBACpEC,cAAe,IAAI,IAAYpG,KAAKuG,QAAQrD,GAAG4C,QAAQC,SAASK,iBAElEC,OAAQ,IAAI,IAAU,CACpBC,kBAAmB,IAAI,IAAYtG,KAAKuG,QAAQrD,GAAG4C,QAAQO,OAAOC,mBAClEL,cAAe,IAAI,IAAYjG,KAAKuG,QAAQrD,GAAG4C,QAAQO,OAAOJ,eAC9DC,aAAc,IAAI,IAAYlG,KAAKuG,QAAQrD,GAAG4C,QAAQO,OAAOH,cAC7DC,kBAAmB,IAAI,IAAYnG,KAAKuG,QAAQrD,GAAG4C,QAAQO,OAAOF,mBAClEC,cAAe,IAAI,IAAYpG,KAAKuG,QAAQrD,GAAG4C,QAAQO,OAAOD,uBAS1E,cACEpG,KAAKtF,IAAI8L,YAAYxG,KAAKC,eAAe6C,UAAUC,IAC9B,MAAhBA,EAAKC,QAAkC,YAAhBD,EAAKC,SACQ,IAAlCyD,OAAOC,KAAK3D,EAAKA,MAAMI,QACxBnD,KAAKtC,SAAS,EACdsC,KAAKvC,SAAS,EACduC,KAAK2G,kBAAoB,WAEzB3G,KAAK2G,kBAAoB,SACzB3G,KAAKtC,SAAS,EACdsC,KAAKvC,SAAS,EACduC,KAAKuG,QAAUxD,EAAKA,KACpB/C,KAAKuG,QAAUrL,MAAM0L,GAAG5G,KAAKuG,aAKrC,sBACE,IACE,IAAIM,EAAe7G,KAAKhF,KAAK8L,oBAAoB9G,KAAKkF,iBACxB,WAA3BlF,KAAK2G,kBACN3G,KAAKtF,IAAIqM,cAAcF,EAAa5C,MAAOjE,KAAKC,eAAe6C,UAAUC,IACnD,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAKgH,cACLhH,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAG6B,WAA3BzE,KAAK2G,mBACb3G,KAAKtF,IAAIuM,UAAUJ,EAAa5C,MAAOjE,KAAKC,eAAe6C,UAAUC,IAC/C,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAKgH,cACLhH,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAKR,MAAMG,GACNC,QAAQC,IAAIF,IAWhB,MAAMX,GACN,IAAIiD,EAAoB,CAAC,QAAU,CAAC,IAAWxF,SAAU,IAAWY,QAAQ,8DAC5D,SAAV2B,EAC4B,WAA3BjE,KAAK2G,mBACN3G,KAAKkF,gBAAgB9E,IAAI,0BAA0B6E,SAAS,IAC5DjF,KAAKkF,gBAAgB9E,IAAI,0BAA0B+G,cAAcD,EAA2B,SAC5FlH,KAAKkF,gBAAgB9E,IAAI,0BAA0BgH,2BAEnDpH,KAAKxD,MAAO,EACZwD,KAAKkF,gBAAgB9E,IAAI,mBAAmB6E,UAAS,GACrDjF,KAAKkF,gBAAgB9E,IAAI,0BAA0B+G,cAAcD,EAA2B,SAC5FlH,KAAKkF,gBAAgB9E,IAAI,0BAA0BgH,2BAGrDpH,KAAKxD,MAAO,EACZwD,KAAKkF,gBAAgB9E,IAAI,mBAAmB6E,UAAS,GACrDjF,KAAKkF,gBAAgB9E,IAAI,0BAA0BiH,kBACnDrH,KAAKkF,gBAAgB9E,IAAI,0BAA0BgH,0BAUvD,QAAQnD,GACN,IAAIiD,EAAoB,CAAC,QAAU,CAAC,IAAWxF,SAAU,IAAWY,QAAQ,8DAC9D,SAAV2B,EAC4B,WAA3BjE,KAAK2G,mBACN3G,KAAKkF,gBAAgB9E,IAAI,kCAAkC6E,SAAS,IACpEjF,KAAKkF,gBAAgB9E,IAAI,kCAAkC+G,cAAcD,EAA2B,SACpGlH,KAAKkF,gBAAgB9E,IAAI,kCAAkCgH,2BAE3DpH,KAAKzD,OAAQ,EACbyD,KAAKkF,gBAAgB9E,IAAI,2BAA2B6E,UAAS,GAC7DjF,KAAKkF,gBAAgB9E,IAAI,kCAAkC+G,cAAcD,EAA2B,SACpGlH,KAAKkF,gBAAgB9E,IAAI,kCAAkCgH,2BAG7DpH,KAAKzD,OAAQ,EACbyD,KAAKkF,gBAAgB9E,IAAI,2BAA2B6E,UAAS,GAC7DjF,KAAKkF,gBAAgB9E,IAAI,kCAAkCiH,kBAC3DrH,KAAKkF,gBAAgB9E,IAAI,kCAAkCgH,0BA+B/D,oBACE,IACEpH,KAAKsH,oBAAsBtH,KAAKxF,GAAGgH,MAAM,CACvChG,QAAS,IAAI,IAAU,CACrB+L,QAAS,IAAI,IAAY,IACzBC,YAAa,IAAI,IAAY,IAC7BC,YAAa,IAAI,IAAY,IAC7BC,SAAU,IAAI,IAAY,IAE1BC,QAAS,IAAI,IAAY,GAAI,IAAWxF,QAAQ,CAAC,IAAWT,SAC1D,IAAWU,UAAU,GACrB,IAAWC,UAAU,IACrB,IAAWC,QAAQ,kCAErBsF,SAAU,IAAI,IAAY,IAC1BC,MAAO,IAAI,IAAY,IACvBC,YAAa,IAAI,IAAY,eAGjC,MAAOlD,GACPC,QAAQC,IAAIF,EAAI3F,UAiBpB,cACEe,KAAKtF,IAAIqN,WAAW/H,KAAKC,eAAe6C,UAAWC,IAC7B,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,SACZ,GAApBD,EAAKA,KAAKI,QAA8B,SAAfJ,EAAKC,QAAmC,KAAdD,EAAK8E,OAC1D7H,KAAKgI,UAAY,cACjBhI,KAAKlD,WAAY,EACjBkD,KAAKvD,WAAY,EACjBuD,KAAKpD,YAAa,IAElBoD,KAAKvD,WAAY,EACjBuD,KAAKlD,WAAY,EACjBkD,KAAKiI,YAAclF,EAAKA,KACxB/C,KAAKpD,YAAa,MAQ1B,gBACEoD,KAAKsH,oBAAoBY,QACzBlI,KAAKlD,WAAY,EACjBkD,KAAKgI,UAAY,cACjBhI,KAAKtD,WAAa,SAClBsD,KAAKvD,WAAY,EACjBuD,KAAKmI,UAAY,IAMnB,cACE,IACE,IAAIC,EAAmBpI,KAAKhF,KAAKqN,kBAAkBrI,KAAKsH,qBACnC,KAAlBtH,KAAKmI,WAALnI,MAAyBA,KAAKmI,UAC/BnI,KAAKtF,IAAI4N,cAAcF,EAAiBnE,MAAOjE,KAAKC,eAAe6C,UAAWC,IACxD,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAKuI,cACLvI,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,2BAKXzE,KAAKtF,IAAI8N,aAAaJ,EAAiBnE,MAAOjE,KAAKC,cAAcD,KAAKmI,WAAWrF,UAAWC,IACtE,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAKyI,cAAgB1F,EAAKA,KAC1B/C,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAKuI,cACLvI,KAAKyE,sBACL,MAEuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,0BAIXzE,KAAKmI,UAAY,IAEpB,MAAMvD,GACLC,QAAQC,IAAIF,IAUhB,YAAY8D,GACV1I,KAAKgI,UAAY,iBACjBhI,KAAKtD,WAAa,SAClBsD,KAAKmI,UAAYO,EACjB1I,KAAKvD,WAAY,EACjBuD,KAAKlD,WAAY,EAEjB,IAAI,IAAIoG,EAAG,EAAEA,EAAElD,KAAKiI,YAAY9E,OAAQD,IAClClD,KAAKiI,YAAY/E,GAAGmB,MAAQrE,KAAKmI,YACnCnI,KAAKsH,oBAAsBtH,KAAKxF,GAAGgH,MAAM,CACvChG,QAAS,IAAI,IAAU,CACrB+L,QAAS,IAAI,IAAYvH,KAAKiI,YAAY/E,GAAGqE,SAC7CC,YAAa,IAAI,IAAYxH,KAAKiI,YAAY/E,GAAGsE,aACjDC,YAAa,IAAI,IAAYzH,KAAKiI,YAAY/E,GAAGuE,aACjDC,SAAU,IAAI,IAAY1H,KAAKiI,YAAY/E,GAAGwE,UAC9CC,QAAS,IAAI,IAAY3H,KAAKiI,YAAY/E,GAAGyE,SAC7CC,SAAU,IAAI,IAAY5H,KAAKiI,YAAY/E,GAAG0E,UAC9CC,MAAO,IAAI,IAAY7H,KAAKiI,YAAY/E,GAAG2E,OAC3CC,YAAa,IAAI,IAAY,gBAOvC,gBACE9H,KAAKmI,UAAY,IACjBnI,KAAKvD,WAAY,EACjBuD,KAAKlD,WAAY,EAKnB,aAAaqL,GACX,MAAMQ,EAA2B,IAAKC,MAAM,CAC1CC,YAAa,CACbC,cAAe,kBACfC,aAAc,kBAEdC,gBAAgB,IAElBL,EAAyBM,KAAK,CAC5BC,MAAO,gBACPC,KAAM,wBACNnK,KAAM,UACNoK,kBAAkB,EAClBC,kBAAmB,MACnBC,iBAAkB,KAClBC,gBAAgB,IACfC,KAAMC,IACHA,EAAOxF,MACTjE,KAAKtF,IAAIgP,cAAc1J,KAAKC,cAAckI,GAAWrF,UAAWC,IAChE4F,EAAyBM,KACvB,WACAlG,EAAK9D,QACL,WAEFe,KAAKuI,gBAGLkB,EAAOE,UAAY,IAAKC,cAAcC,QAEtClB,EAAyBM,KACvB,YACA,oBACA,WAUR,cAAcrH,GACZ,IACE5B,KAAKtF,IAAIoP,sBAAsBlI,GAAWkB,UAAUC,IAC9B,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,SACpChD,KAAK3E,eAAiB0H,EAAKA,QAG/B,MAAO6B,GACPC,QAAQC,IAAIF,EAAI3F,UAKpB,6BACE,IACEe,KAAK+J,iBAAmB/J,KAAKxF,GAAGgH,MAAM,CACpCwI,mBAAoB,IAAI,IAAU,CAChCC,WAAY,IAAI,IAAY,IAC5BC,cAAe,IAAI,IAAY,IAC/BC,YAAa,IAAI,IAAY,GAAG,IAAWhI,QAAQ,CACjD,IAAWT,SACX,IAAWY,QAAQ,qBAErBU,OAAQ,IAAI,IAAY,IACxBoH,YAAa,IAAI,IAAY,IAC7BC,cAAe,IAAI,IAAY,GAAI,IAAWlI,QAAQ,CACpD,IAAWT,SACX,IAAWY,QAAQ,kEAIzB,MAAOsC,GACPC,QAAQC,IAAIF,EAAI3F,UAoBpB,UACE,IACEe,KAAKtF,IAAI4P,iBAAiBxH,UAAUC,IACd,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,SACpChD,KAAK/E,gBAAkB8H,EAAKwH,WAIlC,MAAO3F,GACLC,QAAQC,IAAIF,EAAI3F,UAKpB,eAAe2C,GACb,IACE5B,KAAKtF,IAAI8P,kBAAkB5I,GAAWkB,UAAWC,IAC3B,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,SACpChD,KAAKyK,OAAS1H,EAAK0H,OAAOtH,OAC1BnD,KAAK7E,WAAa4H,EAAK0H,UAI7B,MAAO7F,GACLC,QAAQC,IAAIF,IAKhB,SAAShD,GACP,IACE5B,KAAK0K,eAAe9I,GACpB5B,KAAK2K,cAAc/I,GACnB,MAAOgD,GACPC,QAAQC,IAAIF,IAKhB,QAAQjD,GACN,IACE3B,KAAKqD,sBAAsB1B,GAC3B,MAAOiD,GACPC,QAAQC,IAAIF,EAAI3F,UAIpB,OAAO2L,GACLA,EAAQC,iBAIV,sBAAsBlJ,GACpB,IACE3B,KAAKtF,IAAIoQ,kBAAkBnJ,GAAUmB,UAAWC,IAC1B,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,SACpChD,KAAK5E,eAAiB2H,EAAKgI,cAG/B,MAAOnG,GACPC,QAAQC,IAAIF,EAAI3F,UA2CpB,eACE,IACEe,KAAKvF,OAAOuQ,eAAelI,UAAUC,IACf,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,SACpChD,KAAKiL,QAAUlI,EAAKA,QAGxB,MAAO6B,GACPC,QAAQC,IAAIF,EAAI3F,UAIpB,kBAAkBiM,GAChB,IAAIC,EAAOD,EAAEE,aAAeF,EAAEE,aAAaC,MAAM,GAAKH,EAAEI,OAAOD,MAAM,GAEjEE,EAAS,IAAIC,WACZL,EAAKnM,KAAKyM,MAFD,YAMdF,EAAOG,OAAS1L,KAAK2L,oBAAoBC,KAAK5L,MAC9CuL,EAAOM,cAAcV,IAJnBW,MAAM,6BAOV,oBAAoBZ,GAElBlL,KAAKjE,SADQmP,EAAEI,OACQ7B,OACvBzJ,KAAK+L,UAAY/L,KAAKjE,SAGxB,SACE+P,MAAM,4BAGR,QAAQ5I,GACN,OAAO,IAAIhI,MAAMgI,GAMnB,YACElD,KAAKlF,SAASkR,oBAAoBlJ,UAAUC,IACvB,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,SACnChD,KAAKiM,WAAclJ,EAAKmJ,iBAO9B,iBAAiBjI,GACfjE,KAAKmM,SAAWlI,EAIlB,sBACEjE,KAAKoM,gBAAkBpM,KAAKxF,GAAGgH,MAAM,CACnC6K,OAAQ,IAAI,IAAU,CACpBC,QAAS,IAAI,IAAU,CACrBlQ,SAAU,IAAI,IAAY,SAAU,IAAWsF,UAC/CI,KAAM,IAAI,IAAY,IACtByK,IAAK,IAAI,IAAY,GAAG,IAAWpK,QAAQ,CAAC,IAAWG,QAAQ,+CAC/DkK,WAAY,IAAI,IAAY,IAC5BC,UAAW,IAAI,IAAY,IAC3BC,OAAQ,IAAI,IAAY,QAG5BjR,WAAY,IAAI,IAAY,WAWhC,iBAAiBkR,GACf,IACE3M,KAAKtB,aAAe,SACpBsB,KAAKnE,qBAAsB,EACzBmE,KAAK4M,cAAgBD,EACrB3M,KAAKpE,UAAW,EAChBoE,KAAKkJ,MAAQ,SACb,IAAK,IAAIhG,EAAI,EAAGA,EAAIlD,KAAKtE,kBAAkByH,OAAQD,IAC7ClD,KAAKtE,kBAAkBwH,GAAGmB,MAAQsI,IACpC9H,QAAQC,IAAI,IAAI9E,KAAKtE,kBAAkBwH,GAAGmB,KAC1CQ,QAAQC,IAAI,IAAI9E,KAAK2M,UAErB3M,KAAKoM,gBAAkBpM,KAAKxF,GAAGgH,MAAM,CACnC6K,OAAQ,IAAI,IAAU,CACpBC,QAAS,IAAI,IAAU,CACrBlQ,SAAU,IAAI,IAAY4D,KAAKtE,kBAAkBwH,GAAG9G,SAAU,IAAWsF,UACzEI,KAAM,IAAI,IAAY9B,KAAKtE,kBAAkBwH,GAAGpB,MAChDyK,IAAK,IAAI,IAAYvM,KAAKtE,kBAAkBwH,GAAGqJ,IAAI,IAAWpK,QAAQ,CAAC,IAAWG,QAAQ,+CAC1FkK,WAAY,IAAI,IAAYxM,KAAKtE,kBAAkBwH,GAAGsJ,YACtDC,UAAW,IAAI,IAAYzM,KAAKtE,kBAAkBwH,GAAGuJ,WACrDC,OAAQ,IAAI,IAAY1M,KAAKtE,kBAAkBwH,GAAGwJ,YAGtDjR,WAAY,IAAI,IAAYuE,KAAK6M,mBAIzC,MAAOjI,GACPC,QAAQC,IAAIF,EAAI3F,UAOpB,oBACEe,KAAK4M,cAAgB,GACrB5M,KAAKtB,aAAe,SACpBsB,KAAKpE,UAAW,EAChBoE,KAAKoM,gBAAgBlE,QACrBlI,KAAKkJ,MAAQ,MACblJ,KAAKnE,qBAAsB,EAK7B,cACEmE,KAAKpE,UAAW,EAChBoE,KAAKnE,qBAAsB,EAI7B,mBACEmE,KAAKtB,aAAe,SACpB,IACA,IAAIoO,EAAkB9M,KAAKhF,KAAK8L,oBAAoB9G,KAAKoM,iBACzDpM,KAAKnE,qBAAsB,EACiB,KAAtCmE,KAAK2M,SAASI,cAAc9I,MAC9BjE,KAAKtF,IAAIsS,gBAAgBF,EAAgB7I,MAAOjE,KAAKC,eAAe6C,UAAUC,IAC1D,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAKiN,mBACLjN,KAAKyE,sBACJ,KACHzE,KAAKoM,gBAAgBlE,SACI,UAAhBnF,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAKDzE,KAAKoM,gBAAgBrI,OACtB/D,KAAKtF,IAAIwS,oBAAoBJ,EAAgB7I,MAAOjE,KAAKC,cAAeD,KAAK2M,SAASI,cAAc9I,OAAOnB,UAAWC,IAChG,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAKiN,mBACLjN,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAKV,MAAOG,GACPC,QAAQC,IAAIF,IAKhB,mBACE,IACE5E,KAAKpE,UAAW,EAChBoE,KAAKtF,IAAIyS,cAAcnN,KAAKC,eAAe6C,UAAUsK,IAC3B,YAApBA,EAASpK,QAA4C,MAApBoK,EAASpK,SACxCoK,EAASrK,KAAKsK,cAAclK,OAAS,GACvCnD,KAAKrE,SAAU,EACfqE,KAAKtE,kBAAoB0R,EAASrK,KAAKsK,cACvCrN,KAAK6M,eAAiBO,EAASrK,KAAKtH,YACW,IAAvC2R,EAASrK,KAAKsK,cAAclK,SACpCnD,KAAKrE,SAAU,EACfqE,KAAKsN,wBAMX,MAAO1I,GACPC,QAAQC,IAAIF,EAAI3F,UAKpB,oBAAoB0N,GAClB,IACE,MAAMhE,EAA2B,IAAKC,MAAM,CAC1CC,YAAa,CACXC,cAAe,kBACfC,aAAc,kBAEhBC,gBAAgB,IAElBL,EAAyBM,KAAK,CAC5BC,MAAO,gBACPC,KAAM,wBACNnK,KAAM,UACNoK,kBAAkB,EAClBC,kBAAmB,MACnBC,iBAAkB,KAClBC,gBAAgB,IACfC,KAAMC,IACHA,EAAOxF,MACTjE,KAAKtF,IAAI6S,oBAAoBvN,KAAKC,cAAe0M,GAAU7J,UAAWC,IAChD,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,SACpC2F,EAAyBM,KACvB,WACAlG,EAAK9D,QACL,WAEFe,KAAKiN,sBAKTxD,EAAOE,UAAY,IAAKC,cAAcC,QAEtClB,EAAyBM,KACvB,YACA,oBACA,WAKR,MAAOrE,GACLC,QAAQC,IAAIF,EAAI3F,UAMpB,uBACEe,KAAKtF,IAAI8S,iBAAiBxN,KAAKC,eAAe6C,UAAUC,IACnC,YAAhBA,EAAKC,OACiB,GAApBD,EAAKA,KAAKI,QACXnD,KAAKyM,UAAY,oBACjBzM,KAAKnD,eAAgB,EACrBmD,KAAKjD,UAAW,EAChBiD,KAAKlE,cAAc,IAEnBkE,KAAKnD,eAAgB,EACrBmD,KAAKlE,cAAe,EACpBkE,KAAKyN,cAAgB1K,EAAKA,KAC1B/C,KAAKjD,UAAW,GAGlBiD,KAAKzE,UAAW,IAMtB,qBAAqBmS,GAChBA,EAAY,GAAKA,GAAc,KAC9B1N,KAAKlC,gBAAkB,GACvBkC,KAAK2N,UAAY,IACuB,GAAlC,EAAaC,WAAWzK,QAC9BnD,KAAKlC,gBAAkB,sBACvBkC,KAAK2N,UAAY,IACX,EAAaC,WAAWzK,OAAS,GACvCnD,KAAKlC,gBAAkB,6BACvBkC,KAAK2N,UAAY,KAEjB3N,KAAKlC,gBAAkB,GACvBkC,KAAK2N,UAAY,4BAIvB,cAAcjF,GACZ1I,KAAK6N,OAAS,SACd7N,KAAKvB,gBAAkB,SACvBuB,KAAKyM,UAAY,2BACjBzM,KAAK8N,kBAAoBpF,EACzB1I,KAAKnD,eAAgB,EAGrB,IAAI,IAAIqG,EAAG,EAAEA,EAAElD,KAAKyN,cAActK,OAAQD,IACtClD,KAAKyN,cAAcvK,GAAGmB,MAAQrE,KAAK8N,oBACvC9N,KAAK+J,iBAAmB/J,KAAKxF,GAAGgH,MAAM,CACpCwI,mBAAoB,IAAI,IAAU,CAChCC,WAAY,IAAI,IAAYjK,KAAKyN,cAAcvK,GAAG+G,YAClDC,cAAe,IAAI,IAAYlK,KAAKyN,cAAcvK,GAAGgH,eACrDC,YAAa,IAAI,IAAYnK,KAAKyN,cAAcvK,GAAGiH,YAAY,IAAWhI,QAAQ,CAChF,IAAWT,SACX,IAAWY,QAAQ,qBAErBU,OAAQ,IAAI,IAAYhD,KAAKyN,cAAcvK,GAAGF,QAC9CoH,YAAa,IAAI,IAAYpK,KAAKyN,cAAcvK,GAAGkH,aAEnDC,cAAe,IAAI,IAAYrK,KAAKyN,cAAcvK,GAAGmH,cAAe,IAAWlI,QAAQ,CACrF,IAAWT,SACX,IAAWY,QAAQ,mEAQ3B,gBAAgBoG,GACd,MAAMC,EAA2B,IAAKC,MAAM,CAC1CC,YAAa,CACbC,cAAe,kBACfC,aAAc,kBAEdC,gBAAgB,IAElBL,EAAyBM,KAAK,CAC5BC,MAAO,gBACPC,KAAM,wBACNnK,KAAM,UACNoK,kBAAkB,EAClBC,kBAAmB,MACnBC,iBAAkB,KAClBC,gBAAgB,IACfC,KAAMC,IACHA,EAAOxF,MACTjE,KAAKtF,IAAIqT,gBAAgB/N,KAAKC,cAAcyI,GAAI5F,UAAWC,IAC3D4F,EAAyBM,KACvB,WACAlG,EAAK9D,QACL,WAEFe,KAAKgO,yBAGLvE,EAAOE,UAAY,IAAKC,cAAcC,QAEtClB,EAAyBM,KACvB,YACA,sBACA,WAMR,kBACEjJ,KAAK6N,OAAS,SACd7N,KAAKlE,cAAc,EACnBkE,KAAKyM,UAAY,oBACjBzM,KAAK+J,iBAAiB7B,QACtBlI,KAAKnD,eAAgB,EACrBmD,KAAK8N,kBAAoB,IAI3B,kBACE9N,KAAKnD,eAAgB,EACrBmD,KAAKlE,cAAe,EACpBkE,KAAK8N,kBAAoB,IAG3B,gBACE,IACE,IAAIG,EAA2BjO,KAAKhF,KAAKqN,kBAAkBrI,KAAK+J,kBACnC,KAA1B/J,KAAK8N,mBAAL9N,MAAiCA,KAAK8N,kBACvC9N,KAAKtF,IAAIwT,sBAAsBD,EAAyBhK,MAAOjE,KAAKC,eAAe6C,UAAUC,IACvE,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAKyI,cAAgB1F,EAAKA,KAC1B/C,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAKgO,uBACLhO,KAAKyE,sBACL,MAEuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,SAINzE,KAAKtF,IAAIyT,gBAAgBF,EAAyBhK,MAAMjE,KAAKC,cAAcD,KAAK8N,mBAAmBhL,UAAUC,IACvF,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAKyI,cAAgB1F,EAAKA,KAC1B/C,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAKgO,uBACLhO,KAAKyE,sBACL,MAEuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAGNzE,KAAK8N,kBAAoB,IAE3B,MAAOlJ,GACPC,QAAQC,IAAIF,EAAI3F,UAQpB,eACEe,KAAKtF,IAAI0T,cAAcpO,KAAKC,eAAe6C,UAAUC,IAChC,YAAhBA,EAAKC,OACiB,GAApBD,EAAKA,KAAKI,QACXnD,KAAKqO,eAAiB,kBACtBrO,KAAK9C,WAAY,EACjB8C,KAAKhD,gBAAiB,EACtBgD,KAAK/C,eAAgB,IAErB+C,KAAKhD,gBAAiB,EACtBgD,KAAKsO,kBAAoBvL,EAAKA,KAC9B/C,KAAK/C,eAAgB,EACrB+C,KAAK9C,WAAW,GAGlB8C,KAAKzE,UAAW,IAKtB,cAAcmN,GACZ1I,KAAKqO,eAAiB,oBACtBrO,KAAKxB,cAAgB,SACrBwB,KAAKhD,gBAAiB,EACtBgD,KAAK9C,WAAY,EACjB8C,KAAKuO,YAAc7F,EACnB,IAAI,IAAIxF,EAAG,EAAEA,EAAElD,KAAKsO,kBAAkBnL,OAAQD,IACzClD,KAAKsO,kBAAkBpL,GAAGmB,MAAQrE,KAAKuO,cACxCvO,KAAKwO,mBAAqBxO,KAAKxF,GAAGgH,MAAM,CACtCiN,gBAAiB,IAAI,IAAU,CAC7BC,YAAa,IAAI,IAAY1O,KAAKsO,kBAAkBpL,GAAGwL,aACvDC,YAAa,IAAI,IAAY3O,KAAKsO,kBAAkBpL,GAAGyL,aACvDC,gBAAiB,IAAI,IAAY5O,KAAKsO,kBAAkBpL,GAAG0L,gBAAgB,IAAWzM,QAAQ,CAC5F,IAAWG,QAAQ,4DACnB,IAAWuM,IAAI,OAEjBC,eAAgB,IAAI,IAAY9O,KAAKsO,kBAAkBpL,GAAG4L,gBAC1DC,eAAgB,IAAI,IAAY/O,KAAKsO,kBAAkBpL,GAAG6L,gBAC1D9S,WAAY,IAAI,IAAY+D,KAAKsO,kBAAkBpL,GAAGjH,YACtD+S,QAAS,IAAI,IAAYhP,KAAKsO,kBAAkBpL,GAAG8L,cAO7D,gBAAgBtG,GACd,MAAMC,EAA2B,IAAKC,MAAM,CAC1CC,YAAa,CACbC,cAAe,kBACfC,aAAc,kBAEdC,gBAAgB,IAElBL,EAAyBM,KAAK,CAC5BC,MAAO,gBACPC,KAAM,wBACNnK,KAAM,UACNoK,kBAAkB,EAClBC,kBAAmB,MACnBC,iBAAkB,KAClBC,gBAAgB,IACfC,KAAMC,IACHA,EAAOxF,MACTjE,KAAKtF,IAAIuU,gBAAgBjP,KAAKC,cAAcyI,GAAI5F,UAAWC,IAC3D4F,EAAyBM,KACvB,WACAlG,EAAK9D,QACL,WAEFe,KAAKkP,iBAGLzF,EAAOE,UAAY,IAAKC,cAAcC,QAEtClB,EAAyBM,KACvB,YACA,sBACA,WAMR,mBACEjJ,KAAKhD,gBAAiB,EACtBgD,KAAK9C,WAAU,EAGjB,gBACE8C,KAAKwO,mBAAmBtG,QACxBlI,KAAKxB,cAAgB,SACrBwB,KAAKqO,eAAiB,iBACtBrO,KAAKhD,gBAAiB,EACtBgD,KAAK9C,WAAY,EACjB8C,KAAKuO,YAAc,GAIrB,aACE,IACE,IAAIY,EAA0BnP,KAAKhF,KAAKqN,kBAAkBrI,KAAKwO,oBACxC,IAApBxO,KAAKuO,aAAyC,MAApBvO,KAAKuO,YAChCvO,KAAKtF,IAAI0U,UAAUD,EAAwBlL,MAAOjE,KAAKC,eAAe6C,UAAUC,IAC1D,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAKkP,eACLlP,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAINzE,KAAKtF,IAAI2U,mBAAmBF,EAAwBlL,MAAMjE,KAAKC,cAAcD,KAAKuO,aAAazL,UAAUC,IACnF,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAKkP,eACLlP,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAKR,MAAOG,GACPC,QAAQC,IAAIF,EAAI3F,UAYpB,uBACE,IACEe,KAAKwO,mBAAqBxO,KAAKxF,GAAGgH,MAAM,CACtCiN,gBAAiB,IAAI,IAAU,CAC7BC,YAAa,IAAI,IAAY,IAC7BC,YAAa,IAAI,IAAY,IAC7BC,gBAAiB,IAAI,IAAY,GAAG,IAAWzM,QAAQ,CACrD,IAAWG,QAAQ,4DACnB,IAAWuM,IAAI,OAEjBC,eAAgB,IAAI,IAAY,IAChCC,eAAgB,IAAI,IAAY,IAChC9S,WAAY,IAAI,IAAY,IAC5B+S,QAAS,IAAI,IAAY,QAI/B,MAAOpK,GACLC,QAAQC,IAAIF,IAShB,cACE,IACE5E,KAAKhE,WAAY,EACjBgE,KAAKtF,IAAI4U,gBAAgBtP,KAAKC,eAAe6C,UAAUC,IAClC,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,SACjChD,KAAKuP,aAAe9I,OAAOC,KAAK3D,EAAKA,KAAKN,UAAUU,OACpDnD,KAAKwP,cAAgB/I,OAAOC,KAAK3D,EAAKA,KAAKd,UAAUkB,OAC/B,GAArBnD,KAAKuP,cAA2C,GAAtBvP,KAAKwP,eAChCxP,KAAK5C,UAAW,EAChB4C,KAAK3C,UAAW,EAChB2C,KAAKyP,gBAAgBvH,UAErBlI,KAAK0P,aAAe3M,EAAKA,KACzB/C,KAAK0P,aAAexU,MAAM0L,GAAG5G,KAAK0P,cAClC1P,KAAK5C,UAAW,EAChB4C,KAAK3C,UAAU,MAItB,MAAMuH,GACLC,QAAQC,IAAIF,EAAI3F,UAIpB,kBACEe,KAAK3C,UAAW,EAChB2C,KAAK5C,UAAW,EAChB4C,KAAKzB,QAAU,SAEf,IAAI,IAAI2E,EAAG,EAAEA,EAAElD,KAAK0P,aAAavM,OAAOD,IACtClD,KAAKyP,gBAAkBzP,KAAKxF,GAAGgH,MAAM,CACnCmO,YAAa,IAAI,IAAU,CACvBlN,SAAU,IAAI,IAAU,CACtBX,KAAM,IAAI,IAAY9B,KAAK0P,aAAaxM,GAAGT,SAASX,MACpD8N,WAAY,IAAI,IAAY5P,KAAK0P,aAAaxM,GAAGT,SAASmN,WAAW,IAAWzN,QAAQ,CAAC,IAAWE,UAAU,IAC5G,IAAWC,QAAQ,eACrBuN,aAAc,IAAI,IAAY7P,KAAK0P,aAAaxM,GAAGT,SAASoN,cAC5DC,YAAa,IAAI,IAAY9P,KAAK0P,aAAaxM,GAAGT,SAASqN,aAC3DC,aAAc,IAAI,IAAY/P,KAAK0P,aAAaxM,GAAGT,SAASsN,cAC5DC,cAAe,IAAI,IAAYhQ,KAAK0P,aAAaxM,GAAGT,SAASuN,eAC7DhB,QAAS,IAAI,IAAYhP,KAAK0P,aAAaxM,GAAGT,SAASuM,WAEzD/M,SAAU,IAAI,IAAU,CACtBH,KAAM,IAAI,IAAY9B,KAAK0P,aAAaxM,GAAGjB,SAASH,MACpD8N,WAAY,IAAI,IAAY5P,KAAK0P,aAAaxM,GAAGjB,SAAS2N,WAAW,IAAWzN,QAAQ,CAAC,IAAWE,UAAU,IAC5G,IAAWC,QAAQ,eACrBuN,aAAc,IAAI,IAAY7P,KAAK0P,aAAaxM,GAAGjB,SAAS4N,cAC5DC,YAAa,IAAI,IAAY9P,KAAK0P,aAAaxM,GAAGjB,SAAS6N,aAC3DC,aAAc,IAAI,IAAY/P,KAAK0P,aAAaxM,GAAGjB,SAAS8N,cAC5DC,cAAe,IAAI,IAAYhQ,KAAK0P,aAAaxM,GAAGjB,SAAS+N,eAC7DhB,QAAS,IAAI,IAAYhP,KAAK0P,aAAaxM,GAAGjB,SAAS+M,eASnE,sBAAsBjK,IACN,IAAXA,EACD/E,KAAKhE,WAAY,GACE,IAAX+I,IACR/E,KAAKhE,WAAY,IAEG,IAAnBgE,KAAKhE,WACNgE,KAAKiQ,oBAAsBjQ,KAAKyP,gBAAgBxL,MAAM0L,YAAYlN,SAClEzC,KAAKyP,gBAAgBrP,IAAI,6BAA6B6E,SAASjF,KAAKiQ,oBAAoBnO,MACxF9B,KAAKyP,gBAAgBrP,IAAI,mCAAmC6E,SAASjF,KAAKiQ,oBAAoBL,YAC9F5P,KAAKyP,gBAAgBrP,IAAI,qCAAqC6E,SAASjF,KAAKiQ,oBAAoBJ,cAChG7P,KAAKyP,gBAAgBrP,IAAI,oCAAoC6E,SAASjF,KAAKiQ,oBAAoBH,aAC/F9P,KAAKyP,gBAAgBrP,IAAI,gCAAgC6E,SAASjF,KAAKiQ,oBAAoBjB,WAE/D,IAAnBhP,KAAKhE,YACdgE,KAAKyP,gBAAgBrP,IAAI,6BAA6B6E,SAAS,IAC/DjF,KAAKyP,gBAAgBrP,IAAI,mCAAmC6E,SAAS,IACrEjF,KAAKyP,gBAAgBrP,IAAI,qCAAqC6E,SAAS,IACvEjF,KAAKyP,gBAAgBrP,IAAI,oCAAoC6E,SAAS,IACtEjF,KAAKyP,gBAAgBrP,IAAI,gCAAgC6E,SAAS,KAItE,iBACE,IACE,IAAIiL,EAAgBlQ,KAAKhF,KAAK8I,kBAAkB9D,KAAKyP,iBACrDzP,KAAKtF,IAAIyV,WAAWD,EAAcjM,MAAOjE,KAAKC,eAAe6C,UAAWC,IAClD,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAK2P,cACL3P,KAAKyE,sBACL,OACuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAK2P,cACL3P,KAAKyE,sBACL,QAGN,MAAOG,GACPC,QAAQC,IAAIF,EAAI3F,UAIpB,oBACEe,KAAK2P,cAGP,qBACE,IACE3P,KAAKyP,gBAAkBzP,KAAKxF,GAAGgH,MAAM,CACnCmO,YAAa,IAAI,IAAU,CACvBlN,SAAU,IAAI,IAAU,CACtBX,KAAM,IAAI,IAAY,GAAG,IAAWK,QAAQ,CAAC,IAAWT,YACxDkO,WAAY,IAAI,IAAY,GAAG,IAAWzN,QAAQ,CAAC,IAAWT,SAAS,IAAWW,UAAU,IAC5F,IAAWC,QAAQ,eACnBuN,aAAc,IAAI,IAAY,IAC9BC,YAAa,IAAI,IAAY,IAC7BC,aAAc,IAAI,IAAY,IAC9BC,cAAe,IAAI,IAAY,IAC/BhB,QAAS,IAAI,IAAY,MAE3B/M,SAAU,IAAI,IAAU,CACtBH,KAAM,IAAI,IAAY,GAAG,IAAWK,QAAQ,CAAC,IAAWT,YACxDkO,WAAY,IAAI,IAAY,GAAG,IAAWzN,QAAQ,CAAC,IAAWT,SAAS,IAAWW,UAAU,IAC1F,IAAWC,QAAQ,eACrBuN,aAAc,IAAI,IAAY,IAC9BC,YAAa,IAAI,IAAY,IAC7BC,aAAc,IAAI,IAAY,IAC9BC,cAAe,IAAI,IAAY,IAC/BhB,QAAS,IAAI,IAAY,UAIjC,MAAOpK,GACPC,QAAQC,IAAIF,IAoBhB,oBACE5E,KAAKoQ,mBAAqBpQ,KAAKxF,GAAGgH,MAAM,CACtC6O,QAAQ,IAAI,IAAU,CACpBC,IAAI,IAAI,IAAY,GAAG,IAAWnO,QAAQ,CAAC,IAAWT,SAAS,IAAWY,QAAQ,+BAClFiO,qBAAqB,IAAI,IAAY,GAAG,IAAW7O,UACnD8O,mBAAmB,IAAI,IAAY,GAAG,IAAW9O,UACjD+O,iBAAiB,IAAI,IAAY,GAAG,IAAWtO,QAAQ,CAAC,IAAWG,QAAQ,8BAC3EoO,mBAAmB,IAAI,IAAY,IACnCC,UAAU,IAAI,IAAY,GAAG,IAAWjP,UACxCkP,SAAS,IAAI,IAAY,GAAG,IAAWzO,QAAQ,CAAC,IAAWT,SAAS,IAAWY,QAAQ,+BACvFuO,KAAM,IAAI,IAAY,YA6B5B,aACE,IAC4B,WAAvB7Q,KAAKpB,cACNoB,KAAKtF,IAAIoW,kBAAkB9Q,KAAKoQ,mBAAmBnM,MAAMjE,KAAKC,eAAe6C,UAAUC,IACjE,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAK+Q,kBACL/Q,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAGyB,WAAvBzE,KAAKpB,eACboB,KAAKtF,IAAIsW,sBAAsBhR,KAAKoQ,mBAAmBnM,MAAMjE,KAAKC,eAAe6C,UAAUC,IACrE,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAK+Q,kBACL/Q,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAIT,MAAMG,GACLC,QAAQC,IAAIF,IAIhB,kBACE,IACA5E,KAAKtF,IAAIuW,eAAejR,KAAKC,eAAe6C,UAAUC,IACjC,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACnChD,KAAKkR,gBACLlR,KAAKmR,iBAAmB1K,OAAOC,KAAK3D,EAAKA,MAAMI,OAClB,IAA1BnD,KAAKmR,kBACNnR,KAAK1C,aAAc,EACnB0C,KAAKzC,aAAc,EACnByC,KAAKoQ,mBAAmBhQ,IAAI,8BAA8B6E,SAASlC,EAAKA,KAAK2N,sBAE7E1Q,KAAKoR,YAAcrO,EAAKA,KACxB/C,KAAKoR,YAAclW,MAAM0L,GAAG5G,KAAKoR,aACjCpR,KAAK1C,aAAc,EACnB0C,KAAKzC,aAAc,EACnByC,KAAKpB,cAAgB,SACrBoB,KAAKoQ,mBAAmBhQ,IAAI,8BAA8B6E,SAASlC,EAAKA,KAAK2N,sBAG/E7L,QAAQC,IAAI/B,EAAK9D,WAGpB,MAAM2F,GACLC,QAAQC,IAAIF,IAMhB,gBACE,IACE5E,KAAKtF,IAAIwW,gBAAgBpO,UAAUC,IACd,YAAhBA,EAAKC,SACNhD,KAAKqR,qBAAuBtO,EAAKA,QAGtC,MAAM6B,GACLC,QAAQC,IAAIF,IAIhB,qBACE5E,KAAKzC,aAAc,EACnByC,KAAK1C,aAAa,EAClB,IAAI,IAAI4F,EAAE,EAAEA,EAAElD,KAAKoR,YAAYjO,OAAOD,IACpClD,KAAKoQ,mBAAqBpQ,KAAKxF,GAAGgH,MAAM,CACtC6O,QAAQ,IAAI,IAAU,CACpBC,IAAI,IAAI,IAAYtQ,KAAKoR,YAAYlO,GAAGoN,IAAI,IAAWnO,QAAQ,CAAC,IAAWT,SAAS,IAAWY,QAAQ,+BACvGiO,qBAAqB,IAAI,IAAYvQ,KAAKoR,YAAYlO,GAAGqN,qBAAqBe,UAAU,EAAE,KAC1Fd,mBAAmB,IAAI,IAAYxQ,KAAKoR,YAAYlO,GAAGsN,mBAAmBc,UAAU,EAAE,KACtFb,iBAAiB,IAAI,IAAYzQ,KAAKoR,YAAYlO,GAAGuN,iBAAiB,IAAWtO,QAAQ,CAAC,IAAWG,QAAQ,8BAC7GoO,mBAAmB,IAAI,IAAY1Q,KAAKoR,YAAYlO,GAAGwN,oBACvDC,UAAU,IAAI,IAAY3Q,KAAKoR,YAAYlO,GAAGyN,WAC9CC,SAAU,IAAI,IAAY5Q,KAAKoR,YAAYlO,GAAG0N,SAAS,IAAWzO,QAAQ,CAAC,IAAWT,SAAS,IAAWY,QAAQ,+BAClHuO,KAAM,IAAI,IAAY7Q,KAAKoR,YAAYlO,GAAG2N,UAMlD,iBACE7Q,KAAKzC,aAAc,EACnByC,KAAK1C,aAAc,EACnB0C,KAAK+Q,kBAMP,wBACE,IACA/Q,KAAKtF,IAAI6W,sBAAsBvR,KAAKC,eAAe6C,UAAUC,IACxC,YAAhBA,EAAKC,SAC+B,GAAlCD,EAAKA,KAAKyO,cAAcrO,QACzBnD,KAAK/B,mBAAoB,EACzB+B,KAAK9B,mBAAoB,EACzB8B,KAAK7B,oBAAqB,EAC1B6B,KAAKnB,YAAc,SACnBmB,KAAKyR,0BAA4B,uBAGjCzR,KAAK0R,kBAAoB3O,EAAKA,KAAKyO,cACnCxR,KAAK/B,mBAAoB,EACzB+B,KAAK9B,mBAAoB,EACzB8B,KAAK7B,oBAAqB,EAC1B6B,KAAKnB,YAAc,aAKxB,MAAM+F,GACLC,QAAQC,IAAIF,IAMhB,kBACE,IACE,IAAI+M,EAAwB3R,KAAKhF,KAAKqN,kBAAkBrI,KAAK4R,0BACrC,WAArB5R,KAAKnB,YACNmB,KAAKtF,IAAImX,iBAAiBF,EAAsB1N,MAAMjE,KAAKC,eAAe6C,UAAUC,IAC9D,YAAhBA,EAAKC,QACPhD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAK8R,wBACL9R,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,SACdhD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAGuB,WAArBzE,KAAKnB,aACbmB,KAAKtF,IAAIqX,oBAAoBJ,EAAsB1N,MAAMjE,KAAKC,cAAcD,KAAKgS,gBAAgBlP,UAAUC,IACrF,YAAhBA,EAAKC,QACPhD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAK8R,wBACL9R,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,SACdhD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAIR,MAAMG,GACNC,QAAQC,IAAIF,IAMhB,0BAA0BoN,GACxB,IACEhS,KAAKgS,eAAiBA,EACtBhS,KAAKyR,0BAA4B,wBACjCzR,KAAKnB,YAAc,SACnBmB,KAAK9B,mBAAoB,EACzB8B,KAAK7B,oBAAqB,EAC1B,IAAI,IAAI+E,EAAI,EAAGA,EAAElD,KAAK0R,kBAAkBvO,OAAQD,IAC3ClD,KAAK0R,kBAAkBxO,GAAGmB,KAAO2N,IAClChS,KAAK4R,yBAA2B5R,KAAKxF,GAAGgH,MAAM,CAC5CyQ,UAAU,IAAI,IAAYjS,KAAK0R,kBAAkBxO,GAAG+O,UAAUX,UAAU,EAAE,IAAI,IAAW5P,UACzFwQ,QAAQ,IAAI,IAAYlS,KAAK0R,kBAAkBxO,GAAGgP,QAAQZ,UAAU,EAAE,IAAI,IAAW5P,UACrFyQ,cAAc,IAAI,IAAYnS,KAAK0R,kBAAkBxO,GAAGiP,cAAc,IAAWzQ,UACjF0Q,OAAO,IAAI,IAAYpS,KAAK0R,kBAAkBxO,GAAGkP,WAIvD,MAAMxN,GACNC,QAAQC,IAAIF,IAKhB,mBACE5E,KAAK4R,yBAA2B5R,KAAKxF,GAAGgH,MAAM,CAC5CyQ,UAAU,IAAI,IAAY,GAAG,IAAWvQ,UACxCwQ,QAAQ,IAAI,IAAY,GAAG,IAAWxQ,UACtCyQ,cAAc,IAAI,IAAY,GAAG,IAAWzQ,UAC5C0Q,OAAO,IAAI,IAAY,MAK3B,sBACEpS,KAAK4R,yBAAyB1J,QAC9BlI,KAAK7B,oBAAqB,EAC1B6B,KAAKyR,0BAA4B,qBACjCzR,KAAKnB,YAAc,SACnBmB,KAAK9B,mBAAoB,EAI3B,qBACE8B,KAAK8R,wBACL9R,KAAK4R,yBAAyB1J,QAkBhC,0BACE,IACAlI,KAAKtF,IAAI2X,yBAAyBrS,KAAKC,eAAe6C,UAAUC,IAE3C,YAAhBA,EAAKC,SACiB,GAApBD,EAAKA,KAAKI,QACXnD,KAAK5B,cAAe,EACpB4B,KAAK3B,cAAe,EACpB2B,KAAK1B,uBAAwB,EAC7B0B,KAAKlB,eAAiB,SACtBkB,KAAKsS,sBAAwB,iCAG7BtS,KAAKuS,aAAexP,EAAKA,KACzB/C,KAAK5B,cAAe,EACpB4B,KAAK3B,cAAe,EACpB2B,KAAK1B,uBAAwB,EAC7B0B,KAAKlB,eAAiB,aAK3B,MAAM8F,GACLC,QAAQC,IAAIF,IAMhB,cACE,IACE,IAAI4N,EAA2BxS,KAAKhF,KAAK8I,kBAAkB9D,KAAKyS,qBACrC,WAAxBzS,KAAKlB,eACNkB,KAAKtF,IAAIgY,oBAAoBF,EAAyBvO,MAAMjE,KAAKC,eAAe6C,UAAUC,IACpE,YAAhBA,EAAKC,QACPhD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAK2S,0BACL3S,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,SACdhD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAG0B,WAAxBzE,KAAKlB,gBACbkB,KAAKtF,IAAIkY,uBAAuBJ,EAAyBvO,MAAMjE,KAAKC,cAAcD,KAAK6S,mBAAmB/P,UAAUC,IAC9F,YAAhBA,EAAKC,QACPhD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBqF,WAAW,KACTtE,KAAK2S,0BACL3S,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,SACdhD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAIR,MAAMG,GACNC,QAAQC,IAAIF,IAMhB,6BAA6BkO,GAC3B,IACE9S,KAAK6S,kBAAoBC,EACzB9S,KAAKsS,sBAAwB,4BAC7BtS,KAAKlB,eAAiB,SACtBkB,KAAK3B,cAAe,EACpB2B,KAAK1B,uBAAwB,EAC7B,IAAI,IAAI4E,EAAI,EAAGA,EAAElD,KAAKuS,aAAapP,OAAQD,IACtClD,KAAKuS,aAAarP,GAAGmB,MAAQyO,IAC9B9S,KAAKyS,oBAAsBzS,KAAKxF,GAAGgH,MAAM,CACvCuR,eAAgB,IAAI,IAAW,CAC7BC,aAAa,IAAI,IAAYhT,KAAKuS,aAAarP,GAAG8P,aAAa,IAAWtR,UAC1EuR,YAAY,IAAI,IAAYjT,KAAKuS,aAAarP,GAAG+P,YAAY,IAAWvR,UACxEwR,cAAc,IAAI,IAAYlT,KAAKuS,aAAarP,GAAGgQ,eACnDC,WAAW,IAAI,IAAYnT,KAAKuS,aAAarP,GAAGiQ,YAChDC,WAAW,IAAI,IAAYpT,KAAKuS,aAAarP,GAAGkQ,WAAW9B,UAAU,EAAE,IAAI,IAAW5P,UACtFsN,QAAQ,IAAI,IAAYhP,KAAKuS,aAAarP,GAAG8L,cAKrD,MAAMpK,GACNC,QAAQC,IAAIF,IAKhB,qBAAqByO,GACnB,IACE,MAAM1K,EAA2B,IAAKC,MAAM,CAC1CC,YAAa,CACXC,cAAe,kBACfC,aAAc,kBAEhBC,gBAAgB,IAElBL,EAAyBM,KAAK,CAC5BC,MAAO,gBACPC,KAAM,wBACNnK,KAAM,UACNoK,kBAAkB,EAClBC,kBAAmB,MACnBC,iBAAkB,KAClBC,gBAAgB,IACfC,KAAMC,IACHA,EAAOxF,MACTjE,KAAKtF,IAAI4Y,sBAAsBtT,KAAKC,cAAeoT,GAASvQ,UAAWC,IACjD,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,SACpC2F,EAAyBM,KACvB,WACAlG,EAAK9D,QACL,WAEFe,KAAK2S,6BAKTlJ,EAAOE,UAAY,IAAKC,cAAcC,QAEtClB,EAAyBM,KACvB,YACA,oBACA,WAKR,MAAOrE,GACLC,QAAQC,IAAIF,EAAI3F,UAKpB,yBACEe,KAAKyS,oBAAoBvK,QACzBlI,KAAK1B,uBAAwB,EAC7B0B,KAAKsS,sBAAwB,sBAC7BtS,KAAKlB,eAAiB,SACtBkB,KAAK3B,cAAe,EAGtB,yBACE2B,KAAK2S,0BACL3S,KAAKyS,oBAAoBvK,QAI3B,sBACElI,KAAKyS,oBAAsBzS,KAAKxF,GAAGgH,MAAM,CACvCuR,eAAgB,IAAI,IAAU,CAC5BC,aAAa,IAAI,IAAY,GAAG,IAAWtR,UAC3CuR,YAAY,IAAI,IAAY,GAAG,IAAWvR,UAC1CwR,cAAc,IAAI,IAAY,IAC9BC,WAAW,IAAI,IAAY,IAC3BC,WAAW,IAAI,IAAY,GAAG,IAAW1R,UACzCsN,QAAQ,IAAI,IAAY,QA4B9B,YACEhP,KAAKvC,SAAQ,EACbuC,KAAKtC,SAAQ,EAKf,oBACE,IACEsC,KAAKpC,mBAAoB,EACzBoC,KAAKtF,IAAI6Y,cAAcvT,KAAKC,eAAe6C,UAAUC,IACjC,WAAfA,EAAKC,QAAsC,KAAfD,EAAKC,SACV,IAArBD,EAAKA,KAAKI,QACXnD,KAAKrC,mBAAoB,EACzBqC,KAAKwT,yBAELxT,KAAKyT,aAAe1Q,EAAKA,KACzB/C,KAAKrC,mBAAmB,MAI/B,MAAMiH,GACLC,QAAQC,IAAIF,IAIhB,kBAAkB8D,GAChB1I,KAAK0T,oBAAsBhL,EAC3B1I,KAAKrB,iBAAmB,SACxBqB,KAAK2T,mBAAqB,kBAC1B3T,KAAKpC,mBAAoB,EACzBoC,KAAKnC,gBAAiB,EACtB,IAAI,IAAIqF,EAAE,EAAEA,EAAElD,KAAKyT,aAAatQ,OAAOD,IAClClD,KAAKyT,aAAavQ,GAAGmB,KAAOqE,IAC7B1I,KAAK4T,kBAAoB5T,KAAKxF,GAAGgH,MAAM,CACrCqS,eAAe,IAAI,IAAU,CAC3BC,QAAQ,IAAI,IAAY9T,KAAKyT,aAAavQ,GAAG4Q,SAC7CC,OAAO,IAAI,IAAY/T,KAAKyT,aAAavQ,GAAG6Q,QAC5CC,QAAQ,IAAI,IAAYhU,KAAKyT,aAAavQ,GAAG8Q,cAOvD,sBACEhU,KAAKpC,mBAAoB,EACzBoC,KAAKnC,gBAAiB,EAGxB,mBACE,IACE,IAAIoW,EAAyBjU,KAAKhF,KAAKqN,kBAAkBrI,KAAK4T,mBAEjC,IAA5B5T,KAAK0T,qBAA0D,OAA7B1T,KAAK0T,oBACxC1T,KAAKtF,IAAIwZ,iBAAiBD,EAAuBhQ,MAAMjE,KAAKC,eAAe6C,UAAUC,IAC/D,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBe,KAAKnC,gBAAiB,EACtByG,WAAW,KACTtE,KAAKmU,oBACLnU,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAINzE,KAAKtF,IAAI0Z,oBAAoBH,EAAuBhQ,MAAMjE,KAAKC,cAAcD,KAAK0T,qBAAqB5Q,UAAUC,IAC3F,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAanB,EAAK9D,QACvBe,KAAKnC,gBAAiB,EACtByG,WAAW,KACTtE,KAAKmU,oBACLnU,KAAKyE,sBACL,MACuB,UAAhB1B,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKzE,UAAW,EAChByE,KAAK1E,gBAAiB,EACtB0E,KAAK0E,OAAS3B,EAAK9D,QACnBqF,WAAW,KACTtE,KAAKyE,sBACL,QAINzE,KAAK0T,oBAAsB,GAC3B,MAAM9O,GACNC,QAAQC,IAAIF,IAKhB,0BACE5E,KAAK4T,kBAAoB5T,KAAKxF,GAAGgH,MAAM,CACrCqS,eAAe,IAAI,IAAU,CAC3BC,QAAQ,IAAI,IAAY,IACxBC,OAAO,IAAI,IAAY,IACvBC,QAAQ,IAAI,IAAY,QAK9B,uBACAhU,KAAK0T,oBAAsB,GAC3B1T,KAAK2T,mBAAqB,MAC1B3T,KAAKrB,iBAAmB,SACxBqB,KAAKpC,mBAAoB,EACzBoC,KAAKnC,gBAAiB,EACtBmC,KAAK4T,kBAAkB1L,QAOvB,qBACElI,KAAK1E,gBAAiB,EACtB0E,KAAKzE,UAAW,EAChByE,KAAKkE,WAAa,GAClBlE,KAAK0E,OAAS,GAEhB,UACE1E,KAAK7D,UAAY6D,KAAK7D,SACtB6D,KAAKuB,kBAAkBnB,IAAI,QAAQ6E,SAASjF,KAAK7D,UAInD,YACE6D,KAAKtF,IAAI2F,YAAYyC,UAAWC,IACX,YAAhBA,EAAKC,SACNhD,KAAKqU,cAAgBtR,EAAKA,QAQhC,uBACE,IACE/C,KAAKtF,IAAI4Z,kBAAkBtU,KAAKC,eAAe6C,UAAWC,IACrC,YAAhBA,EAAKC,SACNhD,KAAKL,wBAA0BoD,EAAKA,QAGxC/C,KAAKuU,uBACN,MAAM3P,GACLC,QAAQC,IAAIF,IAKhB,kBACE,IACE5E,KAAKwU,WAAaxU,KAAKxF,GAAGgH,MAAM,CAC9B3B,SAAU,CAAC,MAEd,MAAM+E,GACLC,QAAQC,IAAIF,IAKhB,WAAW6P,EAAeC,EAAM1V,GAC9B,IACc,WAATA,EAC4E,IAAzEa,SAASC,eAAe,GAAG4U,GAA6BzQ,MAAMd,OAChE,IAAK8F,KAAK,qBAEVjJ,KAAKtF,IAAIia,gBAAgB3U,KAAKwU,WAAWC,EAAezU,KAAKC,cAAcjB,GAAM8D,UAAWC,IACvE,YAAhBA,EAAKC,QACLnD,SAASC,eAAe,0BAA0B8U,QACnD,IAAK3L,KACH,SACAlG,EAAK9D,QACL,WAEFe,KAAKuU,wBACmB,UAAhBxR,EAAKC,QACX,IAAKiG,KAAKlG,EAAK9D,WAIN,QAATD,IACqF,IAAzFa,SAASC,eAAe,mBAAmB4U,GAA6BzQ,MAAMd,OAChF,IAAK8F,KAAK,qBAEVjJ,KAAKtF,IAAIia,gBAAgB3U,KAAKwU,WAAWC,EAAezU,KAAKC,cAAcjB,GAAM8D,UAAWC,IACvE,YAAhBA,EAAKC,QACN,IAAKiG,KACH,SACAlG,EAAK9D,QACL,WAEFe,KAAK6U,uBACL7U,KAAKuU,wBACmB,UAAhBxR,EAAKC,QACX,IAAKiG,KAAKlG,EAAK9D,YAM1B,MAAM2F,GACLC,QAAQC,IAAIF,IAKhB,aAAakQ,GACb,IACE,GAAIA,EAAMxJ,OAAOD,MAAMlI,OAAS,EAAG,CACjC,MAAMgI,EAAO2J,EAAMxJ,OAAOD,MAAM,GAChCrL,KAAKwU,WAAWpU,IAAI,YAAY6E,SAASkG,IAE5C,MAAMvG,GACLC,QAAQC,IAAIF,IAKd,uBACE,IACE5E,KAAKtF,IAAI6Z,qBAAqBvU,KAAKC,eAAe6C,UAAWC,IACxC,YAAhBA,EAAKC,SACNhD,KAAKJ,yBAA2BmD,EAAKA,QAG1C,MAAM6B,GACLC,QAAQC,IAAIF,IAMhB,UAAUmQ,GACR,IACEC,OAAOC,KAAKF,GACb,MAAMnQ,GACLC,QAAQC,IAAIF,IAKhB,eAAe6P,GACb,IACE,MAAM9L,EAA2B,IAAKC,MAAM,CAC1CC,YAAa,CACXC,cAAe,kBACfC,aAAc,kBAEhBC,gBAAgB,IAGlBL,EAAyBM,KAAK,CAC5BC,MAAO,gBACPC,KAAM,wBACNnK,KAAM,UACNoK,kBAAkB,EAClBC,kBAAmB,MACnBC,iBAAkB,KAClBC,gBAAgB,EAChB2L,mBAAmB,IAClB1L,KAAMC,IACHA,EAAOxF,MACTjE,KAAKtF,IAAIya,uBAAuBV,EAAezU,KAAKC,eAAe6C,UAAWC,IACzD,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,SACvC2F,EAAyBM,KACvB,WACAlG,EAAK9D,QACL,WAEFe,KAAKuU,uBACLvU,KAAK6U,0BAILpL,EAAOE,UAAY,IAAKC,cAAcC,QAEtClB,EAAyBM,KACvB,YACA,wBACA,WAIP,MAAMrE,GACLC,QAAQC,IAAIF,IAMV,gBAAgB6P,G,mDACpB,IACEzU,KAAKyU,eAAiBA,EACvB,MAAM7P,GACLC,QAAQC,IAAIF,Q,6CAh/EHrK,GAAwB,4F,uBAAxBA,EAAwB,6D,MAAA,K,irgBDlBrC,gBACI,iBACI,eACI,cAA2G,wBACxG,OACP,OACA,qBAGA,qBAGA,qBAGA,qBAIA,sBAGA,sBAGA,sBAGA,sBAGA,sBAGA,sBAGA,sBAGA,sBAGJ,OACA,cACA,cACA,iBAEI,iBACI,iBACI,qBAGJ,OACA,iBACI,sBAGJ,OACA,mBAA0E,mCAAY,EAAA6a,kBAClF,cAAI,yBAAa,OACjB,kBACI,kBACI,kBACI,oBAAsC,aAAG,8BAAoB,mBAC9C,aAAC,OAAO,OAAI,OAC3B,qBAAiG,kCAAU,EAAAhS,SAAA,mBACnH,qBAAyD,sCAA0B,OACnF,2BAIF,OACU,wBAWJ,OACJ,OACA,kBACI,kBACI,oBAAsC,aAAG,6BAAmB,mBAC7C,aAAC,OAAO,OAAI,OAC3B,qBAAiG,kCAAU,EAAAiS,QAAA,mBACnH,qBAAgD,uCAEhD,OACA,2BAGF,OACU,wBAWJ,OACJ,OACA,kBACI,kBACI,oBAAsC,aAAG,iCAAuB,mBACjD,aAAC,OAAO,OAAI,OAC3B,qBACN,qBAAgD,2CAEhD,OACF,2BAGF,OACU,wBAWJ,OACJ,OACJ,OACA,kBACI,kBACI,kBACI,oBAAsC,aAAG,iCAAuB,mBACjD,aAAC,OAAO,OAAI,OAC3B,qBACN,qBAAgD,2CAEhD,OACF,2BAGF,OACU,wBAWJ,OACJ,OACA,kBACI,kBACI,oBAAsC,aAAG,+BAAqB,mBAC/C,aAAC,OAAO,OAAI,OAC3B,iBACI,oBACA,wBASJ,OACJ,OACJ,OACA,kBACI,kBACI,oBAAsC,aAAG,qBAAW,mBAA6B,aAAC,OAAO,OAAI,OAC7F,iBACI,oBACA,wBASJ,OACJ,OACJ,OACJ,OACA,cAAI,4BAAe,OACnB,mBACI,eAAI,gCAAmB,OACvB,qBAAsC,cAAG,4BAAiB,oBAA6B,cAAC,OAAO,OAAI,OACnG,kBACI,qBACA,yBAaJ,OACA,qBAAsC,cAAG,+BAAoB,oBAAoC,OAAI,OACrG,kBACI,qBACA,yBAaJ,OACA,qBAAsC,cAAG,wBAAa,oBAA6B,cAAC,OAAO,OAAI,OAC/F,kBACI,qBACA,yBAaJ,OACA,eACJ,OAEA,qBAAuC,iCAAU,EAAAC,sBAAA,gBAAjD,OAAoF,sCAAwB,eAAI,eAEhH,eAAI,gCAAmB,OACvB,mBACI,qBAAsC,cAAG,4BAAiB,oBAAoC,OAAI,OAClG,kBACI,qBACA,0BAaJ,OACA,qBAAsC,cAAG,+BAAoB,oBAAoC,OAAI,OACrG,kBACI,qBACA,0BAaJ,OACA,qBAAsC,cAAG,wBAAa,oBAA6B,cAAC,OAAO,OAAI,OAC/F,kBACI,qBACA,0BAaJ,OACJ,OACA,mBACI,mBACI,qBAAmE,4DACvE,OAEA,0BAGA,0BASA,0BAYJ,OAEA,mBACI,mBACI,sBAAqF,wDAAS,EAAAC,OAAA,MACxG,UACA,OACM,OACJ,OACJ,OACJ,OAIA,qBAEI,0BA6EA,kBACI,uBAGJ,OACA,kBACI,wBAGJ,OACA,8BAgRJ,OAIA,mBACI,mBACI,wBAEA,2BAiCN,2BAyGM,OACA,6BACJ,OAIA,mBAEI,2BAkCA,4BA0GA,wBACJ,OAIA,mBACI,mBACI,2BAkCA,2BAoCJ,OACJ,OAIA,mBAEI,0BAoDA,kBACI,uBAGJ,OACA,kBACI,wBAGJ,OACA,6BAmIJ,OAIA,mBAEI,2BA+BA,4BA+EA,wBAEJ,OAIA,mBAOA,mBACI,wBACA,2BAkCA,4BA+EA,6BACJ,OAIA,mBAEI,0BA0CA,kBACI,uBAGJ,OACA,kBACI,wBAGJ,OACA,6BAiIJ,OAIA,mBAEI,2BA4BA,2BAqCA,6BACJ,OAIA,mBACI,mBACI,wBAEA,2BAgCA,2BAoFJ,OACA,6BACJ,OAGA,mBACI,mBACI,wBAEA,2BAkCA,4BAoGJ,OACA,6BACJ,OAGJ,OACJ,OAEA,mBACI,mBACI,mBACI,mBACI,kBAAwB,4BAAe,OAC3C,OACA,mBACI,mBACI,mBACI,kBACI,mBACI,qBACI,qBACI,eACI,eAAI,6BAAgB,OACpB,eAAI,mBAAM,OACd,OACJ,OACA,kBACI,eACI,eAAK,qBAAgF,kCAAU,EAAAC,aAAA,MAA1F,OAAkI,OACvI,eACI,sBAAkD,gCAAS,EAAAC,WAAA,iBAA0B,yBAAyB,aAClI,iBAAoC,qBACtC,OACkB,OACJ,OACJ,OACJ,OACJ,OACJ,OACJ,OACJ,OACA,mBACI,sBAAmH,kBAAK,OAC5H,OACJ,OACJ,OACJ,OACJ,O,MAnjEyB,qCAGA,qCAGA,qCAGA,qCAIA,qCAGA,qCAGA,qCAGA,qCAGA,qCAGA,qCAGA,qCAGA,qCAUiB,gCAKC,sCAIO,8CASJ,2CAKjB,sDAqBiB,sCAIjB,qDAqBiB,0CAIjB,yDAuBiB,0CAIjB,yDAmBI,kDAiBA,iDAcG,6EAKX,mDAiBA,wDAiBA,kDAoBW,6EAIX,kDAiBA,wDAiBA,kDAoBJ,8CAG4C,gCAS5C,sDAgB6C,qDACxD,oCAWgB,+BA8EgB,gCAKC,sCAImF,+BAsRjE,+BAEM,kCAiCxD,iCA0GmC,iCAOqB,gCAkClD,qCA0G0B,oCAO4B,wDAkCA,yDA2CzC,gCAqDgB,gCAKC,sCAI8E,gCAyI1D,qCA+BlD,sCA+EwB,iCAcgB,sCACoB,+BAkC5D,gCA+EiB,2CAOJ,mCA2CgB,gCAKC,sCAIkE,mCAuI9C,yCA4BlD,yCAqCoC,sCAOY,+BAEM,yCAgClD,yCAqF+B,0CAMa,+BAEM,oCAkClD,oCAqGkC,+C,+LCz/DpD,G,wDCPK,oBACE,QACF,Q,yBAF0E,oBACxE,8B,wCAgGM,eACE,4GACA,eAAmC,QAAwB,O,wBAAxB,wC,wCACrC,eACE,4GACA,eAAmC,QAAwB,O,wBAAxB,wC,wCAjD/C,gBACE,aAKE,aACE,iBACE,iBACA,iBACE,sBACE,8FADF,OAEA,mBAA0D,gDAAS,WAAnE,OACF,OACF,OACF,OACA,aAAK,SAAgB,OACrB,cAAK,SAAuB,OAC5B,cAAK,SAAqB,OAC1B,cAAK,SAAgB,OACrB,cAAK,SAAc,OACnB,cACE,kBACE,gBAAqD,mEACwC,gBAC3D,OAClC,kBAEE,gBACkD,gBACZ,sBAAY,OAElD,gBACyB,kFAA2B,kBAAgB,gBAC1C,4BAAkB,OAE5C,gBACyB,kFAA2B,aAAW,gBAC9B,iCAAuB,OAExD,gBACyB,kFAA2B,eAAa,gBAC/B,mCAAyB,OAE3D,uBAGA,uBAGF,OACF,OACF,OACF,OArDF,O,qCAQa,kCAQJ,6BACA,sCACA,kCACA,8BACA,2BASG,2DAeC,kDAGA,gD,0BAWrB,cACE,gBAAgC,QAA2B,OAC7D,Q,oBADkC,uC,0BAe5B,eACE,iBAAQ,QAAgB,OAC1B,Q,oBADU,4B,0BAKV,eACE,iBAAQ,QAAgB,OAC1B,Q,oBADU,4B,0BAWJ,iBAGE,QACF,Q,8BADE,iC,0BAJJ,cACE,wBAKF,Q,kCAJI,+J,0BAYF,iBAGE,QACF,Q,8BADE,iC,0BAJJ,cACE,wBAKF,Q,kCAJI,mM,0BAoCR,eACE,iBAAQ,QAAgB,OAC1B,Q,oBADU,4B,0BAKV,eACE,iBAAQ,QAAgB,OAC1B,Q,oBADU,4B,0BAYJ,oBAEE,QACF,Q,yBAHsE,wBACpE,oBACA,8B,0BAIF,iBAGE,QACF,Q,8BADE,iC,0BAJJ,cACE,wBAKF,Q,kCAJI,4M,0BAmCR,eACE,iBAAQ,QAAgB,OAC1B,Q,oBADU,4B,0BAKV,eACE,iBAAQ,QAAgB,OAC1B,Q,oBADU,4B,wCAkBE,gBACE,aACE,aAAK,QAA2B,OAChC,aACE,oBAAgD,wFACxB,eACxB,OACF,OACF,OAEF,O,4BARS,qCC9R7B,MAAM5a,GAAiB,CACnB,CACE6a,KAAM,GACNC,UAAY,EACZC,YAAY,CAAC,KACbC,SAAU,CACR,CACEH,KAAK,mBACLC,UAAU,IAEZ,CACED,KAAK,+BACLC,UAAU,IAEZ,CACED,KAAK,gBACLC,UCTH,M,MAAMG,EAwBX,YAAmBtb,EACTE,EACDC,EACCC,EACAC,EACAkb,EACA/a,GANS,KAAAR,KACT,KAAAE,MACD,KAAAC,SACC,KAAAC,SACA,KAAAC,QACA,KAAAkb,kBACA,KAAA/a,OA5BV,KAAA6H,aAAe,IAAI3H,MACnB,KAAA8a,sBAAwB,GAOxB,KAAAC,kBAA4B,EAC5B,KAAAC,kBAA4B,GAI5B,KAAAlT,OAAS,SACT,KAAAmT,kBAAoB,mBACpB,KAAAC,aAAe,WAGf,KAAAC,mBAAqB,GACrB,KAAAC,cAAe,EAmLf,KAAAC,uBAAyB,CACvB,SAAY,CACV,CAAEvX,KAAM,WAAYC,QAAS,wBAC7B,CAAED,KAAM,YAAaC,QAAS,6BAA6Be,KAAKiW,qCAChE,CAAEjX,KAAM,YAAaC,QAAS,uCAAuCe,KAAKkW,gCAC1E,CAAElX,KAAM,UAAWC,QAAS,2GAE9B,qBAAwB,CACtB,CAAED,KAAM,WAAYC,QAAS,gCAC7B,CAAED,KAAM,UAAWC,QAAS,4BA+BlC,KAAAuX,mBAAqB,CACnB,aAAgB,CACd,CAAExX,KAAM,WAAYC,QAAS,iCAjN/B,WACEe,KAAKyW,eACLzW,KAAK0W,sBACL1W,KAAK2W,yBACL3W,KAAKK,YACLL,KAAK4W,kBACL5W,KAAK6W,eAAiB7W,KAAKhF,KAAK8b,mBAIlC,iBACE,KACyD,IAApD9W,KAAK6W,eAAeE,OAAO,oBAC3BlX,SAASC,eAAe,4BAAiDkX,UAAUC,IAAI,YAEvFpX,SAASC,eAAe,4BAAiDkX,UAAUE,OAAO,YAE7F,MAAOC,GACPtS,QAAQC,IAAIqS,IAIhB,sBACE,IACEnX,KAAKtF,IAAI0c,gBAAgBpX,KAAKgD,QAAQF,UAAUC,IACxB,YAAhBA,EAAKC,SACiB,IAArBD,EAAKA,KAAKI,OACQ,WAAhBnD,KAAKgD,QACLnD,SAASC,eAAe,kBAAsCmE,MAAQ,WACtEpE,SAASC,eAAe,eAA8B8U,SAC/B,aAAhB5U,KAAKgD,QACbhD,KAAKtF,IAAI2c,gBAAgBvU,UAAWC,IACf,YAAhBA,EAAKC,SACW,IAAdD,EAAKA,KACN/C,KAAKpF,OAAO4J,cAAc,4CAE1BxE,KAAKgW,sBAAwB,gBAC7BhW,KAAK6C,aAAe,GACpB7C,KAAKqW,mBAAqB,QAMlCrW,KAAK6C,aAAeE,EAAKA,KACzB/C,KAAKqW,mBAAqBtT,EAAKA,KAC/B/C,KAAKgW,sBAAwB,OAIrC,MAAOpR,GACPC,QAAQC,IAAIF,EAAI3F,UAIpB,yBACE,IACEe,KAAKsX,gBAAkBtX,KAAKxF,GAAGgH,MAAM,CACnC+V,SAAU,IAAI,IAAY,KAAM,IAAWpV,QAAQ,CACjD,IAAWC,UAAU,GACrB,IAAWC,UAAU,IACrB,IAAWX,SACX,IAAWY,QAAQ,oEAErBkV,qBAAsB,IAAI,IAAY,KAAM,IAAWrV,QAAQ,CAC7D,IAAWT,SACX,KAAgB+V,QAAQ,CAAEC,UAAW,kBAI3C,MAAO9S,GACLC,QAAQC,IAAIF,IAIhB,SAASX,EAAejF,GACtB,IACEgB,KAAK2X,WAAa1T,EACN,WAATjF,GACDgB,KAAK4X,WAAW,UACiB,IAA9B5X,KAAKqU,cAAclR,SACpBmB,WAAW,KACVzE,SAASC,eAAe,kBAAiC8U,SACxD,GACF,IAAK3L,KAAK,0BAEK,gBAATjK,EACRgB,KAAK4X,WAAW,eACC,aAAT5Y,GACRgB,KAAK6X,iBAEP,MAAOjT,GACPC,QAAQC,IAAIF,EAAI3F,UAKpB,sBACE,IACMe,KAAKsX,gBAAgBvT,OACvB/D,KAAKtF,IAAIod,YAAY9X,KAAKsX,gBAAgBrT,MAAOjE,KAAK2X,YAAY7U,UAAUC,IACtD,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpChD,KAAK+X,aAAc,EACnB/X,KAAKkE,WAAanB,EAAK9D,QACvBe,KAAKgY,cAAe,EACpB1T,WAAW,KACTtE,KAAKrF,OAAO4J,IAAI,IAAMvE,KAAKpF,OAAO4J,cAAc,yCAChDxE,KAAKyE,qBACJ5E,SAASC,eAAe,sBAAqC8U,SAC7D,MACsB,UAAhB7R,EAAKC,QAAsC,MAAhBD,EAAKC,SACzChD,KAAKgY,cAAe,EACpBhY,KAAK+X,aAAc,EACnB/X,KAAKiY,WAAalV,EAAK9D,QACvBqF,WAAW,KACTtE,KAAKyE,qBACJ5E,SAASC,eAAe,sBAAqC8U,SAC9D,QAIR,MAAOhQ,GACPC,QAAQC,IAAIF,EAAI3F,UAKpB,qBACGY,SAASC,eAAe,gBAAqCmE,MAAQ,GACrEpE,SAASC,eAAe,kBAAuCmE,MAAQ,SACxEjE,KAAKgD,OAAS,SACdhD,KAAKoW,aAAe,WACpBpW,KAAKgW,sBAAwB,GAC7BhW,KAAKsW,cAAe,EACpBtW,KAAK0W,sBAIP,sBACE,IAEE,IAAIiB,EAAc9X,SAASC,eAAe,gBAAqCmE,MAC3EjB,EAAUnD,SAASC,eAAe,kBAAuCmE,MAErD,GAArB0T,EAAWxU,SACZH,EAAS,GACThD,KAAKkY,sBAAsBP,IAEf,WAAX3U,GACDhD,KAAKgD,OAAS,SACdhD,KAAKoW,aAAe,WACpBpW,KAAKmW,kBAAoB,mBACzBnW,KAAK0W,uBACc,aAAX1T,IACRhD,KAAKgD,OAAS,WACdhD,KAAKoW,aAAe,SACpBpW,KAAKmW,kBAAoB,qBACzBnW,KAAK0W,uBAGR,MAAM9R,GACLC,QAAQC,IAAIF,IAoBhB,YACE,IACE5E,KAAKtF,IAAI2F,YAAYyC,UAAWC,IACX,YAAhBA,EAAKC,SACNhD,KAAKqU,cAAgBtR,EAAKA,QAG9B,MAAM6B,GACNC,QAAQC,IAAIF,IAKlB,eACE,IACE5E,KAAKmY,aAAenY,KAAKxF,GAAGgH,MAAM,CAChC4W,cAAe,IAAI,IAAU,CAC3BC,OAAQ,IAAI,IAAY,IACxBC,aAAc,IAAI,IAAY,GAAG,IAAW5W,cAGhD,MAAMkD,GACNC,QAAQC,IAAIF,IAWhB,WAAWhC,EAAK5D,GAChB,IACc,WAATA,IACDgB,KAAKmY,aAAa/X,IAAI,wBAAwB6E,SAASjF,KAAK2X,YAC5D3X,KAAKmY,aAAa/X,IAAI,8BAA8B6E,SAASrC,IAE/D,MAAMgC,GACNC,QAAQC,IAAIF,IAKd,WACE,IACI5E,KAAKtF,IAAI6d,SAASvY,KAAKmY,aAAalU,MAAMjE,KAAK2X,YAAY7U,UAAWC,IACjD,YAAhBA,EAAKC,QACNhD,KAAK+X,aAAc,EACnB/X,KAAKkE,WAAanB,EAAK9D,QACvBe,KAAKgY,cAAe,EACpB1T,WAAW,KACTtE,KAAKrF,OAAO4J,IAAI,IAAMvE,KAAKpF,OAAO4J,cAAc,yCAC/C3E,SAASC,eAAe,kBAAiC8U,QAC1D5U,KAAKyE,sBACJ,MACqB,UAAhB1B,EAAKC,SACbhD,KAAKgY,cAAe,EACpBhY,KAAK+X,aAAc,EACnB/X,KAAKiY,WAAalV,EAAK9D,QACvBqF,WAAW,KACRzE,SAASC,eAAe,kBAAiC8U,QAC1D5U,KAAKyE,sBACL,QAGT,MAAMG,GACLC,QAAQC,IAAIF,IAKhB,qBACE5E,KAAK+X,aAAc,EACnB/X,KAAKgY,cAAe,EACpBhY,KAAKkE,WAAa,GAClBlE,KAAKiY,WAAa,GAGpB,WAAWjZ,GACT,IACc,WAATA,EACDgB,KAAKmY,aAAajQ,QACD,gBAATlJ,GACRgB,KAAKsX,gBAAgBpP,QAExB,MAAMtD,GACLC,QAAQC,IAAIF,IAKhB,WAAWhC,GACT,IACE,MAAM+F,EAA2B,IAAKC,MAAM,CAC1CC,YAAa,CACXC,cAAe,kBACfC,aAAc,kBAEhBC,gBAAgB,IAGlBL,EAAyBM,KAAK,CAC5BC,MAAO,gBACPC,KAAM,kCACNnK,KAAM,UACNoK,kBAAkB,EAClBC,kBAAmB,MACnBC,iBAAkB,KAClBC,gBAAgB,EAChB2L,mBAAmB,IAClB1L,KAAMC,IACHA,EAAOxF,MACTjE,KAAKtF,IAAI8d,WAAWxY,KAAK2X,WAAW/U,GAAME,UAAWC,IAChC,YAAhBA,EAAKC,SACV2F,EAAyBM,KACvB,WACAlG,EAAK9D,QACL,WAEFqF,WAAW,KACRzE,SAASC,eAAe,0BAA0C8U,SACnE,MAIFnL,EAAOE,UAAY,IAAKC,cAAcC,QAEtClB,EAAyBM,KACvB,YACA,6BACA,WAIP,MAAMrE,GACLC,QAAQC,IAAIF,IAKhB,iBACE,IACE5E,KAAKtF,IAAImd,eAAe7X,KAAK2X,YAAY7U,UAAWC,IAC/B,YAAhBA,EAAKC,SACiC,IAApCD,EAAKA,KAAK0V,eAAetV,QAC1BmB,WAAW,KACRzE,SAASC,eAAe,0BAA0C8U,SACnE,GACF,IAAK3L,KAAK,wBAEVjJ,KAAK0Y,sBAAwB3V,EAAKA,KAAK0V,kBAI7C,MAAM7T,GACNC,QAAQC,IAAIF,IAKhB,eACE,IACG/E,SAASC,eAAe,gBAAqCmE,MAAQ,GACtE,MAAMW,GACNC,QAAQC,IAAIF,IAKhB,sBAAsB+S,GACpB,IACE3X,KAAKtF,IAAI2b,mBAAmBsB,GAAY7U,UAAWC,IAC9B,YAAhBA,EAAKC,SACNhD,KAAK6C,aAAe,GACpB7C,KAAK6C,aAAaI,KAAKF,EAAKA,SAGhC,MAAM6B,GACNC,QAAQC,IAAIF,IAIhB,0BAA0BX,GACxB,MAAM0E,EAA2B,IAAKC,MAAM,CAC1CC,YAAa,CACXC,cAAe,kBACfC,aAAc,kBAEhBC,gBAAgB,IAElBL,EAAyBM,KAAK,CAC5BC,MAAO,gBACPC,KAAM,eAAenJ,KAAKoW,mCAC1BpX,KAAM,UACNoK,kBAAkB,EAClBC,kBAAmB,MACnBC,iBAAkB,KAClBC,gBAAgB,EAChB2L,mBAAmB,IAClB1L,KAAMC,IACHA,EAAOxF,MACTjE,KAAKtF,IAAIie,qBAAqB1U,EAAMjE,KAAKoW,cAActT,UAAWC,IAC7C,YAAhBA,EAAKC,SACV2F,EAAyBM,KACvB,mBACAlG,EAAK9D,QACL,WAEFe,KAAK4Y,yBAILnP,EAAOE,UAAY,IAAKC,cAAcC,QAEtClB,EAAyBM,KACvB,YACA,iCACA,WAMR,aAAa6L,EAAM6C,GACjB,GAAI7C,EAAMxJ,OAAOD,OAASyJ,EAAMxJ,OAAOD,MAAM,GAAI,CAC/C,IAAIE,EAAS,IAAIC,WAajB,GAXAD,EAAOM,cAAciJ,EAAMxJ,OAAOD,MAAM,IAExCE,EAAOG,OAAUoJ,IACf,IAAI,IAAI5R,EAAE,EAAGA,EAAElD,KAAK6C,aAAaM,OAAQD,IACvC,GAAGlD,KAAK6C,aAAaK,GAAGmB,KAAOsT,EAAW,CACxC3X,KAAK6Y,IAAM7Y,KAAK6C,aAAaK,GAAG4V,OAChC9Y,KAAK6C,aAAaK,GAAG4V,OAAShE,EAAMxJ,OAAO7B,OAC3C,QAIFqL,EAAMxJ,OAAOD,MAAMlI,OAAS,EAAG,CACjC,MAAMgI,EAAO2J,EAAMxJ,OAAOD,MAAM,GAChCrL,KAAK+Y,WAAW3Y,IAAI,UAAU6E,SAASkG,GAEvC,MAAMxC,EAA2B,IAAKC,MAAM,CAC1CC,YAAa,CACXC,cAAe,kBACfC,aAAc,kBAEhBC,gBAAgB,IAGlBL,EAAyBM,KAAK,CAC5BC,MAAO,gBACPC,KAAM,0CACNnK,KAAM,UACNoK,kBAAkB,EAClBC,kBAAmB,MACnBC,iBAAkB,KAClBC,gBAAgB,EAChB2L,mBAAmB,IAClB1L,KAAMC,IACP,GAAIA,EAAOxF,MACXjE,KAAK+V,gBAAgBiD,mBAAmBhZ,KAAK+Y,WAAW,WAAWpB,GAAY7U,UAAWC,IACrE,YAAhBA,EAAKC,QACN2F,EAAyBM,KACvB,YACAlG,EAAK9D,QACL,kBAIC,GACLwK,EAAOE,UAAY,IAAKC,cAAcC,OACtC,CACAlB,EAAyBM,KACvB,YACA,2BACA,SAEF,IAAI,IAAI/F,EAAI,EAAGA,EAAElD,KAAK6C,aAAaM,OAAOD,IACxC,GAAGlD,KAAK6C,aAAaK,GAAGmB,KAAOsT,EAAW,CACxC3X,KAAK6C,aAAaK,GAAG4V,OAAS9Y,KAAK6Y,IACnC,YAWd,kBACE,IACE7Y,KAAK+Y,WAAa/Y,KAAKxF,GAAGgH,MAAM,CAC9BsX,OAAQ,CAAC,MAEX,MAAO3B,GACPtS,QAAQC,IAAIqS,IAKhB,iBACE,IAEInX,KAAKsW,aADyE,IAA5EzW,SAASC,eAAe,gBAAoCmE,MAAMd,OAKtE,MAAOgU,GACPtS,QAAQC,IAAIqS,K,6CA/gBHrB,GAAqB,yE,uBAArBA,EAAqB,sgIFflC,gBACE,gBACE,eAAwB,wBAAa,OACvC,OACA,gBACE,gBACE,gBACE,gBACE,kBAAsC,YAAG,SAAuB,OAAI,OACpE,oBAAwE,iCAAU,EAAAmD,oBAChF,oBAA4E,2BAAe,OAC3F,4BAGF,OACF,OACF,OACA,iBACE,iBACE,mBAAsC,aAAG,mBAAO,OAAI,OACpD,qBAA0E,iCAAU,EAAAC,kBAElF,qBAAyE,kBAAM,OAC/E,qBAAkE,oBAAQ,OAC5E,OACF,OACF,OAEA,iBACE,kBACA,qBAAiD,gCAAS,EAAAN,yBAAuB,gBAA4B,uBAAa,OAC1H,qBAAgC,gCAAS,EAAAO,wBAAsB,gBAAoC,sBAAY,OACjH,OACF,OAGA,kBACE,kBACI,gBAAuJ,gBAAiC,6BAAmB,OAC/M,OACF,OACA,OAOF,OAEA,kBACE,iBACI,oBACE,oBACE,cACE,cAAK,qBAAQ,OACb,cAAI,yBAAa,OACjB,cAAI,sBAAU,OACd,cAAI,uBAAW,OACf,cAAI,wBAAY,OAChB,cAAI,eAAG,OACP,cAAI,kBAAM,OACZ,OACF,OACA,4BAsDF,OAEJ,OACF,OACA,yBAGF,OAGA,kBACE,kBACE,kBAGE,kBACE,iBAAwB,wBAAY,OAEtC,OACA,kBACE,uBAGF,OAEA,kBACE,uBAGF,OAEA,kBACE,mBAAgD,mCAAY,EAAAC,yBAC1D,iBACE,mBAAsC,aAAG,yBAAe,mBAA6B,aAAC,OAAO,OAAI,OAEjG,oBACA,yBAOF,OACA,iBACE,oBAAsC,aAAG,iCAAuB,mBACnC,aAAC,OAAO,OAAI,OACzC,oBAEA,yBAOF,OACA,iBAEE,qBACoC,kBAAM,OAC1C,qBACuB,iBAAK,OAE9B,OACF,OACF,OAOF,OACF,OACF,OAEA,kBACE,kBACE,kBAGE,kBACE,iBAAwB,6BAAiB,OAE3C,OACA,kBACE,uBAGF,OAEA,mBACE,wBAGF,OAEA,mBACE,oBAAkE,mCAAY,EAAAb,cAC5E,kBACE,oBAAsC,cAAG,iCAAsB,oBAClC,cAAC,OAAO,OAAI,OACzC,sBACE,kCAAU,EAAAc,WAAA,eAA+B,aACzC,sBAA6D,wCAA2B,OACxF,6BAIF,OACA,0BAOF,OACA,kBAEE,sBACiC,mBAAM,OACvC,sBACuB,kBAAK,OAE9B,OACF,OACF,OAMF,OACF,OACF,OAEA,mBACE,mBACE,mBAGE,mBACE,kBAAwB,gCAAmB,OAE7C,OACA,mBACE,wBAGF,OAEA,mBACE,wBAGF,OAEA,mBACE,kBAEE,mBACE,mBACE,kBACE,kBACE,qBACE,qBACE,eACE,eAAI,2BAAc,OAClB,eAAK,qBAAO,OACd,OACF,OACA,4BAWF,OACF,OACF,OACF,OACF,OAEF,OACA,sBACuB,kBAAK,OAC9B,OAMF,OACF,OACF,Q,MAxTmD,mCAGT,6CAU9B,wCAiBC,2EA0BI,wCA0DV,uDAgB+B,oCAMC,mCAMb,4CAKT,0DAaA,sEAWH,kDA2BwB,qCAMC,mCAMb,8DAOkB,yCAK3B,0DAWH,+CA0BwB,qCAMC,mCAmBZ,mD,y0CErRpB,IDWC,CACE3D,KAAK,GACL4D,WAAW,gBACXC,UAAU,WAcX,a,MAAMC,G,8BAAAA,I,oDAAAA,IAA2B,SAN7B,CACP,IACA,IAAaC,SAAS5e,Q,GAInB,G,iBEdA,a,MAAM6e,G,8BAAAA,I,oDAAAA,IAAoB,UAHrB,CAAC,IAAgB,KAAU,SAT5B,CACP,IACA,IACA,GACA,IACA,IACA,IACA,S,GAKG","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-employee-wizard',\n  templateUrl: './employee-wizard.component.html',\n  styleUrls: ['./employee-wizard.component.scss']\n})\nexport class EmployeeWizardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<router-outlet></router-outlet>\n","<div class=\"card card-body\">\n    <ul class=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\" #target>\n        <li class=\"nav-item\">\n            <a class=\"nav-link active\" data-toggle=\"tab\" href=\"#basicDetails\" role=\"tab\" aria-controls=\"basic details\">Basic\n        Details</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"snapShotParam\">\n            <a class=\"nav-link\" data-toggle=\"tab\" href=\"#bio\" role=\"tab\" (click)=\"bioListData()\" aria-controls=\"bio\">Employee Bio</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"snapShotParam\">\n            <a class=\"nav-link addesstab\" data-toggle=\"tab\" (click)=\"showAddress()\" href=\"#address\" role=\"tab\" aria-controls=\"address\">Address</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"snapShotParam\">\n            <a class=\"nav-link\" data-toggle=\"tab\" (click)=\"showEducationDetails()\" href=\"#educationDetails\" role=\"tab\" aria-controls=\"educationDetails\">Education Details</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"snapShotParam\">\n            <a class=\"nav-link\" data-toggle=\"tab\" (click)=\"uploadedDocumentList()\" href=\"#uploadDocument\" role=\"tab\" aria-controls=\"uploadDocument\">Upload\n        Document</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"snapShotParam\">\n            <a class=\"nav-link\" data-toggle=\"tab\" (click)=\"bankDetails()\" href=\"#bankDetails\" role=\"tab\" aria-controls=\"bankDetails\">Bank Details</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"snapShotParam\">\n            <a class=\"nav-link\" data-toggle=\"tab\" href=\"#workExperience\" (click)=\"showWorkList()\" role=\"tab\" aria-controls=\"workExperience\">Work Experience</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"snapShotParam\">\n            <a class=\"nav-link\" data-toggle=\"tab\" href=\"#skillCat\" role=\"tab\" aria-controls=\"skillCat\">Skill Category</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"snapShotParam\">\n            <a class=\"nav-link\" data-toggle=\"tab\" href=\"#addFamily\" role=\"tab\" (click)=\"getFamilyDetails()\" aria-controls=\"addFamily\">Family Details</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"snapShotParam\">\n            <a class=\"nav-link\" data-toggle=\"tab\" href=\"#profilePayroll\" role=\"tab\" (click)=\"payrollListData()\" aria-controls=\"profilePayroll\">Payroll Settings</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"snapShotParam\">\n            <a class=\"nav-link\" data-toggle=\"tab\" href=\"#languageSkill\" role=\"tab\" (click)=\"listSkillLanguage()\" aria-controls=\"languageSkill\">Language Skills</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"snapShotParam\">\n            <a class=\"nav-link\" data-toggle=\"tab\" href=\"#leaveSetting\" role=\"tab\" (click)=\"employeeLeaveDataList()\" aria-controls=\"leaveSetting\">Leave Settings</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"snapShotParam\">\n            <a class=\"nav-link\" data-toggle=\"tab\" href=\"#identityproofs\" role=\"tab\" (click)=\"getEmployeeIdProofsList()\" aria-controls=\"identityproofs\">Identity Proofs</a>\n        </li>\n    </ul>\n    <br />\n    <br />\n    <div class=\"tab-content\">\n        <!-- basicDetails are start here -->\n        <div class=\"tab-pane active\" id=\"basicDetails\" role=\"tabpanel\">\n            <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                    <strong>{{ errMsg }}</strong>\n                </p>\n            </div>\n            <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                    <strong>{{ successMsg }}</strong>\n                </p>\n            </div>\n            <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"employeeBasicForm\" (ngSubmit)=\"employeeForm()\" novalidate>\n                <h4>Basic Details</h4>\n                <div class=\"form-row\">\n                    <div class=\"form-group col-md-4\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-6 control-label\"><b>Company Name :&nbsp;<span\n                    style=\"color: darkred\">*</span></b></label>\n                            <select class=\"dropdown dropdown-toggle form-control\" Name=\"Company\" formControlName=\"companyId\" (change)=\"onSelect($event.target.value)\">\n                    <option class=\"dropdown-item\" value=\"\" selected disabled>-----Select a Company-----</option>\n                    <option class=\"dropdown-item\" *ngFor=\"let company of companyListData\" selected=\"{{ company.name }}\"\n                        value=\"{{ company._id }}\">\n                        {{ company.name }}\n                    </option>\n                  </select>\n                            <div *ngFor=\"let validation of validationMessage.companyId\">\n                                <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                        employeeBasicForm\n                        .get('companyId')\n                        .hasError(validation.type) &&\n                        (employeeBasicForm.get('companyId').dirty ||\n                        employeeBasicForm.get('companyId').touched)\n                        \" style=\"color: red;margin-left: 14px;\">\n                                    {{ validation.message }}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-md-4\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-6 control-label\"><b>Branch Name :&nbsp;<span\n                    style=\"color: darkred\">*</span></b></label>\n                            <select class=\"dropdown dropdown-toggle form-control\" Name=\"branchId\" formControlName=\"branchId\" (change)=\"onClick($event.target.value)\">\n                    <option class=\"dropdown-item\" value='' disabled>-----\n                        Select A Branch-----\n                    </option>\n                    <option class=\"dropdown-item\" *ngFor=\"let branch of branchList\" value=\"{{ branch._id }}\">\n                        {{ branch.name }}\n                    </option>\n                  </select>\n                            <div *ngFor=\"let validation of validationMessage.branchId\">\n                                <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                        employeeBasicForm\n                        .get('branchId')\n                        .hasError(validation.type) &&\n                        (employeeBasicForm.get('branchId').dirty ||\n                        employeeBasicForm.get('branchId').touched)\n                        \" style=\"color: red;margin-left: 14px;\">\n                                    {{ validation.message }}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-md-4\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-6 control-label\"><b>Department Name :&nbsp;<span\n                    style=\"color: darkred\">*</span></b></label>\n                            <select class=\"dropdown dropdown-toggle form-control\" Name=\"departmentId\" formControlName=\"departmentId\">\n                      <option class=\"dropdown-item\" value='' disabled>-----\n                          Select A Department-----\n                      </option>\n                    <option class=\"dropdown-item\" *ngFor=\"let department of departmentList\" value=\"{{ department._id }}\">\n                        {{ department.title }}\n                    </option>\n                  </select>\n                            <div *ngFor=\"let validation of validationMessage.departmentId\">\n                                <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                        employeeBasicForm\n                        .get('departmentId')\n                        .hasError(validation.type) &&\n                        (employeeBasicForm.get('departmentId').dirty ||\n                        employeeBasicForm.get('departmentId').touched)\n                        \" style=\"color: red;margin-left: 14px;\">\n                                    {{ validation.message }}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"form-row\">\n                    <div class=\"form-group col-md-4\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-6 control-label\"><b>JobProfile Name :&nbsp;<span\n                    style=\"color: darkred\">*</span></b></label>\n                            <select class=\"dropdown dropdown-toggle form-control\" Name=\"jobProfileId\" formControlName=\"jobProfileId\">\n                      <option class=\"dropdown-item\" value='' disabled>-----\n                          Select A JobProfile-----\n                      </option>\n                    <option class=\"dropdown-item\" *ngFor=\"let jobProfile of jobProfileList\" value=\"{{ jobProfile._id }}\">\n                        {{ jobProfile.positionName }} - {{jobProfile.payBasis}}\n                    </option>\n                  </select>\n                            <div *ngFor=\"let validation of validationMessage.jobProfileId\">\n                                <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                        employeeBasicForm\n                        .get('jobProfileId')\n                        .hasError(validation.type) &&\n                        (employeeBasicForm.get('jobProfileId').dirty ||\n                        employeeBasicForm.get('jobProfileId').touched)\n                        \" style=\"color: red;margin-left: 14px;\">\n                                    {{ validation.message }}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-md-4\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-6 control-label\"><b>Employee Name :&nbsp;<span\n                    style=\"color: darkred\">*</span></b></label>\n                            <div class=\"col-sm-offset-2\">\n                                <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Employee Name\" formControlName=\"name\" />\n                                <div *ngFor=\"let validation of validationMessage.name\">\n                                    <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                          employeeBasicForm.get('name').hasError(validation.type) &&\n                          (employeeBasicForm.get('name').dirty ||\n                          employeeBasicForm.get('name').touched)\n                          \" style=\"color: red;margin-left: 14px;\">\n                                        {{ validation.message }}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-md-4\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-6 control-label\"><b>DOB :&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                            <div class=\"col-sm-offset-2\">\n                                <input class=\"form-control\" type=\"date\" placeholder=\"Enter Employee DOB\" formControlName=\"dob\" />\n                                <div *ngFor=\"let validation of validationMessage.dob\">\n                                    <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                          employeeBasicForm.get('dob').hasError(validation.type) &&\n                          (employeeBasicForm.get('dob').dirty ||\n                          employeeBasicForm.get('dob').touched)\n                          \" style=\"color: red;margin-left: 14px;\">\n                                        {{ validation.message }}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <h4>Contact Details</h4>\n                <div class=\"form-group\" [formGroup]=\"employeeBasicForm.get('contactDetails.personal')\">\n                    <h6>Personal Details :-</h6>\n                    <label class=\"col-sm-6 control-label\"><b>Phone No. :&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" placeholder=\"Enter Phone No.\" formControlName=\"phone\" />\n                        <div *ngFor=\"let validation of validationMessage.phone\">\n                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                  employeeBasicForm\n                  .get('contactDetails.personal.phone')\n                  .hasError(validation.type) &&\n                  (employeeBasicForm.get('contactDetails.personal.phone')\n                  .dirty ||\n                  employeeBasicForm.get('contactDetails.personal.phone')\n                  .touched)\n                  \" style=\"color: red;margin-left: 14px;\">\n                                {{ validation.message }}\n                            </div>\n                        </div>\n                    </div>\n                    <label class=\"col-sm-6 control-label\"><b>Landline No. :&nbsp;<span style=\"color: darkred\"></span></b></label>\n                    <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" placeholder=\"Enter Landline No.\" formControlName=\"landLineNum\" />\n                        <div *ngFor=\"let validation of validationMessage.landLineNum\">\n                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                  employeeBasicForm\n                  .get('contactDetails.personal.landLineNum')\n                  .hasError(validation.type) &&\n                  (employeeBasicForm.get('contactDetails.personal.landLineNum')\n                  .dirty ||\n                  employeeBasicForm.get('contactDetails.personal.landLineNum')\n                  .touched)\n                  \" style=\"color: red;margin-left: 14px;\">\n                                {{ validation.message }}\n                            </div>\n                        </div>\n                    </div>\n                    <label class=\"col-sm-6 control-label\"><b>Email :&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" placeholder=\"Enter Email Id\" formControlName=\"email\" />\n                        <div *ngFor=\"let validation of validationMessage.email\">\n                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                  employeeBasicForm\n                  .get('contactDetails.personal.email')\n                  .hasError(validation.type) &&\n                  (employeeBasicForm.get('contactDetails.personal.email')\n                  .dirty ||\n                  employeeBasicForm.get('contactDetails.personal.email')\n                  .touched)\n                  \" style=\"color: red;margin-left: 14px;\">\n                                {{ validation.message }}\n                            </div>\n                        </div>\n                    </div>\n                    <br />\n                </div>\n\n                <input type=\"checkbox\" name=\"vehicle2\" (change)=\"sameAsPersonalDetails(actionBox)\"> Same as Personal Details<br><br>\n\n                <h6>Official Details :-</h6>\n                <div class=\"form-group\" [formGroup]=\"employeeBasicForm.get('contactDetails.official')\">\n                    <label class=\"col-sm-6 control-label\"><b>Phone No. :&nbsp;<span style=\"color: darkred\"></span></b></label>\n                    <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" placeholder=\"Enter Phone No.\" formControlName=\"phone\" />\n                        <div *ngFor=\"let validation of validationMessage.phone\">\n                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                    employeeBasicForm\n                    .get('contactDetails.official.phone')\n                    .hasError(validation.type) &&\n                    (employeeBasicForm.get('contactDetails.official.phone')\n                    .dirty ||\n                    employeeBasicForm.get('contactDetails.official.phone')\n                    .touched)\n                    \" style=\"color: red;margin-left: 14px;\">\n                                {{ validation.message }}\n                            </div>\n                        </div>\n                    </div>\n                    <label class=\"col-sm-6 control-label\"><b>Landline No. :&nbsp;<span style=\"color: darkred\"></span></b></label>\n                    <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" placeholder=\"Enter Landline No.\" formControlName=\"landLineNum\" />\n                        <div *ngFor=\"let validation of validationMessage.landLineNum\">\n                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                    employeeBasicForm\n                    .get('contactDetails.official.landLineNum')\n                    .hasError(validation.type) &&\n                    (employeeBasicForm.get('contactDetails.official.landLineNum')\n                    .dirty ||\n                    employeeBasicForm.get('contactDetails.official.landLineNum')\n                    .touched)\n                    \" style=\"color: red;margin-left: 14px;\">\n                                {{ validation.message }}\n                            </div>\n                        </div>\n                    </div>\n                    <label class=\"col-sm-6 control-label\"><b>Email :&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" placeholder=\"Enter Email Id\" formControlName=\"email\" />\n                        <div *ngFor=\"let validation of validationMessage.email\">\n                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                    employeeBasicForm\n                    .get('contactDetails.official.email')\n                    .hasError(validation.type) &&\n                    (employeeBasicForm.get('contactDetails.official.email')\n                    .dirty ||\n                    employeeBasicForm.get('contactDetails.official.email')\n                    .touched)\n                    \" style=\"color: red;margin-left: 14px;\">\n                                {{ validation.message }}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\" style=\"height:30px\">\n                    <div class=\"form-group col-sm-offset-2 col-md-5\">\n                        <input type=\"checkbox\" formControlName=\"officialEmailAsLoginEmail\">&nbsp; Do You Want Official Email as Login Email\n                    </div>\n                    <!-- <div class=\"form-group col-sm-offset-2 col-md-5\"> -->\n                    <div *ngIf=\"basicDetail === 'Submit'\">\n                        <input type=\"checkbox\" (click)=\"oncheck()\" style=\"margin-top:5px\">&nbsp; Assign TL/Manager\n                    </div>\n                    <div class=\"form-group col-sm-offset-2 col-md-2\" *ngIf=\"checkbox\">\n                        <select class=\"dropdown dropdown-toggle form-control\" Name=\"Company\" formControlName=\"tlId\" (change)=\"onSelect($event.target.value)\">\n            <option class=\"dropdown-item\" ng-selected=\"true\" value=\"\" selected disabled>Select TL/Manager</option>\n            <option class=\"dropdown-item\" *ngFor=\"let tl of companyTlList\" selected=\"{{ tl.name }}\"\n                value=\"{{ tl._id }}\">\n                {{ tl.name }}\n            </option>\n          </select>\n                    </div>\n                    <div *ngFor=\"let validation of validationMessage.companyId\">\n                        <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                employeeBasicForm\n                .get('companyId')\n                .hasError(validation.type) &&\n                (employeeBasicForm.get('companyId').dirty ||\n                employeeBasicForm.get('companyId').touched)\n                \" style=\"color: red;margin-left: 14px;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                    <!-- </div> -->\n                </div>\n\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"employeeBasicForm.invalid\" (click)=\"scroll(target)\">\n              {{ basicDetail }}\n              </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n        <!-- basicDetails end here -->\n\n        <!-- Bio details start  -->\n        <div class=\"tab-pane \" id=\"bio\" role=\"tabpanel\" #target>\n            <!-- list bio details -->\n            <div class=\"card\" *ngIf=\"bioList\">\n\n                <div class=\"panel-body\">\n                    <ul class=\"list-group\">\n                        <li class=\"list-group-item\" *ngFor=\"let list of biodata\">\n                            <div class=\"card\" style=\"background-color:ghostwhite\">\n                                <h5 style=\"text-align: center;\">Employee Bio Details </h5>\n                                <table class=\"table\" style=\"margin: auto\">\n                                    <tr>\n                                        <th>Height:</th>\n                                        <td>{{ list.height }}</td>\n                                        <th>Weight:</th>\n                                        <td>{{ list.weight}}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>Color:</th>\n                                        <td>{{ list.color}}</td>\n                                        <th>Mole Identification:</th>\n                                        <td>{{ list.moleIdentification}}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>Multiple Handicapped:</th>\n                                        <td>{{ list.multipleHandicapped}}</td>\n                                        <th>Multiple Handicapped Percent:</th>\n                                        <td>{{ list.multipleHandicappedPercent}}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>Eye Power:</th>\n                                        <td>{{ list.eyePower}}</td>\n                                        <th>Blood Group:</th>\n                                        <td>{{ list.bloodGroup}}</td>\n\n                                    </tr>\n                                </table>\n                                <h5 style=\"text-align: center;\">Physical Description Details</h5>\n                                <table class=\"table\" style=\"margin: auto\">\n                                    <tr>\n                                        <th>Hospital Name:</th>\n                                        <td>{{ list.illness.mental.hospitalName }}</td>\n                                        <th>Mental Illness Name:</th>\n                                        <td>{{ list.illness.mental.mentalIllnessName}}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>Treatment Duration:</th>\n                                        <td>{{ list.illness.mental.treatmentDuration}}</td>\n                                        <th>Treatment Name:</th>\n                                        <td>{{ list.illness.mental.treatmentName}}</td>\n                                    </tr>\n                                </table>\n                                <h5 style=\"text-align: center;\">Mental Description Details</h5>\n                                <table class=\"table\" style=\"margin: auto\">\n                                    <tr>\n                                        <th>Hospital Name:</th>\n                                        <td>{{ list.illness.physical.hospitalName }}</td>\n                                        <th>Account Number:</th>\n                                        <td>{{ list.illness.physical.illnessStatus}}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>Physical Illness Name:</th>\n                                        <td>{{ list.illness.physical.physicalIllnessName}}</td>\n                                        <th>Treatment Duration:</th>\n                                        <td>{{ list.illness.physical.treatmentDuration}}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>Treatment Name:</th>\n                                        <td>{{ list.illness.physical.treatmentName}}</td>\n                                    </tr>\n                                </table>\n                                <div>\n                                    <button style=\"float: right\" (click)=\"bioEdit()\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i>&nbsp;Update</button>\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <!-- list bio details -->\n            <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                    <strong>{{ errMsg }}</strong>\n                </p>\n            </div>\n            <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                    <strong>{{ successMsg }}</strong>\n                </p>\n            </div>\n            <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"employeeBioForm\" (ngSubmit)=\"employeeBioFormData()\" novalidate *ngIf=\"bioForm\">\n                <h3>Employee Bio</h3>\n                <br />\n                <div [formGroup]=\"employeeBioForm.get('bio')\">\n                    <div class=\"form-row\">\n                        <div class=\"form-group col-md-4\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-8 control-label\"><b>HEIGHT:&nbsp;(In Feet and Inches)&nbsp;(for eg: 3'11\")</b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"text\" placeholder=\"Enter Employee Height\" formControlName=\"height\" />\n                                    <div *ngFor=\"let validation of bioValidationMessage.height\">\n                                        <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                          employeeBioForm.get('bio.height').hasError(validation.type) &&\n                            (employeeBioForm.get('bio.height').dirty ||\n                            employeeBioForm.get('bio.height').touched)\n                            \" style=\"color: red;margin-left: 14px;\">\n                                            {{ validation.message }}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"form-group col-md-4\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>WEIGHT:&nbsp;(In Kgs only)&nbsp;(for eg: 30kg)</b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"text\" placeholder=\"Enter Employee Weight\" formControlName=\"weight\" />\n                                    <div *ngFor=\"let validation of bioValidationMessage.weight\">\n                                        <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                          employeeBioForm.get('bio.weight').hasError(validation.type) &&\n                            (employeeBioForm.get('bio.weight').dirty ||\n                            employeeBioForm.get('bio.weight').touched)\n                            \" style=\"color: red;margin-left: 14px;\">\n                                            {{ validation.message }}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <!-- <div class=\"form-group col-md-4\">\n                <div class=\"form-group\">\n                  <label class=\"col-sm-6 control-label\"><b>SKIN COMPLEXION:&nbsp;</b></label>\n                  <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"text\" placeholder=\"Enter Employee Skin Complexion\"\n                        formControlName=\"color\" />\n                  </div>\n                </div>\n            </div> -->\n                        <div class=\"form-group col-md-4\">\n\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>SKIN COMPLEXION:&nbsp;</b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <select class=\"dropdown dropdown-toggle form-control\" formControlName=\"color\">\n                        <option class=\"dropdown-item\" value='' disabled>-----\n                            Select Skin Complexion-----\n                        </option>\n                      <optgroup label=\"Pale White\">\n                          <option class=\"dropdown-item\" value=\"Light\">Light</option>\n                      </optgroup>\n                      <optgroup label=\"Fair\">\n                          <option class=\"dropdown-item\" value=\"White\">White</option>\n                      </optgroup>\n                      <optgroup label=\"White to Light Brown\">\n                          <option class=\"dropdown-item\" value=\"Medium\">Medium</option>\n                      </optgroup>\n                      <optgroup label=\"Moderate Brown\">\n                          <option class=\"dropdown-item\" value=\"Olive\">Olive</option>\n                      </optgroup>\n                      <optgroup label=\"Dark Brown\">\n                          <option class=\"dropdown-item\" value=\"Brown\">Brown</option>\n                      </optgroup>\n                      <optgroup label=\"Brown to Black\">\n                          <option class=\"dropdown-item\" value=\"Very Dark\">Very Dark</option>\n                      </optgroup>\n                    </select>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-row\">\n                        <div class=\"form-group col-md-6\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>MOLE IDENTIFICATION OR OTHER MARKS:&nbsp;</b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"text\" placeholder=\"Enter Employee Mole Identification\" formControlName=\"moleIdentification\" />\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"form-group col-md-6\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>BLOOD GROUP:&nbsp;(for eg: AB-)</b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"text\" placeholder=\"Enter Employee Blood Group\" formControlName=\"bloodGroup\" />\n                                    <div *ngFor=\"let validation of bioValidationMessage.bloodGroup\">\n                                        <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                            employeeBioForm.get('bio.bloodGroup').hasError(validation.type) &&\n                              (employeeBioForm.get('bio.bloodGroup').dirty ||\n                              employeeBioForm.get('bio.bloodGroup').touched)\n                              \" style=\"color: red;margin-left: 14px;\">\n                                            {{ validation.message }}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-row\">\n                        <div class=\"form-group col-md-4\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>EYE POWER:&nbsp;</b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"text\" placeholder=\"Enter Employee Eye Power\" formControlName=\"eyePower\" />\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"form-group col-md-4\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-8 control-label\"><b>HANDICAPPED:&nbsp;</b></label>\n                                <select class=\"dropdown dropdown-toggle form-control\" (change)=\"check($event.target.value)\" formControlName=\"handicapped\">\n                      <option class=\"dropdown-item\" value='' disabled>-----\n                          Select Option-----\n                      </option>\n                      <option class=\"dropdown-item\" value=\"false\">No</option>\n                      <option class=\"dropdown-item\" value=\"true\">Yes</option>\n                  </select>\n                            </div>\n                        </div>\n                        <div class=\"form-group col-md-4\" *ngIf=\"show\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-8 control-label\"><b>HANDICAPPED PERCENTAGE:&nbsp;</b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"text\" placeholder=\"Enter Percenatge\" formControlName=\"handicappedPercent\" />\n                                    <div *ngFor=\"let validation of bioValidationMessage.handicappedPercent\">\n                                        <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                          employeeBioForm.get('bio.handicappedPercent').hasError(validation.type) &&\n                            (employeeBioForm.get('bio.handicappedPercent').dirty ||\n                            employeeBioForm.get('bio.handicappedPercent').touched)\n                            \" style=\"color: red;margin-left: 14px;\">\n                                            {{ validation.message }}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-row\">\n                        <div class=\"form-group col-md-6\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-8 control-label\"><b>MULTIPLE HANDICAPPED:&nbsp;</b></label>\n                                <select class=\"dropdown dropdown-toggle form-control\" formControlName=\"multipleHandicapped\" (change)=\"checked($event.target.value)\">\n                      <option class=\"dropdown-item\" value='' disabled>-----\n                          Select Option-----\n                      </option>\n                      <option class=\"dropdown-item\" value=\"false\">No</option>\n                      <option class=\"dropdown-item\" value=\"true\">Yes</option>\n                  </select>\n                            </div>\n                        </div>\n                        <div class=\"form-group col-md-6\" *ngIf=\"shown\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-8 control-label\"><b>MULTIPLE HANDICAPPED PERCENTAGE:&nbsp;</b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"text\" placeholder=\"Enter Percenatge\" formControlName=\"multipleHandicappedPercent\" />\n                                    <div *ngFor=\"let validation of bioValidationMessage.multipleHandicappedPercent\">\n                                        <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                          employeeBioForm.get('bio.multipleHandicappedPercent').hasError(validation.type) &&\n                            (employeeBioForm.get('bio.multipleHandicappedPercent').dirty ||\n                            employeeBioForm.get('bio.multipleHandicappedPercent').touched)\n                            \" style=\"color: red;margin-left: 14px;\">\n                                            {{ validation.message }}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <h6>Physical Description</h6>\n                <div class=\"form-row\" [formGroup]=\"employeeBioForm.get('bio.illness.physical')\">\n                    <div class=\"form-group col-md-6\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-10 control-label\"><b>PHYSICHAL ILLNESS IF ANY PROLONG MORE THAN A WEEK :&nbsp;</b></label>\n                            <div class=\"col-sm-offset-2\">\n                                <input class=\"form-control\" type=\"text\" placeholder=\"Enter Physical Illness\" formControlName=\"physicalIllnessName\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-md-6\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-8 control-label\"><b>NAME OF THE TREATMENT TAKEN:&nbsp;</b></label>\n                            <div class=\"col-sm-offset-2\">\n                                <input class=\"form-control\" type=\"text\" placeholder=\"Enter Treatment\" formControlName=\"treatmentName\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-md-4\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-6 control-label\"><b>HOSPITAL NAME:&nbsp;</b></label>\n                            <div class=\"col-sm-offset-2\">\n                                <input class=\"form-control\" type=\"text\" placeholder=\"Enter Hospital Name\" formControlName=\"hospitalName\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-md-4\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-8 control-label\"><b>DURATION OF TREATMENT:&nbsp;</b></label>\n                            <div class=\"col-sm-offset-2\">\n                                <input class=\"form-control\" type=\"text\" placeholder=\"Enter Treatment Duration\" formControlName=\"treatmentDuration\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-md-4\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-8 control-label\"><b>CURRENT STATUS OF ILLNESS:&nbsp;</b></label>\n                            <div class=\"col-sm-offset-2\">\n                                <input class=\"form-control\" type=\"text\" placeholder=\"Enter Illness Status\" formControlName=\"illnessStatus\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <h6>Mental Description</h6>\n                <div class=\"form-row\" [formGroup]=\"employeeBioForm.get('bio.illness.mental')\">\n                    <div class=\"form-group col-md-8\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-8 control-label\"><b>MENTAL ILLNESS IF ANY PROLONG MORE THAN A WEEK :&nbsp;</b></label>\n                            <div class=\"col-sm-offset-2\">\n                                <input class=\"form-control\" type=\"text\" placeholder=\"Enter Mental Illness\" formControlName=\"mentalIllnessName\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-md-4\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-8 control-label\"><b>NAME OF THE TREATMENT TAKEN:&nbsp;</b></label>\n                            <div class=\"col-sm-offset-2\">\n                                <input class=\"form-control\" type=\"text\" placeholder=\"Enter Treatment Name\" formControlName=\"treatmentName\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-md-4\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-6 control-label\"><b>HOSPITAL NAME:&nbsp;</b></label>\n                            <div class=\"col-sm-offset-2\">\n                                <input class=\"form-control\" type=\"text\" placeholder=\"Enter Hospital name\" formControlName=\"hospitalName\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-md-4\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-8 control-label\"><b>DURATION OF TREATMENT:&nbsp;</b></label>\n                            <div class=\"col-sm-offset-2\">\n                                <input class=\"form-control\" type=\"text\" placeholder=\"Enter Treatment Duration\" formControlName=\"treatmentDuration\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group col-md-4\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-8 control-label\"><b>CURRENT STATUS OF ILLNESS:&nbsp;</b></label>\n                            <div class=\"col-sm-offset-2\">\n                                <input class=\"form-control\" type=\"text\" placeholder=\"Enter Illness Status\" formControlName=\"illnessStatus\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <button type=\"submit\" class=\"btn btn-success\" [disabled]='employeeBioForm.invalid' (click)=\"scroll(target)\">\n            {{ employeeBioButton }}\n            </button>\n                        <button type=\"button\" class=\"btn btn-danger\" (click)=\"bioCancel()\">Cancel</button>\n\n                    </div>\n                </div>\n            </form>\n        </div>\n        <!-- Bio details end  -->\n\n        <!-- address section ui start -->\n        <div class=\"tab-pane\" id=\"address\" role=\"tabpanel\">\n            <div class=\"card-body\">\n                <input type=\"hidden\" id=\"employeeId\" #employeeId value=\"{{ hidden }}\" />\n                <!-- for show address list  -->\n                <div class=\"card\" style=\"background-color:whitesmoke;\" *ngIf=\"addressMsg\">\n                    <div class=\"panel-body\">\n                        <ul class=\"list-group\">\n                            <div class=\"card-body\">\n                                <table class=\"table\" style=\"text-align: center;\">\n                                    <thead class=\" text-primary\">\n                                        <tr>\n                                            <th>Door Number </th>\n                                            <th>Zip code </th>\n                                            <th>Street Name 1 </th>\n                                            <th>Address Type</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody *ngFor=\" let list of addressList\">\n                                        <tr>\n                                            <td> {{list.doorNum}} </td>\n                                            <td> {{list.zipcode}} </td>\n                                            <td> {{list.streetName1}}</td>\n                                            <td> {{list.addressType}}</td>\n                                            <td>\n                                                <button (click)=\"addressEdit(list._id)\" class=\"btn btn-primary\" style=\"color: white;\"><i class=\"fa fa-pencil-square-o\"></i>\n                                  </button>&nbsp;\n                                                <button class=\"btn btn-danger\" type=\"button\" (click)=\"removeAddess(list._id)\"><i class=\"fa fa-trash\"></i>\n                                  </button >\n                              </td>\n                            </tr>\n                        </tbody>\n                      </table>\n                  </div>\n                </ul>\n            </div>\n          </div>\n          <!-- show address list end -->\n          <div *ngIf=\"addAddess\">\n              <div class=\"col-sm-offset-2\">\n                  <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                    <strong>{{ errMsg }}</strong>\n                  </p>\n              </div>\n              <div class=\"col-sm-offset-2\">\n                  <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                    <strong>{{ successMsg }}</strong>\n                  </p>\n              </div>\n            <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"employeeAddressForm\" (ngSubmit)=\"addressForm()\"\n            novalidate>\n            <h3>{{titleName}}</h3>\n            <div class=\"form-group\" [formGroup]=\"employeeAddressForm.get('address')\">\n                <div class=\"form-row\">\n                  <div class=\"form-group col-md-4\">\n                      <label class=\"col-sm-6 control-label\"><b>DOOR NO :&nbsp;<span style=\"color: darkred\"></span></b></label>\n                      <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" placeholder=\"Enter Door No.\" value=\"\"\n                            formControlName=\"doorNum\" />\n                      </div>\n                  </div>\n                  <div class=\"form-group col-md-4\">\n                      <label class=\"col-sm-6 control-label\"><b>LANDMARK :&nbsp;<span\n                        style=\"color: darkred\"></span></b></label>\n                      <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" value=\"\" placeholder=\"Enter Landmark\" formControlName=\"landmark\" />\n                      </div>\n                  </div>\n                  <div class=\"form-group col-md-4\">\n                      <label class=\"col-sm-6 control-label\"><b>ADDRESS TYPE :</b></label>\n                      <select class=\"dropdown dropdown-toggle form-control\" formControlName=\"addressType\">\n                        <option class=\"dropdown-item\" value='null' disabled>-----\n                            Choose Address Type-----\n                        </option>\n                        <option [ngValue]=\"addressType\" value=\"\" *ngFor=\"let addressType of address\">\n                        {{ addressType }}\n                        </option>\n                      </select>\n                  </div>\n                </div>\n                <div class=\"form-row\">\n                  <div class=\"form-group col-md-6\">\n                      <label class=\"col-sm-6 control-label\"><b>STREET NAME 1 :&nbsp;<span\n                        style=\"color: darkred\"></span></b></label>\n                      <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" value=\"\" placeholder=\"Enter Street Name 1\"\n                            formControlName=\"streetName1\" />\n                      </div>\n                  </div>\n                  <div class=\"form-group col-md-6\">\n                      <label class=\"col-sm-6 control-label\"><b>STREET NAME 2 :&nbsp;<span\n                        style=\"color: darkred\"></span></b></label>\n                      <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" value=\"\" placeholder=\"Enter Street Name 2\"\n                            formControlName=\"streetName2\" />\n                      </div>\n                  </div>\n                </div>\n                <div class=\"form-row\">\n                  <div class=\"form-group col-md-4\">\n                      <label class=\"col-sm-6 control-label\"><b>ZIPCODE :&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                      <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" value=\"\" placeholder=\"Enter Zipcode\" formControlName=\"zipcode\" />\n\n                        <div *ngFor=\"let validation of validationMessageZip.zipcode\">\n                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                              employeeAddressForm\n                              .get('address.zipcode')\n                              .hasError(validation.type) &&\n                              (employeeAddressForm.get('address.zipcode')\n                              .dirty ||\n                              employeeAddressForm.get('address.zipcode')\n                              .touched)\n                              \" style=\"color: red;margin-left: 14px;\">\n                              {{ validation.message }}\n                            </div>\n                        </div>\n                      </div>\n                  </div>\n                  <div class=\"form-group col-md-4\">\n                      <label class=\"col-sm-6 control-label\"><b>CITY :&nbsp;<span style=\"color: darkred\"></span></b></label>\n                      <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" value=\"\" placeholder=\"Enter City\" formControlName=\"district\" />\n                      </div>\n                  </div>\n                  <div class=\"form-group col-md-4\">\n                      <label class=\"col-sm-6 control-label\"><b>STATE :&nbsp;<span style=\"color: darkred\"></span></b></label>\n                      <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" value=\"\" placeholder=\"Enter State\" formControlName=\"state\" />\n                      </div>\n                  </div>\n                </div>\n            </div>\n            <div class=\"col-sm-offset-2 col-sm-10\">\n                <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"employeeAddressForm.invalid\" >\n                {{buttonName}}\n                </button>\n                                                <button type=\"submit\" (click)=\"cancleAddForm()\" class=\"btn btn-danger\">\n                  Cancel\n                </button>\n                            </div>\n                            </form>\n                    </div>\n                </div>\n                <button (click)=\"addNewAddress()\" *ngIf=\"addessBtn\" class=\"btn btn-info\" style=\"color: white; float: right;\">Add Address</button>\n            </div>\n            <!-- address seccion ui end -->\n\n            <!-- education ui stat -->\n            <div class=\"tab-pane\" id=\"educationDetails\" role=\"tabpanel\">\n                <!-- education list start -->\n                <div class=\"card\" style=\"background-color:whitesmoke;\" *ngIf=\"listMesg\">\n                    <div class=\"panel-body\">\n                        <ul class=\"list-group\">\n                            <div class=\"card-body\">\n                                <table class=\"table\" style=\"text-align: center;\">\n                                    <thead class=\" text-primary\">\n                                        <tr>\n                                            <th>Course Name </th>\n                                            <th>Institute Name </th>\n                                            <th>Pass Out Year </th>\n                                            <th>Scored Percentage </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody *ngFor=\" let list of educationData\">\n                                        <tr>\n                                            <td> {{list?.courseName}} </td>\n                                            <td> {{list?.instituteName}} </td>\n                                            <td> {{list?.passOutYear}}</td>\n                                            <td> {{list?.scoredPercent}}</td>\n                                            <td>\n                                                <!-- <a (click)=\"educationEdit(list._id)\" style=\"float: right;color: white;\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>&nbsp; -->\n                                                <button (click)=\"educationEdit(list._id)\" style=\"color: white;\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i>\n                              </button>&nbsp;\n                                                <button class=\"btn btn-danger\" type=\"button\" (click)=\"removeEducation(list._id)\"><i class=\"fa fa-trash\"></i>\n                              </button>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </ul>\n                    </div>\n                </div>\n                <!-- education list end -->\n                <div *ngIf=\"EducationForm\">\n                    <div class=\"col-sm-offset-2\">\n                        <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                            <strong>{{ errMsg }}</strong>\n                        </p>\n                    </div>\n                    <div class=\"col-sm-offset-2\">\n                        <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                            <strong>{{ successMsg }}</strong>\n                        </p>\n                    </div>\n                    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"empEducationForm\" (ngSubmit)=\"educationForm()\" novalidate>\n                        <h3>{{education}}</h3>\n                        <div class=\"form-group\" [formGroup]=\"empEducationForm.get('educationalDetails')\">\n                            <div class=\"form-row\">\n                                <div class=\"form-group col-md-4\">\n                                    <label class=\"col-sm-6 control-label\"><b>COURSE NAME:&nbsp;<span\n                      style=\"color: darkred\"></span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" placeholder=\"Enter Course name\" formControlName=\"courseName\" />\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-4\">\n                                    <label class=\"col-sm-6 control-label\"><b>INSTITUTE NAME:&nbsp;<span\n                      style=\"color: darkred\"></span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" placeholder=\"Enter Name of the INSTITUTE\" formControlName=\"instituteName\" />\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-4\">\n                                    <label class=\"col-sm-6 control-label\"><b>PASS OUT YEAR:&nbsp;<span\n                      style=\"color: darkred\">*</span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" placeholder=\"Enter Year\" formControlName=\"passOutYear\" />\n                                        <div *ngFor=\"let validation of validationMessageEducation.passOutYear\">\n                                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                          empEducationForm\n                          .get('educationalDetails.passOutYear')\n                          .hasError(validation.type) &&\n                          (empEducationForm.get('educationalDetails.passOutYear')\n                          .dirty ||\n                          empEducationForm.get('educationalDetails.passOutYear')\n                          .touched)\n                          \" style=\"color: red;margin-left: 14px;\">\n                                                {{ validation.message }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-4\">\n                                    <label class=\"col-sm-6 control-label\"><b>STATUS:&nbsp;<span\n                      style=\"color: darkred\"></span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <select class=\"dropdown dropdown-toggle form-control\" formControlName=\"status\">\n                            <option class=\"dropdown-item\" value='null' disabled>-----\n                                Select Course Status-----\n                            </option>\n                            <option *ngFor=\"let courseStatus of educationalStatus\" [ngValue]=\"courseStatus\" >\n                            {{ courseStatus }}\n                            </option>\n                          </select>\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-4\">\n                                    <label class=\"col-sm-6 control-label\"><b>DESCRIPTION OF COURSE:&nbsp;<span\n                      style=\"color: darkred\"></span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" placeholder=\"Enter Description\" formControlName=\"description\" />\n                                    </div>\n                                </div>\n\n\n                                <div class=\"form-group col-md-4\">\n                                    <label class=\"col-sm-6 control-label\"><b>SCORED PERCENTAGE:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" placeholder=\"Enter Percenatge\" formControlName=\"scoredPercent\" />\n\n                                        <div *ngFor=\"let validation of validationMessageEducation.scoredPercent\">\n                                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                            empEducationForm\n                            .get('educationalDetails.scoredPercent')\n                            .hasError(validation.type) &&\n                            (empEducationForm.get('educationalDetails.scoredPercent')\n                            .dirty ||\n                            empEducationForm.get('educationalDetails.scoredPercent')\n                            .touched)\n                            \" style=\"color: red;margin-left: 14px;\">\n                                                {{ validation.message }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <div class=\"col-sm-offset-2 col-sm-10\">\n                                        <button type=\"submit\" class=\"btn btn-success\" [disabled]='empEducationForm.invalid'>\n                      {{educationBtnadd}}\n                      </button>\n                                        <button type=\"submit\" class=\"btn btn-danger\" (click)=\"cancleEducation()\" style=\"margin-top:-45%;margin-left:72%;\">\n                        Cancel\n                      </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <a (click)=\"addNewEducation()\" *ngIf=\"educationBtn\" class=\"btn btn-info\" style=\"color: white; float: right;\">Add Education</a>\n            </div>\n            <!-- education ui end -->\n\n            <!-- upload Document html code start here  -->\n            <div class=\"tab-pane\" id=\"uploadDocument\" role=\"tabpanel\">\n                <div class=\"card-body\">\n                    <div class=\"card\" style=\"background-color:whitesmoke;\" *ngIf=\"uploadedDocumentDetails.length > 0\">\n                        <h4 style=\"text-align: center;\"><strong>Upload Employee Enlisted Documents</strong></h4>\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group\">\n                                <div class=\"card-body\">\n                                    <table class=\"table\" style=\"text-align: center;\">\n                                        <thead class=\" text-primary\">\n                                            <tr>\n                                                <th>Document Name </th>\n                                                <th>Required </th>\n                                                <th>Upload Doc Image</th>\n                                                <th>Action</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody *ngFor=\"let uploadedDocuments of uploadedDocumentDetails; index as i\">\n                                            <tr>\n                                                <td> {{uploadedDocuments.title}} </td>\n                                                <td *ngIf=\"uploadedDocuments.isRequired\"><i class=\"fa fa-check\" style=\"color: green; font-size: 25px;\"></i></td>\n                                                <td *ngIf=\"!uploadedDocuments.isRequired\"><i class=\"fa fa-times\" style=\"color: red; font-size: 25px;\"></i></td>\n                                                <td> <input type=\"file\"  class=\"form-control-file border\" id=\"documnetDocImage{{i+1}}\" (change)=\"onFileSelect($event)\" accept=\"image/*\">\n                                                <button class=\"fa fa-times\" style=\"color: red; font-size: 15px;\"></button>\n                                                </td>\n                                                <td>\n                                                    <button class=\"btn btn-outline-primary btn-round\" (click)=\"uploadDocs(uploadedDocuments._id,i+1,'Add')\">\n                                <i class=\"fas fa-camera-retro\"></i> Submit\n                              </button>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"card\" style=\"background-color:whitesmoke;\" *ngIf=\"employeeDocumentsDetails.length > 0\">\n                        <h4 style=\"text-align: center;\"><strong>Uploaded Documents Enlisted</strong></h4>\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group\">\n                                <div class=\"card-body\">\n                                    <table class=\"table\" style=\"text-align: center;\">\n                                        <thead class=\" text-primary\">\n                                            <tr>\n                                                <th>Document Name </th>\n                                                <th>Required </th>\n                                                <th>File Size</th>\n                                                <th>Uploaded At</th>\n                                                <th>Action</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody *ngFor=\"let existingDocuments of employeeDocumentsDetails; index as i\">\n                                            <tr>\n                                                <td> {{existingDocuments.documentTypeName}} </td>\n                                                <td *ngIf=\"existingDocuments.isRequired\"><i class=\"fa fa-check\" style=\"color: green; font-size: 25px;\"></i></td>\n                                                <td *ngIf=\"!existingDocuments.isRequired\"><i class=\"fa fa-times\" style=\"color: red; font-size: 25px;\"></i></td>\n                                                <td> {{existingDocuments.fileSize}} </td>\n                                                <td>{{ existingDocuments.metaData.createdAt | date:'fullDate' }} {{ existingDocuments.metaData.createdAt | date:'shortTime' }}</td>\n                                                <td>\n                                                    <button title=\"Update\" class=\"btn btn-primary\" style=\"color: white;\" data-toggle=\"modal\" data-target=\"#updateDocument\" data-backdrop=\"static\" (click)=\"updateDocuments(existingDocuments.documentTypeId)\"><i class=\"fa fa-pencil-square-o\"></i>\n                                  </button>&nbsp;\n                                                    <button title=\"Info\" class=\"btn btn-info\" style=\"color: white;\" (click)=\"openImage(existingDocuments.file)\"><i class=\"fas fa-file-alt\"></i>\n                                  </button>&nbsp;\n                                                    <button title=\"Delete\" class=\"btn btn-danger\" (click)=\"deleteDocument(existingDocuments.documentTypeId)\"><i class=\"fa fa-trash\"></i></button>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <!-- upload document html code end here -->\n\n            <!-- upload bank details html ui start -->\n            <div class=\"tab-pane\" id=\"bankDetails\" role=\"tabpanel\">\n                <!-- list bank details -->\n                <div class=\"card\" *ngIf=\"bankList\">\n                    <div class=\"panel-body\">\n                        <ul class=\"list-group\">\n                            <li class=\"list-group-item\" *ngFor=\"let list of bankListData\">\n                                <div class=\"card\" style=\"background-color:ghostwhite\">\n                                    <h5 style=\"text-align: center;\">Offical Bank Details </h5>\n                                    <table class=\"table\" style=\"margin: auto\">\n                                        <tr>\n                                            <th>Bank Name:</th>\n                                            <td>{{ list.official.name }}</td>\n                                            <th>Account Number:</th>\n                                            <td>{{ list.official.accountNum}}</td>\n                                        </tr>\n                                        <tr>\n                                            <th>Account Place:</th>\n                                            <td>{{ list.official.accountPlace}}</td>\n                                            <th>Account Type:</th>\n                                            <td>{{ list.official.accountType}}</td>\n                                        </tr>\n                                        <tr>\n                                            <th>Remarks:</th>\n                                            <td>{{ list.official.remarks}}</td>\n                                        </tr>\n                                    </table>\n                                    <h5 style=\"text-align: center;\">Personal Bank Details</h5>\n                                    <table class=\"table\" style=\"margin: auto\">\n                                        <tr>\n                                            <th>Bank Name:</th>\n                                            <td>{{ list.personal.name }}</td>\n                                            <th>Account Number:</th>\n                                            <td>{{ list.personal.accountNum}}</td>\n                                        </tr>\n                                        <tr>\n                                            <th>Account Place:</th>\n                                            <td>{{ list.personal.accountPlace}}</td>\n                                            <th>Account Type:</th>\n                                            <td>{{ list.personal.accountType}}</td>\n                                        </tr>\n                                        <tr>\n                                            <th>Remarks:</th>\n                                            <td>{{ list.personal.remarks}}</td>\n                                        </tr>\n                                    </table>\n                                    <div>\n                                        <button style=\"float: right\" (click)=\"editBankDetails()\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i>&nbsp;Update</button>\n                                    </div>\n                                </div>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <!-- list banki details -->\n                <div class=\"col-sm-offset-2\">\n                    <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                        <strong>{{ errMsg }}</strong>\n                    </p>\n                </div>\n                <div class=\"col-sm-offset-2\">\n                    <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                        <strong>{{ successMsg }}</strong>\n                    </p>\n                </div>\n                <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"bankDetailsForm\" (ngSubmit)=\"bankDetailsAdd()\" novalidate *ngIf=\"bankForm\">\n                    <h5 class=\"text-center\"><b>Official Details</b></h5>\n                    <div [formGroup]=\"bankDetailsForm.get('bankDetails.official')\">\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Bank Name\" formControlName=\"name\">\n                                        <div *ngFor=\"let validation of validationMessageBank.name\">\n                                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                                bankDetailsForm.get('bankDetails.official.name').hasError(validation.type) &&\n                                (bankDetailsForm.get('bankDetails.official.name').dirty ||\n                                bankDetailsForm.get('bankDetails.official.name').touched)\n                                \" style=\"color: red;margin-left: 14px;\">\n                                                {{ validation.message }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Account Number:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"acountnumber\" placeholder=\"Enter Account Number\" formControlName=\"accountNum\">\n                                        <div *ngFor=\"let validation of validationMessageBank.accountNum\">\n                                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                                bankDetailsForm.get('bankDetails.official.accountNum').hasError(validation.type) &&\n                                (bankDetailsForm.get('bankDetails.official.accountNum').dirty ||\n                                bankDetailsForm.get('bankDetails.official.accountNum').touched)\n                                \" style=\"color: red;margin-left: 14px;\">\n                                                {{ validation.message }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Account Origin:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"acountplace\" placeholder=\"Enter Account Origin\" formControlName=\"accountPlace\">\n                                    </div>\n                                </div>\n\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Remarks:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"remark\" placeholder=\"Enter Remarks\" formControlName=\"remarks\">\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Account Type:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"acountType\" placeholder=\"Enter Account Type\" formControlName=\"accountType\">\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <hr>\n\n\n                    <input type=\"checkbox\" name=\"vehicle2\" (change)=\"sameAsOfficialDetails(actionBox)\" [checked]='actionBox'> Same as Official Details <br><br>\n\n\n\n                    <div [formGroup]=\"bankDetailsForm.get('bankDetails.personal')\">\n                        <h5 class=\"text-center\"><b>Personal Details</b></h5>\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"pinputName\" placeholder=\"Enter Bank Name\" formControlName=\"name\">\n                                        <div *ngFor=\"let validation of validationMessageBank.name\">\n                                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                              bankDetailsForm.get('bankDetails.personal.name').hasError(validation.type) &&\n                              (bankDetailsForm.get('bankDetails.personal.name').dirty ||\n                              bankDetailsForm.get('bankDetails.personal.name').touched)\n                              \" style=\"color: red;margin-left: 14px;\">\n                                                {{ validation.message }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Account Number:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"pacountnumber\" placeholder=\"Enter Account Number\" formControlName=\"accountNum\">\n                                        <div *ngFor=\"let validation of validationMessageBank.accountNum\">\n                                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                              bankDetailsForm.get('bankDetails.personal.accountNum').hasError(validation.type) &&\n                              (bankDetailsForm.get('bankDetails.personal.accountNum').dirty ||\n                              bankDetailsForm.get('bankDetails.personal.accountNum').touched)\n                              \" style=\"color: red;margin-left: 14px;\">\n                                                {{ validation.message }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Account Origin:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"pacountplace\" placeholder=\"Enter Account Origin\" formControlName=\"accountPlace\">\n                                    </div>\n                                </div>\n\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Remarks:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"premark\" placeholder=\"Enter Remarks\" formControlName=\"remarks\">\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Account Type:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"pacountType\" placeholder=\"Enter Account Type\" formControlName=\"accountType\">\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                        <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"bankDetailsForm.invalid\" (click)=\"scroll(target)\">{{bannBtn}}</button>\n                        <button type=\"button\" class=\"btn btn-danger\" (click)=\"bankDetailsCancel()\">Cancel</button>\n\n                    </div>\n\n                </form>\n            </div>\n            <!-- upload bank details html ui end-->\n\n            <!-- upload Work Experience ui start-->\n            <div class=\"tab-pane\" id=\"workExperience\" role=\"tabpanel\">\n                <!-- list of experience -->\n                <div class=\"card\" style=\"background-color:whitesmoke;\" *ngIf=\"listExprience\">\n                    <div class=\"panel-body\">\n                        <ul class=\"list-group\">\n                            <div class=\"card-body\">\n                                <table class=\"table\" style=\"text-align: center;\">\n                                    <thead class=\" text-primary\">\n                                        <tr>\n                                            <th>Company Name </th>\n                                            <th>Experience Years </th>\n                                            <th>Designation </th>\n                                            <th>Remarks </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody *ngFor=\" let list of exprienceListData\">\n                                        <tr>\n                                            <td> {{list?.companyName}} </td>\n                                            <td> {{list?.experienceYears}} </td>\n                                            <td> {{list?.designation}}</td>\n                                            <td> {{list?.remarks}}</td>\n                                            <td>\n                                                <button (click)=\"expriceneEdit(list._id)\" style=\"color: white;\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i> </button>&nbsp;\n                                                <button class=\"btn btn-danger\" type=\"button\" (click)=\"removeExpeience(list._id)\"><i class=\"fa fa-trash\"></i></button>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </ul>\n                    </div>\n                </div>\n                <!-- list of experience -->\n                <div *ngIf=\"workExperience\">\n                    <div class=\"col-sm-offset-2\">\n                        <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                            <strong>{{ errMsg }}</strong>\n                        </p>\n                    </div>\n                    <div class=\"col-sm-offset-2\">\n                        <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                            <strong>{{ successMsg }}</strong>\n                        </p>\n                    </div>\n                    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"workExperienceForm\" (ngSubmit)=\"addWorkExp()\" novalidate>\n                        <h3>{{exprienceTitle}}</h3>\n                        <div class=\"row\" [formGroup]=\"workExperienceForm.get('workExperiences')\">\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Company Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"name\" placeholder=\"Enter Company Name\" formControlName=\"companyName\">\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Designation:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"designation\" placeholder=\"Enter Designation\" formControlName=\"designation\">\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Experience Years:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"experience\" placeholder=\"Enter Experience Years\" formControlName=\"experienceYears\">\n\n                                        <div *ngFor=\"let validation of validationMessageExper.experienceYears\">\n                                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                            workExperienceForm.get('workExperiences.experienceYears').hasError(validation.type) &&\n                              (workExperienceForm.get('workExperiences.experienceYears').dirty ||\n                              workExperienceForm.get('workExperiences.experienceYears').touched)\n                              \" style=\"color: red;margin-left: 14px;\">\n                                                {{ validation.message }}\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Job Description:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"description\" placeholder=\"Enter Job Description\" formControlName=\"jobDescription\">\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Reliving Reason:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"relivingre\" placeholder=\"Enter Reliving Reason\" formControlName=\"relivingReason\">\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Reliving Is:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <select class=\"dropdown dropdown-toggle form-control\" formControlName=\"relivingIs\">\n                      <option [ngValue]=\"null\" disabled>-----Choose Reliving Status-----</option>\n                      <option *ngFor= 'let reliving of relivingIs' [ngValue]=\"reliving\" > {{ reliving }} </option>\n                    </select>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Remarks:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"remark\" placeholder=\"Enter Remarks\" formControlName=\"remarks\">\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"workExperienceForm.invalid\" (click)=\"scroll(target)\">{{experienceBtn}}</button>\n                        <button class=\"btn btn-danger\" (click)=\"cancleExperience()\">Cancel</button>\n                    </form>\n                </div>\n                <a (click)=\"addExperience()\" *ngIf=\"addExpbtn\" class=\"btn btn-info\" style=\"color: white; float: right;\">Add Experience</a>\n\n            </div>\n            <!-- upload work Experience ui end-->\n\n            <!-- upload skill category  -->\n            <div class=\"tab-pane\" id=\"skillCat\" role=\"tabpanel\">\n                <!-- <tag-input [(ngModel)]='items'></tag-input> -->\n                <!-- <tag-input [ngModel]=\"itemsAsObjects\"></tag-input> -->\n            </div>\n            <!-- upload skill category -->\n\n            <!-- Employee Family add  -->\n            <div class=\"tab-pane\" id=\"addFamily\" role=\"tabpanel\">\n                <input type=\"hidden\" id=\"familyId\" #familyId value=\"{{ familyIdValue }}\">\n                <div class=\"card\" style=\"background-color:whitesmoke;\" id=\"hide\" *ngIf=\"divShow\">\n                    <div class=\"panel-body\">\n                        <ul class=\"list-group\">\n                            <div class=\"card-body\">\n                                <table class=\"table\" style=\"text-align: center;\">\n                                    <thead class=\" text-primary\">\n                                        <tr>\n                                            <th>Relation </th>\n                                            <th>Name</th>\n                                            <th>Education</th>\n                                            <th>Occupation</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody *ngFor=\" let list of familyDetailsList\">\n                                        <tr>\n                                            <td> {{list.relation}} </td>\n                                            <td> {{list.name}} </td>\n                                            <td> {{list.education}}</td>\n                                            <td> {{list.occupation}}</td>\n                                            <td>\n                                                <button class=\"btn btn-primary\" (click)=\"updateValidation(list._id)\"><i\n                                  class=\"fa fa-pencil-square-o\"></i>\n                              </button>&nbsp;\n                                                <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteFamilyDetails(list._id)\"><i\n                                  class=\"fa fa-trash\"></i></button>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </ul>\n                    </div>\n                </div>\n                <div *ngIf=\"formShow\">\n                    <div class=\"col-sm-offset-2\">\n                        <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                            <strong>{{ errMsg }}</strong>\n                        </p>\n                    </div>\n                    <div class=\"col-sm-offset-2\">\n                        <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                            <strong>{{ successMsg }}</strong>\n                        </p>\n                    </div>\n                    <h3 style=\"text-align: center\">{{ title }} Family Details</h3>\n                    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"addRelationForm\" (ngSubmit)=\"addFamilyDetails()\" novalidate>\n                        <div [formGroup]=\"addRelationForm.get('family')\">\n                            <div [formGroup]=\"addRelationForm.get('family.members')\">\n                                <label class=\"col-sm-6 control-label\"><b>Select Relation:&nbsp;<span\n                  style=\"color: darkred\">*</span></b></label>\n                                <select class=\"dropdown dropdown-toggle form-control\" formControlName=\"relation\">\n                    <option class=\"dropdown-item\" value='null' disabled>-----Choose Relation Type-----</option>\n                  <option class=\"dropdown-item\" *ngFor=\"let relationMember of relation\" value=\"{{relationMember}}\">\n                      {{ relationMember}}\n                  </option>\n                </select>\n                                <div class=\"row\">\n                                    <div class=\"col-md-6\">\n                                        <div class=\"form-group\">\n                                            <label class=\"col-sm-6 control-label\"><b>Name:</b></label>\n                                            <div class=\"col-sm-offset-2\">\n                                                <input class=\"form-control\" type=\"text\" id=\"name\" placeholder=\"Enter Name\" formControlName=\"name\">\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group\">\n                                            <label class=\"col-sm-6 control-label\"><b>Age:</b></label>\n                                            <div class=\"col-sm-offset-2\">\n                                                <input class=\"form-control\" type=\"text\" id=\"age\" placeholder=\"Enter Age\" formControlName=\"age\">\n                                                <div *ngFor=\"let validation of validationMessageFamily.age\">\n                                                    <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                                  addRelationForm.get('family.members.age').hasError(validation.type) &&\n                                    (addRelationForm.get('family.members.age').dirty ||\n                                    addRelationForm.get('family.members.age').touched)\n                                    \" style=\"color: red;margin-left: 14px;\">\n                                                        {{ validation.message }}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group\">\n                                            <label class=\"col-sm-6 control-label\"><b>Occupation:</b></label>\n                                            <div class=\"col-sm-offset-2\">\n                                                <input class=\"form-control\" type=\"text\" id=\"occupation\" placeholder=\"Enter Occupation\" formControlName=\"occupation\">\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-6\">\n                                        <div class=\"form-group\">\n                                            <label class=\"col-sm-6 control-label\"><b>Education:</b></label>\n                                            <div class=\"col-sm-offset-2\">\n                                                <input class=\"form-control\" type=\"text\" id=\"education\" placeholder=\"Enter education\" formControlName=\"education\">\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group\">\n                                            <label class=\"col-sm-6 control-label\"><b>Annually Income:</b></label>\n                                            <div class=\"col-sm-offset-2\">\n                                                <input class=\"form-control\" type=\"text\" id=\"income\" placeholder=\"Enter Income\" formControlName=\"income\">\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <label class=\"col-sm-6 control-label\"><b>Family Type:</b></label>\n                        <select class=\"dropdown dropdown-toggle form-control\" name=\"familyType\" formControlName=\"familyType\">\n          <option class=\"dropdown-item\" value='null' disabled>-----Choose Family Type-----</option>\n          <option [ngValue]=\"list\" *ngFor=\"let list of familyType\" selected>{{ list }}</option>\n          </select>\n                        <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"addRelationForm.invalid\" (click)=\"scroll(target)\">{{addfamilyBtn}}</button>\n                        <button class=\"btn btn-danger\" (click)=\"cancelValue()\">Cancel</button>\n                    </form>\n                </div>\n                <button type=\"button\" *ngIf=\"showAddFamilyButton\" style=\"float: right\" class=\"btn btn-primary\" (click)=\"showAddFamilyForm()\"><i class=\"fa fa-plus-square\"></i>&nbsp;Add Family</button>\n            </div>\n            <!-- Employee Family add  -->\n\n            <!--Profile payroll setting start-->\n            <div class=\"tab-pane\" id=\"profilePayroll\" role=\"tabpanel\">\n                <!-- list payroll setting  -->\n                <div class=\"card\" *ngIf=\"payrollList\">\n                    <div class=\"panel-body\">\n                        <ul class=\"list-group\">\n                            <li class=\"list-group-item\" *ngFor=\"let list of payrollData\">\n                                <div class=\"card\" style=\"background-color:ghostwhite\">\n                                    <h5 style=\"text-align: center;\">Payroll Details </h5>\n                                    <table class=\"table\" style=\"margin: auto\">\n                                        <tr>\n                                            <th>CTC:</th>\n                                            <td>{{ list.ctc }}</td>\n                                            <th>CTC Effective From Date:</th>\n                                            <td>{{ list.ctcEffectiveFromDate | date}}</td>\n                                        </tr>\n                                        <tr>\n                                            <th>CTC Effective To Date:</th>\n                                            <td>{{ list.ctcEffectiveToDate | date}}</td>\n                                            <th>Earned Leave Balance:</th>\n                                            <td>{{ list.earnedLeaveBalance}}</td>\n                                        </tr>\n                                        <tr>\n                                            <th>Grade Rule:</th>\n                                            <td>{{ list.gradeRuleName}}</td>\n                                            <th>Paid Leave Balance:</th>\n                                            <td>{{ list.paidLeaveBalance}}</td>\n                                        </tr>\n                                        <tr>\n                                            <th>Basic Pay</th>\n                                            <td>{{ list.basicPay}}</td>\n                                            <th>Payment Mode</th>\n                                            <td>{{ list.mode}}</td>\n                                        </tr>\n                                    </table>\n\n                                    <div>\n                                        <button style=\"float: right\" (click)=\"payrollSettingEdit()\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i>&nbsp;Update</button>\n                                    </div>\n                                </div>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <!-- list payroll setting -->\n                <div class=\"col-sm-offset-2\">\n                    <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                        <strong>{{ errMsg }}</strong>\n                    </p>\n                </div>\n                <div class=\"col-sm-offset-2\">\n                    <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                        <strong>{{ successMsg }}</strong>\n                    </p>\n                </div>\n                <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"payrollDetailsForm\" (ngSubmit)=\"payrollAdd()\" *ngIf=\"payrollForm\" novalidate>\n                    <div [formGroup]=\"payrollDetailsForm.get('payroll')\">\n                        <h5 class=\"text-center\"><b>Payroll Details</b></h5>\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>CTC:&nbsp;<span\n                    style=\"color: darkred\">*</span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"ctc\" placeholder=\"Enter CTC\" formControlName=\"ctc\">\n                                        <div *ngFor=\"let validation of payrollValidations.ctc\">\n                                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                          payrollDetailsForm.get('payroll.ctc').hasError(validation.type) &&\n                            (payrollDetailsForm.get('payroll.ctc').dirty ||\n                            payrollDetailsForm.get('payroll.ctc').touched)\n                            \" style=\"color: red;margin-left: 14px;\">\n                                                {{ validation.message }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>CTC Effective From Date:&nbsp;<span\n                    style=\"color: darkred\">*</span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"date\" id=\"ctcEffectiveFromDate\" placeholder=\"Enter CTC Effective From Date\" formControlName=\"ctcEffectiveFromDate\">\n                                        <div *ngFor=\"let validation of payrollValidations.ctcEffectiveFromDate\">\n                                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                          payrollDetailsForm.get('payroll.ctcEffectiveFromDate').hasError(validation.type) &&\n                            (payrollDetailsForm.get('payroll.ctcEffectiveFromDate').dirty ||\n                            payrollDetailsForm.get('payroll.ctcEffectiveFromDate').touched)\n                            \" style=\"color: red;margin-left: 14px;\">\n                                                {{ validation.message }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>CTC Effective To Date:&nbsp;<span\n                    style=\"color: darkred\">*</span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"date\" id=\"ctcEffectiveToDate\" placeholder=\"Enter CTC Effective To Date\" formControlName=\"ctcEffectiveToDate\">\n                                        <div *ngFor=\"let validation of payrollValidations.ctcEffectiveToDate\">\n                                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                          payrollDetailsForm.get('payroll.ctcEffectiveToDate').hasError(validation.type) &&\n                            (payrollDetailsForm.get('payroll.ctcEffectiveToDate').dirty ||\n                            payrollDetailsForm.get('payroll.ctcEffectiveToDate').touched)\n                            \" style=\"color: red;margin-left: 14px;\">\n                                                {{ validation.message }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Paid Leave Balance:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"paidLeaveBalance\" placeholder=\"Enter Paid Leave Balance\" formControlName=\"paidLeaveBalance\">\n                                        <div *ngFor=\"let validation of payrollValidations.paidLeaveBalance\">\n                                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                          payrollDetailsForm.get('payroll.paidLeaveBalance').hasError(validation.type) &&\n                            (payrollDetailsForm.get('payroll.paidLeaveBalance').dirty ||\n                            payrollDetailsForm.get('payroll.paidLeaveBalance').touched)\n                            \" style=\"color: red;margin-left: 14px;\">\n                                                {{ validation.message }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Earned Leave Balance:</b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"earnedLeaveBalance\" formControlName=\"earnedLeaveBalance\" disabled>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Grade Rule:&nbsp;<span\n                    style=\"color: darkred\">*</span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <select class=\"dropdown dropdown-toggle form-control\" name=\"familyType\" formControlName=\"gradeRule\">\n                      <option class=\"dropdown-item\" value='' disabled>-----Choose Grade Rule Name-----</option>\n                      <option  *ngFor=\"let gradeRule of payrollGradeRuleList\" [ngValue]=\"gradeRule._id\" selected>{{ gradeRule.title }}</option>\n                    </select>\n                                        <div *ngFor=\"let validation of payrollValidations.gradeRule\">\n                                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                      payrollDetailsForm.get('payroll.gradeRule').hasError(validation.type) &&\n                        (payrollDetailsForm.get('payroll.gradeRule').dirty ||\n                        payrollDetailsForm.get('payroll.gradeRule').touched)\n                        \" style=\"color: red;margin-left: 14px;\">\n                                                {{ validation.message }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Basic Pay:&nbsp;<span\n                    style=\"color: darkred\">*</span></b></label>\n                                    <div class=\"col-sm-offset-2\">\n                                        <input class=\"form-control\" type=\"text\" id=\"basicPay\" placeholder=\"Enter Basic Pay\" formControlName=\"basicPay\">\n                                        <div *ngFor=\"let validation of payrollValidations.paidLeaveBalance\">\n                                            <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                          payrollDetailsForm.get('payroll.basicPay').hasError(validation.type) &&\n                            (payrollDetailsForm.get('payroll.basicPay').dirty ||\n                            payrollDetailsForm.get('payroll.basicPay').touched)\n                            \" style=\"color: red;margin-left: 14px;\">\n                                                {{ validation.message }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label class=\"col-sm-6 control-label\"><b>Payment Mode:&nbsp;<span\n                  style=\"color: darkred\">*</span></b></label>\n                                    <select class=\"dropdown dropdown-toggle form-control\" formControlName=\"mode\">\n                    <option class=\"dropdown-item\" value='null' disabled>-----\n                        Choose Payment Mode-----\n                    </option>\n                    <option [ngValue]=\"paymentMode\" value=\"\" *ngFor=\"let paymentMode of paymentType\">\n                    {{ paymentMode }}\n                    </option>\n                  </select>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"payrollDetailsForm.invalid\" (click)=\"scroll(target)\">{{ payrollButton }}</button>\n                    <button type=\"button\" class=\"btn btn-danger\" (click)=\"backPayrollBtn()\">Cancel</button>\n                </form>\n            </div>\n            <!-- profile payroll setting end -->\n\n            <!-- list of langulae skills starts -->\n            <div class=\"tab-pane\" id=\"languageSkill\" role=\"tabpanel\">\n                <!-- list of language skills -->\n                <div class=\"card\" style=\"background-color:whitesmoke;\" *ngIf=\"languageSkillList\">\n                    <div class=\"panel-body\">\n                        <ul class=\"list-group\">\n                            <div class=\"card-body\">\n                                <table class=\"table\" style=\"text-align: center;\">\n                                    <thead class=\" text-primary\">\n                                        <tr>\n                                            <th>Read </th>\n                                            <th>Speak </th>\n                                            <th>Write </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody *ngFor=\" let list of LanguageData\">\n                                        <tr>\n                                            <td> {{list.toRead}} </td>\n                                            <td> {{list.toSpeak}} </td>\n                                            <td> {{list.toWrite}}</td>\n                                            <td>\n                                                <button (click)=\"languageSkillEdit(list._id)\" style=\"color: white;\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i> </button>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </ul>\n                    </div>\n                </div>\n                <!-- list of language skills -->\n                <div *ngIf=\"lsnguageSkillForm\">\n                    <div class=\"col-sm-offset-2\">\n                        <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                            <strong>{{ errMsg }}</strong>\n                        </p>\n                    </div>\n                    <div class=\"col-sm-offset-2\">\n                        <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                            <strong>{{ successMsg }}</strong>\n                        </p>\n                    </div>\n                    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"languageSkillForm\" (ngSubmit)=\"addLanguageSkill()\" novalidate>\n                        <h3>{{languageSkillTitle}} Language</h3>\n                        <div [formGroup]=\"languageSkillForm.get('languageSkills')\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>Speak:</b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"text\" id=\"toSpeak\" placeholder=\"Enter Speak Language\" formControlName=\"toSpeak\">\n                                </div>\n                            </div>\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>Read:</b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"text\" id=\"toRead\" placeholder=\"Enter Read Language\" formControlName=\"toRead\">\n                                </div>\n                            </div>\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>Write:</b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"text\" id=\"toWrite\" placeholder=\"Enter Write Language\" formControlName=\"toWrite\">\n                                </div>\n                            </div>\n                        </div>\n                        <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"languageSkillForm.invalid\" (click)=\"scroll(target)\">{{skillLanguageBtn}}</button>\n                        <button class=\"btn btn-danger\" (click)=\"cancelLanguageSkill()\">Cancel</button>\n                    </form>\n                </div>\n                <button (click)=\"addLanguageSkillList()\" *ngIf=\"addLanguageBtn\" class=\"btn btn-info\" style=\"color: white; float: right;\">Add Language</button>\n            </div>\n            <!-- list of langulae skills end -->\n\n            <!-- Employee leave setting start-->\n            <div class=\"tab-pane\" id=\"leaveSetting\" role=\"tabpanel\">\n                <div class=\"card-body\">\n                    <input type=\"hidden\" id=\"employeeId\" #employeeId value=\"{{ hidden }}\" />\n                    <!-- for show leave list  -->\n                    <div class=\"card\" style=\"background-color:whitesmoke;\" *ngIf=\"employeeLeaveList\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group\">\n                                <div class=\"card-body\">\n                                    <table class=\"table\" style=\"text-align: center;\">\n                                        <thead class=\" text-primary\">\n                                            <tr>\n                                                <th>Start Date </th>\n                                                <th>End Date </th>\n                                                <th>Leave Per Month </th>\n                                                <th>Reason</th>\n                                                <th>Action</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody *ngFor=\" let list of employeeLeaveData\">\n                                            <tr>\n                                                <td> {{list.startDate | date}} </td>\n                                                <td> {{list.endDate | date}} </td>\n                                                <td> {{list.leavePerMonth}}</td>\n                                                <td> {{list.reason}}</td>\n                                                <td>\n                                                    <button (click)=\"leaveSettingUpdateDetails(list._id)\" class=\"btn btn-primary\" style=\"color: white;\"><i class=\"fa fa-pencil-square-o\"></i>\n                                    </button>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </ul>\n                        </div>\n                    </div>\n                    <!-- show leave list end -->\n                    <div *ngIf=\"employeeLeaveForm\">\n                        <div class=\"col-sm-offset-2\">\n                            <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                                <strong>{{ errMsg }}</strong>\n                            </p>\n                        </div>\n                        <div class=\"col-sm-offset-2\">\n                            <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                                <strong>{{ successMsg }}</strong>\n                            </p>\n                        </div>\n                        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"employeeLeaveDetailsForm\" (ngSubmit)=\"addLeaveSetting()\" novalidate>\n                            <h3 style=\"text-align: center;\">{{leaveSettingHeadingButton}}</h3>\n                            <div class=\"row\">\n                                <div class=\"col-md-6\">\n                                    <div class=\"form-group\">\n                                        <label class=\"col-sm-6 control-label\"><b>Start Date :&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                        <div class=\"col-sm-offset-2\">\n                                            <input class=\"form-control\" type=\"date\" placeholder=\"Enter Start Date\" value=\"\" formControlName=\"startDate\" />\n                                            <div *ngFor=\"let validation of validationMessageLeaveSettings.startDate\">\n                                                <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                                    employeeLeaveDetailsForm.get('startDate').hasError(validation.type) &&\n                                    (employeeLeaveDetailsForm.get('startDate').dirty ||\n                                    employeeLeaveDetailsForm.get('startDate').touched)\n                                    \" style=\"color: red;margin-left: 14px;\">\n                                                    {{ validation.message }}\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <label class=\"col-sm-6 control-label\"><b>Leave Per Month :&nbsp;<span\n                          style=\"color: darkred\">*</span></b></label>\n                                        <div class=\"col-sm-offset-2\">\n                                            <input class=\"form-control\" type=\"text\" value=\"\" placeholder=\"Enter Leave Per Month\" formControlName=\"leavePerMonth\" />\n                                            <div *ngFor=\"let validation of validationMessageLeaveSettings.leavePerMonth\">\n                                                <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                                employeeLeaveDetailsForm.get('leavePerMonth').hasError(validation.type) &&\n                                (employeeLeaveDetailsForm.get('leavePerMonth').dirty ||\n                                employeeLeaveDetailsForm.get('leavePerMonth').touched)\n                                \" style=\"color: red;margin-left: 14px;\">\n                                                    {{ validation.message }}\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"col-md-6\">\n                                    <div class=\"form-group\">\n                                        <label class=\"col-sm-6 control-label\"><b>End Date :&nbsp;<span\n                          style=\"color: darkred\">*</span></b></label>\n                                        <div class=\"col-sm-offset-2\">\n                                            <input class=\"form-control\" type=\"date\" value=\"\" placeholder=\"Enter End Date\" formControlName=\"endDate\" />\n                                            <div *ngFor=\"let validation of validationMessageLeaveSettings.endDate\">\n                                                <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                                    employeeLeaveDetailsForm.get('endDate').hasError(validation.type) &&\n                                    (employeeLeaveDetailsForm.get('endDate').dirty ||\n                                    employeeLeaveDetailsForm.get('endDate').touched)\n                                    \" style=\"color: red;margin-left: 14px;\">\n                                                    {{ validation.message }}\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <label class=\"col-sm-6 control-label\"><b>Reason :</b></label>\n                                        <div class=\"col-sm-offset-2\">\n                                            <input class=\"form-control\" type=\"text\" value=\"\" placeholder=\"Enter Reason\" formControlName=\"reason\" />\n                                        </div>\n                                    </div>\n                                </div>\n\n\n                            </div>\n                            <div class=\"col-sm-offset-2 col-sm-10\">\n                                <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"employeeLeaveDetailsForm.invalid\">\n                  {{leaveButton}}\n                  </button>\n                                <button type='button' (click)=\"leaveSettingCancel()\" class=\"btn btn-danger\">\n                    Cancel\n                  </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n                <button (click)=\"addNewLeaveSettings()\" *ngIf=\"leaveSettingButton\" class=\"btn btn-info\" style=\"color: white; float: right;\">Add Leave Settings</button>\n            </div>\n            <!-- Employee leave setting end -->\n            <!--Employee Identity Proofs Panel Start-->\n            <div class=\"tab-pane\" id=\"identityproofs\" role=\"tabpanel\">\n                <div class=\"card-body\">\n                    <input type=\"hidden\" id=\"employeeId\" #employeeId value=\"{{ hidden }}\" />\n                    <!-- for show Identity Proofs list  -->\n                    <div class=\"card\" style=\"background-color:whitesmoke;\" *ngIf=\"idProofsList\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group\">\n                                <div class=\"card-body\">\n                                    <table class=\"table\" style=\"text-align: center;\">\n                                        <thead class=\" text-primary\">\n                                            <tr>\n                                                <th>Identity Name </th>\n                                                <th>Identity Number</th>\n                                                <th>Expiry Date</th>\n                                                <th>Action</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody *ngFor=\" let list of idProofsData\">\n                                            <tr>\n                                                <td> {{list.identityName}} </td>\n                                                <td> {{list.identityNum}} </td>\n                                                <td> {{list.expiryDate | date}}</td>\n                                                <td>\n\n                                                    <button (click)=\"idProofsSettingUpdateDetails(list._id)\" class=\"btn btn-primary\" style=\"color: white;\"><i\n                                  class=\"fa fa-pencil-square-o\"></i>\n                                </button>&nbsp;\n                                                    <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteIdentityProofs(list._id)\"><i\n                                  class=\"fa fa-trash\"></i></button>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </ul>\n                        </div>\n                    </div>\n                    <!-- show Identity Proofs list end -->\n                    <div *ngIf=\"idProofsForm\">\n                        <div class=\"col-sm-offset-2\">\n                            <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                                <strong>{{ errMsg }}</strong>\n                            </p>\n                        </div>\n                        <div class=\"col-sm-offset-2\">\n                            <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                                <strong>{{ successMsg }}</strong>\n                            </p>\n                        </div>\n                        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"idProofsDetailsForm\" (ngSubmit)=\"addIdProofs()\" novalidate>\n                            <div [formGroup]=\"idProofsDetailsForm.get('identityProofs')\">\n                                <h3 style=\"text-align: center;\">{{idProofsHeadingButton}}</h3>\n                                <div class=\"row\">\n                                    <div class=\"col-md-6\">\n                                        <div class=\"form-group\">\n                                            <label class=\"col-sm-6 control-label\"><b>Identity Name :&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                            <div class=\"col-sm-offset-2\">\n                                                <input class=\"form-control\" type=\"text\" placeholder=\"Enter Identity Name\" value=\"\" formControlName=\"identityName\" />\n                                                <div *ngFor=\"let validation of validationMessageIdProofsSettings.identityName\">\n                                                    <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                                  idProofsDetailsForm.get('identityProofs.identityName').hasError(validation.type) &&\n                                  (idProofsDetailsForm.get('identityProofs.identityName').dirty ||\n                                  idProofsDetailsForm.get('identityProofs.identityName').touched)\n                                  \" style=\"color: red;margin-left: 14px;\">\n                                                        {{ validation.message }}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group\">\n                                            <label class=\"col-sm-6 control-label\"><b>Identity Number :&nbsp;<span\n                        style=\"color: darkred\">*</span></b></label>\n                                            <div class=\"col-sm-offset-2\">\n                                                <input class=\"form-control\" type=\"text\" value=\"\" placeholder=\"Enter Identity Number\" formControlName=\"identityNum\" />\n                                                <div *ngFor=\"let validation of validationMessageIdProofsSettings.identityNum\">\n                                                    <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                              idProofsDetailsForm.get('identityProofs.identityNum').hasError(validation.type) &&\n                              (idProofsDetailsForm.get('identityProofs.identityNum').dirty ||\n                              idProofsDetailsForm.get('identityProofs.identityNum').touched)\n                              \" style=\"color: red;margin-left: 14px;\">\n                                                        {{ validation.message }}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-6\">\n                                        <div class=\"form-group\">\n                                            <label class=\"col-sm-6 control-label\"><b>Authority Name :&nbsp;</b></label>\n                                            <div class=\"col-sm-offset-2\">\n                                                <input class=\"form-control\" type=\"text\" value=\"\" placeholder=\"Enter Authority Name\" formControlName=\"authorityName\" />\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group\">\n                                            <label class=\"col-sm-6 control-label\"><b>Issue Place :&nbsp;</b></label>\n                                            <div class=\"col-sm-offset-2\">\n                                                <input class=\"form-control\" type=\"text\" value=\"\" placeholder=\"Enter Issue Place\" formControlName=\"issuePlace\" />\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-6\">\n                                        <div class=\"form-group\">\n                                            <label class=\"col-sm-6 control-label\"><b>Expiry Date :&nbsp;<span\n                          style=\"color: darkred\">*</span></b></label>\n                                            <div class=\"col-sm-offset-2\">\n                                                <input class=\"form-control\" type=\"date\" value=\"\" placeholder=\"Enter Expiry Date\" formControlName=\"expiryDate\" />\n                                                <div *ngFor=\"let validation of validationMessageIdProofsSettings.expiryDate\">\n                                                    <div style=\"color: red;margin-left: 14px;\" *ngIf=\"\n                                    idProofsDetailsForm.get('identityProofs.expiryDate').hasError(validation.type) &&\n                                    (idProofsDetailsForm.get('identityProofs.expiryDate').dirty ||\n                                    idProofsDetailsForm.get('identityProofs.expiryDate').touched)\n                                    \" style=\"color: red;margin-left: 14px;\">\n                                                        {{ validation.message }}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-6\">\n                                        <div class=\"form-group\">\n                                            <label class=\"col-sm-6 control-label\"><b>Remarks :&nbsp;</b></label>\n                                            <div class=\"col-sm-offset-2\">\n                                                <input class=\"form-control\" type=\"text\" value=\"\" placeholder=\"Enter Remarks\" formControlName=\"remarks\" />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row col-sm-offset-2 col-sm-10\">\n                                <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"idProofsDetailsForm.invalid\">\n                {{idProofsButton}}\n                </button>\n                                <button type='button' (click)=\"idProofsSettingsCancel()\" class=\"btn btn-danger\">\n                  Cancel\n                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n                <button (click)=\"addNewIdProofsSettings()\" *ngIf=\"idProofsSettingButton\" class=\"btn btn-info\" style=\"color: white; float: right;\">Add Identity Proofs</button>\n            </div>\n            <!--Employee Identity Proofs Panel End-->\n\n        </div>\n    </div>\n\n    <div class=\"modal\" id=\"updateDocument\">\n        <div class=\"modal-dialog modal-dialog-centered\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h4 class=\"modal-title\">Update Document</h4>\n                </div>\n                <div class=\"modal-body\">\n                    <div class=\"card\" style=\"background-color:whitesmoke;\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group\">\n                                <div class=\"card-body\">\n                                    <table class=\"table\" style=\"text-align: center;\">\n                                        <thead class=\" text-primary\">\n                                            <tr>\n                                                <th>Update Doc Image</th>\n                                                <th>Action</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr>\n                                                <td> <input type=\"file\" class=\"form-control-file border\" id=\"updateExistingDocument\" (change)=\"onFileSelect($event)\" accept=\"image/*\"> </td>\n                                                <td>\n                                                    <button class=\"btn btn-outline-primary btn-round\" (click)=\"uploadDocs(documentTypeId,'updateExistingDocument','Update')\">\n                                <i class=\"fas fa-camera-retro\"></i> Submit\n                              </button>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <button type=\"button\" id=\"dismissUpdateDocuments\" class=\"btn btn-danger\" style=\"float:right;\" data-dismiss=\"modal\">Close</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>","import { DocumentServices } from '../../document-types/document-services/document.services';\nimport { Component, OnInit, NgZone, ViewChild,ElementRef, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { EmployeeService } from '../services/employee.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { skillCategoryApiService } from '../../skill-category/skillCategory-service/skillCategory-api.service';\nimport Swal from 'sweetalert2';\nimport { HttpClient } from '@angular/common/http';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\nimport { Observable } from 'rxjs';\n\n\n@Component({\n  selector: 'app-employee-profile',\n  templateUrl: './employee-profile.component.html',\n  styleUrls: ['./employee-profile.component.scss']\n})\n\nexport class EmployeeProfileComponent implements OnInit,OnDestroy{\n  ngOnDestroy(): void {\n    (document.getElementById('headerCompanyDropDown')as HTMLInputElement).removeAttribute('disabled');\n  }\n\n  @ViewChild('familyId', { static: false }) familyId: ElementRef;\n  // @ViewChild('proofsId', { static: false }) proofsId: ElementRef;\n\n  employeeBasicForm: any;\n  employeeAddressForm: any;\n  empEducationForm: any;\n  employeeBioForm: any;\n  companyTlList: any;\n  updateRelationForm:any;\n  companyListData = new Array();\n  branchList = new Array();\n  departmentList = new Array();\n  jobProfileList = new Array();\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  branchName: String;\n  companyId: String;\n  address = ['Current', 'Permanent', 'Others'];\n  branch: Object;\n  hidden:String;\n  familyType = ['Joint', 'Nuclear Family'];\n  familyDetailsList = new Array();\n  familyTypeList: String;\n  divShow: boolean = false;\n  formShow:boolean = false;\n  title:String;\n  familyIdValue:String;\n  showAddFamilyButton:boolean = true;\n  educationBtn: Boolean = true;\n  addressId;\n  workExperienceForm: any; // Work Experience form group\n  bankDetailsForm: any; // Bank details form group name\n  imageSrc: string = '';   // upload Document variable\n  imagePath;  // upload Document variable\n  docData: any; // upload Document Variable for show all document name\n  experValue: Object; // post data from experience api\n  actionBox = false;\n  existingPersonalDetails :any;\n  relivingIs = ['Formal', 'InFormal']; // Work Experience Reliving type\n  existingBankDetails : any;\n  employeeBioButton: string;\n  basicDetail = 'Submit';\n  checkbox = false;\n\n\n  addRelationForm: any; // family form group name\n  public familyValue: any[]; // after call api value store in this variable\n  relation =[\"Mother\",\"Father\",\"Brother\",\"Sister\",\"Uncle\",\"Aunt\",\"Spouse\",\"Son\",\"Daughter\"]; // Family relation array\n  public skillValue: []; // skill category data in this array\n  public showForm; // show details form of family\n  items = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];  // this one is use for testing only\n  public openval = 0;\n  snapShotParam: String;\n  shown: Boolean = false;\n  show: Boolean = false;\n  addressList : any; // list of old address\n  addAddess: boolean = true; // add address div show and hide\n  previousValue: any [];\n  titleName; // title name for form on update and add address\n  buttonName = 'Submit';\n  button:Boolean = true;\n  addressMsg:Boolean = true;\n  educationData: any[]; // education details\n  EducationForm: Boolean = true;  // show and hidde EducationForm\n  educationCurentId; // education id\n  eduBtn;\n  addessBtn: Boolean=true;\n  education;\n  listMesg: Boolean= true;\n  listEducationalDetails: any[]; //education details\n  exprienceListData: any []; //exprience data\n  workExperience: Boolean = true;\n  listExprience: Boolean = true; // exprience list flag\n  exprienceTitle; // expience form title\n  expCurentId; // exprience current id on click edit button and delete button\n  addExpbtn: Boolean = true;\n  bankListData: any []; // bank list all data in this array\n  showCard = {}; // use in bank list show\n  bankList: Boolean = true; // value in bank list or not in bank list flag\n  bankForm: Boolean = true; // bank form show and hidde\n  lenthoffical; // length of offical data\n  lenthperosnal; // length of personal data\n  payrollDetailsForm: any; //payroll form name\n  payrollData: any []; //list data of payoll\n  payrollList: Boolean = true; // flag of payroll list\n  payrollForm: Boolean = true; // flag of payroll form\n  payollDataLength; // checke length of payoll Data\n  paymentType = ['Cash', 'Cheque', 'Tansfer to Bank Account'];\n  biodata:any[]; // bio data api data\n  bioForm:Boolean = true; //bio form flag\n  bioList: Boolean =true; // bio list glag\n  errorMsgg: String;\n  languageSkillList: Boolean = false; // language skill list flag\n  lsnguageSkillForm: Boolean = false; // language skill form flag\n  addLanguageBtn: Boolean = true; // btn flag for add language\n  languageSkillForm: any; // language skill form name\n  LanguageData: any [];\n  languageSkillTitle;\n  percentErrorMsg = 'Percent is Required';\n  payrollGradeRuleList: any;\n  payrollGradeRuleName: any;\n  basicDetailsData = [];\n  educationalStatus = ['Completed','Pursuing'];\n  employeeLeaveData: any; //list data of leave\n  employeeLeaveList: Boolean = true; // flag of leave list\n  employeeLeaveForm: Boolean = true; // flag of leave form\n  employeeLeaveDetailsForm: FormGroup; //employee Leave settings form\n  employeeLeaveDataLength; // checke length of payoll Data\n  leaveSettingHeadingButton: String;\n  leaveSettingButton = true;\n  leaveSettingId: any;\n  existingDocumentLength: any;\n  uploadForm: any;\n  idProofsData: any; //list data of Employee Id's\n  idProofsList: Boolean = true; // flag of Id's list\n  idProofsForm: Boolean = true; // flag of Id's form\n  idProofsDetailsForm: any; //employee Id's Details form\n  idProofsDataLength; // checke length of Id's Data\n  idProofsHeadingButton: String;\n  idProofsSettingButton = true;\n  idProofsSettingId: any;\n\n  bannBtn = 'Submit';\n  experienceBtn = 'Submit';\n  educationBtnadd = 'Submit';\n  addfamilyBtn = 'Submit';\n  skillLanguageBtn = 'Submit';\n  payrollButton = 'Submit';\n  languageSkillEditId;\n  leaveButton = 'Submit';\n  idProofsButton = 'Submit';\n\nconstructor(public fb: FormBuilder,\n  private docApi: DocumentServices,\n  private api: EmployeeService,\n  public ngZone: NgZone,\n  private router: Router,\n  private route:ActivatedRoute,\n  private skillApi:skillCategoryApiService,\n  private http: HttpClient,\n  private util:UtilitiesService  ) { }\n\n\n\n\nngOnInit() {\n  this.snapShotParam = this.route.snapshot.paramMap.get(\"employeeId\");\n  (this.snapShotParam === null)? this.basicDetail = 'Submit': this.basicDetail = 'Update';\n  this.getTlList();\n  this.existingBasicDetails();\n  this.formDataValidation();\n  this.listDocument();\n  this.getList();\n  this.addressValidation();\n  this.educationDetailsValidation();\n  this.empBioValidation();\n  this.bankDataValidation();  // this function use in upload bank details for validation check\n  this.experienceValidation(); // this function use in data validation for work Expeience\n  this.skillCate(); // this function use in skill categray\n  this.addMemberValidation(); // this function use for check validation of add member relation\n  this.payrollValidation(); // this.payollvalidation function to fill value\n  this.languageSkillValidation(); // check validation\n  this.leaveSettingForm();\n  this.uploadImageForm();\n  this.idProofsSettingForm();\n  (document.getElementById('headerCompanyDropDown')as HTMLInputElement).setAttribute('disabled','disabled');\n}\n\n/**\n * Basic Form Functionality Start From Here\n * Basic Form Validation While Adding an Employee\n */\n\nformDataValidation() {\n  this.employeeBasicForm = this.fb.group({\n    departmentId: new FormControl('', Validators.required),\n    branchId: new FormControl('', Validators.required),\n    companyId: new FormControl('', Validators.required),\n    jobProfileId: new FormControl('', Validators.required),\n    name: new FormControl('', Validators.required),\n    dob: new FormControl('', Validators.required),\n    contactDetails: new FormGroup({\n      personal: new FormGroup({\n        phone: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(12),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n        ])),\n        landLineNum: new FormControl('', Validators.compose([\n          Validators.minLength(10),\n          Validators.maxLength(12),\n          Validators.pattern('^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$'),\n        ])),\n        email: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n        ])),\n      }),\n      official: new FormGroup({\n        phone: new FormControl('', Validators.compose([\n          Validators.minLength(10),\n          Validators.maxLength(12),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n        ])),\n        landLineNum: new FormControl('', Validators.compose([\n          Validators.minLength(10),\n          Validators.maxLength(15),\n          Validators.pattern('^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$'),\n        ])),\n        email: new FormControl(\"\", Validators.compose([Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n        ])),\n      })\n    }),\n    officialEmailAsLoginEmail: new FormControl(false),\n    isTL: new FormControl(false),\n    tlId: new FormControl('')\n\n  })\n}\n\n/**\n * Functionality While Updating Employee Basic Details\n * Validation While Updating Employee Basic Details\n */\n\nexistingBasicDetails(){\n  this.api.employeeList(this.snapShotParam).subscribe(data=>{\n    if(data.status === 'success'){\n      this.basicDetailsData.push(data.data);\n      for (var i = 0; i < this.basicDetailsData.length; i++) {\n        if(this.snapShotParam != null){\n          this.onSelect(this.basicDetailsData[i].companyId);\n          this.getDepartmentListData(this.basicDetailsData[i].branchId);\n        }\n        this.employeeBasicForm = this.fb.group({\n          departmentId: new FormControl(this.basicDetailsData[i].departmentId),\n          branchId: new FormControl(this.basicDetailsData[i].branchId),\n          jobProfileId: new FormControl(this.basicDetailsData[i].jobProfileId),\n          companyId: new FormControl(this.basicDetailsData[i].companyId),\n          name: new FormControl(this.basicDetailsData[i].employeeName),\n          dob: new FormControl(this.basicDetailsData[i].dob),\n          contactDetails: new FormGroup({\n            personal: new FormGroup({\n              phone: new FormControl(this.basicDetailsData[i].personalContactNum,Validators.compose([\n                Validators.minLength(10),\n                Validators.maxLength(12),\n                Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n              ])),\n              landLineNum: new FormControl(this.basicDetailsData[i].personalPhoneNum,Validators.compose([\n                Validators.minLength(10),\n                Validators.maxLength(12),\n                Validators.pattern('^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$'),\n              ])),\n              email: new FormControl(this.basicDetailsData[i].personalEmail,Validators.compose([\n                Validators.required,\n                Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n              ])),\n            }),\n            official: new FormGroup({\n              phone: new FormControl(this.basicDetailsData[i].officialContactNum,Validators.compose([\n                Validators.minLength(10),\n                Validators.maxLength(12),\n                Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n              ])),\n              landLineNum: new FormControl(this.basicDetailsData[i].officialPhoneNum,Validators.compose([\n                Validators.minLength(10),\n                Validators.maxLength(12),\n                Validators.pattern('^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$'),\n              ])),\n              email: new FormControl(this.basicDetailsData[i].officialEmail,Validators.compose([\n                Validators.required,\n                Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n              ])),\n            })\n          }),\n          officialEmailAsLoginEmail: new FormControl(false),\n          isTL: new FormControl(false),\n          tlId: new FormControl('')\n        })\n      }\n    }\n  })\n}\n\n/**\n * Calling for API for Submit Data and Update Date\n * Clean Reactive Form Validation was Added here\n */\n\nemployeeForm() {\n  try {\n    // Clean Form\n    let cleanBasicDetailForm = this.util.cleanFormLevelTwo(this.employeeBasicForm);\n    if(this.snapShotParam === null){\n      if (this.employeeBasicForm.valid) {\n        this.api.submitData(cleanBasicDetailForm.value).subscribe((data) => {\n          if (data.status == \"success\" || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            this.hidden = data.data.employeeDetails._id;\n            setTimeout(() => {\n              this.ngZone.run(() => this.router.navigateByUrl(`/pages/employee-wizard/employee-profile/${this.hidden}`));\n              this.handleErrroMessage();\n            }, 1500);\n          }\n          else if (data.status == \"error\" || data.status === 404) {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.handleErrroMessage();\n            }, 1500);\n          }\n        })\n      }\n    } else {\n      if (this.employeeBasicForm.valid) {\n        this.api.updateEmployeeBasicDetails(cleanBasicDetailForm.value,this.snapShotParam).subscribe((data) => {\n          if (data.status == \"success\" || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.handleErrroMessage();\n            }, 1500);\n          }\n          else if (data.status == \"error\" || data.status === 404) {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.handleErrroMessage();\n            }, 1500);\n          }\n        })\n      }\n    }\n\n  } catch (err) {\n    console.log(err);\n  }\n}\n\n// checkbox for officail details as personal details\n\nsameAsPersonalDetails(action){\n  if(action === false){\n    this.actionBox = true;\n  } else if(action === true){\n    this.actionBox = false;\n  }\n\n  if(this.actionBox === true){\n    this.existingPersonalDetails = this.employeeBasicForm.value.contactDetails.personal;\n    this.employeeBasicForm.get('contactDetails.official.phone').setValue(this.existingPersonalDetails.phone);\n    this.employeeBasicForm.get('contactDetails.official.landLineNum').setValue(this.existingPersonalDetails.landLineNum);\n    this.employeeBasicForm.get('contactDetails.official.email').setValue(this.existingPersonalDetails.email);\n  } else if (this.actionBox === false){\n    this.employeeBasicForm.get('contactDetails.official.phone').setValue('');\n    this.employeeBasicForm.get('contactDetails.official.landLineNum').setValue('');\n    this.employeeBasicForm.get('contactDetails.official.email').setValue('');\n  }\n}\n\n// Whole Functionality Ends Here For Basic Details!!\n\n\n/**\n * Employee Bio Details Form Functionality Start from here\n * Validation While Updating Employee Bio Details\n */\n\nempBioValidation() {\n  try {\n    this.employeeBioForm = this.fb.group({\n      bio: new FormGroup({\n        height: new FormControl('',Validators.compose([Validators.pattern(/^[1-9]'((\\s?)(-?)(\\s?)([0-9]|(1[0-1]))\\\")?$/)])),\n        weight: new FormControl('',Validators.compose([Validators.pattern(/^\\d{2,3} ?kg$/)])),\n        color: new FormControl(''),\n        moleIdentification: new FormControl(''),\n        bloodGroup: new FormControl('',Validators.compose([Validators.pattern(/^(A|B|AB|O)[+-]$/)])),\n        eyePower: new FormControl(''),\n        handicapped: new FormControl(false),\n        handicappedPercent: new FormControl('',Validators.compose([Validators.pattern(/(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/i)])),\n        multipleHandicapped: new FormControl(false),\n        multipleHandicappedPercent: new FormControl('',Validators.compose([Validators.pattern(/(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/i)])),\n        illness: new FormGroup({\n          physical: new FormGroup({\n            physicalIllnessName: new FormControl(''),\n            treatmentName: new FormControl(''),\n            hospitalName: new FormControl(''),\n            treatmentDuration: new FormControl(''),\n            illnessStatus: new FormControl(''),\n          }),\n          mental: new FormGroup({\n            mentalIllnessName: new FormControl(''),\n            treatmentName: new FormControl(''),\n            hospitalName: new FormControl(''),\n            treatmentDuration: new FormControl(''),\n            illnessStatus: new FormControl(''),\n          })\n        })\n      })\n    })\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\n/**\n * Functionality while updating Employee Bio Details\n * Employee Bio Details Form Validation\n */\n\nbioEdit(){\n  this.bioList = false;\n  this.bioForm = true;\n  this.shown = this.biodata[0].multipleHandicapped;\n  this.show = this.biodata[0].handicapped;\n  for(var i=0;i<this.biodata.length;i++){\n    this.employeeBioForm = this.fb.group({\n      bio: new FormGroup({\n        height: new FormControl(this.biodata[i].height,Validators.compose([Validators.pattern(/^[1-9]'((\\s?)(-?)(\\s?)([0-9]|(1[0-1]))\\\")?$/)])),\n        weight: new FormControl(this.biodata[i].weight,Validators.compose([Validators.pattern(/^\\d{2,3} ?kg$/)])),\n        color: new FormControl(this.biodata[i].color),\n        moleIdentification: new FormControl(this.biodata[i].moleIdentification),\n        bloodGroup: new FormControl(this.biodata[i].bloodGroup,Validators.compose([Validators.pattern(/^(A|B|AB|O)[+-]$/)])),\n        eyePower: new FormControl(this.biodata[i].eyePower),\n        handicapped: new FormControl(this.biodata[i].handicapped),\n        handicappedPercent: new FormControl(this.biodata[i].handicappedPercent,Validators.compose([Validators.pattern(/(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/i)])),\n        multipleHandicapped: new FormControl(this.biodata[i].multipleHandicapped),\n        multipleHandicappedPercent: new FormControl(this.biodata[i].multipleHandicappedPercent,Validators.compose([Validators.pattern(/(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/i)])),\n        illness: new FormGroup({\n          physical: new FormGroup({\n            physicalIllnessName: new FormControl(this.biodata[i].illness.physical.physicalIllnessName),\n            treatmentName: new FormControl(this.biodata[i].illness.physical.treatmentName),\n            hospitalName: new FormControl(this.biodata[i].illness.physical.hospitalName),\n            treatmentDuration: new FormControl(this.biodata[i].illness.physical.treatmentDuration),\n            illnessStatus: new FormControl(this.biodata[i].illness.physical.illnessStatus),\n          }),\n          mental: new FormGroup({\n            mentalIllnessName: new FormControl(this.biodata[i].illness.mental.mentalIllnessName),\n            treatmentName: new FormControl(this.biodata[i].illness.mental.treatmentName),\n            hospitalName: new FormControl(this.biodata[i].illness.mental.hospitalName),\n            treatmentDuration: new FormControl(this.biodata[i].illness.mental.treatmentDuration),\n            illnessStatus: new FormControl(this.biodata[i].illness.mental.illnessStatus),\n          })\n        })\n      })\n    })\n  }\n}\n\n/**bio list data function configuration */\nbioListData(){\n  this.api.bioDataList(this.snapShotParam).subscribe(data=>{\n    if(data.status === 200 || data.status === 'success'){\n      if(Object.keys(data.data).length === 3){\n        this.bioList= false;\n        this.bioForm= true;\n        this.employeeBioButton = 'Submit';\n      }else{\n        this.employeeBioButton = 'Update';\n        this.bioList= true;\n        this.bioForm= false;\n        this.biodata = data.data;\n        this.biodata = Array.of(this.biodata);\n      }\n    }\n  })\n}\nemployeeBioFormData() {\n  try{\n    let cleanBioData = this.util.cleanFormLevelThree(this.employeeBioForm);\n    if(this.employeeBioButton === 'Submit'){\n      this.api.submitBioData(cleanBioData.value, this.snapShotParam).subscribe(data => {\n        if (data.status === \"success\" || data.status === 200) {\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.bioListData();\n            this.handleErrroMessage();\n          },1000)\n        } else if (data.status === \"error\" || data.status === 404) {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(() => {\n            this.handleErrroMessage();\n          },2000)\n        }\n      })\n    } else if(this.employeeBioButton === 'Update'){\n      this.api.updateBio(cleanBioData.value, this.snapShotParam).subscribe(data =>{\n        if (data.status === \"success\" || data.status === 200) {\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.bioListData();\n            this.handleErrroMessage();\n          },1000)\n        } else if (data.status === \"error\" || data.status === 404) {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(() => {\n            this.handleErrroMessage();\n          },2000)\n        }\n      })\n    }\n\n  } catch(err){\n    console.log(err);\n  }\n\n}\n\n/**\n *\n * @Function setValidators(),updateValueAndValidity(),clearValidators()\n * Predefined Function Of Reactive Form\n */\n\ncheck(value: String) {\nlet dynamicValidation = {'dynamic':[Validators.required, Validators.pattern(/(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/i)]};\n  if (value === \"true\") {\n    if(this.employeeBioButton === 'Update'){\n      this.employeeBioForm.get('bio.handicappedPercent').setValue('');\n      this.employeeBioForm.get('bio.handicappedPercent').setValidators(dynamicValidation['dynamic']);\n      this.employeeBioForm.get('bio.handicappedPercent').updateValueAndValidity();\n    } else {\n      this.show = true;\n      this.employeeBioForm.get('bio.handicapped').setValue(true);\n      this.employeeBioForm.get('bio.handicappedPercent').setValidators(dynamicValidation['dynamic']);\n      this.employeeBioForm.get('bio.handicappedPercent').updateValueAndValidity();\n    }\n  } else {\n    this.show = false;\n    this.employeeBioForm.get('bio.handicapped').setValue(false);\n    this.employeeBioForm.get('bio.handicappedPercent').clearValidators();\n    this.employeeBioForm.get('bio.handicappedPercent').updateValueAndValidity();\n  }\n}\n\n/**\n *\n * @Function setValidators(),updateValueAndValidity(),clearValidators()\n * Predefined Function Of Reactive Form\n */\n\nchecked(value: String) {\n  let dynamicValidation = {'dynamic':[Validators.required, Validators.pattern(/(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/i)]}\n  if (value === \"true\") {\n    if(this.employeeBioButton === 'Update'){\n      this.employeeBioForm.get('bio.multipleHandicappedPercent').setValue('');\n      this.employeeBioForm.get('bio.multipleHandicappedPercent').setValidators(dynamicValidation['dynamic']);\n      this.employeeBioForm.get('bio.multipleHandicappedPercent').updateValueAndValidity();\n    } else {\n      this.shown = true;\n      this.employeeBioForm.get('bio.multipleHandicapped').setValue(true);\n      this.employeeBioForm.get('bio.multipleHandicappedPercent').setValidators(dynamicValidation['dynamic']);\n      this.employeeBioForm.get('bio.multipleHandicappedPercent').updateValueAndValidity();\n    }\n  } else {\n    this.shown = false;\n    this.employeeBioForm.get('bio.multipleHandicapped').setValue(false);\n    this.employeeBioForm.get('bio.multipleHandicappedPercent').clearValidators();\n    this.employeeBioForm.get('bio.multipleHandicappedPercent').updateValueAndValidity();\n  }\n}\n// Validations For Employee Bio\nbioValidationMessage = {\n  'height': [\n    { type: 'pattern', message: 'Height value is not acceptable.'},\n  ],\n  'weight': [\n    { type: 'pattern', message: 'Weight value is not acceptable.'},\n  ],\n  'bloodGroup': [\n    { type: 'pattern', message: 'Blood Group value is not acceptable.'},\n  ],\n  'handicappedPercent': [\n    { type: 'pattern', message: 'Percentage is not acceptable.'},\n    { type: 'required', message: 'Percentage is Required.'},\n\n  ],\n  'multipleHandicappedPercent': [\n    { type: 'pattern', message: 'Percentage value is not acceptable.'},\n    { type: 'required', message: 'Percentage is Required.'},\n\n  ]\n}\n/**Update address and show address*/\n\n/**\n * Address Form Functionality Start Fom Here\n * Address Form Validation Functionality\n */\naddressValidation() {\n  try {\n    this.employeeAddressForm = this.fb.group({\n      address: new FormGroup({\n        doorNum: new FormControl(''),\n        streetName1: new FormControl(''),\n        streetName2: new FormControl(''),\n        landmark: new FormControl(''),\n        // zipcode: new FormControl(''),\n        zipcode: new FormControl('', Validators.compose([Validators.required,\n          Validators.minLength(4),\n          Validators.maxLength(10),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n        ])),\n        district: new FormControl(''),\n        state: new FormControl(''),\n        addressType: new FormControl('Current'),\n      })\n    })\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\n//Address Validation Message\n\nvalidationMessageZip = {\n  'zipcode': [\n    { type: 'required', message: 'Zipcode is Required' },\n    { type: 'pattern', message: 'Invalid Zipcode' },\n    { type: 'minlength', message: 'Not a Zipcode ' },\n    { type: 'maxlength', message: 'Zipcode is too large' },\n  ],\n}\n\n// Address List Functionality\n\nshowAddress(){\n  this.api.oldAddress(this.snapShotParam).subscribe((data) =>{\n    if (data.status === 'success' || data.status === 200 ) {\n      if( data.data.length == 0 || data.status == 'error' || data.state == 400 ){\n        this.titleName = \"Add Address\";\n        this.addessBtn = false;\n        this.addAddess = true;\n        this.addressMsg = false;\n      } else {\n        this.addAddess = false;\n        this.addessBtn = true;\n        this.addressList = data.data;\n        this.addressMsg = true;\n      }\n    }\n  })\n}\n\n// Address driver function\n\naddNewAddress(){\n  this.employeeAddressForm.reset();\n  this.addessBtn = false;\n  this.titleName = \"Add Address\";\n  this.buttonName = \"Submit\";\n  this.addAddess = true;\n  this.addressId = ' ';\n\n}\n\n// Calling API for Add And Update Employee Address\n\naddressForm() {\n  try{\n    let cleanAddressForm = this.util.cleanFormLevelOne(this.employeeAddressForm);\n    if(this.addressId == \" \" || this.addressId ===null || this.addressId === undefined ){\n      this.api.submitAddress(cleanAddressForm.value, this.snapShotParam).subscribe((data) => {\n        if (data.status === \"success\" || data.status === 200) {\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.showAddress();\n            this.handleErrroMessage();\n          },1000)\n        } else if (data.status === \"error\" || data.status === 404) {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrroMessage();\n          })\n        }\n      })\n    }else{\n      this.api.updateAddess(cleanAddressForm.value, this.snapShotParam,this.addressId).subscribe((data) => {\n        if (data.status === \"success\" || data.status === 200) {\n          this.previousValue = data.data;\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.showAddress();\n            this.handleErrroMessage();\n          },1000)\n\n        } else if (data.status === \"error\" || data.status === 404) {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrroMessage();\n          })\n        }\n      })\n      this.addressId = \"\";\n    }\n  }catch(err){\n    console.log(err);\n  }\n\n}\n\n/**\n * Employee Address Update Functionality\n * Employee Address Fom Validation\n */\n\naddressEdit(id:String){\n  this.titleName = \"Update Address\";\n  this.buttonName = \"Update\";\n  this.addressId = id;\n  this.addAddess = true;\n  this.addessBtn = true;\n  this.addressList ;\n  for(var i =0;i<this.addressList.length; i++) {\n    if (this.addressList[i]._id === this.addressId){\n      this.employeeAddressForm = this.fb.group({\n        address: new FormGroup({\n          doorNum: new FormControl(this.addressList[i].doorNum),\n          streetName1: new FormControl(this.addressList[i].streetName1),\n          streetName2: new FormControl(this.addressList[i].streetName2),\n          landmark: new FormControl(this.addressList[i].landmark),\n          zipcode: new FormControl(this.addressList[i].zipcode),\n          district: new FormControl(this.addressList[i].district),\n          state: new FormControl(this.addressList[i].state),\n          addressType: new FormControl('Current'),\n        })\n      })\n    }\n  }\n}\n\ncancleAddForm(){\n  this.addressId = \" \";\n  this.addAddess = false;\n  this.addessBtn = true;\n}\n\n//Delete Employee Address\n\nremoveAddess(addressId:String){\n  const swalWithBootstrapButtons = Swal.mixin({\n    customClass: {\n    confirmButton: 'btn btn-success',\n    cancelButton: 'btn btn-danger'\n    },\n    buttonsStyling: false\n  })\n  swalWithBootstrapButtons.fire({\n    title: 'Are you sure?',\n    text: \"You want to delete it\",\n    type: 'warning',\n    showCancelButton: true,\n    confirmButtonText: 'Yes',\n    cancelButtonText: 'No',\n    reverseButtons: true\n  }).then((result) => {\n    if (result.value) {\n      this.api.deleteAddress(this.snapShotParam,addressId).subscribe((data)=>{\n      swalWithBootstrapButtons.fire(\n        'Deleted!',\n        data.message,\n        'success'\n      )\n      this.showAddress();\n    })\n    } else if (\n      result.dismiss === Swal.DismissReason.cancel\n    ) {\n      swalWithBootstrapButtons.fire(\n        'Cancelled',\n        'Your data is safe',\n        'error'\n      )\n    }\n  })\n}\n\n// Employee Address Whole Functinality Ends Here\n\n\n//Method for job profile list\ngetJobProfile(companyId) {\n  try {\n    this.api.getJobProfileListData(companyId).subscribe(data => {\n      if (data.status === 'success' || data.status === 200) {\n        this.jobProfileList = data.data;\n      }\n    })\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\n//For Form value and validation\neducationDetailsValidation() {\n  try {\n    this.empEducationForm = this.fb.group({\n      educationalDetails: new FormGroup({\n        courseName: new FormControl(''),\n        instituteName: new FormControl(''),\n        passOutYear: new FormControl('',Validators.compose([\n          Validators.required,\n          Validators.pattern(/^(19|20)\\d{2}$/)\n      ])),\n        status: new FormControl(''),\n        description: new FormControl(''),\n        scoredPercent: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.pattern(/(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/)\n        ])),\n      })\n    })\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\nvalidationMessageEducation = {\n  'passOutYear': [\n    { type: 'required', message: 'Pass Out Year is Required' },\n    { type: 'pattern', message: 'Invalid Year' },\n  ],\n  'scoredPercent': [\n    { type: 'required', message: 'Percentage is Required' },\n    { type: 'pattern', message: 'Invalid Percentage' },\n  ],\n}\n\n\n\n\n\n//Method for get company list\ngetList() {\n  try {\n    this.api.getCompanyData().subscribe(data => {\n      if (data.status === 'success' || data.status === 200) {\n        this.companyListData = data.company;\n      }\n    })\n  }\n  catch (err) {\n    console.log(err.message);\n  }\n}\n\n//Method for Show branch list\nshowBranchList(companyId: String) {\n  try {\n    this.api.getBranchListData(companyId).subscribe((data) => {\n      if (data.status === \"success\" || data.status === 200) {\n        this.branch = data.branch.length;\n        this.branchList = data.branch;\n      }\n    })\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n\n//Method for set selected value according to companyId.\nonSelect(companyId) {\n  try {\n    this.showBranchList(companyId);\n    this.getJobProfile(companyId);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\n/* Method for set selected value according to branchId. */\nonClick(branchId) {\n  try {\n    this.getDepartmentListData(branchId);\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\nscroll(element) {\n  element.scrollIntoView();\n}\n\n// Get DepartmentList\ngetDepartmentListData(branchId: string) {\n  try {\n    this.api.getDepartmentData(branchId).subscribe((data) => {\n      if (data.status === \"success\" || data.status === 200) {\n        this.departmentList = data.department;\n      }\n    })\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\n//Method for show validation message\nvalidationMessage = {\n  'name': [\n    { type: 'required', message: 'Name is required' },\n  ],\n  'departmentId': [\n    { type: 'required', message: 'Department Name is required' },\n  ],\n  'branchId': [\n    { type: 'required', message: 'Branch Name is required' },\n  ],\n  'companyId': [\n    { type: 'required', message: 'Company Name is required' },\n  ],\n  'jobProfileId': [\n    { type: 'required', message: 'Job Profile Name is required' },\n  ],\n  'dob': [\n    { type: 'required', message: 'Birthday Date is required' },\n  ],\n  'email': [\n    { type: 'required', message: 'Email is required' },\n    { type: 'pattern', message: 'Enter a valid email' },\n  ],\n  'phone': [\n    { type: 'required', message: 'Phone number is required' },\n    { type: 'pattern', message: 'Invalid Phone Number' },\n    { type: 'minlength', message: 'Not a phone number ' },\n    { type: 'maxlength', message: 'Phone no. is too large' },\n  ],\n  'landLineNum': [\n    { type: 'pattern', message: 'Invalid Landline Number' },\n    { type: 'minlength', message: 'Not a Landline number ' },\n    { type: 'maxlength', message: 'Landline no. is too large' },\n  ],\n\n}\n\n/** Upload Document ts file configration start here */\nlistDocument() {\n  try {\n    this.docApi.documentData().subscribe(data => {\n      if (data.status === 'success' || data.status === 200) {\n        this.docData = data.data;\n      }\n    })\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\nhandleInputChange(e) {\n  var file = e.dataTransfer ? e.dataTransfer.files[0] : e.target.files[0];\n  var pattern = /image-*/;\n  var reader = new FileReader();\n  if (!file.type.match(pattern)) {\n    alert('Image Format is not valid');\n    return;\n  }\n  reader.onload = this._handleReaderLoaded.bind(this);\n  reader.readAsDataURL(file);\n}\n\n_handleReaderLoaded(e) {\n  let reader = e.target;\n  this.imageSrc = reader.result;\n  this.imagePath = this.imageSrc;\n}\n\nremove() {\n  alert(\"Remove button is working\");\n}\n\ncounter(i: number) {\n  return new Array(i);\n}\n/** Upload Document ts file configration End here */\n\n\n/** skill category functions */\nskillCate() {\n  this.skillApi.skillCategoryData().subscribe(data => {\n    if(data.status === 'success' || data.status === 200) {\n      this.skillValue  = data.skillCategory;\n    }\n  })\n}\n/** skill category functions */\n\n/** add Family  */\nonSelectRelation(value) {\n  this.showForm = value;\n}\n\n//add family details form validation\naddMemberValidation() {\n  this.addRelationForm = this.fb.group({\n    family: new FormGroup({\n      members: new FormGroup({\n        relation: new FormControl(\"Father\", Validators.required),\n        name: new FormControl(''),\n        age: new FormControl('',Validators.compose([Validators.pattern(/^(0?[1-9]|[1-9][0-9]|[1][1-9][1-9]|200)$/)])),\n        occupation: new FormControl(''),\n        education: new FormControl(''),\n        income: new FormControl(''),\n      })\n    }),\n    familyType: new FormControl('Joint'),\n  })\n}\n\n\nvalidationMessageFamily = {\n  'age': [\n    { type: 'pattern', message: 'Invalid Age' },\n  ],\n}\n\nupdateValidation(familyId:String) {\n  try {\n    this.addfamilyBtn = 'Update';\n    this.showAddFamilyButton = false;\n      this.familyIdValue = familyId;\n      this.formShow = true;\n      this.title = \"Update\";\n      for (var i = 0; i < this.familyDetailsList.length; i++) {\n        if (this.familyDetailsList[i]._id === familyId) {\n          console.log(\"n\",this.familyDetailsList[i]._id);\n          console.log(\"v\",this.familyId);\n\n          this.addRelationForm = this.fb.group({\n            family: new FormGroup({\n              members: new FormGroup({\n                relation: new FormControl(this.familyDetailsList[i].relation, Validators.required),\n                name: new FormControl(this.familyDetailsList[i].name),\n                age: new FormControl(this.familyDetailsList[i].age,Validators.compose([Validators.pattern(/^(0?[1-9]|[1-9][0-9]|[1][1-9][1-9]|200)$/)])),\n                occupation: new FormControl(this.familyDetailsList[i].occupation),\n                education: new FormControl(this.familyDetailsList[i].education),\n                income: new FormControl(this.familyDetailsList[i].income),\n              })\n            }),\n            familyType: new FormControl(this.familyTypeList),\n          })\n        }\n      }\n  } catch (err) {\n    console.log(err.message);\n  }\n\n}\n/** add family */\n\n//Method for onclick on button show form and hide current button\nshowAddFamilyForm(){\n  this.familyIdValue = \"\";\n  this.addfamilyBtn = 'Submit';\n  this.formShow = true;\n  this.addRelationForm.reset();\n  this.title = \"Add\";\n  this.showAddFamilyButton = false;\n\n}\n\n//Function for onclick button for hide form\ncancelValue(){\n  this.formShow = false;\n  this.showAddFamilyButton = true;\n}\n\n//Method for add and update employee details\naddFamilyDetails() {\n  this.addfamilyBtn = 'submit';\n  try {\n  let cleanFamilyForm = this.util.cleanFormLevelThree(this.addRelationForm);\n  this.showAddFamilyButton = true;\n    if( this.familyId.nativeElement.value === \"\" ){\n      this.api.addFamilyMember(cleanFamilyForm.value, this.snapShotParam).subscribe(data => {\n      if (data.status === 'success' || data.status === 200) {\n        this.successMessage = true;\n        this.errorMsg = false;\n        this.successMsg = data.message;\n        setTimeout(() => {\n          this.getFamilyDetails();\n          this.handleErrroMessage();\n        }, 500);\n        this.addRelationForm.reset();\n      } else if (data.status === \"error\" || data.status === 404) {\n        this.errorMsg = true;\n        this.successMessage = false;\n        this.errMsg = data.message;\n        setTimeout(()=>{\n          this.handleErrroMessage()\n        },2000);\n      }\n    })\n    }\n    else{\n      if(this.addRelationForm.valid){\n        this.api.updateFamilyDetails(cleanFamilyForm.value, this.snapShotParam, this.familyId.nativeElement.value).subscribe((data)=>{\n          if (data.status === \"success\" || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            setTimeout(() =>{\n              this.getFamilyDetails();\n              this.handleErrroMessage();\n            },1000)\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(()=>{\n              this.handleErrroMessage()\n            },2000);\n          }\n        })\n      }\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\n\n//Get family details\ngetFamilyDetails() {\n  try {\n    this.formShow = false;\n    this.api.getFamilyData(this.snapShotParam).subscribe(response => {\n      if (response.status === \"success\" || response.status === 200) {\n        if (response.data.familyDetails.length > 0) {\n          this.divShow = true;\n          this.familyDetailsList = response.data.familyDetails;\n          this.familyTypeList = response.data.familyType;\n        } else if(response.data.familyDetails.length === 0){\n          this.divShow = false;\n          this.showAddFamilyForm();\n        }\n      }\n      else if(response.status === \"error\" || response.status === 404) {\n      }\n    })\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\n//Method for remove company branch\ndeleteFamilyDetails(familyId: String) {\n  try {\n    const swalWithBootstrapButtons = Swal.mixin({\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger'\n      },\n      buttonsStyling: false\n    })\n    swalWithBootstrapButtons.fire({\n      title: 'Are you sure?',\n      text: \"You want to delete it\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'No',\n      reverseButtons: true\n    }).then((result) => {\n      if (result.value) {\n        this.api.removeFamilyDetails(this.snapShotParam, familyId).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            swalWithBootstrapButtons.fire(\n              'Deleted!',\n              data.message,\n              'success'\n            )\n            this.getFamilyDetails();\n\n          }\n        })\n      } else if (\n        result.dismiss === Swal.DismissReason.cancel\n      ) {\n        swalWithBootstrapButtons.fire(\n          'Cancelled',\n          'Your data is safe',\n          'error'\n        )\n      }\n    })\n  }\n  catch (err) {\n    console.log(err.message);\n  }\n}\n\n\n/**Update Education details */\nshowEducationDetails(){\n  this.api.educationDetails(this.snapShotParam).subscribe(data => {\n    if(data.status === 'success') {\n      if(data.data.length == 0){\n        this.education = \"Education-Details\";\n        this.EducationForm = true;\n        this.listMesg = false;\n        this.educationBtn= false;\n      } else {\n        this.EducationForm = false;\n        this.educationBtn = true;\n        this.educationData = data.data;\n        this.listMesg = true;\n      }\n    } else {\n      this.errorMsg = true;\n    }\n  })\n}\n\n\nswitchTypeValidation(inputValue:Number){\n  if(inputValue >0 && inputValue <= 100 ){\n      this.percentErrorMsg = '';\n      this.errorMsgg = '';\n  } else if((inputValue).toString().length == 0){\n      this.percentErrorMsg = 'Percent is Required';\n      this.errorMsgg = '';\n  } else if((inputValue).toString().length > 6) {\n      this.percentErrorMsg = 'Percent Value is too Large';\n      this.errorMsgg = '';\n  } else {\n      this.percentErrorMsg = '';\n      this.errorMsgg = 'Enter value is not valid';\n  }\n}\n\neducationEdit(id){\n  this.eduBtn = \"Update\";\n  this.educationBtnadd = 'Update';\n  this.education = \"Update Education-Details\";\n  this.educationCurentId = id;\n  this.EducationForm = true;\n  this.educationData;\n  // const len = Object.keys(this.educationData).length;\n  for(var i =0;i<this.educationData.length; i++) {\n  if (this.educationData[i]._id === this.educationCurentId){\n  this.empEducationForm = this.fb.group({\n    educationalDetails: new FormGroup({\n      courseName: new FormControl(this.educationData[i].courseName),\n      instituteName: new FormControl(this.educationData[i].instituteName),\n      passOutYear: new FormControl(this.educationData[i].passOutYear,Validators.compose([\n        Validators.required,\n        Validators.pattern(/^(19|20)\\d{2}$/)\n    ])),\n      status: new FormControl(this.educationData[i].status),\n      description: new FormControl(this.educationData[i].description),\n      // scoredPercent: new FormControl(this.educationData[i].scoredPercent),\n      scoredPercent: new FormControl(this.educationData[i].scoredPercent, Validators.compose([\n        Validators.required,\n        Validators.pattern(/(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/)\n    ])),\n    })\n  })\n}\n}\n}\n\nremoveEducation(id:String){\n  const swalWithBootstrapButtons = Swal.mixin({\n    customClass: {\n    confirmButton: 'btn btn-success',\n    cancelButton: 'btn btn-danger'\n    },\n    buttonsStyling: false\n  })\n  swalWithBootstrapButtons.fire({\n    title: 'Are you sure?',\n    text: \"You want to delete it\",\n    type: 'warning',\n    showCancelButton: true,\n    confirmButtonText: 'Yes',\n    cancelButtonText: 'No',\n    reverseButtons: true\n  }).then((result) => {\n    if (result.value) {\n      this.api.removeEducation(this.snapShotParam,id).subscribe((data)=>{\n      swalWithBootstrapButtons.fire(\n        'Deleted!',\n        data.message,\n        'success'\n      )\n      this.showEducationDetails();\n    })\n    } else if (\n      result.dismiss === Swal.DismissReason.cancel\n    ) {\n      swalWithBootstrapButtons.fire(\n        'Cancelled',\n        'Your list data safe',\n        'error'\n      )\n    }\n  })\n}\n\naddNewEducation() {\n  this.eduBtn = \"Submit\";\n  this.educationBtn= false;\n  this.education = \"Education-Details\";\n  this.empEducationForm.reset();\n  this.EducationForm = true;\n  this.educationCurentId = \" \";\n\n}\n\ncancleEducation(){\n  this.EducationForm = false;\n  this.educationBtn = true;\n  this.educationCurentId = \" \";\n}\n\neducationForm() {\n  try {\n    let cleanEducationalFormData = this.util.cleanFormLevelOne(this.empEducationForm);\n    if(this.educationCurentId == \" \" || this.educationCurentId === null || this.educationCurentId === undefined){\n      this.api.submitEducationalData(cleanEducationalFormData.value, this.snapShotParam).subscribe(data => {\n        if (data.status === \"success\" || data.status === 200) {\n          this.previousValue = data.data;\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.showEducationDetails();\n            this.handleErrroMessage();\n          },1000);\n\n        } else if (data.status === \"error\" || data.status === 404) {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrroMessage();\n          },2000);\n        }\n      })\n    } else {\n      this.api.updateEducation(cleanEducationalFormData.value,this.snapShotParam,this.educationCurentId).subscribe(data => {\n        if (data.status === \"success\" || data.status === 200) {\n          this.previousValue = data.data;\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.showEducationDetails();\n            this.handleErrroMessage();\n          },1000);\n\n        } else if (data.status === \"error\" || data.status === 404) {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrroMessage();\n          },2000);\n        }\n      })\n      this.educationCurentId = \"\" ;\n    }\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\n/**Update Education details */\n\n\n/**Update work exprience */\nshowWorkList(){\n  this.api.workExprience(this.snapShotParam).subscribe(data => {\n    if(data.status === 'success') {\n      if(data.data.length == 0){\n        this.exprienceTitle = \"Work Experience\";\n        this.addExpbtn = false;\n        this.workExperience = true;\n        this.listExprience = false;\n      } else {\n        this.workExperience = false;\n        this.exprienceListData = data.data;\n        this.listExprience = true;\n        this.addExpbtn= true;\n      }\n    } else {\n      this.errorMsg = true;\n    }\n  })\n}\n\nexpriceneEdit(id){\n  this.exprienceTitle = \"Update Experience\";\n  this.experienceBtn = 'Update';\n  this.workExperience = true;\n  this.addExpbtn = true;\n  this.expCurentId = id;\n  for(var i =0;i<this.exprienceListData.length; i++){\n    if(this.exprienceListData[i]._id === this.expCurentId){\n      this.workExperienceForm = this.fb.group({\n        workExperiences: new FormGroup({\n          companyName: new FormControl(this.exprienceListData[i].companyName),\n          designation: new FormControl(this.exprienceListData[i].designation),\n          experienceYears: new FormControl(this.exprienceListData[i].experienceYears,Validators.compose([\n            Validators.pattern(/(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/i),\n            Validators.max(40),\n          ])),\n          jobDescription: new FormControl(this.exprienceListData[i].jobDescription),\n          relivingReason: new FormControl(this.exprienceListData[i].relivingReason),\n          relivingIs: new FormControl(this.exprienceListData[i].relivingIs),\n          remarks: new FormControl(this.exprienceListData[i].remarks),\n        })\n      })\n    }\n  }\n}\n\nremoveExpeience(id){\n  const swalWithBootstrapButtons = Swal.mixin({\n    customClass: {\n    confirmButton: 'btn btn-success',\n    cancelButton: 'btn btn-danger'\n    },\n    buttonsStyling: false\n  })\n  swalWithBootstrapButtons.fire({\n    title: 'Are you sure?',\n    text: \"You want to delete it\",\n    type: 'warning',\n    showCancelButton: true,\n    confirmButtonText: 'Yes',\n    cancelButtonText: 'No',\n    reverseButtons: true\n  }).then((result) => {\n    if (result.value) {\n      this.api.removeExprience(this.snapShotParam,id).subscribe((data)=>{\n      swalWithBootstrapButtons.fire(\n        'Deleted!',\n        data.message,\n        'success'\n      )\n      this.showWorkList();\n    })\n    } else if (\n      result.dismiss === Swal.DismissReason.cancel\n    ) {\n      swalWithBootstrapButtons.fire(\n        'Cancelled',\n        'Your list data safe',\n        'error'\n      )\n    }\n  })\n}\n\ncancleExperience(){\n  this.workExperience = false;\n  this.addExpbtn=true;\n}\n\naddExperience(){\n  this.workExperienceForm.reset();\n  this.experienceBtn = 'Submit';\n  this.exprienceTitle = \"Add Experience\";\n  this.workExperience = true;\n  this.addExpbtn = false;\n  this.expCurentId = '';\n}\n\n/**upload work Experience */\naddWorkExp() {\n  try {\n    let cleanWorkExperienceForm = this.util.cleanFormLevelOne(this.workExperienceForm);\n    if(this.expCurentId == '' || this.expCurentId == null){\n      this.api.experiAdd(cleanWorkExperienceForm.value, this.snapShotParam).subscribe(data => {\n        if (data.status === \"success\" || data.status === 200) {\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.showWorkList();\n            this.handleErrroMessage();\n          },1000)\n        } else if (data.status === \"error\" || data.status === 404) {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrroMessage()\n          },2000)\n        }\n      })\n    } else {\n      this.api.updateWokExprience(cleanWorkExperienceForm.value,this.snapShotParam,this.expCurentId).subscribe(data=>{\n        if (data.status === \"success\" || data.status === 200) {\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.showWorkList();\n            this.handleErrroMessage();\n          },1000)\n        } else if (data.status === \"error\" || data.status === 404) {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrroMessage()\n          },2000)\n        }\n\n      })\n    }\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\nvalidationMessageExper = {\n  'experienceYears': [\n    { type: 'pattern', message: 'Invalid Experience Years' },\n    { type: 'max', message: 'Experience Years should be less than 40'}\n  ],\n}\n\n\nexperienceValidation() {\n  try {\n    this.workExperienceForm = this.fb.group({\n      workExperiences: new FormGroup({\n        companyName: new FormControl(''),\n        designation: new FormControl(''),\n        experienceYears: new FormControl('',Validators.compose([\n          Validators.pattern(/(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/i),\n          Validators.max(40),\n        ])),\n        jobDescription: new FormControl(''),\n        relivingReason: new FormControl(''),\n        relivingIs: new FormControl(''),\n        remarks: new FormControl(''),\n      })\n    })\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n/** upload work experience */\n/** Update work exprience */\n\n\n\n/**Bank details update delete */\nbankDetails(){\n  try{\n    this.actionBox = false;\n    this.api.bankDetailsList(this.snapShotParam).subscribe(data=>{\n      if(data.status === 'success' || data.status === 200){\n          this.lenthoffical = Object.keys(data.data.official).length;\n          this.lenthperosnal = Object.keys(data.data.personal).length;\n        if(this.lenthoffical == 0 || this.lenthperosnal == 0){\n          this.bankList = false;\n          this.bankForm = true;\n          this.bankDetailsForm.reset();\n        }else{\n          this.bankListData = data.data;\n          this.bankListData = Array.of(this.bankListData);\n          this.bankList = true;\n          this.bankForm= false;\n        }\n      }\n    })\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\neditBankDetails(){\n  this.bankForm = true;\n  this.bankList = false;\n  this.bannBtn = 'Update';\n  this.bankListData;\n  for(var i =0;i<this.bankListData.length;i++){\n    this.bankDetailsForm = this.fb.group({\n      bankDetails: new FormGroup({\n          official: new FormGroup({\n            name: new FormControl(this.bankListData[i].official.name),\n            accountNum: new FormControl(this.bankListData[i].official.accountNum,Validators.compose([Validators.maxLength(16),\n              Validators.pattern(/^[0-9]*$/)])),\n            accountPlace: new FormControl(this.bankListData[i].official.accountPlace),\n            accountType: new FormControl(this.bankListData[i].official.accountType),\n            debitCardNum: new FormControl(this.bankListData[i].official.debitCardNum),\n            debitCardType: new FormControl(this.bankListData[i].official.debitCardType),\n            remarks: new FormControl(this.bankListData[i].official.remarks),\n          }),\n          personal: new FormGroup({\n            name: new FormControl(this.bankListData[i].personal.name),\n            accountNum: new FormControl(this.bankListData[i].personal.accountNum,Validators.compose([Validators.maxLength(16),\n              Validators.pattern(/^[0-9]*$/)])),\n            accountPlace: new FormControl(this.bankListData[i].personal.accountPlace),\n            accountType: new FormControl(this.bankListData[i].personal.accountType),\n            debitCardNum: new FormControl(this.bankListData[i].personal.debitCardNum),\n            debitCardType: new FormControl(this.bankListData[i].personal.debitCardType),\n            remarks: new FormControl(this.bankListData[i].personal.remarks),\n        })\n      })\n    })\n  }\n}\n\n/** Upload Banke details file configration start */\n\nsameAsOfficialDetails(action){\n  if(action === false){\n    this.actionBox = true;\n  } else if(action === true){\n    this.actionBox = false;\n  }\n  if(this.actionBox === true){\n    this.existingBankDetails = this.bankDetailsForm.value.bankDetails.official;\n    this.bankDetailsForm.get('bankDetails.personal.name').setValue(this.existingBankDetails.name);\n    this.bankDetailsForm.get('bankDetails.personal.accountNum').setValue(this.existingBankDetails.accountNum);\n    this.bankDetailsForm.get('bankDetails.personal.accountPlace').setValue(this.existingBankDetails.accountPlace);\n    this.bankDetailsForm.get('bankDetails.personal.accountType').setValue(this.existingBankDetails.accountType);\n    this.bankDetailsForm.get('bankDetails.personal.remarks').setValue(this.existingBankDetails.remarks);\n\n  } else if (this.actionBox === false){\n    this.bankDetailsForm.get('bankDetails.personal.name').setValue('');\n    this.bankDetailsForm.get('bankDetails.personal.accountNum').setValue('');\n    this.bankDetailsForm.get('bankDetails.personal.accountPlace').setValue('');\n    this.bankDetailsForm.get('bankDetails.personal.accountType').setValue('');\n    this.bankDetailsForm.get('bankDetails.personal.remarks').setValue('');\n  }\n}\n\nbankDetailsAdd() {\n  try {\n    let cleanBankForm = this.util.cleanFormLevelTwo(this.bankDetailsForm);\n    this.api.employBank(cleanBankForm.value, this.snapShotParam).subscribe((data) => {\n      if (data.status === \"success\" || data.status === 200) {\n        this.successMessage = true;\n        this.errorMsg = false;\n        this.successMsg = data.message;\n        setTimeout(() =>{\n          this.bankDetails();\n          this.handleErrroMessage();\n        },1500)\n      } else if (data.status === \"error\" || data.status === 404) {\n        this.errorMsg = true;\n        this.successMessage = false;\n        this.errMsg = data.message;\n        setTimeout(() =>{\n          this.bankDetails();\n          this.handleErrroMessage();\n        },2000)\n      }\n    })\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\nbankDetailsCancel(){\n  this.bankDetails();\n}\n\nbankDataValidation() {\n  try {\n    this.bankDetailsForm = this.fb.group({\n      bankDetails: new FormGroup({\n          official: new FormGroup({\n            name: new FormControl('',Validators.compose([Validators.required])),\n            accountNum: new FormControl('',Validators.compose([Validators.required,Validators.maxLength(16),\n            Validators.pattern(/^[0-9]*$/)])),\n            accountPlace: new FormControl(''),\n            accountType: new FormControl(''),\n            debitCardNum: new FormControl(''),\n            debitCardType: new FormControl(''),\n            remarks: new FormControl(''),\n          }),\n          personal: new FormGroup({\n            name: new FormControl('',Validators.compose([Validators.required])),\n            accountNum: new FormControl('',Validators.compose([Validators.required,Validators.maxLength(16),\n              Validators.pattern(/^[0-9]*$/)])),\n            accountPlace: new FormControl(''),\n            accountType: new FormControl(''),\n            debitCardNum: new FormControl(''),\n            debitCardType: new FormControl(''),\n            remarks: new FormControl(''),\n        })\n      })\n    })\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nvalidationMessageBank = {\n  'name': [\n    { type: 'required', message: 'Bank Name is Required' },\n  ],\n  'accountNum': [\n    { type: 'required', message: 'Account Number is Required' },\n    { type: 'maxlength', message: 'Account Number is maximum of 16 digits' },\n    { type: 'pattern', message: 'Account Number is not Acceptable' }\n  ],\n}\n\n/** upload bank details file configration end */\n/**Bank details update delete */\n\n\n/** payroll add details configratin  start*/\npayrollValidation(){\n  this.payrollDetailsForm = this.fb.group({\n    payroll:new FormGroup({\n      ctc:new FormControl('',Validators.compose([Validators.required,Validators.pattern(/^\\d{1,10}(?:\\.\\d{0,2})?$/)])),\n      ctcEffectiveFromDate:new FormControl('',Validators.required),\n      ctcEffectiveToDate:new FormControl('',Validators.required),\n      paidLeaveBalance:new FormControl('',Validators.compose([Validators.pattern(/^\\d{0,2}(?:\\.\\d{0,2})?$/)])),\n      earnedLeaveBalance:new FormControl(''),\n      gradeRule:new FormControl('',Validators.required),\n      basicPay:new FormControl('',Validators.compose([Validators.required,Validators.pattern(/^\\d{1,10}(?:\\.\\d{0,2})?$/)])),\n      mode: new FormControl('Cash'),\n\n    })\n  })\n}\n\npayrollValidations = {\n  'ctc': [\n    { type: 'required', message: 'CTC Value is Required' },\n    { type: 'pattern', message: 'CTC Value is not Acceptable' },\n  ],\n  'ctcEffectiveFromDate': [\n    { type: 'required', message: 'Selcted Field is Required' },\n  ],\n  'ctcEffectiveToDate': [\n    { type: 'required', message: 'Selcted Field is Required' },\n  ],\n  'paidLeaveBalance': [\n    { type: 'pattern', message: 'Paid Leave Balance is not Acceptable' },\n  ],\n  'gradeRule': [\n    { type: 'gradeRule', message: 'Selcted Field is Required' },\n  ],\n  'basicPay': [\n    { type: 'required', message: 'Basic Pay Value is Required' },\n    { type: 'pattern', message: 'Basic Pay Value is not Acceptable' },\n  ],\n}\n\npayrollAdd(){\n  try{\n    if(this.payrollButton === 'Submit'){\n      this.api.payrollDataSubmit(this.payrollDetailsForm.value,this.snapShotParam).subscribe(data=>{\n        if (data.status === \"success\" || data.status === 200) {\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.payrollListData();\n            this.handleErrroMessage();\n          },1000)\n        } else if (data.status === \"error\" || data.status === 404) {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrroMessage();\n          },2000)\n        }\n      })\n    } else if(this.payrollButton === 'Update'){\n      this.api.updatePayrollSettings(this.payrollDetailsForm.value,this.snapShotParam).subscribe(data=>{\n        if (data.status === \"success\" || data.status === 200) {\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.payrollListData();\n            this.handleErrroMessage();\n          },1000)\n        } else if (data.status === \"error\" || data.status === 404) {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrroMessage();\n          },2000)\n        }\n      })\n    }\n  }catch(err) {\n    console.log(err);\n  }\n}\n\npayrollListData(){\n  try{\n  this.api.payollDataList(this.snapShotParam).subscribe(data => {\n    if(data.status === 'success' || data.status === 200){\n      this.gradeRuleList();\n      this.payollDataLength = Object.keys(data.data).length;\n      if(this.payollDataLength === 2){\n        this.payrollList = false;\n        this.payrollForm = true;\n        this.payrollDetailsForm.get('payroll.earnedLeaveBalance').setValue(data.data.earnedLeaveBalance);\n      }else{\n        this.payrollData = data.data;\n        this.payrollData = Array.of(this.payrollData);\n        this.payrollList = true;\n        this.payrollForm = false;\n        this.payrollButton = 'Update';\n        this.payrollDetailsForm.get('payroll.earnedLeaveBalance').setValue(data.data.earnedLeaveBalance);\n      }\n    } else {\n      console.log(data.message);\n    }\n  })\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Grade Rule List\n\ngradeRuleList(){\n  try{\n    this.api.gradeRuleList().subscribe(data => {\n      if(data.status === 'success'){\n        this.payrollGradeRuleList = data.data;\n      }\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\npayrollSettingEdit(){\n  this.payrollForm = true;\n  this.payrollList= false;\n  for(var i=0;i<this.payrollData.length;i++){\n    this.payrollDetailsForm = this.fb.group({\n      payroll:new FormGroup({\n        ctc:new FormControl(this.payrollData[i].ctc,Validators.compose([Validators.required,Validators.pattern(/^\\d{1,10}(?:\\.\\d{0,2})?$/)])),\n        ctcEffectiveFromDate:new FormControl(this.payrollData[i].ctcEffectiveFromDate.substring(0,10)),\n        ctcEffectiveToDate:new FormControl(this.payrollData[i].ctcEffectiveToDate.substring(0,10)),\n        paidLeaveBalance:new FormControl(this.payrollData[i].paidLeaveBalance,Validators.compose([Validators.pattern(/^\\d{0,2}(?:\\.\\d{0,2})?$/)])),\n        earnedLeaveBalance:new FormControl(this.payrollData[i].earnedLeaveBalance),\n        gradeRule:new FormControl(this.payrollData[i].gradeRule),\n        basicPay: new FormControl(this.payrollData[i].basicPay,Validators.compose([Validators.required,Validators.pattern(/^\\d{1,10}(?:\\.\\d{0,2})?$/)])),\n        mode: new FormControl(this.payrollData[i].mode),\n      })\n    })\n  }\n}\n\nbackPayrollBtn(){\n  this.payrollForm = false;\n  this.payrollList = true;\n  this.payrollListData();\n\n}\n/** payroll add details configration end  */\n\n/** employee Leave Settings details configratin  start*/\nemployeeLeaveDataList(){\n  try{\n  this.api.leaveEmployeeDataList(this.snapShotParam).subscribe(data => {\n    if(data.status === 'success'){\n      if(data.data.leaveSettings.length == 0){\n        this.employeeLeaveList = false;\n        this.employeeLeaveForm = true;\n        this.leaveSettingButton = false;\n        this.leaveButton = 'Submit';\n        this.leaveSettingHeadingButton = \"Add Leave Settings\";\n        // this.addLeaveSettingButton = true;\n      }else{\n        this.employeeLeaveData = data.data.leaveSettings;\n        this.employeeLeaveList = true;\n        this.employeeLeaveForm = false;\n        this.leaveSettingButton = true;\n        this.leaveButton = 'Update';\n        // this.addLeaveSettingButton = false;\n      }\n    }\n  })\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Add Leave Settings\n\naddLeaveSetting(){\n  try{\n    let cleanLeaveSettingForm = this.util.cleanFormLevelOne(this.employeeLeaveDetailsForm);\n    if(this.leaveButton === 'Submit'){\n      this.api.addLeaveSettings(cleanLeaveSettingForm.value,this.snapShotParam).subscribe(data=>{\n        if (data.status === \"success\") {\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.employeeLeaveDataList();\n            this.handleErrroMessage();\n          },2000)\n        } else if (data.status === \"error\") {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrroMessage();\n          },3000)\n        }\n      })\n    } else if(this.leaveButton === 'Update'){\n      this.api.updateLeaveSettings(cleanLeaveSettingForm.value,this.snapShotParam,this.leaveSettingId).subscribe(data=>{\n        if (data.status === \"success\") {\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.employeeLeaveDataList();\n            this.handleErrroMessage();\n          },2000)\n        } else if (data.status === \"error\") {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrroMessage();\n          },3000)\n        }\n      })\n    }\n  } catch(err){\n    console.log(err);\n  }\n}\n\n// Leave Setting Update Details\n\nleaveSettingUpdateDetails(leaveSettingId){\n  try{\n    this.leaveSettingId = leaveSettingId;\n    this.leaveSettingHeadingButton = \"Update Leave Settings\";\n    this.leaveButton = \"Update\";\n    this.employeeLeaveForm = true;\n    this.leaveSettingButton = true;\n    for(var i = 0; i<this.employeeLeaveData.length; i++){\n      if(this.employeeLeaveData[i]._id == leaveSettingId){\n        this.employeeLeaveDetailsForm = this.fb.group({\n          startDate:new FormControl(this.employeeLeaveData[i].startDate.substring(0,10),Validators.required),\n          endDate:new FormControl(this.employeeLeaveData[i].endDate.substring(0,10),Validators.required),\n          leavePerMonth:new FormControl(this.employeeLeaveData[i].leavePerMonth,Validators.required),\n          reason:new FormControl(this.employeeLeaveData[i].reason)\n        })\n      }\n    }\n  } catch(err){\n    console.log(err);\n  }\n}\n\n/** Leave Settings add details */\nleaveSettingForm(){\n  this.employeeLeaveDetailsForm = this.fb.group({\n    startDate:new FormControl('',Validators.required),\n    endDate:new FormControl('',Validators.required),\n    leavePerMonth:new FormControl('',Validators.required),\n    reason:new FormControl('',)\n  })\n}\n\n// Leave Setting ADD Leave Setting Button Functionality\naddNewLeaveSettings(){\n  this.employeeLeaveDetailsForm.reset();\n  this.leaveSettingButton = false;\n  this.leaveSettingHeadingButton = \"Add Leave Settings\";\n  this.leaveButton = \"Submit\";\n  this.employeeLeaveForm = true;\n}\n\n// Leave Setting Cancel Button Functionality\nleaveSettingCancel(){\n  this.employeeLeaveDataList();\n  this.employeeLeaveDetailsForm.reset();\n}\n\nvalidationMessageLeaveSettings = {\n  'startDate': [\n    { type: 'required', message: 'Start Date is Required' },\n  ],\n  'endDate': [\n    { type: 'required', message: 'End Date is Required' },\n  ],\n  'leavePerMonth': [\n    { type: 'required', message: 'Leave Per Month is Required' },\n  ],\n}\n\n/** employee Leave details configratin End*/\n\n/** employee Identity Proofs configratin Start*/\ngetEmployeeIdProofsList(){\n  try{\n  this.api.employeeIdProofsDataList(this.snapShotParam).subscribe(data => {\n\n    if(data.status === 'success'){\n      if(data.data.length == 0){\n        this.idProofsList = false;\n        this.idProofsForm = true;\n        this.idProofsSettingButton = false;\n        this.idProofsButton = 'Submit';\n        this.idProofsHeadingButton = \"Add Identity Proofs Settings\";\n        // this.addLeaveSettingButton = true;\n      }else{\n        this.idProofsData = data.data;\n        this.idProofsList = true;\n        this.idProofsForm = false;\n        this.idProofsSettingButton = true;\n        this.idProofsButton = 'Update';\n        // this.addLeaveSettingButton = false;\n      }\n    }\n  })\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Add Employee Id Poofs Details\n\naddIdProofs(){\n  try{\n    let cleanIdProofsSettingForm = this.util.cleanFormLevelTwo(this.idProofsDetailsForm);\n    if(this.idProofsButton === 'Submit'){\n      this.api.addEmployeeIdProofs(cleanIdProofsSettingForm.value,this.snapShotParam).subscribe(data=>{\n        if (data.status === \"success\") {\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.getEmployeeIdProofsList();\n            this.handleErrroMessage();\n          },2000)\n        } else if (data.status === \"error\") {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrroMessage();\n          },3000)\n        }\n      })\n    } else if(this.idProofsButton === 'Update'){\n      this.api.updateIdProofsSettings(cleanIdProofsSettingForm.value,this.snapShotParam,this.idProofsSettingId).subscribe(data=>{\n        if (data.status === \"success\") {\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() =>{\n            this.getEmployeeIdProofsList();\n            this.handleErrroMessage();\n          },2000)\n        } else if (data.status === \"error\") {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrroMessage();\n          },3000)\n        }\n      })\n    }\n  } catch(err){\n    console.log(err);\n  }\n}\n\n// Id Proofs Setting Update Details\n\nidProofsSettingUpdateDetails(proofsId:String){\n  try{\n    this.idProofsSettingId = proofsId;\n    this.idProofsHeadingButton = \"Update Id Proofs Settings\";\n    this.idProofsButton = 'Update';\n    this.idProofsForm = true;\n    this.idProofsSettingButton = false;\n    for(var i = 0; i<this.idProofsData.length; i++){\n      if(this.idProofsData[i]._id === proofsId){\n        this.idProofsDetailsForm = this.fb.group({\n          identityProofs: new FormGroup ({\n            identityName:new FormControl(this.idProofsData[i].identityName,Validators.required),\n            identityNum:new FormControl(this.idProofsData[i].identityNum,Validators.required),\n            authorityName:new FormControl(this.idProofsData[i].authorityName),\n            issuePlace:new FormControl(this.idProofsData[i].issuePlace),\n            expiryDate:new FormControl(this.idProofsData[i].expiryDate.substring(0,10),Validators.required),\n            remarks:new FormControl(this.idProofsData[i].remarks)\n          })\n        })\n      }\n    }\n  } catch(err){\n    console.log(err);\n  }\n}\n\n//Method for remove Employee Id Proofs\ndeleteIdentityProofs(proofId: String) {\n  try {\n    const swalWithBootstrapButtons = Swal.mixin({\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger'\n      },\n      buttonsStyling: false\n    })\n    swalWithBootstrapButtons.fire({\n      title: 'Are you sure?',\n      text: \"You want to delete it\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'No',\n      reverseButtons: true\n    }).then((result) => {\n      if (result.value) {\n        this.api.removeIdProofsDetails(this.snapShotParam, proofId).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            swalWithBootstrapButtons.fire(\n              'Deleted!',\n              data.message,\n              'success'\n            )\n            this.getEmployeeIdProofsList();\n\n          }\n        })\n      } else if (\n        result.dismiss === Swal.DismissReason.cancel\n      ) {\n        swalWithBootstrapButtons.fire(\n          'Cancelled',\n          'Your data is safe',\n          'error'\n        )\n      }\n    })\n  }\n  catch (err) {\n    console.log(err.message);\n  }\n}\n\n// Add New Id Proofs Setting Add Identity Proofs Button Functionality\naddNewIdProofsSettings(){\n  this.idProofsDetailsForm.reset();\n  this.idProofsSettingButton = false;\n  this.idProofsHeadingButton = \"Add Identity Proofs\";\n  this.idProofsButton = 'Submit';\n  this.idProofsForm = true;\n}\n// New Id Proofs Setting Cancel Button Functionality\nidProofsSettingsCancel(){\n  this.getEmployeeIdProofsList();\n  this.idProofsDetailsForm.reset();\n}\n\n//Employee ID's Form add details //\nidProofsSettingForm(){\n  this.idProofsDetailsForm = this.fb.group({\n    identityProofs: new FormGroup({\n      identityName:new FormControl('',Validators.required),\n      identityNum:new FormControl('',Validators.required),\n      authorityName:new FormControl(''),\n      issuePlace:new FormControl(''),\n      expiryDate:new FormControl('',Validators.required),\n      remarks:new FormControl('')\n    })\n  })\n}\n\nvalidationMessageIdProofsSettings = {\n  'identityName': [\n    { type: 'required', message: 'Identity Name is Required' },\n  ],\n  'identityNum': [\n    { type: 'required', message: 'Identity Number is Required' },\n  ],\n  'authorityName': [\n    { type: 'required', message: 'Authority Name is Required' },\n  ],\n  'issuePlace': [\n    { type: 'required', message: 'Issue Place is Required' },\n  ],\n  'expiryDate': [\n    { type: 'required', message: 'Expiry Date is Required' },\n  ],\n  'remarks': [\n    { type: 'required', message: 'Remarks is Required' },\n  ],\n}\n/** employee Identity Proofs configratin End*/\n\n\nbioCancel(){\n  this.bioForm=false;\n  this.bioList=true;\n}\n/** bio complete function configratin */\n\n/** langulage skills function configation  start*/\nlistSkillLanguage(){\n  try{\n    this.lsnguageSkillForm = false;\n    this.api.LanguageSkill(this.snapShotParam).subscribe(data=>{\n      if(data.status == 'success' || data.status == 200){\n        if(data.data.length === 0){\n          this.languageSkillList = false;\n          this.addLanguageSkillList();\n        }else{\n          this.LanguageData = data.data;\n          this.languageSkillList= true;\n        }\n      }\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\nlanguageSkillEdit(id){\n  this.languageSkillEditId = id;\n  this.skillLanguageBtn = 'Update';\n  this.languageSkillTitle = \"Update Language\";\n  this.lsnguageSkillForm = true;\n  this.addLanguageBtn = false;\n  for(var i=0;i<this.LanguageData.length;i++){\n    if(this.LanguageData[i]._id == id){\n      this.languageSkillForm = this.fb.group({\n        languageSkills:new FormGroup({\n          toSpeak:new FormControl(this.LanguageData[i].toSpeak),\n          toRead:new FormControl(this.LanguageData[i].toRead),\n          toWrite:new FormControl(this.LanguageData[i].toWrite),\n        })\n      })\n    }\n  }\n}\n\ncancelLanguageSkill(){\n  this.lsnguageSkillForm = false;\n  this.addLanguageBtn = true;\n}\n\naddLanguageSkill(){\n  try {\n    let cleanLaungugeSkillForm = this.util.cleanFormLevelOne(this.languageSkillForm);\n\n  if(this.languageSkillEditId == \"\" || this.languageSkillEditId === null){\n    this.api.addLanguageSkill(cleanLaungugeSkillForm.value,this.snapShotParam).subscribe(data=>{\n      if (data.status === \"success\" || data.status === 200) {\n        this.successMessage = true;\n        this.errorMsg = false;\n        this.successMsg = data.message;\n        this.addLanguageBtn = true;\n        setTimeout(() =>{\n          this.listSkillLanguage();\n          this.handleErrroMessage();\n        },1000)\n      } else if (data.status === \"error\" || data.status === 404) {\n        this.errorMsg = true;\n        this.successMessage = false;\n        this.errMsg = data.message;\n        setTimeout(()=>{\n          this.handleErrroMessage();\n        },2000);\n      }\n    })\n  }else{\n    this.api.updateLanguageSkill(cleanLaungugeSkillForm.value,this.snapShotParam,this.languageSkillEditId).subscribe(data=>{\n      if (data.status === \"success\" || data.status === 200) {\n        this.successMessage = true;\n        this.errorMsg = false;\n        this.successMsg = data.message;\n        this.addLanguageBtn = true;\n        setTimeout(() =>{\n          this.listSkillLanguage();\n          this.handleErrroMessage();\n        },1000)\n      } else if (data.status === \"error\" || data.status === 404) {\n        this.errorMsg = true;\n        this.successMessage = false;\n        this.errMsg = data.message;\n        setTimeout(()=>{\n          this.handleErrroMessage();\n        },2000);\n      }\n    })\n    }\n    this.languageSkillEditId = \"\";\n  } catch(err){\n    console.log(err);\n  }\n}\n\n\nlanguageSkillValidation(){\n  this.languageSkillForm = this.fb.group({\n    languageSkills:new FormGroup({\n      toSpeak:new FormControl(''),\n      toRead:new FormControl(''),\n      toWrite:new FormControl(''),\n    })\n  })\n}\n\naddLanguageSkillList(){\nthis.languageSkillEditId = \"\";\nthis.languageSkillTitle = \"Add\";\nthis.skillLanguageBtn = 'Submit';\nthis.lsnguageSkillForm = true;\nthis.addLanguageBtn = false;\nthis.languageSkillForm.reset();\n}\n\n\n/**langualge skills function configration end */\n\n// Error Handling Message\nhandleErrroMessage(){\n  this.successMessage = false;\n  this.errorMsg = false;\n  this.successMsg = '';\n  this.errMsg = '';\n}\noncheck(){\n  this.checkbox = !this.checkbox;\n  this.employeeBasicForm.get('isTL').setValue(this.checkbox);\n}\n\n// Get Tl List\ngetTlList(){\n  this.api.getTlList().subscribe((data)=>{\n    if(data.status === 'success'){\n      this.companyTlList = data.data;\n    }\n  })\n}\n\nuploadedDocumentDetails = [];\nemployeeDocumentsDetails = [];\n// get documnet list uploaded which are no uploaded yet\nuploadedDocumentList(){\n  try{\n    this.api.uploadedDocuments(this.snapShotParam).subscribe((data) =>{\n      if(data.status === 'success'){\n        this.uploadedDocumentDetails = data.data;\n      }\n    })\n    this.employeeDocumentList();\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Image Upload Form\nuploadImageForm(){\n  try{\n    this.uploadForm = this.fb.group({\n      document: ['']\n    });\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Upload Docs\nuploadDocs(documentTypeId,index,type){\n  try{\n    if(type === 'Update'){\n      if((document.getElementById(`${index}`)as HTMLInputElement).value.length === 0){\n        Swal.fire('No Image Selected');\n      } else {\n        this.api.uploadDocuments(this.uploadForm,documentTypeId,this.snapShotParam,type).subscribe((data)=>{\n          if(data.status === 'success'){\n            (document.getElementById('dismissUpdateDocuments').click());\n            Swal.fire(\n              'Status',\n              data.message,\n              'success'\n            )\n            this.employeeDocumentList();\n          } else if(data.status === 'error'){\n              Swal.fire(data.message);\n          }\n        })\n      }\n    } else if(type === 'Add'){\n      if((document.getElementById(`documnetDocImage${index}`)as HTMLInputElement).value.length === 0){\n        Swal.fire('No Image Selected');\n      } else {\n        this.api.uploadDocuments(this.uploadForm,documentTypeId,this.snapShotParam,type).subscribe((data)=>{\n          if(data.status === 'success'){\n            Swal.fire(\n              'Status',\n              data.message,\n              'success'\n            )\n            this.uploadedDocumentList();\n            this.employeeDocumentList();\n          } else if(data.status === 'error'){\n              Swal.fire(data.message);\n          }\n        })\n      }\n    }\n\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// When User select document image\nonFileSelect(event){\ntry{\n  if (event.target.files.length > 0) {\n    const file = event.target.files[0];\n    this.uploadForm.get('document').setValue(file);\n  }\n}catch(err){\n  console.log(err);\n}\n}\n\n// Get Uploaded Documnets By the employee\nemployeeDocumentList(){\n  try{\n    this.api.employeeDocumentList(this.snapShotParam).subscribe((data)=>{\n      if(data.status === 'success'){\n        this.employeeDocumentsDetails = data.data;\n      }\n    })\n  }catch(err){\n    console.log(err);\n\n  }\n}\n\n// Show Image On new tab\nopenImage(imageUrl){\n  try{\n    window.open(imageUrl);\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Delete Employee Document\ndeleteDocument(documentTypeId){\n  try{\n    const swalWithBootstrapButtons = Swal.mixin({\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger'\n      },\n      buttonsStyling: false\n    })\n\n    swalWithBootstrapButtons.fire({\n      title: 'Are you sure?',\n      text: \"You want to delete it\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'No',\n      reverseButtons: true,\n      allowOutsideClick: false,\n    }).then((result) => {\n      if (result.value) {\n        this.api.deleteEmployeeDocument(documentTypeId,this.snapShotParam).subscribe((data)=>{\n          if(data.status === \"success\" || data.status === 200){\n        swalWithBootstrapButtons.fire(\n          'Deleted!',\n          data.message,\n          'success'\n        )\n        this.employeeDocumentList();\n        this.uploadedDocumentList();\n          }\n      })\n      } else if (\n        result.dismiss === Swal.DismissReason.cancel\n      ) {\n        swalWithBootstrapButtons.fire(\n          'Cancelled',\n          'Document Still Exists',\n          'error'\n        )\n      }\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Update the employee docs\ndocumentTypeId: any;\nasync updateDocuments(documentTypeId){\n  try{\n    this.documentTypeId = documentTypeId;\n  }catch(err){\n    console.log(err);\n  }\n}\n\n}\n\n\n\n","<div class=\"card\">\n  <div class=\"card-header\">\n    <h2 class=\"text-center\">Employee List</h2>\n  </div>\n  <div class=\"card-body\">\n    <div class=\"form-row\">\n      <div class=\"col-lg-3 col-md-3 col-sm-4\">\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>{{ employeeLabelName }}</b></label>\n          <select class=\"dropdown dropdown-toggle form-control\" id=\"listEmployee\" (change)=\"employeeFilter()\">\n            <option class='dropdown-item' ng-selected=\"true\" value=\"\" disabled selected>Select Employee</option>\n            <option class=\"dropdown-item\" *ngFor=\"let employee of filterEmployeeList\" value=\"{{employee._id}}\">\n              {{employee.name}}\n            </option>\n          </select>\n        </div>\n      </div>\n      <div class=\"col-lg-3 col-md-3 col-sm-4\">\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>Status:</b></label>\n          <select class=\"dropdown dropdown-toggle form-control\" id=\"employeeStatus\" (change)=\"changeStatus()\"\n            [disabled]=\"statusStatus\">\n            <option class=\"dropdown-item\" ng-selected=\"true\" value=\"Active\" selected>Active</option>\n            <option class=\"dropdown-item\" ng-selected=\"true\" value=\"Inactive\">Inactive</option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"col-lg-3 col-md-3 col-sm-4\">\n        <div class=\"form-group right-buttongroup\">\n        <button class=\"btn btn-primary\" id=\"filterClick\" (click)=\"filterFunctionality()\"><i class=\"fa fa-filter\"></i>&nbsp; Filter</button>\n        <button class=\"btn btn-danger\"  (click)=\"resetFunctionality()\"><i class=\"fas fa-trash-restore\"></i>&nbsp; Reset</button>\n      </div>\n    </div>\n\n\n    <div class=\"col-lg-3 col-md-3 col-sm-3\">\n      <div class=\"form-group right-buttongroup\" >\n          <a [class.disabled]=\"permissionInfo.search('Create Employees') === -1\" class=\"btn btn-primary\" routerLink=\"../employee-profile\" style=\"float: right;\" ><i class=\"fa fa-plus-square\"></i>&nbsp; Add Employee</a>\n      </div>\n    </div>\n    </div>\n\n\n  \n\n   \n\n  </div>\n\n  <div class=\"panel-body\">\n    <ul class=\"list-group\">\n        <table class=\"table\" style=\"text-align: center;\">\n          <thead class=\" text-primary\">\n            <tr>\n              <th> Profile </th>\n              <th>Employee Name</th>\n              <th>Department</th>\n              <th>Job Profile</th>\n              <th>Contact Info</th>\n              <th>Age</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody *ngFor=\"let list of employeeList\">\n            <tr>\n              <!-- <td><img style=\"height: 50px; width: 50px;\"\n                  src=\"{{ list.avatar }}\">\n\n              </td> -->\n              <td>\n                <div class=\"image-container\">\n                  <img [src]='list.avatar' id=\"imgProfile\" style=\"width: 60px; height: 50px\" class=\"rounded-circle\" />\n                  <div class=\"middle\">\n                    <input type=\"file\" style=\"display: none;\" accept=\"image/*\" id=\"profilePicture\" #file\n                      (change)=\"onSelectFile($event,list._id)\" />\n                    <input type=\"button\" id=\"btnChangePicture\" value=\"Change\" (click)=\"file.click()\" />\n                  </div>\n                </div>\n              </td>\n              <td> {{ list.name }} </td>\n              <td> {{list.departmentName}}</td>\n              <td> {{ list.jobProfile }}</td>\n              <td> {{ list.email}} </td>\n              <td> {{ list.age }}</td>\n              <td>\n                <div class=\"dropdown\">\n                  <a class=\"text-secondary\" href=\"javascript:void(0);\" (click)=\"updateFunction() \"\n                    id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> <i\n                      class=\"fa fa-ellipsis-h\"></i> </a>\n                  <div class=\"dropdown-menu dropdown-menu-right\" style=\"background-color: rgb(190, 230, 231)\"\n                    aria-labelledby=\"dropdownMenuButton\">\n                    <a class=\"dropdown-item\" id=\"updateEmployeePermission\"\n                      routerLink=\"../employee-profile/{{ list._id }}\"><i\n                        class=\"fa fa-pencil-square-o\"></i>&nbsp;Update</a>\n\n                    <a class=\"dropdown-item\" href=\"javascript:void(0);\" data-toggle=\"modal\" data-target=\"#myModal\"\n                      data-backdrop=\"static\" (click)=\"onSelect(list._id,'setPassword')\"><i\n                        class=\"fa fa-key\"></i>&nbsp;Set Password</a>\n\n                    <a class=\"dropdown-item\" href=\"javascript:void(0);\" data-toggle=\"modal\" data-target=\"#assignTL\"\n                      data-backdrop=\"static\" (click)=\"onSelect(list._id,'Assign')\"><i\n                        class=\"fas fa-user-plus\"></i>&nbsp;Assign TL/Manager</a>\n\n                    <a class=\"dropdown-item\" href=\"javascript:void(0);\" data-toggle=\"modal\" data-target=\"#unAssignTL\"\n                      data-backdrop=\"static\" (click)=\"onSelect(list._id,'UnAssign')\"><i\n                        class=\"fas fa-user-slash\"></i>&nbsp;UnAssign TL/Manager</a>\n\n                    <a *ngIf=\"activeStatus === 'Inactive' \" href=\"javascript:void(0);\" class=\"dropdown-item\"\n                      (click)=\"statusConfirmationMessage(list._id)\">\n                      <i class=\"fas fa-battery-half\"></i>&nbsp;{{ activeStatus }}</a>\n                    <a *ngIf=\"activeStatus === 'Active' \" href=\"javascript:void(0);\" class=\"dropdown-item\"\n                      (click)=\"statusConfirmationMessage(list._id)\">\n                      <i class=\"fas fa-battery-full\"></i>&nbsp;{{ activeStatus }}</a>\n                  </div>\n                </div>\n              </td>\n            </tr>\n        </table>\n\n    </ul>\n  </div>\n  <div *ngIf=\"filterEmployeeDataMsg.length != 0\">\n    <h3 style=\"text-align: center;\">{{ filterEmployeeDataMsg }}</h3>\n  </div>\n</div>\n\n<!-- The Modal -->\n<div class=\"modal\" id=\"myModal\">\n  <div class=\"modal-dialog modal-dialog-centered\">\n    <div class=\"modal-content\">\n\n      <!-- Modal Header -->\n      <div class=\"modal-header\">\n        <h4 class=\"modal-title\">Set Password</h4>\n        <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button> -->\n      </div>\n      <div class=\"col-sm-offset-2\">\n        <p class=\"alert alert-danger\" *ngIf=\"passwordFlag\">\n          <strong>{{ errMessage }}</strong>\n        </p>\n      </div>\n\n      <div class=\"col-sm-offset-2\">\n        <p class=\"alert alert-success\" *ngIf=\"successFlag\">\n          <strong>{{ successMsg }}</strong>\n        </p>\n      </div>\n      <!-- Modal body -->\n      <div class=\"modal-body\">\n        <form role=\"form\" [formGroup]=\"setPasswordForm\" (ngSubmit)=\"setPasswordFormData()\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Password:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n\n            <input type=\"password\" formControlName=\"password\" placeholder=\"Enter Password\" class=\"form-control\" />\n            <div *ngFor=\"let validation of validationErrorMessage.password\">\n              <div\n                *ngIf=\"setPasswordForm.get('password').hasError(validation.type) && (setPasswordForm.get('password').dirty || setPasswordForm.get('password').touched)\"\n                style=\"color: red;margin-left: 14px;\">\n                {{ validation.message }}\n              </div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label class=\"col-sm-8 control-label\"><b>Confirm Password:&nbsp;<span\n                  style=\"color: darkred\">*</span></b></label>\n            <input type=\"password\" formControlName=\"passwordConfirmation\" placeholder=\"Confirm Password\"\n              class=\"form-control\" />\n            <div *ngFor=\"let validation of validationErrorMessage.passwordConfirmation\">\n              <div\n                *ngIf=\"setPasswordForm.get('passwordConfirmation').hasError(validation.type) && (setPasswordForm.get('passwordConfirmation').dirty || setPasswordForm.get('passwordConfirmation').touched)\"\n                style=\"color: red;margin-left: 14px;\">\n                {{ validation.message }}\n              </div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <!-- <div class=\"col-sm-10\"> -->\n            <button type=\"submit\" class=\"btn btn-success\" style=\"float:right;\"\n              [disabled]=!setPasswordForm.valid>Submit</button>\n            <button type=\"button\" id=\"dismissSetPassword\" class=\"btn btn-danger\" style=\"float:right;\"\n              data-dismiss=\"modal\">Close</button>\n            <!-- </div> -->\n          </div>\n        </form>\n      </div>\n\n      <!-- Modal footer -->\n      <!-- <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-danger\" data-dismiss=\"modal\">Close</button>\n      </div> -->\n\n    </div>\n  </div>\n</div>\n\n<div class=\"modal\" id=\"assignTL\">\n  <div class=\"modal-dialog modal-dialog-centered\">\n    <div class=\"modal-content\">\n\n      <!-- Modal Header -->\n      <div class=\"modal-header\">\n        <h4 class=\"modal-title\">Assign TL/Manager</h4>\n        <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button> -->\n      </div>\n      <div class=\"col-sm-offset-2\">\n        <p class=\"alert alert-danger\" *ngIf=\"passwordFlag\">\n          <strong>{{ errMessage }}</strong>\n        </p>\n      </div>\n\n      <div class=\"col-sm-offset-2\">\n        <p class=\"alert alert-success\" *ngIf=\"successFlag\">\n          <strong>{{ successMsg }}</strong>\n        </p>\n      </div>\n      <!-- Modal body -->\n      <div class=\"modal-body\">\n        <form role=\"form\" [formGroup]=\"assignTlForm.get('parentIdsData')\" (ngSubmit)=\"assignTl()\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>TL/Manager Name:&nbsp;<span\n                  style=\"color: darkred\">*</span></b></label>\n            <select class=\"dropdown dropdown-toggle form-control\" Name=\"AssignTL\" formControlName=\"parentUserId\"\n              (change)=\"actionOnTl($event.target.value,'Assign')\">\n              <option class=\"dropdown-item\" value=\"null\" selected disabled>-----Select TL/Manager-----</option>\n              <option class=\"dropdown-item\" *ngFor=\"let companyTL of companyTlList\" selected=\"{{ companyTL.name }}\"\n                value=\"{{ companyTL._id }}\">\n                {{ companyTL.name }}\n              </option>\n            </select>\n            <div *ngFor=\"let validation of assignTLValidation.parentUserId\">\n              <div\n                *ngIf=\"assignTlForm.get('parentIdsData.parentUserId').hasError(validation.type) && (assignTlForm.get('parentIdsData.parentUserId').dirty || assignTlForm.get('parentIdsData.parentUserId').touched)\"\n                style=\"color: red;margin-left: 14px;\">\n                {{ validation.message }}\n              </div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <!-- <div class=\"col-sm-10\"> -->\n            <button type=\"submit\" class=\"btn btn-success\" style=\"float:right;\"\n              [disabled]=!assignTlForm.valid>Submit</button>\n            <button type=\"button\" id=\"dismissTLModal\" class=\"btn btn-danger\" style=\"float:right;\"\n              data-dismiss=\"modal\">Close</button>\n            <!-- </div> -->\n          </div>\n        </form>\n      </div>\n      <!-- Modal footer -->\n      <!-- <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-danger\" data-dismiss=\"modal\">Close</button>\n      </div> -->\n\n    </div>\n  </div>\n</div>\n\n<div class=\"modal\" id=\"unAssignTL\">\n  <div class=\"modal-dialog modal-dialog-centered\">\n    <div class=\"modal-content\">\n\n      <!-- Modal Header -->\n      <div class=\"modal-header\">\n        <h4 class=\"modal-title\">UnAssign TL/Manager</h4>\n        <!-- <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button> -->\n      </div>\n      <div class=\"col-sm-offset-2\">\n        <p class=\"alert alert-danger\" *ngIf=\"passwordFlag\">\n          <strong>{{ errMessage }}</strong>\n        </p>\n      </div>\n\n      <div class=\"col-sm-offset-2\">\n        <p class=\"alert alert-success\" *ngIf=\"successFlag\">\n          <strong>{{ successMsg }}</strong>\n        </p>\n      </div>\n      <!-- Modal body -->\n      <div class=\"modal-body\">\n        <div class=\"card-body\">\n          <!-- for show earned leave list  -->\n          <div class=\"card\" style=\"background-color:whitesmoke;\">\n            <div class=\"panel-body\">\n              <ul class=\"list-group\">\n                <div class=\"card-body\">\n                  <table class=\"table\" style=\"text-align: center;\">\n                    <thead class=\" text-primary\">\n                      <tr>\n                        <th>Employee Name </th>\n                        <th> Action </th>\n                      </tr>\n                    </thead>\n                    <tbody *ngFor=\"let employeeTL of companyEmployeeTlList\">\n                      <tr>\n                        <td> {{employeeTL.displayName}} </td>\n                        <td>\n                          <button title=\"UnAssign\" class=\"btn btn-danger\" (click)=\"unassignTL(employeeTL._id)\"\n                            style=\"color: white;\"><i class=\"fa fa-trash\"></i>\n                          </button>\n                        </td>\n                      </tr>\n\n                    </tbody>\n                  </table>\n                </div>\n              </ul>\n            </div>\n          </div>\n          <!-- show earned leave list end -->\n        </div>\n        <button type=\"button\" id=\"dismissUnAssignTLModal\" class=\"btn btn-danger\" style=\"float:right;\"\n          data-dismiss=\"modal\">Close</button>\n      </div>\n      <!-- Modal footer -->\n      <!-- <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-danger\" data-dismiss=\"modal\">Close</button>\n        </div> -->\n\n    </div>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { EmployeeWizardComponent } from './employee-wizard.component';\nimport { EmployeeProfileComponent } from './employee-profile/employee-profile.component';\nimport { EmployeeListComponent } from './employee-list/employee-list.component';\n\nconst route : Routes = [\n    {\n      path :'',\n      component : EmployeeWizardComponent,\n      canActivate:[AuthGuard],\n      children :[\n        {\n          path:'employee-profile',\n          component:EmployeeProfileComponent,\n        },\n        {\n          path:'employee-profile/:employeeId',\n          component:EmployeeProfileComponent,\n        },\n        {\n          path:'employee-list',\n          component:EmployeeListComponent,\n        },\n        {\n          path:'',\n          redirectTo:'employee-list',\n          pathMatch:'full',\n        },\n      ],\n    }\n  ];\n\n@NgModule({\n    declarations: [],\n    imports: [\n      CommonModule,\n      RouterModule.forChild(route),\n    ]\n  })\n\n  export class EmployeeWizardRouitngModule{}","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormBuilder, FormControl, Validators, FormGroup } from '@angular/forms';\nimport { EmployeeService } from '../services/employee.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\nimport { state } from '@angular/animations';\nimport { ApiService } from 'src/app/services/api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-employee-list',\n  templateUrl: './employee-list.component.html',\n  styleUrls: ['./employee-list.component.scss']\n})\nexport class EmployeeListComponent implements OnInit {\n\n  employeeList = new Array();\n  filterEmployeeDataMsg = '';\n  setPasswordForm: any;\n  passwordFlag: Boolean;\n  errMessage: String;\n  successFlag: Boolean;\n  successMsg: String;\n  employeeId: String;\n  minPasswordLength: number = 8;\n  maxPasswordLength: number = 14;\n  companyTlList: any;\n  companyEmployeeTlList: any;\n  assignTlForm: any;\n  status = \"Active\";\n  employeeLabelName = 'Active Employees';\n  activeStatus = 'Inactive';\n  url: any;\n  userAvatar: any;\n  filterEmployeeList = [];\n  statusStatus = false;\n  permissionInfo: any;\n\n  constructor(public fb: FormBuilder,\n    private api: EmployeeService,\n    public ngZone: NgZone,\n    private router: Router,\n    private route: ActivatedRoute,\n    private uploadAvatarAPI: ApiService,\n    private util: UtilitiesService\n    ) { }\n\n  ngOnInit() {\n    this.assignTLForm();\n    this.getEmployeeListData();\n    this.passwordFormValidation();\n    this.getTlList();\n    this.userProfileForm();\n    this.permissionInfo = this.util.permissionRoleInfo;\n\n  }\n\n  updateFunction(){\n    try {\n      if(this.permissionInfo.search('Create Employees') === -1){\n        (document.getElementById('updateEmployeePermission')as HTMLAnchorElement).classList.add('disabled');\n      } else {\n        (document.getElementById('updateEmployeePermission')as HTMLAnchorElement).classList.remove('disabled');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  getEmployeeListData() {\n    try {\n      this.api.getEmployeeList(this.status).subscribe(data => {\n          if (data.status === \"success\") {\n            if(data.data.length === 0){\n              if(this.status === 'Active'){\n                (document.getElementById('employeeStatus')as HTMLInputElement).value = \"Inactive\";\n                (document.getElementById('filterClick')as HTMLElement).click();\n              } else if(this.status === 'Inactive'){\n                this.api.employeeCount().subscribe((data)=>{\n                  if(data.status === 'success'){\n                    if(data.data === 0){\n                      this.router.navigateByUrl(\"/pages/employee-wizard/employee-profile\");\n                    } else {\n                      this.filterEmployeeDataMsg = 'No Data Found';\n                      this.employeeList = [];\n                      this.filterEmployeeList = [];\n                    }\n                  }\n                })\n              }\n            } else {\n              this.employeeList = data.data;\n              this.filterEmployeeList = data.data;\n              this.filterEmployeeDataMsg = '';\n            }\n        }\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  passwordFormValidation() {\n    try {\n      this.setPasswordForm = this.fb.group({\n        password: new FormControl(null, Validators.compose([\n          Validators.minLength(8),\n          Validators.maxLength(14),\n          Validators.required,\n          Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8}$') //this is for the letters both uppercase & lowercase and numbers.\n        ])),\n        passwordConfirmation: new FormControl(null, Validators.compose([\n          Validators.required,\n          RxwebValidators.compare({ fieldName: 'password' })\n        ]))\n      });\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  onSelect(value: String, type) {\n    try {\n      this.employeeId = value;\n      if(type === 'Assign'){\n        this.resetModal('Assign');\n        if(this.companyTlList.length === 0){\n          setTimeout(()=>{\n          (document.getElementById('dismissTLModal')as HTMLElement).click();\n          },0)\n          Swal.fire('Add TL/Manager First');\n        }\n      } else if(type === 'setPassword'){\n        this.resetModal('setPassword');\n      } else if(type === 'UnAssign'){\n        this.employeeTlList();\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n\n  }\n\n  setPasswordFormData() {\n    try {\n      if (this.setPasswordForm.valid) {\n        this.api.setPassword(this.setPasswordForm.value, this.employeeId).subscribe(data => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successFlag = true;\n            this.successMsg = data.message;\n            this.passwordFlag = false;\n            setTimeout(() => {\n              this.ngZone.run(() => this.router.navigateByUrl('/pages/employee-wizard/employee-list'));\n              this.handleErrroMessage();\n              (document.getElementById('dismissSetPassword')as HTMLElement).click();\n            }, 2000)\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.passwordFlag = true;\n            this.successFlag = false;\n            this.errMessage = data.message;\n            setTimeout(()=>{\n              this.handleErrroMessage();\n              (document.getElementById('dismissSetPassword')as HTMLElement).click();\n            },3000)\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //For resetFunctionality of employee fields\n  resetFunctionality(){\n    (document.getElementById('listEmployee') as HTMLInputElement).value = \"\";\n    (document.getElementById('employeeStatus') as HTMLInputElement).value = \"Active\";\n    this.status = 'Active';\n    this.activeStatus = 'Inactive';\n    this.filterEmployeeDataMsg = '';\n    this.statusStatus = false;\n    this.getEmployeeListData();\n  }\n\n  // filterFunctionality of employee fields list\n  filterFunctionality(){\n    try{\n\n      let employeeId = (document.getElementById('listEmployee') as HTMLInputElement).value;\n      let status = (document.getElementById('employeeStatus') as HTMLInputElement).value;\n\n      if(employeeId.length != 0){\n        status = '';\n        this.filterEmployeeDetails(employeeId);\n      }\n      if(status === \"Active\"){\n        this.status = 'Active';\n        this.activeStatus = 'Inactive';\n        this.employeeLabelName = 'Active Employees';\n        this.getEmployeeListData();\n      } else if(status === 'Inactive'){\n        this.status = 'Inactive';\n        this.activeStatus = 'Active';\n        this.employeeLabelName = 'Inactive Employees';\n        this.getEmployeeListData();\n      }\n\n    }catch(err){\n      console.log(err);\n    }\n\n  }\n\n  //For print Validation and error message.\n  validationErrorMessage = {\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: `Password must be at least ${this.minPasswordLength} characters long` },\n      { type: 'maxlength', message: `Password should not be greater than ${this.maxPasswordLength} characters` },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, one digit and one special characters' }\n    ],\n    'passwordConfirmation': [\n      { type: 'required', message: 'Confirm Password is required' },\n      { type: 'compare', message: 'Passwords do not match' },\n    ],\n  }\n\n  // Company Tl List\n  getTlList(){\n    try{\n      this.api.getTlList().subscribe((data)=>{\n        if(data.status === 'success'){\n          this.companyTlList = data.data;\n        }\n      })\n    } catch(err){\n      console.log(err);\n    }\n  }\n\n// Assign Tl list form\nassignTLForm(){\n  try{\n    this.assignTlForm = this.fb.group({\n      parentIdsData: new FormGroup({\n        userId: new FormControl(''),\n        parentUserId: new FormControl('',Validators.required)\n      })\n    })\n  } catch(err){\n    console.log(err);\n  }\n}\n\nassignTLValidation = {\n  'parentUserId': [\n    { type: 'required', message: 'TL/Manager Name is Required' }\n  ]\n}\n\n// Assign And Unassign TL ID\nactionOnTl(tlId,type){\ntry{\n  if(type === 'Assign'){\n    this.assignTlForm.get('parentIdsData.userId').setValue(this.employeeId);\n    this.assignTlForm.get('parentIdsData.parentUserId').setValue(tlId);\n  }\n} catch(err){\n  console.log(err);\n}\n}\n\n// Submit Assign TL Form\nassignTl(){\n  try{\n      this.api.assignTl(this.assignTlForm.value,this.employeeId).subscribe((data)=>{\n        if(data.status === \"success\"){\n          this.successFlag = true;\n          this.successMsg = data.message;\n          this.passwordFlag = false;\n          setTimeout(() => {\n            this.ngZone.run(() => this.router.navigateByUrl('/pages/employee-wizard/employee-list'));\n            (document.getElementById('dismissTLModal')as HTMLElement).click();\n            this.handleErrroMessage();\n          }, 2000)\n        } else if(data.status === 'error'){\n          this.passwordFlag = true;\n          this.successFlag = false;\n          this.errMessage = data.message;\n          setTimeout(()=>{\n            (document.getElementById('dismissTLModal')as HTMLElement).click();\n            this.handleErrroMessage();\n          },3000)\n        }\n      })\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Error Handling Message\nhandleErrroMessage(){\n  this.successFlag = false;\n  this.passwordFlag = false;\n  this.successMsg = '';\n  this.errMessage = '';\n}\n\nresetModal(type){\n  try{\n    if(type === 'Assign'){\n      this.assignTlForm.reset();\n    } else if(type === 'setPassword'){\n      this.setPasswordForm.reset();\n    }\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Unassign TL\nunassignTL(tlId){\n  try{\n    const swalWithBootstrapButtons = Swal.mixin({\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger'\n      },\n      buttonsStyling: false\n    })\n\n    swalWithBootstrapButtons.fire({\n      title: 'Are you sure?',\n      text: \"You want to UnAssign TL/Manager\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'No',\n      reverseButtons: true,\n      allowOutsideClick: false,\n    }).then((result) => {\n      if (result.value) {\n        this.api.unassignTl(this.employeeId,tlId).subscribe((data)=>{\n          if(data.status === \"success\"){\n        swalWithBootstrapButtons.fire(\n          'Deleted!',\n          data.message,\n          'success'\n        )\n        setTimeout(()=>{\n          (document.getElementById('dismissUnAssignTLModal') as HTMLElement).click();\n        },0)\n          }\n      })\n      } else if (\n        result.dismiss === Swal.DismissReason.cancel\n      ) {\n        swalWithBootstrapButtons.fire(\n          'Cancelled',\n          \"Didn't UnAssign TL/Manager\",\n          'error'\n        )\n      }\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\n//Employee TL List\nemployeeTlList(){\n  try{\n    this.api.employeeTlList(this.employeeId).subscribe((data)=>{\n      if(data.status === 'success'){\n        if(data.data.parentUsersIds.length === 0){\n          setTimeout(()=>{\n            (document.getElementById('dismissUnAssignTLModal') as HTMLElement).click();\n          },0)\n          Swal.fire('Nothing to UnAssign');\n        } else {\n          this.companyEmployeeTlList = data.data.parentUsersIds;\n        }\n      }\n    })\n  } catch(err){\n    console.log(err);\n  }\n}\n\n// Change Status\nchangeStatus(){\n  try{\n    (document.getElementById('listEmployee') as HTMLInputElement).value = \"\";\n  } catch(err){\n    console.log(err);\n  }\n}\n\n// Get Employee Details\nfilterEmployeeDetails(employeeId){\n  try{\n    this.api.filterEmployeeList(employeeId).subscribe((data)=>{\n      if(data.status === 'success'){\n        this.employeeList = [];\n        this.employeeList.push(data.data);\n      }\n    })\n  } catch(err){\n    console.log(err);\n  }\n}\n\nstatusConfirmationMessage(value: String){\n  const swalWithBootstrapButtons = Swal.mixin({\n    customClass: {\n      confirmButton: 'btn btn-success',\n      cancelButton: 'btn btn-danger'\n    },\n    buttonsStyling: false\n  })\n  swalWithBootstrapButtons.fire({\n    title: 'Are you sure?',\n    text: `You want to ${this.activeStatus} the employee status`,\n    type: 'warning',\n    showCancelButton: true,\n    confirmButtonText: 'Yes',\n    cancelButtonText: 'No',\n    reverseButtons: true,\n    allowOutsideClick: false,\n  }).then((result) => {\n    if (result.value) {\n      this.api.updateEmployeeStatus(value,this.activeStatus).subscribe((data)=>{\n        if(data.status === \"success\"){\n      swalWithBootstrapButtons.fire(\n        'Employee Status!',\n        data.message,\n        'success'\n      )\n      this.filterFunctionality();\n        }\n    })\n    } else if (\n      result.dismiss === Swal.DismissReason.cancel\n    ) {\n      swalWithBootstrapButtons.fire(\n        'Cancelled',\n        \"Employee Status didn't changed\",\n        'error'\n      )\n    }\n  })\n}\n\nonSelectFile(event,employeeId) {\n  if (event.target.files && event.target.files[0]) {\n    var reader = new FileReader();\n\n    reader.readAsDataURL(event.target.files[0]); // read file as data url\n\n    reader.onload = (event: any) => { // called once readAsDataURL is completed\n      for(var i=0; i<this.employeeList.length; i++){\n        if(this.employeeList[i]._id == employeeId){\n          this.url = this.employeeList[i].avatar;\n          this.employeeList[i].avatar = event.target.result;\n          break;\n        }\n      }\n    }\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0];\n      this.userAvatar.get('avatar').setValue(file);\n      // Open Modal\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to change your profile picture\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true,\n        allowOutsideClick: false,\n      }).then((result) => {\n        if (result.value) {\n        this.uploadAvatarAPI.uploadProfileImage(this.userAvatar,'Employee',employeeId).subscribe((data)=>{\n          if(data.status === 'success'){\n            swalWithBootstrapButtons.fire(\n              'Uploaded!',\n              data.message,\n              'success'\n            )\n          }\n        })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your profile not changed',\n            'error'\n          )\n          for(var i = 0; i<this.employeeList.length;i++){\n            if(this.employeeList[i]._id == employeeId){\n              this.employeeList[i].avatar = this.url;\n              break;\n            }\n          }\n        }\n      })\n\n    }\n  }\n}\n\n// Profile Image Form\nuserProfileForm(){\n  try {\n    this.userAvatar = this.fb.group({\n      avatar: ['']\n    })\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n// Update the filter functionality\nemployeeFilter(){\n  try {\n    if((document.getElementById('listEmployee')as HTMLInputElement).value.length !==0){\n      this.statusStatus = true;\n    } else {\n      this.statusStatus = false;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n\n}\n\n\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { EmployeeWizardComponent } from './employee-wizard.component';\nimport { EmployeeProfileComponent } from './employee-profile/employee-profile.component';\nimport { EmployeeWizardRouitngModule } from './employee-wizard-routing.module';\nimport { EmployeeService } from './services/employee.service';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { HttpClientModule } from '@angular/common/http';\nimport { EmployeeListComponent } from './employee-list/employee-list.component';\nimport { MatIconModule } from '@angular/material/icon';\n\n\n\n@NgModule({\n    declarations: [EmployeeWizardComponent, EmployeeProfileComponent, EmployeeListComponent],\n    imports: [\n      CommonModule,\n      RouterModule,\n      EmployeeWizardRouitngModule,\n      ReactiveFormsModule,\n      FormsModule,\n      HttpClientModule,\n      MatIconModule\n    ],\n    providers:[EmployeeService,AuthGuard],\n  })\n  \n  export class EmployeeWizardModule { }"]}