{"version":3,"sources":["webpack:///src/app/pages/company/company.component.ts","webpack:///src/app/pages/company/company.component.html","webpack:///src/app/pages/company/add-company/add-company.component.html","webpack:///src/app/pages/company/add-company/add-company.component.ts","webpack:///src/app/pages/company/update-company-list/update-company-list.component.html","webpack:///src/app/pages/company/update-company-list/update-company-list.component.ts","webpack:///src/app/pages/company/company-report/company-report.component.html","webpack:///src/app/pages/company/company-routing.module.ts","webpack:///src/app/pages/company/company-report/company-report.component.ts","webpack:///src/app/pages/company/company.module.ts"],"names":["CompanyComponent","AddCompanyComponent","api","fb","ngZone","router","util","successMessage","errorMsg","stateOption","imageError","imageFlag","currencyValidationMessage","type","message","validationMessage","this","permissionsInfo","permissionRoleInfo","companyDataValidate","populateCountries","uploadCompanyLogo","search","companyForm","disable","group","name","compose","required","officialNumber","minLength","maxLength","pattern","email","fax","address","domicile","outGoingMails","taxationNumber","panNumber","bankName","bankAccNum","bankType","err","console","log","element","scrollIntoView","cleanCompanyForm","cleanFormLevelOne","valid","submitCompanyData","value","selectCountryName","selectStateName","subscribe","data","isCompanyLogo","status","sessionStorage","setItem","company","_id","document","getElementById","length","companyLogoForm","responseData","successMsg","setTimeout","handleErrors","window","location","replace","errMsg","countryMsg","stateName","companyLogo","event","target","files","reader","FileReader","readAsDataURL","onload","url","result","size","imageErrorMsg","file","get","setValue","error","companyFormData","countryName","onSelectFile","reset","scroll","UpdateCompanyListComponent","route","removeAttribute","permissionInfo","setAttribute","snapshotParam","snapshot","paramMap","formValidation","existingCompanyDataValues","updateComapnyLogo","updateCompanyForm","getIndividualData","logoUrl","existingUrl","listCompanyData","cleanCompanyUpdateForm","submitUpdateCompanyData","updateCompanyLogoForm","updateCompanyFormData","CompanyReportComponent","CompanyRoutingModule","CompanyModule","path","component","canActivate","children","datePipe","gradeApi","apiService","notifier","spinner","earningDetails","deductionDetails","headerData","viewData","empData","gradeDetails","disableFilter","excelHeader","minMode","sortMonthTabs","currentPage","excelViewData","requestDatePicker","startDate","endDate","bsConfig","Object","assign","rangeInputFormat","dateInputFormat","getGradeRuleList","response","getAllFilterValues","tableData","gradeRuleInfo","earningsInfo","earning","push","trim","deductionInfo","deduction","concat","j","employeeSheetDetails","returnSheetValue","employeeData","srNo","headers","transform","doj","inHand","bonus","incentives","gross","presentDays","absentDays","workingDays","adjustLeave","everyDaySalary","netSalary","payMode","k","indexOf","empDedEarHeader","substr","empDedEarIndex","deductions","map","amount","earnings","grade","show","getCompanyReport","hide","notify","sortingCriteria","tabIndex","monthObj","sheetId","sortingId","workbook","Workbook","worksheet","addWorksheet","showMonthName","showYear","addRow","mergeCells","getCell","companyExpen","month","year","fill","fgColor","argb","font","family","bold","alignment","vertical","horizontal","wrapText","border","top","style","left","bottom","right","cellValues","sheetAlgo","cell","eachCell","i","getColumn","width","forEach","d","number","cash","cheque","bankTransfer","xlsx","writeBuffer","then","blob","Blob","cellValue","basicVertCellVal","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","Number","remainder","toString","quotient","parseInt","dateValues","format","page","selectGrade","rangeDatesUpdated","filterData","redirectTo","pathMatch","forChild","customNotifierOptions","position","distance","gap","theme","behaviour","autoHide","onClick","onMouseover","showDismissButton","stacking","animations","enabled","preset","speed","easing","offset","shift","overlap","withConfig","forRoot"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-company',\n  templateUrl: './company.component.html',\n  styleUrls: ['./company.component.scss']\n})\nexport class CompanyComponent implements OnInit {\n\n  constructor(){\n  }\n  ngOnInit(){\n  }\n\n}\n","\n<router-outlet></router-outlet>\n\n","<div class=\"card card-user\">\n  <div class=\"card-header\">\n    <h2 class=\"card-title\" #target>Company Details</h2>\n  </div>\n\n  <div class=\"card-body\" >\n    <div class=\"col-sm-offset-2\" >\n      <p class=\"alert alert-danger\" *ngIf=\"errorMsg\" >\n        <strong>{{ errMsg }}</strong>\n      </p>\n    </div>\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"successMessage\" >\n        <strong>{{ successMsg }}</strong>\n      </p>\n    </div>\n\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"companyForm\" (ngSubmit)=\"companyFormData()\" novalidate>\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Name (to appear on reports):&nbsp;<span style=\"color: darkred\">*</span></b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Company Name\" formControlName=\"name\">\n          <div *ngFor=\"let validation of validationMessage.name\">\n            <div style=\"color: red;margin-left: 14px;\"\n              *ngIf=\"companyForm.get('name').hasError(validation.type) && (companyForm.get('name').dirty || companyForm.get('name').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Address:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n        <div class=\"col-sm-offset-2\">\n          <textarea class=\"form-control\" id=\"inputAddress\" placeholder=\"Address\" formControlName=\"address\"\n          ></textarea>\n          <div *ngFor=\"let validation of validationMessage.address\">\n            <div style=\"color: red;margin-left: 14px;\"\n              *ngIf=\"companyForm.get('address').hasError(validation.type) && (companyForm.get('address').dirty || companyForm.get('address').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-6\">\n            <label class=\"col-sm-4 control-label\"><b>Country:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <select class=\"dropdown dropdown-toggle form-control\" id=\"country\" name =\"country\" (change)=\"countryName()\">\n            </select>\n            <div [ngStyle]=\"{display: countryMsg === undefined?'none':'block'}\" ><p style=\"color:red;\">{{countryMsg}}</p></div>\n          </div>\n          <div class=\"form-group col-md-6\" *ngIf=\"stateOption\">\n            <label class=\"col-sm-4 control-label\"><b>State:</b></label>\n            <select class=\"dropdown dropdown-toggle form-control\" name =\"state\" id =\"state\" (change)=\"stateName()\"></select>\n          </div>\n          <div class=\"form-group col-md-6\" *ngIf=\"!stateOption\">\n            <label class=\"col-sm-4 control-label\"><b>State:</b></label>\n            <select class=\"dropdown dropdown-toggle form-control\" disabled>\n              <option class=\"drop-down\">----Country Not Selected----</option>\n            </select>\n          </div>\n        </div>\n\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-6\">\n            <div class=\"form-group\">\n              <label class=\"col-sm-6 control-label\"><b>Domicile:</b></label>\n              <div class=\"col-sm-offset-2\">\n                <input class=\"form-control\" type=\"text\" id=\"inputDomiclie\" placeholder=\"Enter Domicile\"\n                  formControlName=\"domicile\">\n                <div *ngFor=\"let validation of validationMessage.domicile\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                    *ngIf=\"companyForm.get('domicile').hasError(validation.type) && (companyForm.get('domicile').dirty || companyForm.get('domicile').touched)\"\n                    style=\"color: red;margin-left: 14px;\">\n                    {{ validation.message }}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-group col-md-6\">\n            <div class=\"form-group\">\n              <label class=\"col-sm-6 control-label\"><b>Fax Number:</b></label>\n              <div class=\"col-sm-offset-2\">\n                <input class=\"form-control\" type=\"text\" id=\"inputFax\" placeholder=\"Enter Fax Number:\" formControlName=\"fax\">\n                <div *ngFor=\"let validation of validationMessage.fax\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                    *ngIf=\"companyForm.get('fax').hasError(validation.type) && (companyForm.get('fax').dirty || companyForm.get('fax').touched)\"\n                    style=\"color: red;margin-left: 14px;\">\n                    {{ validation.message }}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n    </div>\n\n    <div class=\"form-row\">\n      <div class=\"form-group col-md-6\">\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>Email Address:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n          <div class=\"col-sm-offset-2\">\n            <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Email \" formControlName=\"email\"\n            >\n            <div *ngFor=\"let validation of validationMessage.email\">\n              <div style=\"color: red;margin-left: 14px;\"\n                *ngIf=\"companyForm.get('email').hasError(validation.type) && (companyForm.get('email').dirty || companyForm.get('email').touched)\"\n                style=\"color: red;margin-left: 14px;\">\n                {{ validation.message }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group col-md-6\">\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>BCC Address for all outgoing mails:</b></label>\n          <div class=\"col-sm-offset-2\">\n            <input class=\"form-control\" type=\"email\" id=\"inputBcc\" placeholder=\"Enter BCC Address\"\n              formControlName=\"outGoingMails\">\n            <div *ngFor=\"let validation of validationMessage.outGoingMails\">\n              <div style=\"color: red;margin-left: 14px;\"\n                *ngIf=\"companyForm.get('outGoingMails').hasError(validation.type) && (companyForm.get('outGoingMails').dirty || companyForm.get('outGoingMails').touched)\"\n                style=\"color: red;margin-left: 14px;\">\n                {{ validation.message }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"form-row\">\n      <div class=\"form-group col-md-6\">\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>Bank Name:</b></label>\n          <div class=\"col-sm-offset-2\">\n            <input class=\"form-control\" type=\"text\" placeholder=\"Enter Bank Name \" formControlName=\"bankName\">\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group col-md-6\">\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>Account Type:</b></label>\n          <div class=\"col-sm-offset-2\">\n            <input class=\"form-control\" type=\"text\" placeholder=\"Enter Account Type\"\n              formControlName=\"bankType\">\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"form-row\">\n      <div class=\"col-md-6\">\n        <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Account Number:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" placeholder=\"Enter Account Number\"\n                formControlName=\"bankAccNum\">\n              <div *ngFor=\"let validation of validationMessage.bankAccNum\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"companyForm.get('bankAccNum').hasError(validation.type) && (companyForm.get('bankAccNum').dirty || companyForm.get('bankAccNum').touched)\"\n                  style=\"color: red;margin-left: 14px;\">\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n        </div>\n      </div>\n\n      <div class=\"form-group col-md-6\">\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>Official Company Number:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n          <div class=\"col-sm-offset-2\">\n            <input class=\"form-control\" type=\"text\" id=\"inputCompanyNo\" placeholder=\"Enter Official Company Number\"\n              formControlName=\"officialNumber\">\n            <div *ngFor=\"let validation of validationMessage.officialNumber\">\n              <div style=\"color: red;margin-left: 14px;\"\n                *ngIf=\"companyForm.get('officialNumber').hasError(validation.type) && (companyForm.get('officialNumber').dirty || companyForm.get('officialNumber').touched)\"\n                style=\"color: red;margin-left: 14px;\">\n                {{ validation.message }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Taxation No:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" id=\"inputTaxationno.\" placeholder=\"Enter Taxation Number\"\n                formControlName=\"taxationNumber\">\n              <div *ngFor=\"let validation of validationMessage.taxNumber\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"companyForm.get('taxationNumber').hasError(validation.type) && (companyForm.get('taxationNumber').dirty || companyForm.get('taxationNumber').touched)\"\n                  style=\"color: red;margin-left: 14px;\">\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n              <label class=\"col-sm-6 control-label\"><b>PAN (Permanent Account Number):</b></label>\n              <div class=\"col-sm-offset-2\">\n                <input class=\"form-control\" onkeyup=\"this.value = this.value.toUpperCase().trim();\" type=\"text\" id=\"inputPanno.\" placeholder=\"Enter PAN Number\"\n                  formControlName=\"panNumber\">\n                <div *ngFor=\"let validation of validationMessage.panNo\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                    *ngIf=\"companyForm.get('panNumber').hasError(validation.type) && (companyForm.get('panNumber').dirty || companyForm.get('panNumber').touched)\"\n                    style=\"color: red;margin-left: 14px;\">\n                    {{ validation.message }}\n                  </div>\n                </div>\n              </div>\n          </div>\n        </div>\n      </div>\n\n     <div class=\"row\">\n       <div class=\"col-lg-6 col-md-6 col-sm-6\">\n     <div class=\"row\">\n      <div class=\"col-lg-10 col-md-6 col-sm-6\">\n        <div class=\"form-group\">\n           <label class=\"control-label\"><b>Company Logo:</b></label><br>\n            <img [src]=\"url\" height=\"70\">\n            <input type=\"file\" class=\"form-control-file border\" id=\"companyLogo\" (change)=\"onSelectFile($event)\" accept=\"image/*\">\n            <div *ngIf=\"!imageFlag\">\n              <p class=\"imageError\">{{ imageError }}</p>\n            </div>\n            <div *ngIf=\"imageFlag\">\n              <p class=\"imageError\">{{ imageErrorMsg }}</p>\n            </div>\n          </div>\n      </div>\n      <div class=\"col-lg-2 col-md-6 col-sm-6\">\n        <div class=\"delete-button\">\n        <button class=\"btn btn-danger\" type=\"button\" (click)=\"reset()\" ><i class=\"fa fa-trash\"></i>&nbsp; Reset</button>\n      </div>\n      </div>\n     </div>\n    </div>\n    <div class=\"col-lg-6 col-md-6 col-sm-6\"></div>\n    </div>\n\n      <!-- <div class=\"form-row\">\n      <div class=\"form-group col-md-6\">\n        <label class=\"col-sm-4 control-label\"><b>Home Currency:</b></label>\n        <select class=\"dropdown dropdown-toggle form-control\" Name=\"HomeCurrency\" formControlName=\"currency\">\n          <option class='dropdown-item' ng-selected=\"true\" value=\"\" disabled selected>----------{{currencyOptionValue}}----------</option>\n          <option [ngValue]=\"homeCurrency.code\" *ngFor=\"let homeCurrency of currency\"> {{ homeCurrency.code }}</option>\n        </select>\n      </div>\n        <div class=\"form-group col-md-4\" style=\"margin-top: 13px;\">\n            <button type=\"button\" style=\"float: left;\" class=\"btn btn-primary\" data-toggle=\"modal\" (click)=resetForm() data-target=\"#myModal\">\n             <i class=\"fa fa-plus-square\"></i> Add Currency\n            </button>\n            <button type=\"button\" class=\"btn btn-danger\" style=\"float: left;\" >\n                <i class=\"fa fa-trash\"></i> Delete Currency\n               </button>\n              </div>\n      </div> -->\n            <!-- <div class=\"modal\" id=\"myModal\">\n                <div class=\"modal-dialog\">\n                  <div class=\"modal-content\">\n\n\n                    <div class=\"modal-header\">\n                      <h4 class=\"modal-title\">Add Currency</h4>\n                    </div>\n                    <div class=\"col-sm-offset-2\">\n                      <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                        <strong>{{ errMsg }}</strong>\n                      </p>\n                    </div>\n\n                    <div class=\"col-sm-offset-2\">\n                      <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                        <strong>{{ successMsg }}</strong>\n                      </p>\n                    </div>\n\n                    <div class=\"modal-body\">\n                      <form role=\"form\" [formGroup]=\"addCurrencyForm\" (ngSubmit)=\"addCurrency()\">\n                        <div class=\"form-group\">\n                          <label class=\"col-sm-6 control-label\"><b>Currency Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                          <input type=\"text\" formControlName=\"name\" placeholder=\"Enter Currency Name\" class=\"form-control\" />\n                          <div *ngFor=\"let validation of currencyValidationMessage.name\">\n                            <div style=\"color: red;margin-left: 14px;\"\n                              *ngIf=\"addCurrencyForm.get('name').hasError(validation.type) && (addCurrencyForm.get('name').dirty || addCurrencyForm.get('name').touched)\"\n                              style=\"color: red;margin-left: 14px;\">\n                              {{ validation.message }}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div class=\"form-group\">\n                          <label class=\"col-sm-6 control-label\"><b>Currency Code:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                          <input type=\"text\" formControlName=\"code\" placeholder=\"Enter Currency Code\" class=\"form-control\" />\n                          <div *ngFor=\"let validation of currencyValidationMessage.code\">\n                            <div style=\"color: red;margin-left: 14px;\"\n                              *ngIf=\"addCurrencyForm.get('code').hasError(validation.type) && (addCurrencyForm.get('code').dirty || addCurrencyForm.get('code').touched)\"\n                              style=\"color: red;margin-left: 14px;\">\n                              {{ validation.message }}\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"form-group\">\n                            <button type=\"button\" class=\"btn btn-danger\" id=\"dismiss\" style=\"float:right;\" data-dismiss=\"modal\">Close</button>\n                            <button type=\"submit\" class=\"btn btn-success\" style=\"float:right;\" [disabled]='addCurrencyForm.invalid'>Submit</button>\n                        </div>\n                      </form>\n                    </div>\n                  </div>\n                </div>\n             </div> -->\n             <!-- <div class=\"form-group\">\n              <div class=\"col-sm-offset-2 col-sm-10\">\n                <img [src]=\"url\" height=\"200\">\n                <input type=\"file\" class=\"form-control-file border\" (change)=\"onSelectFile($event)\" accept=\"image/*\">\n              </div>\n            </div> -->\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"companyForm.invalid || countryMsg || countryMsg === undefined || imageFlag\" (click)=\"scroll(target)\">Add Company</button>\n          <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"/pages/dashboard/company-list\">Cancel</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport { Router } from '@angular/router';\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\ndeclare var populateCountries: any ;\n\n@Component({\n  selector: 'app-add-company',\n  templateUrl: './add-company.component.html',\n  styleUrls: ['./add-company.component.scss']\n})\nexport class AddCompanyComponent implements OnInit {\n\n  companyForm: FormGroup;\n  addCurrencyForm:FormGroup;\n  companyLogoForm: FormGroup\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  countryMsg: any;\n  stateOption = false;\n  selectCountryName: any;\n  selectStateName: any;\n  url: any;\n  imageError = 'Image Size should be less than 2MB';\n  imageFlag = false;\n  imageErrorMsg: any;\n  permissionsInfo: any;\n\n  // currency: any;\n  // currencyOptionValue = 'Please Add Currency';\n\n  constructor(private api: ApiService, public fb: FormBuilder, private ngZone: NgZone,\n     private router: Router,\n     private util: UtilitiesService) {\n  }\n\n  ngOnInit() {\n    this.permissionsInfo = this.util.permissionRoleInfo;\n    this.companyDataValidate();\n    populateCountries(\"country\", \"state\");\n    this.uploadCompanyLogo();\n    if(this.permissionsInfo.search('Create Company') === -1){\n      this.companyForm.disable();\n    }\n    // this.addCurrencyFormValidation();\n    // this.listCurrency();\n  }\n  // addCurrencyFormValidation() {\n  //   try {\n  //     this.addCurrencyForm = this.fb.group({\n  //       name: new FormControl('', Validators.required),\n  //       code: new FormControl('',Validators.required)\n  //     });\n  //   }\n  //   catch (err) {\n  //     console.log(err);\n  //   }\n  // }\n   // Reset PopUp Currency Window\n  //  resetForm(){\n  //   try{\n  //     this.addCurrencyForm.reset();\n  //   } catch(err){\n  //     console.log(err);\n  //   }\n  // }\n\n  // Add Currency Value\n  // addCurrency(){\n  //   try{\n  //     let cleanCurrencyForm = this.util.cleanFormLevelOne(this.addCurrencyForm);\n  //     this.api.submitCurrency(cleanCurrencyForm.value).subscribe((data) => {\n  //       if(data.status === \"success\"){\n  //         this.successMessage = true ;\n  //         this.errorMsg = false ;\n  //         this.successMsg = data.message;\n  //         setTimeout(() => {\n  //           // this.listCurrency();\n  //           this.handleErrors();\n  //           (document.getElementById('dismiss') as HTMLElement).click();\n  //         },1500);\n  //       } else {\n  //         this.errorMsg = true;\n  //         this.successMessage = false;\n  //         this.errMsg = data.message;\n  //         setTimeout(() => {\n  //           this.handleErrors();\n  //         },1500);\n  //       }\n  //     })\n  //   } catch(err){\n  //     console.log(err);\n  //   }\n  // }\n\n//Method for show currency validdation message\ncurrencyValidationMessage = {\n  'name': [\n    { type: 'required', message: 'Currency Name is required' },\n  ],\n  'code': [\n    { type: 'required', message: 'Currency Code is required' },\n  ]\n}\n\n// List Currency Information\n// listCurrency(){\n// try{\n//   this.api.listCurrency().subscribe((data) =>{\n//     if(data.status === 'success'){\n//       if(data.data.length == 0){\n//         this.currencyOptionValue = 'Please Add Currency';\n//       } else {\n//         this.currency = data.data;\n//         this.currencyOptionValue = 'Select Currency';\n//       }\n\n//     }\n//   })\n// } catch(err){\n//   console.log(err);\n// }\n// }\n\n\n  //Method for Validation\n\n  companyDataValidate() {\n    try {\n      this.companyForm = this.fb.group({\n        name: new FormControl('', Validators.compose([\n          Validators.required,\n        ])),\n        officialNumber: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(15),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n        ])),\n        email: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n        ])),\n        fax: new FormControl('', Validators.compose([\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n          Validators.minLength(10),\n          Validators.maxLength(10),\n        ])),\n        address: new FormControl('', Validators.required),\n        domicile: new FormControl('', Validators.pattern('^[a-zA-Z]*$')),\n        outGoingMails: new FormControl('', Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')),\n        taxationNumber: new FormControl(''),\n        panNumber: new FormControl('', Validators.pattern('(^[A-Za-z]{5}[0-9]{4}[A-Za-z]$)')),\n        bankName: new FormControl(''),\n        bankAccNum: new FormControl('',Validators.compose([Validators.maxLength(16),\n          Validators.pattern(/^[0-9]*$/)])),\n        bankType: new FormControl('')\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  scroll(element) {\n    element.scrollIntoView();\n}\n\n//Method for submit new company list data\n  companyFormData() {\n    try{\n      let cleanCompanyForm = this.util.cleanFormLevelOne(this.companyForm);\n    if (this.companyForm.valid) {\n      this.api.submitCompanyData(cleanCompanyForm.value,this.selectCountryName,this.selectStateName).subscribe((data) => {\n        if(data.status == \"success\"){\n          sessionStorage.setItem('companyId',data.company._id);\n\n          // Upload Company Logo\n          let isCompanyLogo;\n          if((document.getElementById('companyLogo') as HTMLInputElement).value.length === 0){\n           isCompanyLogo = false;\n          } else {\n            isCompanyLogo = true;\n          }\n\n          this.api.uploadCompanyLogo(this.companyLogoForm,'Add CompanyLogo',isCompanyLogo).subscribe((responseData) => {\n            if(responseData.status === 'success'){\n              this.successMessage = true ;\n              this.errorMsg = false ;\n              this.successMsg = data.message;\n\n              setTimeout(() => {\n                this.handleErrors();\n                window.location.replace('/pages/dashboard/company-list');\n              },2000);\n            }\n          })\n\n        }\n        else if(data.status === \"error\"){\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(() => {\n            this.handleErrors();\n          },2000)\n        }\n      })\n    }\n  }\n  catch(err){\n    console.log(err);\n  }\n  }\n\n//Method for show validdation message\n  validationMessage = {\n    'name': [\n      { type: 'required', message: 'Name is required' },\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ],\n    'address':[\n      { type: 'required', message: 'Address is required' },\n    ],\n    'officialNumber': [\n      { type: 'required', message: 'Number is required' },\n      { type: 'minlength', message: 'Number too short ' },\n      { type: 'maxlength', message: 'Number is too large' },\n      { type: 'pattern', message: 'Company Number not valid' },\n    ],\n    'fax': [\n      { type: 'minlength', message: 'Fax number too short ' },\n      { type: 'maxlength', message: 'Fax no. is too large' },\n      { type: 'pattern', message: 'Fax Number not valid' },\n    ],\n    'domicile':[\n      { type: 'pattern', message: 'Invalid Domicile'},\n    ],\n    'outGoingMails':[\n      { type: 'pattern', message: 'Invalid Mail'},\n    ],\n    'taxNumber':[\n      { type: 'pattern', message: 'Invalid Taxation No.'},\n    ],\n    'panNo':[\n      { type: 'pattern', message: 'Invalid PAN No.'},\n    ],\n    'bankAccNum':[\n      { type: 'maxlength', message: 'Account No. limit exceeded'},\n      { type: 'pattern', message: 'Invalid Account No.'},\n    ],\n  }\n\n handleErrors(){\n          this.errorMsg = false;\n          this.successMessage = false;\n          this.errMsg = '';\n          this.successMsg = '';\n }\n\n // Country Option Functionality\n countryName(){\n   if((document.getElementById('country')as HTMLInputElement).value === '-1'){\n    this.countryMsg = \"Country Name is Required\";\n    this.stateOption = false;\n   } else {\n     this.selectCountryName = (document.getElementById('country')as HTMLInputElement).value\n     this.countryMsg = '';\n     this.stateOption = true;\n     this.stateName();\n   }\n }\n\n // State Option Functionality\nstateName(){\n  if((document.getElementById('state')as HTMLInputElement) === null){\n    this.selectStateName = '';\n  } else if((document.getElementById('state')as HTMLInputElement).value === ''){\n    this.selectStateName = '';\n  } else {\n    this.selectStateName = (document.getElementById('state')as HTMLInputElement).value\n  }\n}\n\n// Upload company Logo form\nuploadCompanyLogo(){\n  try{\n    this.companyLogoForm = this.fb.group({\n      companyLogo: ['']\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\nonSelectFile(event) {\n  if (event.target.files && event.target.files[0]) {\n    var reader = new FileReader();\n\n    reader.readAsDataURL(event.target.files[0]); // read file as data url\n\n    reader.onload = (event: any) => { // called once readAsDataURL is completed\n      this.url = event.target.result;\n    }\n    if(event.target.files[0].size > 2000000){\n      this.imageFlag = true;\n      this.imageErrorMsg = \"File Size Exceeded than 2MB\";\n    } else {\n      if (event.target.files.length > 0) {\n        this.imageFlag = false;\n        this.imageError = '';\n        this.imageErrorMsg = '';\n        const file = event.target.files[0];\n        this.companyLogoForm.get('companyLogo').setValue(file);\n      }\n    }\n  }\n}\n\n// Reset Image\nreset(){\n  try {\n    (document.getElementById('companyLogo') as HTMLInputElement).value = '';\n    this.url = '';\n    this.imageError = 'Image Size should be less than 2MB';\n    this.imageFlag = false;\n  } catch (error) {\n    console.log(error);\n\n  }\n}\n\n}\n","<div class=\"card card-user\">\n  <div class=\"card-header\" #target>\n    <h2 class=\"card-title\" style=\"text-align: center\">Update Company Details</h2>\n  </div>\n\n\n  <div class=\"col-sm-offset-2\">\n    <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n      <strong>{{ errMsg }}</strong>\n    </p>\n  </div>\n\n  <div class=\"col-sm-offset-2\">\n    <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n      <strong>{{ successMsg }}</strong>\n    </p>\n  </div>\n  <div class=\"card-body\">\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"updateCompanyForm\" (ngSubmit)=\"updateCompanyFormData()\"\n      novalidate>\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Name (to appear on reports):&nbsp;<span\n              style=\"color: darkred\">*</span></b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"text\" placeholder=\"Enter Company Name\" formControlName=\"name\">\n          <div *ngFor=\"let validation of validationMessage.name\">\n            <div style=\"color: red;margin-left: 14px;\"\n              *ngIf=\"updateCompanyForm.get('name').hasError(validation.type) && (updateCompanyForm.get('name').dirty || updateCompanyForm.get('name').touched)\">\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Address:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n        <div class=\"col-sm-offset-2\">\n          <textarea class=\"form-control\" id=\"inputAddress\" placeholder=\"Address\" formControlName=\"address\"></textarea>\n          <div *ngFor=\"let validation of validationMessage.address\">\n            <div style=\"color: red;margin-left: 14px;\"\n              *ngIf=\"updateCompanyForm.get('address').hasError(validation.type) && (updateCompanyForm.get('address').dirty || updateCompanyForm.get('address').touched)\"\n              >\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div class=\"form-group col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Domicile:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" id=\"inputDomiclie\" placeholder=\"Enter Domicile\"\n                formControlName=\"domicile\">\n              <div *ngFor=\"let validation of validationMessage.domicile\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"updateCompanyForm.get('domicile').hasError(validation.type) && (updateCompanyForm.get('domicile').dirty || updateCompanyForm.get('domicile').touched)\"\n                  >\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-group col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Bank Name:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" placeholder=\"Enter Bank Name:\" formControlName=\"bankName\">\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div class=\"form-group col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Account Type:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" placeholder=\"Enter Account Type:\" formControlName=\"bankType\">\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-group col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Account Number:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" placeholder=\"Enter Account Number:\" formControlName=\"bankAccNum\">\n              <div *ngFor=\"let validation of validationMessage.bankAccNum\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"updateCompanyForm.get('bankAccNum').hasError(validation.type) && (updateCompanyForm.get('bankAccNum').dirty || updateCompanyForm.get('bankAccNum').touched)\"\n                  >\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n      <div class=\"form-row\">\n\n        <div class=\"form-group col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Official Company Number:&nbsp;<span\n                  style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" id=\"inputCompanyNo\" placeholder=\"Enter Official Company Number\"\n                formControlName=\"officialNumber\">\n              <div *ngFor=\"let validation of validationMessage.officialNumber\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"updateCompanyForm.get('officialNumber').hasError(validation.type) && (updateCompanyForm.get('officialNumber').dirty || updateCompanyForm.get('officialNumber').touched)\"\n                 >\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-group col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Fax Number:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" id=\"inputFax\" placeholder=\"Enter Fax Number:\" formControlName=\"fax\">\n              <div *ngFor=\"let validation of validationMessage.fax\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"updateCompanyForm.get('fax').hasError(validation.type) && (updateCompanyForm.get('fax').dirty || updateCompanyForm.get('fax').touched)\"\n                  >\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Taxation No:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" id=\"inputTaxationno.\" placeholder=\"Enter Taxation Number\"\n                formControlName=\"taxationNumber\">\n              <div *ngFor=\"let validation of validationMessage.taxNumber\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"updateCompanyForm.get('taxationNumber').hasError(validation.type) && (updateCompanyForm.get('taxationNumber').dirty || updateCompanyForm.get('taxationNumber').touched)\"\n                  style=\"color: red;margin-left: 14px;\">\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n              <label class=\"col-sm-6 control-label\"><b>PAN (Permanent Account Number):</b></label>\n              <div class=\"col-sm-offset-2\">\n                <input class=\"form-control\" onkeyup=\"this.value = this.value.toUpperCase();\" type=\"text\" id=\"inputPanno.\" placeholder=\"Enter PAN Number\"\n                  formControlName=\"panNumber\">\n                <div *ngFor=\"let validation of validationMessage.panNo\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                    *ngIf=\"updateCompanyForm.get('panNumber').hasError(validation.type) && (updateCompanyForm.get('panNumber').dirty || updateCompanyForm.get('panNumber').touched)\"\n                    style=\"color: red;margin-left: 14px;\">\n                    {{ validation.message }}\n                  </div>\n                </div>\n              </div>\n          </div>\n        </div>\n     </div>\n     <div class=\"row\">\n      <div class=\"col-lg-6 col-md-6 col-sm-6\">\n    <div class=\"row\">\n     <div class=\"col-lg-10 col-md-6 col-sm-6\">\n       <div class=\"form-group\">\n\n          <label class=\"control-label\"><b>Company Logo:</b></label><br>\n           <img [src]=\"url\" height=\"70\">\n           <input type=\"file\" class=\"form-control-file border\" id=\"updateCompanyLogo\" (change)=\"onSelectFile($event)\" accept=\"image/*\">\n         </div>\n\n     </div>\n     <div class=\"col-lg-2 col-md-6 col-sm-6\">\n       <div class=\"delete-button\">\n       <button class=\"btn btn-danger\" type=\"button\" (click)=\"reset()\" ><i class=\"fa fa-trash\"></i>&nbsp; Reset</button>\n     </div>\n     </div>\n\n    </div>\n   </div>\n   <div class=\"col-lg-6 col-md-6 col-sm-6\"></div>\n   </div>\n\n\n      <!-- <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>GST No:</b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"text\" id=\"inputGstno.\" placeholder=\"Enter GSTNo\"\n            formControlName=\"gstNumber\">\n          <div *ngFor=\"let validation of validationMessage.gstNumber\">\n            <div style=\"color: red;margin-left: 14px;\"\n              *ngIf=\"updateCompanyForm.get('gstNumber').hasError(validation.type) && (updateCompanyForm.get('gstNumber').dirty || updateCompanyForm.get('gstNumber').touched)\"\n              >\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n      </div> -->\n\n      <!-- <div class=\"form-row\">\n        <div class=\"form-group col-md-6\">\n          <label class=\"col-sm-4 control-label\"><b>Home Currency:</b></label>\n          <select class=\"dropdown dropdown-toggle form-control\" Name=\"HomeCurrency\" formControlName=\"currency\">\n            <option class='dropdown-item' ng-selected=\"true\" value=\"\" disabled selected>----------{{currencyOptionValue}}----------</option>\n            <option [ngValue]=\"homeCurrency.code\" *ngFor=\"let homeCurrency of currency\"> {{ homeCurrency.code }}</option>\n          </select>\n        </div>\n          <div class=\"form-group col-md-4\" style=\"margin-top: 13px;\">\n              <button type=\"button\" style=\"float: left;\" class=\"btn btn-primary\" data-toggle=\"modal\" (click)=resetForm() data-target=\"#myModal\">\n               <i class=\"fa fa-plus-square\"></i> Add Currency\n              </button>\n              <button type=\"button\" class=\"btn btn-danger\" style=\"float: left;\" >\n                  <i class=\"fa fa-trash\"></i> Delete Currency\n                 </button>\n                </div>\n        </div> -->\n        <!-- <div class=\"modal\" id=\"myModal\">\n          <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n\n              <div class=\"modal-header\">\n                <h4 class=\"modal-title\">Add Currency</h4>\n              </div>\n              <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                  <strong>{{ errMsg }}</strong>\n                </p>\n              </div>\n\n              <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                  <strong>{{ successMsg }}</strong>\n                </p>\n              </div>\n              <div class=\"modal-body\">\n                <form role=\"form\" [formGroup]=\"addCurrencyForm\" (ngSubmit)=\"addCurrency()\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Currency Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <input type=\"text\" formControlName=\"name\" placeholder=\"Enter Currency Name\" class=\"form-control\" />\n                    <div *ngFor=\"let validation of currencyValidationMessage.name\">\n                      <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"addCurrencyForm.get('name').hasError(validation.type) && (addCurrencyForm.get('name').dirty || addCurrencyForm.get('name').touched)\"\n                        >\n                        {{ validation.message }}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Currency Code:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <input type=\"text\" formControlName=\"code\" placeholder=\"Enter Currency Code\" class=\"form-control\" />\n                    <div *ngFor=\"let validation of currencyValidationMessage.code\">\n                      <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"addCurrencyForm.get('code').hasError(validation.type) && (addCurrencyForm.get('code').dirty || addCurrencyForm.get('code').touched)\"\n                       >\n                        {{ validation.message }}\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"form-group\">\n                      <button type=\"button\" class=\"btn btn-danger\" id=\"dismiss\" style=\"float:right;\" data-dismiss=\"modal\">Close</button>\n                      <button type=\"submit\" class=\"btn btn-success\" style=\"float:right;\" [disabled]='addCurrencyForm.invalid'>Submit</button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n       </div> -->\n\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" class=\"btn btn-success\" [disabled]='updateCompanyForm.invalid || permissionInfo.search(\"Edit Company\") === -1' (click)=\"scroll(target)\">Update Company</button>\n          <button type=\"button\" class=\"btn btn-danger\"  routerLink=\"/pages/dashboard/company-list\" >Cancel</button>\n\n\n        </div>\n      </div>\n\n    </form>\n  </div>\n</div>","import { Component, OnInit, NgZone, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CompanyListComponent } from '../../dashboard/company-list/company-list.component';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-company-list',\n  templateUrl: './update-company-list.component.html',\n  styleUrls: ['./update-company-list.component.scss'],\n  providers: [CompanyListComponent],\n})\nexport class UpdateCompanyListComponent implements OnInit,OnDestroy {\n  ngOnDestroy(): void {\n    (document.getElementById('headerCompanyDropDown')as HTMLInputElement).removeAttribute('disabled');\n  }\n\n  updateCompanyForm: any;\n  addCurrencyForm:FormGroup;\n  successMsg: String;\n  successMessage: Boolean = false;\n  errMsg: String;\n  errorMsg: Boolean = false;\n  snapshotParam: String;\n  listCompanyData: any;\n  url: any;\n  updateCompanyLogoForm: any;\n  existingUrl: any;\n  permissionInfo: any;\n  // currency: any;\n  // currencyOptionValue = 'Please Add Currency';\n\n\n  constructor(private route: ActivatedRoute,\n     private api: ApiService,\n     public fb: FormBuilder,\n     private ngZone: NgZone,\n     private router: Router,\n     private util: UtilitiesService,\n    ) { }\n\n  ngOnInit() { //Calling methods for validation\n    this.permissionInfo = this.util.permissionRoleInfo;\n    (document.getElementById('headerCompanyDropDown')as HTMLInputElement).setAttribute('disabled','disabled');\n    this.snapshotParam = this.route.snapshot.paramMap.get(\"companyId\");\n    // this.listCurrency();\n    // this.addCurrencyFormValidation();\n    this.formValidation();\n    this.existingCompanyDataValues();\n    this.updateComapnyLogo();\n    if(this.permissionInfo.search('Edit Company') === -1){\n      this.updateCompanyForm.disable();\n    }\n  }\n\n// List Currency Information\n// listCurrency(){\n//   try{\n//     this.api.listCurrency().subscribe((data) =>{\n//       if(data.status === 'success'){\n//         if(data.data.length == 0){\n//           this.currencyOptionValue = 'Please Add Currency';\n//         } else {\n//           this.currency = data.data;\n//           this.currencyOptionValue = 'Select Currency';\n//         }\n\n//       }\n//     })\n//   } catch(err){}\n//   }\n\n  // addCurrencyFormValidation() {\n  //   try {\n  //     this.addCurrencyForm = this.fb.group({\n  //       name: new FormControl('', Validators.required),\n  //       code: new FormControl('',Validators.required)\n  //     });\n  //   }\n  //   catch (err) {\n  //     console.log(err);\n  //   }\n  // }\n   // Reset PopUp Currency Window\n  //  resetForm(){\n  //   try{\n  //     this.addCurrencyForm.reset();\n  //   } catch(err){\n  //     console.log(err);\n  //   }\n  // }\n\n  // addCurrency(){\n  //   try{\n  //     let cleanCurrencyForm = this.util.cleanFormLevelOne(this.addCurrencyForm);\n  //     this.api.submitCurrency(cleanCurrencyForm.value).subscribe((data) => {\n  //       if(data.status === \"success\"){\n  //         this.successMessage = true ;\n  //         this.errorMsg = false ;\n  //         this.successMsg = data.message;\n  //         setTimeout(() => {\n  //           this.listCurrency();\n  //           this.handleErrors();\n  //           (document.getElementById('dismiss') as HTMLElement).click();\n  //         },1500);\n  //       } else {\n  //         this.errorMsg = true;\n  //         this.successMessage = false;\n  //         this.errMsg = data.message;\n  //         setTimeout(() => {\n  //           this.handleErrors();\n  //         },1500);\n  //       }\n  //     })\n  //   } catch(err){\n  //     console.log(err);\n  //   }\n  // }\n\n  //Method for show currency validdation message\n// currencyValidationMessage = {\n//   'name': [\n//     { type: 'required', message: 'Currency Name is required' },\n//   ],\n//   'code': [\n//     { type: 'required', message: 'Currency Code is required' },\n//   ]\n// }\n  //Method for form validation\n  formValidation() {\n    try {\n      this.updateCompanyForm = this.fb.group({\n        name: new FormControl(\"\",Validators.required),\n        officialNumber: new FormControl(\"\", Validators.compose([\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(15),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n        ])),\n        email: new FormControl(\"\", Validators.compose([\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n        ])),\n        fax: new FormControl(\"\", Validators.compose([\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n          Validators.minLength(10),\n          Validators.maxLength(10),\n        ])),\n\n        address: new FormControl(\"\",Validators.required),\n        domicile: new FormControl(\"\", Validators.pattern('^[a-zA-Z]*$')),\n        outGoingMails: new FormControl(\"\", Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')),\n        taxationNumber: new FormControl(''),\n        panNumber: new FormControl('', Validators.pattern('(^[A-Za-z]{5}[0-9]{4}[A-Za-z]$)')),\n        bankName: new FormControl(''),\n        bankAccNum: new FormControl('',Validators.compose([Validators.maxLength(16),\n          Validators.pattern(/^[0-9]*$/)])),\n        bankType: new FormControl('')\n\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method for set existing value in the form\n  existingCompanyDataValues() {\n    try {\n      this.api.getIndividualData(this.snapshotParam).subscribe(data => {\n        if (data.status === \"success\" || data.status === 200) {\n          console.log(data);\n          this.url = data.data.logoUrl;\n          this.existingUrl = data.data.logoUrl;\n          this.listCompanyData = data.data;\n          this.updateCompanyForm = this.fb.group({\n            name: new FormControl(this.listCompanyData.name,Validators.required),\n            officialNumber: new FormControl(this.listCompanyData.officialNumber, Validators.compose([\n              Validators.required,\n              Validators.minLength(10),\n              Validators.maxLength(15),\n              Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n            ])),\n            email: new FormControl(this.listCompanyData.email, Validators.compose([\n              Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n            ])),\n            fax: new FormControl(this.listCompanyData.fax, Validators.compose([\n              Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n              Validators.minLength(10),\n              Validators.maxLength(10),\n            ])),\n\n            address: new FormControl(this.listCompanyData.address,Validators.required),\n            domicile: new FormControl(this.listCompanyData.domicile, Validators.pattern('^[a-zA-Z]*$')),\n            taxationNumber: new FormControl(this.listCompanyData.taxationNumber),\n            panNumber: new FormControl(this.listCompanyData.panNumber, Validators.pattern('(^[A-Za-z]{5}[0-9]{4}[A-Za-z]$)')),\n            bankName: new FormControl(this.listCompanyData.bankName),\n            bankAccNum: new FormControl(this.listCompanyData.bankAccNum,Validators.compose([Validators.maxLength(16),\n              Validators.pattern(/^[0-9]*$/)])),\n            bankType: new FormControl(this.listCompanyData.bankType)\n          })\n        }\n      })\n\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for Update Data\n  updateCompanyFormData() {\n    try{\n      let cleanCompanyUpdateForm = this.util.cleanFormLevelOne(this.updateCompanyForm);\n      if (this.updateCompanyForm.valid) {\n        this.api.submitUpdateCompanyData(cleanCompanyUpdateForm.value, this.snapshotParam).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n\n            // Upload Company Logo\n          let isCompanyLogo;\n          if((document.getElementById('updateCompanyLogo') as HTMLInputElement).value.length === 0){\n           isCompanyLogo = false;\n          } else {\n            isCompanyLogo = true;\n          }\n          this.api.uploadCompanyLogo(this.updateCompanyLogoForm,'Update CompanyLogo',isCompanyLogo).subscribe((responseData) => {\n            if(responseData.status === 'success'){\n              this.successMessage = true ;\n              this.errorMsg = false ;\n              this.successMsg = data.message;\n\n              setTimeout(() => {\n                this.handleErrors();\n                window.location.replace('/pages/dashboard/company-list');\n              },2000);\n            }\n          })\n          }\n          else if (data.status == \"error\") {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n            },2000);\n          }\n        })\n      }\n    } catch(err){\n      console.log(err);\n    }\n\n  }\n\n  //Onclick scrolling on div and  show message div\n  scroll(element) {\n    element.scrollIntoView();\n  }\n\n\n\n  //Method for show validation message\n  validationMessage = {\n    'name': [\n      { type: 'required', message: 'Name is required' },\n    ],\n    'address': [\n      { type: 'required', message: 'Address is required' }\n    ],\n    'officialNumber': [\n      { type: 'required', message: 'Official Number is required' },\n      { type: 'minlength', message: 'Number too short ' },\n      { type: 'maxlength', message: 'Number is too large' },\n      { type: 'pattern', message: 'Company Number not valid' },\n    ],\n    'fax': [\n      { type: 'minlength', message: 'Fax number too short ' },\n      { type: 'maxlength', message: 'Fax no. is too large' },\n      { type: 'pattern', message: 'Fax Number not valid' },\n    ],\n    'domicile': [\n      { type: 'pattern', message: 'Invalid Domicile' },\n    ],\n    'outGoingMails': [\n      { type: 'pattern', message: 'Invalid Mail' },\n    ],\n    'taxNumber':[\n      { type: 'pattern', message: 'Invalid Taxation No.'},\n    ],\n    'panNo':[\n      { type: 'pattern', message: 'Invalid PAN No.'},\n    ],\n    'bankAccNum':[\n      { type: 'maxlength', message: 'Account No. limit exceeded'},\n      { type: 'pattern', message: 'Invalid Account No.'},\n    ],\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n\n// When User Select the file\nonSelectFile(event) {\n  if (event.target.files && event.target.files[0]) {\n    var reader = new FileReader();\n\n    reader.readAsDataURL(event.target.files[0]); // read file as data url\n\n    reader.onload = (event: any) => { // called once readAsDataURL is completed\n      this.url = event.target.result;\n    }\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0];\n      this.updateCompanyLogoForm.get('companyLogo').setValue(file);\n    }\n  }\n}\n\n// update Company Logo\nupdateComapnyLogo(){\n  try{\n    this.updateCompanyLogoForm = this.fb.group({\n      companyLogo: ['']\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\nreset(){\n  try {\n    this.url = this.existingUrl;\n  } catch (error) {\n    console.log(error);\n\n  }\n}\n\n}\n","<notifier-container></notifier-container>\n<ngx-spinner bdColor=\"rgba(51,51,51,0.8)\" size=\"large\" color=\"#fff\" type=\"square-jelly-box\">\n    <p style=\"font-size: 20px; color: white\">Loading...</p>\n</ngx-spinner>\n<div class=\"card card-user\">\n    <div class=\"card-header\">\n        <h2 class=\"card-title text-center\">Company Report</h2>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"form-row\">\n            <div class=\"col-lg-3 col-md-3 col-sm-12\">\n                <div class=\"form-group\">\n                    <select class=\"dropdown dropdown-toggle form-control\" id=\"gradeOptions\" (change)=\"selectGrade()\">\n          <option class=\"dropdown-item\" ng-selected=\"true\" value=\"\" selected>Select Grade</option>\n          <option class=\"dropdown-item\" *ngFor='let list of gradeDetails'  value=\"{{list._id}}\">{{ list.title }}</option>\n       </select>\n                </div>\n            </div>\n            <div class=\"col-lg-3 col-md-3 col-sm-12\">\n                <div class=\"form-group\">\n\n                    <input type=\"text\" class=\"form-control\" [bsConfig]=\"bsConfig\" placeholder=\"Select Months\" id=\"rangeDate\" bsDaterangepicker (bsValueChange)=\"rangeDatesUpdated($event)\">\n\n                </div>\n            </div>\n            <div class=\"col-lg-6 col-md-6 col-sm-12\">\n                <div class=\"form-group right-buttongroup\">\n                    <button class=\"btn btn-primary btn-margin\" [disabled]=\"disableFilter\" (click)=\"filterData()\"><i  class=\"fa fa-filter\"></i>Filter</button>\n                    <button class=\"btn btn-danger btn-margin\" (click)=\"reset()\"><i  class=\"fa fa-trash\"></i>Reset</button>\n                    <button *ngIf=\"viewData.length !== 0\" style=\"float: right;\" class=\"btn btn-success btn-round btn-margin\" (click)=\"generateExcelSheet()\"><i class=\"fas fa-download\"></i>Sheet</button>\n                </div>\n            </div>\n        </div>\n\n\n\n\n        <div *ngIf=\"viewData.length === 0\">\n            <p style=\"font-size: 16px;\" class=\"text-center\">Please fill sufficient data for the view of company reports</p>\n        </div>\n        <ul class=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\" #target>\n            <li class=\"nav-item\" *ngFor=\"let monthTab of sortMonthTabs, let i = index ;\">\n                <a class=\"nav-link\" [ngClass]=\" i === 0 ? 'active': ''\" data-toggle=\"tab\" [attr.href]=\" '#' + monthTab.showMonthName + monthTab.showYear \" role=\"tab\" [attr.aria-controls]=\"monthTab.showMonthName\" (click)=\"changeTabData(monthTab.sortingId)\">{{  monthTab.showMonthName }} - {{ monthTab.showYear }}</a>\n            </li>\n        </ul>\n\n\n        <div class=\"tab-content\">\n            <div class=\"tab-pane\" *ngFor=\"let monthTab of sortMonthTabs, let i = index ;\" id=\"{{ monthTab.showMonthName }}{{ monthTab.showYear }}\" role=\"tabpanel\" [ngClass]=\" i === 0 ? 'active': ''\">\n                <div *ngIf=\"viewData.length !== 0\">\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead class=\"text-primary\">\n                                <th class=\"text-center\" *ngFor=\"let list of headerData, let i = index;\" [ngClass]=\"i === 0  ? 'sticky-col first-col': i === 1 ? 'sticky-col second-col' : '' \">{{ list }}</th>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let emp of viewData | paginate: { itemsPerPage: 5, currentPage: currentPage }\">\n                                    <td *ngFor=\"let empDet of emp, let  i = index; \" class=\"text-center\" [ngClass]=\"i === 0  ? 'sticky-col first-col': i === 1 ? 'sticky-col second-col' : '' \">{{ empDet }}</td>\n                                </tr>\n\n                            </tbody>\n                        </table>\n\n                    </div>\n                    <div class=\"pagination-outer\">\n                        <pagination-controls (pageChange)=\"onPageChange($event)\" previousLabel=\"\" nextLabel=\"\"></pagination-controls>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CompanyComponent } from './company.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { AddCompanyComponent } from './add-company/add-company.component';\nimport { UpdateCompanyListComponent } from './update-company-list/update-company-list.component';\nimport { CompanyReportComponent } from './company-report/company-report.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : CompanyComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'add-company',\n        component: AddCompanyComponent,\n      },\n      {\n        path: 'update-company-list/:companyId',\n        component:UpdateCompanyListComponent,\n      },\n      {\n        path: 'company-report',\n        component: CompanyReportComponent,\n      },\n      {\n        path:'',\n        redirectTo :'company-list',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class CompanyRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { ApiService } from 'src/app/services/api.service';\nimport { GraderuleApiService } from '../../graderule/graderule-service/graderule-api.service';\nimport { Workbook } from 'exceljs';\nimport * as fs from 'file-saver';\nimport { NotifierService } from 'angular-notifier';\nimport moment from 'moment';\nimport { BsDatepickerConfig, BsDatepickerViewMode } from 'ngx-bootstrap/datepicker';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-company-report',\n  templateUrl: './company-report.component.html',\n  styleUrls: ['./company-report.component.scss']\n})\nexport class CompanyReportComponent implements OnInit {\n\n  earningDetails = [];\n  deductionDetails = [];\n  headerData = [];\n  viewData = [];\n  empData = [];\n  gradeDetails = [];\n  tableData: any;\n  disableFilter = true;\n  cellValues: string;\n  excelHeader = [];\n  minMode: BsDatepickerViewMode = 'month'; // change for month:year\n  sortMonthTabs = [];\n\n  currentPage = 1;\n  excelViewData = [];\n\n  bsConfig: Partial<BsDatepickerConfig>;\n  requestDatePicker = {\n    startDate: '',\n    endDate: ''\n  }\n\n  constructor(\n    private datePipe: DatePipe,\n    public gradeApi: GraderuleApiService,\n    public apiService: ApiService,\n    public notifier: NotifierService,\n    private spinner: NgxSpinnerService,\n\n\n\n  ) {\n    this.bsConfig = Object.assign({}, {\n      minMode : this.minMode,\n      rangeInputFormat: 'MM-YYYY',\n      dateInputFormat: 'MM-YYYY'\n    });\n  }\n\n  ngOnInit() {\n    this.gradeApi.getGradeRuleList().subscribe(response => {\n      if (response.status === 'success') {\n        this.gradeDetails = response.data;\n      }\n    });\n    this.getAllFilterValues();\n  }\n\n  getCompanyReport(tableData) {\n    try {\n      this.headerData = [];\n      const header = [\n        'Sr No.',\n        'Name',\n        'Date of Joining',\n        'In Hand(P/M)',\n        'Bonus',\n        'Incentives',\n        'Gross',\n        'PresentDays',\n        'Absent Days',\n        'Working Days',\n        'Adjust Leave',\n        'Per day Salary',\n        'Net Salary',\n        'Pay Mode'\n      ];\n\n\n      // FOR EARNING INFO\n      if (tableData.gradeRuleInfo.earningsInfo.length !== 0) {\n        this.earningDetails = [];\n        for (let earning of tableData.gradeRuleInfo.earningsInfo) {\n          if (earning.type === 'Percent') {\n            let earningString = `${earning.name}(${earning.value}%)`;\n            this.earningDetails.push(earningString);\n          }\n\n          if (earning.type === 'Fixed') {\n            let earningString = `${earning.name}(₹ ${earning.value})`;\n            this.earningDetails.push(earningString);\n          }\n\n          if ((earning.type).trim().length === 0) {\n            let earningString = `${earning.name}`;\n            this.earningDetails.push(earningString);\n          }\n\n        }\n      }\n\n      // FOR DEDUCTION INFO\n      if (tableData.gradeRuleInfo.deductionInfo.length !== 0) {\n        this.deductionDetails = [];\n        for (let deduction of tableData.gradeRuleInfo.deductionInfo) {\n          if (deduction.type === 'Percent') {\n            let deductionString = `${deduction.name}(${deduction.value}%)`;\n            this.deductionDetails.push(deductionString);\n          }\n\n          if (deduction.type === 'Fixed') {\n            let deductionString = `${deduction.name}(₹ ${deduction.value})`;\n            this.deductionDetails.push(deductionString);\n          }\n          if ((deduction.type).trim().length === 0) {\n            let deductionString = `${deduction.name}`;\n            this.deductionDetails.push(deductionString);\n          }\n        }\n      }\n      // FOR MANAGE HEADER DATA\n      this.headerData = header.concat(this.earningDetails.concat(this.deductionDetails));\n      this.viewData = [];\n      for (let j = 0; j < tableData.employeeSheetDetails.length; j++) {\n        this.returnSheetValue(tableData.employeeSheetDetails[j], j + 1, this.headerData, 'companyReport');\n      }\n     } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // FOR MANAGE TABLE DATA ACCORDING TO HEADER DATA\n  returnSheetValue(employeeData, srNo, headers, type) {\n    let viewData = [\n      srNo,\n      employeeData.name,\n      this.datePipe.transform(employeeData.doj, 'dd-MM-yyyy'),\n      employeeData.inHand,\n      employeeData.bonus,\n      employeeData.incentives,\n      employeeData.gross,\n      employeeData.presentDays,\n      employeeData.absentDays,\n      employeeData.workingDays,\n      employeeData.adjustLeave,\n      employeeData.everyDaySalary,\n      employeeData.netSalary,\n      employeeData.payMode,\n\n    ];\n    for (let k = headers.indexOf(\"Pay Mode\") + 1; k < headers.length; k++) {\n\n      let empDedEarHeader = headers[k].substr(0, headers[k].indexOf('(')).trim();\n      empDedEarHeader.trim().length === 0 ? empDedEarHeader = headers[k].trim() : '';\n\n      let empDedEarIndex = employeeData.deductions.map((amount) => {\n        return (amount.label).trim();\n      }).indexOf(empDedEarHeader);\n\n      if (empDedEarIndex === -1) {\n        empDedEarIndex = employeeData.earnings.map((amount) => {\n          return (amount.label).trim();\n        }).indexOf(empDedEarHeader);\n\n        viewData.push(employeeData.earnings[empDedEarIndex]['amt'])\n      } else {\n        viewData.push(employeeData.deductions[empDedEarIndex]['amt'])\n      }\n    }\n    return type === 'excelReport' ? this.excelViewData.push(viewData) : this.viewData.push(viewData);\n  }\n\n  // CHECK ALL FILTER BLANK OR NOT\n  getAllFilterValues() {\n    try {\n      let grade = (document.getElementById('gradeOptions') as HTMLInputElement).value;\n      if (grade !== '' && this.requestDatePicker.startDate.trim().length > 0  && this.requestDatePicker.endDate.trim().length > 0) {\n        this.disableFilter = false;\n      } else {\n        this.disableFilter = true;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // CHECK DROPDOWN VALUES\n  selectGrade() {\n    try {\n      this.getAllFilterValues();\n    } catch (error) {\n      console.log(error);\n\n    }\n  }\n\n\n  // FOR FILTER DATA AND GET COMPANY REPORT\n  filterData() {\n    try {\n      this.spinner.show();\n      let grade = (document.getElementById('gradeOptions') as HTMLInputElement).value;\n      this.apiService.getCompanyReport(this.requestDatePicker.startDate, this.requestDatePicker.endDate, grade).subscribe(response => { \n      this.spinner.hide();\n          if (response.status === 'success') {\n          if(response.data.length === 0){\n            this.notifier.notify('info', 'Company Report Not Available')\n          }\n          if(response.data.length !== 0){\n            this.sortMonthTabs = response.sortingCriteria;\n            this.tableData = response.data;\n\n            let tabIndex = this.tableData.map((monthObj) => {\n              return monthObj.sheetId;\n            }).indexOf(this.sortMonthTabs[0].sortingId);\n\n          this.getCompanyReport(this.tableData[tabIndex]);\n          }\n        } else if (response.status === 'error') {\n          this.tableData = [];\n          this.notifier.notify(response.status, response.message);\n        }\n      }, error => {\n      this.spinner.hide();\n        console.log(error);\n      });\n    } catch (error) {\n      this.spinner.hide();\n      console.log(error);\n    }\n  }\n\n  // FOR RESET FILTER VALUES\n  reset() {\n    try {\n      (document.getElementById('gradeOptions') as HTMLInputElement).value = '';\n      (document.getElementById('rangeDate') as HTMLInputElement).value = '';\n      this.disableFilter  = true;\n      this.headerData = [];\n      this.excelHeader = [];\n      this.viewData = [];\n      this.sortMonthTabs = [];\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n// FOR GENERATE COMPANY REPORT SHEET\n  async generateExcelSheet() {\n    try {\n      const workbook = new Workbook();\n      for(let tableData of this.tableData) { \n        \n      const worksheet = workbook.addWorksheet(`${tableData.showMonthName} ${tableData.showYear}`);\n      worksheet.addRow([]);\n      // FOR MANAGE COMPANY NAME\n      worksheet.mergeCells('L2:R2');\n      worksheet.getCell('L2').value = `${tableData.companyExpen.name}, ${tableData.month} ${tableData.year}`;\n      worksheet.getCell('L2').fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '7B7B7B' }, };\n      worksheet.getCell('L2').font = { name: 'Trebuchet MS', family: 4, size: 20, bold: true, };\n      worksheet.getCell('L2').alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n\n      worksheet.addRow([]);\n      worksheet.addRow([]);\n      const header = [\n        'Sr No.',\n        'Name',\n        'Date of Joining',\n        'In Hand(P/M)',\n        'Bonus',\n        'Incentives',\n        'Gross',\n        'PresentDays',\n        'Absent Days',\n        'Working Days',\n        'Adjust Leave',\n        'Per day Salary',\n        'Net Salary',\n        'Pay Mode'\n\n      ];\n\n      worksheet.mergeCells('A4:M4');\n      worksheet.getCell('A4:M4').value = 'Employee Details';\n      worksheet.getCell('A4:M4').fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE1EFDA' } };\n      worksheet.getCell('A4:M4').alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n      worksheet.getCell('A4:M4').font = { name: 'Arial', family: 4, size: 12, bold: true, };\n      worksheet.getCell('A4:M4').border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n\n      const  earnings = [];\n      if (tableData.gradeRuleInfo.earningsInfo.length !== 0) {\n        this.cellValues = `${this.sheetAlgo(14 + tableData.gradeRuleInfo.earningsInfo.length)}4`;\n        worksheet.mergeCells(`N4:${this.cellValues}`);\n        worksheet.getCell('N4').value = 'Total Earnings';\n        worksheet.getCell('N4').fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE1EFDA' } };\n        worksheet.getCell('N4').alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n        worksheet.getCell('N4').font = { name: 'Arial', family: 4, size: 12, bold: true, };\n        worksheet.getCell('N4').border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        for (let earning of tableData.gradeRuleInfo.earningsInfo) {\n          if (earning.type === 'Percent') {\n            let earningString = `${earning.name}(${earning.value}%)`;\n            earnings.push(earningString);\n          }\n\n          if (earning.type === 'Fixed') {\n            let earningString = `${earning.name}(₹ ${earning.value})`;\n            earnings.push(earningString);\n          }\n\n          if ((earning.type).trim().length === 0) {\n            let earningString = `${earning.name}`;\n            earnings.push(earningString);\n          }\n        }\n      }\n      const deductions = [];\n      if (tableData.gradeRuleInfo.deductionInfo.length !== 0) {\n        let cell = `${this.sheetAlgo((14 + tableData.gradeRuleInfo.earningsInfo.length + 1))}4:${this.sheetAlgo((14 + tableData.gradeRuleInfo.earningsInfo.length + tableData.gradeRuleInfo.deductionInfo.length))}4`;\n        worksheet.mergeCells(cell);\n        worksheet.getCell(`${this.sheetAlgo(14 + tableData.gradeRuleInfo.earningsInfo.length + 1)}4`).value = 'Total Deduction';\n        worksheet.getCell(`${this.sheetAlgo(14 + tableData.gradeRuleInfo.earningsInfo.length + 1)}4`).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE1EFDA' } };\n        worksheet.getCell(`${this.sheetAlgo(14 + tableData.gradeRuleInfo.earningsInfo.length + 1)}4`).alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n        worksheet.getCell(`${this.sheetAlgo(14 + tableData.gradeRuleInfo.earningsInfo.length + 1)}4`).font = { name: 'Arial', family: 4, size: 12, bold: true, };\n        worksheet.getCell(`${this.sheetAlgo(14 + tableData.gradeRuleInfo.earningsInfo.length + 1)}4`).border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        for (let deduction of tableData.gradeRuleInfo.deductionInfo) {\n          if (deduction.type === 'Percent') {\n            let deductionString = `${deduction.name}(${deduction.value}%)`;\n           deductions.push(deductionString);\n          }\n\n          if (deduction.type === 'Fixed') {\n            let deductionString = `${deduction.name}(₹ ${deduction.value} )`;\n           deductions.push(deductionString);\n          }\n\n          if ((deduction.type).trim().length === 0) {\n            let deductionString = `${deduction.name}`;\n           deductions.push(deductionString);\n          }\n        }\n      }\n\n\n       this.excelHeader = header.concat(earnings.concat(deductions));\n\n      worksheet.addRow(this.excelHeader).eachCell(cell => {\n        cell.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: { argb: 'FFE1EFDA' },\n        }\n        cell.font = { name: 'Arial', family: 4, size: 10, bold: true, };\n        cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n      });\n\n      for (let i = 0; i < this.excelHeader.length; i++) {\n        worksheet.getColumn(i + 1).width = 20;\n      }\n\n      this.excelViewData = [];\n      for (let j = 0; j < tableData.employeeSheetDetails.length; j++) {\n        this.returnSheetValue(tableData.employeeSheetDetails[j], j + 1, this.excelHeader, 'excelReport');\n\n      }\n\n      this.excelViewData.forEach(d => {\n        const row = worksheet.addRow(d);\n        row.eachCell((cell, number) => {\n          cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n          cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n        });\n      });\n\n      worksheet.addRow([]);\n      worksheet.addRow([]);\n\n\n      const monthHeading = ['', '', 'Monthly Paid', ''];\n      worksheet.addRow(monthHeading).eachCell(cell => {\n        cell.font = { name: 'Arial', family: 4, size: 14, bold: true, };\n        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFDF2CC' } };\n        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n      });\n\n      const monthSubHeader = ['Company Name', 'Cash', 'Cheque', 'Account Transfer'];\n      worksheet.addRow(monthSubHeader).eachCell(cell => {\n        cell.font = { name: 'Arial', family: 4, size: 10, bold: true, };\n        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE1EFDA' } };\n        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n      });\n\n      const monthlyData = [[tableData.companyExpen.name, tableData.companyExpen.cash, tableData.companyExpen.cheque, tableData.companyExpen.bankTransfer]]\n\n      monthlyData.forEach(d => {\n        const row = worksheet.addRow(d);\n        row.eachCell((cell, number) => {\n          cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n          cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n        });\n      });\n\n    }\n\n      // Generate Excel sheet\n      workbook.xlsx.writeBuffer().then((data) => {\n        const blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n        fs.saveAs(blob, `${this.tableData[0].companyExpen.name}-report.xlsx`);\n        this.excelHeader = [];\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  sheetAlgo(cellValue) {\n\n    let basicVertCellVal = {\n      1: 'A', 2: 'B', 3: 'C', 4: 'D', 5: 'E', 6: 'F', 7: 'G', 8: 'H', 9: 'I', 10: 'J',\n      11: 'K', 12: 'L', 13: 'M', 14: 'N', 15: 'O', 16: 'P', 17: 'Q', 18: 'R', 19: 'S', 20: 'T',\n      21: 'U', 22: 'V', 23: 'W', 24: 'X', 25: 'Y', 26: 'Z',\n    }\n    let value = Number(cellValue);\n\n    if (value > 26) {\n      let remainder = (value % 26).toString();\n      let quotient = parseInt((value / 26).toString());\n      let returnCellValue = remainder === '0' ? `${basicVertCellVal[Number(quotient) - 1]}Z` : `${basicVertCellVal[quotient]}${basicVertCellVal[remainder]}`;\n\n      return returnCellValue;\n    } else {\n      return `${basicVertCellVal[cellValue]}`;\n    }\n  }\n\n\n// ON DATE SELECT CHECK VALIDATION\n  rangeDatesUpdated(dateValues){\n    try {\n\n      if (dateValues === null || dateValues === 'Invalid Date' || dateValues === [null] || dateValues[0] === null || dateValues[1] === null || dateValues.length < 2) {\n        this.requestDatePicker = {\n          startDate: '',\n          endDate: '',\n        }\n      } else{\n        this.requestDatePicker = {\n          startDate: moment(dateValues[0]).format('YYYY-MM'),\n          endDate: moment(dateValues[1]).format('YYYY-MM'),\n        }\n      }\n     \n      this.getAllFilterValues();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\n  // FOR FILTER MONTH DATA\n  changeTabData(sortingId){\n    try { \n      let tabIndex = this.tableData.map((monthObj) => {\n        return monthObj.sheetId\n      }).indexOf(sortingId);\n      \n      this.getCompanyReport(this.tableData[tabIndex]);\n      this.currentPage = 1;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n   // on page change events\n   onPageChange(page: number) {\n    this.currentPage = page;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AddCompanyComponent } from './add-company/add-company.component';\nimport { CompanyRoutingModule } from './company-routing.module';\nimport { CompanyComponent } from './company.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UpdateCompanyListComponent } from './update-company-list/update-company-list.component';\nimport { CompanyReportComponent } from './company-report/company-report.component';\nimport { NotifierModule, NotifierOptions } from 'angular-notifier';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nconst customNotifierOptions: NotifierOptions = {\n  position: {\n    horizontal: {\n      position: 'right',\n      distance: 12\n    },\n    vertical: {\n      position: 'top',\n      distance: 12,\n      gap: 10\n    }\n  },\n  theme: 'material',\n  behaviour: {\n    autoHide: 5000,\n    onClick: 'hide',\n    onMouseover: 'pauseAutoHide',\n    showDismissButton: true,\n    stacking: 4\n  },\n  animations: {\n    enabled: true,\n    show: {\n      preset: 'slide',\n      speed: 300,\n      easing: 'ease'\n    },\n    hide: {\n      preset: 'fade',\n      speed: 300,\n      easing: 'ease',\n      offset: 50\n    },\n    shift: {\n      speed: 300,\n      easing: 'ease'\n    },\n    overlap: 150\n  }\n};\n@NgModule({\n  declarations: [\n    AddCompanyComponent,\n    CompanyComponent,\n     UpdateCompanyListComponent,\n     CompanyReportComponent\n    ],\n  imports: [\n    CommonModule,\n    CompanyRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    NgxPaginationModule,\n    NotifierModule.withConfig(customNotifierOptions),\n    BsDatepickerModule.forRoot(),\n    NgxSpinnerModule\n\n  ]\n})\nexport class CompanyModule { }\n"]}