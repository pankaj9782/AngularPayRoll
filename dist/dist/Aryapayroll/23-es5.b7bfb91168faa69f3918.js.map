{"version":3,"sources":["webpack:///src/app/pages/leave-types/leave-types.component.ts","webpack:///src/app/pages/leave-types/leave-types.component.html","webpack:///src/app/pages/leave-types/list-leave-types/list-leave-types.component.html","webpack:///src/app/pages/leave-types/list-leave-types/list-leave-types.component.ts","webpack:///src/app/pages/leave-types/add-leave-types/add-leave-types.component.html","webpack:///src/app/pages/leave-types/update-leave-type/update-leave-type.component.html","webpack:///src/app/pages/leave-types/leave-types-routing.module.ts","webpack:///src/app/pages/leave-types/update-leave-type/update-leave-type.component.ts","webpack:///src/app/pages/leave-types/add-leave-types/add-leave-types.component.ts","webpack:///src/app/pages/leave-types/leave-types.module.ts"],"names":["LeavetypesComponent","ListLeaveTypesComponent","api","route","_Activatedroute","util","showCard","leaveListData","companyShowData","this","permissionInfo","permissionRoleInfo","leaveList","getListData","subscribe","data","status","leaveTypes","length","navigateByUrl","len","Object","keys","i","_id","err","console","log","message","leaveId","leaveTypeId","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","type","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","value","removeData","dismiss","DismissReason","cancel","leaveStatus","addLeaveTypes","UpdateLeaveTypeComponent","AddLeaveTypesComponent","LeavetypesModule","LeavetypesRoutingModule","path","component","canActivate","children","_api","fb","ngZone","router","successMsg","String","successMessage","errMsg","errorMsg","companyListData","companyName","validationMessage","isListAvaliable","companyDataValidate","search","leaveForm","disable","group","leaveTypeName","required","leaveTypeCode","isPaid","cleanLeaveTypeForm","cleanFormLevelOne","leaveDataSubmit","setTimeout","handleErrors","run","leaveFormData","companyNameStore","leaveData","snapshot","paramMap","get","moduleExists","existingLeaveTypeValues","leaveForm1","leaveTypeDetails","existingData","cleanUpdateLeaveTypeForm","updateLeaveType","updateLeaveFormData","redirectTo","pathMatch","forChild"],"mappings":"ieAOaA,E,oCAAN,IAAMA,EAAN,WAEL,aAAc,EAAD,QAFR,wD,oCAAMA,I,uBAAAA,EAAmB,2ECPhC,yB,iHCuBgB,aAAwB,eAAkE,Q,sBAC1F,aAAyB,eAAgE,Q,qCANjG,gBACI,aACI,aAAI,YAAG,QAAQ,OAAI,OACnB,aAAI,QAAuB,OAC3B,aAAI,QAAuB,OAC3B,qBACA,sBACJ,cACI,eACwF,eAAqC,OACxH,iBACL,qBACsC,mGAA6C,gBAA2B,OAElH,OACA,OAfJ,O,6CAEe,yBACH,8BACA,8BACA,8BACA,+BAED,wEACF,oEAEO,2EClBjB,IAAMC,EAAN,IAAMA,EAAN,WASH,WAAoBC,EACXC,EACCC,EACAC,aAHU,KAAAH,MACX,KAAAC,QACC,KAAAC,kBACA,KAAAC,OAVL,KAAAC,SAAe,GAEf,KAAAC,cAAoB,GACpB,KAAAC,gBAAsB,GALxB,6CAeDC,KAAKC,eAAiBD,KAAKJ,KAAKM,mBAChCF,KAAKG,cAhBJ,kCAmBQ,WACT,IACEH,KAAKP,IAAIW,cAAcC,WAAUC,YAC/B,GAAoB,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,OAEpC,GADAP,EAAKF,cAAgBQ,EAAKE,WACG,GAA1BF,EAAKE,WAAWC,OACjBT,EAAKN,MAAMgB,cAAc,2CAIzB,IADA,IAAMC,EAAMC,OAAOC,KAAKb,EAAKF,eAAeW,OACnCK,EAAI,EAAGA,EAAIH,EAAKG,IACvBd,EAAKH,SAASG,EAAKF,cAAcgB,GAAGC,WAM7C,MAAMC,GACLC,QAAQC,IAAIF,EAAIG,YArCjB,+BA0CMC,GACPpB,KAAKH,SAAS,GAAGuB,IAAcpB,KAAKH,SAAS,GAAGuB,KA3C/C,8CA8CqBC,cAChBC,EAA2B,IAAKC,MAAM,CAC1CC,YAAa,CACXC,cAAe,kBACfC,aAAc,kBAEhBC,gBAAeA,IAGjBL,EAAyBM,KAAK,CAC5BC,MAAO,gBACPC,KAAM,wBACNC,KAAM,UACNC,kBAAiBA,EACjBC,kBAAmB,MACnBC,iBAAkB,KAClBC,gBAAeA,IACdC,MAAMC,YACHA,EAAOC,MACTtC,EAAKP,IAAI8C,WAAWlB,GAAahB,WAAWC,YACvB,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,SACvCe,EAAyBM,KACvB,WACAtB,EAAKa,QACL,WAEFnB,EAAKG,gBAILkC,EAAOG,UAAY,IAAKC,cAAcC,QAEtCpB,EAAyBM,KACvB,YACA,sBACA,cAjFL,sCAuFD,IACE5B,KAAKJ,KAAK+C,YAAc,EACzB,MAAM3B,GACLC,QAAQC,IAAIF,QA1Fb,M,oCAAMxB,GAAuB,0C,uBAAvBA,EAAuB,woBDXpC,gBACI,gBACI,aAAI,sBAAW,OACf,mBAE0B,gCAAS,EAAAoD,mBAAiB,cAAiC,8BAAqB,OAE9G,OACA,kBACI,kBACI,aACI,cAAI,gBAAI,OACR,cAAI,gBAAI,OACR,cAAI,gBAAI,OACR,cAAI,mBAAO,OACX,cAAI,kBAAM,OACd,OACJ,OACA,0BAgBJ,OACJ,Q,MAhCgB,0EAeD,2C,mGEZN,eACG,iBAAQ,QAAU,OACrB,Q,kBADW,wB,yBAIX,eACG,iBAAQ,QAAc,OACzB,Q,kBADW,4B,yBAUF,iBAGG,QACH,Q,4BADG,iC,yBAJN,cACG,uBAKH,Q,gCAJM,4J,yBAaH,iBAGG,QACH,Q,4BADG,iC,yBAJN,cACG,uBAKH,Q,gCAJM,4J,yBC9BX,eACG,iBAAQ,QAAU,OACrB,Q,kBADW,wB,yBAIX,eACG,iBAAQ,QAAc,OACzB,Q,kBADW,4B,yBAUA,iBAGG,QACH,Q,4BADG,iC,yBAJR,cACK,uBAKH,Q,gCAJM,+J,yBAcN,iBAGG,QACH,Q,4BADG,iC,yBAJP,cACI,uBAKH,Q,gCAJM,+JC9BrB,ICEaC,ECCAC,ECcAC,EHiBAC,EAlCPtD,EAAiB,CACrB,CACEuD,KAAM,GACNC,UAAY,EACZC,YAAY,CAAC,KACbC,SAAU,CACR,CACEH,KAAM,mBACNC,UAAW,GAEb,CACED,KAAM,kBACNC,WETKJ,EAAN,WAiBH,WAAoBO,EACXC,EACCC,EACAC,EACA/D,EACAG,aALU,KAAAyD,OACX,KAAAC,KACC,KAAAC,SACA,KAAAC,SACA,KAAA/D,MACA,KAAAG,OAlBH,KAAA6D,WAAiBC,OACjB,KAAAC,kBACA,KAAAC,OAAaF,OACb,KAAAG,YAGA,KAAAC,gBAAsBlD,OAEtB,KAAAmD,YAAkB,GAiEzB,KAAAC,kBAAoB,CAClB,cAAiB,CACf,CAAEjC,KAAM,WAAYZ,QAAS,qBAE/B,cAAgB,CAAC,CACfY,KAAM,WAAYZ,QAAS,sBA3D3BnB,KAAKiE,kBAvBN,6CA2BDjE,KAAKC,eAAiBD,KAAKJ,KAAKM,mBAChCF,KAAKkE,uBACkD,IAApDlE,KAAKC,eAAekE,OAAO,qBAC5BnE,KAAKoE,UAAUC,YA9BhB,4CAmCD,IACErE,KAAKoE,UAAYpE,KAAKsD,GAAGgB,MAAM,CAC7BC,cAAe,IAAI,IAAY,GAAG,IAAWC,UAC7CC,cAAe,IAAI,IAAY,GAAG,IAAWD,UAC3CE,OAAQ,IAAI,UAGlB,MAAO1D,GACLC,QAAQC,IAAIF,MA3Cb,sCA+CY,WACb,IACE,IAAI2D,EAAqB3E,KAAKJ,KAAKgF,kBAAkB5E,KAAKoE,WACtDpE,KAAKoE,UAAU9B,OACjBtC,KAAKP,IAAIoF,gBAAgBF,EAAmBrC,OAAOjC,WAAUC,YACxC,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACnCP,EAAK2D,kBACL3D,EAAK6D,YACL7D,EAAKyD,WAAanD,EAAKa,QACvB2D,YAAW,WACT9E,EAAK+E,eACL/E,EAAKuD,OAAOyB,KAAI,kBAAIhF,EAAKwD,OAAO9C,cAAc,4CAC7C,MAEmB,UAAhBJ,EAAKC,QAAqC,MAAhBD,EAAKC,SACrCP,EAAK6D,YACL7D,EAAK2D,kBACL3D,EAAK4D,OAAStD,EAAKa,QACnB2D,YAAW,WACT9E,EAAK+E,iBACL,SAIR,MAAM/D,GACNC,QAAQC,IAAIF,MAxEb,qCAuFDhB,KAAK6D,YACL7D,KAAK2D,kBACL3D,KAAK4D,OAAS,GACd5D,KAAKyD,WAAa,KA1FjB,wCA4Fa,IAAD,OACf,IAEEzD,KAAKP,IAAIW,cAAcC,WAAWC,YACb,YAAhBA,EAAKC,QACHD,EAAKE,WAAWC,OAAS,GAA+B,IAA1BT,EAAKJ,KAAK+C,cACzC3C,EAAKwD,OAAO9C,cAAc,uCAC1BV,EAAKJ,KAAK+C,YAAc,MAI/B,MAAM3B,GACLC,QAAQC,IAAIF,QAxGX,K,sCAAM8B,GAAsB,8D,uBAAtBA,EAAsB,qhCJZnC,gBACG,gBACG,eAAmC,6BAAkB,OACxD,OACA,gBACG,gBACG,oBAGH,OACA,gBACG,oBAGH,OACA,iBAAwD,mCAAY,EAAAmC,mBACjE,iBACG,iBAAC,mBAAsC,aAAG,6BAAiB,mBAA6B,aAAC,OAAO,OAAI,OACpG,iBACG,oBAEA,wBAOH,OACH,OACA,iBACG,iBAAC,mBAAsC,aAAG,6BAAiB,mBAA6B,aAAC,OAAO,OAAI,OACpG,iBACG,oBAEA,wBAOH,OACH,OACA,iBACG,iBACG,iBAAO,aAAG,qBAAS,OAAI,OAAQ,oBAClC,OACH,OACA,iBACG,kBACG,qBAAiI,kBAAM,OACvI,qBAA8E,kBAAM,OACvF,OACH,OACH,OACH,OACH,Q,MAnDuC,gCAKC,sCAIJ,sCAMhB,2DAcA,2DAgByC,iG,+EE5BvD,CACEhC,KAAM,iCACNC,WCdKL,EAAN,WAoBL,WACSS,EACCE,EAAwBD,EAAwB7D,EAChDD,EACAG,wBAHD,KAAA0D,KACC,KAAAE,SAAwB,KAAAD,SAAwB,KAAA7D,QAChD,KAAAD,MACA,KAAAG,OArBV,KAAA6D,WAAiBC,OACjB,KAAAC,kBACA,KAAAC,OAAaF,OACb,KAAAG,YACA,KAAAqB,iBAAuB,GAGvB,KAAAnB,YAAgB,GAIhB,KAAAoB,UAAe,GACf,KAAAF,cAAoBrE,OA4DpB,KAAAoD,kBAAoB,CAClB,cAAiB,CACf,CAAEjC,KAAM,WAAYZ,QAAS,qBAE/B,cAAgB,CAAC,CACfY,KAAM,WAAYZ,QAAS,sBAvD3BnB,KAAKqB,YAAcrB,KAAKN,MAAM0F,SAASC,SAASC,IAAI,eACpDtF,KAAKJ,KAAK2F,aAAavF,KAAKqB,YAAY,cAAchB,WAAWC,YAC5C,YAAhBA,EAAKC,SACFD,EAAKA,MACPN,EAAKwD,OAAO9C,cAAc,2CA7B/B,6CAoCHV,KAAKC,eAAiBD,KAAKJ,KAAKM,mBAChCF,KAAKkE,sBACLlE,KAAKwF,2BACgD,IAAlDxF,KAAKC,eAAekE,OAAO,mBAC5BnE,KAAKyF,WAAWpB,YAxCf,4CA6CH,IACErE,KAAKyF,WAAazF,KAAKsD,GAAGgB,MAAM,CAC9BC,cAAe,IAAI,IAAY,GAAG,IAAWC,UAC7CC,cAAe,IAAI,IAAY,GAAG,IAAWD,UAC7CE,OAAQ,IAAI,UAGhB,MAAO1D,GACLC,QAAQC,IAAIF,EAAIG,YArDf,gDAyDoB,WACvB,IACEnB,KAAKP,IAAIiG,iBAAiB1F,KAAKqB,aAAahB,WAAUC,YAChC,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,SACpCP,EAAK2F,aAAerF,EAAKA,KACzBN,EAAKyF,WAAazF,EAAKsD,GAAGgB,MAAM,CAC9BC,cAAe,IAAI,IAAYvE,EAAK2F,aAAapB,cAAe,IAAWC,UAC3EC,cAAe,IAAI,IAAYzE,EAAK2F,aAAalB,cAAe,IAAWD,UAC3EE,OAAQ,IAAI,IAAY1E,EAAK2F,aAAajB,cAKlD,MAAO1D,GACLC,QAAQC,IAAIF,MAvEX,4CAoFgB,WACnB,IACE,IAAI4E,EAA2B5F,KAAKJ,KAAKgF,kBAAkB5E,KAAKyF,YAC5DzF,KAAKyF,WAAWnD,OAClBtC,KAAKP,IAAIoG,gBAAgBD,EAAyBtD,MAAQtC,KAAKqB,aAAahB,WAAUC,YAChE,YAAhBA,EAAKC,QAAwC,MAAhBD,EAAKC,QACpCP,EAAK2D,kBACL3D,EAAK6D,YACL7D,EAAKyD,WAAanD,EAAKa,QACvB2D,YAAW,WACT9E,EAAK+E,eACL/E,EAAKuD,OAAOyB,KAAI,kBAAMhF,EAAKwD,OAAO9C,cAAc,4CAC/C,MACqB,SAAfJ,EAAKC,SACdP,EAAK6D,YACL7D,EAAK2D,kBACL3D,EAAK4D,OAAStD,EAAKa,QACnB2D,YAAW,WACT9E,EAAK+E,iBACJ,SAIT,MAAO/D,GACPC,QAAQC,IAAIF,EAAIG,YA5Gf,qCAiHHnB,KAAK6D,YACL7D,KAAK2D,kBACL3D,KAAK4D,OAAS,GACd5D,KAAKyD,WAAa,OApHf,K,sCAAMZ,GAAwB,8D,uBAAxBA,EAAwB,ihCFXrC,gBACI,gBACG,eAAmC,4BAAiB,OAEvD,OACA,gBACG,gBACG,oBAGH,OACA,gBACG,oBAGH,OACA,iBAAmE,mCAAY,EAAAiD,yBAC/E,iBACG,mBAAsC,aAAG,6BAAiB,mBAA6B,aAAC,OAAO,OAAI,OACnG,iBACG,oBAEG,wBAON,OACH,OAEA,iBACC,mBAAsC,aAAG,6BAAiB,mBAA6B,aAAC,OAAO,OAAI,OACnG,iBACG,oBAEG,wBAON,OACH,OAEA,iBACC,oBAA6B,aAAG,oBAAQ,OAAI,OAAS,oBACrD,OACC,iBACG,kBACG,qBACuC,kBAAM,OAC7C,qBAAiF,kBAAM,OAC1F,OACH,OACA,OACH,OACJ,Q,MApDwC,gCAKC,sCAIQ,uCAM5B,0DAeF,0DAeE,gG,2ECzBf,CACE7C,KAAK,GACL8C,WAAY,mBACZC,UAAU,WAaX,IAAMhD,EAAN,yB,qBAAMA,I,oDAAAA,IAAuB,SALzB,CACP,IACA,IAAaiD,SAASvG,O,GGdnB,IAAMqD,EAAN,yB,qBAAMA,I,oDAAAA,IAAgB,SARlB,CACP,IACA,EACA,IACA,IACA,Q","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-leave-types',\n  templateUrl: './leave-types.component.html',\n  styleUrls: ['./leave-types.component.scss']\n})\nexport class LeavetypesComponent implements OnInit {\n\n  constructor(){\n\n  }\n  ngOnInit(){\n\n  }\n \n\n}","<router-outlet></router-outlet>","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Leave Types</h2>\n        <button [disabled]=\"permissionInfo.search('Create LeaveType') === -1\"\n         class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/leave-types/add-leave-types\"\n            style=\"float: right;\" (click)=\"addLeaveTypes()\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Leave Type</button\n            >\n    </div>\n    <table class=\"table\" style=\"text-align: center;\">\n        <thead class=\" text-primary\">\n            <tr>\n                <th>S.No</th>\n                <th>Name</th>\n                <th>Code</th>\n                <th>Is Paid</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody *ngFor=\"let list of leaveListData; let i = index\">\n            <tr>\n                <td><b>{{i+1}}.</b></td>\n                <td>{{ list.leaveTypeName}}</td>\n                <td>{{ list.leaveTypeCode}}</td>\n                <td *ngIf=\"list.isPaid\"><i class=\"fa fa-check\" style=\"color: green; font-size: 25px;\"></i></td>\n                <td *ngIf=\"!list.isPaid\"><i class=\"fa fa-times\" style=\"color: red; font-size: 25px;\"></i></td>\n            <td>\n                <a [class.disabled]=\"permissionInfo.search('Edit LeaveType') === -1\"\n                 routerLink=\"/pages/leave-types/update-leave-type/{{list._id}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a\n                    >&nbsp;\n                <button [disabled]=\"permissionInfo.search('Delete LeaveType') === -1\"\n                 class=\"btn btn-danger\" type=\"button\" (click)=\"showConfirmationMessage(list._id)\"> <i class=\"fa fa-trash\"></i></button\n                    >\n            </td>\n            </tr>\n    </table>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { LeaveApiService } from '../service-leave/leave-api.service';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component ({\n    selector: 'app-list-leave-types',\n    templateUrl: './list-leave-types.component.html'\n})\n\nexport class ListLeaveTypesComponent implements OnInit {\n\n  public showCard:any = {};\n  // public leaveListData: any =Object;\n  public leaveListData: any= [];\n  public companyShowData:any = [];\n  permissionInfo: any;\n\n\n    constructor(private api: LeaveApiService,\n      public route:Router,\n      private _Activatedroute:ActivatedRoute,\n      private util: UtilitiesService) {}\n\n    ngOnInit() {\n      this.permissionInfo = this.util.permissionRoleInfo;\n      this.leaveList();\n    }\n\n    leaveList() {\n      try{\n        this.api.getListData().subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.leaveListData = data.leaveTypes;\n            if(data.leaveTypes.length == 0){\n              this.route.navigateByUrl(\"/pages/leave-types/add-leave-types\");\n            }\n            else{\n              const len = Object.keys(this.leaveListData).length;\n              for (var i = 0; i < len; i++) {\n                this.showCard[this.leaveListData[i]._id] = true;\n              }\n            }\n\n          }\n        })\n      }catch(err){\n        console.log(err.message);\n      }\n\n    }\n\n    showData(leaveId: String) {\n      this.showCard[`${leaveId}`] = !this.showCard[`${leaveId}`];\n    }\n\n    showConfirmationMessage(leaveTypeId:String){\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeData(leaveTypeId).subscribe((data)=>{\n            if(data.status === \"success\" || data.status === 200){\n          swalWithBootstrapButtons.fire(\n            'Deleted!',\n            data.message,\n            'success'\n          )\n          this.leaveList();\n            }\n        })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your list data safe',\n            'error'\n          )\n        }\n      })\n    }\n    addLeaveTypes(){\n      try{\n        this.util.leaveStatus = 1;\n      }catch(err){\n        console.log(err)\n      }\n    }\n}","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Leave Type Details</h2>\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{errMsg}}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{successMsg}}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" [formGroup]=\"leaveForm\"   (ngSubmit)=\"leaveFormData()\" novalidate>\n         <div class=\"form-group\">\n             <label class=\"col-sm-6 control-label\"><b>Leave Type Name: <span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Name\"\n                  formControlName=\"leaveTypeName\" required>\n               <div *ngFor=\"let validation of validationMessage.leaveTypeName\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"leaveForm.get('leaveTypeName').hasError(validation.type) && (leaveForm.get('leaveTypeName').dirty || leaveForm.get('leaveTypeName').touched)\"\n                     >\n                     {{validation.message}}\n                  </div>\n               </div>\n            </div>\n         </div>\n         <div class=\"form-group\">\n             <label class=\"col-sm-6 control-label\"><b>Leave Type Code: <span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Code\"\n                  formControlName=\"leaveTypeCode\" required>\n               <div *ngFor=\"let validation of validationMessage.leaveTypeCode\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"leaveForm.get('leaveTypeCode').hasError(validation.type) && (leaveForm.get('leaveTypeCode').dirty || leaveForm.get('leaveTypeCode').touched)\"\n                     >\n                     {{validation.message}}\n                  </div>\n               </div>\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2\">\n               <label><b>Is Paid: </b></label><input type=\"checkbox\" formControlName=\"isPaid\">\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"leaveForm.invalid || permissionInfo.search('Create LeaveType') === -1\">Submit</button>\n               <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../list-leave-types\">Cancel</button>\n            </div>\n         </div>\n      </form>\n   </div>\n</div>","<div class=\"card card-user\">\n    <div class=\"card-header\">\n       <h2 class=\"card-title text-center\">Update Leave Type</h2>\n       <!-- <button type=\"button\" class=\"btn btn-primary btn-circle\" routerLink=\"../../list-leave-types\"  style=\"float: right;\" ><i class=\"fa  fa-arrow-right\"></i></button> -->\n    </div>\n    <div class=\"card-body\">\n       <div class=\"col-sm-offset-2\">\n          <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n             <strong>{{errMsg}}</strong>\n          </p>\n       </div>\n       <div class=\"col-sm-offset-2\">\n          <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n             <strong>{{successMsg}}</strong>\n          </p>\n       </div>\n       <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"leaveForm1\" (ngSubmit)=\"updateLeaveFormData()\">\n       <div class=\"form-group\" >\n          <label class=\"col-sm-6 control-label\"><b>Leave Type Name: <span style=\"color: darkred\">*</span></b></label>\n          <div class=\"col-sm-offset-2\">\n             <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Name\" formControlName=\"leaveTypeName\"\n                >\n                <div *ngFor=\"let validation of validationMessage.leaveTypeName\">\n                     <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"leaveForm1.get('leaveTypeName').hasError(validation.type) && (leaveForm1.get('leaveTypeName').dirty || leaveForm1.get('leaveTypeName').touched)\"\n                        >\n                        {{validation.message}}\n                     </div>\n                  </div>\n          </div>\n       </div>\n\n       <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Leave Type Code: <span style=\"color: darkred\">*</span></b></label>\n        <div class=\"col-sm-offset-2\">\n           <input class=\"form-control\" type=\"text\" id=\"inputName1\" placeholder=\"Enter Code\" formControlName=\"leaveTypeCode\"\n              >\n              <div *ngFor=\"let validation of validationMessage.leaveTypeCode\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"leaveForm1.get('leaveTypeCode').hasError(validation.type) && (leaveForm1.get('leaveTypeCode').dirty || leaveForm1.get('leaveTypeCode').touched)\"\n                     >\n                     {{validation.message}}\n                  </div>\n               </div>\n        </div>\n     </div>\n\n     <div class=\"form-group\">\n      <label class=\"control-label\"><b>Is Paid:</b></label> <input type=\"checkbox\"  formControlName=\"isPaid\">\n      </div>\n       <div class=\"form-group\">\n          <div class=\"col-sm-offset-2 col-sm-10\">\n             <button [disabled]=\"permissionInfo.search('Edit LeaveType') === -1 || leaveForm1.invalid\"\n              type=\"submit\" class=\"btn btn-success\">Update</button>\n             <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../../list-leave-types\">Cancel</button>\n          </div>\n       </div>\n       </form>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LeavetypesComponent } from './leave-types.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListLeaveTypesComponent } from './list-leave-types/list-leave-types.component';\nimport { AddLeaveTypesComponent } from './add-leave-types/add-leave-types.component';\nimport { UpdateLeaveTypeComponent } from './update-leave-type/update-leave-type.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : LeavetypesComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-leave-types',\n        component: ListLeaveTypesComponent,\n      },\n      {\n        path: 'add-leave-types',\n        component: AddLeaveTypesComponent\n      },\n      {\n        path: 'update-leave-type/:leaveTypeId',\n        component: UpdateLeaveTypeComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-leave-types',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class LeavetypesRoutingModule { }","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { LeaveApiService } from '../service-leave/leave-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-leave-type',\n  templateUrl: 'update-leave-type.component.html'\n})\n\nexport class UpdateLeaveTypeComponent implements OnInit {\n\n  leaveForm1: FormGroup;\n  successMsg:any = String;\n  successMessage: boolean = false;\n  errMsg:any = String;\n  errorMsg: boolean = false;\n  companyNameStore:any = [];\n  showCard: any;\n  companyNameId: any;\n  companyName:any=[];\n  companyId: any;\n  leaveTypeId: string;\n  leaveId;\n  leaveData: any=[];\n  leaveFormData:any = Object;\n  existingData:any;\n  permissionInfo: any;\n\n\n  constructor(\n    public fb: FormBuilder,\n    private router: Router, private ngZone: NgZone, private route: ActivatedRoute,\n    private api: LeaveApiService,\n    private util: UtilitiesService) {\n      this.leaveTypeId = this.route.snapshot.paramMap.get(\"leaveTypeId\");\n      this.util.moduleExists(this.leaveTypeId,'LeaveTypes').subscribe((data)=>{\n        if(data.status === 'success'){\n          if(!data.data){\n            this.router.navigateByUrl('/pages/leave-types/list-leave-types');\n          }\n        }\n      })\n    }\n\n  ngOnInit() {\n    this.permissionInfo = this.util.permissionRoleInfo;\n    this.companyDataValidate();\n    this.existingLeaveTypeValues();\n    if(this.permissionInfo.search('Edit LeaveType') === -1){\n      this.leaveForm1.disable();\n    }\n  }\n\n  companyDataValidate() {\n    try {\n      this.leaveForm1 = this.fb.group({\n        leaveTypeName: new FormControl('',Validators.required),\n        leaveTypeCode: new FormControl('',Validators.required),\n        isPaid: new FormControl(false)\n      })\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  existingLeaveTypeValues() {\n    try {\n      this.api.leaveTypeDetails(this.leaveTypeId).subscribe(data => {\n        if (data.status === \"success\" || data.status === 200) {\n          this.existingData = data.data;\n          this.leaveForm1 = this.fb.group({\n            leaveTypeName: new FormControl(this.existingData.leaveTypeName, Validators.required),\n            leaveTypeCode: new FormControl(this.existingData.leaveTypeCode, Validators.required),\n            isPaid: new FormControl(this.existingData.isPaid),\n          })\n        }\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  validationMessage = {\n    'leaveTypeName': [\n      { type: 'required', message: 'Name is required' },\n    ],\n    'leaveTypeCode':[{\n      type: 'required', message: 'Code is required'\n    }]\n  }\n\n  updateLeaveFormData() {\n    try {\n      let cleanUpdateLeaveTypeForm = this.util.cleanFormLevelOne(this.leaveForm1);\n      if (this.leaveForm1.value) {\n        this.api.updateLeaveType(cleanUpdateLeaveTypeForm.value,  this.leaveTypeId).subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n              this.ngZone.run(() => this.router.navigateByUrl('/pages/leave-types/list-leave-types'));\n            }, 2000);\n          } else if (data.status == \"error\") {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n            }, 3000);\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n}","import { Component, OnInit,NgZone } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { LeaveApiService } from '../service-leave/leave-api.service';\nimport { ApiService } from '../../../services/api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n    selector: 'app-add-leave-types',\n    templateUrl: './add-leave-types.component.html'\n})\n\nexport class AddLeaveTypesComponent implements OnInit {\n\n\n    leaveForm: FormGroup;\n    public successMsg:any = String;\n    public successMessage: boolean = false;\n    public errMsg:any = String;\n    public errorMsg: boolean = false;\n    public companyNameStore: any;\n    public showCard: any;\n    public companyListData:any = Object;\n    public companyNameId: any;\n    public companyName: any =[];\n    public companyId: any;\n    permissionInfo: any;\n\n\n    constructor(private _api: ApiService,\n      public fb: FormBuilder,\n      private ngZone: NgZone,\n      private router: Router,\n      private api: LeaveApiService,\n      private util: UtilitiesService){\n        this.isListAvaliable();\n      }\n\n    ngOnInit() {\n      this.permissionInfo = this.util.permissionRoleInfo;\n      this.companyDataValidate();\n      if(this.permissionInfo.search('Create LeaveType') === -1){\n        this.leaveForm.disable();\n      }\n    }\n\n    companyDataValidate() {\n      try {\n        this.leaveForm = this.fb.group({\n          leaveTypeName: new FormControl('',Validators.required),\n          leaveTypeCode: new FormControl('',Validators.required),\n            isPaid: new FormControl(false)\n          })\n        }\n      catch (err) {\n        console.log(err);\n      }\n    }\n\n    leaveFormData() {\n      try{\n        let cleanLeaveTypeForm = this.util.cleanFormLevelOne(this.leaveForm);\n        if (this.leaveForm.value) {\n          this.api.leaveDataSubmit(cleanLeaveTypeForm.value).subscribe(data => {\n            if(data.status === \"success\" || data.status === 200){\n              this.successMessage = true ;\n              this.errorMsg = false ;\n              this.successMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n                this.ngZone.run(()=>this.router.navigateByUrl('/pages/leave-types/list-leave-types'));\n              }, 2000);\n            }\n            else if(data.status === \"error\"|| data.status === 404){\n              this.errorMsg = true;\n              this.successMessage = false;\n              this.errMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n              },3000);\n            }\n          })\n        }\n      } catch(err){\n        console.log(err);\n      }\n\n    }\n\n    validationMessage = {\n      'leaveTypeName': [\n        { type: 'required', message: 'Name is required' },\n      ],\n      'leaveTypeCode':[{\n        type: 'required', message: 'Code is required'\n      }]\n    }\n\n    handleErrors(){\n      this.errorMsg = false;\n      this.successMessage = false;\n      this.errMsg = '';\n      this.successMsg = '';\n  }\n  isListAvaliable(){\n    try{\n\n      this.api.getListData().subscribe((data) =>{\n        if(data.status === 'success'){\n          if(data.leaveTypes.length > 0 && this.util.leaveStatus !== 1){\n            this.router.navigateByUrl(\"/pages/leave-types/list-leave-types\");\n            this.util.leaveStatus = 0;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LeavetypesRoutingModule } from './leave-types-routing.module';\nimport { LeavetypesComponent } from './leave-types.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListLeaveTypesComponent } from './list-leave-types/list-leave-types.component';\nimport { AddLeaveTypesComponent } from './add-leave-types/add-leave-types.component';\nimport { UpdateLeaveTypeComponent } from './update-leave-type/update-leave-type.component';\n\n@NgModule({\n  declarations: [\n     LeavetypesComponent,\n     ListLeaveTypesComponent,\n     AddLeaveTypesComponent,\n     UpdateLeaveTypeComponent\n    ],\n  \n  imports: [\n    CommonModule,\n    LeavetypesRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\nexport class LeavetypesModule { }\n"]}