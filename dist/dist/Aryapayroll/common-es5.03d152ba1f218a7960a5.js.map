{"version":3,"sources":["webpack:///src/app/pages/roles/roles-service/roles.service.ts","webpack:///src/app/pages/job category/jobCategory-service/jobCategory-api.service.ts","webpack:///src/app/pages/document-types/document-services/document.services.ts","webpack:///src/app/pages/skill-category/skillCategory-service/skillCategory-api.service.ts","webpack:///src/app/pages/leave-types/service-leave/leave-api.service.ts","webpack:///src/app/pages/graderule/graderule-service/graderule-api.service.ts"],"names":["RolesService","http","endpoint","apiBaseUrl","headers","set","error","errorMessage","ErrorEvent","message","status","console","log","err","this","get","pipe","errorMgmt","data","userId","localStorage","getItem","post","roleId","permissionId","JobCategoryApiService","companyId","sessionStorage","jobCategoryId","DocumentServices","documentTypeId","skillCategoryApiService","skillCategoryId","LeaveApiService","leaveTypeId","GraderuleApiService","percentOfValue","paymentHead","fixedPercentOfName","fixedPercentOfId","gradeRuleId","paymentHeadsId","percent","paymentHeadId"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpHeaders, HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RolesService {\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n/**Create method for manage errors when request and return response from the server*/\nerrorMgmt(error: HttpErrorResponse) {\n  try {\n    let errorMessage = '';\n    /** Handle client side error */\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    }\n    /** Handle server side error */\n    else {\n      errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n  catch (err) {\n    console.log(err.message);\n  }\n}\n\n  //Method for get rules list for create, edit and delete\n  getRolesListData(): Observable<any>{\n    try {\n      const apiUrl = `${this.endpoint}/user/role-list/`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method to Add Role\n  addRole(data): Observable<any> {\n    try {\n      const userId = localStorage.getItem('token');\n      let apiUrl = `${this.endpoint}/user/add-role/${userId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n\n    }\n  }\n\n  //Method for get all role list\n  listAllRole(): Observable<any>{\n    try {\n      let userId = localStorage.getItem('token');\n      const apiUrl = `${this.endpoint}/user/all-role-list/${userId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method for get individaul role list\n  listIndividualRole(roleId): Observable<any>{\n    try {\n      const apiUrl = `${this.endpoint}/user/individaul-role-list/${roleId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method to Update Role\n  updateRole(data,roleId): Observable<any> {\n    try {\n      const userId = localStorage.getItem('token');\n      let apiUrl = `${this.endpoint}/user/update-role/${userId}/${roleId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n\n    }\n  }\n\n  //Method for get individaul permission list\n  listIndividualPermissions(roleId): Observable<any>{\n    try {\n      const apiUrl = `${this.endpoint}/user/individaul-permissions-list/${roleId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  // Update Role Permissions\n  updateRolePermissions(data,roleId): Observable<any>{\n    try {\n      const userId = localStorage.getItem('token');\n      let apiUrl = `${this.endpoint}/user/update-role-permission/${userId}/${roleId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Delete Permission\n  deletePermission(roleId,permissionId): Observable<any>{\n    try {\n      let apiURL = `${this.endpoint}/user/delete-permission/${permissionId}/${roleId}`;\n      return this.http.delete(apiURL).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport { JOB } from  '../../../auth/job'; \nimport { UpdateJob } from '../../../auth/UpdateJob';\n \n@Injectable({\n  providedIn: 'root'\n})\n\nexport class JobCategoryApiService {\n\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n  /**Create method for manage errors when request and return response from the server*/\n  errorMgmt(error: HttpErrorResponse) {\n    try {\n      let errorMessage = '';\n      /** Handle client side error */\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      }\n      /** Handle server side error */\n      else {\n        errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n      }\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  /**Create Method for Get Job Category list */\n  getJobCategoryData(): Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiURL = `${this.endpoint}/company/list-job-categories/${companyId}`;\n       return this.http.get(apiURL).pipe(\n         catchError(this.errorMgmt)\n      )\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  jobCategoryDetails(jobCategoryId:string): Observable<any> {\n    try {\n      let apiURL = `${this.endpoint}/company/job-category-details/${jobCategoryId}`;\n       return this.http.get(apiURL).pipe(\n         catchError(this.errorMgmt)\n      )\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n/**Create Method for add Job Category  */\n  addJobCategoy(data:JOB): Observable<any> {\n    try{\n      const companyId = sessionStorage.getItem(\"companyId\");\n      console.log(companyId)\n      let apiURL = `${this.endpoint}/company/add-job-category/${companyId}`;\n      return this.http.post(apiURL,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n\n  /** Method for Update Job Category   */\n  updateJobCategory(data:UpdateJob, jobCategoryId:string,):Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiURL = `${this.endpoint}/company/update-job-category/${companyId}/${jobCategoryId}`;\n      return this.http.post(apiURL,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n\n  /**Method for delete (remove) Job Category*/\n  removeData(jobCategoryId:String):Observable<any>{\n    try{\n      let apiURL = `${this.endpoint}/company/delete-job-category/${jobCategoryId}`;\n      return this.http.delete(apiURL).pipe(\n        catchError(this.errorMgmt)\n      )   \n    }\n    catch(err){\n      console.log(err);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport { Document } from '../../../auth/document'; \nimport { DocUpdate } from '../../../auth/docUpdate';\n \n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DocumentServices {\n\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n  /**Create method for manage errors when request and return response from the server*/\n  errorMgmt(error: HttpErrorResponse) {\n    try {\n      let errorMessage = '';\n      /** Handle client side error */\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      }\n      /** Handle server side error */\n      else {\n        errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n      }\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  /**Create Method for Get document List  */\n    documentData(): Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiURL = `${this.endpoint}/company/list-all-document-types/${companyId}`;\n       return this.http.get(apiURL).pipe(\n         catchError(this.errorMgmt)\n      )\n    }\n    catch (err) {\n      console.log(err);\n    }\n    }\n\n// Individual document type details\ndocumentTypeDetails(documentTypeId: string): Observable<any> {\n  try {\n    let apiURL = `${this.endpoint}/company/document-type-details/${documentTypeId}`;\n     return this.http.get(apiURL).pipe(\n       catchError(this.errorMgmt)\n    )\n  }\n  catch (err) {\n    console.log(err);\n  }\n  }\n\n  /** Method for get data from company for document */\n    addDocumentSubmit(data:Document, companyId:String): Observable<any> {\n    try{\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiURL = `${this.endpoint}/company/add-document-types/${companyId}`;\n      return this.http.post(apiURL,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n    catch(err) {\n      console.log(err);\n    }\n    }\n\n  /** Method for Update document type  */\n    updateDocument(data:DocUpdate, companyId: string, documentTypeId:string,):Observable<any> {\n    try {\n      let apiURL = `${this.endpoint}/company/update-document-types/${companyId}/${documentTypeId}`;\n      return this.http.post(apiURL,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n\n  /**Method for delete (remove) document type */\n  removeDocument(documentTypeId:String):Observable<any>{\n    try{\n      let apiURL = `${this.endpoint}/company/delete-document-type/${documentTypeId}`;\n      return this.http.delete(apiURL).pipe(\n        catchError(this.errorMgmt)\n      )   \n    }\n    catch(err){\n      console.log(err);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport { SkillName } from  '../../../auth/skillName'; \nimport { UpdateSkill } from '../../../auth/UpdateSkill';\n \n@Injectable({\n  providedIn: 'root'\n})\n\nexport class skillCategoryApiService {\n\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n  /**Create method for manage errors when request and return response from the server*/\n  errorMgmt(error: HttpErrorResponse) {\n    try {\n      let errorMessage = '';\n      /** Handle client side error */\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      }\n      /** Handle server side error */\n      else {\n        errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n      }\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  /**Create Method for Get skill Category list */\n  skillCategoryData(): Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiURL = `${this.endpoint}/category/list-skill-category/${companyId}`;\n       return this.http.get(apiURL).pipe(\n         catchError(this.errorMgmt)\n      )\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  // List Individual category list\n  skillCategoryDetails(skillCategoryId:string){\n    try{\n      let apiURL = `${this.endpoint}/category/skill-category-details/${skillCategoryId}`;\n       return this.http.get(apiURL).pipe(\n         catchError(this.errorMgmt)\n      ) \n    } catch(err){\n      console.log(err);\n    }\n  }\n\n/**Create Method for add Job Category  */\n  addSkillCategoy(data:SkillName): Observable<any> {\n    try{\n      const companyId = sessionStorage.getItem(\"companyId\");\n      const userId = localStorage.getItem('token');\n      let apiURL = `${this.endpoint}/category/add-skill-category/${companyId}/${userId}`;\n      return this.http.post(apiURL,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n\n  /** Method for Update skill Category   */\n  updateSkillCategory(data:UpdateSkill, skillCategoryId:string):Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      const userId = localStorage.getItem('token');\n      let apiURL = `${this.endpoint}/category/update-skill-category/${skillCategoryId}/${companyId}/${userId}`;\n      return this.http.post(apiURL,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n\n  /**Method for delete (remove) skill Category*/\n  removeData(skillCategoryId:String):Observable<any>{\n    try{\n      let apiURL = `${this.endpoint}/category/delete-skill-category/${skillCategoryId}`;\n      return this.http.delete(apiURL).pipe(\n        catchError(this.errorMgmt)\n      )   \n    }\n    catch(err){\n      console.log(err);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { Leave } from '../../../auth/leave';\nimport { Update } from '../../../auth/updateLeave';\nimport { environment } from '../../../../environments/environment';\nimport { MarkAbsentComponent } from '../../leave-management/manage-leave-status/mark-absent/mark-absent.component';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class LeaveApiService {\n\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n  /**Create method for manage errors when request and return response from the server*/\n  errorMgmt(error: HttpErrorResponse) {\n    try {\n      let errorMessage = '';\n      /** Handle client side error */\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      }\n      /** Handle server side error */\n      else {\n        errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n      }\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  /**Create Method for Get Company List  */\n  getListData(): Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiURL = `${this.endpoint}/company/list-leave-types/${companyId}`;\n       return this.http.get(apiURL).pipe(\n         catchError(this.errorMgmt)\n      )\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  /** Method for get data from company for leave */\n  leaveDataSubmit(data:Leave): Observable<any> {\n    try{\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiURL = `${this.endpoint}/company/add-leave-type/${companyId}`;\n      return this.http.post(apiURL,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n\n  /** Method for Update leave type  */\n  updateLeaveType(data:Update, leaveTypeId:string,):Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiURL = `${this.endpoint}/company/update-leave-type/${companyId}/${leaveTypeId}`;\n      return this.http.post(apiURL,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n\n   /** Getting Individual List Leave Type  */\n   leaveTypeDetails(leaveTypeId:string,):Observable<any> {\n    try {\n      let apiURL = `${this.endpoint}/company/leave-type-details/${leaveTypeId}`;\n       return this.http.get(apiURL).pipe(\n         catchError(this.errorMgmt)\n      )\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  /**Method for delete (remove) Leave type */\n  removeData(leaveTypeId:String):Observable<any>{\n    try{\n      let apiURL = `${this.endpoint}/company/delete-leave-type/${leaveTypeId}`;\n      return this.http.delete(apiURL).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n    catch(err){\n      console.log(err);\n    }\n  }\n\n  // Mark Employee Absent\n  markEmployeeAbsent(data: MarkAbsentComponent,userId): Observable<any>{\n    try{\n      let apiURL = `${this.endpoint}/employee/mark-leave-absent-or-sandwich/${userId}`;\n      return this.http.post(apiURL,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch(err){\n      console.log(err);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport { gradeuRule } from  '../../../auth/gradeRule';\nimport { UpdateGraderuleComponent } from '../update-graderule/update-graderule.component';\nimport {updateGadeRuleData } from '../../../auth/updateGadeRuleData';\nimport { gradeuRulePaymentHead } from '../../../auth/gradeuRulePaymentHead';\nimport { updatePaymentHead } from 'src/app/auth/updatePaymentHead';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class GraderuleApiService {\n\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n/**Create method for manage errors when request and return response from the server*/\nerrorMgmt(error: HttpErrorResponse) {\n  try {\n    let errorMessage = '';\n    /** Handle client side error */\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    }\n    /** Handle server side error */\n    else {\n      errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n  catch (err) {\n    console.log(err.message);\n  }\n}\n\ngetGradeRule(data:gradeuRule, percentOfValue):Observable<any>{\n  try{\n\n    if(percentOfValue === 'basicSalary'){\n      data.paymentHead.fixedPercentOfName = percentOfValue;\n      data.paymentHead.fixedPercentOfId = '';\n    } else {\n      data.paymentHead.fixedPercentOfId = percentOfValue;\n      data.paymentHead.fixedPercentOfName = '';\n    }\n\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/company/add-grade-rule/${companyId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\nupdateGadeRule(data:updateGadeRuleData,gradeRuleId:string):Observable<any>{\n  try{\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/company/update-grade-rule/${companyId}/${gradeRuleId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Update Payment Heads\nupdatePaymentHeads(data,paymentHeadsId:string,gradeRuleId:string,percentOfValue,percent):Observable<any>{\n  try{\n    if(percent){\n      if(percentOfValue === 'basicSalary'){\n        data.fixedPercentOfName = percentOfValue;\n      } else {\n        data.fixedPercentOfId = percentOfValue;\n      }\n    }\n    let apiURL = `${this.endpoint}/company/update-grade-rule-payment-head/${paymentHeadsId}/${gradeRuleId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  } catch(err){\n    console.log(err);\n  }\n}\n\n/**get payment heads data  */\ngetPaymentHeadData():Observable<any>{\n  try{\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/company/list-payment-heads/${companyId}`;\n    return this.http.get(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\ngetGradeRuleList():Observable<any>{\n  try{\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/company/list-all-grade-rule/${companyId}`;\n    return this.http.get(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\nexistingData(gradeRuleId:string):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/company/grade-rule-list/${gradeRuleId}`;\n    return this.http.get(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\nremoveData(gradeRuleId:string):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/company/delete-grade-rule/${gradeRuleId}`;\n    return this.http.delete(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }\n  catch(err){\n    console.log(err);\n  }\n}\n\n// Manage Payment heads start here\n\ncompanyPaymentHeads(paymentHeadId:string):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/company/payment-head-details/${paymentHeadId}`;\n    return this.http.get(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// addgrad rule payment heads\naddGradules(data,gradeRuleId:string,percentOfValue):Observable<any>{\n  try{\n    if(percentOfValue === 'basicSalary'){\n      data.paymentHead.fixedPercentOfName = percentOfValue;\n    } else {\n      data.paymentHead.fixedPercentOfId = percentOfValue;\n    }\n    console.log(data);\n    let companyId = sessionStorage.getItem('companyId');\n    let apiURL = `${this.endpoint}/company/add-grade-rule-payment-head/${gradeRuleId}/${companyId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    );\n  }catch(err){\n    console.log(err);\n  }\n}\n\nremoveGradeData(paymentHeadsId:string,gradeRuleId:string):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/company/delete-grade-rule-payment-head/${paymentHeadsId}/${gradeRuleId}`;\n    return this.http.delete(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }\n  catch(err){\n    console.log(err);\n  }\n}\n\n// Get Fixed Payment Heads\nfixedPaymentHeads(gradeRuleId):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/company/fixed-payment-heads/${gradeRuleId}`;\n    return this.http.get(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Get Filter payment heads\nfilterPaymentHeads(gradeRuleId): Observable<any>{\n  try {\n    let companyId = sessionStorage.getItem('companyId');\n    let apiURL = `${this.endpoint}/company/filter-payment-heads/${companyId}/${gradeRuleId}`;\n    return this.http.get(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n}\n"]}