{"version":3,"sources":["webpack:///src/app/pages/department/department.component.ts","webpack:///src/app/pages/department/department-service/department-api.service.ts","webpack:///src/app/pages/department/department.component.html","webpack:///src/app/pages/department/list-department/list-department.component.html","webpack:///src/app/pages/department/list-department/list-department.component.ts","webpack:///src/app/pages/department/add-department/add-department.component.html","webpack:///src/app/pages/department/update-department/update-department.component.html","webpack:///src/app/pages/department/department-routing.module.ts","webpack:///src/app/pages/department/update-department/update-department.component.ts","webpack:///src/app/pages/department/add-department/add-department.component.ts","webpack:///src/app/pages/department/department.module.ts"],"names":["DepartmentComponent","DepartmentApiService","http","endpoint","environment","apiBaseUrl","headers","set","error","errorMessage","ErrorEvent","message","status","console","log","throwError","err","companyId","sessionStorage","getItem","this","get","pipe","catchError","errorMgmt","departmentId","data","branchId","post","companyParentId","ListDepartmentComponent","api","route","util","departmentData","showCard","departmentList","permissionInfo","permissionRoleInfo","getDepartment","subscribe","length","navigateByUrl","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","type","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","allowOutsideClick","then","result","value","removeData","dismiss","DismissReason","cancel","departmentSatus","addDepartment","UpdateDepartmentComponent","AddDepartmentComponent","DepartmentModule","DepartmentRoutingModule","path","component","canActivate","children","fb","router","ngZone","successMessage","errorMsg","validationMessage","isListAvaliable","departmentDataValidate","departmentName","search","DepartmentForm","disable","group","required","description","cleanDepartmentForm","cleanFormLevelOne","addDepatment","successMsg","setTimeout","handleErrors","run","errMsg","DepartmentList","departmentNameList","branch","id","submitDepatmentData","onClick","snapshot","paramMap","moduleExists","userId","existingData","DepartmentUpdateForm","getDepartmentDetails","cleanUpdateDepartmentForm","valid","updateDepartment","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-department',\n  templateUrl: './department.component.html',\n  styleUrls: ['./department.component.scss']\n})\n\nexport class DepartmentComponent implements OnInit {\n\n  constructor() {}\n  ngOnInit() {\n\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport {Department} from '../../../auth/DepartmentData';\nimport { UpdateDepatment } from '../../../auth/UpdateDepatment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DepartmentApiService {\n\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n/**Create method for manage errors when request and return response from the server*/\nerrorMgmt(error: HttpErrorResponse) {\n  try {\n    let errorMessage = '';\n    /** Handle client side error */\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    }\n    /** Handle server side error */\n    else {\n      errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n  catch (err) {\n    console.log(err.message);\n  }\n}\n\ngetDepartment(): Observable<any> {\n  try {\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/departments/list-all/${companyId}`;\n     return this.http.get(apiURL).pipe(\n       catchError(this.errorMgmt)\n    )\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n\n// Method ForIndividual List\ngetDepartmentDetails(departmentId: String): Observable<any> {\n  try {\n    \n    let apiURL = `${this.endpoint}/branch/department-details/${departmentId}`;\n     return this.http.get(apiURL).pipe(\n       catchError(this.errorMgmt)\n    )\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n\naddDepatment(data:Department,branchId:string): Observable<any> {\n  try{\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/branch/add-department/${branchId}/${companyId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }\n  catch(err) {\n    console.log(err);\n  }\n}\n\n\nupdateDepartment(data:UpdateDepatment,branchId:string,departmentId:string,):Observable<any> {\n  try {\n    let apiURL = `${this.endpoint}/branch/update-department/${branchId}/${departmentId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }\n  catch(err) {\n    console.log(err);\n  }\n}\n\nremoveData(departmentId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/branch/delete-department/${departmentId}`;\n    return this.http.delete(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )   \n  }\n  catch(err){\n    console.log(err);\n  }\n}\n\nDepartmentList():Observable<any>{\n  try{\n    const companyParentId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/company/branch-list/${companyParentId}`;\n    return this.http.get(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n\n}\n","<router-outlet></router-outlet>","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Departments List</h2>\n        <button [disabled]=\"permissionInfo.search('Create Department') === -1\"\n        class=\"btn btn-primary\" type=\"button\" (click)=\"addDepartment()\" routerLink=\"/pages/department/add-department\" style=\"float: right;\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Department</button>\n    </div>\n    <table class=\"table\" style=\"text-align: center;\">\n            <thead class=\" text-primary\">\n              <tr>\n                <th> S.No </th>\n                <th> Title </th>\n                <th>description</th>\n                <th> Action </th>\n              </tr>\n            </thead>\n            <tbody *ngFor=\"let list of departmentData; let i = index\">\n              <tr >\n                <td> <b>{{ i+1 }}.</b></td>\n                <td> {{ list.title }} </td>\n                <td> {{list.description}}</td>\n                <td>\n                    <a [class.disabled]=\"permissionInfo.search('Edit Department') === -1\"\n                    routerLink=\"/pages/department/update-department/{{list._id}}/{{list.userId}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>&nbsp;\n                    <button [disabled]=\"permissionInfo.search('Delete Department') === -1\"\n                    class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i></button>\n                </td>\n              </tr>\n    </table>\n</div>\n\n\n\n","import { Component, OnInit,ViewChild,ElementRef } from '@angular/core';\nimport { DepartmentApiService } from '../department-service/department-api.service';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { state, style } from '@angular/animations';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component ({\n    selector: 'app-list-department',\n    templateUrl: './list-department.component.html',\n    styleUrls: ['./list-department.component.css']\n})\n\nexport class ListDepartmentComponent implements OnInit {\n\n    departmentData:any=[];\n    public isActive: any;\n    public isNot: any;\n    showCard:any = {};\n    userId;\n\n    branchId;\n  permissionInfo: any;\n\n  constructor(private api:DepartmentApiService,\n    public route:Router,\n    private util: UtilitiesService\n    ){}\n\n  ngOnInit(){\n   this.departmentList();\n   this.permissionInfo = this.util.permissionRoleInfo;\n   }\n\n  departmentList(){\n    try{\n      this.api.getDepartment().subscribe(data=>{\n        if (data.status === 'success' || data.status === 200) {\n          this.departmentData = data.data;\n          if(this.departmentData.length == 0){\n            this.route.navigateByUrl(\"/pages/department/add-department\");\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n  showConfirmationMessage(departmentId:String){\n    const swalWithBootstrapButtons = Swal.mixin({\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger'\n      },\n      buttonsStyling: false\n    })\n\n    swalWithBootstrapButtons.fire({\n      title: 'Are you sure?',\n      text: \"You want to delete it\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'No',\n      reverseButtons: true,\n      allowOutsideClick: false,\n    }).then((result) => {\n      if (result.value) {\n        this.api.removeData(departmentId).subscribe((data)=>{\n          if(data.status === \"success\" || data.status === 200){\n        swalWithBootstrapButtons.fire(\n          'Deleted!',\n          'Your row has been deleted.',\n          'success'\n        )\n          } else if(data.status === 'error'){\n            swalWithBootstrapButtons.fire(\n              'ERROR!',\n              data.message,\n              'error'\n            )\n          }\n          this.departmentList();\n      })\n      } else if (\n        result.dismiss === Swal.DismissReason.cancel\n      ) {\n        swalWithBootstrapButtons.fire(\n          'Cancelled',\n          'Your list data safe',\n          'error'\n        )\n      }\n    })\n  }\n\n  addDepartment(){\n    try{\n      this.util.departmentSatus = 1;\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n}","<div class=\"card card-user\">\n      <div class=\"card-header\">\n         <h2 class=\"card-title text-center\">Department Details</h2>\n      </div>\n      <div class=\"card-body\">\n\n         <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n               <strong>{{ errMsg }}</strong>\n               </p>\n          </div>\n\n         <div class=\"col-sm-offset-2\">\n                  <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                    <strong>{{ successMsg }}</strong>\n                  </p>\n            </div>\n\n\n         <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"DepartmentForm\" (ngSubmit)=\"submitDepatmentData()\" novalidate>\n            <div class=\"row\">\n               <div class=\"col-md\">\n                  <div class=\"form-group\">\n                     <label class=\"col-sm-6 control-label\"><b>Branch-Name :&nbsp;<span\n                           style=\"color: darkred\">*</span></b></label>\n                     <select class=\"dropdown dropdown-toggle form-control\" Name=\"branchId\" (change)=\"onClick($event.target.value)\" formControlName=\"branchId\">\n                        <option class='dropdown-item' ng-selected=\"true\" value=\"\" disabled selected>----------Select Branch----------</option>\n                        <option class=\"dropdown-item\" *ngFor=\"let department of departmentNameList\" value=\"{{department._id}}\">\n                           {{department.name}}\n                        </option>\n                     </select>\n                     <div *ngFor=\"let validation of validationMessage.branchId\">\n                           <div style=\"color: red;margin-left: 14px;\"\n                             *ngIf=\"DepartmentForm.get('branchId').hasError(validation.type) && (DepartmentForm.get('branchId').dirty || DepartmentForm.get('branchId').touched)\"\n                             >\n                             {{ validation.message }}\n                           </div>\n                         </div>\n                  </div>\n               </div>\n               <div class=\"col-md\">\n               <div class=\"form-group\">\n                   <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                  <div class=\"col-sm-offset-2\">\n                     <input class=\"form-control\" type=\"text\" id=\"title\" placeholder=\"Enter Title\"\n                        formControlName=\"title\">\n                        <div *ngFor=\"let validation of validationMessage.title\">\n                              <div style=\"color: red;margin-left: 14px;\"\n                                *ngIf=\"DepartmentForm.get('title').hasError(validation.type) && (DepartmentForm.get('title').dirty || DepartmentForm.get('title').touched)\"\n                                >\n                                {{ validation.message }}\n                              </div>\n                            </div>\n                  </div>\n               </div>\n            </div>\n            <div class=\"col-md\">\n               <div class=\"form-group\">\n                  <label class=\"col-sm-6 control-label\"><b>Enter Description :</b></label>\n                  <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"description\" placeholder=\"Enter Description\"\n                           formControlName=\"description\">\n                  </div>\n               </div>\n            </div>\n            </div>\n            <div class=\"form-group\">\n               <div class=\"col-sm-offset-2 col-sm-10\">\n                  <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"DepartmentForm.invalid\">Submit</button>\n                  <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../list-department\">Cancel</button>\n               </div>\n            </div>\n         </form>\n      </div>\n</div>","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Update Department</h2>\n   </div>\n   <div class=\"card-body\">\n         <div class=\"col-sm-offset-2\">\n               <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                 <strong>{{errMsg}}</strong>\n               </p>\n             </div>\n             <div class=\"col-sm-offset-2\">\n               <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                 <strong>{{successMsg}}</strong>\n               </p>\n             </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"DepartmentUpdateForm\" (ngSubmit)=\"updateDepartment()\" novalidate>\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span> </b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"title\" placeholder=\"Enter Title\"formControlName=\"title\" >\n               <div *ngFor=\"let validation of validationMessage.title\">\n                     <div style=\"color: red;margin-left: 14px;\"\n                       *ngIf=\"DepartmentUpdateForm.get('title').hasError(validation.type) && (DepartmentUpdateForm.get('title').dirty || DepartmentUpdateForm.get('title').touched)\"\n                       >\n                       {{ validation.message }}\n                     </div>\n                   </div>\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Description: </b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"description\" placeholder=\"Enter Description\"formControlName=\"description\" >\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"DepartmentUpdateForm.invalid || permissionInfo.search('Edit Department')=== -1\">Update</button>\n               <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../../../list-department\" >Cancel</button>\n            </div>\n         </div>\n      </form>\n   </div>\n</div>\n\n<!-- /pages/department/list-department -->","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DepartmentComponent } from './department.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListDepartmentComponent } from './list-department/list-department.component';\nimport { AddDepartmentComponent } from './add-department/add-department.component';\nimport { UpdateDepartmentComponent } from './update-department/update-department.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : DepartmentComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-department',\n        component: ListDepartmentComponent,\n      },\n      {\n        path: 'add-department',\n        component: AddDepartmentComponent\n      },\n      {\n        path: 'update-department/:id/:userId',\n        component: UpdateDepartmentComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-department',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class DepartmentRoutingModule { }","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DepartmentApiService } from '../department-service/department-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-department',\n  templateUrl: 'update-department.component.html'\n})\n\nexport class UpdateDepartmentComponent implements OnInit {\n\n  DepartmentUpdateForm: FormGroup;\n  userId;\n  departmentData: any;\n  branchId;\n  successMsg: String;\n  successMessage: boolean = false; \n  errMsg: String;\n  errorMsg: boolean = false;\n  permissionInfo: any;\n\n\n  constructor( public fb: FormBuilder,private api:DepartmentApiService,\n    private router: Router, private ngZone: NgZone, private route: ActivatedRoute,\n    private util: UtilitiesService){\n      let departmentId = this.route.snapshot.paramMap.get(\"id\");\n      this.util.moduleExists(departmentId,'Department').subscribe((data) => {\n        if(data.status === 'success'){\n          if(!data.data){\n            this.router.navigateByUrl('/pages/department/list-department');\n          }\n        }\n      })\n    }\n\nngOnInit() {\n  // Deparment ID\n  this.permissionInfo = this.util.permissionRoleInfo;\n  this.userId = this.route.snapshot.paramMap.get(\"id\");\n  // Branch ID\n  this.branchId = this.route.snapshot.paramMap.get(\"userId\");\n  this.departmentDataValidate();\n  this.existingData();\n  if(this.permissionInfo.search('Edit Department') === -1){\n    this.DepartmentUpdateForm.disable();\n  }\n}\n\nexistingData(){\n  this.api.getDepartmentDetails(this.userId).subscribe(data=>{\n      if (data.status == 'success'){\n        this.departmentData = data.data;\n            this.DepartmentUpdateForm = this.fb.group({\n              title: new FormControl(this.departmentData.title,Validators.required),\n              description: new FormControl(this.departmentData.description)\n            })\n      }\n    });\n}\n\ndepartmentDataValidate() {\n  try {\n    this.DepartmentUpdateForm = this.fb.group({\n        title: new FormControl('', Validators.required),\n        description: new FormControl('')\n      })\n    }\n  catch (err) {\n    console.log(err);\n  }\n}\n\n//Method for show validdation message\nvalidationMessage = {\n  'title': [\n    { type: 'required', message: 'Title is required' },\n  ]\n}\n\nupdateDepartment(){\n  try{\n    let cleanUpdateDepartmentForm = this.util.cleanFormLevelOne(this.DepartmentUpdateForm);\n    if(this.DepartmentUpdateForm.valid) {\n      this.api.updateDepartment(cleanUpdateDepartmentForm.value,this.branchId,this.userId).subscribe(data=> {\n        if (data.status === \"success\" || data.status === 200) {\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() => {\n            this.handleErrors();\n            this.router.navigateByUrl(\"/pages/department/list-department\");\n          }, 2000);\n        }\n        else if (data.status === \"error\" || data.status === 404) {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(() => {\n            this.handleErrors();\n          }, 3000);\n        }\n      })\n    }\n  }catch(err){\n    console.log(err);\n  }\n}\n\nhandleErrors(){\n  this.errorMsg = false;\n  this.successMessage = false;\n  this.errMsg = '';\n  this.successMsg = '';\n}\n\n}","import { Component, OnInit,NgZone } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DepartmentApiService } from '../department-service/department-api.service';\nimport * as jsPDF from 'jspdf'\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n\n@Component({\n    selector: 'app-add-department',\n    templateUrl: './add-department.component.html'\n})\n\nexport class AddDepartmentComponent implements OnInit {\n\n  branchId;\n  DepartmentForm: FormGroup;\n  departmentNameList: any[];\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  permissionInfo: any;\n\n  constructor( public fb: FormBuilder,private api:DepartmentApiService,\n      private router: Router, private ngZone: NgZone, private route: ActivatedRoute,\n      private util: UtilitiesService){\n        this.isListAvaliable();\n      }\n\n  ngOnInit() {\n    this.permissionInfo = this.util.permissionRoleInfo;\n    this.departmentDataValidate();\n    this.departmentName();\n    if(this.permissionInfo.search('Create Department') === -1){\n      this.DepartmentForm.disable();\n    }\n\n  }\n\n  departmentDataValidate() {\n    try {\n      this.DepartmentForm = this.fb.group({\n          title: new FormControl('',Validators.required),\n          description: new FormControl(''),\n          branchId:new FormControl('',Validators.required)\n        })\n      }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for show validdation message\n  validationMessage = {\n    'title': [\n      { type: 'required', message: 'Title is required' },\n    ],\n    'branchId':[\n      { type: 'required', message: 'Branch Name is required' },\n    ]\n  }\n\n\n  submitDepatmentData(){\n    try{\n      let cleanDepartmentForm = this.util.cleanFormLevelOne(this.DepartmentForm);\n      this.api.addDepatment(cleanDepartmentForm.value,this.branchId).subscribe(data =>{\n        if(data.status === \"success\"|| data.status === 200){\n          this.successMessage = true ;\n          this.errorMsg = false ;\n          this.successMsg = data.message;\n          setTimeout(()=>{\n          this.handleErrors();\n          this.ngZone.run(()=>this.router.navigateByUrl('/pages/department/list-department'));\n        }, 1500);\n        }else if(data.status == \"error\"){\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrors();\n          }, 3000);\n        }\n      })\n    }catch(err){\n      console.log(err);\n\n    }\n\n  }\n\n  departmentName(){\n    this.api.DepartmentList().subscribe(data => {\n      this.departmentNameList = data.branch;\n    })\n  }\n\n  onClick(id){\n    this.branchId = id;\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n\nisListAvaliable(){\n  try{\n\n    this.api.getDepartment().subscribe((data) =>{\n      if(data.status === 'success'){\n        if(data.data.length > 0 && this.util.departmentSatus !== 1){\n          this.router.navigateByUrl(\"/pages/department/list-department\");\n          this.util.departmentSatus = 0;\n        }\n      }\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DepartmentRoutingModule } from './department-routing.module';\nimport { DepartmentComponent } from './department.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListDepartmentComponent } from './list-department/list-department.component';\nimport { AddDepartmentComponent } from './add-department/add-department.component';\nimport { UpdateDepartmentComponent } from './update-department/update-department.component';\n\n\n\n@NgModule({\n  declarations: [\n    DepartmentComponent,\n    ListDepartmentComponent,\n    AddDepartmentComponent,\n    UpdateDepartmentComponent\n  ],\n  \n  imports: [\n    CommonModule,\n    DepartmentRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\nexport class DepartmentModule { }\n"]}