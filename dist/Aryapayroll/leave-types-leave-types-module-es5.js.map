{"version":3,"sources":["webpack:///src/app/pages/leave-types/leave-types.component.ts","webpack:///src/app/pages/leave-types/leave-types.component.html","webpack:///src/app/pages/leave-types/leave-types-routing.module.ts","webpack:///src/app/pages/leave-types/add-leave-types/add-leave-types.component.ts","webpack:///src/app/pages/leave-types/add-leave-types/add-leave-types.component.html","webpack:///src/app/pages/leave-types/list-leave-types/list-leave-types.component.ts","webpack:///src/app/pages/leave-types/list-leave-types/list-leave-types.component.html","webpack:///src/app/pages/leave-types/update-leave-type/update-leave-type.component.ts","webpack:///src/app/pages/leave-types/update-leave-type/update-leave-type.component.html","webpack:///src/app/pages/leave-types/leave-types.module.ts"],"names":["LeavetypesComponent","selector","templateUrl","styleUrls","route","path","component","canActivate","children","redirectTo","pathMatch","LeavetypesRoutingModule","forChild","declarations","imports","AddLeaveTypesComponent","_api","fb","ngZone","router","api","util","successMsg","String","successMessage","errMsg","errorMsg","companyListData","Object","companyName","validationMessage","type","message","isListAvaliable","permissionInfo","permissionRoleInfo","companyDataValidate","search","leaveForm","disable","group","leaveTypeName","required","leaveTypeCode","isPaid","err","console","log","cleanLeaveTypeForm","cleanFormLevelOne","value","leaveDataSubmit","subscribe","data","status","setTimeout","handleErrors","run","navigateByUrl","getListData","leaveTypes","length","leaveStatus","leaveFormData","ListLeaveTypesComponent","_Activatedroute","showCard","leaveListData","companyShowData","leaveList","len","keys","i","_id","leaveId","leaveTypeId","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","removeData","dismiss","DismissReason","cancel","addLeaveTypes","UpdateLeaveTypeComponent","companyNameStore","leaveData","snapshot","paramMap","get","moduleExists","existingLeaveTypeValues","leaveForm1","leaveTypeDetails","existingData","cleanUpdateLeaveTypeForm","updateLeaveType","updateLeaveFormData","LeavetypesModule"],"mappings":"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","file":"leave-types-leave-types-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-leave-types',\n  templateUrl: './leave-types.component.html',\n  styleUrls: ['./leave-types.component.scss']\n})\nexport class LeavetypesComponent implements OnInit {\n\n  constructor(){\n\n  }\n  ngOnInit(){\n\n  }\n \n\n}","<router-outlet></router-outlet>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LeavetypesComponent } from './leave-types.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListLeaveTypesComponent } from './list-leave-types/list-leave-types.component';\nimport { AddLeaveTypesComponent } from './add-leave-types/add-leave-types.component';\nimport { UpdateLeaveTypeComponent } from './update-leave-type/update-leave-type.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : LeavetypesComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-leave-types',\n        component: ListLeaveTypesComponent,\n      },\n      {\n        path: 'add-leave-types',\n        component: AddLeaveTypesComponent\n      },\n      {\n        path: 'update-leave-type/:leaveTypeId',\n        component: UpdateLeaveTypeComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-leave-types',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class LeavetypesRoutingModule { }","import { Component, OnInit,NgZone } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { LeaveApiService } from '../service-leave/leave-api.service';\nimport { ApiService } from '../../../services/api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n    selector: 'app-add-leave-types',\n    templateUrl: './add-leave-types.component.html'\n})\n\nexport class AddLeaveTypesComponent implements OnInit {\n\n\n    leaveForm: FormGroup;\n    public successMsg:any = String;\n    public successMessage: boolean = false;\n    public errMsg:any = String;\n    public errorMsg: boolean = false;\n    public companyNameStore: any;\n    public showCard: any;\n    public companyListData:any = Object;\n    public companyNameId: any;\n    public companyName: any =[];\n    public companyId: any;\n    permissionInfo: any;\n\n\n    constructor(private _api: ApiService,\n      public fb: FormBuilder,\n      private ngZone: NgZone,\n      private router: Router,\n      private api: LeaveApiService,\n      private util: UtilitiesService){\n        this.isListAvaliable();\n      }\n\n    ngOnInit() {\n      this.permissionInfo = this.util.permissionRoleInfo;\n      this.companyDataValidate();\n      if(this.permissionInfo.search('Create LeaveType') === -1){\n        this.leaveForm.disable();\n      }\n    }\n\n    companyDataValidate() {\n      try {\n        this.leaveForm = this.fb.group({\n          leaveTypeName: new FormControl('',Validators.required),\n          leaveTypeCode: new FormControl('',Validators.required),\n            isPaid: new FormControl(false)\n          })\n        }\n      catch (err) {\n        console.log(err);\n      }\n    }\n\n    leaveFormData() {\n      try{\n        let cleanLeaveTypeForm = this.util.cleanFormLevelOne(this.leaveForm);\n        if (this.leaveForm.value) {\n          this.api.leaveDataSubmit(cleanLeaveTypeForm.value).subscribe(data => {\n            if(data.status === \"success\" || data.status === 200){\n              this.successMessage = true ;\n              this.errorMsg = false ;\n              this.successMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n                this.ngZone.run(()=>this.router.navigateByUrl('/pages/leave-types/list-leave-types'));\n              }, 2000);\n            }\n            else if(data.status === \"error\"|| data.status === 404){\n              this.errorMsg = true;\n              this.successMessage = false;\n              this.errMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n              },3000);\n            }\n          })\n        }\n      } catch(err){\n        console.log(err);\n      }\n\n    }\n\n    validationMessage = {\n      'leaveTypeName': [\n        { type: 'required', message: 'Name is required' },\n      ],\n      'leaveTypeCode':[{\n        type: 'required', message: 'Code is required'\n      }]\n    }\n\n    handleErrors(){\n      this.errorMsg = false;\n      this.successMessage = false;\n      this.errMsg = '';\n      this.successMsg = '';\n  }\n  isListAvaliable(){\n    try{\n\n      this.api.getListData().subscribe((data) =>{\n        if(data.status === 'success'){\n          if(data.leaveTypes.length > 0 && this.util.leaveStatus !== 1){\n            this.router.navigateByUrl(\"/pages/leave-types/list-leave-types\");\n            this.util.leaveStatus = 0;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n}","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Leave Type Details</h2>\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{errMsg}}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{successMsg}}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" [formGroup]=\"leaveForm\"   (ngSubmit)=\"leaveFormData()\" novalidate>\n         <div class=\"form-group\">\n             <label class=\"col-sm-6 control-label\"><b>Leave Type Name: <span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Name\"\n                  formControlName=\"leaveTypeName\" required>\n               <div *ngFor=\"let validation of validationMessage.leaveTypeName\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"leaveForm.get('leaveTypeName').hasError(validation.type) && (leaveForm.get('leaveTypeName').dirty || leaveForm.get('leaveTypeName').touched)\"\n                     >\n                     {{validation.message}}\n                  </div>\n               </div>\n            </div>\n         </div>\n         <div class=\"form-group\">\n             <label class=\"col-sm-6 control-label\"><b>Leave Type Code: <span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Code\"\n                  formControlName=\"leaveTypeCode\" required>\n               <div *ngFor=\"let validation of validationMessage.leaveTypeCode\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"leaveForm.get('leaveTypeCode').hasError(validation.type) && (leaveForm.get('leaveTypeCode').dirty || leaveForm.get('leaveTypeCode').touched)\"\n                     >\n                     {{validation.message}}\n                  </div>\n               </div>\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2\">\n               <label><b>Is Paid: </b></label><input type=\"checkbox\" formControlName=\"isPaid\">\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"leaveForm.invalid || permissionInfo.search('Create LeaveType') === -1\">Submit</button>\n               <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../list-leave-types\">Cancel</button>\n            </div>\n         </div>\n      </form>\n   </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { LeaveApiService } from '../service-leave/leave-api.service';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component ({\n    selector: 'app-list-leave-types',\n    templateUrl: './list-leave-types.component.html'\n})\n\nexport class ListLeaveTypesComponent implements OnInit {\n\n  public showCard:any = {};\n  // public leaveListData: any =Object;\n  public leaveListData: any= [];\n  public companyShowData:any = [];\n  permissionInfo: any;\n\n\n    constructor(private api: LeaveApiService,\n      public route:Router,\n      private _Activatedroute:ActivatedRoute,\n      private util: UtilitiesService) {}\n\n    ngOnInit() {\n      this.permissionInfo = this.util.permissionRoleInfo;\n      this.leaveList();\n    }\n\n    leaveList() {\n      try{\n        this.api.getListData().subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.leaveListData = data.leaveTypes;\n            if(data.leaveTypes.length == 0){\n              this.route.navigateByUrl(\"/pages/leave-types/add-leave-types\");\n            }\n            else{\n              const len = Object.keys(this.leaveListData).length;\n              for (var i = 0; i < len; i++) {\n                this.showCard[this.leaveListData[i]._id] = true;\n              }\n            }\n\n          }\n        })\n      }catch(err){\n        console.log(err.message);\n      }\n\n    }\n\n    showData(leaveId: String) {\n      this.showCard[`${leaveId}`] = !this.showCard[`${leaveId}`];\n    }\n\n    showConfirmationMessage(leaveTypeId:String){\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeData(leaveTypeId).subscribe((data)=>{\n            if(data.status === \"success\" || data.status === 200){\n          swalWithBootstrapButtons.fire(\n            'Deleted!',\n            data.message,\n            'success'\n          )\n          this.leaveList();\n            }\n        })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your list data safe',\n            'error'\n          )\n        }\n      })\n    }\n    addLeaveTypes(){\n      try{\n        this.util.leaveStatus = 1;\n      }catch(err){\n        console.log(err)\n      }\n    }\n}","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Leave Types</h2>\n        <button [disabled]=\"permissionInfo.search('Create LeaveType') === -1\"\n         class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/leave-types/add-leave-types\"\n            style=\"float: right;\" (click)=\"addLeaveTypes()\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Leave Type</button\n            >\n    </div>\n    <table class=\"table\" style=\"text-align: center;\">\n        <thead class=\" text-primary\">\n            <tr>\n                <th>S.No</th>\n                <th>Name</th>\n                <th>Code</th>\n                <th>Is Paid</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody *ngFor=\"let list of leaveListData; let i = index\">\n            <tr>\n                <td><b>{{i+1}}.</b></td>\n                <td>{{ list.leaveTypeName}}</td>\n                <td>{{ list.leaveTypeCode}}</td>\n                <td *ngIf=\"list.isPaid\"><i class=\"fa fa-check\" style=\"color: green; font-size: 25px;\"></i></td>\n                <td *ngIf=\"!list.isPaid\"><i class=\"fa fa-times\" style=\"color: red; font-size: 25px;\"></i></td>\n            <td>\n                <a [class.disabled]=\"permissionInfo.search('Edit LeaveType') === -1\"\n                 routerLink=\"/pages/leave-types/update-leave-type/{{list._id}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a\n                    >&nbsp;\n                <button [disabled]=\"permissionInfo.search('Delete LeaveType') === -1\"\n                 class=\"btn btn-danger\" type=\"button\" (click)=\"showConfirmationMessage(list._id)\"> <i class=\"fa fa-trash\"></i></button\n                    >\n            </td>\n            </tr>\n    </table>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { LeaveApiService } from '../service-leave/leave-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-leave-type',\n  templateUrl: 'update-leave-type.component.html'\n})\n\nexport class UpdateLeaveTypeComponent implements OnInit {\n\n  leaveForm1: FormGroup;\n  successMsg:any = String;\n  successMessage: boolean = false;\n  errMsg:any = String;\n  errorMsg: boolean = false;\n  companyNameStore:any = [];\n  showCard: any;\n  companyNameId: any;\n  companyName:any=[];\n  companyId: any;\n  leaveTypeId: string;\n  leaveId;\n  leaveData: any=[];\n  leaveFormData:any = Object;\n  existingData:any;\n  permissionInfo: any;\n\n\n  constructor(\n    public fb: FormBuilder,\n    private router: Router, private ngZone: NgZone, private route: ActivatedRoute,\n    private api: LeaveApiService,\n    private util: UtilitiesService) {\n      this.leaveTypeId = this.route.snapshot.paramMap.get(\"leaveTypeId\");\n      this.util.moduleExists(this.leaveTypeId,'LeaveTypes').subscribe((data)=>{\n        if(data.status === 'success'){\n          if(!data.data){\n            this.router.navigateByUrl('/pages/leave-types/list-leave-types');\n          }\n        }\n      })\n    }\n\n  ngOnInit() {\n    this.permissionInfo = this.util.permissionRoleInfo;\n    this.companyDataValidate();\n    this.existingLeaveTypeValues();\n    if(this.permissionInfo.search('Edit LeaveType') === -1){\n      this.leaveForm1.disable();\n    }\n  }\n\n  companyDataValidate() {\n    try {\n      this.leaveForm1 = this.fb.group({\n        leaveTypeName: new FormControl('',Validators.required),\n        leaveTypeCode: new FormControl('',Validators.required),\n        isPaid: new FormControl(false)\n      })\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  existingLeaveTypeValues() {\n    try {\n      this.api.leaveTypeDetails(this.leaveTypeId).subscribe(data => {\n        if (data.status === \"success\" || data.status === 200) {\n          this.existingData = data.data;\n          this.leaveForm1 = this.fb.group({\n            leaveTypeName: new FormControl(this.existingData.leaveTypeName, Validators.required),\n            leaveTypeCode: new FormControl(this.existingData.leaveTypeCode, Validators.required),\n            isPaid: new FormControl(this.existingData.isPaid),\n          })\n        }\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  validationMessage = {\n    'leaveTypeName': [\n      { type: 'required', message: 'Name is required' },\n    ],\n    'leaveTypeCode':[{\n      type: 'required', message: 'Code is required'\n    }]\n  }\n\n  updateLeaveFormData() {\n    try {\n      let cleanUpdateLeaveTypeForm = this.util.cleanFormLevelOne(this.leaveForm1);\n      if (this.leaveForm1.value) {\n        this.api.updateLeaveType(cleanUpdateLeaveTypeForm.value,  this.leaveTypeId).subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n              this.ngZone.run(() => this.router.navigateByUrl('/pages/leave-types/list-leave-types'));\n            }, 2000);\n          } else if (data.status == \"error\") {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n            }, 3000);\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n}","<div class=\"card card-user\">\n    <div class=\"card-header\">\n       <h2 class=\"card-title text-center\">Update Leave Type</h2>\n       <!-- <button type=\"button\" class=\"btn btn-primary btn-circle\" routerLink=\"../../list-leave-types\"  style=\"float: right;\" ><i class=\"fa  fa-arrow-right\"></i></button> -->\n    </div>\n    <div class=\"card-body\">\n       <div class=\"col-sm-offset-2\">\n          <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n             <strong>{{errMsg}}</strong>\n          </p>\n       </div>\n       <div class=\"col-sm-offset-2\">\n          <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n             <strong>{{successMsg}}</strong>\n          </p>\n       </div>\n       <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"leaveForm1\" (ngSubmit)=\"updateLeaveFormData()\">\n       <div class=\"form-group\" >\n          <label class=\"col-sm-6 control-label\"><b>Leave Type Name: <span style=\"color: darkred\">*</span></b></label>\n          <div class=\"col-sm-offset-2\">\n             <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Name\" formControlName=\"leaveTypeName\"\n                >\n                <div *ngFor=\"let validation of validationMessage.leaveTypeName\">\n                     <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"leaveForm1.get('leaveTypeName').hasError(validation.type) && (leaveForm1.get('leaveTypeName').dirty || leaveForm1.get('leaveTypeName').touched)\"\n                        >\n                        {{validation.message}}\n                     </div>\n                  </div>\n          </div>\n       </div>\n\n       <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Leave Type Code: <span style=\"color: darkred\">*</span></b></label>\n        <div class=\"col-sm-offset-2\">\n           <input class=\"form-control\" type=\"text\" id=\"inputName1\" placeholder=\"Enter Code\" formControlName=\"leaveTypeCode\"\n              >\n              <div *ngFor=\"let validation of validationMessage.leaveTypeCode\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"leaveForm1.get('leaveTypeCode').hasError(validation.type) && (leaveForm1.get('leaveTypeCode').dirty || leaveForm1.get('leaveTypeCode').touched)\"\n                     >\n                     {{validation.message}}\n                  </div>\n               </div>\n        </div>\n     </div>\n\n     <div class=\"form-group\">\n      <label class=\"control-label\"><b>Is Paid:</b></label> <input type=\"checkbox\"  formControlName=\"isPaid\">\n      </div>\n       <div class=\"form-group\">\n          <div class=\"col-sm-offset-2 col-sm-10\">\n             <button [disabled]=\"permissionInfo.search('Edit LeaveType') === -1 || leaveForm1.invalid\"\n              type=\"submit\" class=\"btn btn-success\">Update</button>\n             <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../../list-leave-types\">Cancel</button>\n          </div>\n       </div>\n       </form>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LeavetypesRoutingModule } from './leave-types-routing.module';\nimport { LeavetypesComponent } from './leave-types.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListLeaveTypesComponent } from './list-leave-types/list-leave-types.component';\nimport { AddLeaveTypesComponent } from './add-leave-types/add-leave-types.component';\nimport { UpdateLeaveTypeComponent } from './update-leave-type/update-leave-type.component';\n\n@NgModule({\n  declarations: [\n     LeavetypesComponent,\n     ListLeaveTypesComponent,\n     AddLeaveTypesComponent,\n     UpdateLeaveTypeComponent\n    ],\n  \n  imports: [\n    CommonModule,\n    LeavetypesRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\nexport class LeavetypesModule { }\n"]}