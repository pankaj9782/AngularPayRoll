{"version":3,"sources":["webpack:///src/app/users/reset-password/reset-password.component.ts","webpack:///src/app/users/reset-password/reset-password.component.html","webpack:///src/app/users/login/login.component.ts","webpack:///src/app/users/login/login.component.html","webpack:///src/app/users/users-routing.module.ts","webpack:///src/app/users/register/register.component.ts","webpack:///src/app/users/register/register.component.html","webpack:///src/app/users/forgot-password/forgot-password.component.ts","webpack:///src/app/users/forgot-password/forgot-password.component.html","webpack:///src/app/users/users.component.ts","webpack:///src/app/users/users.component.html","webpack:///src/app/users/generate-password/generate-password.component.ts","webpack:///src/app/users/generate-password/generate-password.component.html","webpack:///src/app/users/users.module.ts"],"names":["ResetPasswordComponent","route","apiService","fb","ngZone","router","passwordFlag","successFlag","validationErrorMessage","type","message","submitResetPassword","snapshotParam","snapshot","paramMap","get","resetPasswordForm","group","password","compose","minLength","maxLength","required","pattern","passwordConfirmation","compare","fieldName","err","console","log","valid","submitResetPasswordData","value","subscribe","data","status","successMsg","setTimeout","run","navigateByUrl","errMessage","resetPassword","selector","templateUrl","styleUrls","LoginComponent","api","permissionAPI","util","flag","loginFlag","adminLogin","userLogin","loginData","loginForm","email","submitLogin","localStorage","setItem","JSON","stringify","user","local","_id","successMessage","getCompanyList","permissionDetails","permissionRoleInfo","errorMessageServer","handleErrors","getListData","company","length","sessionStorage","undefined","error","login","routes","path","component","children","redirectTo","pathMatch","UsersRoutingModule","forChild","declarations","imports","RegisterComponent","spinner","signupFlag","submitData","registerForm","show","submitSignup","hide","register","ForgotPasswordComponent","forgotFlag","submitEmail","forgotPassForm","submitForgotPasswordData","forgotPassword","UsersComponent","GeneratePasswordComponent","submitPassword","set","setPasswordForm","submitPasswordData","setPassword","UsersModule"],"mappings":"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","file":"app-users-users-module-es5.js","sourcesContent":["import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiService } from 'src/app/services/api.service';\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  resetPasswordForm: FormGroup;\n  snapshotParam: string;\n  passwordFlag: boolean = true;\n  errMessage: string;\n  successFlag:Boolean = false;\n  successMsg:string;\n\n  constructor(private route: ActivatedRoute, private apiService: ApiService, public fb: FormBuilder, private ngZone: NgZone, private router: Router) { }\n\n  ngOnInit() {    //Calling validation method\n    this.submitResetPassword();\n    this.snapshotParam = this.route.snapshot.paramMap.get(\"token\");\n  }\n\n\n  submitResetPassword() { //create method for validation\n    try {\n      this.resetPasswordForm = this.fb.group({\n        password: new FormControl('', Validators.compose([\n          Validators.minLength(8),\n          Validators.maxLength(12),\n          Validators.required,\n          Validators.pattern(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/) //this is for the letters both uppercase & lowercase and numbers.\n        ])),\n        passwordConfirmation: new FormControl('', Validators.compose([\n          Validators.required,\n          RxwebValidators.compare({ fieldName: 'password' })\n        ]))\n      });\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  resetPassword() {  //Create method for submit form value and calling API.\n    try {\n      if (this.resetPasswordForm.valid) {\n        this.apiService.submitResetPasswordData(this.resetPasswordForm.value, this.snapshotParam).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successFlag = true;\n            this.successMsg = data.message;\n            this.passwordFlag = true;\n            setTimeout(() => {\n              this.ngZone.run(() => this.router.navigateByUrl('/users/login'));\n            }, 1000)\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.passwordFlag = false;\n            this.errMessage = data.message;\n          }\n        })\n      }\n    }\n    catch (err) {\n      console.log(err);\n    }\n\n  }\n\n  //For print Validation and error message.\n  validationErrorMessage = {\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: `Password must be at least 8 characters long` },\n      { type: 'maxlength', message: `Password should not be greater than 12 characters` },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, one digit and one special characters' }\n    ],\n    'passwordConfirmation': [\n      { type: 'required', message: 'Confirm Password is required' },\n      { type: 'compare', message: 'Passwords do not match' },\n    ],\n  }\n}\n","<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n  <div class=\"card-body\">\n    <div class=\"card-header\">\n      <h2 class=\"card-title\">Reset Password</h2>\n    </div>\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-danger\" *ngIf=\"!passwordFlag\">\n        <strong>{{ errMessage }}</strong>\n      </p>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"successFlag\">\n        <strong>{{ successMsg }}</strong>\n      </p>\n    </div>\n    <div>\n      <form  [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"resetPassword()\" novalidate>\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>Password:</b></label>\n          <input type=\"password\" formControlName=\"password\" placeholder=\"Enter Password\" class=\"form-control\" />\n          <div *ngFor=\"let validation of validationErrorMessage.password\">\n            <div\n              *ngIf=\"resetPasswordForm.get('password').hasError(validation.type) && (resetPasswordForm.get('password').dirty || resetPasswordForm.get('password').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-8 control-label\"><b>Confirm Password:</b></label>\n          <input type=\"password\" formControlName=\"passwordConfirmation\" placeholder=\"Confirm Password\" class=\"form-control\" />\n          <div *ngFor=\"let validation of validationErrorMessage.passwordConfirmation\">\n            <div\n              *ngIf=\"resetPasswordForm.get('passwordConfirmation').hasError(validation.type) && (resetPasswordForm.get('passwordConfirmation').dirty || resetPasswordForm.get('passwordConfirmation').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <div class=\"col-sm-offset-2 col-sm-10\">\n            <button type=\"submit\" [disabled]=\"!resetPasswordForm.valid\" class=\"btn btn-success\">Submit</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport { Router } from '@angular/router';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  flag: boolean = false;\n  errorMessageServer: String;\n  successMessage: String;\n  loginFlag: boolean = false;\n  successMsg: String;\n  adminLogin: boolean = false;\n  userLogin: boolean = false;\n\n  ngOnInit() {    //Calling validation method\n    this.loginData();\n  }\n\n  constructor(private api: ApiService,\n     public fb: FormBuilder,\n     private ngZone: NgZone,\n     private router: Router,\n     private permissionAPI: ApiService,\n     private util: UtilitiesService\n     ) { }\n\n  //create method for validation\n  loginData() {\n    try {\n      this.loginForm = this.fb.group({\n        email:new FormControl(null, Validators.required),\n        password:new FormControl(null,Validators.required),\n      })\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Create method for submit form value and calling API.\n  login() {\n    try {\n      if (this.loginForm.valid) {\n        this.api.submitLogin(this.loginForm.value).subscribe((data) => {\n          if (data.status === \"success\"|| data.status === 200) {\n              localStorage.setItem('myVal',JSON.stringify(data.user.local.email));\n              localStorage.setItem(\"token\", data.user._id);\n              this.loginFlag = true;\n              this.successMessage = data.message;\n              this.flag = false;\n              this.getCompanyList();\n              this.permissionAPI.permissionDetails().subscribe((data)=>{\n                if(data.status === 'success'){\n                  this.util.permissionRoleInfo = data.data;\n                }\n              })\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.flag = true;\n            this.errorMessageServer = data.message;\n            this.loginFlag = false;\n            setTimeout(() => {\n              this.handleErrors();\n            }, 4000);\n          }\n        });\n      }\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  getCompanyList(){\n   try{\n    this.api.getListData().subscribe((data)=>{\n      if(data.status === \"success\" || data.status === 200){\n        if (data.company.length === 0) {\n         this.ngZone.run(() => this.router.navigateByUrl('/pages/company/add-company'));\n          sessionStorage.setItem('companyId',undefined);\n        } else {\n          sessionStorage.setItem(\"companyId\",data.company[0]._id);\n          localStorage.setItem('companyId',data.company[0]._id)\n          setTimeout(() => {\n            this.ngZone.run(() => this.router.navigateByUrl('/pages/dashboard/company-list'));\n          }, 500)\n        }\n      }\n    })\n   }\n   catch(err){\n     console.log(err.message);\n   }\n  }\n\n  //For print Validation and error message.\n  validationErrorMessage = {\n    'email': [\n      { type: 'required', message: 'Email is required' },\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required' },\n    ],\n  }\n\n  handleErrors(){\n    try {\n      this.loginFlag = false;\n      this.successMessage = '';\n      this.errorMessageServer = '';\n      this.flag = false;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n","<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n  <div class=\"card-body\">\n    <div class=\"card-header\">\n      <h1 class=\"card-title\">Login</h1>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-danger\" *ngIf=\"flag\">\n        <strong>{{ errorMessageServer }}</strong>\n      </p>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"loginFlag\">\n        <strong>{{ successMessage }}</strong>\n      </p>\n    </div>\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"loginForm\" (ngSubmit)=\"login()\" novalidate>\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Email:</b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Your Email\"\n            formControlName=\"email\">\n          <div *ngFor=\"let validation of validationErrorMessage.email\">\n            <div style=\"color: red;margin-left: 14px;\"\n              *ngIf=\"loginForm.get('email').hasError(validation.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Password:</b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"password\" id=\"inputPassword\" placeholder=\"Enter Your Password\"\n            formControlName=\"password\">\n\n          <!-- Check for password validation -->\n          <div *ngFor=\"let validation of validationErrorMessage.password\">\n            <div\n              *ngIf=\"loginForm.get('password').hasError(validation.type) && (loginForm.get('password').dirty || loginForm.get('password').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n          <a class=\"text-link\" id=\"forgot\" routerLink=\"../forgot-password\"\n            routerLinkActive=\"active\">Forgot-Password?</a>\n        </div>\n\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"loginForm.invalid\">Login</button>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <section>Already have an account? &nbsp;<a class=\"text-link\" routerLink=\"../register\"\n              routerLinkAcitve=\"active\">REGISTER</a></section>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { NgModule, Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { UsersComponent } from './users.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { GeneratePasswordComponent } from './generate-password/generate-password.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes : Routes= [\n  {\n    path:'',\n    component : UsersComponent,\n    children: [\n    {\n      path: 'login',\n      component: LoginComponent,\n    },\n    {\n      path: 'register',\n      component: RegisterComponent,\n    },\n    {\n      path: 'generate-password/:token',\n      component:GeneratePasswordComponent,\n    },\n    {\n      path: 'forgot-password',\n      component: ForgotPasswordComponent,\n    },\n    {\n      path:'reset-password/:token',\n      component: ResetPasswordComponent,\n    },\n    {\n      path: '',\n      redirectTo: 'login',\n      pathMatch:'full',\n    }\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes)\n  ]\n})\nexport class UsersRoutingModule { }\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ApiService } from 'src/app/services/api.service';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm: FormGroup;\n  signupFlag: boolean = true;\n  errMessage: string;\n  successFlag:boolean = true;\n  successMessage:string;\n\n  ngOnInit() { //Calling validation method\n    this.submitData();\n  }\n\n  constructor(private api: ApiService, public fb: FormBuilder, private ngZone: NgZone,\n     private router: Router,\n     private spinner: NgxSpinnerService) { }\n\n  //Create method for validation\n  submitData() {\n    try {\n      this.registerForm = this.fb.group({\n        email: new FormControl(null, Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n        ])),\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Create method for submit input value and calling API\n  register() {\n    try {\n      this.spinner.show();\n      //console.log(this.registerForm.value);\n      this.api.submitSignup(this.registerForm.value).subscribe((data) => {\n        //Manage server status when giving error\n        if (data.status === \"error\" || data.status === 404) {\n          this.signupFlag = false;\n          this.errMessage = data.message;\n          this.successFlag = true;\n          this.spinner.hide();\n          setTimeout(() => {\n            this.handleErrors();\n          }, 5000);\n        }\n        //Manage server status when giving success\n        else if (data.status === \"success\" || data.status === 200) {\n          this.successFlag = false;\n          this.successMessage = data.message;\n          this.signupFlag = true;\n          this.spinner.hide();\n          setTimeout(()=>{\n            this.ngZone.run(() => this.router.navigateByUrl('/users/login'));\n            this.handleErrors();\n          },10000)\n        }\n      });\n    }\n    catch (err) {\n      console.log(err);\n    }\n\n  }\n\n  //For print validation and error message\n  validationErrorMessage = {\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ],\n\n  }\n\n  handleErrors(){\n    try {\n      this.signupFlag = false;\n      this.errMessage = '';\n      this.successFlag = true;\n      this.successMessage = '';\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n","<ngx-spinner\nbdColor=\"rgba(51,51,51,0.8)\"\nsize=\"medium\"\ncolor=\"#fff\"\ntype=\"ball-scale-ripple-multiple\"\n>\n<p style=\"font-size: 20px; color: white\">Loading...</p>\n</ngx-spinner>\n<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n  <div class=\"card-body\">\n    <div class=\"card-header\">\n      <h1 class=\"card-title\">Register</h1>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"!successFlag\">\n        <strong>{{ successMessage }}</strong>\n      </p>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-danger\" *ngIf=\"!signupFlag\">\n        <strong>{{ errMessage }}</strong>\n      </p>\n    </div>\n\n\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n      <div class=\"form-group\">\n        <label for=\"inputEmail\" class=\"col-sm-6 control-label\"><b>Enter Your Email: </b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Your Email\"\n            formControlName=\"email\">\n          <div *ngFor=\"let validation of validationErrorMessage.email\">\n            <div\n              *ngIf=\"registerForm.get('email').hasError(validation.type) && (registerForm.get('email').dirty || registerForm.get('email').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" [disabled]=\"registerForm.pristine || registerForm.invalid\"\n            class=\"btn btn-success\">Register</button>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <section>Already have an account?&nbsp;<a class=\"text-link\" routerLink=\"../login\">LOGIN</a></section>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ApiService } from 'src/app/services/api.service';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  forgotPassForm: FormGroup;\n  errMessage: string;\n  successMsg: string;\n  forgotFlag: boolean = true;\n  flag: boolean = false;\n\n  constructor(private api: ApiService, public fb: FormBuilder,\n    private ngZone: NgZone,\n    private router: Router,\n    private spinner: NgxSpinnerService) { }\n\n  ngOnInit() {\n    this.submitEmail();\n  }\n\n\n  //Create method for validation\n  submitEmail() {\n    try {\n      this.forgotPassForm = this.fb.group({\n        email: new FormControl(null, Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n\n        ])),\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  forgotPassword() {   //Create method for submit form value and calling API.\n    try {\n      this.spinner.show();\n      this.api.submitForgotPasswordData(this.forgotPassForm.value).subscribe((data) => {\n        if (data.status === \"error\" || data.status === 404) {\n          this.forgotFlag = false;\n          this.errMessage = data.message;\n          this.flag = false;\n          this.spinner.hide();\n          setTimeout(() => {\n            this.handleErrors();\n          }, 5000);\n        }\n        else if (data.status == \"success\" || data.status === 200) {\n          this.flag = true;\n          this.successMsg = data.message;\n          this.forgotFlag = true;\n          this.spinner.hide();\n          setTimeout(() => {\n            this.ngZone.run(() => this.router.navigateByUrl('/users/login'));\n            this.handleErrors();\n          }, 3000)\n        }\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //For print Validation and error message.\n  validationErrorMessage = {\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ],\n\n  }\n\n  handleErrors(){\n    try {\n      this.forgotFlag = false;\n      this.errMessage = '';\n      this.flag = false;\n      this.successMsg = '';\n    } catch (error) {\n      console.log(error);\n    }\n    }\n}\n\n","<ngx-spinner\nbdColor=\"rgba(51,51,51,0.8)\"\nsize=\"medium\"\ncolor=\"#fff\"\ntype=\"ball-scale-ripple-multiple\"\n>\n<p style=\"font-size: 20px; color: white\">Loading...</p>\n</ngx-spinner>\n<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n    <div class=\"card-body\">\n        <div class=\"card-header\">\n            <h2 class=\"card-title\">Forgot-Password</h2>\n        </div>\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-success\" *ngIf=\"flag\">\n                <strong>{{ successMsg }}</strong>\n            </p>\n        </div>\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"!forgotFlag\">\n                <strong>{{ errMessage }}</strong>\n            </p>\n        </div>\n\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"forgotPassForm\" (ngSubmit)=\"forgotPassword()\">\n            <div class=\"form-group\">\n                <label for=\"inputEmail\" class=\"col-sm-6 control-label\"><b>Email: </b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Your Registered Email\"\n                        formControlName=\"email\">\n                    <div *ngFor=\"let validation of validationErrorMessage.email\">\n                        <div *ngIf=\"forgotPassForm.get('email').hasError(validation.type) && (forgotPassForm.get('email').dirty || forgotPassForm.get('email').touched)\"\n                        style=\"color: red;margin-left: 14px;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <button type=\"submit\" [disabled]=\"forgotPassForm.pristine || forgotPassForm.invalid\"\n                        class=\"btn btn-success\">Submit</button>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <section>Go Back?&nbsp;<a class=\"text-link\" routerLink=\"../login\">LOGIN</a>\n                    </section>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss']\n})\nexport class UsersComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<router-outlet></router-outlet>\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport { RxwebValidators, ReactiveFormConfig, pattern } from '@rxweb/reactive-form-validators';\n\n@Component({\n  selector: 'app-generate-password',\n  templateUrl: './generate-password.component.html',\n  styleUrls: ['./generate-password.component.scss']\n})\nexport class GeneratePasswordComponent implements OnInit {\n\n  setPasswordForm: FormGroup;\n  snapshotParam: string;\n  passwordFlag: Boolean = true;\n  errMessage: String;\n  successFlag: Boolean = false;\n  successMsg: String;\n\n  constructor(private route: ActivatedRoute, private apiService: ApiService, public fb: FormBuilder, private ngZone: NgZone, private router: Router) { }\n\n  ngOnInit() {  //Calling validation method\n    this.submitPassword();\n    this.snapshotParam = this.route.snapshot.paramMap.get(\"token\");\n    ReactiveFormConfig.set({ \"validationMessage\": { \"compare\": \"Input does not match\" } });\n  }\n\n  submitPassword() {   //create method for validation\n    this.setPasswordForm = this.fb.group({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(8),\n        Validators.maxLength(12),\n        Validators.required,\n        Validators.pattern(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/),\n      ])),\n      passwordConfirmation: new FormControl('', Validators.compose([\n        Validators.required,\n        RxwebValidators.compare({ fieldName: 'password' })\n      ]))\n    });\n  }\n\n  setPassword() {  //Create method for submit form value and calling API.\n    try {\n      if (this.setPasswordForm.valid) {\n        this.apiService.submitPasswordData(this.setPasswordForm.value, this.snapshotParam).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successFlag = true;\n            this.successMsg = data.message;\n            this.passwordFlag = true;\n            setTimeout(() => {\n              this.ngZone.run(() => this.router.navigateByUrl('/users/login'));\n            }, 1000)\n          } else if (data.status == \"error\" || data.status === 404) {\n            this.passwordFlag = false;\n            this.errMessage = data.message;\n            this.successFlag = false;\n          }\n        })\n      }\n    }\n    catch (err) {\n      console.log(err);\n    }\n\n  }\n\n\n\n  //For print Validation and error message.\n  validationErrorMessage = {\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: 'Password must be at least 8 characters long' },\n      { type: 'maxlength', message: 'Password is too large(maximum length 12)' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, one digit and one special characters' }\n    ],\n    'passwordConfirmation': [\n      { type: 'required', message: 'Confirm Password is required' },\n      { type: 'compare', message: 'Password not match' },\n    ],\n  }\n}\n","<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n  <div class=\"card-body\">\n    <div class=\"card-header\">\n      <h2 class=\"card-title\">Set Password</h2>\n    </div>\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-danger\" *ngIf=\"!passwordFlag\">\n          <strong>{{ errMessage }}</strong>\n        </p>\n    </div>\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"successFlag\">\n          <strong>{{ successMsg }}</strong>\n        </p>\n    </div>\n<div>\n  <form  [formGroup]=\"setPasswordForm\" (ngSubmit)=\"setPassword()\">\n    <div class=\"form-group\">\n      <label class=\"col-sm-6 control-label\"><b>Password:</b></label>\n      <input type=\"password\" formControlName=\"password\" placeholder=\"Enter Password\" class=\"form-control\"  />\n      <div *ngFor=\"let validation of validationErrorMessage.password\">\n        <div\n          *ngIf=\"setPasswordForm.get('password').hasError(validation.type) && (setPasswordForm.get('password').dirty || setPasswordForm.get('password').touched)\"\n          style=\"color: red;margin-left: 14px;\">\n          {{ validation.message }}\n     </div>\n     </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"col-sm-8 control-label\"><b>Confirm Password:</b></label>\n      <input type=\"password\" formControlName=\"passwordConfirmation\" placeholder=\"Confirm Password\" class=\"form-control\"  />\n      <div *ngFor=\"let validation of validationErrorMessage.passwordConfirmation\">\n        <div\n          *ngIf=\"setPasswordForm.get('passwordConfirmation').hasError(validation.type) && (setPasswordForm.get('passwordConfirmation').dirty || setPasswordForm.get('passwordConfirmation').touched)\"\n          style=\"color: red;margin-left: 14px;\">\n          {{ validation.message }}\n        </div>\n      </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" class=\"btn btn-success\"\n            [disabled]=\"setPasswordForm.pristine || setPasswordForm.invalid\" >Submit\n            Password</button>\n        </div>\n      </div>\n  </form>\n  </div>\n  </div>\n  </div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UsersRoutingModule } from './users-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { UsersComponent } from './users.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { GeneratePasswordComponent } from './generate-password/generate-password.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { NgxSpinnerModule } from 'ngx-spinner';\n\n\n@NgModule({\n  declarations: [LoginComponent, UsersComponent, RegisterComponent, GeneratePasswordComponent, ForgotPasswordComponent, ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    UsersRoutingModule,\n    ReactiveFormsModule,\n    RouterModule,\n    NgxSpinnerModule,\n\n  ]\n})\nexport class UsersModule { }\n"]}