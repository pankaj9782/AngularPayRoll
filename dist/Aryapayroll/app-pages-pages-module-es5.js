(function () {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _get2(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get2 = Reflect.get; } else { _get2 = function _get(target, property, receiver) { var base = _superPropBase2(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get2(target, property, receiver || target); }

  function _superPropBase2(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf2(object); if (object === null) break; } return object; }

  function _inherits2(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf2(subClass, superClass); }

  function _setPrototypeOf2(o, p) { _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf2(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf2(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf2(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn2(this, result); }; }

  function _possibleConstructorReturn2(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized2(self); }

  function _assertThisInitialized2(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf2(o) { _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf2(o); }

  function _classCallCheck2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["app-pages-pages-module"], {
    /***/
    "4SUy":
    /*!***********************************************************************!*\
      !*** ./node_modules/@syncfusion/ej2-base/dist/es6/ej2-base.es2015.js ***!
      \***********************************************************************/

    /*! exports provided: blazorCultureFormats, IntlBase, Ajax, Animation, rippleEffect, isRippleEnabled, enableRipple, Base, getComponent, removeChildInstance, Browser, Component, ChildProperty, Position, Draggable, Droppable, EventHandler, onIntlChange, rightToLeft, cldrData, defaultCulture, defaultCurrencyCode, Internationalization, setCulture, setCurrencyCode, loadCldr, enableRtl, getNumericObject, getNumberDependable, getDefaultDateObject, KeyboardEvents, L10n, ModuleLoader, Property, Complex, ComplexFactory, Collection, CollectionFactory, Event, NotifyPropertyChanges, CreateBuilder, SwipeSettings, Touch, HijriParser, blazorTemplates, getRandomId, compile, updateBlazorTemplate, resetBlazorTemplate, setTemplateEngine, getTemplateEngine, disableBlazorMode, createInstance, setImmediate, getValue, setValue, deleteObject, isObject, getEnumValue, merge, extend, isNullOrUndefined, isUndefined, getUniqueID, debounce, queryParams, isObjectArray, compareElementParent, throwError, print, formatUnit, enableBlazorMode, isBlazor, getElement, getInstance, addInstance, uniqueID, createElement, addClass, removeClass, isVisible, prepend, append, detach, remove, attributes, select, selectAll, closest, siblings, getAttributeOrDefault, setStyleAttribute, classList, matches, includeInnerHTML, containsClass, cloneNode, Observer, SanitizeHtmlHelper */

    /***/
    function SUy(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "blazorCultureFormats", function () {
        return blazorCultureFormats;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "IntlBase", function () {
        return IntlBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Ajax", function () {
        return Ajax;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Animation", function () {
        return Animation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "rippleEffect", function () {
        return rippleEffect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isRippleEnabled", function () {
        return isRippleEnabled;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "enableRipple", function () {
        return enableRipple;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Base", function () {
        return Base;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getComponent", function () {
        return getComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "removeChildInstance", function () {
        return removeChildInstance;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Browser", function () {
        return Browser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Component", function () {
        return Component;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ChildProperty", function () {
        return ChildProperty;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Position", function () {
        return Position;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Draggable", function () {
        return Draggable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Droppable", function () {
        return Droppable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EventHandler", function () {
        return EventHandler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "onIntlChange", function () {
        return onIntlChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "rightToLeft", function () {
        return rightToLeft;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cldrData", function () {
        return cldrData;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "defaultCulture", function () {
        return defaultCulture;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "defaultCurrencyCode", function () {
        return defaultCurrencyCode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Internationalization", function () {
        return Internationalization;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setCulture", function () {
        return setCulture;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setCurrencyCode", function () {
        return setCurrencyCode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "loadCldr", function () {
        return loadCldr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "enableRtl", function () {
        return enableRtl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getNumericObject", function () {
        return getNumericObject;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getNumberDependable", function () {
        return getNumberDependable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getDefaultDateObject", function () {
        return getDefaultDateObject;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "KeyboardEvents", function () {
        return KeyboardEvents;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "L10n", function () {
        return L10n;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ModuleLoader", function () {
        return ModuleLoader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Property", function () {
        return Property;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Complex", function () {
        return Complex;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ComplexFactory", function () {
        return ComplexFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Collection", function () {
        return Collection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CollectionFactory", function () {
        return CollectionFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Event", function () {
        return Event$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NotifyPropertyChanges", function () {
        return NotifyPropertyChanges;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CreateBuilder", function () {
        return CreateBuilder;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SwipeSettings", function () {
        return SwipeSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Touch", function () {
        return Touch;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HijriParser", function () {
        return HijriParser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "blazorTemplates", function () {
        return blazorTemplates;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getRandomId", function () {
        return getRandomId;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compile", function () {
        return compile$$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "updateBlazorTemplate", function () {
        return updateBlazorTemplate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "resetBlazorTemplate", function () {
        return resetBlazorTemplate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setTemplateEngine", function () {
        return setTemplateEngine;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getTemplateEngine", function () {
        return getTemplateEngine;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "disableBlazorMode", function () {
        return disableBlazorMode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createInstance", function () {
        return createInstance;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setImmediate", function () {
        return setImmediate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getValue", function () {
        return getValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setValue", function () {
        return setValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "deleteObject", function () {
        return deleteObject;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isObject", function () {
        return isObject;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getEnumValue", function () {
        return getEnumValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "merge", function () {
        return merge;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "extend", function () {
        return extend;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isNullOrUndefined", function () {
        return isNullOrUndefined;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isUndefined", function () {
        return isUndefined;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getUniqueID", function () {
        return getUniqueID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "debounce", function () {
        return debounce;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "queryParams", function () {
        return queryParams;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isObjectArray", function () {
        return isObjectArray;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compareElementParent", function () {
        return compareElementParent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "throwError", function () {
        return throwError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "print", function () {
        return print;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "formatUnit", function () {
        return formatUnit;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "enableBlazorMode", function () {
        return enableBlazorMode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isBlazor", function () {
        return isBlazor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getElement", function () {
        return getElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getInstance", function () {
        return getInstance;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "addInstance", function () {
        return addInstance;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "uniqueID", function () {
        return uniqueID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createElement", function () {
        return _createElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "addClass", function () {
        return addClass;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "removeClass", function () {
        return removeClass;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isVisible", function () {
        return isVisible;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "prepend", function () {
        return prepend;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "append", function () {
        return append;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "detach", function () {
        return detach;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "remove", function () {
        return remove;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "attributes", function () {
        return attributes;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "select", function () {
        return select;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectAll", function () {
        return selectAll;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "closest", function () {
        return closest;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "siblings", function () {
        return siblings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getAttributeOrDefault", function () {
        return getAttributeOrDefault;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setStyleAttribute", function () {
        return setStyleAttribute;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "classList", function () {
        return classList;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "matches", function () {
        return matches;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "includeInnerHTML", function () {
        return includeInnerHTML;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "containsClass", function () {
        return containsClass;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cloneNode", function () {
        return cloneNode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Observer", function () {
        return Observer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SanitizeHtmlHelper", function () {
        return SanitizeHtmlHelper;
      });

      var instances = 'ej2_instances';
      var uid = 0;
      var isBlazorPlatform = false;
      /**
       * Function to check whether the platform is blazor or not.
       * @return {boolean} result
       * @private
       */

      function disableBlazorMode() {
        isBlazorPlatform = false;
      }
      /**
       * Create Instance from constructor function with desired parameters.
       * @param {Function} classFunction - Class function to which need to create instance
       * @param {any[]} params - Parameters need to passed while creating instance
       * @return {any}
       * @private
       */


      function createInstance(classFunction, params) {
        var arrayParam = params;
        arrayParam.unshift(undefined);
        return new (Function.prototype.bind.apply(classFunction, arrayParam))();
      }
      /**
       * To run a callback function immediately after the browser has completed other operations.
       * @param {Function} handler - callback function to be triggered.
       * @return {Function}
       * @private
       */


      function setImmediate(handler) {
        var unbind;
        var num = new Uint16Array(5);
        var intCrypto = window.msCrypto || window.crypto;
        intCrypto.getRandomValues(num);
        var secret = 'ej2' + combineArray(num);

        var messageHandler = function messageHandler(event) {
          if (event.source === window && typeof event.data === 'string' && event.data.length <= 32 && event.data === secret) {
            handler();
            unbind();
          }
        };

        window.addEventListener('message', messageHandler, false);
        window.postMessage(secret, '*');
        return unbind = function unbind() {
          window.removeEventListener('message', messageHandler);
          handler = messageHandler = secret = undefined;
        };
      }
      /**
       * To get nameSpace value from the desired object.
       * @param {string} nameSpace - String value to the get the inner object
       * @param {any} obj - Object to get the inner object value.
       * @return {any}
       * @private
       */


      function getValue(nameSpace, obj) {
        /* tslint:disable no-any */
        var value = obj;
        var splits = nameSpace.replace(/\[/g, '.').replace(/\]/g, '').split('.');

        for (var i = 0; i < splits.length && !isUndefined(value); i++) {
          value = value[splits[i]];
        }

        return value;
      }
      /**
       * To set value for the nameSpace in desired object.
       * @param {string} nameSpace - String value to the get the inner object
       * @param {any} value - Value that you need to set.
       * @param {any} obj - Object to get the inner object value.
       * @return {void}
       * @private
       */


      function setValue(nameSpace, value, obj) {
        var keys = nameSpace.replace(/\[/g, '.').replace(/\]/g, '').split('.');
        var start = obj || {};
        var fromObj = start;
        var i;
        var length = keys.length;
        var key;

        for (i = 0; i < length; i++) {
          key = keys[i];

          if (i + 1 === length) {
            fromObj[key] = value === undefined ? {} : value;
          } else if (isNullOrUndefined(fromObj[key])) {
            fromObj[key] = {};
          }

          fromObj = fromObj[key];
        }

        return start;
      }
      /**
       * Delete an item from Object
       * @param {any} obj - Object in which we need to delete an item.
       * @param {string} params - String value to the get the inner object
       * @return {void}
       * @private
       */


      function deleteObject(obj, key) {
        delete obj[key];
      }
      /**
       * Check weather the given argument is only object.
       * @param {any} obj - Object which is need to check.
       * @return {boolean}
       * @private
       */


      function isObject(obj) {
        var objCon = {};
        return !isNullOrUndefined(obj) && obj.constructor === objCon.constructor;
      }
      /**
       * To get enum value by giving the string.
       * @param {any} enumObject - Enum object.
       * @param {string} enumValue - Enum value to be searched
       * @return {any}
       * @private
       */


      function getEnumValue(enumObject, enumValue) {
        return enumObject[enumValue];
      }
      /**
       * Merge the source object into destination object.
       * @param {any} source - source object which is going to merge with destination object
       * @param {any} destination - object need to be merged
       * @return {void}
       * @private
       */


      function merge(source, destination) {
        if (!isNullOrUndefined(destination)) {
          var temrObj = source;
          var tempProp = destination;

          var _keys = Object.keys(destination);

          var deepmerge = 'deepMerge';

          for (var _i = 0, _keys2 = _keys; _i < _keys2.length; _i++) {
            var key = _keys2[_i];

            if (!isNullOrUndefined(temrObj[deepmerge]) && temrObj[deepmerge].indexOf(key) !== -1 && (isObject(tempProp[key]) || Array.isArray(tempProp[key]))) {
              extend(temrObj[key], temrObj[key], tempProp[key], true);
            } else {
              temrObj[key] = tempProp[key];
            }
          }
        }
      }
      /**
       * Extend the two object with newer one.
       * @param {any} copied - Resultant object after merged
       * @param {Object} first - First object need to merge
       * @param {Object} second - Second object need to merge
       * @return {Object}
       * @private
       */


      function extend(copied, first, second, deep) {
        var _arguments = arguments;
        var result = copied && typeof copied === 'object' ? copied : {};
        var length = arguments.length;

        if (deep) {
          length = length - 1;
        }

        var _loop = function _loop(i) {
          if (!_arguments[i]) {
            return "continue";
          }

          var obj1 = _arguments[i];
          Object.keys(obj1).forEach(function (key) {
            var src = result[key];
            var copy = obj1[key];
            var clone;
            var isArrayChanged = Array.isArray(copy) && Array.isArray(src) && copy.length !== src.length;
            var blazorEventExtend = isBlazor() ? !(src instanceof Event) && !isArrayChanged : true;

            if (deep && blazorEventExtend && (isObject(copy) || Array.isArray(copy))) {
              if (isObject(copy)) {
                clone = src ? src : {};

                if (Array.isArray(clone) && clone.hasOwnProperty('isComplexArray')) {
                  extend(clone, {}, copy, deep);
                } else {
                  result[key] = extend(clone, {}, copy, deep);
                }
              } else {
                /* istanbul ignore next */
                clone = isBlazor() ? src && Object.keys(copy).length : src ? src : [];
                result[key] = extend([], clone, copy, deep);
              }
            } else {
              result[key] = copy;
            }
          });
        };

        for (var i = 1; i < length; i++) {
          var _ret = _loop(i);

          if (_ret === "continue") continue;
        }

        return result;
      }
      /**
       * To check whether the object is null or undefined.
       * @param {Object} value - To check the object is null or undefined
       * @return {boolean}
       * @private
       */


      function isNullOrUndefined(value) {
        return value === undefined || value === null;
      }
      /**
       * To check whether the object is undefined.
       * @param {Object} value - To check the object is undefined
       * @return {boolean}
       * @private
       */


      function isUndefined(value) {
        return 'undefined' === typeof value;
      }
      /**
       * To return the generated unique name
       * @param {string} definedName - To concatenate the unique id to provided name
       * @return {string}
       * @private
       */


      function getUniqueID(definedName) {
        return definedName + '_' + uid++;
      }
      /**
       * It limits the rate at which a function can fire. The function will fire only once every provided second instead of as quickly.
       * @param {Function} eventFunction - Specifies the function to run when the event occurs
       * @param {number} delay - A number that specifies the milliseconds for function delay call option
       * @return {Function}
       * @private
       */


      function debounce(eventFunction, delay) {
        var out; // tslint:disable-next-line

        return function () {
          var _this2 = this;

          var args = arguments;

          var later = function later() {
            out = null;
            return eventFunction.apply(_this2, args);
          };

          clearTimeout(out);
          out = setTimeout(later, delay);
        };
      } // Added since lint ignored after added '//tslint:disable-next-line' 

      /* tslint:disable:no-any */

      /**
       * To convert the object to string for query url
       * @param  {Object} data
       * @returns string
       * @private
       */


      function queryParams(data) {
        var array = [];
        var keys = Object.keys(data);

        for (var _i2 = 0, _keys3 = keys; _i2 < _keys3.length; _i2++) {
          var key = _keys3[_i2];
          array.push(encodeURIComponent(key) + '=' + encodeURIComponent('' + data[key]));
        }

        return array.join('&');
      }
      /**
       * To check whether the given array contains object.
       * @param {T[]} value- Specifies the T type array to be checked.
       * @private
       */


      function isObjectArray(value) {
        var parser = Object.prototype.toString;

        if (parser.call(value) === '[object Array]') {
          if (parser.call(value[0]) === '[object Object]') {
            return true;
          }
        }

        return false;
      }
      /**
       * To check whether the  child element is descendant to parent element or parent and child are same element.
       * @param{Element} - Specifies the child element to compare with parent.
       * @param{Element} - Specifies the parent element.
       * @return boolean
       * @private
       */


      function compareElementParent(child, parent) {
        var node = child;

        if (node === parent) {
          return true;
        } else if (node === document || !node) {
          return false;
        } else {
          return compareElementParent(node.parentNode, parent);
        }
      }
      /**
       * To throw custom error message.
       * @param{string} - Specifies the error message to be thrown.
       * @private
       */


      function throwError(message) {
        try {
          throw new Error(message);
        } catch (e) {
          throw e.message + '\n' + e.stack;
        }
      }
      /**
       * This function is used to print given element
       * @param{Element} element - Specifies the print content element.
       * @param{Window} printWindow - Specifies the print window.
       * @private
       */


      function print(element, printWindow) {
        var div = document.createElement('div');
        var links = [].slice.call(document.getElementsByTagName('head')[0].querySelectorAll('base, link, style'));
        var reference = '';

        if (isNullOrUndefined(printWindow)) {
          printWindow = window.open('', 'print', 'height=452,width=1024,tabbar=no');
        }

        div.appendChild(element.cloneNode(true));

        for (var i = 0, len = links.length; i < len; i++) {
          reference += links[i].outerHTML;
        }

        printWindow.document.write('<!DOCTYPE html> <html><head>' + reference + '</head><body>' + div.innerHTML + '<script> (function() { window.ready = true; })(); </script>' + '</body></html>');
        printWindow.document.close();
        printWindow.focus(); // tslint:disable-next-line

        var interval = setInterval(function () {
          if (printWindow.ready) {
            printWindow.print();
            printWindow.close();
            clearInterval(interval);
          }
        }, 500);
        return printWindow;
      }
      /**
       * Function to normalize the units applied to the element.
       * @param  {number|string} value
       * @return {string} result
       * @private
       */


      function formatUnit(value) {
        var result = value + '';

        if (result === 'auto' || result.indexOf('%') !== -1 || result.indexOf('px') !== -1) {
          return result;
        }

        return result + 'px';
      }
      /**
       * Function to check whether the platform is blazor or not.
       * @return {boolean} result
       * @private
       */


      function enableBlazorMode() {
        isBlazorPlatform = true;
      }
      /**
       * Function to check whether the platform is blazor or not.
       * @return {boolean} result
       * @private
       */


      function isBlazor() {
        return isBlazorPlatform;
      }
      /**
       * Function to convert xPath to DOM element in blazor platform
       * @return {HTMLElement} result
       * @param {HTMLElement | object} element
       * @private
       */


      function getElement(element) {
        var xPath = 'xPath';

        if (!(element instanceof Node) && isBlazor() && !isNullOrUndefined(element[xPath])) {
          return document.evaluate(element[xPath], document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        }

        return element;
      }
      /**
       * Function to fetch the Instances of a HTML element for the given component.
       * @param {string | HTMLElement} element
       * @param {any} component
       * @return {Object} inst
       * @private
       */
      // tslint:disable-next-line


      function getInstance(element, component) {
        // tslint:disable-next-line:no-any
        var elem = typeof element === 'string' ? document.querySelector(element) : element;

        if (elem[instances]) {
          var _iterator = _createForOfIteratorHelper(elem[instances]),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var inst = _step.value;

              if (inst instanceof component) {
                return inst;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        return null;
      }
      /**
       * Function to add instances for the given element.
       * @param {string | HTMLElement} element
       * @param {Object} instance
       * @return {void}
       * @private
       */


      function addInstance(element, instance) {
        // tslint:disable-next-line:no-any
        var elem = typeof element === 'string' ? document.querySelector(element) : element;

        if (elem[instances]) {
          elem[instances].push(instance);
        } else {
          elem[instances] = [instance];
        }
      }
      /**
       * Function to generate the unique id.
       * @return {any}
       * @private
       */
      // tslint:disable-next-line:no-any


      function uniqueID() {
        // tslint:disable-next-line:no-any
        if (typeof window === 'undefined') {
          return;
        } // tslint:disable-next-line:no-any


        var num = new Uint16Array(5);
        var intCrypto = window.msCrypto || window.crypto;
        return intCrypto.getRandomValues(num);
      }

      function combineArray(num) {
        var ret = '';

        for (var i = 0; i < 5; i++) {
          ret += (i ? ',' : '') + num[i];
        }

        return ret;
      }
      /**
       * Parser
       */


      var defaultNumberingSystem = {
        'latn': {
          '_digits': '0123456789',
          '_type': 'numeric'
        }
      };
      var defaultNumberSymbols = {
        'decimal': '.',
        'group': ',',
        'percentSign': '%',
        'plusSign': '+',
        'minusSign': '-',
        'infinity': '∞',
        'nan': 'NaN',
        'exponential': 'E'
      };
      var latnNumberSystem = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
      /**
       * Interface for parser base
       * @private
       */

      var ParserBase = /*#__PURE__*/function () {
        function ParserBase() {
          _classCallCheck2(this, ParserBase);
        }

        _createClass2(ParserBase, null, [{
          key: "getMainObject",

          /**
           * Returns the cldr object for the culture specifies
           * @param {Object} obj - Specifies the object from which culture object to be acquired.
           * @param {string} cName - Specifies the culture name.
           * @returns {Object}
           */
          value: function getMainObject(obj, cName) {
            var value = isBlazor() ? cName : 'main.' + cName;
            return getValue(value, obj);
          }
          /**
           * Returns the numbering system object from given cldr data.
           * @param {Object} obj - Specifies the object from which number system is acquired.
           * @returns {Object}
           */

        }, {
          key: "getNumberingSystem",
          value: function getNumberingSystem(obj) {
            return getValue('supplemental.numberingSystems', obj) || this.numberingSystems;
          }
          /**
           * Returns the reverse of given object keys or keys specified.
           * @param {Object} prop - Specifies the object to be reversed.
           * @param {number[]} keys - Optional parameter specifies the custom keyList for reversal.
           * @returns {Object}
           */

        }, {
          key: "reverseObject",
          value: function reverseObject(prop, keys) {
            var propKeys = keys || Object.keys(prop);
            var res = {};

            var _iterator2 = _createForOfIteratorHelper(propKeys),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var key = _step2.value;

                /* tslint:disable no-any */
                if (!res.hasOwnProperty(prop[key])) {
                  res[prop[key]] = key;
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            return res;
          }
          /**
           * Returns the symbol regex by skipping the escape sequence.
           * @param {string[]} props - Specifies the array values to be skipped.
           * @returns {RegExp}
           */

        }, {
          key: "getSymbolRegex",
          value: function getSymbolRegex(props) {
            var regexStr = props.map(function (str) {
              return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1');
            }).join('|');
            return new RegExp(regexStr, 'g');
          }
        }, {
          key: "getSymbolMatch",
          value: function getSymbolMatch(prop) {
            var matchKeys = Object.keys(defaultNumberSymbols);
            var ret = {};

            for (var _i3 = 0, _matchKeys = matchKeys; _i3 < _matchKeys.length; _i3++) {
              var key = _matchKeys[_i3];
              ret[prop[key]] = defaultNumberSymbols[key];
            }

            return ret;
          }
          /**
           * Returns regex string for provided value
           * @param {string} val
           * @returns {string}
           */

        }, {
          key: "constructRegex",
          value: function constructRegex(val) {
            var len = val.length;
            var ret = '';

            for (var i = 0; i < len; i++) {
              if (i !== len - 1) {
                ret += val[i] + '|';
              } else {
                ret += val[i];
              }
            }

            return ret;
          }
          /**
           * Returns the replaced value of matching regex and obj mapper.
           * @param {string} value - Specifies the  values to be replaced.
           * @param {RegExp} regex - Specifies the  regex to search.
           * @param {Object} obj - Specifies the  object matcher to be replace value parts.
           * @returns {string}
           */

        }, {
          key: "convertValueParts",
          value: function convertValueParts(value, regex, obj) {
            return value.replace(regex, function (str) {
              return obj[str];
            });
          }
          /**
           * Returns default numbering system object for formatting from cldr data
           * @param {Object} obj
           * @returns {NumericObject}
           */

        }, {
          key: "getDefaultNumberingSystem",
          value: function getDefaultNumberingSystem(obj) {
            var ret = {};
            ret.obj = getValue('numbers', obj);
            ret.nSystem = getValue('defaultNumberingSystem', ret.obj);
            return ret;
          }
          /**
           * Returns the replaced value of matching regex and obj mapper.
           */

        }, {
          key: "getCurrentNumericOptions",
          value: function getCurrentNumericOptions(curObj, numberSystem, needSymbols, blazorMode) {
            var ret = {};
            var cur = this.getDefaultNumberingSystem(curObj);

            if (!isUndefined(cur.nSystem) || blazorMode) {
              var digits = blazorMode ? getValue('obj.mapperDigits', cur) : getValue(cur.nSystem + '._digits', numberSystem);

              if (!isUndefined(digits)) {
                ret.numericPair = this.reverseObject(digits, latnNumberSystem);
                ret.numberParseRegex = new RegExp(this.constructRegex(digits), 'g');
                ret.numericRegex = '[' + digits[0] + '-' + digits[9] + ']';

                if (needSymbols) {
                  ret.numericRegex = digits[0] + '-' + digits[9];
                  ret.symbolNumberSystem = getValue(blazorMode ? 'numberSymbols' : 'symbols-numberSystem-' + cur.nSystem, cur.obj);
                  ret.symbolMatch = this.getSymbolMatch(ret.symbolNumberSystem);
                  ret.numberSystem = cur.nSystem;
                }
              }
            }

            return ret;
          }
          /**
           * Returns number mapper object for the provided cldr data
           * @param {Object} curObj
           * @param {Object} numberSystem
           * @param {boolean} isNumber
           * @returns {NumberMapper}
           */

        }, {
          key: "getNumberMapper",
          value: function getNumberMapper(curObj, numberSystem, isNumber) {
            var ret = {
              mapper: {}
            };
            var cur = this.getDefaultNumberingSystem(curObj);

            if (!isUndefined(cur.nSystem)) {
              ret.numberSystem = cur.nSystem;
              ret.numberSymbols = getValue('symbols-numberSystem-' + cur.nSystem, cur.obj);
              ret.timeSeparator = getValue('timeSeparator', ret.numberSymbols);
              var digits = getValue(cur.nSystem + '._digits', numberSystem);

              if (!isUndefined(digits)) {
                var _iterator3 = _createForOfIteratorHelper(latnNumberSystem),
                    _step3;

                try {
                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    var i = _step3.value;
                    ret.mapper[i] = digits[i];
                  }
                } catch (err) {
                  _iterator3.e(err);
                } finally {
                  _iterator3.f();
                }
              }
            }

            return ret;
          }
        }]);

        return ParserBase;
      }();

      ParserBase.nPair = 'numericPair';
      ParserBase.nRegex = 'numericRegex';
      ParserBase.numberingSystems = defaultNumberingSystem;
      /**
       * @private
       */

      var blazorCurrencyData = {
        'DJF': 'Fdj',
        'ERN': 'Nfk',
        'ETB': 'Br',
        'NAD': '$',
        'ZAR': 'R',
        'XAF': 'FCFA',
        'GHS': 'GH₵',
        'XDR': 'XDR',
        'AED': 'د.إ.‏',
        'BHD': 'د.ب.‏',
        'DZD': 'د.ج.‏',
        'EGP': 'ج.م.‏',
        'ILS': '₪',
        'IQD': 'د.ع.‏',
        'JOD': 'د.ا.‏',
        'KMF': 'CF',
        'KWD': 'د.ك.‏',
        'LBP': 'ل.ل.‏',
        'LYD': 'د.ل.‏',
        'MAD': 'د.م.‏',
        'MRU': 'أ.م.',
        'OMR': 'ر.ع.‏',
        'QAR': 'ر.ق.‏',
        'SAR': 'ر.س.‏',
        'SDG': 'ج.س.',
        'SOS': 'S',
        'SSP': '£',
        'SYP': 'ل.س.‏',
        'TND': 'د.ت.‏',
        'YER': 'ر.ي.‏',
        'CLP': '$',
        'INR': '₹',
        'TZS': 'TSh',
        'EUR': '€',
        'AZN': '₼',
        'RUB': '₽',
        'BYN': 'Br',
        'ZMW': 'K',
        'BGN': 'лв.',
        'NGN': '₦',
        'XOF': 'CFA',
        'BDT': '৳',
        'CNY': '¥',
        'BAM': 'КМ',
        'UGX': 'USh',
        'USD': '$',
        'CZK': 'Kč',
        'GBP': '£',
        'DKK': 'kr.',
        'KES': 'Ksh',
        'CHF': 'CHF',
        'MVR': 'ރ.',
        'BTN': 'Nu.',
        'XCD': 'EC$',
        'AUD': '$',
        'BBD': '$',
        'BIF': 'FBu',
        'BMD': '$',
        'BSD': '$',
        'BWP': 'P',
        'BZD': '$',
        'CAD': '$',
        'NZD': '$',
        'FJD': '$',
        'FKP': '£',
        'GIP': '£',
        'GMD': 'D',
        'GYD': '$',
        'HKD': '$',
        'IDR': 'Rp',
        'JMD': '$',
        'KYD': '$',
        'LRD': '$',
        'MGA': 'Ar',
        'MOP': 'MOP$',
        'MUR': 'Rs',
        'MWK': 'MK',
        'MYR': 'RM',
        'PGK': 'K',
        'PHP': '₱',
        'PKR': 'Rs',
        'RWF': 'RF',
        'SBD': '$',
        'SCR': 'SR',
        'SEK': 'kr',
        'SGD': '$',
        'SHP': '£',
        'SLL': 'Le',
        'ANG': 'NAf.',
        'SZL': 'E',
        'TOP': 'T$',
        'TTD': '$',
        'VUV': 'VT',
        'WST': 'WS$',
        'ARS': '$',
        'BOB': 'Bs',
        'BRL': 'R$',
        'COP': '$',
        'CRC': '₡',
        'CUP': '$',
        'DOP': '$',
        'GTQ': 'Q',
        'HNL': 'L',
        'MXN': '$',
        'NIO': 'C$',
        'PAB': 'B/.',
        'PEN': 'S/',
        'PYG': '₲',
        'UYU': '$',
        'VES': 'Bs.S',
        'IRR': 'ريال',
        'GNF': 'FG',
        'CDF': 'FC',
        'HTG': 'G',
        'XPF': 'FCFP',
        'HRK': 'kn',
        'HUF': 'Ft',
        'AMD': '֏',
        'ISK': 'kr',
        'JPY': '¥',
        'GEL': '₾',
        'CVE': '​',
        'KZT': '₸',
        'KHR': '៛',
        'KPW': '₩',
        'KRW': '₩',
        'KGS': 'сом',
        'AOA': 'Kz',
        'LAK': '₭',
        'MZN': 'MTn',
        'MKD': 'ден',
        'MNT': '₮',
        'BND': '$',
        'MMK': 'K',
        'NOK': 'kr',
        'NPR': 'रु',
        'AWG': 'Afl.',
        'SRD': '$',
        'PLN': 'zł',
        'AFN': '؋',
        'STN': 'Db',
        'MDL': 'L',
        'RON': 'lei',
        'UAH': '₴',
        'LKR': 'රු.',
        'ALL': 'Lekë',
        'RSD': 'дин.',
        'TJS': 'смн',
        'THB': '฿',
        'TMT': 'm.',
        'TRY': '₺',
        'UZS': 'сўм',
        'VND': '₫',
        'TWD': 'NT$'
      };

      function getBlazorCurrencySymbol(currencyCode) {
        return getValue(currencyCode || '', blazorCurrencyData);
      }
      /***
       * Hijri parser
       */


      var HijriParser;

      (function (HijriParser) {
        /* tslint:disable */
        var dateCorrection = [28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167, 29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759, 29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348, 30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939, 30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530, 31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120, 32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711, 32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302, 33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893, 33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483, 34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074, 35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665, 35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254, 36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845, 36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436, 37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027, 38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617, 38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208, 39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798, 39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389, 40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980, 41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570, 41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161, 42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751, 42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342, 43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932, 43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523, 44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114, 45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704, 45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295, 46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885, 46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476, 47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066, 48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657, 48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248, 49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838, 49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429, 50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019, 51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611, 51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200, 52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792, 52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383, 53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973, 54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564, 54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154, 55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745, 55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335, 56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926, 56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517, 57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107, 58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698, 58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288, 59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879, 59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469, 60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061, 61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651, 61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242, 62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832, 62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423, 63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014, 64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603, 64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195, 65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785, 65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376, 66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967, 66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557, 67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148, 68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738, 68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330, 69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919, 69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510, 70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101, 71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691, 71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282, 72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872, 72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464, 73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053, 74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645, 74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235, 75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826, 75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416, 76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007, 77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598, 77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188, 78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779, 78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369, 79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960, 79990];
        /* tslint:enable */

        function getHijriDate(gDate) {
          var day = gDate.getDate();
          var month = gDate.getMonth();
          var year = gDate.getFullYear();
          var tMonth = month + 1;
          var tYear = year;

          if (tMonth < 3) {
            tYear -= 1;
            tMonth += 12;
          }

          var yPrefix = Math.floor(tYear / 100.);
          var julilanOffset = yPrefix - Math.floor(yPrefix / 4.) - 2;
          var julianNumber = Math.floor(365.25 * (tYear + 4716)) + Math.floor(30.6001 * (tMonth + 1)) + day - julilanOffset - 1524;
          yPrefix = Math.floor((julianNumber - 1867216.25) / 36524.25);
          julilanOffset = yPrefix - Math.floor(yPrefix / 4.) + 1;
          var b = julianNumber + julilanOffset + 1524;
          var c = Math.floor((b - 122.1) / 365.25);
          var d = Math.floor(365.25 * c);
          var tempMonth = Math.floor((b - d) / 30.6001);
          day = b - d - Math.floor(30.6001 * tempMonth);
          month = Math.floor((b - d) / 20.6001);

          if (month > 13) {
            c += 1;
            month -= 12;
          }

          month -= 1;
          year = c - 4716;
          var modifiedJulianDate = julianNumber - 2400000; // date calculation for year after 2077

          var iyear = 10631. / 30.;
          var z = julianNumber - 1948084;
          var cyc = Math.floor(z / 10631.);
          z = z - 10631 * cyc;
          var j = Math.floor((z - 0.1335) / iyear);
          var iy = 30 * cyc + j;
          z = z - Math.floor(j * iyear + 0.1335);
          var im = Math.floor((z + 28.5001) / 29.5);
          /* istanbul ignore next */

          if (im === 13) {
            im = 12;
          }

          var tempDay = z - Math.floor(29.5001 * im - 29);
          var i = 0;

          for (; i < dateCorrection.length; i++) {
            if (dateCorrection[i] > modifiedJulianDate) {
              break;
            }
          }

          var iln = i + 16260;
          var ii = Math.floor((iln - 1) / 12);
          var hYear = ii + 1;
          var hmonth = iln - 12 * ii;
          var hDate = modifiedJulianDate - dateCorrection[i - 1] + 1;

          if ((hDate + '').length > 2) {
            hDate = tempDay;
            hmonth = im;
            hYear = iy;
          }

          return {
            year: hYear,
            month: hmonth,
            date: hDate
          };
        }

        HijriParser.getHijriDate = getHijriDate;

        function toGregorian(year, month, day) {
          var iy = year;
          var im = month;
          var id = day;
          var ii = iy - 1;
          var iln = ii * 12 + 1 + (im - 1);
          var i = iln - 16260;
          var mcjdn = id + dateCorrection[i - 1] - 1;
          var julianDate = mcjdn + 2400000;
          var z = Math.floor(julianDate + 0.5);
          var a = Math.floor((z - 1867216.25) / 36524.25);
          a = z + 1 + a - Math.floor(a / 4);
          var b = a + 1524;
          var c = Math.floor((b - 122.1) / 365.25);
          var d = Math.floor(365.25 * c);
          var e = Math.floor((b - d) / 30.6001);
          var gDay = b - d - Math.floor(e * 30.6001);
          var gMonth = e - (e > 13.5 ? 13 : 1);
          var gYear = c - (gMonth > 2.5 ? 4716 : 4715);
          /* istanbul ignore next */

          if (gYear <= 0) {
            gMonth--;
          } // No year zero


          return new Date(gYear + '/' + gMonth + '/' + gDay);
        }

        HijriParser.toGregorian = toGregorian;
      })(HijriParser || (HijriParser = {}));

      var abbreviateRegexGlobal = /\/MMMMM|MMMM|MMM|a|LLLL|LLL|EEEEE|EEEE|E|K|cccc|ccc|WW|W|G+|z+/gi;
      var standalone = 'stand-alone';
      var weekdayKey = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
      var timeSetter = {
        m: 'getMinutes',
        h: 'getHours',
        H: 'getHours',
        s: 'getSeconds',
        d: 'getDate',
        f: 'getMilliseconds'
      };
      var datePartMatcher = {
        'M': 'month',
        'd': 'day',
        'E': 'weekday',
        'c': 'weekday',
        'y': 'year',
        'm': 'minute',
        'h': 'hour',
        'H': 'hour',
        's': 'second',
        'L': 'month',
        'a': 'designator',
        'z': 'timeZone',
        'Z': 'timeZone',
        'G': 'era',
        'f': 'milliseconds'
      };
      var timeSeparator = 'timeSeparator';
      /* tslint:disable no-any */

      /**
       * Date Format is a framework provides support for date formatting.
       * @private
       */

      var DateFormat = /*#__PURE__*/function () {
        function DateFormat() {
          _classCallCheck2(this, DateFormat);
        }

        _createClass2(DateFormat, null, [{
          key: "dateFormat",

          /**
           * Returns the formatter function for given skeleton.
           * @param {string} -  Specifies the culture name to be which formatting.
           * @param {DateFormatOptions} - Specific the format in which date  will format.
           * @param {cldr} - Specifies the global cldr data collection.
           * @return Function.
           */
          value: function dateFormat(culture, option, cldr) {
            var _this3 = this;

            var dependable = IntlBase.getDependables(cldr, culture, option.calendar);
            var numObject = getValue('parserObject.numbers', dependable);
            var dateObject = dependable.dateObject;
            var formatOptions = {
              isIslamic: IntlBase.islamicRegex.test(option.calendar)
            };

            if (isBlazor() && option.isServerRendered) {
              option = IntlBase.compareBlazorDateFormats(option, culture);
            }

            var resPattern = option.format || IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');
            formatOptions.dateSeperator = isBlazor() ? getValue('dateSeperator', dateObject) : IntlBase.getDateSeparator(dependable.dateObject);

            if (isUndefined(resPattern)) {
              throwError('Format options or type given must be invalid');
            } else {
              resPattern = IntlBase.ConvertDateToWeekFormat(resPattern);

              if (isBlazor()) {
                resPattern = resPattern.replace(/tt/, 'a');
              }

              formatOptions.pattern = resPattern;
              formatOptions.numMapper = isBlazor() ? extend({}, numObject) : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));
              var patternMatch = resPattern.match(abbreviateRegexGlobal) || [];

              var _iterator4 = _createForOfIteratorHelper(patternMatch),
                  _step4;

              try {
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                  var str = _step4.value;
                  var len = str.length;
                  var _char = str[0];

                  if (_char === 'K') {
                    _char = 'h';
                  }
                  /* tslint:disable no-any */


                  switch (_char) {
                    case 'E':
                    case 'c':
                      if (isBlazor()) {
                        formatOptions.weekday = getValue('days.' + IntlBase.monthIndex[len], dateObject);
                      } else {
                        formatOptions.weekday = dependable.dateObject[IntlBase.days][standalone][IntlBase.monthIndex[len]];
                      }

                      break;

                    case 'M':
                    case 'L':
                      if (isBlazor()) {
                        formatOptions.month = getValue('months.' + IntlBase.monthIndex[len], dateObject);
                      } else {
                        formatOptions.month = dependable.dateObject[IntlBase.month][standalone][IntlBase.monthIndex[len]];
                      }

                      break;

                    case 'a':
                      formatOptions.designator = isBlazor() ? getValue('dayPeriods', dateObject) : getValue('dayPeriods.format.wide', dateObject);
                      break;

                    case 'G':
                      var eText = len <= 3 ? 'eraAbbr' : len === 4 ? 'eraNames' : 'eraNarrow';
                      formatOptions.era = isBlazor() ? getValue('eras', dateObject) : getValue('eras.' + eText, dependable.dateObject);
                      break;

                    case 'z':
                      formatOptions.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);
                      break;
                  }
                }
              } catch (err) {
                _iterator4.e(err);
              } finally {
                _iterator4.f();
              }
            }

            return function (value) {
              if (isNaN(value.getDate())) {
                return null;
              }

              return _this3.intDateFormatter(value, formatOptions);
            };
          }
          /**
           * Returns formatted date string based on options passed.
           * @param {Date} value
           * @param {FormatOptions} options
           */
          // tslint:disable-next-line:max-func-body-length

        }, {
          key: "intDateFormatter",
          value: function intDateFormatter(value, options) {
            var pattern = options.pattern;
            var ret = '';
            var matches = pattern.match(IntlBase.dateParseRegex);
            var dObject = this.getCurrentDateValue(value, options.isIslamic);

            var _iterator5 = _createForOfIteratorHelper(matches),
                _step5;

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var match = _step5.value;
                var length = match.length;
                var _char2 = match[0];

                if (_char2 === 'K') {
                  _char2 = 'h';
                }

                var curval = void 0;
                var curvalstr = '';
                var isNumber = void 0;
                var processNumber = void 0;
                var curstr = '';

                switch (_char2) {
                  case 'M':
                  case 'L':
                    curval = dObject.month;

                    if (length > 2) {
                      ret += options.month[curval];
                    } else {
                      isNumber = true;
                    }

                    break;

                  case 'E':
                  case 'c':
                    ret += options.weekday[weekdayKey[value.getDay()]];
                    break;

                  case 'H':
                  case 'h':
                  case 'm':
                  case 's':
                  case 'd':
                  case 'f':
                    isNumber = true;

                    if (_char2 === 'd') {
                      curval = dObject.date;
                    } else if (_char2 === 'f') {
                      isNumber = false;
                      processNumber = true;
                      curvalstr = value[timeSetter[_char2]]().toString();
                      curvalstr = curvalstr.substring(0, length);
                      var curlength = curvalstr.length;

                      if (length !== curlength) {
                        if (length > 3) {
                          continue;
                        }

                        for (var i = 0; i < length - curlength; i++) {
                          curvalstr = '0' + curvalstr.toString();
                        }
                      }

                      curstr += curvalstr;
                    } else {
                      curval = value[timeSetter[_char2]]();
                    }

                    if (_char2 === 'h') {
                      curval = curval % 12 || 12;
                    }

                    break;

                  case 'y':
                    processNumber = true;
                    curstr += dObject.year;

                    if (length === 2) {
                      curstr = curstr.substr(curstr.length - 2);
                    }

                    break;

                  case 'a':
                    var desig = value.getHours() < 12 ? 'am' : 'pm';
                    ret += options.designator[desig];
                    break;

                  case 'G':
                    var dec = value.getFullYear() < 0 ? 0 : 1;
                    var retu = options.era[dec];

                    if (isNullOrUndefined(retu)) {
                      retu = options.era[dec ? 0 : 1];
                    }

                    ret += retu || '';
                    break;

                  case '\'':
                    ret += match === '\'\'' ? '\'' : match.replace(/\'/g, '');
                    break;

                  case 'z':
                    var timezone = value.getTimezoneOffset();

                    var _pattern = length < 4 ? '+H;-H' : options.timeZone.hourFormat;

                    _pattern = _pattern.replace(/:/g, options.numMapper.timeSeparator);

                    if (timezone === 0) {
                      ret += options.timeZone.gmtZeroFormat;
                    } else {
                      processNumber = true;
                      curstr = this.getTimeZoneValue(timezone, _pattern);
                    }

                    curstr = options.timeZone.gmtFormat.replace(/\{0\}/, curstr);
                    break;

                  case ':':
                    ret += options.numMapper.numberSymbols[timeSeparator];
                    /* tslint:enable no-any */

                    break;

                  case '/':
                    ret += options.dateSeperator;
                    break;

                  case 'W':
                    isNumber = true;
                    curval = IntlBase.getWeekOfYear(value);
                    break;

                  default:
                    ret += match;
                }

                if (isNumber) {
                  processNumber = true;
                  curstr = this.checkTwodigitNumber(curval, length);
                }

                if (processNumber) {
                  ret += ParserBase.convertValueParts(curstr, IntlBase.latnParseRegex, options.numMapper.mapper);
                }
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }

            return ret;
          }
        }, {
          key: "getCurrentDateValue",
          value: function getCurrentDateValue(value, isIslamic) {
            if (isIslamic) {
              return HijriParser.getHijriDate(value);
            }

            return {
              year: value.getFullYear(),
              month: value.getMonth() + 1,
              date: value.getDate()
            };
          }
          /**
           * Returns two digit numbers for given value and length
           */

        }, {
          key: "checkTwodigitNumber",
          value: function checkTwodigitNumber(val, len) {
            var ret = val + '';

            if (len === 2 && ret.length !== 2) {
              return '0' + ret;
            }

            return ret;
          }
          /**
           * Returns the value of the Time Zone.
           * @param {number} tVal
           * @param {string} pattern
           * @private
           */

        }, {
          key: "getTimeZoneValue",
          value: function getTimeZoneValue(tVal, pattern) {
            var _this4 = this;

            var splt = pattern.split(';');
            var curPattern = splt[tVal > 0 ? 1 : 0];
            var no = Math.abs(tVal);
            return curPattern = curPattern.replace(/HH?|mm/g, function (str) {
              var len = str.length;
              var ishour = str.indexOf('H') !== -1;
              return _this4.checkTwodigitNumber(Math.floor(ishour ? no / 60 : no % 60), len);
            });
          }
        }]);

        return DateFormat;
      }();

      var errorText = {
        'ms': 'minimumSignificantDigits',
        'ls': 'maximumSignificantDigits',
        'mf': 'minimumFractionDigits',
        'lf': 'maximumFractionDigits'
      };
      var percentSign = 'percentSign';
      var minusSign = 'minusSign';
      var mapper$1 = ['infinity', 'nan', 'group', 'decimal', 'exponential'];
      /**
       * Module for number formatting.
       * @private
       */

      var NumberFormat = /*#__PURE__*/function () {
        function NumberFormat() {
          _classCallCheck2(this, NumberFormat);
        }

        _createClass2(NumberFormat, null, [{
          key: "numberFormatter",

          /**
           * Returns the formatter function for given skeleton.
           * @param {string} culture -  Specifies the culture name to be which formatting.
           * @param {NumberFormatOptions} option - Specific the format in which number  will format.
           * @param {Object} object- Specifies the global cldr data collection.
           * @return Function.
           */
          value: function numberFormatter(culture, option, cldr) {
            var _this5 = this;

            var fOptions = extend({}, option);
            var cOptions = {};
            var dOptions = {};
            var symbolPattern;
            var dependable = IntlBase.getDependables(cldr, culture, '', true);
            var numObject = dependable.numericObject;
            dOptions.numberMapper = isBlazor() ? extend({}, numObject) : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true);
            dOptions.currencySymbol = isBlazor() ? getValue('currencySymbol', numObject) : IntlBase.getCurrencySymbol(dependable.numericObject, fOptions.currency || defaultCurrencyCode, option.altSymbol);
            /* tslint:disable no-any */

            dOptions.percentSymbol = isBlazor() ? getValue('numberSymbols.percentSign', numObject) : dOptions.numberMapper.numberSymbols[percentSign];
            dOptions.minusSymbol = isBlazor() ? getValue('numberSymbols.minusSign', numObject) : dOptions.numberMapper.numberSymbols[minusSign];
            var symbols = dOptions.numberMapper.numberSymbols;

            if (option.format && !IntlBase.formatRegex.test(option.format)) {
              cOptions = IntlBase.customFormat(option.format, dOptions, dependable.numericObject);
            } else {
              extend(fOptions, IntlBase.getProperNumericSkeleton(option.format || 'N'));
              fOptions.isCurrency = fOptions.type === 'currency';
              fOptions.isPercent = fOptions.type === 'percent';

              if (!isBlazor()) {
                symbolPattern = IntlBase.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount);
              }

              fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, true);
              this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, false, true);

              if (!isUndefined(fOptions.fractionDigits)) {
                fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits;
              }

              if (isUndefined(fOptions.useGrouping)) {
                fOptions.useGrouping = true;
              }

              if (fOptions.isCurrency && !isBlazor()) {
                symbolPattern = symbolPattern.replace(/\u00A4/g, IntlBase.defaultCurrency);
              }

              if (!isBlazor()) {
                var split = symbolPattern.split(';');
                cOptions.nData = IntlBase.getFormatData(split[1] || '-' + split[0], true, dOptions.currencySymbol);
                cOptions.pData = IntlBase.getFormatData(split[0], false, dOptions.currencySymbol);

                if (fOptions.useGrouping) {
                  fOptions.groupSeparator = symbols[mapper$1[2]];
                  fOptions.groupData = this.getGroupingDetails(split[0]);
                }
              } else {
                cOptions.nData = extend({}, {}, getValue(fOptions.type + 'nData', numObject));
                cOptions.pData = extend({}, {}, getValue(fOptions.type + 'pData', numObject));

                if (fOptions.type === 'currency' && option.currency) {
                  IntlBase.replaceBlazorCurrency([cOptions.pData, cOptions.nData], dOptions.currencySymbol, option.currency);
                }
              }

              var minFrac = isUndefined(fOptions.minimumFractionDigits);

              if (minFrac) {
                fOptions.minimumFractionDigits = cOptions.nData.minimumFraction;
              }

              if (isUndefined(fOptions.maximumFractionDigits)) {
                var mval = cOptions.nData.maximumFraction;
                fOptions.maximumFractionDigits = isUndefined(mval) && fOptions.isPercent ? 0 : mval;
              }

              var mfrac = fOptions.minimumFractionDigits;
              var lfrac = fOptions.maximumFractionDigits;

              if (!isUndefined(mfrac) && !isUndefined(lfrac)) {
                if (mfrac > lfrac) {
                  fOptions.maximumFractionDigits = mfrac;
                }
              }
            }

            extend(cOptions.nData, fOptions);
            extend(cOptions.pData, fOptions);
            return function (value) {
              if (isNaN(value)) {
                return symbols[mapper$1[1]];
              } else if (!isFinite(value)) {
                return symbols[mapper$1[0]];
              }

              return _this5.intNumberFormatter(value, cOptions, dOptions);
            };
          }
          /**
           * Returns grouping details for the pattern provided
           * @param {string} pattern
           * @returns {GroupDetails}
           */

        }, {
          key: "getGroupingDetails",
          value: function getGroupingDetails(pattern) {
            var ret = {};
            var match = pattern.match(IntlBase.negativeDataRegex);

            if (match && match[4]) {
              var _pattern2 = match[4];

              var p = _pattern2.lastIndexOf(',');

              if (p !== -1) {
                var temp = _pattern2.split('.')[0];

                ret.primary = temp.length - p - 1;

                var s = _pattern2.lastIndexOf(',', p - 1);

                if (s !== -1) {
                  ret.secondary = p - 1 - s;
                }
              }
            }

            return ret;
          }
          /**
           * Returns if the provided integer range is valid.
           * @param {number} val1
           * @param {number} val2
           * @param {boolean} checkbothExist
           * @param {boolean} isFraction
           * @returns {boolean}
           */

        }, {
          key: "checkValueRange",
          value: function checkValueRange(val1, val2, checkbothExist, isFraction) {
            var decide = isFraction ? 'f' : 's';
            var dint = 0;
            var str1 = errorText['l' + decide];
            var str2 = errorText['m' + decide];

            if (!isUndefined(val1)) {
              this.checkRange(val1, str1, isFraction);
              dint++;
            }

            if (!isUndefined(val2)) {
              this.checkRange(val2, str2, isFraction);
              dint++;
            }

            if (dint === 2) {
              if (val1 < val2) {
                throwError(str2 + 'specified must be less than the' + str1);
              } else {
                return true;
              }
            } else if (checkbothExist && dint === 1) {
              throwError('Both' + str2 + 'and' + str2 + 'must be present');
            }

            return false;
          }
          /**
           * Check if the provided fraction range is valid
           * @param {number} val
           * @param {string} text
           * @param {boolean} isFraction
           * @returns {void}
           */

        }, {
          key: "checkRange",
          value: function checkRange(val, text, isFraction) {
            var range = isFraction ? [0, 20] : [1, 21];

            if (val < range[0] || val > range[1]) {
              throwError(text + 'value must be within the range' + range[0] + 'to' + range[1]);
            }
          }
          /**
           * Returns formatted numeric string for provided formatting options
           * @param {number} value
           * @param {base.GenericFormatOptions} fOptions
           * @param {CommonOptions} dOptions
           * @returns {string}
           */

        }, {
          key: "intNumberFormatter",
          value: function intNumberFormatter(value, fOptions, dOptions) {
            var curData;

            if (isUndefined(fOptions.nData.type)) {
              return undefined;
            } else {
              if (value < 0) {
                value = value * -1;
                curData = fOptions.nData;
              } else if (value === 0) {
                curData = fOptions.zeroData || fOptions.pData;
              } else {
                curData = fOptions.pData;
              }

              var fValue = '';

              if (curData.isPercent) {
                value = value * 100;
              }

              if (curData.groupOne) {
                fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits);
              } else {
                fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits);

                if (curData.minimumIntegerDigits) {
                  fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits);
                }
              }

              if (curData.type === 'scientific') {
                fValue = value.toExponential(curData.maximumFractionDigits);
                fValue = fValue.replace('e', dOptions.numberMapper.numberSymbols[mapper$1[4]]);
              }

              fValue = fValue.replace('.', dOptions.numberMapper.numberSymbols[mapper$1[3]]);

              if (curData.useGrouping) {
                fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ',', dOptions.numberMapper.numberSymbols[mapper$1[3]] || '.', curData.groupData.secondary);
              }

              fValue = ParserBase.convertValueParts(fValue, IntlBase.latnParseRegex, dOptions.numberMapper.mapper);

              if (curData.nlead === 'N/A') {
                return curData.nlead;
              } else {
                return curData.nlead + fValue + curData.nend;
              }
            }
          }
          /**
           * Returns significant digits processed numeric string
           * @param {number} value
           * @param {number} min
           * @param {number} max
           * @returns {string}
           */

        }, {
          key: "processSignificantDigits",
          value: function processSignificantDigits(value, min, max) {
            var temp = value + '';
            var tn;
            var length = temp.length;

            if (length < min) {
              return value.toPrecision(min);
            } else {
              temp = value.toPrecision(max);
              tn = +temp;
              return tn + '';
            }
          }
          /**
           * Returns grouped numeric string
           * @param {string} val
           * @param {number} level1
           * @param {string} sep
           * @param {string} decimalSymbol
           * @param {number} level2
           * @returns {string}
           */

        }, {
          key: "groupNumbers",
          value: function groupNumbers(val, level1, sep, decimalSymbol, level2) {
            var flag = !isNullOrUndefined(level2) && level2 !== 0;
            var split = val.split(decimalSymbol);
            var prefix = split[0];
            var length = prefix.length;
            var str = '';

            while (length > level1) {
              str = prefix.slice(length - level1, length) + (str.length ? sep + str : '');
              length -= level1;

              if (flag) {
                level1 = level2;
                flag = false;
              }
            }

            split[0] = prefix.slice(0, length) + (str.length ? sep : '') + str;
            return split.join(decimalSymbol);
          }
          /**
           * Returns fraction processed numeric string
           * @param {number} value
           * @param {number} min
           * @param {number} max
           * @returns {string}
           */

        }, {
          key: "processFraction",
          value: function processFraction(value, min, max) {
            var temp = (value + '').split('.')[1];
            var length = temp ? temp.length : 0;

            if (min && length < min) {
              var ret = '';

              if (length === 0) {
                ret = value.toFixed(min);
              } else {
                ret += value;

                for (var j = 0; j < min - length; j++) {
                  ret += '0';
                }

                return ret;
              }

              return value.toFixed(min);
            } else if (!isNullOrUndefined(max) && (length > max || max === 0)) {
              return value.toFixed(max);
            }

            return value + '';
          }
          /**
           * Returns integer processed numeric string
           * @param {string} value
           * @param {number} min
           * @returns {string}
           */

        }, {
          key: "processMinimumIntegers",
          value: function processMinimumIntegers(value, min) {
            var temp = value.split('.');
            var lead = temp[0];
            var len = lead.length;

            if (len < min) {
              for (var i = 0; i < min - len; i++) {
                lead = '0' + lead;
              }

              temp[0] = lead;
            }

            return temp.join('.');
          }
        }]);

        return NumberFormat;
      }();

      var standalone$1 = 'stand-alone';
      var latnRegex$1 = /^[0-9]*$/;
      var timeSetter$1 = {
        minute: 'setMinutes',
        hour: 'setHours',
        second: 'setSeconds',
        day: 'setDate',
        month: 'setMonth',
        milliseconds: 'setMilliseconds'
      };
      var month = 'months';
      /* tslint:disable no-any */

      /**
       * Date Parser.
       * @private
       */

      var DateParser = /*#__PURE__*/function () {
        function DateParser() {
          _classCallCheck2(this, DateParser);
        }

        _createClass2(DateParser, null, [{
          key: "dateParser",

          /**
           * Returns the parser function for given skeleton.
           * @param {string} -  Specifies the culture name to be which formatting.
           * @param {DateFormatOptions} - Specific the format in which string date  will be parsed.
           * @param {cldr} - Specifies the global cldr data collection.
           *  @return Function.
           */
          // tslint:disable-next-line:max-func-body-length
          value: function dateParser(culture, option, cldr) {
            var _this6 = this;

            var dependable = IntlBase.getDependables(cldr, culture, option.calendar); // tslint:disable-next-line

            var numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), false, isBlazor());
            var parseOptions = {};

            if (isBlazor() && option.isServerRendered) {
              option = IntlBase.compareBlazorDateFormats(option, culture);
            }

            var resPattern = option.format || IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');
            var regexString = '';
            var hourOnly;

            if (isUndefined(resPattern)) {
              throwError('Format options or type given must be invalid');
            } else {
              resPattern = IntlBase.ConvertDateToWeekFormat(resPattern);
              parseOptions = {
                isIslamic: IntlBase.islamicRegex.test(option.calendar),
                pattern: resPattern,
                evalposition: {}
              };
              var patternMatch = resPattern.match(IntlBase.dateParseRegex) || [];
              var length = patternMatch.length;
              var gmtCorrection = 0;
              var zCorrectTemp = 0;
              var isgmtTraversed = false;
              var nRegx = numOptions.numericRegex; // tslint:disable-next-line

              var numMapper = isBlazor() ? dependable.parserObject.numbers : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));

              for (var i = 0; i < length; i++) {
                var str = patternMatch[i];
                var len = str.length;

                var _char3 = str[0] === 'K' ? 'h' : str[0];

                var isNumber = void 0;
                var canUpdate = void 0; // tslint:disable-next-line

                var charKey = datePartMatcher[_char3];
                var optional = len === 2 ? '' : '?';

                if (isgmtTraversed) {
                  gmtCorrection = zCorrectTemp;
                  isgmtTraversed = false;
                }

                switch (_char3) {
                  case 'E':
                  case 'c':
                    // tslint:disable
                    var weekData = void 0;

                    if (isBlazor()) {
                      weekData = getValue('days.' + IntlBase.monthIndex[len], dependable.dateObject);
                    } else {
                      weekData = dependable.dateObject[IntlBase.days][standalone$1][IntlBase.monthIndex[len]];
                    }

                    var weekObject = ParserBase.reverseObject(weekData); // tslint:enable

                    regexString += '(' + Object.keys(weekObject).join('|') + ')';
                    break;

                  case 'M':
                  case 'L':
                  case 'd':
                  case 'm':
                  case 's':
                  case 'h':
                  case 'H':
                  case 'f':
                    canUpdate = true;

                    if ((_char3 === 'M' || _char3 === 'L') && len > 2) {
                      var monthData = void 0;

                      if (isBlazor()) {
                        /* tslint:disable no-any */
                        monthData = getValue('months.' + IntlBase.monthIndex[len], dependable.dateObject);
                      } else {
                        /* tslint:disable no-any */
                        monthData = dependable.dateObject[month][standalone$1][IntlBase.monthIndex[len]];
                      } // tslint:disable-next-line


                      parseOptions[charKey] = ParserBase.reverseObject(monthData);
                      /* tslint:disable no-any */

                      regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';
                    } else if (_char3 === 'f') {
                      if (len > 3) {
                        continue;
                      }

                      isNumber = true;
                      regexString += '(' + nRegx + nRegx + '?' + nRegx + '?' + ')';
                    } else {
                      isNumber = true;
                      regexString += '(' + nRegx + nRegx + optional + ')';
                    }

                    if (_char3 === 'h') {
                      parseOptions.hour12 = true;
                    }

                    break;

                  case 'W':
                    var opt = len === 1 ? '?' : '';
                    regexString += '(' + nRegx + opt + nRegx + ')';
                    break;

                  case 'y':
                    canUpdate = isNumber = true;

                    if (len === 2) {
                      regexString += '(' + nRegx + nRegx + ')';
                    } else {
                      regexString += '(' + nRegx + '{' + len + ',})';
                    }

                    break;

                  case 'a':
                    canUpdate = true;
                    var periodValur = isBlazor() ? getValue('dayPeriods', dependable.dateObject) : getValue('dayPeriods.format.wide', dependable.dateObject);
                    parseOptions[charKey] = ParserBase.reverseObject(periodValur);
                    regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';
                    break;

                  case 'G':
                    canUpdate = true;
                    var eText = len <= 3 ? 'eraAbbr' : len === 4 ? 'eraNames' : 'eraNarrow';
                    parseOptions[charKey] = ParserBase.reverseObject(isBlazor() ? getValue('eras', dependable.dateObject) : getValue('eras.' + eText, dependable.dateObject));
                    regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + '?)';
                    break;

                  case 'z':
                    var tval = new Date().getTimezoneOffset();
                    canUpdate = tval !== 0;
                    parseOptions[charKey] = getValue('dates.timeZoneNames', dependable.parserObject);
                    var tzone = parseOptions[charKey];
                    hourOnly = len < 4;
                    var hpattern = hourOnly ? '+H;-H' : tzone.hourFormat;
                    hpattern = hpattern.replace(/:/g, numMapper.timeSeparator);
                    regexString += '(' + this.parseTimeZoneRegx(hpattern, tzone, nRegx) + ')?';
                    isgmtTraversed = true;
                    zCorrectTemp = hourOnly ? 6 : 12;
                    break;

                  case '\'':
                    var iString = str.replace(/\'/g, '');
                    regexString += '(' + iString + ')?';
                    break;

                  default:
                    regexString += '([\\D])';
                    break;
                }

                if (canUpdate) {
                  parseOptions.evalposition[charKey] = {
                    isNumber: isNumber,
                    pos: i + 1 + gmtCorrection,
                    hourOnly: hourOnly
                  };
                }

                if (i === length - 1 && !isNullOrUndefined(regexString)) {
                  parseOptions.parserRegex = new RegExp('^' + regexString + '$', 'i');
                }
              }
            }

            return function (value) {
              var parsedDateParts = _this6.internalDateParse(value, parseOptions, numOptions);

              if (isNullOrUndefined(parsedDateParts) || !Object.keys(parsedDateParts).length) {
                return null;
              }

              if (parseOptions.isIslamic) {
                var dobj = {};
                var tYear = parsedDateParts.year;
                var tDate = parsedDateParts.day;
                var tMonth = parsedDateParts.month;
                var ystrig = tYear ? tYear + '' : '';
                var is2DigitYear = ystrig.length === 2;

                if (!tYear || !tMonth || !tDate || is2DigitYear) {
                  dobj = HijriParser.getHijriDate(new Date());
                }

                if (is2DigitYear) {
                  tYear = parseInt((dobj.year + '').slice(0, 2) + ystrig, 10);
                } // tslint:disable-next-line


                var dateObject = HijriParser.toGregorian(tYear || dobj.year, tMonth || dobj.month, tDate || dobj.date);
                parsedDateParts.year = dateObject.getFullYear();
                parsedDateParts.month = dateObject.getMonth() + 1;
                parsedDateParts.day = dateObject.getDate();
              }

              return _this6.getDateObject(parsedDateParts);
            };
          }
          /* tslint:disable */

          /**
           * Returns date object for provided date options
           * @param {DateParts} options
           * @param {Date} value
           * @returns {Date}
           */

        }, {
          key: "getDateObject",
          value: function getDateObject(options, value) {
            var res = value || new Date();
            res.setMilliseconds(0);
            var tKeys = ['hour', 'minute', 'second', 'milliseconds', 'month', 'day'];
            var y = options.year;
            var desig = options.designator;
            var tzone = options.timeZone;

            if (!isUndefined(y)) {
              var len = (y + '').length;

              if (len <= 2) {
                var century = Math.floor(res.getFullYear() / 100) * 100;
                y += century;
              }

              res.setFullYear(y);
            }

            for (var _i4 = 0, _tKeys = tKeys; _i4 < _tKeys.length; _i4++) {
              var key = _tKeys[_i4];
              var tValue = options[key];

              if (isUndefined(tValue) && key === "day") {
                res.setDate(1);
              }

              if (!isUndefined(tValue)) {
                if (key === 'month') {
                  tValue -= 1;

                  if (tValue < 0 || tValue > 11) {
                    return new Date('invalid');
                  }

                  var pDate = res.getDate();
                  res.setDate(1);
                  res[timeSetter$1[key]](tValue);
                  var lDate = new Date(res.getFullYear(), tValue + 1, 0).getDate();
                  res.setDate(pDate < lDate ? pDate : lDate);
                } else {
                  if (key === 'day') {
                    var lastDay = new Date(res.getFullYear(), res.getMonth() + 1, 0).getDate();

                    if (tValue < 1 || tValue > lastDay) {
                      return null;
                    }
                  }

                  res[timeSetter$1[key]](tValue);
                }
              }
            }

            if (!isUndefined(desig)) {
              var hour = res.getHours();

              if (desig === 'pm') {
                res.setHours(hour + (hour === 12 ? 0 : 12));
              } else if (hour === 12) {
                res.setHours(0);
              }
            }

            if (!isUndefined(tzone)) {
              var tzValue = tzone - res.getTimezoneOffset();

              if (tzValue !== 0) {
                res.setMinutes(res.getMinutes() + tzValue);
              }
            }

            return res;
          }
          /**
           * Returns date parsing options for provided value along with parse and numeric options
           * @param {string} value
           * @param {ParseOptions} parseOptions
           * @param {NumericOptions} num
           * @returns {DateParts}
           */

        }, {
          key: "internalDateParse",
          value: function internalDateParse(value, parseOptions, num) {
            var matches = value.match(parseOptions.parserRegex);
            var retOptions = {
              'hour': 0,
              'minute': 0,
              'second': 0
            };
            var nRegx = num.numericRegex;

            if (isNullOrUndefined(matches)) {
              return null;
            } else {
              var props = Object.keys(parseOptions.evalposition);

              for (var _i5 = 0, _props = props; _i5 < _props.length; _i5++) {
                var prop = _props[_i5];
                var curObject = parseOptions.evalposition[prop];
                var matchString = matches[curObject.pos];

                if (curObject.isNumber) {
                  retOptions[prop] = this.internalNumberParser(matchString, num);
                } else {
                  if (prop === 'timeZone' && !isUndefined(matchString)) {
                    var pos = curObject.pos;
                    var val = void 0;
                    var tmatch = matches[pos + 1];
                    var flag = !isUndefined(tmatch);

                    if (curObject.hourOnly) {
                      val = this.getZoneValue(flag, tmatch, matches[pos + 4], num) * 60;
                    } else {
                      val = this.getZoneValue(flag, tmatch, matches[pos + 7], num) * 60;
                      val += this.getZoneValue(flag, matches[pos + 4], matches[pos + 10], num);
                    }

                    if (!isNullOrUndefined(val)) {
                      retOptions[prop] = val;
                    }
                  } else {
                    matchString = prop === 'month' ? matchString[0].toUpperCase() + matchString.substring(1).toLowerCase() : matchString;
                    retOptions[prop] = parseOptions[prop][matchString];
                  }
                }
              }

              if (parseOptions.hour12) {
                retOptions.hour12 = true;
              }
            }

            return retOptions;
          }
          /**
           * Returns parsed number for provided Numeric string and Numeric Options
           * @param {string} value
           * @param {NumericOptions} option
           * @returns {number}
           */

        }, {
          key: "internalNumberParser",
          value: function internalNumberParser(value, option) {
            value = ParserBase.convertValueParts(value, option.numberParseRegex, option.numericPair);

            if (latnRegex$1.test(value)) {
              return +value;
            }

            return null;
          }
          /**
           * Returns parsed time zone RegExp for provided hour format and time zone
           * @param {string} hourFormat
           * @param {base.TimeZoneOptions} tZone
           * @param {string} nRegex
           * @returns {string}
           */

        }, {
          key: "parseTimeZoneRegx",
          value: function parseTimeZoneRegx(hourFormat, tZone, nRegex) {
            var pattern = tZone.gmtFormat;
            var ret;
            var cRegex = '(' + nRegex + ')' + '(' + nRegex + ')';
            var splitStr;
            ret = hourFormat.replace('+', '\\+');

            if (hourFormat.indexOf('HH') !== -1) {
              ret = ret.replace(/HH|mm/g, '(' + cRegex + ')');
            } else {
              ret = ret.replace(/H|m/g, '(' + cRegex + '?)');
            }

            splitStr = ret.split(';').map(function (str) {
              return pattern.replace('{0}', str);
            });
            ret = splitStr.join('|') + '|' + tZone.gmtZeroFormat;
            return ret;
          }
          /**
           * Returns zone based value.
           * @param {boolean} flag
           * @param {string} val1
           * @param {string} val2
           * @param {NumericOptions} num
           * @returns {number}
           */

        }, {
          key: "getZoneValue",
          value: function getZoneValue(flag, val1, val2, num) {
            var ival = flag ? val1 : val2;

            if (!ival) {
              return 0;
            }

            var value = this.internalNumberParser(ival, num);

            if (flag) {
              return -value;
            }

            return value;
          }
        }]);

        return DateParser;
      }();
      /* tslint:enable */


      var parseRegex = /^([^0-9]*)(([0-9,]*[0-9]+)(\.[0-9]+)?)([Ee][+-]?[0-9]+)?([^0-9]*)$/;
      var groupRegex = /,/g;
      var keys = ['minusSign', 'infinity'];
      /**
       * Module for Number Parser.
       * @private
       */

      var NumberParser = /*#__PURE__*/function () {
        function NumberParser() {
          _classCallCheck2(this, NumberParser);
        }

        _createClass2(NumberParser, null, [{
          key: "numberParser",

          /**
           * Returns the parser function for given skeleton.
           * @param {string} -  Specifies the culture name to be which formatting.
           * @param {NumberFormatOptions} - Specific the format in which number  will parsed.
           * @param {cldr} - Specifies the global cldr data collection.
           * @return Function.
           */
          value: function numberParser(culture, option, cldr) {
            var _this7 = this;

            var dependable = IntlBase.getDependables(cldr, culture, '', true);
            var parseOptions = {
              custom: true
            };
            var numOptions;

            if (IntlBase.formatRegex.test(option.format) || !option.format) {
              extend(parseOptions, IntlBase.getProperNumericSkeleton(option.format || 'N'));
              parseOptions.custom = false;
            } else {
              extend(parseOptions, IntlBase.customFormat(option.format, null, null));
            }

            var numbers = getValue('numbers', dependable.parserObject);
            numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true, isBlazor());
            parseOptions.symbolRegex = ParserBase.getSymbolRegex(Object.keys(numOptions.symbolMatch)); // tslint:disable-next-line:no-any

            parseOptions.infinity = numOptions.symbolNumberSystem[keys[1]];
            var symbolpattern;

            if (!isBlazor()) {
              symbolpattern = IntlBase.getSymbolPattern(parseOptions.type, numOptions.numberSystem, dependable.numericObject, parseOptions.isAccount);

              if (symbolpattern) {
                symbolpattern = symbolpattern.replace(/\u00A4/g, IntlBase.defaultCurrency);
                var split = symbolpattern.split(';');
                parseOptions.nData = IntlBase.getFormatData(split[1] || '-' + split[0], true, '');
                parseOptions.pData = IntlBase.getFormatData(split[0], true, '');
              }
            } else {
              parseOptions.nData = extend({}, {}, getValue(parseOptions.type + 'nData', numbers));
              parseOptions.pData = extend({}, {}, getValue(parseOptions.type + 'pData', numbers));

              if (parseOptions.type === 'currency' && option.currency) {
                IntlBase.replaceBlazorCurrency([parseOptions.pData, parseOptions.nData], getValue('currencySymbol', numbers), option.currency);
              }
            }

            return function (value) {
              return _this7.getParsedNumber(value, parseOptions, numOptions);
            };
          }
          /**
           * Returns parsed number for the provided formatting options
           * @param {string} value
           * @param {NumericParts} options
           * @param {NumericOptions} numOptions
           * @returns {number}
           */

        }, {
          key: "getParsedNumber",
          value: function getParsedNumber(value, options, numOptions) {
            var isNegative;
            var isPercent;
            var tempValue;
            var lead;
            var end;
            var ret;

            if (value.indexOf(options.infinity) !== -1) {
              return Infinity;
            } else {
              value = ParserBase.convertValueParts(value, options.symbolRegex, numOptions.symbolMatch);
              value = ParserBase.convertValueParts(value, numOptions.numberParseRegex, numOptions.numericPair);

              if (value.indexOf('.') === 0) {
                value = '0' + value;
              }

              var _matches = value.match(parseRegex);

              if (isNullOrUndefined(_matches)) {
                return NaN;
              }

              lead = _matches[1];
              tempValue = _matches[2];
              var exponent = _matches[5];
              end = _matches[6];
              isNegative = options.custom ? lead === options.nData.nlead && end === options.nData.nend : lead.indexOf(options.nData.nlead) !== -1 && end.indexOf(options.nData.nend) !== -1;
              isPercent = isNegative ? options.nData.isPercent : options.pData.isPercent;
              tempValue = tempValue.replace(groupRegex, '');

              if (exponent) {
                tempValue += exponent;
              }

              ret = +tempValue;

              if (options.type === 'percent' || isPercent) {
                ret = ret / 100;
              }

              if (options.custom || options.fractionDigits) {
                ret = parseFloat(ret.toFixed(options.custom ? isNegative ? options.nData.maximumFractionDigits : options.pData.maximumFractionDigits : options.fractionDigits));
              }

              if (isNegative) {
                ret *= -1;
              }

              return ret;
            }
          }
        }]);

        return NumberParser;
      }();

      var Observer = /*#__PURE__*/function () {
        function Observer(context) {
          _classCallCheck2(this, Observer);

          this.ranArray = [];
          this.boundedEvents = {};

          if (isNullOrUndefined(context)) {
            return;
          }

          this.context = context;
        }

        _createClass2(Observer, [{
          key: "on",

          /**
           * To attach handler for given property in current context.
           * @param {string} property - specifies the name of the event.
           * @param {Function} handler - Specifies the handler function to be called while event notified.
           * @param {Object} context - Specifies the context binded to the handler.
           * @param {string} id - specifies the random generated id.
           * @return {void}
           */
          value: function on(property, handler, context, id) {
            if (isNullOrUndefined(handler)) {
              return;
            }

            var cntxt = context || this.context;

            if (this.notExist(property)) {
              this.boundedEvents[property] = [{
                handler: handler,
                context: cntxt
              }];
              return;
            }

            if (!isNullOrUndefined(id)) {
              if (this.ranArray.indexOf(id) === -1) {
                this.ranArray.push(id);
                this.boundedEvents[property].push({
                  handler: handler,
                  context: cntxt,
                  id: id
                });
              }
            } else if (!this.isHandlerPresent(this.boundedEvents[property], handler)) {
              this.boundedEvents[property].push({
                handler: handler,
                context: cntxt
              });
            }
          }
          /**
           * To remove handlers from a event attached using on() function.
           * @param {string} eventName - specifies the name of the event.
           * @param {Function} handler - Optional argument specifies the handler function to be called while event notified.
           * @param {string} id - specifies the random generated id.
           * @return {void}
           */

        }, {
          key: "off",
          value: function off(property, handler, id) {
            if (this.notExist(property)) {
              return;
            }

            var curObject = getValue(property, this.boundedEvents);

            if (handler) {
              for (var i = 0; i < curObject.length; i++) {
                if (id) {
                  if (curObject[i].id === id) {
                    curObject.splice(i, 1);
                    var indexLocation = this.ranArray.indexOf(id);

                    if (indexLocation !== -1) {
                      this.ranArray.splice(indexLocation, 1);
                    }

                    break;
                  }
                } else if (handler === curObject[i].handler) {
                  curObject.splice(i, 1);
                  break;
                }
              }
            } else {
              delete this.boundedEvents[property];
            }
          }
          /**
           * To notify the handlers in the specified event.
           * @param {string} property - Specifies the event to be notify.
           * @param {Object} args - Additional parameters to pass while calling the handler.
           * @param {Function} successHandler - this function will invoke after event successfully triggered
           * @param {Function} errorHandler - this function will invoke after event if it was failure to call.
           * @return {void}
           */

        }, {
          key: "notify",
          value: function notify(property, argument, successHandler, errorHandler) {
            if (this.notExist(property)) {
              if (successHandler) {
                successHandler.call(this, argument);
              }

              return;
            }

            if (argument) {
              argument.name = property;
            }

            var blazor = 'Blazor';
            var curObject = getValue(property, this.boundedEvents).slice(0);

            if (window[blazor]) {
              return this.blazorCallback(curObject, argument, successHandler, errorHandler, 0);
            } else {
              var _iterator6 = _createForOfIteratorHelper(curObject),
                  _step6;

              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  var cur = _step6.value;
                  cur.handler.call(cur.context, argument);
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }

              if (successHandler) {
                successHandler.call(this, argument);
              }
            }
          }
        }, {
          key: "blazorCallback",
          value: function blazorCallback(objs, argument, successHandler, errorHandler, index) {
            var _this8 = this;

            var isTrigger = index === objs.length - 1;

            if (index < objs.length) {
              var obj = objs[index];
              var promise = obj.handler.call(obj.context, argument);

              if (promise && typeof promise.then === 'function') {
                if (!successHandler) {
                  return promise;
                }

                promise.then(function (data) {
                  data = typeof data === 'string' && _this8.isJson(data) ? JSON.parse(data, _this8.dateReviver) : data;
                  extend(argument, argument, data, true);

                  if (successHandler && isTrigger) {
                    successHandler.call(obj.context, argument);
                  } else {
                    return _this8.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);
                  }
                })["catch"](function (data) {
                  if (errorHandler) {
                    errorHandler.call(obj.context, typeof data === 'string' && _this8.isJson(data) ? JSON.parse(data, _this8.dateReviver) : data);
                  }
                });
              } else if (successHandler && isTrigger) {
                successHandler.call(obj.context, argument);
              } else {
                return this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);
              }
            }
          } // tslint:disable-next-line:no-any

        }, {
          key: "dateReviver",
          value: function dateReviver(key, value) {
            var dPattern = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/;

            if (isBlazor && typeof value === 'string' && value.match(dPattern) !== null) {
              return new Date(value);
            }

            return value;
          }
        }, {
          key: "isJson",
          value: function isJson(value) {
            try {
              JSON.parse(value);
            } catch (e) {
              return false;
            }

            return true;
          }
          /**
           * To destroy handlers in the event
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.boundedEvents = this.context = undefined;
          }
          /**
           * Returns if the property exists.
           */

        }, {
          key: "notExist",
          value: function notExist(prop) {
            return this.boundedEvents.hasOwnProperty(prop) === false || this.boundedEvents[prop].length <= 0;
          }
          /**
           * Returns if the handler is present.
           */

        }, {
          key: "isHandlerPresent",
          value: function isHandlerPresent(boundedEvents, handler) {
            var _iterator7 = _createForOfIteratorHelper(boundedEvents),
                _step7;

            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var cur = _step7.value;

                if (cur.handler === handler) {
                  return true;
                }
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }

            return false;
          }
        }]);

        return Observer;
      }();
      /**
       * Specifies the observer used for external change detection.
       */


      var onIntlChange = new Observer();
      /**
       * Specifies the default rtl status for EJ2 components.
       */

      var rightToLeft = false;
      /**
       * Specifies the CLDR data loaded for internationalization functionalities.
       * @private
       */

      var cldrData = {};
      /**
       * Specifies the default culture value to be considered.
       * @private
       */

      var defaultCulture = 'en-US';
      /**
       * Specifies default currency code to be considered
       * @private
       */

      var defaultCurrencyCode = 'USD';
      var mapper = ['numericObject', 'dateObject'];
      /**
       * Internationalization class provides support to parse and format the number and date object to the desired format.
       * ```typescript
       * // To set the culture globally
       * setCulture('en-GB');
       *
       * // To set currency code globally
       * setCurrencyCode('EUR');
       *
       * //Load cldr data
       * loadCldr(gregorainData);
       * loadCldr(timeZoneData);
       * loadCldr(numbersData);
       * loadCldr(numberSystemData);
       *
       * // To use formatter in component side
       * let Intl:Internationalization = new Internationalization();
       *
       * // Date formatting
       * let dateFormatter: Function = Intl.getDateFormat({skeleton:'long',type:'dateTime'});
       * dateFormatter(new Date('11/2/2016'));
       * dateFormatter(new Date('25/2/2030'));
       * Intl.formatDate(new Date(),{skeleton:'E'});
       *
       * //Number formatting
       * let numberFormatter: Function = Intl.getNumberFormat({skeleton:'C5'})
       * numberFormatter(24563334);
       * Intl.formatNumber(123123,{skeleton:'p2'});
       *
       * // Date parser
       * let dateParser: Function = Intl.getDateParser({skeleton:'short',type:'time'});
       * dateParser('10:30 PM');
       * Intl.parseDate('10',{skeleton:'H'});
       * ```
       */

      var Internationalization = /*#__PURE__*/function () {
        function Internationalization(cultureName) {
          _classCallCheck2(this, Internationalization);

          if (cultureName) {
            this.culture = cultureName;
          }
        }
        /**
         * Returns the format function for given options.
         * @param {DateFormatOptions} options - Specifies the format options in which the format function will return.
         * @returns {Function}
         */


        _createClass2(Internationalization, [{
          key: "getDateFormat",
          value: function getDateFormat(options) {
            return DateFormat.dateFormat(this.getCulture(), options || {
              type: 'date',
              skeleton: 'short'
            }, cldrData);
          }
          /**
           * Returns the format function for given options.
           * @param {NumberFormatOptions} options - Specifies the format options in which the format function will return.
           * @returns {Function}
           */

        }, {
          key: "getNumberFormat",
          value: function getNumberFormat(options) {
            if (options && !options.currency) {
              options.currency = defaultCurrencyCode;
            }

            if (isBlazor() && options && !options.format) {
              options.minimumFractionDigits = 0;
            }

            return NumberFormat.numberFormatter(this.getCulture(), options || {}, cldrData);
          }
          /**
           * Returns the parser function for given options.
           * @param {DateFormatOptions} options - Specifies the format options in which the parser function will return.
           * @returns {Function}
           */

        }, {
          key: "getDateParser",
          value: function getDateParser(options) {
            return DateParser.dateParser(this.getCulture(), options || {
              skeleton: 'short',
              type: 'date'
            }, cldrData);
          }
          /**
           * Returns the parser function for given options.
           * @param {NumberFormatOptions} options - Specifies the format options in which the parser function will return.
           * @returns {Function}
           */

        }, {
          key: "getNumberParser",
          value: function getNumberParser(options) {
            if (isBlazor() && options && !options.format) {
              options.minimumFractionDigits = 0;
            }

            return NumberParser.numberParser(this.getCulture(), options || {
              format: 'N'
            }, cldrData);
          }
          /**
           * Returns the formatted string based on format options.
           * @param {Number} value - Specifies the number to format.
           * @param {NumberFormatOptions} option - Specifies the format options in which the number will be formatted.
           * @returns {string}
           */

        }, {
          key: "formatNumber",
          value: function formatNumber(value, option) {
            return this.getNumberFormat(option)(value);
          }
          /**
           * Returns the formatted date string based on format options.
           * @param {Number} value - Specifies the number to format.
           * @param {DateFormatOptions} option - Specifies the format options in which the number will be formatted.
           * @returns {string}
           */

        }, {
          key: "formatDate",
          value: function formatDate(value, option) {
            return this.getDateFormat(option)(value);
          }
          /**
           * Returns the date object for given date string and options.
           * @param {string} value - Specifies the string to parse.
           * @param {DateFormatOptions} option - Specifies the parse options in which the date string will be parsed.
           * @returns {Date}
           */

        }, {
          key: "parseDate",
          value: function parseDate(value, option) {
            return this.getDateParser(option)(value);
          }
          /**
           * Returns the number object from the given string value and options.
           * @param {string} value - Specifies the string to parse.
           * @param {NumberFormatOptions} option - Specifies the parse options in which the  string number  will be parsed.
           * @returns {number}
           */

        }, {
          key: "parseNumber",
          value: function parseNumber(value, option) {
            return this.getNumberParser(option)(value);
          }
          /**
           * Returns Native Date Time Pattern
           * @param {DateFormatOptions} option - Specifies the parse options for resultant date time pattern.
           * @param {boolean} isExcelFormat - Specifies format value to be converted to excel pattern.
           * @returns {string}
           * @private
           */

        }, {
          key: "getDatePattern",
          value: function getDatePattern(option, isExcelFormat) {
            return IntlBase.getActualDateTimeFormat(this.getCulture(), option, cldrData, isExcelFormat);
          }
          /**
           * Returns Native Number Pattern
           * @param {NumberFormatOptions} option - Specifies the parse options for resultant number pattern.
           * @returns {string}
           * @private
           */

        }, {
          key: "getNumberPattern",
          value: function getNumberPattern(option, isExcel) {
            return IntlBase.getActualNumberFormat(this.getCulture(), option, cldrData, isExcel);
          }
          /**
           * Returns the First Day of the Week
           * @returns {number}
           */

        }, {
          key: "getFirstDayOfWeek",
          value: function getFirstDayOfWeek() {
            return IntlBase.getWeekData(this.getCulture(), cldrData);
          }
        }, {
          key: "getCulture",
          value: function getCulture() {
            return this.culture || defaultCulture;
          }
        }]);

        return Internationalization;
      }();
      /**
       * Set the default culture to all EJ2 components
       * @param {string} cultureName - Specifies the culture name to be set as default culture.
       */


      function setCulture(cultureName) {
        defaultCulture = cultureName;
        onIntlChange.notify('notifyExternalChange', {
          'locale': defaultCulture
        });
      }
      /**
       * Set the default currency code to all EJ2 components
       * @param {string} currencyCode Specifies the culture name to be set as default culture.
       * @returns {void}
       */


      function setCurrencyCode(currencyCode) {
        defaultCurrencyCode = currencyCode;
        onIntlChange.notify('notifyExternalChange', {
          'currencyCode': defaultCurrencyCode
        });
      }
      /**
       * Load the CLDR data into context
       * @param {Object[]} obj Specifies the CLDR data's to be used for formatting and parser.
       * @returns {void}
       */


      function loadCldr() {
        for (var _len2 = arguments.length, data = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          data[_key2] = arguments[_key2];
        }

        for (var _i6 = 0, _data = data; _i6 < _data.length; _i6++) {
          var obj = _data[_i6];
          extend(cldrData, obj, {}, true);
        }
      }
      /**
       * To enable or disable RTL functionality for all components globally.
       * @param {boolean} status - Optional argument Specifies the status value to enable or disable rtl option.
       * @returns {void}
       */


      function enableRtl() {
        var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        rightToLeft = status;
        onIntlChange.notify('notifyExternalChange', {
          enableRtl: rightToLeft
        });
      }
      /**
       * To get the numeric CLDR object for given culture
       * @param {string} locale - Specifies the locale for which numericObject to be returned.
       * @ignore
       * @private
       */


      function getNumericObject(locale, type) {
        /* tslint:disable no-any */
        var numObject = IntlBase.getDependables(cldrData, locale, '', true)[mapper[0]];
        var dateObject = IntlBase.getDependables(cldrData, locale, '')[mapper[1]];
        var numSystem = getValue('defaultNumberingSystem', numObject);
        var symbPattern = isBlazor() ? getValue('numberSymbols', numObject) : getValue('symbols-numberSystem-' + numSystem, numObject);
        var pattern = IntlBase.getSymbolPattern(type || 'decimal', numSystem, numObject, false);
        return extend(symbPattern, IntlBase.getFormatData(pattern, true, '', true), {
          'dateSeparator': IntlBase.getDateSeparator(dateObject)
        });
      }
      /**
       * To get the numeric CLDR  number base object for given culture
       * @param {string} locale - Specifies the locale for which numericObject to be returned.
       * @param {string} currency - Specifies the currency for which numericObject to be returned.
       * @ignore
       * @private
       */


      function getNumberDependable(locale, currency) {
        var numObject = IntlBase.getDependables(cldrData, locale, '', true);
        return IntlBase.getCurrencySymbol(numObject.numericObject, currency);
      }
      /**
       * To get the default date CLDR object.
       * @ignore
       * @private
       */


      function getDefaultDateObject(mode) {
        return IntlBase.getDependables(cldrData, '', mode, false)[mapper[1]];
      }

      var blazorCultureFormats = {
        'en-US': {
          'd': 'M/d/y',
          'D': 'EEEE, MMMM d, y',
          'f': 'EEEE, MMMM d, y h:mm a',
          'F': 'EEEE, MMMM d, y h:mm:s a',
          'g': 'M/d/y h:mm a',
          'G': 'M/d/yyyy h:mm:ss tt',
          'm': 'MMMM d',
          'M': 'MMMM d',
          'r': 'ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'',
          'R': 'ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'',
          's': 'yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss',
          't': 'h:mm tt',
          'T': 'h:m:s tt',
          'u': 'yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'',
          'U': 'dddd, MMMM d, yyyy h:mm:ss tt',
          'y': 'MMMM yyyy',
          'Y': 'MMMM yyyy'
        }
      };
      /**
       * Date base common constants and function for date parser and formatter.
       */

      var IntlBase;

      (function (IntlBase) {
        // tslint:disable-next-line:max-line-length
        IntlBase.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\*.)?((([#,]*[0,]*0+)(\.0*[0-9]*#*)?)|([#,]*@+#*))(E\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;
        IntlBase.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\*.)?((([0#,]*[0,]*[0#]*)(\.[0#]*)?)|([#,]*@+#*))(E\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;
        IntlBase.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;
        var fractionRegex = /[0-9]/g;
        IntlBase.defaultCurrency = '$';
        var mapper = ['infinity', 'nan', 'group', 'decimal'];
        var patternRegex = /G|M|L|H|c|'| a|yy|y|EEEE|E/g;
        var patternMatch = {
          'G': '',
          'M': 'm',
          'L': 'm',
          'H': 'h',
          'c': 'd',
          '\'': '"',
          ' a': ' AM/PM',
          'yy': 'yy',
          'y': 'yyyy',
          'EEEE': 'dddd',
          'E': 'ddd'
        };
        IntlBase.dateConverterMapper = /dddd|ddd/ig;
        var defaultFirstDay = 'sun';
        IntlBase.islamicRegex = /^islamic/;
        var firstDayMapper = {
          'sun': 0,
          'mon': 1,
          'tue': 2,
          'wed': 3,
          'thu': 4,
          'fri': 5,
          'sat': 6
        };
        IntlBase.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;
        IntlBase.currencyFormatRegex = /(^[ca]{1})([0-1]?[0-9]|20)?$/i;
        IntlBase.curWithoutNumberRegex = /(c|a)$/ig;
        var typeMapper = {
          '$': 'isCurrency',
          '%': 'isPercent',
          '-': 'isNegative',
          0: 'nlead',
          1: 'nend'
        };
        IntlBase.dateParseRegex = /([a-z])\1*|'([^']|'')+'|''|./gi;
        IntlBase.basicPatterns = ['short', 'medium', 'long', 'full'];
        /* tslint:disable:quotemark */

        IntlBase.defaultObject = {
          'dates': {
            'calendars': {
              'gregorian': {
                'months': {
                  'stand-alone': {
                    'abbreviated': {
                      '1': 'Jan',
                      '2': 'Feb',
                      '3': 'Mar',
                      '4': 'Apr',
                      '5': 'May',
                      '6': 'Jun',
                      '7': 'Jul',
                      '8': 'Aug',
                      '9': 'Sep',
                      '10': 'Oct',
                      '11': 'Nov',
                      '12': 'Dec'
                    },
                    'narrow': {
                      '1': 'J',
                      '2': 'F',
                      '3': 'M',
                      '4': 'A',
                      '5': 'M',
                      '6': 'J',
                      '7': 'J',
                      '8': 'A',
                      '9': 'S',
                      '10': 'O',
                      '11': 'N',
                      '12': 'D'
                    },
                    'wide': {
                      '1': 'January',
                      '2': 'February',
                      '3': 'March',
                      '4': 'April',
                      '5': 'May',
                      '6': 'June',
                      '7': 'July',
                      '8': 'August',
                      '9': 'September',
                      '10': 'October',
                      '11': 'November',
                      '12': 'December'
                    }
                  }
                },
                "days": {
                  "stand-alone": {
                    "abbreviated": {
                      "sun": "Sun",
                      "mon": "Mon",
                      "tue": "Tue",
                      "wed": "Wed",
                      "thu": "Thu",
                      "fri": "Fri",
                      "sat": "Sat"
                    },
                    "narrow": {
                      "sun": "S",
                      "mon": "M",
                      "tue": "T",
                      "wed": "W",
                      "thu": "T",
                      "fri": "F",
                      "sat": "S"
                    },
                    "short": {
                      "sun": "Su",
                      "mon": "Mo",
                      "tue": "Tu",
                      "wed": "We",
                      "thu": "Th",
                      "fri": "Fr",
                      "sat": "Sa"
                    },
                    "wide": {
                      "sun": "Sunday",
                      "mon": "Monday",
                      "tue": "Tuesday",
                      "wed": "Wednesday",
                      "thu": "Thursday",
                      "fri": "Friday",
                      "sat": "Saturday"
                    }
                  }
                },
                "dayPeriods": {
                  "format": {
                    "wide": {
                      "am": "AM",
                      "pm": "PM"
                    }
                  }
                },
                'eras': {
                  'eraNames': {
                    '0': 'Before Christ',
                    '0-alt-variant': 'Before Common Era',
                    '1': 'Anno Domini',
                    "1-alt-variant": "Common Era"
                  },
                  'eraAbbr': {
                    '0': 'BC',
                    '0-alt-variant': 'BCE',
                    '1': 'AD',
                    '1-alt-variant': 'CE'
                  },
                  'eraNarrow': {
                    '0': 'B',
                    '0-alt-variant': 'BCE',
                    '1': 'A',
                    '1-alt-variant': 'CE'
                  }
                },
                'dateFormats': {
                  'full': 'EEEE, MMMM d, y',
                  'long': 'MMMM d, y',
                  'medium': 'MMM d, y',
                  'short': 'M/d/yy'
                },
                'timeFormats': {
                  'full': 'h:mm:ss a zzzz',
                  'long': 'h:mm:ss a z',
                  'medium': 'h:mm:ss a',
                  'short': 'h:mm a'
                },
                'dateTimeFormats': {
                  'full': "{1} 'at' {0}",
                  'long': "{1} 'at' {0}",
                  'medium': '{1}, {0}',
                  'short': '{1}, {0}',
                  'availableFormats': {
                    'd': 'd',
                    'E': 'ccc',
                    'Ed': 'd E',
                    'Ehm': 'E h:mm a',
                    'EHm': 'E HH:mm',
                    'Ehms': 'E h:mm:ss a',
                    'EHms': 'E HH:mm:ss',
                    'Gy': 'y G',
                    'GyMMM': 'MMM y G',
                    'GyMMMd': 'MMM d, y G',
                    'GyMMMEd': 'E, MMM d, y G',
                    'h': 'h a',
                    'H': 'HH',
                    'hm': 'h:mm a',
                    'Hm': 'HH:mm',
                    'hms': 'h:mm:ss a',
                    'Hms': 'HH:mm:ss',
                    'hmsv': 'h:mm:ss a v',
                    'Hmsv': 'HH:mm:ss v',
                    'hmv': 'h:mm a v',
                    'Hmv': 'HH:mm v',
                    'M': 'L',
                    'Md': 'M/d',
                    'MEd': 'E, M/d',
                    'MMM': 'LLL',
                    'MMMd': 'MMM d',
                    'MMMEd': 'E, MMM d',
                    'MMMMd': 'MMMM d',
                    'ms': 'mm:ss',
                    'y': 'y',
                    'yM': 'M/y',
                    'yMd': 'M/d/y',
                    'yMEd': 'E, M/d/y',
                    'yMMM': 'MMM y',
                    'yMMMd': 'MMM d, y',
                    'yMMMEd': 'E, MMM d, y',
                    'yMMMM': 'MMMM y'
                  }
                }
              },
              "islamic": {
                "months": {
                  "stand-alone": {
                    "abbreviated": {
                      "1": "Muh.",
                      "2": "Saf.",
                      "3": "Rab. I",
                      "4": "Rab. II",
                      "5": "Jum. I",
                      "6": "Jum. II",
                      "7": "Raj.",
                      "8": "Sha.",
                      "9": "Ram.",
                      "10": "Shaw.",
                      "11": "Dhuʻl-Q.",
                      "12": "Dhuʻl-H."
                    },
                    "narrow": {
                      "1": "1",
                      "2": "2",
                      "3": "3",
                      "4": "4",
                      "5": "5",
                      "6": "6",
                      "7": "7",
                      "8": "8",
                      "9": "9",
                      "10": "10",
                      "11": "11",
                      "12": "12"
                    },
                    "wide": {
                      "1": "Muharram",
                      "2": "Safar",
                      "3": "Rabiʻ I",
                      "4": "Rabiʻ II",
                      "5": "Jumada I",
                      "6": "Jumada II",
                      "7": "Rajab",
                      "8": "Shaʻban",
                      "9": "Ramadan",
                      "10": "Shawwal",
                      "11": "Dhuʻl-Qiʻdah",
                      "12": "Dhuʻl-Hijjah"
                    }
                  }
                },
                "days": {
                  "stand-alone": {
                    "abbreviated": {
                      "sun": "Sun",
                      "mon": "Mon",
                      "tue": "Tue",
                      "wed": "Wed",
                      "thu": "Thu",
                      "fri": "Fri",
                      "sat": "Sat"
                    },
                    "narrow": {
                      "sun": "S",
                      "mon": "M",
                      "tue": "T",
                      "wed": "W",
                      "thu": "T",
                      "fri": "F",
                      "sat": "S"
                    },
                    "short": {
                      "sun": "Su",
                      "mon": "Mo",
                      "tue": "Tu",
                      "wed": "We",
                      "thu": "Th",
                      "fri": "Fr",
                      "sat": "Sa"
                    },
                    "wide": {
                      "sun": "Sunday",
                      "mon": "Monday",
                      "tue": "Tuesday",
                      "wed": "Wednesday",
                      "thu": "Thursday",
                      "fri": "Friday",
                      "sat": "Saturday"
                    }
                  }
                },
                "dayPeriods": {
                  "format": {
                    "wide": {
                      "am": "AM",
                      "pm": "PM"
                    }
                  }
                },
                "eras": {
                  "eraNames": {
                    "0": "AH"
                  },
                  "eraAbbr": {
                    "0": "AH"
                  },
                  "eraNarrow": {
                    "0": "AH"
                  }
                },
                "dateFormats": {
                  "full": "EEEE, MMMM d, y G",
                  "long": "MMMM d, y G",
                  "medium": "MMM d, y G",
                  "short": "M/d/y GGGGG"
                },
                "timeFormats": {
                  "full": "h:mm:ss a zzzz",
                  "long": "h:mm:ss a z",
                  "medium": "h:mm:ss a",
                  "short": "h:mm a"
                },
                "dateTimeFormats": {
                  "full": "{1} 'at' {0}",
                  "long": "{1} 'at' {0}",
                  "medium": "{1}, {0}",
                  "short": "{1}, {0}",
                  "availableFormats": {
                    "d": "d",
                    "E": "ccc",
                    "Ed": "d E",
                    "Ehm": "E h:mm a",
                    "EHm": "E HH:mm",
                    "Ehms": "E h:mm:ss a",
                    "EHms": "E HH:mm:ss",
                    "Gy": "y G",
                    "GyMMM": "MMM y G",
                    "GyMMMd": "MMM d, y G",
                    "GyMMMEd": "E, MMM d, y G",
                    "h": "h a",
                    "H": "HH",
                    "hm": "h:mm a",
                    "Hm": "HH:mm",
                    "hms": "h:mm:ss a",
                    "Hms": "HH:mm:ss",
                    "M": "L",
                    "Md": "M/d",
                    "MEd": "E, M/d",
                    "MMM": "LLL",
                    "MMMd": "MMM d",
                    "MMMEd": "E, MMM d",
                    "MMMMd": "MMMM d",
                    "ms": "mm:ss",
                    "y": "y G",
                    "yyyy": "y G",
                    "yyyyM": "M/y GGGGG",
                    "yyyyMd": "M/d/y GGGGG",
                    "yyyyMEd": "E, M/d/y GGGGG",
                    "yyyyMMM": "MMM y G",
                    "yyyyMMMd": "MMM d, y G",
                    "yyyyMMMEd": "E, MMM d, y G",
                    "yyyyMMMM": "MMMM y G",
                    "yyyyQQQ": "QQQ y G",
                    "yyyyQQQQ": "QQQQ y G"
                  }
                }
              }
            },
            'timeZoneNames': {
              "hourFormat": "+HH:mm;-HH:mm",
              "gmtFormat": "GMT{0}",
              "gmtZeroFormat": "GMT"
            }
          },
          'numbers': {
            'currencies': {
              'USD': {
                'displayName': 'US Dollar',
                'symbol': '$',
                'symbol-alt-narrow': '$'
              },
              'EUR': {
                'displayName': 'Euro',
                'symbol': '€',
                'symbol-alt-narrow': '€'
              },
              'GBP': {
                'displayName': 'British Pound',
                'symbol-alt-narrow': '£'
              }
            },
            'defaultNumberingSystem': 'latn',
            'minimumGroupingDigits': '1',
            'symbols-numberSystem-latn': {
              'decimal': '.',
              'group': ',',
              'list': ';',
              'percentSign': '%',
              'plusSign': '+',
              'minusSign': '-',
              'exponential': 'E',
              'superscriptingExponent': '×',
              'perMille': '‰',
              'infinity': '∞',
              'nan': 'NaN',
              'timeSeparator': ':'
            },
            'decimalFormats-numberSystem-latn': {
              'standard': '#,##0.###'
            },
            'percentFormats-numberSystem-latn': {
              'standard': '#,##0%'
            },
            'currencyFormats-numberSystem-latn': {
              'standard': '¤#,##0.00',
              'accounting': '¤#,##0.00;(¤#,##0.00)'
            },
            'scientificFormats-numberSystem-latn': {
              'standard': '#E0'
            }
          }
        };
        IntlBase.blazorDefaultObject = {
          "numbers": {
            "mapper": {
              "0": "0",
              "1": "1",
              "2": "2",
              "3": "3",
              "4": "4",
              "5": "5",
              "6": "6",
              "7": "7",
              "8": "8",
              "9": "9"
            },
            "mapperDigits": "0123456789",
            "numberSymbols": {
              "decimal": ".",
              "group": ",",
              "plusSign": "+",
              "minusSign": "-",
              "percentSign": "%",
              "nan": "NaN",
              "timeSeparator": ":",
              "infinity": "∞"
            },
            "timeSeparator": ":",
            "currencySymbol": "$",
            "currencypData": {
              "nlead": "$",
              "nend": "",
              "groupSeparator": ",",
              "groupData": {
                "primary": 3
              },
              "maximumFraction": 2,
              "minimumFraction": 2
            },
            "percentpData": {
              "nlead": "",
              "nend": "%",
              "groupSeparator": ",",
              "groupData": {
                "primary": 3
              },
              "maximumFraction": 2,
              "minimumFraction": 2
            },
            "percentnData": {
              "nlead": "-",
              "nend": "%",
              "groupSeparator": ",",
              "groupData": {
                "primary": 3
              },
              "maximumFraction": 2,
              "minimumFraction": 2
            },
            "currencynData": {
              "nlead": "($",
              "nend": ")",
              "groupSeparator": ",",
              "groupData": {
                "primary": 3
              },
              "maximumFraction": 2,
              "minimumFraction": 2
            },
            "decimalnData": {
              "nlead": "-",
              "nend": "",
              "groupData": {
                "primary": 3
              },
              "maximumFraction": 2,
              "minimumFraction": 2
            },
            "decimalpData": {
              "nlead": "",
              "nend": "",
              "groupData": {
                "primary": 3
              },
              "maximumFraction": 2,
              "minimumFraction": 2
            }
          },
          "dates": {
            "dayPeriods": {
              "am": "AM",
              "pm": "PM"
            },
            "dateSeperator": "/",
            "days": {
              "abbreviated": {
                "sun": "Sun",
                "mon": "Mon",
                "tue": "Tue",
                "wed": "Wed",
                "thu": "Thu",
                "fri": "Fri",
                "sat": "Sat"
              },
              "short": {
                "sun": "Su",
                "mon": "Mo",
                "tue": "Tu",
                "wed": "We",
                "thu": "Th",
                "fri": "Fr",
                "sat": "Sa"
              },
              "wide": {
                "sun": "Sunday",
                "mon": "Monday",
                "tue": "Tuesday",
                "wed": "Wednesday",
                "thu": "Thursday",
                "fri": "Friday",
                "sat": "Saturday"
              }
            },
            "months": {
              "abbreviated": {
                "1": "Jan",
                "2": "Feb",
                "3": "Mar",
                "4": "Apr",
                "5": "May",
                "6": "Jun",
                "7": "Jul",
                "8": "Aug",
                "9": "Sep",
                "10": "Oct",
                "11": "Nov",
                "12": "Dec"
              },
              "wide": {
                "1": "January",
                "2": "February",
                "3": "March",
                "4": "April",
                "5": "May",
                "6": "June",
                "7": "July",
                "8": "August",
                "9": "September",
                "10": "October",
                "11": "November",
                "12": "December"
              }
            },
            "eras": {
              "1": "AD"
            }
          }
        };
        /* tslint:enable:quotemark */

        IntlBase.monthIndex = {
          3: 'abbreviated',
          4: 'wide',
          5: 'narrow',
          1: 'abbreviated'
        };
        /**
         *
         */

        IntlBase.month = 'months';
        IntlBase.days = 'days';
        /**
         * Default numerber Object
         */

        IntlBase.patternMatcher = {
          C: 'currency',
          P: 'percent',
          N: 'decimal',
          A: 'currency',
          E: 'scientific'
        };
        /**
         * Returns the resultant pattern based on the skeleton, dateObject and the type provided
         * @private
         * @param {string} skeleton
         * @param {Object} dateObject
         * @param {string} type
         * @returns {string}
         */

        function getResultantPattern(skeleton, dateObject, type, isIslamic, blazorCulture) {
          var resPattern;
          var iType = type || 'date';

          if (blazorCulture) {
            resPattern = compareBlazorDateFormats({
              skeleton: skeleton
            }, blazorCulture).format || compareBlazorDateFormats({
              skeleton: 'd'
            }, 'en-US').format;
          } else {
            if (IntlBase.basicPatterns.indexOf(skeleton) !== -1) {
              resPattern = getValue(iType + 'Formats.' + skeleton, dateObject);

              if (iType === 'dateTime') {
                var dPattern = getValue('dateFormats.' + skeleton, dateObject);
                var tPattern = getValue('timeFormats.' + skeleton, dateObject);
                resPattern = resPattern.replace('{1}', dPattern).replace('{0}', tPattern);
              }
            } else {
              resPattern = getValue('dateTimeFormats.availableFormats.' + skeleton, dateObject);
            }

            if (isUndefined(resPattern) && skeleton === 'yMd') {
              resPattern = 'M/d/y';
            }
          }

          return resPattern;
        }

        IntlBase.getResultantPattern = getResultantPattern;
        /**
         * Returns the dependable object for provided cldr data and culture
         * @private
         * @param {Object} cldr
         * @param {string} culture
         * @param {boolean} isNumber
         * @returns {Dependables}
         */

        function getDependables(cldr, culture, mode, isNumber) {
          var ret = {};
          var calendartype = mode || 'gregorian';
          ret.parserObject = ParserBase.getMainObject(cldr, culture) || (isBlazor() ? IntlBase.blazorDefaultObject : IntlBase.defaultObject);

          if (isNumber) {
            ret.numericObject = getValue('numbers', ret.parserObject);
          } else {
            var dateString = isBlazor() ? 'dates' : 'dates.calendars.' + calendartype;
            ret.dateObject = getValue(dateString, ret.parserObject);
          }

          return ret;
        }

        IntlBase.getDependables = getDependables;
        /**
         * Returns the symbol pattern for provided parameters
         * @private
         * @param {string} type
         * @param {string} numSystem
         * @param {Object} obj
         * @param {boolean} isAccount
         * @returns {string}
         */

        function getSymbolPattern(type, numSystem, obj, isAccount) {
          return getValue(type + 'Formats-numberSystem-' + numSystem + (isAccount ? '.accounting' : '.standard'), obj) || (isAccount ? getValue(type + 'Formats-numberSystem-' + numSystem + '.standard', obj) : '');
        }

        IntlBase.getSymbolPattern = getSymbolPattern;

        function ConvertDateToWeekFormat(format) {
          var convertMapper = format.match(IntlBase.dateConverterMapper);

          if (convertMapper && isBlazor()) {
            var tempString = convertMapper[0].length === 3 ? 'EEE' : 'EEEE';
            return format.replace(IntlBase.dateConverterMapper, tempString);
          }

          return format;
        }

        IntlBase.ConvertDateToWeekFormat = ConvertDateToWeekFormat;

        function compareBlazorDateFormats(formatOptions, culture) {
          var format = formatOptions.format || formatOptions.skeleton;
          var curFormatMapper = getValue((culture || 'en-US') + '.' + format, blazorCultureFormats);

          if (!curFormatMapper) {
            curFormatMapper = getValue('en-US.' + format, blazorCultureFormats);
          }

          if (curFormatMapper) {
            curFormatMapper = ConvertDateToWeekFormat(curFormatMapper);
            formatOptions.format = curFormatMapper.replace(/tt/, 'a');
          }

          return formatOptions;
        }

        IntlBase.compareBlazorDateFormats = compareBlazorDateFormats;
        /**
         * Returns proper numeric skeleton
         * @private
         * @param {string} skeleton
         * @returns {NumericSkeleton}
         */

        function getProperNumericSkeleton(skeleton) {
          var matches = skeleton.match(IntlBase.formatRegex);
          var ret = {};
          var pattern = matches[1].toUpperCase();
          ret.isAccount = pattern === 'A';
          /* tslint:disable no-any */

          ret.type = IntlBase.patternMatcher[pattern];

          if (skeleton.length > 1) {
            ret.fractionDigits = parseInt(matches[2], 10);
          }

          return ret;
        }

        IntlBase.getProperNumericSkeleton = getProperNumericSkeleton;
        /**
         * Returns format data for number formatting like minimum fraction, maximum fraction, etc..,
         * @private
         * @param {string} pattern
         * @param {boolean} needFraction
         * @param {string} cSymbol
         * @param {boolean} fractionOnly
         * @returns {NegativeData}
         */

        function getFormatData(pattern, needFraction, cSymbol, fractionOnly) {
          var nData = fractionOnly ? {} : {
            nlead: '',
            nend: ''
          };
          var match = pattern.match(IntlBase.customRegex);

          if (match) {
            if (!fractionOnly) {
              nData.nlead = changeCurrencySymbol(match[1], cSymbol);
              nData.nend = changeCurrencySymbol(match[10], cSymbol);
              nData.groupPattern = match[4];
            }

            var fraction = match[7];

            if (fraction && needFraction) {
              var fmatch = fraction.match(fractionRegex);

              if (!isNullOrUndefined(fmatch)) {
                nData.minimumFraction = fmatch.length;
              } else {
                nData.minimumFraction = 0;
              }

              nData.maximumFraction = fraction.length - 1;
            }
          }

          return nData;
        }

        IntlBase.getFormatData = getFormatData;
        /**
         * Changes currency symbol
         * @private
         * @param {string} val
         * @param {string} sym
         * @returns {string}
         */

        function changeCurrencySymbol(val, sym) {
          if (val) {
            return val.replace(IntlBase.defaultCurrency, sym);
          }

          return '';
        }
        /**
         * Returns currency symbol based on currency code
         * @private
         * @param {Object} numericObject
         * @param {string} currencyCode
         * @returns {string}
         */


        function getCurrencySymbol(numericObject, currencyCode, altSymbol) {
          var symbol = altSymbol ? '.' + altSymbol : '.symbol';
          var getCurrency = getValue('currencies.' + currencyCode + symbol, numericObject) || getValue('currencies.' + currencyCode + '.symbol-alt-narrow', numericObject) || '$';
          return getCurrency;
        }

        IntlBase.getCurrencySymbol = getCurrencySymbol;
        /**
         * Returns formatting options for custom number format
         * @private
         * @param {string} format
         * @param {CommonOptions} dOptions
         * @param {Dependables} obj
         * @returns {GenericFormatOptions}
         */

        function customFormat(format, dOptions, obj) {
          var options = {};
          var formatSplit = format.split(';');
          var data = ['pData', 'nData', 'zeroData'];

          for (var i = 0; i < formatSplit.length; i++) {
            options[data[i]] = customNumberFormat(formatSplit[i], dOptions, obj);
          }

          if (isNullOrUndefined(options.nData)) {
            options.nData = extend({}, options.pData);
            options.nData.nlead = isNullOrUndefined(dOptions) ? '-' + options.nData.nlead : dOptions.minusSymbol + options.nData.nlead;
          }

          return options;
        }

        IntlBase.customFormat = customFormat;
        /**
         * Returns custom formatting options
         * @private
         * @param {string} format
         * @param {CommonOptions} dOptions
         * @param {Object} numObject
         * @returns {NegativeData}
         */

        function customNumberFormat(format, dOptions, numObject) {
          var cOptions = {
            type: 'decimal',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
          };
          var pattern = format.match(IntlBase.customRegex);

          if (isNullOrUndefined(pattern) || pattern[5] === '' && format !== 'N/A') {
            cOptions.type = undefined;
            return cOptions;
          }

          cOptions.nlead = pattern[1];
          cOptions.nend = pattern[10];
          var integerPart = pattern[6];
          cOptions.useGrouping = integerPart.indexOf(',') !== -1;
          integerPart = integerPart.replace(/,/g, '');
          var fractionPart = pattern[7];

          if (integerPart.indexOf('0') !== -1) {
            cOptions.minimumIntegerDigits = integerPart.length - integerPart.indexOf('0');
          }

          if (!isNullOrUndefined(fractionPart)) {
            cOptions.minimumFractionDigits = fractionPart.lastIndexOf('0');
            cOptions.maximumFractionDigits = fractionPart.lastIndexOf('#');

            if (cOptions.minimumFractionDigits === -1) {
              cOptions.minimumFractionDigits = 0;
            }

            if (cOptions.maximumFractionDigits === -1 || cOptions.maximumFractionDigits < cOptions.minimumFractionDigits) {
              cOptions.maximumFractionDigits = cOptions.minimumFractionDigits;
            }
          }

          if (!isNullOrUndefined(dOptions)) {
            extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '$', dOptions.currencySymbol));

            if (!cOptions.isCurrency) {
              extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', dOptions.percentSymbol));
            }
          } else {
            extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', '%'));
          }

          if (!isNullOrUndefined(numObject)) {
            var symbolPattern = getSymbolPattern(cOptions.type, dOptions.numberMapper.numberSystem, numObject, false);

            if (cOptions.useGrouping) {
              cOptions.groupSeparator = dOptions.numberMapper.numberSymbols[mapper[2]];
              cOptions.groupData = NumberFormat.getGroupingDetails(symbolPattern.split(';')[0]);
            }

            cOptions.nlead = cOptions.nlead.replace(/\'/g, '');
            cOptions.nend = cOptions.nend.replace(/\'/g, '');
          }

          return cOptions;
        }
        /**
         * Returns formatting options for currency or percent type
         * @private
         * @param {string[]} parts
         * @param {string} actual
         * @param {string} symbol
         * @returns {NegativeData}
         */


        function isCurrencyPercent(parts, actual, symbol) {
          var options = {
            nlead: parts[0],
            nend: parts[1]
          };

          for (var i = 0; i < 2; i++) {
            var part = parts[i];
            var loc = part.indexOf(actual);

            if (loc !== -1 && (loc < part.indexOf('\'') || loc > part.lastIndexOf('\''))) {
              options[typeMapper[i]] = part.substr(0, loc) + symbol + part.substr(loc + 1);
              options[typeMapper[actual]] = true;
              options.type = options.isCurrency ? 'currency' : 'percent';
              break;
            }
          }

          return options;
        }

        IntlBase.isCurrencyPercent = isCurrencyPercent;
        /**
         * Returns culture based date separator
         * @private
         * @param {Object} dateObj
         * @returns {string}
         */

        function getDateSeparator(dateObj) {
          var value = (getValue('dateFormats.short', dateObj) || '').match(/[d‏M‏]([^d‏M])[d‏M‏]/i);
          return value ? value[1] : '/';
        }

        IntlBase.getDateSeparator = getDateSeparator;
        /**
         * Returns Native Date Time pattern
         * @private
         * @param {string} culture
         * @param {DateFormatOptions} options
         * @param {Object} cldr
         * @returns {string}
         */

        function getActualDateTimeFormat(culture, options, cldr, isExcelFormat) {
          var dependable = getDependables(cldr, culture, options.calendar);

          if (isBlazor()) {
            options = compareBlazorDateFormats(options, culture);
          }

          var actualPattern = options.format || getResultantPattern(options.skeleton, dependable.dateObject, options.type);

          if (isExcelFormat) {
            actualPattern = actualPattern.replace(patternRegex, function (pattern) {
              return patternMatch[pattern];
            });

            if (actualPattern.indexOf('z') !== -1) {
              var tLength = actualPattern.match(/z/g).length;
              var timeZonePattern;
              var _options = {
                'timeZone': {}
              };
              _options.numMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));
              _options.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);
              var value = new Date();
              var timezone = value.getTimezoneOffset();
              var pattern = tLength < 4 ? '+H;-H' : _options.timeZone.hourFormat;
              pattern = pattern.replace(/:/g, _options.numMapper.timeSeparator);

              if (timezone === 0) {
                timeZonePattern = _options.timeZone.gmtZeroFormat;
              } else {
                timeZonePattern = DateFormat.getTimeZoneValue(timezone, pattern);
                timeZonePattern = _options.timeZone.gmtFormat.replace(/\{0\}/, timeZonePattern);
              }

              actualPattern = actualPattern.replace(/[z]+/, '"' + timeZonePattern + '"');
            }

            actualPattern = actualPattern.replace(/ $/, '');
          }

          return actualPattern;
        }

        IntlBase.getActualDateTimeFormat = getActualDateTimeFormat; // tslint:disable-next-line:no-any

        function processSymbol(actual, option) {
          if (actual.indexOf(',') !== -1) {
            // tslint:disable-next-line:no-any
            var split = actual.split(',');
            actual = split[0] + getValue('numberMapper.numberSymbols.group', option) + split[1].replace('.', getValue('numberMapper.numberSymbols.decimal', option));
          } else {
            actual = actual.replace('.', getValue('numberMapper.numberSymbols.decimal', option));
          }

          return actual;
        }
        /**
         * Returns Native Number pattern
         * @private
         * @param {string} culture
         * @param {NumberFormatOptions} options
         * @param {Object} cldr
         * @returns {string}
         */


        function getActualNumberFormat(culture, options, cldr, isExcel) {
          var dependable = getDependables(cldr, culture, '', true);
          var parseOptions = {
            custom: true
          };
          var numrericObject = dependable.numericObject;
          var minFrac;
          var curObj = {};
          var curMatch = (options.format || '').match(IntlBase.currencyFormatRegex);
          var type = IntlBase.formatRegex.test(options.format) ? getProperNumericSkeleton(options.format || 'N') : {};
          var dOptions = {};

          if (curMatch) {
            dOptions.numberMapper = isBlazor() ? extend({}, dependable.numericObject) : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true);
            var curCode = isBlazor() ? getValue('currencySymbol', dependable.numericObject) : getCurrencySymbol(dependable.numericObject, options.currency || defaultCurrencyCode, options.altSymbol);
            var symbolPattern = getSymbolPattern('currency', dOptions.numberMapper.numberSystem, dependable.numericObject, /a/i.test(options.format));
            symbolPattern = symbolPattern.replace(/\u00A4/g, curCode);
            var split = symbolPattern.split(';');
            curObj.hasNegativePattern = isBlazor() ? true : split.length > 1;
            curObj.nData = isBlazor() ? getValue(type.type + 'nData', numrericObject) : getFormatData(split[1] || '-' + split[0], true, curCode);
            curObj.pData = isBlazor() ? getValue(type.type + 'pData', numrericObject) : getFormatData(split[0], false, curCode);

            if (!curMatch[2] && !options.minimumFractionDigits && !options.maximumFractionDigits) {
              minFrac = getFormatData(symbolPattern.split(';')[0], true, '', true).minimumFraction;
            }
          }

          var actualPattern;

          if (IntlBase.formatRegex.test(options.format) || !options.format) {
            extend(parseOptions, getProperNumericSkeleton(options.format || 'N'));
            parseOptions.custom = false;
            actualPattern = '###0';

            if (parseOptions.fractionDigits || options.minimumFractionDigits || options.maximumFractionDigits || minFrac) {
              var defaultMinimum = 0;

              if (parseOptions.fractionDigits) {
                options.minimumFractionDigits = options.maximumFractionDigits = parseOptions.fractionDigits;
              }

              actualPattern = fractionDigitsPattern(actualPattern, minFrac || parseOptions.fractionDigits || options.minimumFractionDigits || defaultMinimum, options.maximumFractionDigits || defaultMinimum);
            }

            if (options.minimumIntegerDigits) {
              actualPattern = minimumIntegerPattern(actualPattern, options.minimumIntegerDigits);
            }

            if (options.useGrouping) {
              actualPattern = groupingPattern(actualPattern);
            }

            if (parseOptions.type === 'currency' || parseOptions.type && isBlazor()) {
              if (isBlazor() && parseOptions.type !== 'currency') {
                curObj.pData = getValue(parseOptions.type + 'pData', numrericObject);
                curObj.nData = getValue(parseOptions.type + 'nData', numrericObject);
              }

              var cPattern = actualPattern;
              actualPattern = curObj.pData.nlead + cPattern + curObj.pData.nend;

              if (curObj.hasNegativePattern || isBlazor()) {
                actualPattern += ';' + curObj.nData.nlead + cPattern + curObj.nData.nend;
              }
            }

            if (parseOptions.type === 'percent' && !isBlazor()) {
              actualPattern += ' %';
            }
          } else {
            actualPattern = options.format.replace(/\'/g, '"');
          }

          if (Object.keys(dOptions).length > 0) {
            actualPattern = !isExcel ? processSymbol(actualPattern, dOptions) : actualPattern;
          }

          return actualPattern;
        }

        IntlBase.getActualNumberFormat = getActualNumberFormat;

        function fractionDigitsPattern(pattern, minDigits, maxDigits) {
          pattern += '.';

          for (var a = 0; a < minDigits; a++) {
            pattern += '0';
          }

          if (minDigits < maxDigits) {
            var diff = maxDigits - minDigits;

            for (var b = 0; b < diff; b++) {
              pattern += '#';
            }
          }

          return pattern;
        }

        function minimumIntegerPattern(pattern, digits) {
          var temp = pattern.split('.');
          var integer = '';

          for (var x = 0; x < digits; x++) {
            integer += '0';
          }

          return temp[1] ? integer + '.' + temp[1] : integer;
        }

        function groupingPattern(pattern) {
          var temp = pattern.split('.');
          var integer = temp[0];
          var no = 3 - integer.length % 3;
          var hash = no && no === 1 ? '#' : no === 2 ? '##' : '';
          integer = hash + integer;
          pattern = '';

          for (var x = integer.length - 1; x > 0; x = x - 3) {
            pattern = ',' + integer[x - 2] + integer[x - 1] + integer[x] + pattern;
          }

          pattern = pattern.slice(1);
          return temp[1] ? pattern + '.' + temp[1] : pattern;
        }

        function getWeekData(culture, cldr) {
          var firstDay = defaultFirstDay;
          var mapper = getValue('supplemental.weekData.firstDay', cldr);
          var iCulture = culture;

          if (/en-/.test(iCulture)) {
            iCulture = iCulture.slice(3);
          }

          iCulture = iCulture.slice(0, 2).toUpperCase() + iCulture.substr(2);

          if (mapper) {
            firstDay = mapper[iCulture] || defaultFirstDay;
          }

          return firstDayMapper[firstDay];
        }

        IntlBase.getWeekData = getWeekData;
        /**
         * @private
         * @param pData
         * @param aCurrency
         * @param rCurrency
         */

        function replaceBlazorCurrency(pData, aCurrency, rCurrency) {
          var iCurrency = getBlazorCurrencySymbol(rCurrency);

          if (aCurrency !== iCurrency) {
            var _iterator8 = _createForOfIteratorHelper(pData),
                _step8;

            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var data = _step8.value;
                data.nend = data.nend.replace(aCurrency, iCurrency);
                data.nlead = data.nlead.replace(aCurrency, iCurrency);
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }
          }
        }

        IntlBase.replaceBlazorCurrency = replaceBlazorCurrency;
        /**
         * @private
         */

        function getWeekOfYear(date) {
          var newYear = new Date(date.getFullYear(), 0, 1);
          var day = newYear.getDay();
          var weeknum;
          day = day >= 0 ? day : day + 7;
          var daynum = Math.floor((date.getTime() - newYear.getTime() - (date.getTimezoneOffset() - newYear.getTimezoneOffset()) * 60000) / 86400000) + 1;

          if (day < 4) {
            weeknum = Math.floor((daynum + day - 1) / 7) + 1;

            if (weeknum > 52) {
              var nYear = new Date(this.getFullYear() + 1, 0, 1);
              var nday = nYear.getDay();
              nday = nday >= 0 ? nday : nday + 7;
              weeknum = nday < 4 ? 1 : 53;
            }
          } else {
            weeknum = Math.floor((daynum + day - 1) / 7);
          }

          return weeknum;
        }

        IntlBase.getWeekOfYear = getWeekOfYear;
      })(IntlBase || (IntlBase = {}));

      var headerRegex = /^(.*?):[ \t]*([^\r\n]*)$/gm;
      var defaultType = 'GET';
      /**
       * Ajax class provides ability to make asynchronous HTTP request to the server
       * ```typescript
       *   var ajax = new Ajax("index.html", "GET", true);
       *   ajax.send().then(
       *               function (value) {
       *                   console.log(value);
       *               },
       *               function (reason) {
       *                   console.log(reason);
       *               });
       * ```
       */

      var Ajax = /*#__PURE__*/function () {
        /**
         * Constructor for Ajax class
         * @param  {string|Object} options?
         * @param  {string} type?
         * @param  {boolean} async?
         * @returns defaultType
         */
        function Ajax(options, type, async, contentType) {
          _classCallCheck2(this, Ajax);

          /**
           * A boolean value indicating whether the request should be sent asynchronous or not.
           * @default true
           */
          this.mode = true;
          /**
           * A boolean value indicating whether to ignore the promise reject.
           * @private
           * @default true
           */

          this.emitError = true;
          this.options = {};

          if (typeof options === 'string') {
            this.url = options;
            this.type = type ? type.toUpperCase() : defaultType;
            this.mode = !isNullOrUndefined(async) ? async : true;
          } else if (typeof options === 'object') {
            this.options = options;
            merge(this, this.options);
          }

          this.type = this.type ? this.type.toUpperCase() : defaultType;
          this.contentType = this.contentType !== undefined ? this.contentType : contentType;
        }
        /**
         * Send the request to server.
         * @param {any} data - To send the user data
         * @return {Promise}
         */


        _createClass2(Ajax, [{
          key: "send",
          value: function send(data) {
            var _this9 = this;

            this.data = isNullOrUndefined(data) ? this.data : data;
            var eventArgs = {
              cancel: false,
              httpRequest: null
            };
            var promise = new Promise(function (resolve, reject) {
              _this9.httpRequest = new XMLHttpRequest();

              _this9.httpRequest.onreadystatechange = function () {
                _this9.stateChange(resolve, reject);
              };

              if (!isNullOrUndefined(_this9.onLoad)) {
                _this9.httpRequest.onload = _this9.onLoad;
              }

              if (!isNullOrUndefined(_this9.onProgress)) {
                _this9.httpRequest.onprogress = _this9.onProgress;
              }
              /* istanbul ignore next */


              if (!isNullOrUndefined(_this9.onAbort)) {
                _this9.httpRequest.onabort = _this9.onAbort;
              }
              /* istanbul ignore next */


              if (!isNullOrUndefined(_this9.onError)) {
                _this9.httpRequest.onerror = _this9.onError;
              } //** Upload Events **/

              /* istanbul ignore next */


              if (!isNullOrUndefined(_this9.onUploadProgress)) {
                _this9.httpRequest.upload.onprogress = _this9.onUploadProgress;
              }

              _this9.httpRequest.open(_this9.type, _this9.url, _this9.mode); // Set default headers


              if (!isNullOrUndefined(_this9.data) && _this9.contentType !== null) {
                _this9.httpRequest.setRequestHeader('Content-Type', _this9.contentType || 'application/json; charset=utf-8');
              }

              if (_this9.beforeSend) {
                eventArgs.httpRequest = _this9.httpRequest;

                _this9.beforeSend(eventArgs);
              }

              if (!eventArgs.cancel) {
                _this9.httpRequest.send(!isNullOrUndefined(_this9.data) ? _this9.data : null);
              }
            });
            return promise;
          }
        }, {
          key: "successHandler",
          value: function successHandler(data) {
            if (this.onSuccess) {
              this.onSuccess(data, this);
            }

            return data;
          }
        }, {
          key: "failureHandler",
          value: function failureHandler(reason) {
            if (this.onFailure) {
              this.onFailure(this.httpRequest);
            }

            return reason;
          }
        }, {
          key: "stateChange",
          value: function stateChange(resolve, reject) {
            var data = this.httpRequest.responseText;

            if (this.dataType && this.dataType.toLowerCase() === 'json') {
              if (data === '') {
                data = undefined;
              } else {
                try {
                  data = JSON.parse(data);
                } catch (error) {// no exception handle
                }
              }
            }

            if (this.httpRequest.readyState === 4) {
              //success range should be 200 to 299
              if (this.httpRequest.status >= 200 && this.httpRequest.status <= 299 || this.httpRequest.status === 304) {
                resolve(this.successHandler(data));
              } else {
                if (this.emitError) {
                  reject(new Error(this.failureHandler(this.httpRequest.statusText)));
                } else {
                  resolve();
                }
              }
            }
          }
          /**
           * To get the response header from XMLHttpRequest
           * @param  {string} key Key to search in the response header
           * @returns {string}
           */

        }, {
          key: "getResponseHeader",
          value: function getResponseHeader(key) {
            var responseHeaders;
            var header;
            responseHeaders = {};
            var headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());

            while (headers) {
              responseHeaders[headers[1].toLowerCase()] = headers[2];
              headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());
            }

            header = responseHeaders[key.toLowerCase()];
            return isNullOrUndefined(header) ? null : header;
          }
        }]);

        return Ajax;
      }();

      var REGX_MOBILE = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobile/i;
      var REGX_IE = /msie|trident/i;
      var REGX_IE11 = /Trident\/7\./;
      var REGX_IOS = /(ipad|iphone|ipod touch)/i;
      var REGX_IOS7 = /(ipad|iphone|ipod touch);.*os 7_\d|(ipad|iphone|ipod touch);.*os 8_\d/i;
      var REGX_ANDROID = /android/i;
      var REGX_WINDOWS = /trident|windows phone|edge/i;
      var REGX_VERSION = /(version)[ \/]([\w.]+)/i;
      var REGX_BROWSER = {
        OPERA: /(opera|opr)(?:.*version|)[ \/]([\w.]+)/i,
        EDGE: /(edge)(?:.*version|)[ \/]([\w.]+)/i,
        CHROME: /(chrome|crios)[ \/]([\w.]+)/i,
        PANTHOMEJS: /(phantomjs)[ \/]([\w.]+)/i,
        SAFARI: /(safari)[ \/]([\w.]+)/i,
        WEBKIT: /(webkit)[ \/]([\w.]+)/i,
        MSIE: /(msie|trident) ([\w.]+)/i,
        MOZILLA: /(mozilla)(?:.*? rv:([\w.]+)|)/i
      };
      /* istanbul ignore else  */

      if (typeof window !== 'undefined') {
        window.browserDetails = window.browserDetails || {};
      }
      /**
       * Get configuration details for Browser
       * @private
       */


      var Browser = /*#__PURE__*/function () {
        function Browser() {
          _classCallCheck2(this, Browser);
        }

        _createClass2(Browser, null, [{
          key: "extractBrowserDetail",
          value: function extractBrowserDetail() {
            var browserInfo = {
              culture: {}
            };
            var keys = Object.keys(REGX_BROWSER);
            var clientInfo = [];

            for (var _i7 = 0, _keys4 = keys; _i7 < _keys4.length; _i7++) {
              var key = _keys4[_i7];
              clientInfo = Browser.userAgent.match(REGX_BROWSER[key]);

              if (clientInfo) {
                browserInfo.name = clientInfo[1].toLowerCase() === 'opr' ? 'opera' : clientInfo[1].toLowerCase();
                browserInfo.name = clientInfo[1].toLowerCase() === 'crios' ? 'chrome' : browserInfo.name;
                browserInfo.version = clientInfo[2];
                browserInfo.culture.name = browserInfo.culture.language = navigator.language;

                if (!!Browser.userAgent.match(REGX_IE11)) {
                  browserInfo.name = 'msie';
                  break;
                }

                var version = Browser.userAgent.match(REGX_VERSION);

                if (browserInfo.name === 'safari' && version) {
                  browserInfo.version = version[2];
                }

                break;
              }
            }

            return browserInfo;
          }
          /**
           * To get events from the browser
           * @param {string} event - type of event triggered.
           * @returns {Boolean}
           */

        }, {
          key: "getEvent",
          value: function getEvent(event) {
            // tslint:disable-next-line:no-any
            var events = {
              start: {
                isPointer: 'pointerdown',
                isTouch: 'touchstart',
                isDevice: 'mousedown'
              },
              move: {
                isPointer: 'pointermove',
                isTouch: 'touchmove',
                isDevice: 'mousemove'
              },
              end: {
                isPointer: 'pointerup',
                isTouch: 'touchend',
                isDevice: 'mouseup'
              },
              cancel: {
                isPointer: 'pointercancel',
                isTouch: 'touchcancel',
                isDevice: 'mouseleave'
              }
            };
            return Browser.isPointer ? events[event].isPointer : Browser.isTouch ? events[event].isTouch + (!Browser.isDevice ? ' ' + events[event].isDevice : '') : events[event].isDevice;
          }
          /**
           * To get the Touch start event from browser
           * @returns {string}
           */

        }, {
          key: "getTouchStartEvent",
          value: function getTouchStartEvent() {
            return Browser.getEvent('start');
          }
          /**
           * To get the Touch end event from browser
           * @returns {string}
           */

        }, {
          key: "getTouchEndEvent",
          value: function getTouchEndEvent() {
            return Browser.getEvent('end');
          }
          /**
           * To get the Touch move event from browser
           * @returns {string}
           */

        }, {
          key: "getTouchMoveEvent",
          value: function getTouchMoveEvent() {
            return Browser.getEvent('move');
          }
          /**
           * To cancel the touch event from browser
           * @returns {string}
           */

        }, {
          key: "getTouchCancelEvent",
          value: function getTouchCancelEvent() {
            return Browser.getEvent('cancel');
          }
          /**
           * To get the value based on provided key and regX
           * @param {string} key
           * @param {RegExp} regX
           * @returns {Object}
           */

        }, {
          key: "getValue",
          value: function getValue(key, regX) {
            var browserDetails = window.browserDetails;

            if ('undefined' === typeof browserDetails[key]) {
              return browserDetails[key] = regX.test(Browser.userAgent);
            }

            return browserDetails[key];
          } //Properties 

          /**
           * Property specifies the userAgent of the browser. Default userAgent value is based on the browser.
           * Also we can set our own userAgent.
           */

        }, {
          key: "userAgent",
          set: function set(uA) {
            Browser.uA = uA;
            window.browserDetails = {};
          },
          get: function get() {
            return Browser.uA;
          } //Read Only Properties

          /**
           * Property is to get the browser information like Name, Version and Language
           * @returns BrowserInfo
           */

        }, {
          key: "info",
          get: function get() {
            if (isUndefined(window.browserDetails.info)) {
              return window.browserDetails.info = Browser.extractBrowserDetail();
            }

            return window.browserDetails.info;
          }
          /**
           * Property is to get whether the userAgent is based IE.
           */

        }, {
          key: "isIE",
          get: function get() {
            return Browser.getValue('isIE', REGX_IE);
          }
          /**
           * Property is to get whether the browser has touch support.
           */

        }, {
          key: "isTouch",
          get: function get() {
            if (isUndefined(window.browserDetails.isTouch)) {
              return window.browserDetails.isTouch = 'ontouchstart' in window.navigator || window && window.navigator && window.navigator.maxTouchPoints > 0 || 'ontouchstart' in window;
            }

            return window.browserDetails.isTouch;
          }
          /**
           * Property is to get whether the browser has Pointer support.
           */

        }, {
          key: "isPointer",
          get: function get() {
            if (isUndefined(window.browserDetails.isPointer)) {
              return window.browserDetails.isPointer = 'pointerEnabled' in window.navigator;
            }

            return window.browserDetails.isPointer;
          }
          /**
           * Property is to get whether the browser has MSPointer support.
           */

        }, {
          key: "isMSPointer",
          get: function get() {
            if (isUndefined(window.browserDetails.isMSPointer)) {
              return window.browserDetails.isMSPointer = 'msPointerEnabled' in window.navigator;
            }

            return window.browserDetails.isMSPointer;
          }
          /**
           * Property is to get whether the userAgent is device based.
           */

        }, {
          key: "isDevice",
          get: function get() {
            return Browser.getValue('isDevice', REGX_MOBILE);
          }
          /**
           * Property is to get whether the userAgent is IOS.
           */

        }, {
          key: "isIos",
          get: function get() {
            return Browser.getValue('isIos', REGX_IOS);
          }
          /**
           * Property is to get whether the userAgent is Ios7.
           */

        }, {
          key: "isIos7",
          get: function get() {
            return Browser.getValue('isIos7', REGX_IOS7);
          }
          /**
           * Property is to get whether the userAgent is Android.
           */

        }, {
          key: "isAndroid",
          get: function get() {
            return Browser.getValue('isAndroid', REGX_ANDROID);
          }
          /**
           * Property is to identify whether application ran in web view.
           */

        }, {
          key: "isWebView",
          get: function get() {
            if (isUndefined(window.browserDetails.isWebView)) {
              window.browserDetails.isWebView = !(isUndefined(window.cordova) && isUndefined(window.PhoneGap) && isUndefined(window.phonegap) && window.forge !== 'object');
              return window.browserDetails.isWebView;
            }

            return window.browserDetails.isWebView;
          }
          /**
           * Property is to get whether the userAgent is Windows.
           */

        }, {
          key: "isWindows",
          get: function get() {
            return Browser.getValue('isWindows', REGX_WINDOWS);
          }
          /**
           * Property is to get the touch start event. It returns event name based on browser.
           */

        }, {
          key: "touchStartEvent",
          get: function get() {
            if (isUndefined(window.browserDetails.touchStartEvent)) {
              return window.browserDetails.touchStartEvent = Browser.getTouchStartEvent();
            }

            return window.browserDetails.touchStartEvent;
          }
          /**
           * Property is to get the touch move event. It returns event name based on browser.
           */

        }, {
          key: "touchMoveEvent",
          get: function get() {
            if (isUndefined(window.browserDetails.touchMoveEvent)) {
              return window.browserDetails.touchMoveEvent = Browser.getTouchMoveEvent();
            }

            return window.browserDetails.touchMoveEvent;
          }
          /**
           * Property is to get the touch end event. It returns event name based on browser.
           */

        }, {
          key: "touchEndEvent",
          get: function get() {
            if (isUndefined(window.browserDetails.touchEndEvent)) {
              return window.browserDetails.touchEndEvent = Browser.getTouchEndEvent();
            }

            return window.browserDetails.touchEndEvent;
          }
          /**
           * Property is to cancel the touch end event.
           */

        }, {
          key: "touchCancelEvent",
          get: function get() {
            if (isUndefined(window.browserDetails.touchCancelEvent)) {
              return window.browserDetails.touchCancelEvent = Browser.getTouchCancelEvent();
            }

            return window.browserDetails.touchCancelEvent;
          }
        }]);

        return Browser;
      }();
      /* istanbul ignore next */


      Browser.uA = typeof navigator !== 'undefined' ? navigator.userAgent : '';
      /**
       * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element
       * @private
       * ```html
       * <div id="Eventdiv">  </div>
       * <script>
       *   let node: HTMLElement = document.querySelector("#Eventdiv");
       *   EventHandler.addEventListener(node, "click", function(){
       *       // click handler function code
       *   });
       *   EventHandler.addEventListener(node, "onmouseover", function(){
       *       // mouseover handler function code
       *   });
       *   EventHandler.removeEventListener(node, "click", function(){
       *       // click handler function code
       *   });
       *   eventObj.clearEvents();
       * </script>
       * ```
       */

      var EventHandler = /*#__PURE__*/function () {
        function EventHandler() {
          _classCallCheck2(this, EventHandler);
        }

        _createClass2(EventHandler, null, [{
          key: "addOrGetEventData",
          // to get the event data based on element
          value: function addOrGetEventData(element) {
            if ('__eventList' in element) {
              return element.__eventList.events;
            } else {
              element.__eventList = {};
              return element.__eventList.events = [];
            }
          }
          /**
           * Add an event to the specified DOM element.
           * @param {any} element - Target HTML DOM element
           * @param {string} eventName - A string that specifies the name of the event
           * @param {Function} listener - Specifies the function to run when the event occurs
           * @param {Object} bindTo - A object that binds 'this' variable in the event handler
           * @param {number} debounce - Specifies at what interval given event listener should be triggered.
           * @return {Function}
           */

        }, {
          key: "add",
          value: function add(element, eventName, listener, bindTo, intDebounce) {
            var eventData = EventHandler.addOrGetEventData(element);
            var debounceListener;

            if (intDebounce) {
              debounceListener = debounce(listener, intDebounce);
            } else {
              debounceListener = listener;
            }

            if (bindTo) {
              debounceListener = debounceListener.bind(bindTo);
            }

            var event = eventName.split(' ');

            for (var i = 0; i < event.length; i++) {
              eventData.push({
                name: event[i],
                listener: listener,
                debounce: debounceListener
              });

              if (Browser.isIE) {
                element.addEventListener(event[i], debounceListener);
              } else {
                element.addEventListener(event[i], debounceListener, {
                  passive: false
                });
              }
            }

            return debounceListener;
          }
          /**
           * Remove an event listener that has been attached before.
           * @param {any} element - Specifies the target html element to remove the event
           * @param {string} eventName - A string that specifies the name of the event to remove
           * @param {Function} listener - Specifies the function to remove
           * @return {void}
           */

        }, {
          key: "remove",
          value: function remove(element, eventName, listener) {
            var eventData = EventHandler.addOrGetEventData(element);
            var event = eventName.split(' ');

            var _loop2 = function _loop2(j) {
              var index = -1;
              var debounceListener = void 0;

              if (eventData && eventData.length !== 0) {
                eventData.some(function (x, i) {
                  return x.name === event[j] && x.listener === listener ? (index = i, debounceListener = x.debounce, true) : false;
                });
              }

              if (index !== -1) {
                eventData.splice(index, 1);
              }

              if (debounceListener) {
                element.removeEventListener(event[j], debounceListener);
              }
            };

            for (var j = 0; j < event.length; j++) {
              _loop2(j);
            }
          }
          /**
           * Clear all the event listeners that has been previously attached to the element.
           * @param {any} element - Specifies the target html element to clear the events
           * @return {void}
           */

        }, {
          key: "clearEvents",
          value: function clearEvents(element) {
            var eventData;
            var copyData;
            eventData = EventHandler.addOrGetEventData(element);
            copyData = extend([], copyData, eventData);

            for (var i = 0; i < copyData.length; i++) {
              element.removeEventListener(copyData[i].name, copyData[i].debounce);
              eventData.shift();
            }
          }
          /**
           * Trigger particular event of the element.
           * @param {any} element - Specifies the target html element to trigger the events
           * @param {string} eventName - Specifies the event to trigger for the specified element.
           * Can be a custom event, or any of the standard events.
           * @param {any} eventProp - Additional parameters to pass on to the event properties
           * @return {void}
           */

        }, {
          key: "trigger",
          value: function trigger(element, eventName, eventProp) {
            var eventData = EventHandler.addOrGetEventData(element);

            var _iterator9 = _createForOfIteratorHelper(eventData),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var _event = _step9.value;

                if (_event.name === eventName) {
                  _event.debounce.call(this, eventProp);
                }
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }
          }
        }]);

        return EventHandler;
      }();
      /**
       * Template Engine
       */


      var LINES = new RegExp('\\n|\\r|\\s\\s+', 'g');
      var QUOTES = new RegExp(/'|"/g);
      var IF_STMT = new RegExp('if ?\\(');
      var ELSEIF_STMT = new RegExp('else if ?\\(');
      var ELSE_STMT = new RegExp('else');
      var FOR_STMT = new RegExp('for ?\\(');
      var IF_OR_FOR = new RegExp('(\/if|\/for)');
      var CALL_FUNCTION = new RegExp('\\((.*)\\)', '');
      var NOT_NUMBER = new RegExp('^[0-9]+$', 'g');
      var WORD = new RegExp('[\\w"\'.\\s+]+', 'g');
      var DBL_QUOTED_STR = new RegExp('"(.*?)"', 'g');
      var WORDIF = new RegExp('[\\w"\'@#$.\\s+]+', 'g');
      var exp = new RegExp('\\${([^}]*)}', 'g'); // let cachedTemplate: Object = {};

      var ARR_OBJ = /^\..*/gm;
      var SINGLE_SLASH = /\\/gi;
      var DOUBLE_SLASH = /\\\\/gi;
      var WORDFUNC = new RegExp('[\\w"\'@#$.\\s+]+', 'g');
      var WINDOWFUNC = /\window\./gm;
      /**
       * The function to set regular expression for template expression string.
       * @param  {RegExp} value - Value expression.
       * @private
       */
      // /**
      //  * To render the template string from the given data.
      //  * @param  {string} template - String Template.
      //  * @param  {Object[]|JSON} data - DataSource for the template.
      //  * @param  {Object} helper? - custom helper object.
      //  */
      // export function template(template: string, data: JSON, helper?: Object): string {
      //     let hash: string = hashCode(template);
      //     let tmpl: Function;
      //     if (!cachedTemplate[hash]) {
      //         tmpl = cachedTemplate[hash] = compile(template, helper);
      //     } else {
      //         tmpl = cachedTemplate[hash];
      //     }
      //     return tmpl(data);
      // }

      /**
       * Compile the template string into template function.
       * @param  {string} template - The template string which is going to convert.
       * @param  {Object} helper? - Helper functions as an object.
       * @private
       */

      function compile$1(template, helper) {
        var argName = 'data';
        var evalExpResult = evalExp(template, argName, helper);
        var fnCode = "var str=\"".concat(evalExpResult, "\"; return str;"); // tslint:disable-next-line:no-function-constructor-with-string-args

        var fn = new Function(argName, fnCode);
        return fn.bind(helper);
      } // function used to evaluate the function expression


      function evalExp(str, nameSpace, helper) {
        var varCOunt = 0;
        /**
         * Variable containing Local Keys
         */

        var localKeys = [];
        var isClass = str.match(/class="([^\"]+|)\s{2}/g);
        var singleSpace = '';

        if (isClass) {
          isClass.forEach(function (value) {
            singleSpace = value.replace(/\s\s+/g, ' ');
            str = str.replace(value, singleSpace);
          });
        }

        return str.replace(LINES, '').replace(DBL_QUOTED_STR, '\'$1\'').replace(exp, function (match, cnt, offset, matchStr) {
          var SPECIAL_CHAR = /\@|\#|\$/gm;
          var matches = cnt.match(CALL_FUNCTION); // matches to detect any function calls

          if (matches) {
            var rlStr = matches[1];

            if (ELSEIF_STMT.test(cnt)) {
              //handling else-if condition
              cnt = '";} ' + cnt.replace(matches[1], rlStr.replace(WORD, function (str) {
                str = str.trim();
                return addNameSpace(str, !QUOTES.test(str) && localKeys.indexOf(str) === -1, nameSpace, localKeys);
              })) + '{ \n str = str + "';
            } else if (IF_STMT.test(cnt)) {
              //handling if condition
              cnt = '"; ' + cnt.replace(matches[1], rlStr.replace(WORDIF, function (strs) {
                return HandleSpecialCharArrObj(strs, nameSpace, localKeys);
              })) + '{ \n str = str + "';
            } else if (FOR_STMT.test(cnt)) {
              //handling for condition
              var _rlStr = matches[1].split(' of '); // replace for each into actual JavaScript


              cnt = '"; ' + cnt.replace(matches[1], function (mtc) {
                localKeys.push(_rlStr[0]);
                localKeys.push(_rlStr[0] + 'Index');
                varCOunt = varCOunt + 1; // tslint:disable-next-line

                return 'var i' + varCOunt + '=0; i' + varCOunt + ' < ' + addNameSpace(_rlStr[1], true, nameSpace, localKeys) + '.length; i' + varCOunt + '++';
              }) + '{ \n ' + _rlStr[0] + '= ' + addNameSpace(_rlStr[1], true, nameSpace, localKeys) + '[i' + varCOunt + ']; \n var ' + _rlStr[0] + 'Index=i' + varCOunt + '; \n str = str + "';
            } else {
              //helper function handling
              var fnStr = cnt.split('(');
              var fNameSpace = helper && helper.hasOwnProperty(fnStr[0]) ? 'this.' : 'global';
              fNameSpace = /\./.test(fnStr[0]) ? '' : fNameSpace;
              var ftArray = matches[1].split(',');

              if (matches[1].length !== 0 && !/data/.test(ftArray[0]) && !/window./.test(ftArray[0])) {
                matches[1] = fNameSpace === 'global' ? nameSpace + '.' + matches[1] : matches[1];
              }

              var splRegexp = /\@|\$|\#/gm;
              var arrObj = /\]\./gm;

              if (WINDOWFUNC.test(cnt) && arrObj.test(cnt) || splRegexp.test(cnt)) {
                var splArrRegexp = /\@|\$|\#|\]\./gm;

                if (splArrRegexp.test(cnt)) {
                  // tslint:disable-next-line
                  cnt = '"+ ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(matches[1], rlStr.replace(WORDFUNC, function (strs) {
                    return HandleSpecialCharArrObj(strs, nameSpace, localKeys);
                  })) + '+ "';
                }
              } else {
                cnt = '" + ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(rlStr, addNameSpace(matches[1].replace(/,( |)data.|,/gi, ',' + nameSpace + '.').replace(/,( |)data.window/gi, ',window'), fNameSpace === 'global' ? false : true, nameSpace, localKeys)) + '+"';
              }
            }
          } else if (ELSE_STMT.test(cnt)) {
            // handling else condition
            cnt = '"; ' + cnt.replace(ELSE_STMT, '} else { \n str = str + "');
          } else if (!!cnt.match(IF_OR_FOR)) {
            // close condition 
            cnt = cnt.replace(IF_OR_FOR, '"; \n } \n str = str + "');
          } else if (SPECIAL_CHAR.test(cnt)) {
            // template string with double slash with special character
            if (cnt.match(SINGLE_SLASH)) {
              cnt = SlashReplace(cnt);
            }

            cnt = '"+' + NameSpaceForspecialChar(cnt, localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '"]+"';
          } else {
            // template string with double slash
            if (cnt.match(SINGLE_SLASH)) {
              cnt = SlashReplace(cnt);
              cnt = '"+' + NameSpaceForspecialChar(cnt, localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '"]+"';
            } else {
              // evaluate normal expression
              cnt = '"+' + addNameSpace(cnt.replace(/\,/gi, '+' + nameSpace + '.'), localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '+"';
            }
          }

          return cnt;
        });
      }

      function addNameSpace(str, addNS, nameSpace, ignoreList) {
        return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 ? nameSpace + '.' + str : str;
      }

      function NameSpaceArrObj(str, addNS, nameSpace, ignoreList) {
        var arrObjReg = /^\..*/gm;
        return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 && !arrObjReg.test(str) ? nameSpace + '.' + str : str;
      } // // Create hashCode for template string to storeCached function
      // function hashCode(str: string): string {
      //     return str.split('').reduce((a: number, b: string) => { a = ((a << 5) - a) + b.charCodeAt(0); return a & a; }, 0).toString();
      // }


      function NameSpaceForspecialChar(str, addNS, nameSpace, ignoreList) {
        return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 ? nameSpace + '["' + str : str;
      } // tslint:disable-next-line


      function SlashReplace(tempStr) {
        // tslint:disable-next-line
        var _double = "\\\\";

        if (tempStr.match(DOUBLE_SLASH)) {
          tempStr = tempStr;
        } else {
          tempStr = tempStr.replace(SINGLE_SLASH, _double);
        }

        return tempStr;
      }

      function HandleSpecialCharArrObj(str, nameSpaceNew, keys) {
        str = str.trim();
        var windowFunc = /\window\./gm;

        if (!windowFunc.test(str)) {
          var quotes = /'|"/gm;
          var splRegexp = /\@|\$|\#/gm;

          if (splRegexp.test(str)) {
            str = NameSpaceForspecialChar(str, keys.indexOf(str) === -1, nameSpaceNew, keys) + '"]';
          }

          if (ARR_OBJ.test(str)) {
            return NameSpaceArrObj(str, !quotes.test(str) && keys.indexOf(str) === -1, nameSpaceNew, keys);
          } else {
            return addNameSpace(str, !quotes.test(str) && keys.indexOf(str) === -1, nameSpaceNew, keys);
          }
        } else {
          return str;
        }
      }
      /**
       * Template Engine Bridge
       */


      var HAS_ROW = /^[\n\r.]+\<tr|^\<tr/;
      var HAS_SVG = /^[\n\r.]+\<svg|^\<path|^\<g/;
      var blazorTemplates = {};

      function getRandomId() {
        return '-' + Math.random().toString(36).substr(2, 5);
      }
      /**
       * Compile the template string into template function.
       * @param  {string} templateString - The template string which is going to convert.
       * @param  {Object} helper? - Helper functions as an object.
       * @private
       */
      //tslint:disable-next-line


      function compile$$1(templateString, helper) {
        var compiler = engineObj.compile(templateString, helper); //tslint:disable-next-line

        return function (data, component, propName, templateId, isStringTemplate, index) {
          var result = compiler(data, component, propName);
          var blazorTemplateId = 'BlazorTemplateId';

          if (isBlazor() && !isStringTemplate) {
            var randomId = getRandomId();
            var blazorId = templateId + randomId;

            if (!blazorTemplates[templateId]) {
              blazorTemplates[templateId] = [];
            }

            if (!isNullOrUndefined(index)) {
              var _keys5 = Object.keys(blazorTemplates[templateId][index]);

              for (var _i8 = 0, _keys6 = _keys5; _i8 < _keys6.length; _i8++) {
                var key = _keys6[_i8];

                if (key !== blazorTemplateId && data[key]) {
                  blazorTemplates[templateId][index][key] = data[key];
                }

                if (key === blazorTemplateId) {
                  blazorId = blazorTemplates[templateId][index][key];
                }
              }
            } else {
              data[blazorTemplateId] = blazorId;
              blazorTemplates[templateId].push(data);
            } // tslint:disable-next-line:no-any


            return propName === 'rowTemplate' ? [_createElement('tr', {
              id: blazorId,
              className: 'e-blazor-template'
            })] : // tslint:disable-next-line:no-any
            [_createElement('div', {
              id: blazorId,
              className: 'e-blazor-template'
            })];
          }

          if (typeof result === 'string') {
            if (HAS_SVG.test(result)) {
              var ele = _createElement('svg', {
                innerHTML: result
              });

              return ele.childNodes;
            } else {
              var _ele = _createElement(HAS_ROW.test(result) ? 'table' : 'div', {
                innerHTML: result
              });

              return _ele.childNodes;
            }
          } else {
            return result;
          }
        };
      }

      function updateBlazorTemplate(templateId, templateName, comp, isEmpty, callBack) {
        if (isBlazor()) {
          var ejsIntrop = 'sfBlazor';
          window[ejsIntrop].updateTemplate(templateName, blazorTemplates[templateId], templateId, comp, callBack);

          if (isEmpty !== false) {
            blazorTemplates[templateId] = [];
          }
        }
      }

      function resetBlazorTemplate(templateId, templateName, index) {
        var templateDiv = document.getElementById(templateId);

        if (templateDiv) {
          // tslint:disable-next-line:no-any
          var innerTemplates = templateDiv.getElementsByClassName('blazor-inner-template');

          for (var i = 0; i < innerTemplates.length; i++) {
            var tempId = ' ';

            if (!isNullOrUndefined(index)) {
              tempId = innerTemplates[index].getAttribute('data-templateId');
            } else {
              tempId = innerTemplates[i].getAttribute('data-templateId');
            }

            var tempElement = document.getElementById(tempId);

            if (tempElement) {
              var length = tempElement.childNodes.length;

              for (var j = 0; j < length; j++) {
                if (!isNullOrUndefined(index)) {
                  innerTemplates[index].appendChild(tempElement.childNodes[0]);
                  i = innerTemplates.length;
                } else {
                  innerTemplates[i].appendChild(tempElement.childNodes[0]);
                }
              }
            }
          }
        }
      }
      /**
       * Set your custom template engine for template rendering.
       * @param  {ITemplateEngine} classObj - Class object for custom template.
       * @private
       */


      function setTemplateEngine(classObj) {
        engineObj.compile = classObj.compile;
      }
      /**
       * Get current template engine for template rendering
       * @param  {ITemplateEngine} classObj - Class object for custom template.
       * @private
       */


      function getTemplateEngine() {
        return engineObj.compile;
      } //Default Engine Class


      var Engine = /*#__PURE__*/function () {
        function Engine() {
          _classCallCheck2(this, Engine);
        }

        _createClass2(Engine, [{
          key: "compile",
          value: function compile(templateString) {
            var helper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            return compile$1(templateString, helper);
          }
        }]);

        return Engine;
      }();

      var engineObj = {
        compile: new Engine().compile
      };
      var simpleRegex = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/;
      var multipleSplitRegex = /(?:#([\w-]+)|(\w+)|\.([\w-]+))/g;
      var idClassSelector = /^(\.|#)/;
      var selectMapper = {
        '.': 'className',
        '#': 'id'
      };
      var classRegexString = '(?=.*?\\b{value}\\b)';
      var assigner = {
        className: 'attributes.className',
        id: 'attributes.id',
        tagName: 'tagName'
      };
      var emptyElements = ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'link', 'meta', 'param', 'embed', 'command', 'keygen', 'source', 'track', 'wbr'];
      var blockElements = ['a', 'address', 'article', 'applet', 'aside', 'audio', 'blockquote', 'button', 'canvas', 'center', 'dd', 'del', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'iframe', 'ins', 'isindex', 'li', 'map', 'menu', 'noframes', 'noscript', 'object', 'ol', 'output', 'p', 'pre', 'section', 'script', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video'];
      var inlineElement = ['abbr', 'acronym', 'applet', 'b', 'basefont', 'bdo', 'big', 'br', 'button', 'cite', 'code', 'del', 'dfn', 'em', 'font', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map', 'object', 'q', 's', 'samp', 'script', 'select', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'textarea', 'tt', 'u', 'var'];
      var selfClosingElements = ['colgroup', 'dd', 'dt', 'li', 'options', 'p', 'td', 'tfoot', 'th', 'thead', 'tr'];
      var fillAttrs = ['checked', 'compact', 'declare', 'defer', 'disabled', 'ismap', 'multiple', 'nohref', 'noresize', 'noshade', 'nowrap', 'readonly', 'selected'];
      var cspElement = ['Script', 'style'];
      var nameMapper = {
        'tabindex': 'tabIndex'
      };
      var startRegex = /^<([-A-Za-z0-9_]+)((?:\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/;
      var endRegex = /^<\/([-A-Za-z0-9_]+)[^>]*>/;
      var attributeRegex = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g;
      /**
       * Namespace for VirtualDOM
       * @private
       */

      var VirtualDOM;

      (function (VirtualDOM) {
        //tslint:disable:no-any
        function createElement(tagName, properties) {
          var children = [];
          var extended = extend({}, {}, properties, true);

          if (!isNullOrUndefined(properties)) {
            var _keys7 = Object.keys(properties);

            if (_keys7.length) {
              if (extended.innerHTML) {
                children = ConvertHTMLToJSon(extended.innerHTML);
                delete extended.innerHTML;
              }

              if (extended.attrs) {
                extend(extended, extended.attrs);
                delete extended.attrs;
              }

              if (extended.styles) {
                var valArr = extended.styles.split(';');
                var vObj = {};

                for (var i = 0, length = valArr.length; i < length; i++) {
                  var cVal = valArr[i];
                  var styleSplit = cVal.split(':');
                  vObj[styleSplit[0]] = styleSplit[1];
                }

                delete extended.styles;
                extended.style = vObj;
              }
            }
          }

          return {
            tagName: tagName,
            attributes: extended || {},
            children: children
          };
        }

        VirtualDOM.createElement = createElement;

        function assignParent(childrens, parent) {
          if (parent && childrens) {
            childrens.forEach(function (child) {
              if (isObject(child)) {
                if (child.parent) {
                  detach(child);
                }

                child.parent = parent;
              }

              return child;
            });
          }
        }

        VirtualDOM.assignParent = assignParent;

        function append(fromElements, toElement) {
          assignParent(fromElements, toElement);

          if (toElement.children) {
            toElement.children = toElement.children.concat(fromElements);
          } else {
            toElement.children = [].concat(fromElements);
          }
        }

        VirtualDOM.append = append;

        function prepend(child, toElement) {
          assignParent(child, toElement);

          if (!toElement.children || !toElement.children.length) {
            toElement.children = [];
            toElement.children.concat(child);
          } else {
            for (var i = child.length - 1; i >= 0; i--) {
              toElement.children.unshift(child[i]);
            }
          }
        }

        VirtualDOM.prepend = prepend;

        function detach(element) {
          var parent = element.parent;

          if (parent) {
            var index = parent.children.indexOf(element);

            if (index !== -1) {
              parent.children.splice(index);
            }
          }

          return parent;
        }

        VirtualDOM.detach = detach; //tslint:disable-next-line

        function vDomSelector(_ref) {
          var ele = _ref.ele,
              selector = _ref.selector,
              selectAll = _ref.selectAll,
              immediateParent = _ref.immediateParent;
          var iSelector = selector.split(' ');
          var curColl = ele;

          for (var i = 0, length = iSelector.length; i < length; i++) {
            var isDescendant = false;
            var parent = curColl;
            var curSelector = iSelector[i];
            var _mapper = [];

            if (simpleRegex.test(curSelector)) {
              processSelector(curSelector, _mapper);
            } else if (curSelector.indexOf('>') === -1) {
              var splitSelector = curSelector.match(multipleSplitRegex);

              var _iterator10 = _createForOfIteratorHelper(splitSelector),
                  _step10;

              try {
                for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                  var curMap = _step10.value;
                  processSelector(curMap, _mapper);
                }
              } catch (err) {
                _iterator10.e(err);
              } finally {
                _iterator10.f();
              }
            } else if (curSelector.indexOf('>') !== -1) {
              isDescendant = true;
              var dSelector = curSelector.split('>'); //tslint:disable-next-line

              var dParent = ele;
              var descendent = void 0;
              var flag = 0;

              var _iterator11 = _createForOfIteratorHelper(dSelector),
                  _step11;

              try {
                for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                  var sel = _step11.value;

                  if (!dParent) {
                    break;
                  }

                  if (dParent.length) {
                    var descendentChild = [];

                    var _iterator12 = _createForOfIteratorHelper(dParent),
                        _step12;

                    try {
                      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                        var child = _step12.value;
                        descendentChild = descendentChild.concat(vDomSelector({
                          ele: child,
                          selector: sel,
                          selectAll: selectAll,
                          immediateParent: !!flag
                        }));
                      }
                    } catch (err) {
                      _iterator12.e(err);
                    } finally {
                      _iterator12.f();
                    }

                    descendent = descendentChild;
                  } else {
                    descendent = vDomSelector({
                      ele: dParent,
                      selector: sel,
                      selectAll: selectAll,
                      immediateParent: !!flag
                    });
                  }

                  flag++;
                  dParent = descendent;
                }
              } catch (err) {
                _iterator11.e(err);
              } finally {
                _iterator11.f();
              }

              if (descendent) {
                curColl = descendent;
              }
            }

            if (!isDescendant) {
              if (parent.length) {
                var iCurSelector = [];

                var _iterator13 = _createForOfIteratorHelper(parent),
                    _step13;

                try {
                  for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                    var curParent = _step13.value;
                    iCurSelector = iCurSelector.concat(accessElement(curParent, _mapper, selectAll, immediateParent));
                  }
                } catch (err) {
                  _iterator13.e(err);
                } finally {
                  _iterator13.f();
                }

                curColl = iCurSelector;
              } else {
                curColl = accessElement(parent, _mapper, selectAll, immediateParent);
              }
            }
          }

          if (selectAll) {
            return curColl;
          } else {
            return curColl[0] || null;
          }
        }

        VirtualDOM.vDomSelector = vDomSelector;

        function processSelector(selector, mapper) {
          var match = selector.match(idClassSelector);
          var obj = {};

          if (match) {
            var curMapper = selectMapper[match[0]];

            if (curMapper === 'className') {
              var curObj = mapper.filter(function (obj) {
                return obj.hasOwnProperty('className');
              })[0];
              var canPush = false;

              if (!curObj) {
                canPush = true;
                curObj = {};
              }

              var existValue = curObj[curMapper] || '';
              curObj[curMapper] = existValue + classRegexString.replace('{value}', selector.replace('.', ''));

              if (canPush) {
                mapper.push(curObj);
              }
            } else {
              obj[curMapper] = selector.replace(match[0], '');
              mapper.push(obj);
            }
          } else {
            mapper.push({
              tagName: selector
            });
          }
        } //tslint:disable-next-line


        function accessElement(ele, mapper, selectAll, immediateParent) {
          if (ele.children) {
            //tslint:disable-next-line
            var temp = ele.children.filter(function (child) {
              if (typeof child !== 'string') {
                var matched = true;

                var _iterator14 = _createForOfIteratorHelper(mapper),
                    _step14;

                try {
                  for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                    var map = _step14.value;
                    var key = Object.keys(map)[0];
                    var expected = map[key];
                    var actualValue = getValue(assigner[key], child);

                    if (key === 'className') {
                      if (!new RegExp('^' + expected + '.*$').test(actualValue)) {
                        matched = false;
                        break;
                      }
                    } else if (actualValue !== expected) {
                      matched = false;
                      break;
                    }
                  }
                } catch (err) {
                  _iterator14.e(err);
                } finally {
                  _iterator14.f();
                }

                return matched;
              } else {
                return false;
              }
            });

            if (!immediateParent && (!temp.length || selectAll)) {
              ele.children.forEach(function (child) {
                if (isObject(child)) {
                  temp = temp.concat(accessElement(child, mapper, selectAll));
                }
              });
            }

            return temp;
          } else {
            return [];
          }
        }

        VirtualDOM.accessElement = accessElement;

        function ConvertHTMLToJSon(htmlString) {
          var results = [];
          var isText;
          var tagArray = [];
          var nodeArray = [];

          while (htmlString) {
            isText = true;
            var lastVal = getLastValue(tagArray);

            if (!lastVal || !contains(cspElement, lastVal)) {
              if (htmlString.indexOf('</') === 0) {
                var match = htmlString.match(endRegex);

                if (match) {
                  htmlString = htmlString.substring(match[0].length); //tslint:disable-next-line

                  match[0].replace(endRegex, iterateEndTag);
                }

                isText = false;
              } else if (htmlString.indexOf('<') === 0) {
                var _match = htmlString.match(startRegex);

                if (_match) {
                  htmlString = htmlString.substring(_match[0].length); //tslint:disable-next-line

                  _match[0].replace(startRegex, iterateStartTag);
                }

                isText = false;
              }

              if (isText) {
                var tagIndex = htmlString.indexOf('<');
                var text = tagIndex < 0 ? htmlString : htmlString.substring(0, tagIndex);
                htmlString = tagIndex < 0 ? '' : htmlString.substring(tagIndex);
                iterateText(text);
              }
            } else {
              //tslint:disable-next-line
              htmlString = htmlString.replace(new RegExp('([\\s\\S]*?)<\/' + getLastValue(nodeArray) + '[^>]*>'), function (all, text) {
                text = text.replace(/<!--([\s\S]*?)-->|<!\[CDATA\[([\s\S]*?)]]>/g, '$1$2');
                iterateText(text);
                return '';
              });
              iterateEndTag('', getLastValue(tagArray));
            }
          }

          function iterateStartTag(start, tagName, rest) {
            tagName = tagName.toLowerCase();

            if (contains(blockElements, tagName)) {
              while (getLastValue(tagArray) && contains(inlineElement, getLastValue(tagArray))) {
                iterateEndTag('', getLastValue(tagArray));
              }
            }

            if (contains(selfClosingElements, tagName) && getLastValue(tagArray)) {
              iterateEndTag('', tagName);
            }

            var isSelfTag = contains(emptyElements, tagName);

            if (!isSelfTag) {
              tagArray.push(tagName);
            }

            var attrs = {}; //tslint:disable-next-line

            rest.replace(attributeRegex, function (match, name) {
              //tslint:disable-next-line
              var val = (arguments.length <= 4 ? undefined : arguments[4]) ? arguments.length <= 4 ? undefined : arguments[4] : (arguments.length <= 5 ? undefined : arguments[5]) ? arguments.length <= 5 ? undefined : arguments[5] : (arguments.length <= 6 ? undefined : arguments[6]) ? arguments.length <= 6 ? undefined : arguments[6] : contains(fillAttrs, name) ? name : '';

              if (name === 'style') {
                var valArr = val.split(';');
                var vObj = {};

                for (var i = 0, length = valArr.length; i < length; i++) {
                  var cVal = valArr[i];
                  var styleSplit = cVal.split(':');
                  vObj[styleSplit[0]] = styleSplit[1];
                }

                val = vObj;
              }

              name = nameMapper[name] || name;
              attrs[name] = val; //tslint:disable-next-line
            });
            attrs['data-id'] = getRandomId();
            var tagObject = {
              tagName: tagName,
              attributes: attrs
            };

            if (isSelfTag) {
              var parent = nodeArray[0] || results;

              if (parent.children === undefined) {
                parent.children = [];
              }

              tagObject.parent = parent;
              parent.children.push(tagObject);
            } else {
              nodeArray.unshift(tagObject);
            }
          }

          function iterateEndTag(start, tagName) {
            var pos;

            if (!tagName) {
              pos = 0;
            } else {
              for (pos = tagArray.length - 1; pos >= 0; pos--) {
                if (tagArray[pos] === tagName) {
                  break;
                }
              }
            }

            if (pos >= 0) {
              for (var j = nodeArray.length - 1; j >= pos; j--) {
                //tslint:disable-next-line
                var node = nodeArray.shift();

                if (nodeArray.length === 0) {
                  results.push(node);
                } else {
                  var parent = nodeArray[0];

                  if (parent.children === undefined) {
                    parent.children = [];
                  }

                  node.parent = parent;
                  parent.children.push(node);
                }
              }

              tagArray.length = pos;
            }
          }

          function iterateText(text) {
            if (nodeArray.length === 0) {
              results.push(text);
            } else {
              var parent = nodeArray[0];

              if (parent.children === undefined) {
                parent.children = [];
              }

              parent.children.push(text);
            }
          }

          return results;
        }

        VirtualDOM.ConvertHTMLToJSon = ConvertHTMLToJSon; //tslint:disable-next-line 

        function getLastValue(arr) {
          return arr[arr.length - 1];
        }

        function contains(arr, key) {
          return arr.indexOf(key) !== -1;
        } //tslint:disable-next-line


        function cloneNode(ele, deep) {
          if (isObject(ele)) {
            if (deep) {
              return extend({}, {}, ele, true);
            } else {
              return {
                tagName: ele.tagName,
                attributes: ele.attributes
              };
            }
          } else {
            return ele.cloneNode(deep);
          }
        }

        VirtualDOM.cloneNode = cloneNode;

        function setStyleAttribute(element, attrs) {
          if (element.attributes.style) {
            element.attributes.style = extend({}, attrs);
          } else {
            element.attributes.style = extend(element.attributes.style, attrs);
          }
        }

        VirtualDOM.setStyleAttribute = setStyleAttribute; //tslint:enable:no-any
      })(VirtualDOM || (VirtualDOM = {}));
      /**
       * Functions related to dom operations.
       */


      var SVG_REG = /^svg|^path|^g/;
      /**
       * Function to create Html element.
       * @param tagName - Name of the tag, id and class names.
       * @param properties - Object to set properties in the element.
       * @param properties.id - To set the id to the created element.
       * @param properties.className - To add classes to the element.
       * @param properties.innerHTML - To set the innerHTML to element.
       * @param properties.styles - To set the some custom styles to element.
       * @param properties.attrs - To set the attributes to element.
       * @private
       */

      function _createElement(tagName, properties) {
        //tslint:disable-next-line
        var element = SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName);

        if (typeof properties === 'undefined') {
          return element;
        }

        element.innerHTML = properties.innerHTML ? properties.innerHTML : '';

        if (properties.className !== undefined) {
          element.className = properties.className;
        }

        if (properties.id !== undefined) {
          element.id = properties.id;
        }

        if (properties.styles !== undefined) {
          element.setAttribute('style', properties.styles);
        }

        if (properties.attrs !== undefined) {
          attributes(element, properties.attrs);
        }

        return element;
      }
      /**
       * The function used to add the classes to array of elements
       * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes
       * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class
       * @private
       */


      function addClass(elements, classes) {
        var classList = getClassList(classes);

        var _iterator15 = _createForOfIteratorHelper(elements),
            _step15;

        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var ele = _step15.value;

            var _iterator16 = _createForOfIteratorHelper(classList),
                _step16;

            try {
              for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
                var className = _step16.value;

                if (isObject(ele)) {
                  var curClass = getValue('attributes.className', ele);

                  if (isNullOrUndefined(curClass)) {
                    setValue('attributes.className', className, ele);
                  } else if (!new RegExp('\\b' + className + '\\b', 'i').test(curClass)) {
                    setValue('attributes.className', curClass + ' ' + className, ele);
                  }
                } else {
                  if (!ele.classList.contains(className)) {
                    ele.classList.add(className);
                  }
                }
              }
            } catch (err) {
              _iterator16.e(err);
            } finally {
              _iterator16.f();
            }
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }

        return elements;
      }
      /**
       * The function used to add the classes to array of elements
       * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes
       * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class
       * @private
       */


      function removeClass(elements, classes) {
        var classList = getClassList(classes);

        var _iterator17 = _createForOfIteratorHelper(elements),
            _step17;

        try {
          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
            var ele = _step17.value;
            var flag = isObject(ele);
            var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';

            if (canRemove) {
              var _iterator18 = _createForOfIteratorHelper(classList),
                  _step18;

              try {
                for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
                  var className = _step18.value;

                  if (flag) {
                    var _classes = getValue('attributes.className', ele);

                    var classArr = _classes.split(' ');

                    var index = classArr.indexOf(className);

                    if (index !== -1) {
                      classArr.splice(index, 1);
                    }

                    setValue('attributes.className', classArr.join(' '), ele);
                  } else {
                    ele.classList.remove(className);
                  }
                }
              } catch (err) {
                _iterator18.e(err);
              } finally {
                _iterator18.f();
              }
            }
          }
        } catch (err) {
          _iterator17.e(err);
        } finally {
          _iterator17.f();
        }

        return elements;
      }

      function getClassList(classes) {
        var classList = [];

        if (typeof classes === 'string') {
          classList.push(classes);
        } else {
          classList = classes;
        }

        return classList;
      }
      /**
       * The function used to check element is visible or not.
       * @param  {Element|Node} element - An element the need to check visibility
       * @private
       */


      function isVisible(element) {
        var ele = element;
        return ele.style.visibility === '' && ele.offsetWidth > 0;
      }
      /**
       * The function used to insert an array of elements into a first of the element.
       * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.
       * @param  {Element} toElement - An element that is going to prepend.
       * @private
       */


      function prepend(fromElements, toElement, isEval) {
        //tslint:disable:no-any
        if (isObject(toElement)) {
          VirtualDOM.prepend(fromElements, toElement);
        } else {
          var docFrag = document.createDocumentFragment();

          var _iterator19 = _createForOfIteratorHelper(fromElements),
              _step19;

          try {
            for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
              var ele = _step19.value;
              docFrag.appendChild(ele);
            }
          } catch (err) {
            _iterator19.e(err);
          } finally {
            _iterator19.f();
          }

          toElement.insertBefore(docFrag, toElement.firstElementChild);

          if (isEval) {
            executeScript(toElement);
          }
        }

        return fromElements;
      }
      /**
       * The function used to insert an array of elements into last of the element.
       * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.
       * @param  {Element} toElement - An element that is going to prepend.
       * @private
       */


      function append(fromElements, toElement, isEval) {
        if (isObject(toElement)) {
          VirtualDOM.append(fromElements, toElement);
        } else {
          var docFrag = document.createDocumentFragment();

          var _iterator20 = _createForOfIteratorHelper(fromElements),
              _step20;

          try {
            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
              var ele = _step20.value;
              docFrag.appendChild(ele);
            }
          } catch (err) {
            _iterator20.e(err);
          } finally {
            _iterator20.f();
          }

          toElement.appendChild(docFrag);

          if (isEval) {
            executeScript(toElement);
          }
        }

        return fromElements;
      } //tslint: enable:no-any

      /**
       * The function is used to evaluate script from Ajax request
       * @param ele - An element is going to evaluate the script
       */


      function executeScript(ele) {
        var eleArray = ele.querySelectorAll('script');
        eleArray.forEach(function (element) {
          var script = document.createElement('script');
          script.text = element.innerHTML;
          document.head.appendChild(script);
          detach(script);
        });
      }
      /**
       * The function used to remove the element from the
       * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom
       * @private
       */


      function detach(element) {
        if (isObject(element)) {
          return VirtualDOM.detach(element);
        } else {
          var parentNode = element.parentNode;
          return parentNode.removeChild(element);
        }
      }
      /**
       * The function used to remove the element from Dom also clear the bounded events
       * @param  {Element|Node|HTMLElement} element - An element remove from the Dom
       * @private
       */


      function remove(element) {
        if (isObject(element)) {
          VirtualDOM.detach(element);
        } else {
          var parentNode = element.parentNode;
          EventHandler.clearEvents(element);
          parentNode.removeChild(element);
        }
      }
      /**
       * The function helps to set multiple attributes to an element
       * @param  {Element|Node} element - An element that need to set attributes.
       * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.
       * @private
       */


      function attributes(element, attributes) {
        var keys = Object.keys(attributes);
        var ele = element;

        for (var _i9 = 0, _keys8 = keys; _i9 < _keys8.length; _i9++) {
          var key = _keys8[_i9];

          if (isObject(ele)) {
            var iKey = key;

            if (key === 'tabindex') {
              iKey = 'tabIndex';
            }

            ele.attributes[iKey] = attributes[key];
          } else {
            ele.setAttribute(key, attributes[key]);
          }
        }

        return ele;
      }
      /**
       * The function selects the element from giving context.
       * @param  {string} selector - Selector string need fetch element from the
       * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.
       * @private
       */
      //tslint:disable-next-line


      function select(selector) {
        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
        var needsVDOM = arguments.length > 2 ? arguments[2] : undefined;

        if (isObject(context) && needsVDOM) {
          //tslint:disable-next-line
          return VirtualDOM.vDomSelector({
            ele: context,
            selector: selector,
            selectAll: false
          });
        } else {
          return context.querySelector(selector);
        }
      }
      /**
       * The function selects an array of element from the given context.
       * @param  {string} selector - Selector string need fetch element from the
       * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.
       * @private
       */


      function selectAll(selector) {
        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
        var needsVDOM = arguments.length > 2 ? arguments[2] : undefined;

        if (isObject(context) && !needsVDOM) {
          //tslint:disable-next-line
          return VirtualDOM.vDomSelector({
            ele: context,
            selector: selector,
            selectAll: true
          });
        } else {
          var nodeList = context.querySelectorAll(selector);
          return nodeList;
        }
      }
      /**
       * Returns single closest parent element based on class selector.
       * @param  {Element} element - An element that need to find the closest element.
       * @param  {string} selector - A classSelector of closest element.
       * @private
       */


      function closest(element, selector) {
        var el = element;

        if (typeof el.closest === 'function') {
          return el.closest(selector);
        }

        while (el && el.nodeType === 1) {
          if (matches(el, selector)) {
            return el;
          }

          el = el.parentNode;
        }

        return null;
      }
      /**
       * Returns all sibling elements of the given element.
       * @param  {Element|Node} element - An element that need to get siblings.
       * @private
       */


      function siblings(element) {
        var siblings = [];
        var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);

        var _iterator21 = _createForOfIteratorHelper(childNodes),
            _step21;

        try {
          for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
            var curNode = _step21.value;

            if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {
              siblings.push(curNode);
            }
          }
        } catch (err) {
          _iterator21.e(err);
        } finally {
          _iterator21.f();
        }

        return siblings;
      }
      /**
       * set the value if not exist. Otherwise set the existing value
       * @param  {HTMLElement} element - An element to which we need to set value.
       * @param  {string} property - Property need to get or set.
       * @param  {string} value - value need to set.
       * @private
       */


      function getAttributeOrDefault(element, property, value) {
        var attrVal;
        var isObj = isObject(element);

        if (isObj) {
          attrVal = getValue('attributes.' + property, element);
        } else {
          attrVal = element.getAttribute(property);
        }

        if (isNullOrUndefined(attrVal) && value) {
          if (!isObj) {
            element.setAttribute(property, value.toString());
          } else {
            element.attributes[property] = value;
          }

          attrVal = value;
        }

        return attrVal;
      }
      /**
       * Set the style attributes to Html element.
       * @param {HTMLElement} element - Element which we want to set attributes
       * @param {any} attrs - Set the given attributes to element
       * @return {void}
       * @private
       */


      function setStyleAttribute(element, attrs) {
        if (attrs !== undefined) {
          if (isObject(element)) {
            // tslint:disable-next-line:no-any
            VirtualDOM.setStyleAttribute(element, attrs);
          } else {
            Object.keys(attrs).forEach(function (key) {
              // tslint:disable-next-line:no-any
              element.style[key] = attrs[key];
            });
          }
        }
      }
      /**
       * Method for add and remove classes to a dom element.
       * @param {Element} element - Element for add and remove classes
       * @param {string[]} addClasses - List of classes need to be add to the element
       * @param {string[]} removeClasses - List of classes need to be remove from the element
       * @return {void}
       * @private
       */


      function classList(element, addClasses, removeClasses) {
        addClass([element], addClasses);
        removeClass([element], removeClasses);
      }
      /**
       * Method to check whether the element matches the given selector.
       * @param {Element} element - Element to compare with the selector.
       * @param {string} selector - String selector which element will satisfy.
       * @return {void}
       * @private
       */


      function matches(element, selector) {
        //tslint:disable-next-line
        var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;

        if (matches) {
          return matches.call(element, selector);
        } else {
          return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;
        }
      }

      function includeInnerHTML(ele, innerHTML) {
        if (isObject(ele)) {
          if (innerHTML === '') {
            ele.children = [];
          } else {
            var res = VirtualDOM.ConvertHTMLToJSon(innerHTML);

            if (res.length) {
              VirtualDOM.assignParent(res, ele);
              ele.children = res;
            }
          }
        } else {
          ele.innerHTML = innerHTML;
        }
      } //tslint:disable-next-line


      function containsClass(ele, className) {
        if (isObject(ele)) {
          // tslint:disable-next-line:no-any
          return new RegExp('\\b' + className + '\\b', 'i').test(ele.attributes.className);
        } else {
          return ele.classList.contains(className);
        }
      }
      /**
       * Method to check whether the element matches the given selector.
       * @param {} element - Element to compare with the selector.
       * @param {string} selector - String selector which element will satisfy.
       * @return {Element | VirtualObject}
       * @private
       */
      //tslint:disable:no-any


      function cloneNode(element, deep) {
        if (isObject(element)) {
          if (deep) {
            return extend({}, {}, element, true);
          } else {
            return {
              tagName: element.tagName,
              attributes: element.attributes
            };
          }
        } else {
          return element.cloneNode(deep);
        }
      }

      var isColEName = new RegExp('\]');
      /* tslint:enable:no-any */

      /**
       * Base library module is common module for Framework modules like touch,keyboard and etc.,
       * @private
       */

      var Base = /*#__PURE__*/function () {
        /**
         * Base constructor accept options and element
         */
        function Base(options, element) {
          _classCallCheck2(this, Base);

          this.isRendered = false;
          this.isComplexArraySetter = false;
          this.isServerRendered = false;
          this.allowServerDataBinding = true;
          this.isProtectedOnChange = true;
          this.properties = {};
          this.changedProperties = {};
          this.oldProperties = {};
          this.bulkChanges = {};
          this.refreshing = false;
          this.ignoreCollectionWatch = false; // tslint:disable-next-line:no-empty

          this.finalUpdate = function () {};

          this.childChangedProperties = {};
          this.modelObserver = new Observer(this);

          if (!isUndefined(element)) {
            if ('string' === typeof element) {
              this.element = document.querySelector(element);
            } else {
              this.element = element;
            }

            if (!isNullOrUndefined(this.element)) {
              this.isProtectedOnChange = false;
              this.addInstance();
            }
          }

          if (!isUndefined(options)) {
            this.setProperties(options, true);
          }

          this.isDestroyed = false;
        }
        /** Property base section */

        /**
         * Function used to set bunch of property at a time.
         * @private
         * @param  {Object} prop - JSON object which holds components properties.
         * @param  {boolean} muteOnChange? - Specifies to true when we set properties.
         */


        _createClass2(Base, [{
          key: "setProperties",
          value: function setProperties(prop, muteOnChange) {
            var prevDetection = this.isProtectedOnChange;
            this.isProtectedOnChange = !!muteOnChange;
            merge(this, prop);

            if (muteOnChange !== true) {
              merge(this.changedProperties, prop);
              this.dataBind();
            } else if (isBlazor() && this.isRendered) {
              this.serverDataBind(prop);
            }

            this.finalUpdate();
            this.changedProperties = {};
            this.oldProperties = {};
            this.isProtectedOnChange = prevDetection;
          }
        }, {
          key: "clearChanges",
          value: function clearChanges() {
            this.finalUpdate();
            this.changedProperties = {};
            this.oldProperties = {};
            this.childChangedProperties = {};
          }
          /**
           * Bind property changes immediately to components
           */

        }, {
          key: "dataBind",
          value: function dataBind() {
            Base.callChildDataBind(this.childChangedProperties, this);

            if (Object.getOwnPropertyNames(this.changedProperties).length) {
              var prevDetection = this.isProtectedOnChange;
              var newChanges = this.changedProperties;
              var oldChanges = this.oldProperties;
              this.clearChanges();
              this.isProtectedOnChange = true;
              this.onPropertyChanged(newChanges, oldChanges);
              this.isProtectedOnChange = prevDetection;
            }
          }
        }, {
          key: "serverDataBind",

          /* tslint:disable:no-any */
          value: function serverDataBind(newChanges) {
            if (!isBlazor()) {
              return;
            }

            newChanges = newChanges ? newChanges : {};
            extend(this.bulkChanges, {}, newChanges, true);

            if (this.allowServerDataBinding) {
              var sfBlazor = 'sfBlazor';
              window[sfBlazor].updateModel(this);
              this.bulkChanges = {};
            }
          }
          /* tslint:enable:no-any */

        }, {
          key: "saveChanges",
          value: function saveChanges(key, newValue, oldValue) {
            if (isBlazor()) {
              // tslint:disable-next-line:no-any
              var newChanges = {};
              newChanges[key] = newValue;
              this.serverDataBind(newChanges);
            }

            if (this.isProtectedOnChange) {
              return;
            }

            this.oldProperties[key] = oldValue;
            this.changedProperties[key] = newValue;
            this.finalUpdate();
            this.finalUpdate = setImmediate(this.dataBind.bind(this));
          }
        }, {
          key: "addEventListener",

          /** Event Base Section */

          /**
           * Adds the handler to the given event listener.
           * @param {string} eventName - A String that specifies the name of the event
           * @param {Function} listener - Specifies the call to run when the event occurs.
           * @return {void}
           */
          value: function addEventListener(eventName, handler) {
            this.modelObserver.on(eventName, handler);
          }
          /**
           * Removes the handler from the given event listener.
           * @param {string} eventName - A String that specifies the name of the event to remove
           * @param {Function} listener - Specifies the function to remove
           * @return {void}
           */

        }, {
          key: "removeEventListener",
          value: function removeEventListener(eventName, handler) {
            this.modelObserver.off(eventName, handler);
          }
          /**
           * Triggers the handlers in the specified event.
           * @private
           * @param {string} eventName - Specifies the event to trigger for the specified component properties.
           * Can be a custom event, or any of the standard events.
           * @param {Event} eventProp - Additional parameters to pass on to the event properties
           * @param {Function} successHandler - this function will invoke after event successfully triggered
           * @param {Function} errorHandler - this function will invoke after event if it failured to call.
           * @return {void}
           */

        }, {
          key: "trigger",
          value: function trigger(eventName, eventProp, successHandler, errorHandler) {
            var _this10 = this;

            if (this.isDestroyed !== true) {
              var prevDetection = this.isProtectedOnChange;
              this.isProtectedOnChange = false;
              var data = this.modelObserver.notify(eventName, eventProp, successHandler, errorHandler);

              if (isColEName.test(eventName)) {
                var handler = getValue(eventName, this);

                if (handler) {
                  var blazor = 'Blazor';

                  if (window[blazor]) {
                    var promise = handler.call(this, eventProp);

                    if (promise && typeof promise.then === 'function') {
                      if (!successHandler) {
                        data = promise;
                      } else {
                        promise.then(function (data) {
                          if (successHandler) {
                            data = typeof data === 'string' && _this10.modelObserver.isJson(data) ? JSON.parse(data) : data;
                            successHandler.call(_this10, data);
                          }
                        })["catch"](function (data) {
                          if (errorHandler) {
                            data = typeof data === 'string' && _this10.modelObserver.isJson(data) ? JSON.parse(data) : data;
                            errorHandler.call(_this10, data);
                          }
                        });
                      }
                    } else if (successHandler) {
                      successHandler.call(this, eventProp);
                    }
                  } else {
                    handler.call(this, eventProp);

                    if (successHandler) {
                      successHandler.call(this, eventProp);
                    }
                  }
                } else if (successHandler) {
                  successHandler.call(this, eventProp);
                }
              }

              this.isProtectedOnChange = prevDetection;
              return data;
            }
          }
          /**
           * To maintain instance in base class
           */

        }, {
          key: "addInstance",
          value: function addInstance() {
            // Add module class to the root element
            var moduleClass = 'e-' + this.getModuleName().toLowerCase();
            addClass([this.element], ['e-lib', moduleClass]);

            if (!isNullOrUndefined(this.element.ej2_instances)) {
              this.element.ej2_instances.push(this);
            } else {
              setValue('ej2_instances', [this], this.element);
            }
          }
          /**
           * To remove the instance from the element
           */

        }, {
          key: "destroy",
          value: function destroy() {
            var _this11 = this;

            this.element.ej2_instances = this.element.ej2_instances.filter(function (i) {
              return i !== _this11;
            });
            removeClass([this.element], ['e-' + this.getModuleName()]);

            if (this.element.ej2_instances.length === 0) {
              // Remove module class from the root element
              removeClass([this.element], ['e-lib']);
            }

            this.clearChanges();
            this.modelObserver.destroy();
            this.isDestroyed = true;
          }
        }], [{
          key: "callChildDataBind",

          /**
           * Calls for child element data bind
           * @param {Object} obj
           * @param {Object} parent
           * @returns {void}
           */
          // tslint:disable-next-line:no-any
          value: function callChildDataBind(obj, parent) {
            var keys = Object.keys(obj);

            for (var _i10 = 0, _keys9 = keys; _i10 < _keys9.length; _i10++) {
              var key = _keys9[_i10];

              if (parent[key] instanceof Array) {
                var _iterator22 = _createForOfIteratorHelper(parent[key]),
                    _step22;

                try {
                  for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
                    var _obj = _step22.value;

                    if (_obj.dataBind !== undefined) {
                      _obj.dataBind();
                    }
                  }
                } catch (err) {
                  _iterator22.e(err);
                } finally {
                  _iterator22.f();
                }
              } else {
                parent[key].dataBind();
              }
            }
          }
        }]);

        return Base;
      }();
      /**
       * Global function to get the component instance from the rendered element.
       * @param elem Specifies the HTMLElement or element id string.
       * @param comp Specifies the component module name or Component.
       */
      // tslint:disable-next-line:no-any


      function getComponent(elem, comp) {
        var instance;
        var i;
        var ele = typeof elem === 'string' ? document.getElementById(elem) : elem;

        for (i = 0; i < ele.ej2_instances.length; i++) {
          instance = ele.ej2_instances[i];

          if (typeof comp === 'string') {
            var compName = instance.getModuleName();

            if (comp === compName) {
              return instance;
            }
          } else {
            // tslint:disable-next-line:no-any
            if (instance instanceof comp) {
              return instance;
            }
          }
        }

        return undefined;
      }
      /**
       * Function to remove the child instances.
       * @return {void}
       * @private
       */
      // tslint:disable-next-line:no-any


      function removeChildInstance(element) {
        // tslint:disable-next-line:no-any
        var childEle = [].slice.call(element.getElementsByClassName('e-control'));

        for (var i = 0; i < childEle.length; i++) {
          var compName = childEle[i].classList[1].split('e-')[1]; // tslint:disable-next-line:no-any

          var compInstance = getComponent(childEle[i], compName);

          if (!isUndefined(compInstance)) {
            compInstance.destroy();
          }
        }
      }
      /**
       * Returns the Class Object
       * @param {ClassObject} instance - instance of ClassObject
       * @param {string} curKey - key of the current instance
       * @param {Object} defaultValue - default Value
       * @param {Object[]} type
       */


      function getObject(instance, curKey, defaultValue, type) {
        if (!instance.properties.hasOwnProperty(curKey) || !(instance.properties[curKey] instanceof type)) {
          instance.properties[curKey] = createInstance(type, [instance, curKey, defaultValue]);
        }

        return instance.properties[curKey];
      }
      /**
       * Returns object array
       * @param {ClassObject} instance
       * @param {string} curKey
       * @param {Object[]} defaultValue
       * @param type
       * @param {boolean} isSetter
       * @returns {Object[]}
       */


      function getObjectArray(instance, curKey, defaultValue, type, isSetter, isFactory) {
        var result = [];
        var len = defaultValue ? defaultValue.length : 0;

        for (var i = 0; i < len; i++) {
          var curType = type;

          if (isFactory) {
            curType = type(defaultValue[i], instance);
          }

          if (isSetter) {
            var inst = createInstance(curType, [instance, curKey, {}, true]);
            inst.setProperties(defaultValue[i], true);
            result.push(inst);
          } else {
            result.push(createInstance(curType, [instance, curKey, defaultValue[i], false]));
          }
        }

        return result;
      }
      /**
       * Returns the properties of the object
       * @param {Object} defaultValue
       * @param {string} curKey
       */


      function propertyGetter(defaultValue, curKey) {
        return function () {
          if (!this.properties.hasOwnProperty(curKey)) {
            this.properties[curKey] = defaultValue;
          }

          return this.properties[curKey];
        };
      }
      /**
       * Set the properties for the object
       * @param {Object} defaultValue
       * @param {string} curKey
       */


      function propertySetter(defaultValue, curKey) {
        return function (newValue) {
          if (this.properties[curKey] !== newValue) {
            var oldVal = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;
            this.saveChanges(curKey, newValue, oldVal);
            this.properties[curKey] = newValue;
          }
        };
      }
      /**
       * Returns complex objects
       */


      function complexGetter(defaultValue, curKey, type) {
        return function () {
          return getObject(this, curKey, defaultValue, type);
        };
      }
      /**
       * Sets complex objects
       */


      function complexSetter(defaultValue, curKey, type) {
        return function (newValue) {
          getObject(this, curKey, defaultValue, type).setProperties(newValue);
        };
      }

      function complexFactoryGetter(defaultValue, curKey, type) {
        return function () {
          var curType = type({});

          if (this.properties.hasOwnProperty(curKey)) {
            return this.properties[curKey];
          } else {
            return getObject(this, curKey, defaultValue, curType);
          }
        };
      }

      function complexFactorySetter(defaultValue, curKey, type) {
        return function (newValue) {
          var curType = type(newValue, this);
          getObject(this, curKey, defaultValue, curType).setProperties(newValue);
        };
      }

      function complexArrayGetter(defaultValue, curKey, type) {
        return function () {
          var _this12 = this;

          if (!this.properties.hasOwnProperty(curKey)) {
            var defCollection = getObjectArray(this, curKey, defaultValue, type, false);
            this.properties[curKey] = defCollection;
          }

          var ignore = this.controlParent !== undefined && this.controlParent.ignoreCollectionWatch || this.ignoreCollectionWatch;

          if (!this.properties[curKey].hasOwnProperty('push') && !ignore) {
            ['push', 'pop'].forEach(function (extendFunc) {
              var descriptor = {
                value: complexArrayDefinedCallback(extendFunc, curKey, type, _this12.properties[curKey]).bind(_this12),
                configurable: true
              };
              Object.defineProperty(_this12.properties[curKey], extendFunc, descriptor);
            });
          }

          if (!this.properties[curKey].hasOwnProperty('isComplexArray')) {
            Object.defineProperty(this.properties[curKey], 'isComplexArray', {
              value: true
            });
          }

          return this.properties[curKey];
        };
      }

      function complexArraySetter(defaultValue, curKey, type) {
        return function (newValue) {
          this.isComplexArraySetter = true;
          var oldValueCollection = getObjectArray(this, curKey, defaultValue, type, false);
          var newValCollection = getObjectArray(this, curKey, newValue, type, true);
          this.isComplexArraySetter = false;
          this.saveChanges(curKey, newValCollection, oldValueCollection);
          this.properties[curKey] = newValCollection;
        };
      }

      function complexArrayFactorySetter(defaultValue, curKey, type) {
        return function (newValue) {
          var oldValueCollection = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;
          var newValCollection = getObjectArray(this, curKey, newValue, type, true, true);
          this.saveChanges(curKey, newValCollection, oldValueCollection);
          this.properties[curKey] = newValCollection;
        };
      }

      function complexArrayFactoryGetter(defaultValue, curKey, type) {
        return function () {
          var curType = type({});

          if (!this.properties.hasOwnProperty(curKey)) {
            var defCollection = getObjectArray(this, curKey, defaultValue, curType, false);
            this.properties[curKey] = defCollection;
          }

          return this.properties[curKey];
        };
      }

      function complexArrayDefinedCallback(dFunc, curKey, type, prop) {
        /* tslint:disable no-function-expression */
        return function () {
          var keyString = this.propName ? this.getParentKey() + '.' + curKey + '-' : curKey + '-';

          switch (dFunc) {
            case 'push':
              for (var i = 0; i < arguments.length; i++) {
                Array.prototype[dFunc].apply(prop, [i < 0 || arguments.length <= i ? undefined : arguments[i]]);

                var _model = getArrayModel(keyString + (prop.length - 1), i < 0 || arguments.length <= i ? undefined : arguments[i], !this.controlParent, dFunc);

                this.serverDataBind(_model, i < 0 || arguments.length <= i ? undefined : arguments[i], false, dFunc);
              }

              break;

            case 'pop':
              Array.prototype[dFunc].apply(prop);
              var model = getArrayModel(keyString + prop.length, null, !this.controlParent, dFunc);
              this.serverDataBind(model, {
                ejsAction: 'pop'
              }, false, dFunc);
              break;
          }

          return prop;
        };
        /* tslint:enable no-function-expression */
      }

      function getArrayModel(keyString, value, isControlParent, arrayFunction) {
        var modelObject = keyString;

        if (isControlParent) {
          modelObject = {};
          modelObject[keyString] = value;

          if (value && typeof value === 'object') {
            var action = 'ejsAction';
            modelObject[keyString][action] = arrayFunction;
          }
        }

        return modelObject;
      }
      /**
       * Method used to create property. General syntax below.
       * @param  {T} defaultValue? - Specifies the default value of property.
       * ```
       * @Property('TypeScript')
       * propertyName: Type;
       * ```
       * @private
       */


      function Property(defaultValue) {
        return function (target, key) {
          var propertyDescriptor = {
            set: propertySetter(defaultValue, key),
            get: propertyGetter(defaultValue, key),
            enumerable: true,
            configurable: true
          }; //new property creation

          Object.defineProperty(target, key, propertyDescriptor);
          addPropertyCollection(target, key, 'prop', defaultValue);
        };
      }
      /**
       * Method used to create complex property. General syntax below.
       * @param  {T} defaultValue - Specifies the default value of property.
       * @param  {Function} type - Specifies the class type of complex object.
       * ```
       * @Complex<Type>({},Type)
       * propertyName: Type;
       * ```
       * @private
       */


      function Complex(defaultValue, type) {
        return function (target, key) {
          var propertyDescriptor = {
            set: complexSetter(defaultValue, key, type),
            get: complexGetter(defaultValue, key, type),
            enumerable: true,
            configurable: true
          }; //new property creation

          Object.defineProperty(target, key, propertyDescriptor);
          addPropertyCollection(target, key, 'complexProp', defaultValue, type);
        };
      }
      /**
       * Method used to create complex Factory property. General syntax below.
       * @param  {Function} defaultType - Specifies the default value of property.
       * @param  {Function} type - Specifies the class factory type of complex object.
       * ```
       * @ComplexFactory(defaultType, factoryFunction)
       * propertyName: Type1 | Type2;
       * ```
       * @private
       */


      function ComplexFactory(type) {
        return function (target, key) {
          var propertyDescriptor = {
            set: complexFactorySetter({}, key, type),
            get: complexFactoryGetter({}, key, type),
            enumerable: true,
            configurable: true
          }; //new property creation

          Object.defineProperty(target, key, propertyDescriptor);
          addPropertyCollection(target, key, 'complexProp', {}, type);
        };
      }
      /**
       * Method used to create complex array property. General syntax below.
       * @param  {T[]} defaultValue - Specifies the default value of property.
       * @param  {Function} type - Specifies the class type of complex object.
       * ```
       * @Collection([], Type);
       * propertyName: Type;
       * ```
       * @private
       */


      function Collection(defaultValue, type) {
        return function (target, key) {
          var propertyDescriptor = {
            set: complexArraySetter(defaultValue, key, type),
            get: complexArrayGetter(defaultValue, key, type),
            enumerable: true,
            configurable: true
          }; //new property creation

          Object.defineProperty(target, key, propertyDescriptor);
          addPropertyCollection(target, key, 'colProp', defaultValue, type);
        };
      }
      /**
       * Method used to create complex factory array property. General syntax below.
       * @param  {T[]} defaultType - Specifies the default type of property.
       * @param  {Function} type - Specifies the class type of complex object.
       * ```
       * @Collection([], Type);
       * propertyName: Type;
       * ```
       * @private
       */


      function CollectionFactory(type) {
        return function (target, key) {
          var propertyDescriptor = {
            set: complexArrayFactorySetter([], key, type),
            get: complexArrayFactoryGetter([], key, type),
            enumerable: true,
            configurable: true
          }; //new property creation

          Object.defineProperty(target, key, propertyDescriptor);
          addPropertyCollection(target, key, 'colProp', {}, type);
        };
      }
      /**
       * Method used to create event property. General syntax below.
       * @param  {Function} defaultValue? - Specifies the default value of property.
       * @param  {boolean} isComplex? - Specifies the whether it is complex object.
       * ```
       * @Event(()=>{return true;})
       * ```
       * @private
       */


      function Event$1() {
        return function (target, key) {
          var eventDescriptor = {
            set: function set(newValue) {
              var oldValue = this.properties[key];

              if (oldValue !== newValue) {
                var finalContext = getParentContext(this, key);

                if (isUndefined(oldValue) === false) {
                  finalContext.context.removeEventListener(finalContext.prefix, oldValue);
                }

                finalContext.context.addEventListener(finalContext.prefix, newValue);
                this.properties[key] = newValue;
              }
            },
            get: propertyGetter(undefined, key),
            enumerable: true,
            configurable: true
          };
          Object.defineProperty(target, key, eventDescriptor);
          addPropertyCollection(target, key, 'event');
        };
      }
      /**
       * NotifyPropertyChanges is triggers the call back when the property has been changed.
       *
       * ```
       *  @NotifyPropertyChanges
       * class DemoClass implements INotifyPropertyChanged {
       *
       *     @Property()
       *     property1: string;
       *
       *     dataBind: () => void;
       *
       *     constructor() { }
       *
       *     onPropertyChanged(newProp: any, oldProp: any) {
       *         // Called when property changed
       *     }
       * }
       * ```
       * @private
       */


      function NotifyPropertyChanges(classConstructor) {
        /** Need to code */
      }
      /**
       * Method  used to create the builderObject for the target component.
       * @private
       */


      function addPropertyCollection(target, key, propertyType, defaultValue, type) {
        if (isUndefined(target.propList)) {
          target.propList = {
            props: [],
            complexProps: [],
            colProps: [],
            events: [],
            propNames: [],
            complexPropNames: [],
            colPropNames: [],
            eventNames: []
          };
        }
        /* tslint:disable no-any */


        target.propList[propertyType + 's'].push({
          propertyName: key,
          defaultValue: defaultValue,
          type: type
        });
        target.propList[propertyType + 'Names'].push(key);
        /* tslint:enable no-any */
      }
      /**
       * Returns an object containing the builder properties
       * @param {Function} component
       * @private
       */


      function getBuilderProperties(component) {
        if (isUndefined(component.prototype.builderObject)) {
          component.prototype.builderObject = {
            properties: {},
            propCollections: [],
            add: function add() {
              this.isPropertyArray = true;
              this.propCollections.push(extend({}, this.properties, {}));
            }
          };
          var rex = /complex/;

          for (var _i11 = 0, _Object$keys = Object.keys(component.prototype.propList); _i11 < _Object$keys.length; _i11++) {
            var key = _Object$keys[_i11];

            var _iterator23 = _createForOfIteratorHelper(component.prototype.propList[key]),
                _step23;

            try {
              var _loop3 = function _loop3() {
                var prop = _step23.value;

                if (rex.test(key)) {
                  component.prototype.builderObject[prop.propertyName] = function (value) {
                    var childType = {};
                    merge(childType, getBuilderProperties(prop.type));
                    value(childType);
                    var tempValue;

                    if (!childType.isPropertyArray) {
                      tempValue = extend({}, childType.properties, {});
                    } else {
                      tempValue = childType.propCollections;
                    }

                    this.properties[prop.propertyName] = tempValue;
                    childType.properties = {};
                    childType.propCollections = [];
                    childType.isPropertyArray = false;
                    return this;
                  };
                } else {
                  component.prototype.builderObject[prop.propertyName] = function (value) {
                    this.properties[prop.propertyName] = value;
                    return this;
                  };
                }
              };

              for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
                _loop3();
              }
            } catch (err) {
              _iterator23.e(err);
            } finally {
              _iterator23.f();
            }
          }
        }

        return component.prototype.builderObject;
      }
      /**
       * Method used to create builder for the components
       * @param {any} component -specifies the target component for which builder to be created.
       * @private
       */


      function CreateBuilder(component) {
        var builderFunction = function builderFunction(element) {
          this.element = element;
          return this;
        };

        var instanceFunction = function instanceFunction(element) {
          if (!builderFunction.prototype.hasOwnProperty('create')) {
            builderFunction.prototype = getBuilderProperties(component);

            builderFunction.prototype.create = function () {
              var temp = extend({}, {}, this.properties);
              this.properties = {};
              return new component(temp, this.element);
            };
          }

          return new builderFunction(element);
        };

        return instanceFunction;
      }
      /**
       * Returns parent options for the object
       * @param {Object} context
       * @param {string} prefix
       * @private
       */


      function getParentContext(context, prefix) {
        if (context.hasOwnProperty('parentObj') === false) {
          return {
            context: context,
            prefix: prefix
          };
        } else {
          var curText = getValue('propName', context);

          if (curText) {
            prefix = curText + '-' + prefix;
          }

          return getParentContext(getValue('parentObj', context), prefix);
        }
      }

      var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var Animation_1;
      /**
       * The Animation framework provide options to animate the html DOM elements
       * ```typescript
       *   let animeObject = new Animation({
       *      name: 'SlideLeftIn',
       *      duration: 1000
       *   });
       *   animeObject.animate('#anime1');
       *   animeObject.animate('#anime2', { duration: 500 });
       * ```
       */

      var Animation = Animation_1 = /*#__PURE__*/function (_Base) {
        _inherits2(Animation, _Base);

        var _super = _createSuper(Animation);

        function Animation(options) {
          var _this13;

          _classCallCheck2(this, Animation);

          _this13 = _super.call(this, options, undefined);
          /**
           * @private
           */

          _this13.easing = {
            ease: 'cubic-bezier(0.250, 0.100, 0.250, 1.000)',
            linear: 'cubic-bezier(0.250, 0.250, 0.750, 0.750)',
            easeIn: 'cubic-bezier(0.420, 0.000, 1.000, 1.000)',
            easeOut: 'cubic-bezier(0.000, 0.000, 0.580, 1.000)',
            easeInOut: 'cubic-bezier(0.420, 0.000, 0.580, 1.000)',
            elasticInOut: 'cubic-bezier(0.5,-0.58,0.38,1.81)',
            elasticIn: 'cubic-bezier(0.17,0.67,0.59,1.81)',
            elasticOut: 'cubic-bezier(0.7,-0.75,0.99,1.01)'
          };
          return _this13;
        }
        /**
         * Applies animation to the current element.
         * @param {string | HTMLElement} element - Element which needs to be animated.
         * @param {AnimationModel} options - Overriding default animation settings.
         * @return {void}
         */


        _createClass2(Animation, [{
          key: "animate",
          value: function animate(element, options) {
            options = !options ? {} : options;
            var model = this.getModel(options);

            if (typeof element === 'string') {
              var elements = Array.prototype.slice.call(selectAll(element, document));

              var _iterator24 = _createForOfIteratorHelper(elements),
                  _step24;

              try {
                for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
                  var _element = _step24.value;
                  model.element = _element;
                  Animation_1.delayAnimation(model);
                }
              } catch (err) {
                _iterator24.e(err);
              } finally {
                _iterator24.f();
              }
            } else {
              model.element = element;
              Animation_1.delayAnimation(model);
            }
          }
          /**
           * Stop the animation effect on animated element.
           * @param {HTMLElement} element - Element which needs to be stop the animation.
           * @param {AnimationOptions} model - Handling the animation model at stop function.
           * @return {void}
           */

        }, {
          key: "getModel",

          /**
           * Returns Animation Model
           * @param {AnimationModel} options
           * @returns {AnimationModel}
           */
          value: function getModel(options) {
            return {
              name: options.name || this.name,
              delay: options.delay || this.delay,
              duration: options.duration !== undefined ? options.duration : this.duration,
              begin: options.begin || this.begin,
              end: options.end || this.end,
              fail: options.fail || this.fail,
              progress: options.progress || this.progress,
              timingFunction: this.easing[options.timingFunction] ? this.easing[options.timingFunction] : options.timingFunction || this.easing[this.timingFunction]
            };
          }
          /**
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {// no code needed
          }
          /**
           * Returns module name as animation
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'animation';
          }
          /**
           * @private
           */

        }, {
          key: "destroy",
          value: function destroy() {//Override base destroy;
          }
        }], [{
          key: "stop",
          value: function stop(element, model) {
            element.style.animation = '';
            element.removeAttribute('e-animate');
            var animationId = element.getAttribute('e-animation-id');

            if (animationId) {
              var frameId = parseInt(animationId, 10);
              cancelAnimationFrame(frameId);
              element.removeAttribute('e-animation-id');
            }

            if (model && model.end) {
              model.end.call(this, model);
            }
          }
          /**
           * Set delay to animation element
           * @param {AnimationModel} model
           * @returns {void}
           */

        }, {
          key: "delayAnimation",
          value: function delayAnimation(model) {
            if (model.delay) {
              setTimeout(function () {
                Animation_1.applyAnimation(model);
              }, model.delay);
            } else {
              Animation_1.applyAnimation(model);
            }
          }
          /**
           * Triggers animation
           * @param {AnimationModel} model
           * @returns {void}
           */

        }, {
          key: "applyAnimation",
          value: function applyAnimation(model) {
            var _this14 = this;

            model.timeStamp = 0;
            var step = 0;
            var timerId = 0;
            var startTime = 0;
            var prevTimeStamp = 0;
            var duration = model.duration;
            model.element.setAttribute('e-animate', 'true');

            var startAnimation = function startAnimation(timeStamp) {
              try {
                if (timeStamp) {
                  // let step: number = model.timeStamp = timeStamp - startTime;

                  /** phantomjs workaround for timestamp fix */
                  prevTimeStamp = prevTimeStamp === 0 ? timeStamp : prevTimeStamp;
                  model.timeStamp = timeStamp + model.timeStamp - prevTimeStamp;
                  prevTimeStamp = timeStamp;
                  /** phantomjs workaround end */
                  // trigger animation begin event

                  if (!step && model.begin) {
                    model.begin.call(_this14, model);
                  }

                  step = step + 1;
                  var avg = model.timeStamp / step;

                  if (model.timeStamp < duration && model.timeStamp + avg < duration && model.element.getAttribute('e-animate')) {
                    // apply animation effect to the current element                
                    model.element.style.animation = model.name + ' ' + model.duration + 'ms ' + model.timingFunction;

                    if (model.progress) {
                      model.progress.call(_this14, model);
                    } // repeat requestAnimationFrame 


                    requestAnimationFrame(startAnimation);
                  } else {
                    // clear requestAnimationFrame
                    cancelAnimationFrame(timerId);
                    model.element.removeAttribute('e-animation-id');
                    model.element.removeAttribute('e-animate');
                    model.element.style.animation = '';

                    if (model.end) {
                      model.end.call(_this14, model);
                    }
                  }
                } else {
                  startTime = performance.now(); // set initial requestAnimationFrame

                  timerId = requestAnimationFrame(startAnimation);
                  model.element.setAttribute('e-animation-id', timerId.toString());
                }
              } catch (e) {
                cancelAnimationFrame(timerId);
                model.element.removeAttribute('e-animation-id');

                if (model.fail) {
                  model.fail.call(_this14, e);
                }
              }
            };

            startAnimation();
          }
        }]);

        return Animation;
      }(Base);

      __decorate([Property('FadeIn')], Animation.prototype, "name", void 0);

      __decorate([Property(400)], Animation.prototype, "duration", void 0);

      __decorate([Property('ease')], Animation.prototype, "timingFunction", void 0);

      __decorate([Property(0)], Animation.prototype, "delay", void 0);

      __decorate([Event$1()], Animation.prototype, "progress", void 0);

      __decorate([Event$1()], Animation.prototype, "begin", void 0);

      __decorate([Event$1()], Animation.prototype, "end", void 0);

      __decorate([Event$1()], Animation.prototype, "fail", void 0);

      Animation = Animation_1 = __decorate([NotifyPropertyChanges], Animation);
      /**
       * Ripple provides material theme's wave effect when an element is clicked
       * ```html
       * <div id='ripple'></div>
       * <script>
       *   rippleEffect(document.getElementById('ripple'));
       * </script>
       * ```
       * @private
       * @param HTMLElement element - Target element
       * @param RippleOptions rippleOptions - Ripple options .
       */

      function rippleEffect(element, rippleOptions, done) {
        var rippleModel = getRippleModel(rippleOptions);

        if (rippleModel.rippleFlag === false || rippleModel.rippleFlag === undefined && !isRippleEnabled) {
          return Function;
        }

        element.setAttribute('data-ripple', 'true');
        EventHandler.add(element, 'mousedown', rippleHandler, {
          parent: element,
          rippleOptions: rippleModel
        });
        EventHandler.add(element, 'mouseup', rippleUpHandler, {
          parent: element,
          rippleOptions: rippleModel,
          done: done
        });
        EventHandler.add(element, 'mouseleave', rippleLeaveHandler, {
          parent: element,
          rippleOptions: rippleModel
        });

        if (Browser.isPointer) {
          EventHandler.add(element, 'transitionend', rippleLeaveHandler, {
            parent: element,
            rippleOptions: rippleModel
          });
        }

        return function () {
          element.removeAttribute('data-ripple');
          EventHandler.remove(element, 'mousedown', rippleHandler);
          EventHandler.remove(element, 'mouseup', rippleUpHandler);
          EventHandler.remove(element, 'mouseleave', rippleLeaveHandler);
          EventHandler.remove(element, 'transitionend', rippleLeaveHandler);
        };
      }

      function getRippleModel(rippleOptions) {
        var rippleModel = {
          selector: rippleOptions && rippleOptions.selector ? rippleOptions.selector : null,
          ignore: rippleOptions && rippleOptions.ignore ? rippleOptions.ignore : null,
          rippleFlag: rippleOptions && rippleOptions.rippleFlag,
          isCenterRipple: rippleOptions && rippleOptions.isCenterRipple,
          duration: rippleOptions && rippleOptions.duration ? rippleOptions.duration : 350
        };
        return rippleModel;
      }
      /**
       * Handler for ripple event
       * @param {MouseEvent} e
       * @returns {void}
       * @private
       */


      function rippleHandler(e) {
        var target = e.target;
        var selector = this.rippleOptions.selector;
        var element = selector ? closest(target, selector) : target;

        if (!element || this.rippleOptions && closest(target, this.rippleOptions.ignore)) {
          return;
        }

        var offset = element.getBoundingClientRect();
        var offsetX = e.pageX - document.body.scrollLeft;
        var offsetY = e.pageY - (!document.body.scrollTop && document.documentElement ? document.documentElement.scrollTop : document.body.scrollTop);
        var pageX = Math.max(Math.abs(offsetX - offset.left), Math.abs(offsetX - offset.right));
        var pageY = Math.max(Math.abs(offsetY - offset.top), Math.abs(offsetY - offset.bottom));
        var radius = Math.sqrt(pageX * pageX + pageY * pageY);
        var diameter = radius * 2 + 'px';
        var x = offsetX - offset.left - radius;
        var y = offsetY - offset.top - radius;

        if (this.rippleOptions && this.rippleOptions.isCenterRipple) {
          x = 0;
          y = 0;
          diameter = '100%';
        }

        element.classList.add('e-ripple');
        var duration = this.rippleOptions.duration.toString();
        var styles = 'width: ' + diameter + ';height: ' + diameter + ';left: ' + x + 'px;top: ' + y + 'px;' + 'transition-duration: ' + duration + 'ms;';

        var rippleElement = _createElement('div', {
          className: 'e-ripple-element',
          styles: styles
        });

        element.appendChild(rippleElement);
        window.getComputedStyle(rippleElement).getPropertyValue('opacity');
        rippleElement.style.transform = 'scale(1)';

        if (element !== this.parent) {
          EventHandler.add(element, 'mouseleave', rippleLeaveHandler, {
            parent: this.parent,
            rippleOptions: this.rippleOptions
          });
        }
      }
      /**
       * Handler for ripple element mouse up event
       * @param {MouseEvent} e
       * @returns {void}
       * @private
       */


      function rippleUpHandler(e) {
        removeRipple(e, this);
      }
      /**
       * Handler for ripple element mouse move event
       * @param {MouseEvent} e
       * @returns {void}
       * @private
       */


      function rippleLeaveHandler(e) {
        removeRipple(e, this);
      }
      /**
       * Handler for removing ripple element
       * @param {MouseEvent} e
       * @param {rippleArgs} eventArgs
       * @returns {void}
       * @private
       */


      function removeRipple(e, eventArgs) {
        var duration = eventArgs.rippleOptions.duration;
        var target = e.target;
        var selector = eventArgs.rippleOptions.selector;
        var element = selector ? closest(target, selector) : target;

        if (!element || element && element.className.indexOf('e-ripple') === -1) {
          return;
        }

        var rippleElements = selectAll('.e-ripple-element', element);
        var rippleElement = rippleElements[rippleElements.length - 1];

        if (rippleElement) {
          rippleElement.style.opacity = '0.5';
        }

        if (eventArgs.parent !== element) {
          EventHandler.remove(element, 'mouseleave', rippleLeaveHandler);
        }
        /* tslint:disable:align */


        setTimeout(function () {
          if (rippleElement && rippleElement.parentNode) {
            rippleElement.parentNode.removeChild(rippleElement);
          }

          if (!element.getElementsByClassName('e-ripple-element').length) {
            element.classList.remove('e-ripple');
          }

          if (eventArgs.done) {
            eventArgs.done(e);
          }
        }, duration);
      }

      var isRippleEnabled = false;
      /**
       * Animation Module provides support to enable ripple effect functionality to Essential JS 2 components.
       * @param {boolean} isRipple Specifies the boolean value to enable or disable ripple effect.
       * @returns {boolean}
       */

      function enableRipple(isRipple) {
        isRippleEnabled = isRipple;
        return isRippleEnabled;
      }
      /**
       * Module loading operations
       */


      var MODULE_SUFFIX = 'Module';

      var ModuleLoader = /*#__PURE__*/function () {
        function ModuleLoader(parent) {
          _classCallCheck2(this, ModuleLoader);

          this.loadedModules = [];
          this.parent = parent;
        }

        _createClass2(ModuleLoader, [{
          key: "inject",

          /**
           * Inject required modules in component library
           * @return {void}
           * @param {ModuleDeclaration[]} requiredModules - Array of modules to be required
           * @param {Function[]} moduleList - Array of modules to be injected from sample side
           */
          value: function inject(requiredModules, moduleList) {
            var reqLength = requiredModules.length;

            if (reqLength === 0) {
              this.clean();
              return;
            }

            if (this.loadedModules.length) {
              this.clearUnusedModule(requiredModules);
            }

            for (var i = 0; i < reqLength; i++) {
              var modl = requiredModules[i];

              var _iterator25 = _createForOfIteratorHelper(moduleList),
                  _step25;

              try {
                for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
                  var _module = _step25.value;
                  var modName = modl.member;

                  if (_module.prototype.getModuleName() === modl.member && !this.isModuleLoaded(modName)) {
                    var moduleObject = createInstance(_module, modl.args);
                    var memberName = this.getMemberName(modName);

                    if (modl.isProperty) {
                      setValue(memberName, _module, this.parent);
                    } else {
                      setValue(memberName, moduleObject, this.parent);
                    }

                    var loadedModule = modl;
                    loadedModule.member = memberName;
                    this.loadedModules.push(loadedModule);
                  }
                }
              } catch (err) {
                _iterator25.e(err);
              } finally {
                _iterator25.f();
              }
            }
          }
          /**
           * To remove the created object while destroying the control
           * @return {void}
           */

        }, {
          key: "clean",
          value: function clean() {
            var _iterator26 = _createForOfIteratorHelper(this.loadedModules),
                _step26;

            try {
              for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
                var modules = _step26.value;

                if (!modules.isProperty) {
                  getValue(modules.member, this.parent).destroy();
                }
              }
            } catch (err) {
              _iterator26.e(err);
            } finally {
              _iterator26.f();
            }

            this.loadedModules = [];
          }
          /**
           * Removes all unused modules
           * @param {ModuleDeclaration[]} moduleList
           * @returns {void}
           */

        }, {
          key: "clearUnusedModule",
          value: function clearUnusedModule(moduleList) {
            var _this15 = this;

            var usedModules = moduleList.map(function (arg) {
              return _this15.getMemberName(arg.member);
            });
            var removableModule = this.loadedModules.filter(function (module) {
              return usedModules.indexOf(module.member) === -1;
            });

            var _iterator27 = _createForOfIteratorHelper(removableModule),
                _step27;

            try {
              for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
                var mod = _step27.value;

                if (!mod.isProperty) {
                  getValue(mod.member, this.parent).destroy();
                }

                this.loadedModules.splice(this.loadedModules.indexOf(mod), 1);
                deleteObject(this.parent, mod.member);
              }
            } catch (err) {
              _iterator27.e(err);
            } finally {
              _iterator27.f();
            }
          }
          /**
           * To get the name of the member.
           * @param {string} name
           * @returns {string}
           */

        }, {
          key: "getMemberName",
          value: function getMemberName(name) {
            return name[0].toLowerCase() + name.substring(1) + MODULE_SUFFIX;
          }
          /**
           * Returns boolean based on whether the module specified is loaded or not
           * @param {string} modName
           * @returns {boolean}
           */

        }, {
          key: "isModuleLoaded",
          value: function isModuleLoaded(modName) {
            var _iterator28 = _createForOfIteratorHelper(this.loadedModules),
                _step28;

            try {
              for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
                var mod = _step28.value;

                if (mod.member === this.getMemberName(modName)) {
                  return true;
                }
              }
            } catch (err) {
              _iterator28.e(err);
            } finally {
              _iterator28.f();
            }

            return false;
          }
        }]);

        return ModuleLoader;
      }();
      /**
       * To detect the changes for inner properties.
       * @private
       */


      var ChildProperty = /*#__PURE__*/function () {
        function ChildProperty(parent, propName, defaultValue, isArray) {
          _classCallCheck2(this, ChildProperty);

          this.isComplexArraySetter = false;
          this.properties = {};
          this.changedProperties = {};
          this.childChangedProperties = {};
          this.oldProperties = {}; // tslint:disable-next-line:no-empty

          this.finalUpdate = function () {};

          this.callChildDataBind = getValue('callChildDataBind', Base);
          this.parentObj = parent;
          this.controlParent = this.parentObj.controlParent || this.parentObj;
          this.propName = propName;
          this.isParentArray = isArray;
          this.setProperties(defaultValue, true);
        }
        /**
         * Updates the property changes
         * @param {boolean} val
         * @param {string} propName
         * @returns {void}
         */


        _createClass2(ChildProperty, [{
          key: "updateChange",
          value: function updateChange(val, propName) {
            if (val === true) {
              this.parentObj.childChangedProperties[propName] = val;
            } else {
              delete this.parentObj.childChangedProperties[propName];
            }

            if (this.parentObj.updateChange) {
              this.parentObj.updateChange(val, this.parentObj.propName);
            }
          }
          /**
           * Updates time out duration
           */

        }, {
          key: "updateTimeOut",
          value: function updateTimeOut() {
            if (this.parentObj.updateTimeOut) {
              this.parentObj.finalUpdate();
              this.parentObj.updateTimeOut();
            } else {
              var changeTime = setTimeout(this.parentObj.dataBind.bind(this.parentObj));

              var clearUpdate = function clearUpdate() {
                clearTimeout(changeTime);
              };

              this.finalUpdate = clearUpdate;
            }
          }
          /**
           * Clears changed properties
           */

        }, {
          key: "clearChanges",
          value: function clearChanges() {
            this.finalUpdate();
            this.updateChange(false, this.propName);
            this.oldProperties = {};
            this.changedProperties = {};
          }
          /**
           * Set property changes
           * @param {Object} prop
           * @param {boolean} muteOnChange
           * {void}
           */

        }, {
          key: "setProperties",
          value: function setProperties(prop, muteOnChange) {
            if (muteOnChange === true) {
              merge(this, prop);
              this.updateChange(false, this.propName);
              this.clearChanges();
            } else {
              merge(this, prop);
            }
          }
          /**
           * Binds data
           */

        }, {
          key: "dataBind",
          value: function dataBind() {
            this.callChildDataBind(this.childChangedProperties, this);

            if (this.isParentArray) {
              var curIndex = this.parentObj[this.propName].indexOf(this);

              if (Object.keys(this.changedProperties).length) {
                setValue(this.propName + '.' + curIndex, this.changedProperties, this.parentObj.changedProperties);
                setValue(this.propName + '.' + curIndex, this.oldProperties, this.parentObj.oldProperties);
              }
            } else {
              this.parentObj.changedProperties[this.propName] = this.changedProperties;
              this.parentObj.oldProperties[this.propName] = this.oldProperties;
            }

            this.clearChanges();
          }
          /**
           * Saves changes to newer values
           * @param {string} key
           * @param {Object} newValue
           * @param {Object} oldValue
           * @returns {void}
           */

        }, {
          key: "saveChanges",
          value: function saveChanges(key, newValue, oldValue, restrictServerDataBind) {
            if (this.controlParent.isProtectedOnChange) {
              return;
            }

            if (!restrictServerDataBind) {
              this.serverDataBind(key, newValue, true);
            }

            this.oldProperties[key] = oldValue;
            this.changedProperties[key] = newValue;
            this.updateChange(true, this.propName);
            this.finalUpdate();
            this.updateTimeOut();
          }
        }, {
          key: "serverDataBind",
          value: function serverDataBind(key, value, isSaveChanges, action) {
            if (isBlazor() && !this.parentObj.isComplexArraySetter) {
              // tslint:disable-next-line:no-any
              var parent;
              var newChanges = {};
              var parentKey = isSaveChanges ? this.getParentKey(true) + '.' + key : key;
              /* istanbul ignore else  */

              if (parentKey.indexOf('.') !== -1) {
                var complexKeys = parentKey.split('.');
                parent = newChanges;

                for (var i = 0; i < complexKeys.length; i++) {
                  var isFinal = i === complexKeys.length - 1;
                  parent[complexKeys[i]] = isFinal ? value : {};
                  parent = isFinal ? parent : parent[complexKeys[i]];
                }
              } else {
                newChanges[parentKey] = {};
                parent = newChanges[parentKey];
                newChanges[parentKey][key] = value;
              }
              /* istanbul ignore next */


              if (this.isParentArray) {
                var actionProperty = 'ejsAction';
                parent[actionProperty] = action ? action : 'none';
              }

              this.controlParent.serverDataBind(newChanges);
            }
          }
        }, {
          key: "getParentKey",
          value: function getParentKey(isSaveChanges) {
            // tslint:disable-next-line:no-any
            var index = '';
            var propName = this.propName;
            /* istanbul ignore next */

            if (this.isParentArray) {
              index = this.parentObj[this.propName].indexOf(this);
              var valueLength = this.parentObj[this.propName].length;
              valueLength = isSaveChanges ? valueLength : valueLength > 0 ? valueLength - 1 : 0;
              index = index !== -1 ? '-' + index : '-' + valueLength;
              propName = propName + index;
            }

            if (this.controlParent !== this.parentObj) {
              propName = this.parentObj.getParentKey() + '.' + this.propName + index;
            }

            return propName;
          }
        }]);

        return ChildProperty;
      }();

      var __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var componentCount = 0;
      var lastPageID;
      var lastHistoryLen = 0;
      /**
       * Base class for all Essential JavaScript components
       */

      var Component = /*#__PURE__*/function (_Base2) {
        _inherits2(Component, _Base2);

        var _super2 = _createSuper(Component);

        /**
         * Initialize the constructor for component base
         */
        function Component(options, selector) {
          var _this16;

          _classCallCheck2(this, Component);

          _this16 = _super2.call(this, options, selector);
          _this16.randomId = uniqueID();
          /**
           * string template option for Blazor template rendering
           * @private
           */

          _this16.isStringTemplate = false;
          _this16.needsID = false;
          _this16.isReactHybrid = false;

          if (isNullOrUndefined(_this16.enableRtl)) {
            _this16.setProperties({
              'enableRtl': rightToLeft
            }, true);
          }

          if (isNullOrUndefined(_this16.locale)) {
            _this16.setProperties({
              'locale': defaultCulture
            }, true);
          }

          _this16.moduleLoader = new ModuleLoader(_assertThisInitialized2(_this16));
          _this16.localObserver = new Observer(_assertThisInitialized2(_this16)); // tslint:disable-next-line:no-function-constructor-with-string-args

          onIntlChange.on('notifyExternalChange', _this16.detectFunction, _assertThisInitialized2(_this16), _this16.randomId);

          if (!isUndefined(selector)) {
            _this16.appendTo();
          }

          return _this16;
        }

        _createClass2(Component, [{
          key: "requiredModules",
          value: function requiredModules() {
            return [];
          }
        }, {
          key: "destroy",

          /**
           * Destroys the sub modules while destroying the widget
           */
          value: function destroy() {
            if (this.isDestroyed) {
              return;
            }

            if (this.enablePersistence) {
              this.setPersistData();
            }

            this.localObserver.destroy();

            if (this.refreshing) {
              return;
            }

            removeClass([this.element], ['e-control']);
            this.trigger('destroyed', {
              cancel: false
            });

            _get2(_getPrototypeOf2(Component.prototype), "destroy", this).call(this);

            this.moduleLoader.clean();
            onIntlChange.off('notifyExternalChange', this.detectFunction, this.randomId);
          }
          /**
           * Applies all the pending property changes and render the component again.
           */

        }, {
          key: "refresh",
          value: function refresh() {
            this.refreshing = true;
            this.moduleLoader.clean();
            this.destroy();
            this.clearChanges();
            this.localObserver = new Observer(this);
            this.preRender();
            this.injectModules();
            this.render();
            this.refreshing = false;
          }
        }, {
          key: "accessMount",
          value: function accessMount() {
            if (this.mount && !this.isReactHybrid) {
              this.mount();
            }
          }
          /**
           * Returns the route element of the component
           */

        }, {
          key: "getRootElement",
          value: function getRootElement() {
            if (this.isReactHybrid) {
              return this.actualElement;
            } else {
              return this.element;
            }
          }
          /**
           * Appends the control within the given HTML element
           * @param {string | HTMLElement} selector - Target element where control needs to be appended
           */

        }, {
          key: "appendTo",
          value: function appendTo(selector) {
            if (!isNullOrUndefined(selector) && typeof selector === 'string') {
              this.element = document.querySelector(selector);
            } else if (!isNullOrUndefined(selector)) {
              this.element = selector;
            }

            if (!isNullOrUndefined(this.element)) {
              var moduleClass = 'e-' + this.getModuleName().toLowerCase();
              addClass([this.element], ['e-control', moduleClass]);
              this.isProtectedOnChange = false;

              if (this.needsID && !this.element.id) {
                this.element.id = this.getUniqueID(this.getModuleName());
              }

              if (this.enablePersistence) {
                this.mergePersistData();
                window.addEventListener('unload', this.setPersistData.bind(this));
              }

              var inst = getValue('ej2_instances', this.element);

              if (!inst || inst.indexOf(this) === -1) {
                _get2(_getPrototypeOf2(Component.prototype), "addInstance", this).call(this);
              }

              this.preRender();
              this.injectModules();
              this.render();

              if (!this.mount) {
                this.trigger('created');
              } else {
                this.accessMount();
              }
            }
          }
          /**
           * It is used to process the post rendering functionalities to a component.
           */

        }, {
          key: "renderComplete",
          value: function renderComplete(wrapperElement) {
            if (isBlazor()) {
              var sfBlazor = 'sfBlazor'; // tslint:disable-next-line:no-any

              window[sfBlazor].renderComplete(this.element, wrapperElement);
            }

            this.isRendered = true;
          }
          /**
           * When invoked, applies the pending property changes immediately to the component.
           */

        }, {
          key: "dataBind",
          value: function dataBind() {
            this.injectModules();

            _get2(_getPrototypeOf2(Component.prototype), "dataBind", this).call(this);
          }
        }, {
          key: "on",

          /**
           * Attach one or more  event handler to the current component context.
           * It is used for internal handling event internally within the component only.
           * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.
           * @param {Function} handler - optional parameter Specifies the handler to run when the event occurs
           * @param {Object} context - optional parameter Specifies the context to be bind in the handler.
           * @return {void}
           * @private
           */
          value: function on(event, handler, context) {
            if (typeof event === 'string') {
              this.localObserver.on(event, handler, context);
            } else {
              var _iterator29 = _createForOfIteratorHelper(event),
                  _step29;

              try {
                for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
                  var arg = _step29.value;
                  this.localObserver.on(arg.event, arg.handler, arg.context);
                }
              } catch (err) {
                _iterator29.e(err);
              } finally {
                _iterator29.f();
              }
            }
          }
          /**
           * To remove one or more event handler that has been attached with the on() method.
           * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.
           * @param {Function} handler - optional parameter Specifies the function to run when the event occurs
           * @return {void}
           * @private
           */

        }, {
          key: "off",
          value: function off(event, handler) {
            if (typeof event === 'string') {
              this.localObserver.off(event, handler);
            } else {
              var _iterator30 = _createForOfIteratorHelper(event),
                  _step30;

              try {
                for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
                  var arg = _step30.value;
                  this.localObserver.off(arg.event, arg.handler);
                }
              } catch (err) {
                _iterator30.e(err);
              } finally {
                _iterator30.f();
              }
            }
          }
          /**
           * To notify the handlers in the specified event.
           * @param {string} property - Specifies the event to be notify.
           * @param {Object} argument - Additional parameters to pass while calling the handler.
           * @return {void}
           * @private
           */

        }, {
          key: "notify",
          value: function notify(property, argument) {
            if (this.isDestroyed !== true) {
              this.localObserver.notify(property, argument);
            }
          }
          /**
           * Get injected modules
           * @private
           */

        }, {
          key: "getInjectedModules",
          value: function getInjectedModules() {
            return this.injectedModules;
          }
        }, {
          key: "createElement",

          /**
           * This is a instance method to create an element.
           * @private
           */
          //tslint:disable:no-any
          value: function createElement(tagName, prop, isVDOM) {
            if (isVDOM && this.isReactHybrid) {
              if (prop) {
                prop = {};
              }

              prop['data-id'] = getRandomId();
              return VirtualDOM.createElement(tagName, prop);
            } else {
              return _createElement(tagName, prop);
            }
          }
          /**
           *
           * @param handler - handler to be triggered after state Updated.
           * @param argument - Arguments to be passed to caller.
           * @private
           */
          //tslint:disable:no-any

        }, {
          key: "triggerStateChange",
          value: function triggerStateChange(handler, argument) {
            if (this.isReactHybrid) {
              //tslint:disable:no-any
              this.setState();
              this.currentContext = {
                calls: handler,
                args: argument
              };
            }
          } // tslint: enable: no-any

        }, {
          key: "injectModules",
          value: function injectModules() {
            if (this.injectedModules && this.injectedModules.length) {
              this.moduleLoader.inject(this.requiredModules(), this.injectedModules);
            }
          }
        }, {
          key: "detectFunction",
          value: function detectFunction(args) {
            var prop = Object.keys(args);

            if (prop.length) {
              this[prop[0]] = args[prop[0]];
            }
          }
        }, {
          key: "mergePersistData",
          value: function mergePersistData() {
            var data = window.localStorage.getItem(this.getModuleName() + this.element.id);

            if (!(isNullOrUndefined(data) || data === '')) {
              this.setProperties(JSON.parse(data), true);
            }
          }
        }, {
          key: "setPersistData",
          value: function setPersistData() {
            if (!this.isDestroyed) {
              window.localStorage.setItem(this.getModuleName() + this.element.id, this.getPersistData());
            }
          } //tslint:disable-next-line

        }, {
          key: "clearTemplate",
          value: function clearTemplate(templateName, index) {//No Code
          }
        }, {
          key: "getUniqueID",
          value: function getUniqueID(definedName) {
            if (this.isHistoryChanged()) {
              componentCount = 0;
            }

            lastPageID = this.pageID(location.href);
            lastHistoryLen = history.length;
            return definedName + '_' + lastPageID + '_' + componentCount++;
          }
        }, {
          key: "pageID",
          value: function pageID(url) {
            var hash = 0;

            if (url.length === 0) {
              return hash;
            }

            for (var i = 0; i < url.length; i++) {
              var _char4 = url.charCodeAt(i);

              hash = (hash << 5) - hash + _char4;
              hash = hash & hash; // Convert to 32bit integer
            }

            return Math.abs(hash);
          }
        }, {
          key: "isHistoryChanged",
          value: function isHistoryChanged() {
            return lastPageID !== this.pageID(location.href) || lastHistoryLen !== history.length;
          }
        }, {
          key: "addOnPersist",
          value: function addOnPersist(options) {
            var _this17 = this;

            var persistObj = {};

            var _iterator31 = _createForOfIteratorHelper(options),
                _step31;

            try {
              for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
                var key = _step31.value;
                var objValue = void 0;
                objValue = getValue(key, this);

                if (!isUndefined(objValue)) {
                  setValue(key, this.getActualProperties(objValue), persistObj);
                }
              }
            } catch (err) {
              _iterator31.e(err);
            } finally {
              _iterator31.f();
            }

            return JSON.stringify(persistObj, function (key, value) {
              return _this17.getActualProperties(value);
            });
          }
        }, {
          key: "getActualProperties",
          value: function getActualProperties(obj) {
            if (obj instanceof ChildProperty) {
              return getValue('properties', obj);
            } else {
              return obj;
            }
          }
        }, {
          key: "ignoreOnPersist",
          value: function ignoreOnPersist(options) {
            return JSON.stringify(this.iterateJsonProperties(this.properties, options));
          }
        }, {
          key: "iterateJsonProperties",
          value: function iterateJsonProperties(obj, ignoreList) {
            var _this18 = this;

            var newObj = {};

            var _loop4 = function _loop4() {
              var key = _Object$keys2[_i12];

              if (ignoreList.indexOf(key) === -1) {
                // tslint:disable-next-line:no-any
                var value = obj[key];

                if (typeof value === 'object' && !(value instanceof Array)) {
                  var newList = ignoreList.filter(function (str) {
                    return new RegExp(key + '.').test(str);
                  }).map(function (str) {
                    return str.replace(key + '.', '');
                  });
                  newObj[key] = _this18.iterateJsonProperties(_this18.getActualProperties(value), newList);
                } else {
                  newObj[key] = value;
                }
              }
            };

            for (var _i12 = 0, _Object$keys2 = Object.keys(obj); _i12 < _Object$keys2.length; _i12++) {
              _loop4();
            }

            return newObj;
          }
        }], [{
          key: "Inject",

          /**
           * Dynamically injects the required modules to the component.
           */
          value: function Inject() {
            if (!this.prototype.injectedModules) {
              this.prototype.injectedModules = [];
            }

            for (var _len3 = arguments.length, moduleList = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              moduleList[_key3] = arguments[_key3];
            }

            for (var i = 0; i < moduleList.length; i++) {
              if (this.prototype.injectedModules.indexOf(moduleList[i]) === -1) {
                this.prototype.injectedModules.push(moduleList[i]);
              }
            }
          }
        }]);

        return Component;
      }(Base);

      __decorate$1([Property(false)], Component.prototype, "enablePersistence", void 0);

      __decorate$1([Property()], Component.prototype, "enableRtl", void 0);

      __decorate$1([Property()], Component.prototype, "locale", void 0);

      Component = __decorate$1([NotifyPropertyChanges], Component); //Function handling for page navigation detection 

      /* istanbul ignore next */

      (function () {
        if (typeof window !== 'undefined') {
          window.addEventListener('popstate',
          /* istanbul ignore next */
          function () {
            componentCount = 0;
          });
        }
      })();

      var __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var Draggable_1;
      var defaultPosition = {
        left: 0,
        top: 0,
        bottom: 0,
        right: 0
      };
      var isDraggedObject = {
        isDragged: false
      };
      /**
       * Specifies the position coordinates
       */

      var Position = /*#__PURE__*/function (_ChildProperty) {
        _inherits2(Position, _ChildProperty);

        var _super3 = _createSuper(Position);

        function Position() {
          _classCallCheck2(this, Position);

          return _super3.apply(this, arguments);
        }

        return Position;
      }(ChildProperty);

      __decorate$2([Property(0)], Position.prototype, "left", void 0);

      __decorate$2([Property(0)], Position.prototype, "top", void 0);
      /**
       * Draggable Module provides support to enable draggable functionality in Dom Elements.
       * ```html
       * <div id='drag'>Draggable</div>
       * <script>
       * var ele = document.getElementById('drag');
       * var drag:Draggable = new Draggable(ele,{
       *     clone:false,
       *     drag: function(e) {
       *      //drag handler code.
       *      },
       *     handle:'.class'
       * });
       * </script>
       * ```
       */


      var Draggable = Draggable_1 = /*#__PURE__*/function (_Base3) {
        _inherits2(Draggable, _Base3);

        var _super4 = _createSuper(Draggable);

        function Draggable(element, options) {
          var _this19;

          _classCallCheck2(this, Draggable);

          _this19 = _super4.call(this, options, element);
          _this19.dragLimit = Draggable_1.getDefaultPosition();
          _this19.borderWidth = Draggable_1.getDefaultPosition();
          _this19.padding = Draggable_1.getDefaultPosition();
          _this19.diffX = 0;
          _this19.prevLeft = 0;
          _this19.prevTop = 0;
          _this19.dragProcessStarted = false;
          /* tslint:disable no-any */

          _this19.tapHoldTimer = 0;
          _this19.externalInitialize = false;
          _this19.diffY = 0;
          _this19.parentScrollX = 0;
          _this19.parentScrollY = 0;
          _this19.droppables = {};

          _this19.bind();

          return _this19;
        }

        _createClass2(Draggable, [{
          key: "bind",
          value: function bind() {
            this.toggleEvents();

            if (Browser.isIE) {
              addClass([this.element], 'e-block-touch');
            }

            this.droppables[this.scope] = {};
          }
        }, {
          key: "toggleEvents",
          value: function toggleEvents(isUnWire) {
            var ele;

            if (!isUndefined(this.handle)) {
              ele = select(this.handle, this.element);
            }

            var handler = this.enableTapHold && Browser.isDevice && Browser.isTouch ? this.mobileInitialize : this.initialize;

            if (isUnWire) {
              EventHandler.remove(ele || this.element, Browser.touchStartEvent, handler);
            } else {
              EventHandler.add(ele || this.element, Browser.touchStartEvent, handler, this);
            }
          }
          /* istanbul ignore next */

        }, {
          key: "mobileInitialize",
          value: function mobileInitialize(evt) {
            var _this20 = this;

            var target = evt.currentTarget;
            this.tapHoldTimer = setTimeout(function () {
              _this20.externalInitialize = true;

              _this20.removeTapholdTimer();

              _this20.initialize(evt, target);
            }, this.tapHoldThreshold);
            EventHandler.add(document, Browser.touchMoveEvent, this.removeTapholdTimer, this);
            EventHandler.add(document, Browser.touchEndEvent, this.removeTapholdTimer, this);
          }
          /* istanbul ignore next */

        }, {
          key: "removeTapholdTimer",
          value: function removeTapholdTimer() {
            clearTimeout(this.tapHoldTimer);
            EventHandler.remove(document, Browser.touchMoveEvent, this.removeTapholdTimer);
            EventHandler.remove(document, Browser.touchEndEvent, this.removeTapholdTimer);
          }
          /* istanbul ignore next */

        }, {
          key: "getScrollableParent",
          value: function getScrollableParent(element, axis) {
            var scroll = {
              'vertical': 'scrollHeight',
              'horizontal': 'scrollWidth'
            };
            var client = {
              'vertical': 'clientHeight',
              'horizontal': 'clientWidth'
            };

            if (isNullOrUndefined(element)) {
              return null;
            }

            if (element[scroll[axis]] > element[client[axis]]) {
              if (axis === 'vertical' ? element.scrollTop > 0 : element.scrollLeft > 0) {
                if (axis === 'vertical') {
                  this.parentScrollY = this.parentScrollY + (this.parentScrollY === 0 ? element.scrollTop : element.scrollTop - this.parentScrollY);
                } else {
                  this.parentScrollX = this.parentScrollX + (this.parentScrollX === 0 ? element.scrollLeft : element.scrollLeft - this.parentScrollX);
                }

                if (!isNullOrUndefined(element)) {
                  return this.getScrollableParent(element.parentNode, axis);
                } else {
                  return element;
                }
              } else {
                return this.getScrollableParent(element.parentNode, axis);
              }
            } else {
              return this.getScrollableParent(element.parentNode, axis);
            }
          }
        }, {
          key: "getScrollableValues",
          value: function getScrollableValues() {
            this.parentScrollX = 0;
            this.parentScrollY = 0;
            var isModalDialog = this.element.classList.contains('e-dialog') && this.element.classList.contains('e-dlg-modal');
            var verticalScrollParent = this.getScrollableParent(this.element.parentNode, 'vertical');
            var horizontalScrollParent = this.getScrollableParent(this.element.parentNode, 'horizontal');
          }
        }, {
          key: "initialize",
          value: function initialize(evt, curTarget) {
            this.currentStateTarget = evt.target;

            if (this.isDragStarted()) {
              return;
            } else {
              this.isDragStarted(true);
              this.externalInitialize = false;
            }

            this.target = evt.currentTarget || curTarget;
            this.dragProcessStarted = false;

            if (this.abort) {
              /* tslint:disable no-any */
              var abortSelectors = this.abort;

              if (typeof abortSelectors === 'string') {
                abortSelectors = [abortSelectors];
              }

              for (var i = 0; i < abortSelectors.length; i++) {
                if (!isNullOrUndefined(closest(evt.target, abortSelectors[i]))) {
                  /* istanbul ignore next */
                  if (this.isDragStarted()) {
                    this.isDragStarted(true);
                  }

                  return;
                }
              }
            }

            if (this.preventDefault && !isUndefined(evt.changedTouches)) {
              evt.preventDefault();
            }

            this.element.setAttribute('aria-grabbed', 'true');
            var intCoord = this.getCoordinates(evt);
            this.initialPosition = {
              x: intCoord.pageX,
              y: intCoord.pageY
            };

            if (!this.clone) {
              var pos = this.element.getBoundingClientRect();
              this.getScrollableValues();

              if (evt.clientX === evt.pageX) {
                this.parentScrollX = 0;
              }

              if (evt.clientY === evt.pageY) {
                this.parentScrollY = 0;
              }

              this.relativeXPosition = intCoord.pageX - (pos.left + this.parentScrollX);
              this.relativeYPosition = intCoord.pageY - (pos.top + this.parentScrollY);
            }

            if (this.externalInitialize) {
              this.intDragStart(evt);
            } else {
              EventHandler.add(document, Browser.touchMoveEvent, this.intDragStart, this);
              EventHandler.add(document, Browser.touchEndEvent, this.intDestroy, this);
            }

            this.toggleEvents(true);
            document.body.classList.add('e-prevent-select');
            this.externalInitialize = false;
            EventHandler.trigger(document.documentElement, Browser.touchStartEvent, evt);
          }
        }, {
          key: "intDragStart",
          value: function intDragStart(evt) {
            this.removeTapholdTimer();
            var isChangeTouch = !isUndefined(evt.changedTouches);

            if (isChangeTouch && evt.changedTouches.length !== 1) {
              return;
            }

            if (isChangeTouch) {
              evt.preventDefault();
            }

            var intCordinate = this.getCoordinates(evt);
            var pos;
            var styleProp = getComputedStyle(this.element);
            this.margin = {
              left: parseInt(styleProp.marginLeft, 10),
              top: parseInt(styleProp.marginTop, 10),
              right: parseInt(styleProp.marginRight, 10),
              bottom: parseInt(styleProp.marginBottom, 10)
            };
            var element = this.element;

            if (this.clone && this.dragTarget) {
              var intClosest = closest(evt.target, this.dragTarget);

              if (!isNullOrUndefined(intClosest)) {
                element = intClosest;
              }
            }

            this.offset = this.calculateParentPosition(element);
            this.position = this.getMousePosition(evt, this.isDragScroll);
            var x = this.initialPosition.x - intCordinate.pageX;
            var y = this.initialPosition.y - intCordinate.pageY;
            var distance = Math.sqrt(x * x + y * y);

            if (distance >= this.distance || this.externalInitialize) {
              var ele = this.getHelperElement(evt);

              if (!ele || isNullOrUndefined(ele)) {
                return;
              }

              var dragTargetElement = this.helperElement = ele;
              this.parentClientRect = this.calculateParentPosition(dragTargetElement.offsetParent);

              if (this.dragStart) {
                var curTarget = this.getProperTargetElement(evt);
                var args = {
                  event: evt,
                  element: element,
                  target: curTarget,
                  bindEvents: isBlazor() ? this.bindDragEvents.bind(this) : null,
                  dragElement: dragTargetElement
                };
                this.trigger('dragStart', args);
              }

              if (this.dragArea) {
                this.setDragArea();
              } else {
                this.dragLimit = {
                  left: 0,
                  right: 0,
                  bottom: 0,
                  top: 0
                };
                this.borderWidth = {
                  top: 0,
                  left: 0
                };
              }

              pos = {
                left: this.position.left - this.parentClientRect.left,
                top: this.position.top - this.parentClientRect.top
              };

              if (this.clone && !this.enableTailMode) {
                this.diffX = this.position.left - this.offset.left;
                this.diffY = this.position.top - this.offset.top;
              }

              this.getScrollableValues();
              var posValue = this.getProcessedPositionValue({
                top: pos.top - this.diffY + 'px',
                left: pos.left - this.diffX + 'px'
              });
              this.dragElePosition = {
                top: pos.top,
                left: pos.left
              };
              setStyleAttribute(dragTargetElement, this.getDragPosition({
                position: 'absolute',
                left: posValue.left,
                top: posValue.top
              }));
              EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);
              EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);

              if (!isBlazor()) {
                this.bindDragEvents(dragTargetElement);
              }
            }
          }
        }, {
          key: "bindDragEvents",
          value: function bindDragEvents(dragTargetElement) {
            if (isVisible(dragTargetElement)) {
              EventHandler.add(document, Browser.touchMoveEvent, this.intDrag, this);
              EventHandler.add(document, Browser.touchEndEvent, this.intDragStop, this);
              this.setGlobalDroppables(false, this.element, dragTargetElement);
            } else {
              this.toggleEvents();
              document.body.classList.remove('e-prevent-select');
            }
          }
        }, {
          key: "elementInViewport",
          value: function elementInViewport(el) {
            this.top = el.offsetTop;
            this.left = el.offsetLeft;
            this.width = el.offsetWidth;
            this.height = el.offsetHeight;

            while (el.offsetParent) {
              el = el.offsetParent;
              this.top += el.offsetTop;
              this.left += el.offsetLeft;
            }

            return this.top >= window.pageYOffset && this.left >= window.pageXOffset && this.top + this.height <= window.pageYOffset + window.innerHeight && this.left + this.width <= window.pageXOffset + window.innerWidth;
          }
        }, {
          key: "getProcessedPositionValue",
          value: function getProcessedPositionValue(value) {
            if (this.queryPositionInfo) {
              return this.queryPositionInfo(value);
            }

            return value;
          }
        }, {
          key: "calculateParentPosition",
          value: function calculateParentPosition(ele) {
            if (isNullOrUndefined(ele)) {
              return {
                left: 0,
                top: 0
              };
            }

            var rect = ele.getBoundingClientRect();
            var style = getComputedStyle(ele);
            return {
              left: rect.left + window.pageXOffset - parseInt(style.marginLeft, 10),
              top: rect.top + window.pageYOffset - parseInt(style.marginTop, 10)
            };
          } // tslint:disable-next-line:max-func-body-length

        }, {
          key: "intDrag",
          value: function intDrag(evt) {
            if (!isUndefined(evt.changedTouches) && evt.changedTouches.length !== 1) {
              return;
            }

            var left;
            var top;
            this.position = this.getMousePosition(evt, this.isDragScroll);
            var docHeight = this.getDocumentWidthHeight('Height');

            if (docHeight < this.position.top) {
              this.position.top = docHeight;
            }

            var docWidth = this.getDocumentWidthHeight('Width');

            if (docWidth < this.position.left) {
              this.position.left = docWidth;
            }

            if (this.drag) {
              var curTarget = this.getProperTargetElement(evt);
              this.trigger('drag', {
                event: evt,
                element: this.element,
                target: curTarget
              });
            }

            var eleObj = this.checkTargetElement(evt);

            if (eleObj.target && eleObj.instance) {
              /* tslint:disable no-any */
              var flag = true;

              if (this.hoverObject) {
                if (this.hoverObject.instance !== eleObj.instance) {
                  this.triggerOutFunction(evt, eleObj);
                } else {
                  flag = false;
                }
              }

              if (flag) {
                eleObj.instance.dragData[this.scope] = this.droppables[this.scope];
                eleObj.instance.intOver(evt, eleObj.target);
                this.hoverObject = eleObj;
              }
            } else if (this.hoverObject) {
              this.triggerOutFunction(evt, eleObj);
            }

            var helperElement = this.droppables[this.scope].helper;
            this.parentClientRect = this.calculateParentPosition(this.helperElement.offsetParent);
            var tLeft = this.parentClientRect.left;
            var tTop = this.parentClientRect.top;
            var intCoord = this.getCoordinates(evt);
            var pagex = intCoord.pageX;
            var pagey = intCoord.pageY;
            var dLeft = this.position.left - this.diffX;
            var dTop = this.position.top - this.diffY;

            if (this.dragArea) {
              var styles = getComputedStyle(helperElement);

              if (this.pageX !== pagex || this.skipDistanceCheck) {
                var helperWidth = helperElement.offsetWidth + (parseFloat(styles.marginLeft) + parseFloat(styles.marginRight));

                if (this.dragLimit.left > dLeft && dLeft > 0) {
                  left = this.dragLimit.left;
                } else if (this.dragLimit.right + window.pageXOffset < dLeft + helperWidth && dLeft > 0) {
                  left = dLeft - (dLeft - this.dragLimit.right) + window.pageXOffset - helperWidth;
                } else {
                  left = dLeft < 0 ? this.dragLimit.left : dLeft;
                }
              }

              if (this.pageY !== pagey || this.skipDistanceCheck) {
                var helperHeight = helperElement.offsetHeight + (parseFloat(styles.marginTop) + parseFloat(styles.marginBottom));

                if (this.dragLimit.top > dTop && dTop > 0) {
                  top = this.dragLimit.top;
                } else if (this.dragLimit.bottom + window.pageYOffset < dTop + helperHeight && dTop > 0) {
                  top = dTop - (dTop - this.dragLimit.bottom) + window.pageYOffset - helperHeight;
                } else {
                  top = dTop < 0 ? this.dragLimit.top : dTop;
                }
              }
            } else {
              left = dLeft;
              top = dTop;
            }

            var iTop = tTop + this.borderWidth.top;
            var iLeft = tLeft + this.borderWidth.left;

            if (this.dragProcessStarted) {
              if (isNullOrUndefined(top)) {
                top = this.prevTop;
              }

              if (isNullOrUndefined(left)) {
                left = this.prevLeft;
              }
            }

            var draEleTop;
            var draEleLeft;

            if (this.dragArea) {
              draEleTop = top - iTop < 0 ? this.dragLimit.top : top - iTop;
              draEleLeft = left - iLeft < 0 ? this.dragElePosition.left : left - iLeft;
            } else {
              draEleTop = top - iTop;
              draEleLeft = left - iLeft;
            }

            var dragValue = this.getProcessedPositionValue({
              top: draEleTop + 'px',
              left: draEleLeft + 'px'
            });
            setStyleAttribute(helperElement, this.getDragPosition(dragValue));

            if (!this.elementInViewport(helperElement) && this.enableAutoScroll) {
              this.helperElement.scrollIntoView();
            }

            this.dragProcessStarted = true;
            this.prevLeft = left;
            this.prevTop = top;
            this.position.left = left;
            this.position.top = top;
            this.pageX = pagex;
            this.pageY = pagey;
          }
        }, {
          key: "triggerOutFunction",
          value: function triggerOutFunction(evt, eleObj) {
            this.hoverObject.instance.intOut(evt, eleObj.target);
            this.hoverObject.instance.dragData[this.scope] = null;
            this.hoverObject = null;
          }
        }, {
          key: "getDragPosition",
          value: function getDragPosition(dragValue) {
            var temp = extend({}, dragValue);

            if (this.axis) {
              if (this.axis === 'x') {
                delete temp.top;
              } else if (this.axis === 'y') {
                delete temp.left;
              }
            }

            return temp;
          }
        }, {
          key: "getDocumentWidthHeight",
          value: function getDocumentWidthHeight(str) {
            var docBody = document.body;
            var docEle = document.documentElement;
            var returnValue = Math.max(docBody['scroll' + str], docEle['scroll' + str], docBody['offset' + str], docEle['offset' + str], docEle['client' + str]);
            return returnValue;
          }
        }, {
          key: "intDragStop",
          value: function intDragStop(evt) {
            this.dragProcessStarted = false;

            if (!isUndefined(evt.changedTouches) && evt.changedTouches.length !== 1) {
              return;
            }

            var type = ['touchend', 'pointerup', 'mouseup'];

            if (type.indexOf(evt.type) !== -1) {
              if (this.dragStop) {
                var curTarget = this.getProperTargetElement(evt);
                this.trigger('dragStop', {
                  event: evt,
                  element: this.element,
                  target: curTarget,
                  helper: this.helperElement
                });
              }

              this.intDestroy(evt);
            } else {
              this.element.setAttribute('aria-grabbed', 'false');
            }

            var eleObj = this.checkTargetElement(evt);

            if (eleObj.target && eleObj.instance) {
              eleObj.instance.dragStopCalled = true;
              eleObj.instance.dragData[this.scope] = this.droppables[this.scope];
              eleObj.instance.intDrop(evt, eleObj.target);
            }

            this.setGlobalDroppables(true);
            document.body.classList.remove('e-prevent-select');
          }
          /**
           * @private
           */

        }, {
          key: "intDestroy",
          value: function intDestroy(evt) {
            this.dragProcessStarted = false;
            this.toggleEvents();
            document.body.classList.remove('e-prevent-select');
            this.element.setAttribute('aria-grabbed', 'false');
            EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);
            EventHandler.remove(document, Browser.touchEndEvent, this.intDragStop);
            EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);
            EventHandler.remove(document, Browser.touchMoveEvent, this.intDrag);

            if (this.isDragStarted()) {
              this.isDragStarted(true);
            }
          } // triggers when property changed

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {//No Code to handle
          }
        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'draggable';
          }
        }, {
          key: "isDragStarted",
          value: function isDragStarted(change) {
            if (change) {
              isDraggedObject.isDragged = !isDraggedObject.isDragged;
            }

            return isDraggedObject.isDragged;
          }
        }, {
          key: "setDragArea",
          value: function setDragArea() {
            var eleWidthBound;
            var eleHeightBound;
            var top = 0;
            var left = 0;
            var ele;
            var type = typeof this.dragArea;

            if (type === 'string') {
              ele = select(this.dragArea);
            } else {
              ele = this.dragArea;
            }

            if (ele) {
              var elementArea = ele.getBoundingClientRect();
              eleWidthBound = ele.scrollWidth ? ele.scrollWidth : elementArea.right - elementArea.left;
              eleHeightBound = ele.scrollHeight ? ele.scrollHeight : elementArea.bottom - elementArea.top;
              var _keys10 = ['Top', 'Left', 'Bottom', 'Right'];
              var styles = getComputedStyle(ele);

              for (var i = 0; i < _keys10.length; i++) {
                var key = _keys10[i];
                var tborder = styles['border' + key + 'Width'];
                var tpadding = styles['padding' + key];
                var lowerKey = key.toLowerCase();
                this.borderWidth[lowerKey] = isNaN(parseFloat(tborder)) ? 0 : parseFloat(tborder);
                this.padding[lowerKey] = isNaN(parseFloat(tpadding)) ? 0 : parseFloat(tpadding);
              }

              top = elementArea.top;
              left = elementArea.left;
              this.dragLimit.left = left + this.borderWidth.left + this.padding.left;
              this.dragLimit.top = ele.offsetTop + this.borderWidth.top + this.padding.top;
              this.dragLimit.right = left + eleWidthBound - (this.borderWidth.right + this.padding.right);
              this.dragLimit.bottom = top + eleHeightBound - (this.borderWidth.bottom + this.padding.bottom);
            }
          }
        }, {
          key: "getProperTargetElement",
          value: function getProperTargetElement(evt) {
            var intCoord = this.getCoordinates(evt);
            var ele;
            var prevStyle = this.helperElement.style.pointerEvents || '';

            if (compareElementParent(evt.target, this.helperElement) || evt.type.indexOf('touch') !== -1) {
              this.helperElement.style.pointerEvents = 'none';
              ele = document.elementFromPoint(intCoord.clientX, intCoord.clientY);
              this.helperElement.style.pointerEvents = prevStyle;
            } else {
              ele = evt.target;
            }

            return ele;
          }
        }, {
          key: "getMousePosition",
          value: function getMousePosition(evt, isdragscroll) {
            /* tslint:disable no-any */
            var dragEle = evt.srcElement !== undefined ? evt.srcElement : evt.target;
            var intCoord = this.getCoordinates(evt);
            var pageX;
            var pageY;
            var isOffsetParent = isNullOrUndefined(dragEle.offsetParent);
            /* istanbul ignore next */

            if (isdragscroll) {
              pageX = this.clone ? intCoord.pageX : intCoord.pageX + (isOffsetParent ? 0 : dragEle.offsetParent.scrollLeft) - this.relativeXPosition;
              pageY = this.clone ? intCoord.pageY : intCoord.pageY + (isOffsetParent ? 0 : dragEle.offsetParent.scrollTop) - this.relativeYPosition;
            } else {
              pageX = this.clone ? intCoord.pageX : intCoord.pageX + window.pageXOffset - this.relativeXPosition;
              pageY = this.clone ? intCoord.pageY : intCoord.pageY + window.pageYOffset - this.relativeYPosition;
            }

            return {
              left: pageX - (this.margin.left + this.cursorAt.left),
              top: pageY - (this.margin.top + this.cursorAt.top)
            };
          }
        }, {
          key: "getCoordinates",
          value: function getCoordinates(evt) {
            if (evt.type.indexOf('touch') > -1) {
              return evt.changedTouches[0];
            }

            return evt;
          }
        }, {
          key: "getHelperElement",
          value: function getHelperElement(evt) {
            var element;

            if (this.clone) {
              if (this.helper) {
                element = this.helper({
                  sender: evt,
                  element: this.target
                });
              } else {
                element = _createElement('div', {
                  className: 'e-drag-helper e-block-touch',
                  innerHTML: 'Draggable'
                });
                document.body.appendChild(element);
              }
            } else {
              element = this.element;
            }

            return element;
          }
        }, {
          key: "setGlobalDroppables",
          value: function setGlobalDroppables(reset, drag, helper) {
            this.droppables[this.scope] = reset ? null : {
              draggable: drag,
              helper: helper,
              draggedElement: this.element
            };
          }
        }, {
          key: "checkTargetElement",
          value: function checkTargetElement(evt) {
            var target = this.getProperTargetElement(evt);
            var dropIns = this.getDropInstance(target);

            if (!dropIns && target && !isNullOrUndefined(target.parentNode)) {
              var parent = closest(target.parentNode, '.e-droppable') || target.parentElement;

              if (parent) {
                dropIns = this.getDropInstance(parent);
              }
            }

            return {
              target: target,
              instance: dropIns
            };
          }
        }, {
          key: "getDropInstance",
          value: function getDropInstance(ele) {
            var name = 'getModuleName';
            var drop;
            var eleInst = ele && ele.ej2_instances;

            if (eleInst) {
              var _iterator32 = _createForOfIteratorHelper(eleInst),
                  _step32;

              try {
                for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
                  var inst = _step32.value;

                  if (inst[name]() === 'droppable') {
                    drop = inst;
                    break;
                  }
                }
              } catch (err) {
                _iterator32.e(err);
              } finally {
                _iterator32.f();
              }
            }

            return drop;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.toggleEvents(true);

            _get2(_getPrototypeOf2(Draggable.prototype), "destroy", this).call(this);
          }
        }], [{
          key: "getDefaultPosition",
          value: function getDefaultPosition() {
            return extend({}, defaultPosition);
          }
        }]);

        return Draggable;
      }(Base);

      __decorate$2([Complex({}, Position)], Draggable.prototype, "cursorAt", void 0);

      __decorate$2([Property(true)], Draggable.prototype, "clone", void 0);

      __decorate$2([Property()], Draggable.prototype, "dragArea", void 0);

      __decorate$2([Property()], Draggable.prototype, "isDragScroll", void 0);

      __decorate$2([Event$1()], Draggable.prototype, "drag", void 0);

      __decorate$2([Event$1()], Draggable.prototype, "dragStart", void 0);

      __decorate$2([Event$1()], Draggable.prototype, "dragStop", void 0);

      __decorate$2([Property(1)], Draggable.prototype, "distance", void 0);

      __decorate$2([Property()], Draggable.prototype, "handle", void 0);

      __decorate$2([Property()], Draggable.prototype, "abort", void 0);

      __decorate$2([Property()], Draggable.prototype, "helper", void 0);

      __decorate$2([Property('default')], Draggable.prototype, "scope", void 0);

      __decorate$2([Property('')], Draggable.prototype, "dragTarget", void 0);

      __decorate$2([Property()], Draggable.prototype, "axis", void 0);

      __decorate$2([Property()], Draggable.prototype, "queryPositionInfo", void 0);

      __decorate$2([Property(false)], Draggable.prototype, "enableTailMode", void 0);

      __decorate$2([Property(false)], Draggable.prototype, "skipDistanceCheck", void 0);

      __decorate$2([Property(true)], Draggable.prototype, "preventDefault", void 0);

      __decorate$2([Property(false)], Draggable.prototype, "enableAutoScroll", void 0);

      __decorate$2([Property(false)], Draggable.prototype, "enableTapHold", void 0);

      __decorate$2([Property(750)], Draggable.prototype, "tapHoldThreshold", void 0);

      Draggable = Draggable_1 = __decorate$2([NotifyPropertyChanges], Draggable);

      var __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      /**
       * Droppable Module provides support to enable droppable functionality in Dom Elements.
       * ```html
       * <div id='drop'>Droppable</div>
       * <script>
       * let ele:HTMLElement = document.getElementById('drop');
       * var drag:Droppable = new Droppable(ele,{
       *     accept:'.drop',
       *     drop: function(e) {
       *      //drop handler code.
       *     }
       * });
       * </script>
       * ```
       */


      var Droppable = /*#__PURE__*/function (_Base4) {
        _inherits2(Droppable, _Base4);

        var _super5 = _createSuper(Droppable);

        function Droppable(element, options) {
          var _this21;

          _classCallCheck2(this, Droppable);

          _this21 = _super5.call(this, options, element);
          _this21.mouseOver = false;
          _this21.dragData = {};
          _this21.dragStopCalled = false;

          _this21.bind();

          return _this21;
        }

        _createClass2(Droppable, [{
          key: "bind",
          value: function bind() {
            this.wireEvents();
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            EventHandler.add(this.element, Browser.touchEndEvent, this.intDrop, this);
          } // triggers when property changed

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {//No Code to handle
          }
        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'droppable';
          }
        }, {
          key: "intOver",
          value: function intOver(event, element) {
            if (!this.mouseOver) {
              var drag = this.dragData[this.scope];
              this.trigger('over', {
                event: event,
                target: element,
                dragData: drag
              });
              this.mouseOver = true;
            }
          }
        }, {
          key: "intOut",
          value: function intOut(event, element) {
            if (this.mouseOver) {
              this.trigger('out', {
                evt: event,
                target: element
              });
              this.mouseOver = false;
            }
          }
        }, {
          key: "intDrop",
          value: function intDrop(evt, element) {
            if (!this.dragStopCalled) {
              return;
            } else {
              this.dragStopCalled = false;
            }

            var accept = true;
            var drag = this.dragData[this.scope];
            var isDrag = drag ? drag.helper && isVisible(drag.helper) : false;
            var area;

            if (isDrag) {
              area = this.isDropArea(evt, drag.helper, element);

              if (this.accept) {
                accept = matches(drag.helper, this.accept);
              }
            }

            if (isDrag && this.drop && area.canDrop && accept) {
              this.trigger('drop', {
                event: evt,
                target: area.target,
                droppedElement: drag.helper,
                dragData: drag
              });
            }

            this.mouseOver = false;
          }
        }, {
          key: "isDropArea",
          value: function isDropArea(evt, helper, element) {
            var area = {
              canDrop: true,
              target: element || evt.target
            };
            var isTouch = evt.type === 'touchend';

            if (isTouch || area.target === helper) {
              helper.style.display = 'none';
              var coord = isTouch ? evt.changedTouches[0] : evt;
              var ele = document.elementFromPoint(coord.clientX, coord.clientY);
              area.canDrop = false;
              area.canDrop = compareElementParent(ele, this.element);

              if (area.canDrop) {
                area.target = ele;
              }

              helper.style.display = '';
            }

            return area;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            EventHandler.remove(this.element, Browser.touchEndEvent, this.intDrop);

            _get2(_getPrototypeOf2(Droppable.prototype), "destroy", this).call(this);
          }
        }]);

        return Droppable;
      }(Base);

      __decorate$3([Property()], Droppable.prototype, "accept", void 0);

      __decorate$3([Property('default')], Droppable.prototype, "scope", void 0);

      __decorate$3([Event$1()], Droppable.prototype, "drop", void 0);

      __decorate$3([Event$1()], Droppable.prototype, "over", void 0);

      __decorate$3([Event$1()], Droppable.prototype, "out", void 0);

      Droppable = __decorate$3([NotifyPropertyChanges], Droppable);

      var __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var KeyboardEvents_1;
      var keyCode = {
        'backspace': 8,
        'tab': 9,
        'enter': 13,
        'shift': 16,
        'control': 17,
        'alt': 18,
        'pause': 19,
        'capslock': 20,
        'space': 32,
        'escape': 27,
        'pageup': 33,
        'pagedown': 34,
        'end': 35,
        'home': 36,
        'leftarrow': 37,
        'uparrow': 38,
        'rightarrow': 39,
        'downarrow': 40,
        'insert': 45,
        'delete': 46,
        'f1': 112,
        'f2': 113,
        'f3': 114,
        'f4': 115,
        'f5': 116,
        'f6': 117,
        'f7': 118,
        'f8': 119,
        'f9': 120,
        'f10': 121,
        'f11': 122,
        'f12': 123,
        'semicolon': 186,
        'plus': 187,
        'comma': 188,
        'minus': 189,
        'dot': 190,
        'forwardslash': 191,
        'graveaccent': 192,
        'openbracket': 219,
        'backslash': 220,
        'closebracket': 221,
        'singlequote': 222
      };
      /**
       * KeyboardEvents class enables you to bind key action desired key combinations for ex., Ctrl+A, Delete, Alt+Space etc.
       * ```html
       * <div id='testEle'>  </div>;
       * <script>
       *   let node: HTMLElement = document.querySelector('#testEle');
       *   let kbInstance = new KeyboardEvents({
       *       element: node,
       *       keyConfigs:{ selectAll : 'ctrl+a' },
       *       keyAction: function (e:KeyboardEvent, action:string) {
       *           // handler function code
       *       }
       *   });
       * </script>
       * ```
       */

      var KeyboardEvents = KeyboardEvents_1 = /*#__PURE__*/function (_Base5) {
        _inherits2(KeyboardEvents, _Base5);

        var _super6 = _createSuper(KeyboardEvents);

        /**
         * Initializes the KeyboardEvents
         * @param {HTMLElement} element
         * @param {KeyboardEventsModel} options
         */
        function KeyboardEvents(element, options) {
          var _this22;

          _classCallCheck2(this, KeyboardEvents);

          _this22 = _super6.call(this, options, element);
          /**
           * To handle a key press event returns null
           */

          _this22.keyPressHandler = function (e) {
            var isAltKey = e.altKey;
            var isCtrlKey = e.ctrlKey;
            var isShiftKey = e.shiftKey;
            var curkeyCode = e.which;
            var keys = Object.keys(_this22.keyConfigs);

            for (var _i13 = 0, _keys11 = keys; _i13 < _keys11.length; _i13++) {
              var key = _keys11[_i13];

              var configCollection = _this22.keyConfigs[key].split(',');

              var _iterator33 = _createForOfIteratorHelper(configCollection),
                  _step33;

              try {
                for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
                  var rconfig = _step33.value;
                  var rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());

                  if (isAltKey === rKeyObj.altKey && isCtrlKey === rKeyObj.ctrlKey && isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode) {
                    e.action = key;

                    if (_this22.keyAction) {
                      _this22.keyAction(e);
                    }
                  }
                }
              } catch (err) {
                _iterator33.e(err);
              } finally {
                _iterator33.f();
              }
            }
          };

          _this22.bind();

          return _this22;
        }
        /**
         * Unwire bound events and destroy the instance.
         * @return {void}
         */


        _createClass2(KeyboardEvents, [{
          key: "destroy",
          value: function destroy() {
            this.unwireEvents();

            _get2(_getPrototypeOf2(KeyboardEvents.prototype), "destroy", this).call(this);
          }
          /**
           * Function can be used to specify certain action if a property is changed
           * @param newProp
           * @param oldProp
           * @returns {void}
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {// No code are needed
          }
        }, {
          key: "bind",
          value: function bind() {
            this.wireEvents();
          }
          /**
           * To get the module name, returns 'keyboard'.
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'keyboard';
          }
          /**
           * Wiring event handlers to events
           */

        }, {
          key: "wireEvents",
          value: function wireEvents() {
            this.element.addEventListener(this.eventName, this.keyPressHandler);
          }
          /**
           * Unwiring event handlers to events
           */

        }, {
          key: "unwireEvents",
          value: function unwireEvents() {
            this.element.removeEventListener(this.eventName, this.keyPressHandler);
          }
          /**
           * To get the key configuration data
           * @param {string} config - configuration data
           * returns {KeyData}
           */

        }], [{
          key: "getKeyConfigData",
          value: function getKeyConfigData(config) {
            if (config in this.configCache) {
              return this.configCache[config];
            }

            var keys = config.toLowerCase().split('+');
            var keyData = {
              altKey: keys.indexOf('alt') !== -1 ? true : false,
              ctrlKey: keys.indexOf('ctrl') !== -1 ? true : false,
              shiftKey: keys.indexOf('shift') !== -1 ? true : false,
              keyCode: null
            };

            if (keys[keys.length - 1].length > 1 && !!Number(keys[keys.length - 1])) {
              keyData.keyCode = Number(keys[keys.length - 1]);
            } else {
              keyData.keyCode = KeyboardEvents_1.getKeyCode(keys[keys.length - 1]);
            }

            KeyboardEvents_1.configCache[config] = keyData;
            return keyData;
          } // Return the keycode value as string 

        }, {
          key: "getKeyCode",
          value: function getKeyCode(keyVal) {
            return keyCode[keyVal] || keyVal.toUpperCase().charCodeAt(0);
          }
        }]);

        return KeyboardEvents;
      }(Base);

      KeyboardEvents.configCache = {};

      __decorate$4([Property({})], KeyboardEvents.prototype, "keyConfigs", void 0);

      __decorate$4([Property('keyup')], KeyboardEvents.prototype, "eventName", void 0);

      __decorate$4([Event$1()], KeyboardEvents.prototype, "keyAction", void 0);

      KeyboardEvents = KeyboardEvents_1 = __decorate$4([NotifyPropertyChanges], KeyboardEvents);
      /**
       * L10n modules provides localized text for different culture.
       * ```typescript
       * import {setCulture} from '@syncfusion/ts-base-library';
       * //load global locale object common for all components.
       * L10n.load({
       *    'fr-BE': {
       *       'button': {
       *            'check': 'vérifié'
       *        }
       *    }
       * });
       * //set globale default locale culture.
       * setCulture('fr-BE');
       * let instance: L10n = new L10n('button', {
       *    check: 'checked'
       * });
       * //Get locale text for current property.
       * instance.getConstant('check');
       * //Change locale culture in a component.
       * instance.setLocale('en-US');
       * ```
       */

      var L10n = /*#__PURE__*/function () {
        /**
         * Constructor
         */
        function L10n(controlName, localeStrings, locale) {
          _classCallCheck2(this, L10n);

          this.controlName = controlName;
          this.localeStrings = localeStrings;
          this.setLocale(locale || defaultCulture);
        }
        /**
         * Sets the locale text
         * @param {string} locale
         * @returns {void}
         */


        _createClass2(L10n, [{
          key: "setLocale",
          value: function setLocale(locale) {
            var intLocale = this.intGetControlConstant(L10n.locale, locale);
            this.currentLocale = intLocale || this.localeStrings;
          }
          /**
           * Sets the global locale for all components.
           * @param {Object} localeObject - specifies the localeObject to be set as global locale.
           */

        }, {
          key: "getConstant",

          /**
           * Returns current locale text for the property based on the culture name and control name.
           * @param {string} propertyName - specifies the property for which localize text to be returned.
           * @return string
           */
          value: function getConstant(prop) {
            // Removed conditional operator because this method does not return correct value when passing 0 as value in localization
            if (!isNullOrUndefined(this.currentLocale[prop])) {
              return this.currentLocale[prop];
            } else {
              return this.localeStrings[prop] || '';
            }
          }
          /**
           * Returns the control constant object for current object and the locale specified.
           * @param {Object} curObject
           * @param {string} locale
           * @returns {Object}
           */

        }, {
          key: "intGetControlConstant",
          value: function intGetControlConstant(curObject, locale) {
            if (curObject[locale]) {
              return curObject[locale][this.controlName];
            }

            return null;
          }
        }], [{
          key: "load",
          value: function load(localeObject) {
            this.locale = extend(this.locale, localeObject, {}, true);
          }
        }]);

        return L10n;
      }();

      L10n.locale = {};

      var __decorate$5 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      /**
       * SwipeSettings is a framework module that provides support to handle swipe event like swipe up, swipe right, etc..,
       */


      var SwipeSettings = /*#__PURE__*/function (_ChildProperty2) {
        _inherits2(SwipeSettings, _ChildProperty2);

        var _super7 = _createSuper(SwipeSettings);

        function SwipeSettings() {
          _classCallCheck2(this, SwipeSettings);

          return _super7.apply(this, arguments);
        }

        return SwipeSettings;
      }(ChildProperty);

      __decorate$5([Property(50)], SwipeSettings.prototype, "swipeThresholdDistance", void 0);

      var swipeRegex = /(Up|Down)/;
      /**
       * Touch class provides support to handle the touch event like tap, double tap, tap hold, etc..,
       * ```typescript
       *    let node: HTMLElement;
       * let touchObj: Touch = new Touch({
       *    element: node,
       *    tap: function (e) {
       *        // tap handler function code
       *    }
       *    tapHold: function (e) {
       *        // tap hold handler function code
       *    }
       *    scroll: function (e) {
       *        // scroll handler function code
       *    }
       *    swipe: function (e) {
       *        // swipe handler function code
       *    }
       * });
       * ```
       */

      var Touch = /*#__PURE__*/function (_Base6) {
        _inherits2(Touch, _Base6);

        var _super8 = _createSuper(Touch);

        /* End-Properties */
        function Touch(element, options) {
          var _this23;

          _classCallCheck2(this, Touch);

          _this23 = _super8.call(this, options, element);
          _this23.touchAction = true;
          _this23.tapCount = 0;

          _this23.startEvent = function (evt) {
            if (_this23.touchAction === true) {
              var point = _this23.updateChangeTouches(evt);

              if (evt.changedTouches !== undefined) {
                _this23.touchAction = false;
              }

              _this23.isTouchMoved = false;
              _this23.movedDirection = '';
              _this23.startPoint = _this23.lastMovedPoint = {
                clientX: point.clientX,
                clientY: point.clientY
              };
              _this23.startEventData = point;
              _this23.hScrollLocked = _this23.vScrollLocked = false;
              _this23.tStampStart = Date.now();
              _this23.timeOutTapHold = setTimeout(function () {
                _this23.tapHoldEvent(evt);
              }, _this23.tapHoldThreshold);
              EventHandler.add(_this23.element, Browser.touchMoveEvent, _this23.moveEvent, _assertThisInitialized2(_this23));
              EventHandler.add(_this23.element, Browser.touchEndEvent, _this23.endEvent, _assertThisInitialized2(_this23));
              EventHandler.add(_this23.element, Browser.touchCancelEvent, _this23.cancelEvent, _assertThisInitialized2(_this23));
            }
          };

          _this23.moveEvent = function (evt) {
            var point = _this23.updateChangeTouches(evt);

            _this23.movedPoint = point;
            _this23.isTouchMoved = !(point.clientX === _this23.startPoint.clientX && point.clientY === _this23.startPoint.clientY);
            var eScrollArgs = {};

            if (_this23.isTouchMoved) {
              clearTimeout(_this23.timeOutTapHold);

              _this23.calcScrollPoints(evt);

              var scrollArg = {
                startEvents: _this23.startEventData,
                originalEvent: evt,
                startX: _this23.startPoint.clientX,
                startY: _this23.startPoint.clientY,
                distanceX: _this23.distanceX,
                distanceY: _this23.distanceY,
                scrollDirection: _this23.scrollDirection,
                velocity: _this23.getVelocity(point)
              };
              eScrollArgs = extend(eScrollArgs, {}, scrollArg);

              _this23.trigger('scroll', eScrollArgs);

              _this23.lastMovedPoint = {
                clientX: point.clientX,
                clientY: point.clientY
              };
            }
          };

          _this23.cancelEvent = function (evt) {
            clearTimeout(_this23.timeOutTapHold);
            clearTimeout(_this23.timeOutTap);
            _this23.tapCount = 0;

            _this23.swipeFn(evt);

            EventHandler.remove(_this23.element, Browser.touchCancelEvent, _this23.cancelEvent);
          };

          _this23.endEvent = function (evt) {
            _this23.swipeFn(evt);

            if (!_this23.isTouchMoved) {
              if (typeof _this23.tap === 'function') {
                _this23.trigger('tap', {
                  originalEvent: evt,
                  tapCount: ++_this23.tapCount
                });

                _this23.timeOutTap = setTimeout(function () {
                  _this23.tapCount = 0;
                }, _this23.tapThreshold);
              }
            }

            _this23.modeclear();
          };

          _this23.swipeFn = function (evt) {
            clearTimeout(_this23.timeOutTapHold);
            clearTimeout(_this23.timeOutTap);

            var point = _this23.updateChangeTouches(evt);

            var diffX = point.clientX - _this23.startPoint.clientX;
            var diffY = point.clientY - _this23.startPoint.clientY;
            diffX = Math.floor(diffX < 0 ? -1 * diffX : diffX);
            diffY = Math.floor(diffY < 0 ? -1 * diffY : diffX);
            _this23.isTouchMoved = diffX > 1 || diffY > 1;
            _this23.endPoint = point;

            _this23.calcPoints(evt);

            var swipeArgs = {
              originalEvent: evt,
              startEvents: _this23.startEventData,
              startX: _this23.startPoint.clientX,
              startY: _this23.startPoint.clientY,
              distanceX: _this23.distanceX,
              distanceY: _this23.distanceY,
              swipeDirection: _this23.movedDirection,
              velocity: _this23.getVelocity(point)
            };

            if (_this23.isTouchMoved) {
              var eSwipeArgs;
              var tDistance = _this23.swipeSettings.swipeThresholdDistance;
              eSwipeArgs = extend(eSwipeArgs, _this23.defaultArgs, swipeArgs);
              var canTrigger = false;
              var ele = _this23.element;

              var scrollBool = _this23.isScrollable(ele);

              var moved = swipeRegex.test(_this23.movedDirection);

              if (tDistance < _this23.distanceX && !moved || tDistance < _this23.distanceY && moved) {
                if (!scrollBool) {
                  canTrigger = true;
                } else {
                  canTrigger = _this23.checkSwipe(ele, moved);
                }
              }

              if (canTrigger) {
                _this23.trigger('swipe', eSwipeArgs);
              }
            }

            _this23.modeclear();
          };

          _this23.modeclear = function () {
            _this23.modeClear = setTimeout(function () {
              _this23.touchAction = true;
            }, typeof _this23.tap !== 'function' ? 0 : 20);
            _this23.lastTapTime = new Date().getTime();
            EventHandler.remove(_this23.element, Browser.touchMoveEvent, _this23.moveEvent);
            EventHandler.remove(_this23.element, Browser.touchEndEvent, _this23.endEvent);
            EventHandler.remove(_this23.element, Browser.touchCancelEvent, _this23.cancelEvent);
          };

          _this23.bind();

          return _this23;
        } // triggers when property changed 

        /**
         * @private
         * @param newProp
         * @param oldProp
         */


        _createClass2(Touch, [{
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {//No Code to handle
          }
        }, {
          key: "bind",
          value: function bind() {
            this.wireEvents();

            if (Browser.isIE) {
              this.element.classList.add('e-block-touch');
            }
          }
          /**
           * To destroy the touch instance.
           * @return {void}
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.unwireEvents();

            _get2(_getPrototypeOf2(Touch.prototype), "destroy", this).call(this);
          } // Need to changes the event binding once we updated the event handler.

        }, {
          key: "wireEvents",
          value: function wireEvents() {
            EventHandler.add(this.element, Browser.touchStartEvent, this.startEvent, this);
          }
        }, {
          key: "unwireEvents",
          value: function unwireEvents() {
            EventHandler.remove(this.element, Browser.touchStartEvent, this.startEvent);
          }
          /**
           * Returns module name as touch
           * @returns {string}
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'touch';
          }
          /**
           * Returns if the HTML element is Scrollable.
           * @param {HTMLElement} element - HTML Element to check if Scrollable.
           * @returns {boolean}
           */

        }, {
          key: "isScrollable",
          value: function isScrollable(element) {
            var eleStyle = getComputedStyle(element);
            var style = eleStyle.overflow + eleStyle.overflowX + eleStyle.overflowY;

            if (/(auto|scroll)/.test(style)) {
              return true;
            }

            return false;
          }
        }, {
          key: "tapHoldEvent",
          value: function tapHoldEvent(evt) {
            this.tapCount = 0;
            this.touchAction = true;
            var eTapArgs;
            EventHandler.remove(this.element, Browser.touchMoveEvent, this.moveEvent);
            EventHandler.remove(this.element, Browser.touchEndEvent, this.endEvent);
            eTapArgs = {
              originalEvent: evt
            };
            this.trigger('tapHold', eTapArgs);
            EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);
          }
        }, {
          key: "calcPoints",
          value: function calcPoints(evt) {
            var point = this.updateChangeTouches(evt);
            this.defaultArgs = {
              originalEvent: evt
            };
            this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.startPoint.clientX));
            this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.startPoint.clientY));

            if (this.distanceX > this.distanceY) {
              this.movedDirection = point.clientX > this.startPoint.clientX ? 'Right' : 'Left';
            } else {
              this.movedDirection = point.clientY < this.startPoint.clientY ? 'Up' : 'Down';
            }
          }
        }, {
          key: "calcScrollPoints",
          value: function calcScrollPoints(evt) {
            var point = this.updateChangeTouches(evt);
            this.defaultArgs = {
              originalEvent: evt
            };
            this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.lastMovedPoint.clientX));
            this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.lastMovedPoint.clientY));

            if ((this.distanceX > this.distanceY || this.hScrollLocked === true) && this.vScrollLocked === false) {
              this.scrollDirection = point.clientX > this.lastMovedPoint.clientX ? 'Right' : 'Left';
              this.hScrollLocked = true;
            } else {
              this.scrollDirection = point.clientY < this.lastMovedPoint.clientY ? 'Up' : 'Down';
              this.vScrollLocked = true;
            }
          }
        }, {
          key: "getVelocity",
          value: function getVelocity(pnt) {
            var newX = pnt.clientX;
            var newY = pnt.clientY;
            var newT = Date.now();
            var xDist = newX - this.startPoint.clientX;
            var yDist = newY - this.startPoint.clientX;
            var interval = newT - this.tStampStart;
            return Math.sqrt(xDist * xDist + yDist * yDist) / interval;
          } // tslint:disable-next-line:no-any

        }, {
          key: "checkSwipe",
          value: function checkSwipe(ele, flag) {
            var keys = ['scroll', 'offset'];
            var temp = flag ? ['Height', 'Top'] : ['Width', 'Left'];

            if (ele[keys[0] + temp[0]] <= ele[keys[1] + temp[0]]) {
              return true;
            }

            return ele[keys[0] + temp[1]] === 0 || ele[keys[1] + temp[0]] + ele[keys[0] + temp[1]] >= ele[keys[0] + temp[0]];
          }
        }, {
          key: "updateChangeTouches",
          value: function updateChangeTouches(evt) {
            // tslint:disable-next-line:max-line-length
            var point = evt.changedTouches && evt.changedTouches.length !== 0 ? evt.changedTouches[0] : evt;
            return point;
          }
        }]);

        return Touch;
      }(Base);

      __decorate$5([Event$1()], Touch.prototype, "tap", void 0);

      __decorate$5([Event$1()], Touch.prototype, "tapHold", void 0);

      __decorate$5([Event$1()], Touch.prototype, "swipe", void 0);

      __decorate$5([Event$1()], Touch.prototype, "scroll", void 0);

      __decorate$5([Property(350)], Touch.prototype, "tapThreshold", void 0);

      __decorate$5([Property(750)], Touch.prototype, "tapHoldThreshold", void 0);

      __decorate$5([Complex({}, SwipeSettings)], Touch.prototype, "swipeSettings", void 0);

      Touch = __decorate$5([NotifyPropertyChanges], Touch);
      /**
       * SanitizeHtmlHelper for sanitize the value.
       */

      var removeTags = ['script', 'style', 'iframe[src]', 'link[href*="javascript:"]', 'object[type="text/x-scriptlet"]', 'object[data^="data:text/html;base64"]', 'img[src^="data:text/html;base64"]', '[src^="javascript:"]', '[dynsrc^="javascript:"]', '[lowsrc^="javascript:"]', '[type^="application/x-shockwave-flash"]'];
      var removeAttrs = [{
        attribute: 'href',
        selector: '[href*="javascript:"]'
      }, {
        attribute: 'background',
        selector: '[background^="javascript:"]'
      }, {
        attribute: 'style',
        selector: '[style*="javascript:"]'
      }, {
        attribute: 'style',
        selector: '[style*="expression("]'
      }, {
        attribute: 'href',
        selector: 'a[href^="data:text/html;base64"]'
      }];
      var jsEvents = ['onchange', 'onclick', 'onmouseover', 'onmouseout', 'onkeydown', 'onload', 'onerror', 'onblur', 'onfocus', 'onbeforeload', 'onbeforeunload', 'onkeyup', 'onsubmit', 'onafterprint', 'onbeforeonload', 'onbeforeprint', 'onblur', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'oncontextmenu', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onemptied', 'onended', 'onerror', 'onerror', 'onfocus', 'onformchange', 'onforminput', 'onhaschange', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmessage', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onoffline', 'onoine', 'ononline', 'onpagehide', 'onpageshow', 'onpause', 'onplay', 'onplaying', 'onpopstate', 'onprogress', 'onratechange', 'onreadystatechange', 'onredo', 'onresize', 'onscroll', 'onseeked', 'onseeking', 'onselect', 'onstalled', 'onstorage', 'onsubmit', 'onsuspend', 'ontimeupdate', 'onundo', 'onunload', 'onvolumechange', 'onwaiting', 'onmouseenter', 'onmouseleave', 'onmousewheel', 'onstart', 'onpropertychange'];

      var SanitizeHtmlHelper = /*#__PURE__*/function () {
        function SanitizeHtmlHelper() {
          _classCallCheck2(this, SanitizeHtmlHelper);
        }

        _createClass2(SanitizeHtmlHelper, null, [{
          key: "beforeSanitize",
          value: function beforeSanitize() {
            return {
              selectors: {
                tags: removeTags,
                attributes: removeAttrs
              }
            };
          }
        }, {
          key: "sanitize",
          value: function sanitize(value) {
            var item = this.beforeSanitize();
            var output = this.serializeValue(item, value);
            return output;
          }
        }, {
          key: "serializeValue",
          value: function serializeValue(item, value) {
            this.removeAttrs = item.selectors.attributes;
            this.removeTags = item.selectors.tags;
            this.wrapElement = document.createElement('div');
            this.wrapElement.innerHTML = value;
            this.removeXssTags();
            this.removeJsEvents();
            this.removeXssAttrs();
            var tempEleValue = this.wrapElement.innerHTML;
            this.removeElement();
            return tempEleValue;
          }
        }, {
          key: "removeElement",
          value: function removeElement() {
            // Removes an element's attibute to avoid html tag validation
            var nodes = this.wrapElement.children;

            for (var j = 0; j < nodes.length; j++) {
              var attribute = nodes[j].attributes;

              for (var i = 0; i < attribute.length; i++) {
                this.wrapElement.children[j].removeAttribute(attribute[i].localName);
              }
            }
          }
        }, {
          key: "removeXssTags",
          value: function removeXssTags() {
            var elements = this.wrapElement.querySelectorAll(this.removeTags.join(','));

            if (elements.length > 0) {
              elements.forEach(function (element) {
                detach(element);
              });
            } else {
              return;
            }
          }
        }, {
          key: "removeJsEvents",
          value: function removeJsEvents() {
            var elements = this.wrapElement.querySelectorAll('[' + jsEvents.join('],[') + ']');

            if (elements.length > 0) {
              elements.forEach(function (element) {
                jsEvents.forEach(function (attr) {
                  if (element.hasAttribute(attr)) {
                    element.removeAttribute(attr);
                  }
                });
              });
            } else {
              return;
            }
          }
        }, {
          key: "removeXssAttrs",
          value: function removeXssAttrs() {
            var _this24 = this;

            this.removeAttrs.forEach(function (item, index) {
              var elements = _this24.wrapElement.querySelectorAll(item.selector);

              if (elements.length > 0) {
                elements.forEach(function (element) {
                  element.removeAttribute(item.attribute);
                });
              }
            });
          }
        }]);

        return SanitizeHtmlHelper;
      }();
      /**
       * Base modules
       */
      //# sourceMappingURL=ej2-base.es2015.js.map

      /***/

    },

    /***/
    "4uE9":
    /*!****************************************************************!*\
      !*** ./src/app/pages/Payment Heads/payment-heads.component.ts ***!
      \****************************************************************/

    /*! exports provided: PaymentHeadsComponent */

    /***/
    function uE9(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PaymentHeadsComponent", function () {
        return PaymentHeadsComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");

      var PaymentHeadsComponent = /*#__PURE__*/function () {
        function PaymentHeadsComponent() {
          _classCallCheck2(this, PaymentHeadsComponent);
        }

        _createClass2(PaymentHeadsComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
        }]);

        return PaymentHeadsComponent;
      }();

      PaymentHeadsComponent.ɵfac = function PaymentHeadsComponent_Factory(t) {
        return new (t || PaymentHeadsComponent)();
      };

      PaymentHeadsComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: PaymentHeadsComponent,
        selectors: [["app-payment-heads"]],
        decls: 1,
        vars: 0,
        template: function PaymentHeadsComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "router-outlet");
          }
        },
        directives: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterOutlet"]],
        styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL1BheW1lbnQgSGVhZHMvcGF5bWVudC1oZWFkcy5jb21wb25lbnQuc2NzcyJ9 */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PaymentHeadsComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-payment-heads',
            templateUrl: './payment-heads.component.html',
            styleUrls: ['./payment-heads.component.scss']
          }]
        }], function () {
          return [];
        }, null);
      })();
      /***/

    },

    /***/
    "5YkT":
    /*!*************************************************************************************!*\
      !*** ./node_modules/@syncfusion/ej2-navigations/dist/es6/ej2-navigations.es2015.js ***!
      \*************************************************************************************/

    /*! exports provided: MenuAnimationSettings, MenuItem, HScroll, VScroll, Item, Toolbar, AccordionActionSettings, AccordionAnimationSettings, AccordionItem, Accordion, ContextMenu, Menu, TabActionSettings, TabAnimationSettings, Header, TabItem, Tab, FieldsSettings, ActionSettings, NodeAnimationSettings, TreeView, Sidebar */

    /***/
    function YkT(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MenuAnimationSettings", function () {
        return MenuAnimationSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MenuItem", function () {
        return MenuItem;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HScroll", function () {
        return HScroll;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VScroll", function () {
        return VScroll;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Item", function () {
        return Item;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Toolbar", function () {
        return Toolbar;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AccordionActionSettings", function () {
        return AccordionActionSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AccordionAnimationSettings", function () {
        return AccordionAnimationSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AccordionItem", function () {
        return AccordionItem;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Accordion", function () {
        return Accordion;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ContextMenu", function () {
        return ContextMenu;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Menu", function () {
        return Menu;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TabActionSettings", function () {
        return TabActionSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TabAnimationSettings", function () {
        return TabAnimationSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Header", function () {
        return Header;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TabItem", function () {
        return TabItem;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Tab", function () {
        return Tab;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FieldsSettings", function () {
        return FieldsSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ActionSettings", function () {
        return ActionSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NodeAnimationSettings", function () {
        return NodeAnimationSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeView", function () {
        return TreeView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Sidebar", function () {
        return Sidebar;
      });
      /* harmony import */


      var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @syncfusion/ej2-base */
      "4SUy");
      /* harmony import */


      var _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @syncfusion/ej2-lists */
      "72GX");
      /* harmony import */


      var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @syncfusion/ej2-popups */
      "Naoh");
      /* harmony import */


      var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @syncfusion/ej2-buttons */
      "TF3C");
      /* harmony import */


      var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @syncfusion/ej2-data */
      "H552");
      /* harmony import */


      var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @syncfusion/ej2-inputs */
      "ngVE");

      var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var CLS_ROOT = 'e-hscroll';
      var CLS_RTL = 'e-rtl';
      var CLS_DISABLE = 'e-overlay';
      var CLS_HSCROLLBAR = 'e-hscroll-bar';
      var CLS_HSCROLLCON = 'e-hscroll-content';
      var CLS_NAVARROW = 'e-nav-arrow';
      var CLS_NAVRIGHTARROW = 'e-nav-right-arrow';
      var CLS_NAVLEFTARROW = 'e-nav-left-arrow';
      var CLS_HSCROLLNAV = 'e-scroll-nav';
      var CLS_HSCROLLNAVRIGHT = 'e-scroll-right-nav';
      var CLS_HSCROLLNAVLEFT = 'e-scroll-left-nav';
      var CLS_DEVICE = 'e-scroll-device';
      var CLS_OVERLAY = 'e-scroll-overlay';
      var CLS_RIGHTOVERLAY = 'e-scroll-right-overlay';
      var CLS_LEFTOVERLAY = 'e-scroll-left-overlay';
      var OVERLAY_MAXWID = 40;
      /**
       * HScroll module is introduces horizontal scroller when content exceeds the current viewing area.
       * It can be useful for the components like Toolbar, Tab which needs horizontal scrolling alone.
       * Hidden content can be view by touch moving or icon click.
       * ```html
       * <div id="scroll"/>
       * <script>
       *   var scrollObj = new HScroll();
       *   scrollObj.appendTo("#scroll");
       * </script>
       * ```
       */

      var HScroll = /*#__PURE__*/function (_syncfusion_ej2_base_) {
        _inherits2(HScroll, _syncfusion_ej2_base_);

        var _super9 = _createSuper(HScroll);

        /**
         * Initializes a new instance of the HScroll class.
         * @param options  - Specifies HScroll model properties as options.
         * @param element  - Specifies the element for which horizontal scrolling applies.
         */
        function HScroll(options, element) {
          _classCallCheck2(this, HScroll);

          return _super9.call(this, options, element);
        }
        /**
         * Initialize the event handler
         * @private
         */


        _createClass2(HScroll, [{
          key: "preRender",
          value: function preRender() {
            this.browser = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name;
            this.browserCheck = this.browser === 'mozilla';
            this.isDevice = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice;
            this.customStep = true;
            var element = this.element;
            this.ieCheck = this.browser === 'edge' || this.browser === 'msie';
            this.initialize();

            if (element.id === '') {
              element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('hscroll');
              this.uniqueId = true;
            }

            element.style.display = 'block';

            if (this.enableRtl) {
              element.classList.add(CLS_RTL);
            }
          }
          /**
           * To Initialize the horizontal scroll  rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
              scroll: this.touchHandler.bind(this),
              swipe: this.swipeHandler.bind(this)
            });

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.scrollEle, 'scroll', this.scrollHandler, this);

            if (!this.isDevice) {
              this.createNavIcon(this.element);
            } else {
              this.element.classList.add(CLS_DEVICE);
              this.createOverlay(this.element);
            }

            this.setScrollState();
          }
        }, {
          key: "setScrollState",
          value: function setScrollState() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.scrollStep) || this.scrollStep < 0) {
              this.scrollStep = this.scrollEle.offsetWidth;
              this.customStep = false;
            } else {
              this.customStep = true;
            }
          }
        }, {
          key: "initialize",
          value: function initialize() {
            var scrollEle = this.createElement('div', {
              className: CLS_HSCROLLCON
            });
            var scrollDiv = this.createElement('div', {
              className: CLS_HSCROLLBAR
            });
            scrollDiv.setAttribute('tabindex', '-1');
            var ele = this.element;
            var innerEle = [].slice.call(ele.children);

            var _iterator34 = _createForOfIteratorHelper(innerEle),
                _step34;

            try {
              for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
                var _ele2 = _step34.value;
                scrollEle.appendChild(_ele2);
              }
            } catch (err) {
              _iterator34.e(err);
            } finally {
              _iterator34.f();
            }

            scrollDiv.appendChild(scrollEle);
            ele.appendChild(scrollDiv);
            scrollDiv.style.overflowX = 'hidden';
            this.scrollEle = scrollDiv;
            this.scrollItems = scrollEle;
          }
        }, {
          key: "getPersistData",
          value: function getPersistData() {
            var keyEntity = ['scrollStep'];
            return this.addOnPersist(keyEntity);
          }
          /**
           * Returns the current module name.
           * @returns string
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'hScroll';
          }
          /**
           * Removes the control from the DOM and also removes all its related events.
           * @returns void
           */

        }, {
          key: "destroy",
          value: function destroy() {
            var ele = this.element;
            ele.style.display = '';
            ele.classList.remove(CLS_ROOT);
            ele.classList.remove(CLS_DEVICE);
            var nav = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-' + ele.id + '_nav.' + CLS_HSCROLLNAV, ele);
            var overlay = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_OVERLAY, ele);
            [].slice.call(overlay).forEach(function (ele) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
            });

            var _iterator35 = _createForOfIteratorHelper([].slice.call(this.scrollItems.children)),
                _step35;

            try {
              for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
                var elem = _step35.value;
                ele.appendChild(elem);
              }
            } catch (err) {
              _iterator35.e(err);
            } finally {
              _iterator35.f();
            }

            if (this.uniqueId) {
              this.element.removeAttribute('id');
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.scrollEle);

            if (nav.length > 0) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(nav[0]);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nav[1])) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(nav[1]);
              }
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.scrollEle, 'scroll', this.scrollHandler);

            this.touchModule.destroy();
            this.touchModule = null;

            _get2(_getPrototypeOf2(HScroll.prototype), "destroy", this).call(this);
          }
          /**
           * Specifies the value to disable/enable the HScroll component.
           * When set to `true` , the component will be disabled.
           * @param  {boolean} value - Based on this Boolean value, HScroll will be enabled (false) or disabled (true).
           * @returns void.
           */

        }, {
          key: "disable",
          value: function disable(value) {
            var navEles = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-scroll-nav:not(.' + CLS_DISABLE + ')', this.element);
            value ? this.element.classList.add(CLS_DISABLE) : this.element.classList.remove(CLS_DISABLE);
            [].slice.call(navEles).forEach(function (el) {
              el.setAttribute('tabindex', !value ? '0' : '-1');
            });
          }
        }, {
          key: "createOverlay",
          value: function createOverlay(element) {
            var id = element.id.concat('_nav');
            var rightOverlayEle = this.createElement('div', {
              className: CLS_OVERLAY + ' ' + CLS_RIGHTOVERLAY
            });
            var clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);
            var rightEle = this.createElement('div', {
              id: id.concat('_right'),
              className: clsRight
            });
            var navItem = this.createElement('div', {
              className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'
            });
            rightEle.appendChild(navItem);
            var leftEle = this.createElement('div', {
              className: CLS_OVERLAY + ' ' + CLS_LEFTOVERLAY
            });

            if (this.ieCheck) {
              rightEle.classList.add('e-ie-align');
            }

            element.appendChild(rightOverlayEle);
            element.appendChild(rightEle);
            element.insertBefore(leftEle, element.firstChild);
            this.eventBinding([rightEle]);
          }
        }, {
          key: "createNavIcon",
          value: function createNavIcon(element) {
            var id = element.id.concat('_nav');
            var clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);
            var nav = this.createElement('div', {
              id: id.concat('_right'),
              className: clsRight
            });
            nav.setAttribute('aria-disabled', 'false');
            var navItem = this.createElement('div', {
              className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'
            });
            var clsLeft = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVLEFT);
            var navEle = this.createElement('div', {
              id: id.concat('_left'),
              className: clsLeft + ' ' + CLS_DISABLE
            });
            navEle.setAttribute('aria-disabled', 'true');
            var navLeftItem = this.createElement('div', {
              className: CLS_NAVLEFTARROW + ' ' + CLS_NAVARROW + ' e-icons'
            });
            navEle.appendChild(navLeftItem);
            nav.appendChild(navItem);
            element.appendChild(nav);
            element.insertBefore(navEle, element.firstChild);

            if (this.ieCheck) {
              nav.classList.add('e-ie-align');
              navEle.classList.add('e-ie-align');
            }

            this.eventBinding([nav, navEle]);
          }
        }, {
          key: "onKeyPress",
          value: function onKeyPress(e) {
            var _this25 = this;

            if (e.key === 'Enter') {
              var timeoutFun = function timeoutFun() {
                _this25.keyTimeout = true;

                _this25.eleScrolling(10, e.target, true);
              };

              this.keyTimer = window.setTimeout(function () {
                timeoutFun();
              }, 100);
            }
          }
        }, {
          key: "onKeyUp",
          value: function onKeyUp(e) {
            if (e.key !== 'Enter') {
              return;
            }

            if (this.keyTimeout) {
              this.keyTimeout = false;
            } else {
              e.target.click();
            }

            clearTimeout(this.keyTimer);
          }
        }, {
          key: "eventBinding",
          value: function eventBinding(ele) {
            var _this26 = this;

            [].slice.call(ele).forEach(function (el) {
              new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](el, {
                tapHold: _this26.tabHoldHandler.bind(_this26),
                tapHoldThreshold: 500
              });
              el.addEventListener('keydown', _this26.onKeyPress.bind(_this26));
              el.addEventListener('keyup', _this26.onKeyUp.bind(_this26));
              el.addEventListener('mouseup', _this26.repeatScroll.bind(_this26));
              el.addEventListener('touchend', _this26.repeatScroll.bind(_this26));
              el.addEventListener('contextmenu', function (e) {
                e.preventDefault();
              });

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(el, 'click', _this26.clickEventHandler, _this26);
            });
          }
        }, {
          key: "repeatScroll",
          value: function repeatScroll() {
            clearInterval(this.timeout);
          }
        }, {
          key: "tabHoldHandler",
          value: function tabHoldHandler(e) {
            var _this27 = this;

            var trgt = e.originalEvent.target;
            trgt = this.contains(trgt, CLS_HSCROLLNAV) ? trgt.firstElementChild : trgt;
            var scrollDis = 10;

            var timeoutFun = function timeoutFun() {
              _this27.eleScrolling(scrollDis, trgt, true);
            };

            this.timeout = window.setInterval(function () {
              timeoutFun();
            }, 50);
          }
        }, {
          key: "contains",
          value: function contains(ele, className) {
            return ele.classList.contains(className);
          }
        }, {
          key: "eleScrolling",
          value: function eleScrolling(scrollDis, trgt, isContinuous) {
            var element = this.scrollEle;
            var rootEle = this.element;
            var classList$$1 = trgt.classList;

            if (classList$$1.contains(CLS_HSCROLLNAV)) {
              classList$$1 = trgt.querySelector('.' + CLS_NAVARROW).classList;
            }

            if (this.contains(rootEle, CLS_RTL) && this.browserCheck) {
              scrollDis = -scrollDis;
            }

            var scrlLeft = element.scrollLeft;

            if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {
              if (classList$$1.contains(CLS_NAVRIGHTARROW)) {
                this.frameScrollRequest(scrollDis, 'add', isContinuous);
              } else {
                this.frameScrollRequest(scrollDis, '', isContinuous);
              }
            } else {
              if (classList$$1.contains(CLS_NAVLEFTARROW)) {
                this.frameScrollRequest(scrollDis, 'add', isContinuous);
              } else {
                this.frameScrollRequest(scrollDis, '', isContinuous);
              }
            }
          }
        }, {
          key: "clickEventHandler",
          value: function clickEventHandler(e) {
            this.eleScrolling(this.scrollStep, e.target, false);
          }
        }, {
          key: "swipeHandler",
          value: function swipeHandler(e) {
            var swipeEle = this.scrollEle;
            var distance;

            if (e.velocity <= 1) {
              distance = e.distanceX / (e.velocity * 10);
            } else {
              distance = e.distanceX / e.velocity;
            }

            var start = 0.5;

            var animate = function animate() {
              var step = Math.sin(start);

              if (step <= 0) {
                window.cancelAnimationFrame(step);
              } else {
                if (e.swipeDirection === 'Left') {
                  swipeEle.scrollLeft += distance * step;
                } else if (e.swipeDirection === 'Right') {
                  swipeEle.scrollLeft -= distance * step;
                }

                start -= 0.5;
                window.requestAnimationFrame(animate);
              }
            };

            animate();
          }
        }, {
          key: "scrollUpdating",
          value: function scrollUpdating(scrollVal, action) {
            if (action === 'add') {
              this.scrollEle.scrollLeft += scrollVal;
            } else {
              this.scrollEle.scrollLeft -= scrollVal;
            }
          }
        }, {
          key: "frameScrollRequest",
          value: function frameScrollRequest(scrollVal, action, isContinuous) {
            var _this28 = this;

            var step = 10;

            if (isContinuous) {
              this.scrollUpdating(scrollVal, action);
              return;
            }

            if (!this.customStep) {
              [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_OVERLAY, this.element)).forEach(function (el) {
                scrollVal -= el.offsetWidth;
              });
            }

            var animate = function animate() {
              var scrollValue;
              var scrollStep;

              if (_this28.contains(_this28.element, CLS_RTL) && _this28.browserCheck) {
                scrollValue = -scrollVal;
                scrollStep = -step;
              } else {
                scrollValue = scrollVal;
                scrollStep = step;
              }

              if (scrollValue < step) {
                window.cancelAnimationFrame(scrollStep);
              } else {
                _this28.scrollUpdating(scrollStep, action);

                scrollVal -= scrollStep;
                window.requestAnimationFrame(animate);
              }
            };

            animate();
          }
        }, {
          key: "touchHandler",
          value: function touchHandler(e) {
            var ele = this.scrollEle;
            var distance;
            distance = e.distanceX;

            if (this.ieCheck && this.contains(this.element, CLS_RTL)) {
              distance = -distance;
            }

            if (e.scrollDirection === 'Left') {
              ele.scrollLeft = ele.scrollLeft + distance;
            } else if (e.scrollDirection === 'Right') {
              ele.scrollLeft = ele.scrollLeft - distance;
            }
          }
        }, {
          key: "arrowDisabling",
          value: function arrowDisabling(addDisable, removeDisable) {
            if (this.isDevice) {
              var arrowEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(addDisable) ? removeDisable : addDisable;
              var arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(addDisable)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(arrowIcon, [CLS_NAVRIGHTARROW], [CLS_NAVLEFTARROW]);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(arrowIcon, [CLS_NAVLEFTARROW], [CLS_NAVRIGHTARROW]);
              }
            } else {
              addDisable.classList.add(CLS_DISABLE);
              addDisable.setAttribute('aria-disabled', 'true');
              addDisable.removeAttribute('tabindex');
              removeDisable.classList.remove(CLS_DISABLE);
              removeDisable.setAttribute('aria-disabled', 'false');
              removeDisable.setAttribute('tabindex', '0');
            }

            this.repeatScroll();
          }
        }, {
          key: "scrollHandler",
          value: function scrollHandler(e) {
            var target = e.target;
            var width = target.offsetWidth;
            var rootEle = this.element;
            var navLeftEle = this.element.querySelector('.' + CLS_HSCROLLNAVLEFT);
            var navRightEle = this.element.querySelector('.' + CLS_HSCROLLNAVRIGHT);
            var leftOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);
            var rightOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);
            var scrollLeft = target.scrollLeft;

            if (scrollLeft <= 0) {
              scrollLeft = -scrollLeft;
            }

            if (this.isDevice) {
              if (this.enableRtl && !(this.browserCheck || this.ieCheck)) {
                leftOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);
                rightOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);
              }

              if (scrollLeft < OVERLAY_MAXWID) {
                leftOverlay.style.width = scrollLeft + 'px';
              } else {
                leftOverlay.style.width = '40px';
              }

              if (target.scrollWidth - Math.ceil(width + scrollLeft) < OVERLAY_MAXWID) {
                rightOverlay.style.width = target.scrollWidth - Math.ceil(width + scrollLeft) + 'px';
              } else {
                rightOverlay.style.width = '40px';
              }
            }

            if (scrollLeft === 0) {
              if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {
                this.arrowDisabling(navLeftEle, navRightEle);
              } else {
                this.arrowDisabling(navRightEle, navLeftEle);
              }
            } else if (Math.ceil(width + scrollLeft + .1) >= target.scrollWidth) {
              if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {
                this.arrowDisabling(navRightEle, navLeftEle);
              } else {
                this.arrowDisabling(navLeftEle, navRightEle);
              }
            } else {
              var disEle = this.element.querySelector('.' + CLS_HSCROLLNAV + '.' + CLS_DISABLE);

              if (disEle) {
                disEle.classList.remove(CLS_DISABLE);
                disEle.setAttribute('aria-disabled', 'false');
                disEle.setAttribute('tabindex', '0');
              }
            }
          }
          /**
           * Gets called when the model property changes.The data that describes the old and new values of property that changed.
           * @param  {HScrollModel} newProp
           * @param  {HScrollModel} oldProp
           * @returns void
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i14 = 0, _Object$keys3 = Object.keys(newProp); _i14 < _Object$keys3.length; _i14++) {
              var prop = _Object$keys3[_i14];

              switch (prop) {
                case 'scrollStep':
                  this.setScrollState();
                  break;

                case 'enableRtl':
                  newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);
                  break;
              }
            }
          }
        }]);

        return HScroll;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], HScroll.prototype, "scrollStep", void 0);

      HScroll = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], HScroll);

      var __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var CLS_ROOT$1 = 'e-vscroll';
      var CLS_RTL$1 = 'e-rtl';
      var CLS_DISABLE$1 = 'e-overlay';
      var CLS_VSCROLLBAR = 'e-vscroll-bar';
      var CLS_VSCROLLCON = 'e-vscroll-content';
      var CLS_NAVARROW$1 = 'e-nav-arrow';
      var CLS_NAVUPARROW = 'e-nav-up-arrow';
      var CLS_NAVDOWNARROW = 'e-nav-down-arrow';
      var CLS_VSCROLLNAV = 'e-scroll-nav';
      var CLS_VSCROLLNAVUP = 'e-scroll-up-nav';
      var CLS_VSCROLLNAVDOWN = 'e-scroll-down-nav';
      var CLS_DEVICE$1 = 'e-scroll-device';
      var CLS_OVERLAY$1 = 'e-scroll-overlay';
      var CLS_UPOVERLAY = 'e-scroll-up-overlay';
      var CLS_DOWNOVERLAY = 'e-scroll-down-overlay';
      var OVERLAY_MAXWID$1 = 40;
      /**
       * VScroll module is introduces vertical scroller when content exceeds the current viewing area.
       * It can be useful for the components like Toolbar, Tab which needs vertical scrolling alone.
       * Hidden content can be view by touch moving or icon click.
       * ```html
       * <div id="scroll"/>
       * <script>
       *   var scrollObj = new VScroll();
       *   scrollObj.appendTo("#scroll");
       * </script>
       * ```
       */

      var VScroll = /*#__PURE__*/function (_syncfusion_ej2_base_2) {
        _inherits2(VScroll, _syncfusion_ej2_base_2);

        var _super10 = _createSuper(VScroll);

        /**
         * Initializes a new instance of the VScroll class.
         * @param options  - Specifies VScroll model properties as options.
         * @param element  - Specifies the element for which vertical scrolling applies.
         */
        function VScroll(options, element) {
          _classCallCheck2(this, VScroll);

          return _super10.call(this, options, element);
        }
        /**
         * Initialize the event handler
         * @private
         */


        _createClass2(VScroll, [{
          key: "preRender",
          value: function preRender() {
            this.browser = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name;
            this.browserCheck = this.browser === 'mozilla';
            this.isDevice = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice;
            this.customStep = true;
            var ele = this.element;
            this.ieCheck = this.browser === 'edge' || this.browser === 'msie';
            this.initialize();

            if (ele.id === '') {
              ele.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('vscroll');
              this.uniqueId = true;
            }

            ele.style.display = 'block';

            if (this.enableRtl) {
              ele.classList.add(CLS_RTL$1);
            }
          }
          /**
           * To Initialize the vertical scroll rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
              scroll: this.touchHandler.bind(this),
              swipe: this.swipeHandler.bind(this)
            });

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.scrollEle, 'scroll', this.scrollEventHandler, this);

            if (!this.isDevice) {
              this.createNavIcon(this.element);
            } else {
              this.element.classList.add(CLS_DEVICE$1);
              this.createOverlayElement(this.element);
            }

            this.setScrollState();

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'wheel', this.wheelEventHandler, this);
          }
        }, {
          key: "setScrollState",
          value: function setScrollState() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.scrollStep) || this.scrollStep < 0) {
              this.scrollStep = this.scrollEle.offsetHeight;
              this.customStep = false;
            } else {
              this.customStep = true;
            }
          }
        }, {
          key: "initialize",
          value: function initialize() {
            var scrollCnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
              className: CLS_VSCROLLCON
            });
            var scrollBar = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
              className: CLS_VSCROLLBAR
            });
            scrollBar.setAttribute('tabindex', '-1');
            var ele = this.element;
            var innerEle = [].slice.call(ele.children);

            var _iterator36 = _createForOfIteratorHelper(innerEle),
                _step36;

            try {
              for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
                var _ele3 = _step36.value;
                scrollCnt.appendChild(_ele3);
              }
            } catch (err) {
              _iterator36.e(err);
            } finally {
              _iterator36.f();
            }

            scrollBar.appendChild(scrollCnt);
            ele.appendChild(scrollBar);
            scrollBar.style.overflowY = 'hidden';
            this.scrollEle = scrollBar;
            this.scrollItems = scrollCnt;
          }
        }, {
          key: "getPersistData",
          value: function getPersistData() {
            var keyEntity = ['scrollStep'];
            return this.addOnPersist(keyEntity);
          }
          /**
           * Returns the current module name.
           * @returns string
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'vScroll';
          }
          /**
           * Removes the control from the DOM and also removes all its related events.
           * @returns void
           */

        }, {
          key: "destroy",
          value: function destroy() {
            var el = this.element;
            el.style.display = '';
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [CLS_ROOT$1, CLS_DEVICE$1]);
            var navs = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-' + el.id + '_nav.' + CLS_VSCROLLNAV, el);
            var overlays = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_OVERLAY$1, el);
            [].slice.call(overlays).forEach(function (ele) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
            });

            var _iterator37 = _createForOfIteratorHelper([].slice.call(this.scrollItems.children)),
                _step37;

            try {
              for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
                var elem = _step37.value;
                el.appendChild(elem);
              }
            } catch (err) {
              _iterator37.e(err);
            } finally {
              _iterator37.f();
            }

            if (this.uniqueId) {
              this.element.removeAttribute('id');
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.scrollEle);

            if (navs.length > 0) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(navs[0]);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(navs[1])) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(navs[1]);
              }
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.scrollEle, 'scroll', this.scrollEventHandler);

            this.touchModule.destroy();
            this.touchModule = null;

            _get2(_getPrototypeOf2(VScroll.prototype), "destroy", this).call(this);
          }
          /**
           * Specifies the value to disable/enable the VScroll component.
           * When set to `true` , the component will be disabled.
           * @param  {boolean} value - Based on this Boolean value, VScroll will be enabled (false) or disabled (true).
           * @returns void.
           */

        }, {
          key: "disable",
          value: function disable(value) {
            var navEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-scroll-nav:not(.' + CLS_DISABLE$1 + ')', this.element);
            value ? this.element.classList.add(CLS_DISABLE$1) : this.element.classList.remove(CLS_DISABLE$1);
            [].slice.call(navEle).forEach(function (el) {
              el.setAttribute('tabindex', !value ? '0' : '-1');
            });
          }
        }, {
          key: "createOverlayElement",
          value: function createOverlayElement(element) {
            var id = element.id.concat('_nav');
            var downOverlayEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
              className: CLS_OVERLAY$1 + ' ' + CLS_DOWNOVERLAY
            });
            var clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);
            var downEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
              id: id.concat('down'),
              className: clsDown
            });
            var navItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
              className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW$1 + ' e-icons'
            });
            downEle.appendChild(navItem);
            var upEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
              className: CLS_OVERLAY$1 + ' ' + CLS_UPOVERLAY
            });

            if (this.ieCheck) {
              downEle.classList.add('e-ie-align');
            }

            element.appendChild(downOverlayEle);
            element.appendChild(downEle);
            element.insertBefore(upEle, element.firstChild);
            this.eventBinding([downEle]);
          }
        }, {
          key: "createNavIcon",
          value: function createNavIcon(element) {
            var id = element.id.concat('_nav');
            var clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);
            var nav = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
              id: id.concat('_down'),
              className: clsDown
            });
            nav.setAttribute('aria-disabled', 'false');
            var navItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
              className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW$1 + ' e-icons'
            });
            var clsUp = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVUP);
            var navElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
              id: id.concat('_up'),
              className: clsUp + ' ' + CLS_DISABLE$1
            });
            navElement.setAttribute('aria-disabled', 'true');
            var navUpItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
              className: CLS_NAVUPARROW + ' ' + CLS_NAVARROW$1 + ' e-icons'
            });
            navElement.appendChild(navUpItem);
            nav.appendChild(navItem);
            nav.setAttribute('tabindex', '0');
            element.appendChild(nav);
            element.insertBefore(navElement, element.firstChild);

            if (this.ieCheck) {
              nav.classList.add('e-ie-align');
              navElement.classList.add('e-ie-align');
            }

            this.eventBinding([nav, navElement]);
          }
        }, {
          key: "onKeyPress",
          value: function onKeyPress(ev) {
            var _this29 = this;

            if (ev.key === 'Enter') {
              var timeoutFun = function timeoutFun() {
                _this29.keyTimeout = true;

                _this29.eleScrolling(10, ev.target, true);
              };

              this.keyTimer = window.setTimeout(function () {
                timeoutFun();
              }, 100);
            }
          }
        }, {
          key: "onKeyUp",
          value: function onKeyUp(ev) {
            if (ev.key !== 'Enter') {
              return;
            }

            if (this.keyTimeout) {
              this.keyTimeout = false;
            } else {
              ev.target.click();
            }

            clearTimeout(this.keyTimer);
          }
        }, {
          key: "eventBinding",
          value: function eventBinding(element) {
            var _this30 = this;

            [].slice.call(element).forEach(function (ele) {
              new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](ele, {
                tapHold: _this30.tabHoldHandler.bind(_this30),
                tapHoldThreshold: 500
              });
              ele.addEventListener('keydown', _this30.onKeyPress.bind(_this30));
              ele.addEventListener('keyup', _this30.onKeyUp.bind(_this30));
              ele.addEventListener('mouseup', _this30.repeatScroll.bind(_this30));
              ele.addEventListener('touchend', _this30.repeatScroll.bind(_this30));
              ele.addEventListener('contextmenu', function (e) {
                e.preventDefault();
              });

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(ele, 'click', _this30.clickEventHandler, _this30);
            });
          }
        }, {
          key: "repeatScroll",
          value: function repeatScroll() {
            clearInterval(this.timeout);
          }
        }, {
          key: "tabHoldHandler",
          value: function tabHoldHandler(ev) {
            var _this31 = this;

            var trgt = ev.originalEvent.target;
            trgt = this.contains(trgt, CLS_VSCROLLNAV) ? trgt.firstElementChild : trgt;
            var scrollDistance = 10;

            var timeoutFun = function timeoutFun() {
              _this31.eleScrolling(scrollDistance, trgt, true);
            };

            this.timeout = window.setInterval(function () {
              timeoutFun();
            }, 50);
          }
        }, {
          key: "contains",
          value: function contains(element, className) {
            return element.classList.contains(className);
          }
        }, {
          key: "eleScrolling",
          value: function eleScrolling(scrollDis, trgt, isContinuous) {
            var rootElement = this.element;
            var classList$$1 = trgt.classList;

            if (classList$$1.contains(CLS_VSCROLLNAV)) {
              classList$$1 = trgt.querySelector('.' + CLS_NAVARROW$1).classList;
            }

            if (classList$$1.contains(CLS_NAVDOWNARROW)) {
              this.frameScrollRequest(scrollDis, 'add', isContinuous);
            } else if (classList$$1.contains(CLS_NAVUPARROW)) {
              this.frameScrollRequest(scrollDis, '', isContinuous);
            }
          }
        }, {
          key: "clickEventHandler",
          value: function clickEventHandler(event) {
            this.eleScrolling(this.scrollStep, event.target, false);
          }
        }, {
          key: "wheelEventHandler",
          value: function wheelEventHandler(e) {
            e.preventDefault();
            this.frameScrollRequest(this.scrollStep, e.deltaY > 0 ? 'add' : '', false);
          }
        }, {
          key: "swipeHandler",
          value: function swipeHandler(e) {
            var swipeElement = this.scrollEle;
            var distance;

            if (e.velocity <= 1) {
              distance = e.distanceY / (e.velocity * 10);
            } else {
              distance = e.distanceY / e.velocity;
            }

            var start = 0.5;

            var animate = function animate() {
              var step = Math.sin(start);

              if (step <= 0) {
                window.cancelAnimationFrame(step);
              } else {
                if (e.swipeDirection === 'Up') {
                  swipeElement.scrollTop += distance * step;
                } else if (e.swipeDirection === 'Down') {
                  swipeElement.scrollTop -= distance * step;
                }

                start -= 0.02;
                window.requestAnimationFrame(animate);
              }
            };

            animate();
          }
        }, {
          key: "scrollUpdating",
          value: function scrollUpdating(scrollVal, action) {
            if (action === 'add') {
              this.scrollEle.scrollTop += scrollVal;
            } else {
              this.scrollEle.scrollTop -= scrollVal;
            }
          }
        }, {
          key: "frameScrollRequest",
          value: function frameScrollRequest(scrollValue, action, isContinuous) {
            var _this32 = this;

            var step = 10;

            if (isContinuous) {
              this.scrollUpdating(scrollValue, action);
              return;
            }

            if (!this.customStep) {
              [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_OVERLAY$1, this.element)).forEach(function (el) {
                scrollValue -= el.offsetHeight;
              });
            }

            var animate = function animate() {
              if (scrollValue < step) {
                window.cancelAnimationFrame(step);
              } else {
                _this32.scrollUpdating(step, action);

                scrollValue -= step;
                window.requestAnimationFrame(animate);
              }
            };

            animate();
          }
        }, {
          key: "touchHandler",
          value: function touchHandler(e) {
            var el = this.scrollEle;
            var distance;
            distance = e.distanceY;

            if (e.scrollDirection === 'Up') {
              el.scrollTop = el.scrollTop + distance;
            } else if (e.scrollDirection === 'Down') {
              el.scrollTop = el.scrollTop - distance;
            }
          }
        }, {
          key: "arrowDisabling",
          value: function arrowDisabling(addDisableCls, removeDisableCls) {
            if (this.isDevice) {
              var arrowEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(addDisableCls) ? removeDisableCls : addDisableCls;
              var arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW$1);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(addDisableCls)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(arrowIcon, [CLS_NAVDOWNARROW], [CLS_NAVUPARROW]);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(arrowIcon, [CLS_NAVUPARROW], [CLS_NAVDOWNARROW]);
              }
            } else {
              addDisableCls.classList.add(CLS_DISABLE$1);
              addDisableCls.setAttribute('aria-disabled', 'true');
              addDisableCls.removeAttribute('tabindex');
              removeDisableCls.classList.remove(CLS_DISABLE$1);
              removeDisableCls.setAttribute('aria-disabled', 'false');
              removeDisableCls.setAttribute('tabindex', '0');
            }

            this.repeatScroll();
          }
        }, {
          key: "scrollEventHandler",
          value: function scrollEventHandler(e) {
            var target = e.target;
            var height = target.offsetHeight;
            var rootEle = this.element;
            var navUpEle = this.element.querySelector('.' + CLS_VSCROLLNAVUP);
            var navDownEle = this.element.querySelector('.' + CLS_VSCROLLNAVDOWN);
            var upOverlay = this.element.querySelector('.' + CLS_UPOVERLAY);
            var downOverlay = this.element.querySelector('.' + CLS_DOWNOVERLAY);
            var scrollTop = target.scrollTop;

            if (scrollTop <= 0) {
              scrollTop = -scrollTop;
            }

            if (this.isDevice) {
              if (scrollTop < OVERLAY_MAXWID$1) {
                upOverlay.style.height = scrollTop + 'px';
              } else {
                upOverlay.style.height = '40px';
              }

              if (target.scrollHeight - Math.ceil(height + scrollTop) < OVERLAY_MAXWID$1) {
                downOverlay.style.height = target.scrollHeight - Math.ceil(height + scrollTop) + 'px';
              } else {
                downOverlay.style.height = '40px';
              }
            }

            if (scrollTop === 0) {
              this.arrowDisabling(navUpEle, navDownEle);
            } else if (Math.ceil(height + scrollTop + .1) >= target.scrollHeight) {
              this.arrowDisabling(navDownEle, navUpEle);
            } else {
              var disEle = this.element.querySelector('.' + CLS_VSCROLLNAV + '.' + CLS_DISABLE$1);

              if (disEle) {
                disEle.classList.remove(CLS_DISABLE$1);
                disEle.setAttribute('aria-disabled', 'false');
                disEle.setAttribute('tabindex', '0');
              }
            }
          }
          /**
           * Gets called when the model property changes.The data that describes the old and new values of property that changed.
           * @param  {VScrollModel} newProp
           * @param  {VScrollModel} oldProp
           * @returns void
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i15 = 0, _Object$keys4 = Object.keys(newProp); _i15 < _Object$keys4.length; _i15++) {
              var prop = _Object$keys4[_i15];

              switch (prop) {
                case 'scrollStep':
                  this.setScrollState();
                  break;

                case 'enableRtl':
                  newProp.enableRtl ? this.element.classList.add(CLS_RTL$1) : this.element.classList.remove(CLS_RTL$1);
                  break;
              }
            }
          }
        }]);

        return VScroll;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], VScroll.prototype, "scrollStep", void 0);

      VScroll = __decorate$1([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], VScroll);

      var __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var ENTER = 'enter';
      var ESCAPE = 'escape';
      var FOCUSED = 'e-focused';
      var HEADER = 'e-menu-header';
      var SELECTED = 'e-selected';
      var SEPARATOR = 'e-separator';
      var UPARROW = 'uparrow';
      var DOWNARROW = 'downarrow';
      var LEFTARROW = 'leftarrow';
      var RIGHTARROW = 'rightarrow';
      var HOME = 'home';
      var END = 'end';
      var CARET = 'e-caret';
      var ITEM = 'e-menu-item';
      var DISABLED = 'e-disabled';
      var HIDE = 'e-menu-hide';
      var ICONS = 'e-icons';
      var RTL = 'e-rtl';
      var POPUP = 'e-menu-popup';
      var TEMPLATE_PROPERTY = 'Template';
      /**
       * Configures the field options of the Menu.
       */

      var FieldSettings = /*#__PURE__*/function (_syncfusion_ej2_base_3) {
        _inherits2(FieldSettings, _syncfusion_ej2_base_3);

        var _super11 = _createSuper(FieldSettings);

        function FieldSettings() {
          _classCallCheck2(this, FieldSettings);

          return _super11.apply(this, arguments);
        }

        return FieldSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('id')], FieldSettings.prototype, "itemId", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('parentId')], FieldSettings.prototype, "parentId", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('text')], FieldSettings.prototype, "text", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('iconCss')], FieldSettings.prototype, "iconCss", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('url')], FieldSettings.prototype, "url", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('separator')], FieldSettings.prototype, "separator", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('items')], FieldSettings.prototype, "children", void 0);
      /**
       * Specifies menu items.
       */


      var MenuItem = /*#__PURE__*/function (_syncfusion_ej2_base_4) {
        _inherits2(MenuItem, _syncfusion_ej2_base_4);

        var _super12 = _createSuper(MenuItem);

        function MenuItem() {
          _classCallCheck2(this, MenuItem);

          return _super12.apply(this, arguments);
        }

        return MenuItem;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MenuItem.prototype, "iconCss", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], MenuItem.prototype, "id", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MenuItem.prototype, "separator", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], MenuItem)], MenuItem.prototype, "items", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], MenuItem.prototype, "text", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], MenuItem.prototype, "url", void 0);
      /**
       * Animation configuration settings.
       */


      var MenuAnimationSettings = /*#__PURE__*/function (_syncfusion_ej2_base_5) {
        _inherits2(MenuAnimationSettings, _syncfusion_ej2_base_5);

        var _super13 = _createSuper(MenuAnimationSettings);

        function MenuAnimationSettings() {
          _classCallCheck2(this, MenuAnimationSettings);

          return _super13.apply(this, arguments);
        }

        return MenuAnimationSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('SlideDown')], MenuAnimationSettings.prototype, "effect", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(400)], MenuAnimationSettings.prototype, "duration", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('ease')], MenuAnimationSettings.prototype, "easing", void 0);
      /**
       * @private
       * Base class for Menu and ContextMenu components.
       */


      var MenuBase = /*#__PURE__*/function (_syncfusion_ej2_base_6) {
        _inherits2(MenuBase, _syncfusion_ej2_base_6);

        var _super14 = _createSuper(MenuBase);

        /**
         * Constructor for creating the widget.
         * @private
         */
        function MenuBase(options, element) {
          var _this33;

          _classCallCheck2(this, MenuBase);

          _this33 = _super14.call(this, options, element);
          _this33.navIdx = [];
          _this33.animation = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"]({});
          _this33.isTapHold = false;
          _this33.tempItem = [];
          return _this33;
        }
        /**
         * Initialized third party configuration settings.
         * @private
         */


        _createClass2(MenuBase, [{
          key: "preRender",
          value: function preRender() {
            if (!this.isMenu) {
              var ul;

              if (this.element.tagName === 'EJS-CONTEXTMENU') {
                ul = this.createElement('ul', {
                  id: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])(this.getModuleName()),
                  className: 'e-control e-lib e-' + this.getModuleName()
                });
                var ejInst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', this.element);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);
                this.clonedElement = this.element;
                this.element = ul;
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInst, this.element);
              } else {
                ul = this.createElement('ul', {
                  id: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])(this.getModuleName())
                });
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([].slice.call(this.element.cloneNode(true).children), ul);
                var refEle = this.element.nextElementSibling;
                refEle ? this.element.parentElement.insertBefore(ul, refEle) : this.element.parentElement.appendChild(ul);
                this.clonedElement = ul;
              }

              this.clonedElement.style.display = 'none';
            }

            if (this.element.tagName === 'EJS-MENU') {
              var ele = this.element;
              var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', ele);

              var _ul = this.createElement('ul');

              var wrapper = this.createElement('EJS-MENU', {
                className: 'e-' + this.getModuleName() + '-wrapper'
              });

              for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {
                _ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
              }

              ele.parentNode.insertBefore(wrapper, ele);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
              ele = _ul;
              wrapper.appendChild(ele);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInstance, ele);
              this.clonedElement = wrapper;
              this.element = ele;

              if (!this.element.id) {
                this.element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])(this.getModuleName());
              }
            }
          }
          /**
           * Initialize the control rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.initialize();
            this.renderItems();

            if (this.isMenu && this.template && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              var menuTemplateId = this.element.id + TEMPLATE_PROPERTY;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(menuTemplateId, TEMPLATE_PROPERTY);

              if (Object.keys(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["blazorTemplates"]).length) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(this.tempItem, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["blazorTemplates"][menuTemplateId], [], true);
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(menuTemplateId, TEMPLATE_PROPERTY, this);
            }

            this.wireEvents();
            this.renderComplete();
          }
        }, {
          key: "initialize",
          value: function initialize() {
            var wrapper = this.getWrapper();

            if (!wrapper) {
              wrapper = this.createElement('div', {
                className: 'e-' + this.getModuleName() + '-wrapper'
              });

              if (this.isMenu) {
                this.element.parentElement.insertBefore(wrapper, this.element);
              } else {
                document.body.appendChild(wrapper);
              }
            }

            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], this.cssClass.split(' '));
            }

            if (this.enableRtl) {
              wrapper.classList.add(RTL);
            }

            wrapper.appendChild(this.element);

            if (this.isMenu && this.hamburgerMode) {
              if (!this.target) {
                this.createHeaderContainer(wrapper);
              }
            }
          }
        }, {
          key: "renderItems",
          value: function renderItems() {
            if (!this.items.length) {
              var items = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].createJsonFromElement(this.element, {
                fields: {
                  child: 'items'
                }
              });

              this.setProperties({
                items: items
              }, true);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                this.element = this.removeChildElement(this.element);
              } else {
                this.element.innerHTML = '';
              }
            }

            var ul = this.createItems(this.items);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(Array.prototype.slice.call(ul.children), this.element);
            this.element.classList.add('e-menu-parent');

            if (this.isMenu) {
              var wrapper = this.getWrapper();
              this.element.classList.contains('e-vertical') ? this.addScrolling(wrapper, this.element, 'vscroll', wrapper.offsetHeight, this.element.offsetHeight) : this.addScrolling(wrapper, this.element, 'hscroll', wrapper.offsetWidth, this.element.offsetWidth);
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            var wrapper = this.getWrapper();

            if (this.target) {
              var target;
              var targetElems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(this.target);

              for (var i = 0, len = targetElems.length; i < len; i++) {
                target = targetElems[i];

                if (this.isMenu) {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'click', this.menuHeaderClickHandler, this);
                } else {
                  if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIos) {
                    new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](target, {
                      tapHold: this.touchHandler.bind(this)
                    });
                  } else {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'contextmenu', this.cmenuHandler, this);
                  }
                }
              }

              this.targetElement = target;

              if (!this.isMenu) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.targetElement, 'scroll', this.scrollHandler, this);

                var _iterator38 = _createForOfIteratorHelper(Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["getScrollableParent"])(this.targetElement)),
                    _step38;

                try {
                  for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
                    var parent = _step38.value;

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(parent, 'scroll', this.scrollHandler, this);
                  }
                } catch (err) {
                  _iterator38.e(err);
                } finally {
                  _iterator38.f();
                }
              }
            }

            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              this.delegateMoverHandler = this.moverHandler.bind(this);
              this.delegateMouseDownHandler = this.mouseDownHandler.bind(this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousedown', this.delegateMouseDownHandler, this);
            }

            this.delegateClickHandler = this.clickHandler.bind(this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'click', this.delegateClickHandler, this);

            this.wireKeyboardEvent(wrapper);
            this.rippleFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(wrapper, {
              selector: '.' + ITEM
            });
          }
        }, {
          key: "wireKeyboardEvent",
          value: function wireKeyboardEvent(element) {
            var keyConfigs = {
              downarrow: DOWNARROW,
              uparrow: UPARROW,
              enter: ENTER,
              leftarrow: LEFTARROW,
              rightarrow: RIGHTARROW,
              escape: ESCAPE
            };

            if (this.isMenu) {
              keyConfigs.home = HOME;
              keyConfigs.end = END;
            }

            new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](element, {
              keyAction: this.keyBoardHandler.bind(this),
              keyConfigs: keyConfigs
            });
          }
        }, {
          key: "mouseDownHandler",
          value: function mouseDownHandler(e) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-' + this.getModuleName() + '-wrapper') !== this.getWrapper() && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-' + this.getModuleName() + '-popup')) {
              this.closeMenu(this.isMenu ? null : this.navIdx.length, e);
            }
          }
        }, {
          key: "keyBoardHandler",
          value: function keyBoardHandler(e) {
            var actionName = '';
            var trgt = e.target;
            var actionNeeded = this.isMenu && !this.hamburgerMode && !this.element.classList.contains('e-vertical') && this.navIdx.length < 1;
            e.preventDefault();

            if (this.enableScrolling && e.keyCode === 13 && trgt.classList.contains('e-scroll-nav')) {
              this.removeLIStateByClass([FOCUSED, SELECTED], [Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.e-' + this.getModuleName() + '-wrapper')]);
            }

            if (actionNeeded) {
              switch (e.action) {
                case RIGHTARROW:
                  actionName = RIGHTARROW;
                  e.action = DOWNARROW;
                  break;

                case LEFTARROW:
                  actionName = LEFTARROW;
                  e.action = UPARROW;
                  break;

                case DOWNARROW:
                  actionName = DOWNARROW;
                  e.action = RIGHTARROW;
                  break;

                case UPARROW:
                  actionName = UPARROW;
                  e.action = '';
                  break;
              }
            } else if (this.enableRtl) {
              switch (e.action) {
                case LEFTARROW:
                  actionNeeded = true;
                  actionName = LEFTARROW;
                  e.action = RIGHTARROW;
                  break;

                case RIGHTARROW:
                  actionNeeded = true;
                  actionName = RIGHTARROW;
                  e.action = LEFTARROW;
                  break;
              }
            }

            switch (e.action) {
              case DOWNARROW:
              case UPARROW:
              case END:
              case HOME:
                this.upDownKeyHandler(e);
                break;

              case RIGHTARROW:
                this.rightEnterKeyHandler(e);
                break;

              case LEFTARROW:
                this.leftEscKeyHandler(e);
                break;

              case ENTER:
                if (this.hamburgerMode && trgt.tagName === 'SPAN' && trgt.classList.contains('e-menu-icon')) {
                  this.menuHeaderClickHandler(e);
                } else {
                  this.rightEnterKeyHandler(e);
                }

                break;

              case ESCAPE:
                this.leftEscKeyHandler(e);
                break;
            }

            if (actionNeeded) {
              e.action = actionName;
            }
          }
        }, {
          key: "upDownKeyHandler",
          value: function upDownKeyHandler(e) {
            var cul = this.getUlByNavIdx();
            var defaultIdx = e.action === DOWNARROW || e.action === HOME ? 0 : cul.childElementCount - 1;
            var fliIdx = defaultIdx;
            var fli = this.getLIByClass(cul, FOCUSED);

            if (fli) {
              if (e.action !== END && e.action !== HOME) {
                fliIdx = this.getIdx(cul, fli);
              }

              fli.classList.remove(FOCUSED);

              if (e.action !== END && e.action !== HOME) {
                e.action === DOWNARROW ? fliIdx++ : fliIdx--;

                if (fliIdx === (e.action === DOWNARROW ? cul.childElementCount : -1)) {
                  fliIdx = defaultIdx;
                }
              }
            }

            var cli = cul.children[fliIdx];
            fliIdx = this.isValidLI(cli, fliIdx, e.action);
            cul.children[fliIdx].classList.add(FOCUSED);
            cul.children[fliIdx].focus();
          }
        }, {
          key: "isValidLI",
          value: function isValidLI(cli, index, action) {
            var wrapper = this.getWrapper();
            var cul = this.getUlByNavIdx();

            if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {
              action === DOWNARROW || action === RIGHTARROW ? index++ : index--;
            }

            cli = cul.children[index];

            if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {
              index = this.isValidLI(cli, index, action);
            }

            return index;
          }
        }, {
          key: "getUlByNavIdx",
          value: function getUlByNavIdx() {
            var navIdxLen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.navIdx.length;

            if (this.isMenu) {
              var popup = [this.getWrapper()].concat([].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + POPUP)))[navIdxLen];
              return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(popup) ? null : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-menu-parent', popup);
            } else {
              return this.getWrapper().children[navIdxLen];
            }
          }
        }, {
          key: "rightEnterKeyHandler",
          value: function rightEnterKeyHandler(e) {
            var eventArgs;
            var cul = this.getUlByNavIdx();
            var fli = this.getLIByClass(cul, FOCUSED);

            if (fli) {
              var fliIdx = this.getIdx(cul, fli);
              var navIdx = this.navIdx.concat(fliIdx);
              var item = this.getItem(navIdx);

              if (item.items.length) {
                this.navIdx.push(fliIdx);
                this.keyType = 'right';
                this.action = e.action;
                this.openMenu(fli, item, -1, -1, e);
              } else {
                if (e.action === ENTER) {
                  if (this.isMenu && this.navIdx.length === 0) {
                    this.removeLIStateByClass([SELECTED], [this.getWrapper()]);
                  } else {
                    fli.classList.remove(FOCUSED);
                  }

                  fli.classList.add(SELECTED);
                  eventArgs = {
                    element: fli,
                    item: item,
                    event: e
                  };
                  this.trigger('select', eventArgs);
                  this.closeMenu(null, e);
                }
              }
            }
          }
        }, {
          key: "leftEscKeyHandler",
          value: function leftEscKeyHandler(e) {
            if (this.navIdx.length) {
              this.keyType = 'left';
              this.closeMenu(this.navIdx.length, e);
            } else {
              if (e.action === ESCAPE) {
                this.closeMenu(null, e);
              }
            }
          }
        }, {
          key: "scrollHandler",
          value: function scrollHandler(e) {
            this.closeMenu(null, e);
          }
        }, {
          key: "touchHandler",
          value: function touchHandler(e) {
            this.isTapHold = true;
            this.cmenuHandler(e.originalEvent);
          }
        }, {
          key: "cmenuHandler",
          value: function cmenuHandler(e) {
            e.preventDefault();
            this.isCMenu = true;
            this.pageX = e.changedTouches ? e.changedTouches[0].pageX + 1 : e.pageX + 1;
            this.pageY = e.changedTouches ? e.changedTouches[0].pageY + 1 : e.pageY + 1;
            this.closeMenu(null, e);

            if (this.isCMenu) {
              if (this.canOpen(e.target)) {
                this.openMenu(null, null, this.pageY, this.pageX, e);
              }

              this.isCMenu = false;
            }
          }
        }, {
          key: "closeMenu",
          value: function closeMenu() {
            var _this34 = this;

            var ulIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (this.isMenuVisible()) {
              var sli;
              var ul;
              var item;
              var items;
              var beforeCloseArgs;
              var wrapper = this.getWrapper();
              var popups = this.getPopups();
              var isClose = false;
              var cnt = this.isMenu ? popups.length + 1 : wrapper.childElementCount;
              ul = this.isMenu && cnt !== 1 ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-ul', popups[cnt - 2]) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-menu-parent', wrapper)[cnt - 1];

              if (this.isMenu && ul.classList.contains('e-menu')) {
                sli = this.getLIByClass(ul, SELECTED);

                if (sli) {
                  sli.classList.remove(SELECTED);
                }

                isClose = true;
              }

              if (!isClose) {
                var liElem = e && e.target && this.getLI(e.target);
                item = this.navIdx.length ? this.getItem(this.navIdx) : null;
                items = item ? item.items : this.items;
                beforeCloseArgs = {
                  element: ul,
                  parentItem: this.isMenu && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() ? this.getMenuItemModel(item, ulIndex) : item,
                  items: items,
                  event: e,
                  cancel: false
                };
                this.trigger('beforeClose', beforeCloseArgs, function (observedCloseArgs) {
                  var popupEle;
                  var closeArgs;
                  var popupId = '';
                  var popupObj;
                  var isOpen = !observedCloseArgs.cancel;

                  if (isOpen || _this34.isCMenu) {
                    if (_this34.isMenu) {
                      popupEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(ul, '.' + POPUP);

                      if (_this34.hamburgerMode) {
                        popupEle.parentElement.style.minHeight = '';
                        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(ul, '.e-menu-item').setAttribute('aria-expanded', 'false');
                      }

                      _this34.unWireKeyboardEvent(popupEle);

                      _this34.destroyScrollObj(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(popupEle.children[0], VScroll), popupEle.children[0]);

                      popupObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(popupEle, _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["Popup"]);
                      popupObj.hide();
                      popupId = popupEle.id;
                      popupObj.destroy();
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(popupEle);
                    } else {
                      _this34.toggleAnimation(ul, false);
                    }

                    closeArgs = {
                      element: ul,
                      parentItem: item,
                      items: items
                    };

                    _this34.trigger('onClose', closeArgs);

                    _this34.navIdx.pop();
                  }

                  var trgtliId;
                  var closedLi;
                  var trgtLi;

                  var trgtpopUp = _this34.getWrapper() && _this34.getUlByNavIdx();

                  if (_this34.isCMenu) {
                    if (_this34.canOpen(e.target)) {
                      _this34.openMenu(null, null, _this34.pageY, _this34.pageX, e);
                    }

                    _this34.isCMenu = false;
                  }

                  if (_this34.isMenu && trgtpopUp && popupId.length) {
                    trgtliId = new RegExp('(.*)-ej2menu-' + _this34.element.id + '-popup').exec(popupId)[1];
                    closedLi = trgtpopUp.querySelector('[id="' + trgtliId + '"]');
                    trgtLi = liElem && trgtpopUp.querySelector('[id="' + liElem.id + '"]');
                  }

                  var submenus = liElem && liElem.querySelectorAll('.e-menu-item');

                  if (isOpen && _this34.hamburgerMode && ulIndex && !submenus.length) {
                    _this34.afterCloseMenu(e);
                  } else if (isOpen && !_this34.hamburgerMode && _this34.navIdx.length && closedLi && !trgtLi) {
                    _this34.closeMenu(_this34.navIdx[_this34.navIdx.length - 1], e);
                  } else if (isOpen && !ulIndex && (_this34.hamburgerMode && _this34.navIdx.length || _this34.navIdx.length === 1)) {
                    _this34.closeMenu(null, e);
                  } else if (isOpen && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ulIndex) && _this34.navIdx.length) {
                    _this34.closeMenu(null, e);
                  } else if (isOpen && !_this34.isMenu && !ulIndex && _this34.navIdx.length === 0 && !_this34.isMenusClosed) {
                    _this34.isMenusClosed = true;

                    _this34.closeMenu(0, e);
                  } else if (isOpen && _this34.isMenu && e && e.target && _this34.navIdx.length !== 0 && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-menu-parent.e-control')) {
                    _this34.closeMenu(0, e);
                  } else {
                    if (isOpen && (_this34.keyType === 'right' || _this34.keyType === 'click')) {
                      _this34.afterCloseMenu(e);
                    } else {
                      var cul = _this34.getUlByNavIdx();

                      var _sli = _this34.getLIByClass(cul, SELECTED);

                      if (_sli) {
                        _sli.setAttribute('aria-expanded', 'false');

                        _sli.classList.remove(SELECTED);

                        if (liElem) {
                          _sli.classList.add(FOCUSED);

                          _sli.focus();
                        }
                      }

                      if (!isOpen && _this34.hamburgerMode && liElem && liElem.getAttribute('aria-expanded') === 'false' && liElem.getAttribute('aria-haspopup') === 'true') {
                        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(liElem, '.e-menu-parent.e-control')) {
                          _this34.navIdx = [];
                        } else {
                          _this34.navIdx.pop();
                        }

                        _this34.navIdx.push(_this34.cliIdx);

                        var _item = _this34.getItem(_this34.navIdx);

                        liElem.setAttribute('aria-expanded', 'true');

                        _this34.openMenu(liElem, _item, -1, -1, e);
                      }
                    }
                  }

                  _this34.removeStateWrapper();
                });
              }
            }
          }
        }, {
          key: "getMenuItemModel",
          value: function getMenuItemModel(item, level) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
              return null;
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(level)) {
              level = 0;
            }

            var fields = this.getFields(level);
            return {
              text: item[fields.text],
              id: item[fields.id],
              items: item[fields.child],
              separator: item[fields.separator],
              iconCss: item[fields.iconCss],
              url: item[fields.url]
            };
          }
        }, {
          key: "destroyScrollObj",
          value: function destroyScrollObj(scrollObj, scrollEle) {
            if (scrollObj) {
              scrollObj.destroy();
              scrollEle.parentElement.appendChild(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-menu-parent', scrollEle));
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(scrollEle);
            }
          }
        }, {
          key: "getPopups",
          value: function getPopups() {
            var _this35 = this;

            var popups = [];
            [].slice.call(document.querySelectorAll('.' + POPUP)).forEach(function (elem) {
              if (_this35.getIndex(elem.querySelector('.' + ITEM).id, true).length) {
                popups.push(elem);
              }
            });
            return popups;
          }
        }, {
          key: "isMenuVisible",
          value: function isMenuVisible() {
            return this.navIdx.length > 0 || this.element.classList.contains('e-contextmenu') && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.element).valueOf();
          }
        }, {
          key: "canOpen",
          value: function canOpen(target) {
            var canOpen = true;

            if (this.filter) {
              canOpen = false;
              var filter = this.filter.split(' ');

              for (var i = 0, len = filter.length; i < len; i++) {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + filter[i])) {
                  canOpen = true;
                  break;
                }
              }
            }

            return canOpen;
          }
        }, {
          key: "openMenu",
          value: function openMenu(li, item) {
            var top = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var left = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var e = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
            var target = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.targetElement;
            var wrapper = this.getWrapper();
            this.lItem = li;
            var elemId = this.element.id !== '' ? this.element.id : 'menu';
            this.isMenusClosed = false;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(top)) {
              top = -1;
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(left)) {
              left = -1;
            }

            if (li) {
              this.uList = this.createItems(item[this.getField('children', this.navIdx.length - 1)]);

              if (!this.isMenu && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                wrapper.lastChild.style.display = 'none';
                var data = {
                  text: item[this.getField('text')].toString(),
                  iconCss: ICONS + ' e-previous'
                };
                var hdata = new MenuItem(this.items[0], 'items', data, true);
                var hli = this.createItems([hdata]).children[0];
                hli.classList.add(HEADER);
                this.uList.insertBefore(hli, this.uList.children[0]);
              }

              if (this.isMenu) {
                this.popupWrapper = this.createElement('div', {
                  className: 'e-' + this.getModuleName() + '-wrapper ' + POPUP,
                  id: li.id + '-ej2menu-' + elemId + '-popup'
                });

                if (this.hamburgerMode) {
                  top = li.offsetHeight;
                  li.appendChild(this.popupWrapper);
                } else {
                  document.body.appendChild(this.popupWrapper);
                }

                this.isNestedOrVertical = this.element.classList.contains('e-vertical') || this.navIdx.length !== 1;
                this.popupObj = this.generatePopup(this.popupWrapper, this.uList, li, this.isNestedOrVertical);

                if (this.hamburgerMode) {
                  this.calculateIndentSize(this.uList, li);
                } else {
                  if (this.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.popupWrapper], this.cssClass.split(' '));
                  }

                  this.popupObj.hide();
                }

                this.triggerBeforeOpen(li, this.uList, item, e, 0, 0, 'menu');
              } else {
                this.uList.style.zIndex = this.element.style.zIndex;
                wrapper.appendChild(this.uList);
                this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');
              }
            } else {
              this.uList = this.element;
              this.uList.style.zIndex = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["getZindexPartial"])(target ? target : this.element).toString();
              this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');
            }

            if (this.isMenu && this.template && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              var menuTemplateId = this.element.id + TEMPLATE_PROPERTY;

              if (Object.keys(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["blazorTemplates"]).length) {
                var itemFromBlazorTemplate = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["blazorTemplates"][menuTemplateId];
                this.tempItem = this.tempItem.concat(itemFromBlazorTemplate);
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["blazorTemplates"][menuTemplateId] = this.tempItem;
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(menuTemplateId, TEMPLATE_PROPERTY, this);
            }
          }
        }, {
          key: "calculateIndentSize",
          value: function calculateIndentSize(ul, li) {
            var liStyle = getComputedStyle(li);
            var liIndent = parseInt(liStyle.textIndent, 10);

            if (this.navIdx.length < 2 && !li.classList.contains('e-blankicon')) {
              liIndent *= 2;
            } else {
              liIndent += liIndent / 4;
            }

            ul.style.textIndent = liIndent + 'px';
            var blankIconElem = ul.querySelectorAll('.e-blankicon');

            if (blankIconElem && blankIconElem.length) {
              var menuIconElem = ul.querySelector('.e-menu-icon');
              var menuIconElemStyle = getComputedStyle(menuIconElem);
              var blankIconIndent = parseInt(menuIconElemStyle.marginRight, 10) + menuIconElem.offsetWidth + liIndent;

              for (var i = 0; i < blankIconElem.length; i++) {
                blankIconElem[i].style.textIndent = blankIconIndent + 'px';
              }
            }
          }
        }, {
          key: "generatePopup",
          value: function generatePopup(popupWrapper, ul, li, isNestedOrVertical) {
            var _this36 = this;

            var popupObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["Popup"](popupWrapper, {
              actionOnScroll: this.hamburgerMode ? 'none' : 'reposition',
              relateTo: li,
              collision: this.hamburgerMode ? {
                X: 'none',
                Y: 'none'
              } : {
                X: isNestedOrVertical || this.enableRtl ? 'none' : 'flip',
                Y: 'fit'
              },
              position: isNestedOrVertical && !this.hamburgerMode ? {
                X: 'right',
                Y: 'top'
              } : {
                X: 'left',
                Y: 'bottom'
              },
              targetType: 'relative',
              enableRtl: this.enableRtl,
              content: ul,
              open: function open() {
                var scrollEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-menu-vscroll', popupObj.element);

                if (scrollEle) {
                  scrollEle.style.height = 'inherit';
                  scrollEle.style.maxHeight = '';
                }

                var ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-ul', popupObj.element);
                popupObj.element.style.maxHeight = '';
                ul.focus();

                _this36.triggerOpen(ul);
              }
            });
            return popupObj;
          }
        }, {
          key: "createHeaderContainer",
          value: function createHeaderContainer(wrapper) {
            wrapper = wrapper || this.getWrapper();
            var spanElem = this.createElement('span', {
              className: 'e-' + this.getModuleName() + '-header'
            });
            var tempTitle = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(this.title) : this.title;
            var spanTitle = this.createElement('span', {
              className: 'e-' + this.getModuleName() + '-title',
              innerHTML: tempTitle
            });
            var spanIcon = this.createElement('span', {
              className: 'e-icons e-' + this.getModuleName() + '-icon',
              attrs: {
                'tabindex': '0'
              }
            });
            spanElem.appendChild(spanTitle);
            spanElem.appendChild(spanIcon);
            wrapper.insertBefore(spanElem, this.element);
          }
        }, {
          key: "openHamburgerMenu",
          value: function openHamburgerMenu(e) {
            if (this.hamburgerMode) {
              this.triggerBeforeOpen(null, this.element, null, e, 0, 0, 'hamburger');
            }
          }
        }, {
          key: "closeHamburgerMenu",
          value: function closeHamburgerMenu(e) {
            var _this37 = this;

            if (this.hamburgerMode) {
              var beforeCloseArgs;
              beforeCloseArgs = {
                element: this.element,
                parentItem: null,
                event: e,
                items: this.items,
                cancel: false
              };
              this.trigger('beforeClose', beforeCloseArgs, function (observedHamburgerCloseArgs) {
                if (!observedHamburgerCloseArgs.cancel) {
                  _this37.closeMenu(null, e);

                  _this37.element.classList.add('e-hide-menu');

                  _this37.trigger('onClose', {
                    element: _this37.element,
                    parentItem: null,
                    items: _this37.items
                  });
                }
              });
            }
          }
        }, {
          key: "callFit",
          value: function callFit(element, x, y, top, left) {
            return Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["fit"])(element, null, {
              X: x,
              Y: y
            }, {
              top: top,
              left: left
            });
          }
        }, {
          key: "triggerBeforeOpen",
          value: function triggerBeforeOpen(li, ul, item, e, top, left, type) {
            var _this38 = this;

            var navIdx = this.getIndex(li ? li.id : null, true);
            var items = li ? item[this.getField('children', this.navIdx.length - 1)] : this.items;
            var eventArgs = {
              element: ul,
              items: items,
              parentItem: this.isMenu && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() ? this.getMenuItemModel(item, this.navIdx.length - 1) : item,
              event: e,
              cancel: false,
              top: top,
              left: left
            };
            var menuType = type;
            var collide;
            this.trigger('beforeOpen', eventArgs, function (observedOpenArgs) {
              switch (menuType) {
                case 'menu':
                  if (!_this38.hamburgerMode) {
                    _this38.top = observedOpenArgs.top;
                    _this38.left = observedOpenArgs.left;
                  }

                  _this38.popupWrapper.style.display = 'block';

                  if (!_this38.hamburgerMode) {
                    _this38.popupWrapper.style.maxHeight = _this38.popupWrapper.getBoundingClientRect().height + 'px';

                    _this38.addScrolling(_this38.popupWrapper, _this38.uList, 'vscroll', _this38.popupWrapper.offsetHeight, _this38.uList.offsetHeight);

                    _this38.checkScrollOffset(e);
                  }

                  if (!_this38.hamburgerMode && !_this38.left && !_this38.top) {
                    _this38.popupObj.refreshPosition(_this38.lItem, true);

                    _this38.left = parseInt(_this38.popupWrapper.style.left, 10);
                    _this38.top = parseInt(_this38.popupWrapper.style.top, 10);

                    if (_this38.enableRtl) {
                      _this38.left = _this38.isNestedOrVertical ? _this38.left - _this38.popupWrapper.offsetWidth - _this38.lItem.parentElement.offsetWidth + 2 : _this38.left - _this38.popupWrapper.offsetWidth + _this38.lItem.offsetWidth;
                    }

                    collide = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["isCollide"])(_this38.popupWrapper, null, _this38.left, _this38.top);

                    if ((_this38.isNestedOrVertical || _this38.enableRtl) && (collide.indexOf('right') > -1 || collide.indexOf('left') > -1)) {
                      _this38.popupObj.collision.X = 'none';
                      var offWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(_this38.lItem, '.e-' + _this38.getModuleName() + '-wrapper').offsetWidth;
                      _this38.left = _this38.enableRtl ? Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["calculatePosition"])(_this38.lItem, _this38.isNestedOrVertical ? 'right' : 'left', 'top').left : _this38.left - _this38.popupWrapper.offsetWidth - offWidth + 2;
                    }

                    collide = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["isCollide"])(_this38.popupWrapper, null, _this38.left, _this38.top);

                    if (collide.indexOf('left') > -1 || collide.indexOf('right') > -1) {
                      _this38.left = _this38.callFit(_this38.popupWrapper, true, false, _this38.top, _this38.left).left;
                    }

                    _this38.popupWrapper.style.left = _this38.left + 'px';
                  } else {
                    _this38.popupObj.collision = {
                      X: 'none',
                      Y: 'none'
                    };
                  }

                  _this38.popupWrapper.style.display = '';
                  break;

                case 'none':
                  _this38.top = observedOpenArgs.top;
                  _this38.left = observedOpenArgs.left;
                  break;

                case 'hamburger':
                  if (!observedOpenArgs.cancel) {
                    _this38.element.classList.remove('e-hide-menu');

                    _this38.triggerOpen(_this38.element);
                  }

                  break;
              }

              if (menuType !== 'hamburger') {
                if (observedOpenArgs.cancel) {
                  if (_this38.isMenu) {
                    _this38.popupObj.destroy();

                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(_this38.popupWrapper);
                  } else if (ul.className.indexOf('e-ul') > -1) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ul);
                  }

                  _this38.navIdx.pop();
                } else {
                  if (_this38.isMenu) {
                    if (_this38.hamburgerMode) {
                      _this38.popupWrapper.style.top = _this38.top + 'px';
                      _this38.popupWrapper.style.left = 0 + 'px';

                      _this38.toggleAnimation(_this38.popupWrapper);
                    } else {
                      _this38.wireKeyboardEvent(_this38.popupWrapper);

                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(_this38.popupWrapper, {
                        selector: '.' + ITEM
                      });
                      _this38.popupWrapper.style.left = _this38.left + 'px';
                      _this38.popupWrapper.style.top = _this38.top + 'px';
                      var animationOptions = _this38.animationSettings.effect !== 'None' ? {
                        name: _this38.animationSettings.effect,
                        duration: _this38.animationSettings.duration,
                        timingFunction: _this38.animationSettings.easing
                      } : null;

                      _this38.popupObj.show(animationOptions, _this38.lItem);
                    }
                  } else {
                    _this38.setPosition(_this38.lItem, _this38.uList, _this38.top, _this38.left);

                    _this38.toggleAnimation(_this38.uList);
                  }
                }
              }

              if (_this38.keyType === 'right') {
                var cul = _this38.getUlByNavIdx();

                li.classList.remove(FOCUSED);
                var index;

                if (_this38.isMenu && _this38.navIdx.length === 1) {
                  _this38.removeLIStateByClass([SELECTED], [_this38.getWrapper()]);
                }

                li.classList.add(SELECTED);

                if (_this38.action === ENTER) {
                  var _eventArgs = {
                    element: li,
                    item: item,
                    event: e
                  };

                  _this38.trigger('select', _eventArgs);
                }

                li.focus();
                cul = _this38.getUlByNavIdx();
                index = _this38.isValidLI(cul.children[0], 0, _this38.action);
                cul.children[index].classList.add(FOCUSED);
                cul.children[index].focus();
              }
            });
          }
        }, {
          key: "checkScrollOffset",
          value: function checkScrollOffset(e) {
            var wrapper = this.getWrapper();

            if (wrapper.children[0].classList.contains('e-menu-hscroll') && this.navIdx.length === 1) {
              var trgt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) ? this.element : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + ITEM);
              var offsetEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-hscroll-bar', wrapper);
              var offsetLeft;
              var offsetRight;

              if (offsetEle.scrollLeft > trgt.offsetLeft) {
                offsetEle.scrollLeft -= offsetEle.scrollLeft - trgt.offsetLeft;
              }

              offsetLeft = offsetEle.scrollLeft + offsetEle.offsetWidth;
              offsetRight = trgt.offsetLeft + trgt.offsetWidth;

              if (offsetLeft < offsetRight) {
                offsetEle.scrollLeft += offsetRight - offsetLeft;
              }
            }
          }
        }, {
          key: "addScrolling",
          value: function addScrolling(wrapper, ul, scrollType, wrapperOffset, contentOffset) {
            if (this.enableScrolling && wrapperOffset < contentOffset) {
              var scrollEle = this.createElement('div', {
                className: 'e-menu-' + scrollType
              });
              wrapper.appendChild(scrollEle);
              scrollEle.appendChild(ul);
              scrollEle.style.maxHeight = wrapper.style.maxHeight;
              var scrollObj;
              wrapper.style.overflow = 'hidden';

              if (scrollType === 'vscroll') {
                scrollObj = new VScroll({
                  enableRtl: this.enableRtl
                }, scrollEle);
                scrollObj.scrollStep = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-' + scrollType + '-bar', wrapper).offsetHeight / 2;
              } else {
                scrollObj = new HScroll({
                  enableRtl: this.enableRtl
                }, scrollEle);
                scrollObj.scrollStep = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-' + scrollType + '-bar', wrapper).offsetWidth;
              }
            }
          }
        }, {
          key: "setPosition",
          value: function setPosition(li, ul, top, left) {
            var px = 'px';
            this.toggleVisiblity(ul);

            if (ul === this.element || left > -1 && top > -1) {
              var collide = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["isCollide"])(ul, null, left, top);

              if (collide.indexOf('right') > -1) {
                left = left - ul.offsetWidth;
              }

              if (collide.indexOf('bottom') > -1) {
                var offset = this.callFit(ul, false, true, top, left);
                top = offset.top - 20;
              }

              collide = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["isCollide"])(ul, null, left, top);

              if (collide.indexOf('left') > -1) {
                var _offset = this.callFit(ul, true, false, top, left);

                left = _offset.left;
              }
            } else {
              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                top = Number(this.element.style.top.replace(px, ''));
                left = Number(this.element.style.left.replace(px, ''));
              } else {
                var x = this.enableRtl ? 'left' : 'right';

                var _offset2 = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["calculatePosition"])(li, x, 'top');

                top = _offset2.top;
                left = _offset2.left;

                var _collide = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["isCollide"])(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top);

                var xCollision = _collide.indexOf('left') > -1 || _collide.indexOf('right') > -1;

                if (xCollision) {
                  _offset2 = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["calculatePosition"])(li, this.enableRtl ? 'right' : 'left', 'top');
                  left = _offset2.left;
                }

                if (this.enableRtl || xCollision) {
                  left = this.enableRtl && xCollision ? left : left - ul.offsetWidth;
                }

                if (_collide.indexOf('bottom') > -1) {
                  _offset2 = this.callFit(ul, false, true, top, left);
                  top = _offset2.top;
                }
              }
            }

            this.toggleVisiblity(ul, false);
            ul.style.top = top + px;
            ul.style.left = left + px;
          }
        }, {
          key: "toggleVisiblity",
          value: function toggleVisiblity(ul) {
            var isVisible$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            ul.style.visibility = isVisible$$1 ? 'hidden' : '';
            ul.style.display = isVisible$$1 ? 'block' : 'none';
          }
        }, {
          key: "createItems",
          value: function createItems(items) {
            var _this39 = this;

            var level = this.navIdx ? this.navIdx.length : 0;
            var fields = this.getFields(level); // tslint:disable-next-line:no-any

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.template && items.length && items[0].properties) {
              var itemsObj = [];
              items.forEach(function (item, index) {
                itemsObj.push({});
                itemsObj[index][fields.text] = item[fields.text];

                if (!item[fields.id]) {
                  item[fields.id] = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('menuitem');
                }

                itemsObj[index][fields.id] = item[fields.id];
                itemsObj[index][fields.iconCss] = item[fields.iconCss];
                itemsObj[index][fields.url] = item[fields.url];
                itemsObj[index][fields.child] = item[fields.child];
                itemsObj[index][fields.separator] = item[fields.separator];
              });
              items = itemsObj;
            }

            var showIcon = this.hasField(items, this.getField('iconCss', level));
            var listBaseOptions = {
              showIcon: showIcon,
              moduleName: 'menu',
              fields: fields,
              template: this.template,
              itemNavigable: true,
              itemCreating: function itemCreating(args) {
                if (!args.curData[args.fields[fields.id]]) {
                  args.curData[args.fields[fields.id]] = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('menuitem');
                }

                args.curData.htmlAttributes = {
                  role: 'menuitem',
                  tabindex: '-1'
                };

                if (_this39.isMenu && !args.curData[_this39.getField('separator', level)]) {
                  args.curData.htmlAttributes['aria-label'] = args.curData[args.fields.text];
                }

                if (args.curData[args.fields[fields.iconCss]] === '') {
                  args.curData[args.fields[fields.iconCss]] = null;
                }
              },
              itemCreated: function itemCreated(args) {
                if (args.curData[_this39.getField('separator', level)]) {
                  args.item.classList.add(SEPARATOR);
                  args.item.removeAttribute('role');
                }

                if (showIcon && !args.curData[args.fields.iconCss] && !args.curData[_this39.getField('separator', level)]) {
                  args.item.classList.add('e-blankicon');
                }

                if (args.curData[args.fields.child] && args.curData[args.fields.child].length) {
                  var span = _this39.createElement('span', {
                    className: ICONS + ' ' + CARET
                  });

                  args.item.appendChild(span);
                  args.item.setAttribute('aria-haspopup', 'true');
                  args.item.setAttribute('aria-expanded', 'false');

                  if (!_this39.isMenu) {
                    args.item.removeAttribute('role');
                  }

                  args.item.classList.add('e-menu-caret-icon');
                }

                if (_this39.isMenu && _this39.template) {
                  args.item.setAttribute('id', args.curData[args.fields.id].toString());
                  args.item.removeAttribute('data-uid');

                  if (args.item.classList.contains('e-level-1')) {
                    args.item.classList.remove('e-level-1');
                  }

                  if (args.item.classList.contains('e-has-child')) {
                    args.item.classList.remove('e-has-child');
                  }
                }

                var eventArgs = {
                  item: args.curData,
                  element: args.item
                };

                _this39.trigger('beforeItemRender', eventArgs);
              }
            };
            this.setProperties({
              'items': this.items
            }, true);

            if (this.isMenu) {
              listBaseOptions.templateID = this.element.id + TEMPLATE_PROPERTY;
            }

            var ul = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].createList(this.createElement, items, listBaseOptions, !this.template);

            ul.setAttribute('tabindex', '0');

            if (this.isMenu) {
              ul.setAttribute('role', 'menu');
            }

            return ul;
          }
        }, {
          key: "moverHandler",
          value: function moverHandler(e) {
            var trgt = e.target;
            this.liTrgt = trgt;
            var cli = this.getLI(trgt);
            var wrapper = cli ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(cli, '.e-' + this.getModuleName() + '-wrapper') : this.getWrapper();
            var hdrWrapper = this.getWrapper();
            var regex = new RegExp('-ej2menu-(.*)-popup');
            var ulId;
            var isDifferentElem = false;

            if (!wrapper) {
              return;
            }

            if (wrapper.id !== '') {
              ulId = regex.exec(wrapper.id)[1];
            } else {
              ulId = wrapper.querySelector('ul').id;
            }

            if (ulId !== this.element.id) {
              this.removeLIStateByClass([FOCUSED, SELECTED], [this.getWrapper()]);

              if (this.navIdx.length) {
                isDifferentElem = true;
              } else {
                return;
              }
            }

            if (cli && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(cli, '.e-' + this.getModuleName() + '-wrapper') && !isDifferentElem) {
              this.removeLIStateByClass([FOCUSED], this.isMenu ? [wrapper].concat(this.getPopups()) : [wrapper]);
              this.removeLIStateByClass([FOCUSED], this.isMenu ? [hdrWrapper].concat(this.getPopups()) : [hdrWrapper]);
              cli.classList.add(FOCUSED);

              if (!this.showItemOnClick) {
                this.clickHandler(e);
              }
            } else if (this.isMenu && this.showItemOnClick && !isDifferentElem) {
              this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
            }

            if (this.isMenu) {
              if (!this.showItemOnClick && trgt.parentElement !== wrapper && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.e-' + this.getModuleName() + '-popup') && (!cli || cli && !this.getIndex(cli.id, true).length)) {
                this.removeLIStateByClass([FOCUSED], [wrapper]);

                if (this.navIdx.length) {
                  this.isClosed = true;
                  this.closeMenu(null, e);
                }
              } else if (isDifferentElem && !this.showItemOnClick) {
                if (this.navIdx.length) {
                  this.isClosed = true;
                  this.closeMenu(null, e);
                }
              }

              if (!this.isClosed) {
                this.removeStateWrapper();
              }

              this.isClosed = false;
            }
          }
        }, {
          key: "removeStateWrapper",
          value: function removeStateWrapper() {
            if (this.liTrgt) {
              var wrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.liTrgt, '.e-menu-vscroll');

              if (this.liTrgt.tagName === 'DIV' && wrapper) {
                this.removeLIStateByClass([FOCUSED, SELECTED], [wrapper]);
              }
            }
          }
        }, {
          key: "removeLIStateByClass",
          value: function removeLIStateByClass(classList$$1, element) {
            var li;

            var _loop5 = function _loop5(i) {
              classList$$1.forEach(function (className) {
                li = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + className, element[i]);

                if (li) {
                  li.classList.remove(className);
                }
              });
            };

            for (var i = 0; i < element.length; i++) {
              _loop5(i);
            }
          }
        }, {
          key: "getField",
          value: function getField(propName) {
            var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var fieldName = this.fields[propName];
            return typeof fieldName === 'string' ? fieldName : !fieldName[level] ? fieldName[fieldName.length - 1].toString() : fieldName[level].toString();
          }
        }, {
          key: "getFields",
          value: function getFields() {
            var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            return {
              id: this.getField('itemId', level),
              iconCss: this.getField('iconCss', level),
              text: this.getField('text', level),
              url: this.getField('url', level),
              child: this.getField('children', level),
              separator: this.getField('separator', level)
            };
          }
        }, {
          key: "hasField",
          value: function hasField(items, field) {
            for (var i = 0, len = items.length; i < len; i++) {
              if (items[i][field]) {
                return true;
              }
            }

            return false;
          }
        }, {
          key: "menuHeaderClickHandler",
          value: function menuHeaderClickHandler(e) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-menu-wrapper').querySelector('ul.e-menu-parent').id !== this.element.id) {
              return;
            }

            this.element.classList.contains('e-hide-menu') ? this.openHamburgerMenu(e) : this.closeHamburgerMenu(e);
          }
        }, {
          key: "clickHandler",
          value: function clickHandler(e) {
            if (this.isTapHold) {
              this.isTapHold = false;
            } else {
              var wrapper = this.getWrapper();
              var trgt = e.target;
              var cli = this.cli = this.getLI(trgt);
              var regex = new RegExp('-ej2menu-(.*)-popup');
              var cliWrapper = cli ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(cli, '.e-' + this.getModuleName() + '-wrapper') : null;
              var isInstLI = cli && cliWrapper && (this.isMenu ? this.getIndex(cli.id, true).length > 0 : wrapper.firstElementChild.id === cliWrapper.firstElementChild.id);

              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.isMenu) {
                this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
                this.mouseDownHandler(e);
              }

              if (cli && cliWrapper && this.isMenu) {
                var cliWrapperId = cliWrapper.id ? regex.exec(cliWrapper.id)[1] : cliWrapper.querySelector('.e-menu-parent').id;

                if (this.element.id !== cliWrapperId) {
                  return;
                }
              }

              if (isInstLI && e.type === 'click' && !cli.classList.contains(HEADER)) {
                this.setLISelected(cli);
                var navIdx = this.getIndex(cli.id, true);
                var item = this.getItem(navIdx);
                var eventArgs = {
                  element: cli,
                  item: item,
                  event: e
                };
                this.trigger('select', eventArgs);
              }

              if (isInstLI && (e.type === 'mouseover' || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice || this.showItemOnClick)) {
                var ul;

                if (cli.classList.contains(HEADER)) {
                  ul = wrapper.children[this.navIdx.length - 1];
                  this.toggleAnimation(ul);
                  var sli = this.getLIByClass(ul, SELECTED);

                  if (sli) {
                    sli.classList.remove(SELECTED);
                  }

                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(cli.parentNode);
                  this.navIdx.pop();
                } else {
                  if (!cli.classList.contains(SEPARATOR)) {
                    this.showSubMenu = true;
                    var cul = cli.parentNode;
                    this.cliIdx = this.getIdx(cul, cli);

                    if (this.isMenu || !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                      var culIdx = this.isMenu ? Array.prototype.indexOf.call([wrapper].concat(this.getPopups()), Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(cul, '.' + 'e-' + this.getModuleName() + '-wrapper')) : this.getIdx(wrapper, cul);

                      if (this.navIdx[culIdx] === this.cliIdx) {
                        this.showSubMenu = false;
                      }

                      if (culIdx !== this.navIdx.length && (e.type !== 'mouseover' || this.showSubMenu)) {
                        var _sli2 = this.getLIByClass(cul, SELECTED);

                        if (_sli2) {
                          _sli2.classList.remove(SELECTED);
                        }

                        this.isClosed = true;
                        this.keyType = 'click';

                        if (this.showItemOnClick) {
                          this.setLISelected(cli);
                        }

                        this.closeMenu(culIdx + 1, e);

                        if (this.showItemOnClick) {
                          this.setLISelected(cli);
                        }
                      }
                    }

                    if (!this.isClosed) {
                      this.afterCloseMenu(e);
                    }

                    this.isClosed = false;
                  }
                }
              } else {
                if (this.isMenu && trgt.tagName === 'DIV' && this.navIdx.length && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.e-menu-vscroll')) {
                  var popupEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + POPUP);
                  var cIdx = Array.prototype.indexOf.call(this.getPopups(), popupEle) + 1;

                  if (cIdx < this.navIdx.length) {
                    this.closeMenu(cIdx + 1, e);
                    this.removeLIStateByClass([FOCUSED, SELECTED], [popupEle]);
                  }
                } else if (this.isMenu && this.hamburgerMode && trgt.tagName === 'SPAN' && trgt.classList.contains('e-menu-icon')) {
                  this.menuHeaderClickHandler(e);
                } else {
                  if (trgt.tagName !== 'UL' || (this.isMenu ? trgt.parentElement.classList.contains('e-menu-wrapper') && !this.getIndex(trgt.querySelector('.' + ITEM).id, true).length : trgt.parentElement !== wrapper)) {
                    if (!cli) {
                      this.removeLIStateByClass([SELECTED], [wrapper]);
                    }

                    if (!cli || !cli.querySelector('.' + CARET)) {
                      this.closeMenu(null, e);
                    }
                  }
                }
              }
            }
          }
        }, {
          key: "afterCloseMenu",
          value: function afterCloseMenu(e) {
            var isHeader;

            if (this.showSubMenu) {
              if (this.showItemOnClick && this.navIdx.length === 0) {
                isHeader = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-menu-parent.e-control');
              } else {
                isHeader = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, '.e-menu-parent.e-control');
              }

              var idx = this.navIdx.concat(this.cliIdx);
              var item = this.getItem(idx);

              if (item && item[this.getField('children', idx.length - 1)] && item[this.getField('children', idx.length - 1)].length) {
                if (e.type === 'mouseover' || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.isMenu) {
                  this.setLISelected(this.cli);
                }

                if (!this.hamburgerMode && isHeader || this.hamburgerMode && this.cli.getAttribute('aria-expanded') === 'false') {
                  this.cli.setAttribute('aria-expanded', 'true');
                  this.navIdx.push(this.cliIdx);
                  this.openMenu(this.cli, item, null, null, e);
                }
              } else {
                if (e.type !== 'mouseover') {
                  this.closeMenu(null, e);
                }
              }

              if (!isHeader) {
                var cul = this.getUlByNavIdx();
                var sli = this.getLIByClass(cul, SELECTED);

                if (sli) {
                  sli.setAttribute('aria-expanded', 'false');
                  sli.classList.remove(SELECTED);
                }
              }
            }

            this.keyType = '';
          }
        }, {
          key: "setLISelected",
          value: function setLISelected(li) {
            var sli = this.getLIByClass(li.parentElement, SELECTED);

            if (sli) {
              sli.classList.remove(SELECTED);
            }

            if (!this.isMenu) {
              li.classList.remove(FOCUSED);
            }

            li.classList.add(SELECTED);
          }
        }, {
          key: "getLIByClass",
          value: function getLIByClass(ul, classname) {
            for (var i = 0, len = ul.children.length; i < len; i++) {
              if (ul.children[i].classList.contains(classname)) {
                return ul.children[i];
              }
            }

            return null;
          }
          /**
           * This method is used to get the index of the menu item in the Menu based on the argument.
           * @param item - item be passed to get the index | id to be passed to get the item index.
           * @param isUniqueId - Set `true` if it is a unique id.
           * @returns void
           */

        }, {
          key: "getItemIndex",
          value: function getItemIndex(item, isUniqueId) {
            var idx;

            if (typeof item === 'string') {
              idx = item;
            } else {
              idx = item.id;
            }

            var isText = isUniqueId === false ? false : true;
            var navIdx = this.getIndex(idx, isText);
            return navIdx;
          }
          /**
           * This method is used to set the menu item in the Menu based on the argument.
           * @param item - item need to be updated.
           * @param id - id to be passed to update the item.
           * @param isUniqueId - Set `true` if it is a unique id.
           * @returns void
           */

        }, {
          key: "setItem",
          value: function setItem(item, id, isUniqueId) {
            var idx = id ? id : item.id;
            var isText = isUniqueId === false ? false : true;
            var navIdx = this.getIndex(idx, isText);
            var newItem = this.getItem(navIdx);
            newItem.iconCss = item.iconCss;
            newItem.id = item.id;
            newItem.text = item.text;
            newItem.url = item.url;
            newItem.separator = item.separator;
            newItem.items = item.items;
          }
        }, {
          key: "getItem",
          value: function getItem(navIdx) {
            navIdx = navIdx.slice();
            var idx = navIdx.pop();
            var items = this.getItems(navIdx);
            return items[idx];
          }
        }, {
          key: "getItems",
          value: function getItems(navIdx) {
            var items = this.items;

            for (var i = 0; i < navIdx.length; i++) {
              items = items[navIdx[i]][this.getField('children', i)];
            }

            return items;
          }
        }, {
          key: "setItems",
          value: function setItems(newItems, navIdx) {
            var items = this.getItems(navIdx);
            items.splice(0, items.length);

            for (var i = 0; i < newItems.length; i++) {
              items.splice(i, 0, newItems[i]);
            }
          }
        }, {
          key: "getIdx",
          value: function getIdx(ul, li) {
            var skipHdr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var idx = Array.prototype.indexOf.call(ul.querySelectorAll('li'), li);

            if (this.isMenu && this.template && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              idx = Array.prototype.indexOf.call(ul.querySelectorAll(li.tagName), li);
            } else {
              idx = Array.prototype.indexOf.call(ul.children, li);
            }

            if (skipHdr && ul.children[0].classList.contains(HEADER)) {
              idx--;
            }

            return idx;
          }
        }, {
          key: "getLI",
          value: function getLI(elem) {
            if (elem.tagName === 'LI' && elem.classList.contains('e-menu-item')) {
              return elem;
            }

            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(elem, 'li.e-menu-item');
          }
        }, {
          key: "updateItemsByNavIdx",
          value: function updateItemsByNavIdx() {
            var items = this.items;
            var count = 0;

            for (var index = 0; index < this.navIdx.length; index++) {
              items = items[index].items;

              if (!items) {
                break;
              }

              count++;
              var ul = this.getUlByNavIdx(count);

              if (!ul) {
                break;
              }

              this.updateItem(ul, items);
            }
          }
        }, {
          key: "removeChildElement",
          value: function removeChildElement(elem) {
            while (elem.firstElementChild) {
              elem.removeChild(elem.firstElementChild);
            }

            return elem;
          }
          /**
           * Called internally if any of the property value changed
           * @private
           * @param {MenuBaseModel} newProp
           * @param {MenuBaseModel} oldProp
           * @returns void
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var _this40 = this;

            var wrapper = this.getWrapper();

            for (var _i16 = 0, _Object$keys5 = Object.keys(newProp); _i16 < _Object$keys5.length; _i16++) {
              var prop = _Object$keys5[_i16];

              switch (prop) {
                case 'cssClass':
                  if (oldProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([wrapper], oldProp.cssClass.split(' '));
                  }

                  if (newProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], newProp.cssClass.split(' '));
                  }

                  break;

                case 'enableRtl':
                  wrapper.classList.toggle(RTL);
                  break;

                case 'showItemOnClick':
                  this.unWireEvents();
                  this.showItemOnClick = newProp.showItemOnClick;
                  this.wireEvents();
                  break;

                case 'enableScrolling':
                  if (newProp.enableScrolling) {
                    (function () {
                      var ul = void 0;
                      _this40.element.classList.contains('e-vertical') ? _this40.addScrolling(wrapper, _this40.element, 'vscroll', wrapper.offsetHeight, _this40.element.offsetHeight) : _this40.addScrolling(wrapper, _this40.element, 'hscroll', wrapper.offsetWidth, _this40.element.offsetWidth);

                      _this40.getPopups().forEach(function (wrapper) {
                        ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-ul', wrapper);

                        _this40.addScrolling(wrapper, ul, 'vscroll', wrapper.offsetHeight, ul.offsetHeight);
                      });
                    })();
                  } else {
                    (function () {
                      var ul = wrapper.children[0];
                      _this40.element.classList.contains('e-vertical') ? _this40.destroyScrollObj(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(ul, VScroll), ul) : _this40.destroyScrollObj(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(ul, HScroll), ul);
                      wrapper.style.overflow = '';
                      wrapper.appendChild(_this40.element);

                      _this40.getPopups().forEach(function (wrapper) {
                        ul = wrapper.children[0];

                        _this40.destroyScrollObj(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(ul, VScroll), ul);

                        wrapper.style.overflow = '';
                      });
                    })();
                  }

                  break;

                case 'items':
                  var idx = void 0;
                  var navIdx = void 0;
                  var item = void 0;

                  if (!Object.keys(oldProp.items).length) {
                    this.updateItem(this.element, this.items);

                    for (var i = 1, count = wrapper.childElementCount; i < count; i++) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(wrapper.lastElementChild);
                    }

                    if (this.isMenu && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                      this.updateItemsByNavIdx();
                    } else {
                      this.navIdx = [];
                    }
                  } else {
                    var keys = Object.keys(newProp.items);

                    for (var _i17 = 0; _i17 < keys.length; _i17++) {
                      navIdx = this.getChangedItemIndex(newProp, [], Number(keys[_i17]));

                      if (navIdx.length <= this.getWrapper().children.length) {
                        idx = navIdx.pop();
                        item = this.getItems(navIdx);
                        this.insertAfter([item[idx]], item[idx].text);
                        this.removeItem(item, navIdx, idx);
                        this.setItems(item, navIdx);
                      }

                      navIdx.length = 0;
                    }
                  }

                  break;
              }
            }
          }
        }, {
          key: "updateItem",
          value: function updateItem(ul, items) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              ul = this.removeChildElement(ul);
            } else {
              ul.innerHTML = '';
            }

            var lis = [].slice.call(this.createItems(items).children);
            lis.forEach(function (li) {
              ul.appendChild(li);
            });
          }
        }, {
          key: "getChangedItemIndex",
          value: function getChangedItemIndex(newProp, index, idx) {
            index.push(idx);
            var key = Object.keys(newProp.items[idx]).pop();

            if (key === 'items') {
              var item = newProp.items[idx];
              var popStr = Object.keys(item.items).pop();

              if (popStr) {
                this.getChangedItemIndex(item, index, Number(popStr));
              }
            } else {
              if (key === 'isParentArray' && index.length > 1) {
                index.pop();
              }
            }

            return index;
          }
        }, {
          key: "removeItem",
          value: function removeItem(item, navIdx, idx) {
            item.splice(idx, 1);
            var uls = this.getWrapper().children;

            if (navIdx.length < uls.length) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(uls[navIdx.length].children[idx]);
            }
          }
          /**
           * Used to unwire the bind events.
           * @private
           */

        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            var targetSelctor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.target;
            var wrapper = this.getWrapper();

            if (targetSelctor) {
              var target;
              var touchModule;
              var targetElems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(targetSelctor);

              for (var i = 0, len = targetElems.length; i < len; i++) {
                target = targetElems[i];

                if (this.isMenu) {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'click', this.menuHeaderClickHandler);
                } else {
                  if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIos) {
                    touchModule = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(target, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"]);

                    if (touchModule) {
                      touchModule.destroy();
                    }
                  } else {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'contextmenu', this.cmenuHandler);
                  }
                }
              }

              if (!this.isMenu) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.targetElement, 'scroll', this.scrollHandler);

                var _iterator39 = _createForOfIteratorHelper(Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["getScrollableParent"])(this.targetElement)),
                    _step39;

                try {
                  for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
                    var parent = _step39.value;

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(parent, 'scroll', this.scrollHandler);
                  }
                } catch (err) {
                  _iterator39.e(err);
                } finally {
                  _iterator39.f();
                }
              }
            }

            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousedown', this.delegateMouseDownHandler);
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'click', this.delegateClickHandler);

            this.unWireKeyboardEvent(wrapper);
            this.rippleFn();
          }
        }, {
          key: "unWireKeyboardEvent",
          value: function unWireKeyboardEvent(element) {
            var keyboardModule = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"]);

            if (keyboardModule) {
              keyboardModule.destroy();
            }
          }
        }, {
          key: "toggleAnimation",
          value: function toggleAnimation(ul) {
            var _this41 = this;

            var isMenuOpen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var pUlHeight;
            var pElement;

            if (this.animationSettings.effect === 'None' || !isMenuOpen) {
              this.end(ul, isMenuOpen);
            } else {
              this.animation.animate(ul, {
                name: this.animationSettings.effect,
                duration: this.animationSettings.duration,
                timingFunction: this.animationSettings.easing,
                begin: function begin(options) {
                  if (_this41.hamburgerMode) {
                    pElement = options.element.parentElement;
                    options.element.style.position = 'absolute';
                    pUlHeight = pElement.offsetHeight;
                    options.element.style.maxHeight = options.element.offsetHeight + 'px';
                    pElement.style.maxHeight = '';
                  } else {
                    options.element.style.display = 'block';
                    options.element.style.maxHeight = options.element.getBoundingClientRect().height + 'px';
                  }
                },
                progress: function progress(options) {
                  if (_this41.hamburgerMode) {
                    pElement.style.minHeight = pUlHeight + options.element.offsetHeight + 'px';
                  }
                },
                end: function end(options) {
                  if (_this41.hamburgerMode) {
                    options.element.style.position = '';
                    options.element.style.maxHeight = '';
                    pElement.style.minHeight = '';
                    options.element.style.top = 0 + 'px';
                    options.element.children[0].focus();

                    _this41.triggerOpen(options.element.children[0]);
                  } else {
                    _this41.end(options.element, isMenuOpen);
                  }
                }
              });
            }
          }
        }, {
          key: "triggerOpen",
          value: function triggerOpen(ul) {
            var item = this.navIdx.length ? this.getItem(this.navIdx) : null;
            var eventArgs = {
              element: ul,
              parentItem: item,
              items: item ? item.items : this.items
            };
            this.trigger('onOpen', eventArgs);
          }
        }, {
          key: "end",
          value: function end(ul, isMenuOpen) {
            if (isMenuOpen) {
              ul.style.display = 'block';
              ul.style.maxHeight = '';
              this.triggerOpen(ul);

              if (ul.querySelector('.' + FOCUSED)) {
                ul.querySelector('.' + FOCUSED).focus();
              } else {
                var ele;
                ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1];

                if (ele) {
                  ele.querySelector('.' + SELECTED).focus();
                } else {
                  this.element.focus();
                }
              }
            } else {
              if (ul === this.element) {
                var fli = this.getLIByClass(this.element, FOCUSED);

                if (fli) {
                  fli.classList.remove(FOCUSED);
                }

                var sli = this.getLIByClass(this.element, SELECTED);

                if (sli) {
                  sli.classList.remove(SELECTED);
                }

                ul.style.display = 'none';
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ul);
              }
            }
          }
          /**
           * Get the properties to be maintained in the persisted state.
           * @returns string
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return '';
          }
          /**
           * Get wrapper element.
           * @returns Element
           * @private
           */

        }, {
          key: "getWrapper",
          value: function getWrapper() {
            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, '.e-' + this.getModuleName() + '-wrapper');
          }
        }, {
          key: "getIndex",
          value: function getIndex(data, isUniqueId) {
            var items = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.items;
            var nIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
            var isCallBack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
            var level = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
            var item;
            level = isCallBack ? level + 1 : 0;

            for (var i = 0, len = items.length; i < len; i++) {
              item = items[i];

              if ((isUniqueId ? item[this.getField('itemId', level)] : item[this.getField('text', level)]) === data) {
                nIndex.push(i);
                break;
              } else if (item[this.getField('children', level)] && item[this.getField('children', level)].length) {
                nIndex = this.getIndex(data, isUniqueId, item[this.getField('children', level)], nIndex, true, level);

                if (nIndex[nIndex.length - 1] === -1) {
                  if (i !== len - 1) {
                    nIndex.pop();
                  }
                } else {
                  nIndex.unshift(i);
                  break;
                }
              } else {
                if (i === len - 1) {
                  nIndex.push(-1);
                }
              }
            }

            return !isCallBack && nIndex[0] === -1 ? [] : nIndex;
          }
          /**
           * This method is used to enable or disable the menu items in the Menu based on the items and enable argument.
           * @param items Text items that needs to be enabled/disabled.
           * @param enable Set `true`/`false` to enable/disable the list items.
           * @param isUniqueId - Set `true` if it is a unique id.
           * @returns void
           */

        }, {
          key: "enableItems",
          value: function enableItems(items) {
            var enable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var isUniqueId = arguments.length > 2 ? arguments[2] : undefined;
            var ul;
            var idx;
            var navIdx;
            var disabled = DISABLED;
            var skipItem;

            for (var i = 0; i < items.length; i++) {
              navIdx = this.getIndex(items[i], isUniqueId);

              if (this.navIdx.length) {
                if (navIdx.length !== 1) {
                  skipItem = false;

                  for (var _i18 = 0, len = navIdx.length - 1; _i18 < len; _i18++) {
                    if (navIdx[_i18] !== this.navIdx[_i18]) {
                      skipItem = true;
                      break;
                    }
                  }

                  if (skipItem) {
                    continue;
                  }
                }
              } else {
                if (navIdx.length !== 1) {
                  continue;
                }
              }

              idx = navIdx.pop();
              ul = this.getUlByNavIdx(navIdx.length);

              if (ul) {
                if (enable) {
                  if (this.isMenu) {
                    ul.children[idx].classList.remove(disabled);
                    ul.children[idx].removeAttribute('aria-disabled');
                  } else {
                    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !ul.classList.contains('e-contextmenu')) {
                      ul.children[idx + 1].classList.remove(disabled);
                    } else {
                      ul.children[idx].classList.remove(disabled);
                    }
                  }
                } else {
                  if (this.isMenu) {
                    ul.children[idx].classList.add(disabled);
                    ul.children[idx].setAttribute('aria-disabled', 'true');
                  } else {
                    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !ul.classList.contains('e-contextmenu')) {
                      ul.children[idx + 1].classList.add(disabled);
                    } else {
                      ul.children[idx].classList.add(disabled);
                    }
                  }
                }
              }
            }
          }
          /**
           * This method is used to show the menu items in the Menu based on the items text.
           * @param items Text items that needs to be shown.
           * @param isUniqueId - Set `true` if it is a unique id.
           * @returns void
           */

        }, {
          key: "showItems",
          value: function showItems(items, isUniqueId) {
            this.showHideItems(items, false, isUniqueId);
          }
          /**
           * This method is used to hide the menu items in the Menu based on the items text.
           * @param items Text items that needs to be hidden.
           * @returns void
           */

        }, {
          key: "hideItems",
          value: function hideItems(items, isUniqueId) {
            this.showHideItems(items, true, isUniqueId);
          }
        }, {
          key: "showHideItems",
          value: function showHideItems(items, ishide, isUniqueId) {
            var ul;
            var index;
            var navIdx;

            for (var i = 0; i < items.length; i++) {
              navIdx = this.getIndex(items[i], isUniqueId);
              index = navIdx.pop();
              ul = this.getUlByNavIdx(navIdx.length);

              if (ul) {
                if (ishide) {
                  if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !ul.classList.contains('e-contextmenu')) {
                    ul.children[index + 1].classList.add(HIDE);
                  } else {
                    ul.children[index].classList.add(HIDE);
                  }
                } else {
                  if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !ul.classList.contains('e-contextmenu')) {
                    ul.children[index + 1].classList.remove(HIDE);
                  } else {
                    ul.children[index].classList.remove(HIDE);
                  }
                }
              }
            }
          }
          /**
           * It is used to remove the menu items from the Menu based on the items text.
           * @param items Text items that needs to be removed.
           * @returns void
           */

        }, {
          key: "removeItems",
          value: function removeItems(items, isUniqueId) {
            var idx;
            var navIdx;
            var iitems;

            for (var i = 0; i < items.length; i++) {
              navIdx = this.getIndex(items[i], isUniqueId);
              idx = navIdx.pop();
              iitems = this.getItems(navIdx);
              this.removeItem(iitems, navIdx, idx);
            }
          }
          /**
           * It is used to insert the menu items after the specified menu item text.
           * @param items Items that needs to be inserted.
           * @param text Text item after that the element to be inserted.
           * @returns void
           */

        }, {
          key: "insertAfter",
          value: function insertAfter(items, text, isUniqueId) {
            this.insertItems(items, text, isUniqueId);
          }
          /**
           * It is used to insert the menu items before the specified menu item text.
           * @param items Items that needs to be inserted.
           * @param text Text item before that the element to be inserted.
           * @param isUniqueId - Set `true` if it is a unique id.
           * @returns void
           */

        }, {
          key: "insertBefore",
          value: function insertBefore(items, text, isUniqueId) {
            this.insertItems(items, text, isUniqueId, false);
          }
        }, {
          key: "insertItems",
          value: function insertItems(items, text, isUniqueId) {
            var isAfter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            var li;
            var idx;
            var navIdx;
            var iitems;
            var menuitem;
            var showIcon;

            for (var i = 0; i < items.length; i++) {
              navIdx = this.getIndex(text, isUniqueId);
              idx = navIdx.pop();
              iitems = this.getItems(navIdx);
              menuitem = new MenuItem(iitems[0], 'items', items[i], true);
              iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);
              var uls = this.isMenu ? [this.getWrapper()].concat(this.getPopups()) : [].slice.call(this.getWrapper().children);

              if (navIdx.length < uls.length) {
                idx = isAfter ? idx + 1 : idx;
                showIcon = this.hasField(iitems, this.getField('iconCss', navIdx.length - 1));
                li = this.createItems(iitems).children[idx];
                var ul = this.isMenu ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-menu-parent', uls[navIdx.length]) : uls[navIdx.length];
                ul.insertBefore(li, ul.children[idx]);
              }
            }
          }
        }, {
          key: "removeAttributes",
          value: function removeAttributes() {
            var _this42 = this;

            ['top', 'left', 'display', 'z-index'].forEach(function (key) {
              _this42.element.style.removeProperty(key);
            });
            ['role', 'tabindex', 'class', 'style'].forEach(function (key) {
              if (key === 'class' && _this42.element.classList.contains('e-menu-parent')) {
                _this42.element.classList.remove('e-menu-parent');
              }

              if (['class', 'style'].indexOf(key) === -1 || !_this42.element.getAttribute(key)) {
                _this42.element.removeAttribute(key);
              }

              if (_this42.isMenu && key === 'class' && _this42.element.classList.contains('e-vertical')) {
                _this42.element.classList.remove('e-vertical');
              }
            });
          }
          /**
           * Destroys the widget.
           * @returns void
           */

        }, {
          key: "destroy",
          value: function destroy() {
            var wrapper = this.getWrapper();

            if (wrapper) {
              this.unWireEvents();

              if (!this.isMenu) {
                this.clonedElement.style.display = '';

                if (this.clonedElement.tagName === 'EJS-CONTEXTMENU') {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.clonedElement], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);
                  this.element = this.clonedElement;
                } else {
                  if (this.refreshing && this.clonedElement.childElementCount && this.clonedElement.children[0].tagName === 'LI') {
                    this.setProperties({
                      'items': []
                    }, true);
                  }

                  if (document.getElementById(this.clonedElement.id)) {
                    var refEle = this.clonedElement.nextElementSibling;
                    refEle && refEle !== wrapper ? this.clonedElement.parentElement.insertBefore(this.element, refEle) : this.clonedElement.parentElement.appendChild(this.element);

                    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                      this.element = this.removeChildElement(this.element);
                    } else {
                      this.element.innerHTML = '';
                    }

                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([].slice.call(this.clonedElement.children), this.element);
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.clonedElement);
                    this.removeAttributes();
                  }
                }

                this.clonedElement = null;
              } else {
                this.closeMenu();

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                  this.element = this.removeChildElement(this.element);
                } else {
                  this.element.innerHTML = '';
                }

                this.removeAttributes();
                wrapper.parentNode.insertBefore(this.element, wrapper);
              }

              if (this.isMenu && this.clonedElement) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.element);
                wrapper.style.display = '';
                wrapper.classList.remove('e-' + this.getModuleName() + '-wrapper');
                wrapper.removeAttribute('data-ripple');
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(wrapper);
              }

              _get2(_getPrototypeOf2(MenuBase.prototype), "destroy", this).call(this);
            }
          }
        }]);

        return MenuBase;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "beforeItemRender", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "beforeOpen", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "onOpen", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "beforeClose", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "onClose", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "select", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MenuBase.prototype, "created", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], MenuBase.prototype, "cssClass", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MenuBase.prototype, "showItemOnClick", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], MenuBase.prototype, "target", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], MenuBase.prototype, "filter", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MenuBase.prototype, "template", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MenuBase.prototype, "enableScrolling", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MenuBase.prototype, "enableHtmlSanitizer", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        itemId: "id",
        text: "text",
        parentId: "parentId",
        iconCss: "iconCss",
        url: "url",
        separator: "separator",
        children: "items"
      }, FieldSettings)], MenuBase.prototype, "fields", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], MenuItem)], MenuBase.prototype, "items", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        duration: 400,
        easing: 'ease',
        effect: 'SlideDown'
      }, MenuAnimationSettings)], MenuBase.prototype, "animationSettings", void 0);

      MenuBase = __decorate$2([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], MenuBase);
      /**
       * Navigation Common modules
       */

      var __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var CLS_VERTICAL = 'e-vertical';
      var CLS_ITEMS = 'e-toolbar-items';
      var BZ_ITEMS = 'e-blazor-toolbar-items';
      var CLS_ITEM = 'e-toolbar-item';
      var CLS_RTL$2 = 'e-rtl';
      var CLS_SEPARATOR = 'e-separator';
      var CLS_POPUPICON = 'e-popup-up-icon';
      var CLS_POPUPDOWN = 'e-popup-down-icon';
      var CLS_POPUPOPEN = 'e-popup-open';
      var CLS_TEMPLATE = 'e-template';
      var CLS_DISABLE$2 = 'e-overlay';
      var CLS_POPUPTEXT = 'e-toolbar-text';
      var CLS_TBARTEXT = 'e-popup-text';
      var CLS_TBAROVERFLOW = 'e-overflow-show';
      var CLS_POPOVERFLOW = 'e-overflow-hide';
      var CLS_TBARBTN = 'e-tbar-btn';
      var CLS_TBARNAV = 'e-hor-nav';
      var CLS_TBARSCRLNAV = 'e-scroll-nav';
      var CLS_TBARRIGHT = 'e-toolbar-right';
      var CLS_TBARLEFT = 'e-toolbar-left';
      var CLS_TBARCENTER = 'e-toolbar-center';
      var CLS_TBARPOS = 'e-tbar-pos';
      var CLS_HSCROLLCNT = 'e-hscroll-content';
      var CLS_VSCROLLCNT = 'e-vscroll-content';
      var CLS_HSCROLLBAR$1 = 'e-hscroll-bar';
      var CLS_POPUPNAV = 'e-hor-nav';
      var CLS_POPUPCLASS = 'e-toolbar-pop';
      var CLS_POPUP = 'e-toolbar-popup';
      var CLS_TBARBTNTEXT = 'e-tbar-btn-text';
      var CLS_TBARNAVACT = 'e-nav-active';
      var CLS_TBARIGNORE = 'e-ignore';
      var CLS_POPPRI = 'e-popup-alone';
      var CLS_HIDDEN = 'e-hidden';
      var CLS_MULTIROW = 'e-toolbar-multirow';
      var CLS_MULTIROWPOS = 'e-multirow-pos';
      var CLS_MULTIROW_SEPARATOR = 'e-multirow-separator';
      var CLS_EXTENDABLE_SEPARATOR = 'e-extended-separator';
      var CLS_EXTEANDABLE_TOOLBAR = 'e-extended-toolbar';
      var CLS_EXTENDABLECLASS = 'e-toolbar-extended';
      var CLS_EXTENDPOPUP = 'e-expended-nav';
      var CLS_EXTENDEDPOPOPEN = 'e-tbar-extended';
      /**
       * An item object that is used to configure Toolbar commands.
       */

      var Item = /*#__PURE__*/function (_syncfusion_ej2_base_7) {
        _inherits2(Item, _syncfusion_ej2_base_7);

        var _super15 = _createSuper(Item);

        function Item() {
          _classCallCheck2(this, Item);

          return _super15.apply(this, arguments);
        }

        return Item;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "id", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "text", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Item.prototype, "width", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "cssClass", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Item.prototype, "showAlwaysInPopup", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Item.prototype, "disabled", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "prefixIcon", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "suffixIcon", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Item.prototype, "visible", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('None')], Item.prototype, "overflow", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "template", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Button')], Item.prototype, "type", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Both')], Item.prototype, "showTextOn", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Item.prototype, "htmlAttributes", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "tooltipText", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], Item.prototype, "align", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Item.prototype, "click", void 0);
      /**
       * The Toolbar control contains a group of commands that are aligned horizontally.
       * ```html
       * <div id="toolbar"/>
       * <script>
       *   var toolbarObj = new Toolbar();
       *   toolbarObj.appendTo("#toolbar");
       * </script>
       * ```
       */


      var Toolbar = /*#__PURE__*/function (_syncfusion_ej2_base_8) {
        _inherits2(Toolbar, _syncfusion_ej2_base_8);

        var _super16 = _createSuper(Toolbar);

        /**
         * Initializes a new instance of the Toolbar class.
         * @param options  - Specifies Toolbar model properties as options.
         * @param element  - Specifies the element that is rendered as a Toolbar.
         */
        function Toolbar(options, element) {
          var _this43;

          _classCallCheck2(this, Toolbar);

          _this43 = _super16.call(this, options, element);
          _this43.resizeContext = _this43.resize.bind(_assertThisInitialized2(_this43));
          /**
           * Contains the keyboard configuration of the Toolbar.
           */

          _this43.keyConfigs = {
            moveLeft: 'leftarrow',
            moveRight: 'rightarrow',
            moveUp: 'uparrow',
            moveDown: 'downarrow',
            popupOpen: 'enter',
            popupClose: 'escape',
            tab: 'tab',
            home: 'home',
            end: 'end'
          };
          return _this43;
        }
        /**
         * Removes the control from the DOM and also removes all its related events.
         * @returns void.
         */


        _createClass2(Toolbar, [{
          key: "destroy",
          value: function destroy() {
            var _this44 = this;

            _get2(_getPrototypeOf2(Toolbar.prototype), "destroy", this).call(this);

            this.unwireEvents();
            this.tempId.forEach(function (ele) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this44.element.querySelector(ele))) {
                document.body.appendChild(_this44.element.querySelector(ele)).style.display = 'none';
              }
            });

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              this.resetServerItems();
            } else {
              var subControls = this.element.querySelectorAll('.e-control');
              [].slice.call(subControls).forEach(function (node) {
                var instances = node.ej2_instances;

                if (instances) {
                  var instance = instances[0];

                  if (instance) {
                    instance.destroy();
                  }
                }
              });
            }

            while (this.element.lastElementChild && !this.element.lastElementChild.classList.contains(BZ_ITEMS)) {
              this.element.removeChild(this.element.lastElementChild);
            }

            if (this.trgtEle) {
              this.element.appendChild(this.ctrlTem);
            }

            this.clearProperty();
            this.popObj = null;
            this.tbarAlign = null;
            this.remove(this.element, 'e-toolpop');

            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], this.cssClass.split(' '));
            }

            this.element.removeAttribute('style');
            ['aria-disabled', 'aria-orientation', 'aria-haspopup', 'role'].forEach(function (attrb) {
              return _this44.element.removeAttribute(attrb);
            });
          }
          /**
           * Initialize the event handler
           * @private
           */

        }, {
          key: "preRender",
          value: function preRender() {
            var eventArgs = {
              enableCollision: this.enableCollision,
              scrollStep: this.scrollStep
            };
            this.trigger('beforeCreate', eventArgs);
            this.enableCollision = eventArgs.enableCollision;
            this.scrollStep = eventArgs.scrollStep;
            this.scrollModule = null;
            this.popObj = null;
            this.tempId = [];
            this.tbarItemsCol = this.items;
            this.isVertical = this.element.classList.contains(CLS_VERTICAL) ? true : false;
            this.isExtendedOpen = false;
            this.popupPriCount = 0;

            if (this.enableRtl) {
              this.add(this.element, CLS_RTL$2);
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.clickHandler, this);

            window.addEventListener('resize', this.resizeContext);

            if (this.allowKeyboard) {
              this.wireKeyboardEvent();
            }
          }
        }, {
          key: "wireKeyboardEvent",
          value: function wireKeyboardEvent() {
            this.keyModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.element, {
              keyAction: this.keyActionHandler.bind(this),
              keyConfigs: this.keyConfigs
            });

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keydown', this.docKeyDown, this);

            this.element.setAttribute('tabIndex', '0');
          }
        }, {
          key: "unwireKeyboardEvent",
          value: function unwireKeyboardEvent() {
            if (this.keyModule) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keydown', this.docKeyDown);

              this.keyModule.destroy();
              this.keyModule = null;
            }
          }
        }, {
          key: "docKeyDown",
          value: function docKeyDown(e) {
            if (e.target.tagName === 'INPUT') {
              return;
            }

            var popCheck = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popObj) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.popObj.element) && this.overflowMode !== 'Extended';

            if (e.keyCode === 9 && e.target.classList.contains('e-hor-nav') === true && popCheck) {
              this.popObj.hide({
                name: 'FadeOut',
                duration: 100
              });
            }

            var keyCheck = e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 35 || e.keyCode === 36;

            if (keyCheck) {
              e.preventDefault();
            }
          }
        }, {
          key: "unwireEvents",
          value: function unwireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.clickHandler);

            this.destroyScroll();
            this.unwireKeyboardEvent();
            window.removeEventListener('resize', this.resizeContext);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'scroll', this.docEvent);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'click', this.docEvent);
          }
        }, {
          key: "clearProperty",
          value: function clearProperty() {
            this.tbarEle = [];
            this.tbarAlgEle = {
              lefts: [],
              centers: [],
              rights: []
            };
          }
        }, {
          key: "docEvent",
          value: function docEvent(e) {
            var popEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-popup');

            if (this.popObj && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.popObj.element) && !popEle && this.overflowMode === 'Popup') {
              this.popObj.hide({
                name: 'FadeOut',
                duration: 100
              });
            }
          }
        }, {
          key: "destroyScroll",
          value: function destroyScroll() {
            if (this.scrollModule) {
              if (this.tbarAlign) {
                this.add(this.scrollModule.element, CLS_TBARPOS);
              }

              this.scrollModule.destroy();
              this.scrollModule = null;
            }
          }
        }, {
          key: "destroyItems",
          value: function destroyItems() {
            [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM)).forEach(function (el) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(el);
            });
            var tbarItems = this.element.querySelector('.' + CLS_ITEMS);

            if (this.tbarAlign) {
              [].slice.call(tbarItems.children).forEach(function (el) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(el);
              });
              this.tbarAlign = false;
              this.remove(tbarItems, CLS_TBARPOS);
            }

            this.clearProperty();
          }
        }, {
          key: "destroyMode",
          value: function destroyMode() {
            if (this.scrollModule) {
              this.remove(this.scrollModule.element, CLS_RTL$2);
              this.destroyScroll();
            }

            this.remove(this.element, CLS_EXTENDEDPOPOPEN);
            this.remove(this.element, CLS_EXTEANDABLE_TOOLBAR);
            var tempEle = this.element.querySelector('.e-toolbar-multirow');

            if (tempEle) {
              this.remove(tempEle, CLS_MULTIROW);
            }

            if (this.popObj) {
              this.popupRefresh(this.popObj.element, true);
            }
          }
        }, {
          key: "add",
          value: function add(ele, val) {
            ele.classList.add(val);
          }
        }, {
          key: "remove",
          value: function remove(ele, val) {
            ele.classList.remove(val);
          }
        }, {
          key: "elementFocus",
          value: function elementFocus(ele) {
            var fChild = ele.firstElementChild;

            if (fChild) {
              fChild.focus();
              this.activeEleSwitch(ele);
            } else {
              ele.focus();
            }
          }
        }, {
          key: "clstElement",
          value: function clstElement(tbrNavChk, trgt) {
            var clst;

            if (tbrNavChk && this.popObj && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.popObj.element)) {
              clst = this.popObj.element.querySelector('.' + CLS_ITEM);
            } else if (this.element === trgt || tbrNavChk) {
              // tslint:disable-next-line:max-line-length
              clst = this.element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_DISABLE$2 + ' ):not(.' + CLS_SEPARATOR + ' ):not(.' + CLS_HIDDEN + ' )');
            } else {
              clst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ITEM);
            }

            return clst;
          }
        }, {
          key: "keyHandling",
          value: function keyHandling(clst, e, trgt, navChk, scrollChk) {
            var popObj = this.popObj;
            var rootEle = this.element;
            var popAnimate = {
              name: 'FadeOut',
              duration: 100
            };

            switch (e.action) {
              case 'moveRight':
                if (this.isVertical) {
                  return;
                }

                if (rootEle === trgt) {
                  this.elementFocus(clst);
                } else if (!navChk) {
                  this.eleFocus(clst, 'next');
                }

                break;

              case 'moveLeft':
                if (this.isVertical) {
                  return;
                }

                if (!navChk) {
                  this.eleFocus(clst, 'previous');
                }

                break;

              case 'home':
              case 'end':
                var ele;
                var nodes;

                if (clst) {
                  var popupCheck = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(clst, '.e-popup');

                  if (popupCheck) {
                    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.popObj.element)) {
                      nodes = [].slice.call(popupCheck.children);

                      if (e.action === 'home') {
                        ele = nodes[0];
                      } else {
                        ele = nodes[nodes.length - 1];
                      }
                    }
                  } else {
                    nodes = this.element.querySelectorAll('.' + CLS_ITEMS + ' .' + CLS_ITEM);

                    if (e.action === 'home') {
                      ele = nodes[0];
                    } else {
                      ele = nodes[nodes.length - 1];
                    }
                  }

                  if (ele) {
                    this.elementFocus(ele);
                  }
                }

                break;

              case 'moveUp':
              case 'moveDown':
                var value = e.action === 'moveUp' ? 'previous' : 'next';

                if (!this.isVertical) {
                  if (popObj && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.e-popup')) {
                    var popEle = popObj.element;
                    var popFrstEle = popEle.firstElementChild;

                    if (value === 'previous' && popFrstEle === clst || value === 'next' && popEle.lastElementChild === clst) {
                      return;
                    } else {
                      this.eleFocus(clst, value);
                    }
                  } else if (e.action === 'moveDown' && popObj && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(popObj.element)) {
                    this.elementFocus(clst);
                  }
                } else {
                  if (e.action === 'moveUp') {
                    this.eleFocus(clst, 'previous');
                  } else {
                    this.eleFocus(clst, 'next');
                  }
                }

                break;

              case 'tab':
                if (!scrollChk && !navChk) {
                  var _ele4 = clst.firstElementChild;

                  if (rootEle === trgt) {
                    if (this.activeEle) {
                      this.activeEle.focus();
                    } else {
                      this.activeEleRemove(_ele4);

                      _ele4.focus();
                    }

                    this.element.removeAttribute('tabindex');
                  }
                }

                break;

              case 'popupClose':
                if (popObj && this.overflowMode !== 'Extended') {
                  popObj.hide(popAnimate);
                }

                break;

              case 'popupOpen':
                if (!navChk) {
                  return;
                }

                if (popObj && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(popObj.element)) {
                  popObj.element.style.top = rootEle.offsetHeight + 'px';
                  popObj.show({
                    name: 'FadeIn',
                    duration: 100
                  });
                } else {
                  popObj.hide(popAnimate);
                }

                break;
            }
          }
        }, {
          key: "keyActionHandler",
          value: function keyActionHandler(e) {
            var trgt = e.target;

            if (trgt.tagName === 'INPUT' || trgt.tagName === 'TEXTAREA' || this.element.classList.contains(CLS_DISABLE$2)) {
              return;
            }

            e.preventDefault();
            var clst;
            var tbrNavChk = trgt.classList.contains(CLS_TBARNAV);
            var tbarScrollChk = trgt.classList.contains(CLS_TBARSCRLNAV);
            clst = this.clstElement(tbrNavChk, trgt);

            if (clst || tbarScrollChk) {
              this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);
            }
          }
          /**
           * Specifies the value to disable/enable the Toolbar component.
           * When set to `true`, the component will be disabled.
           * @param  {boolean} value - Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).
           * @returns void.
           */

        }, {
          key: "disable",
          value: function disable(value) {
            var rootEle = this.element;
            value ? rootEle.classList.add(CLS_DISABLE$2) : rootEle.classList.remove(CLS_DISABLE$2);
            rootEle.setAttribute('tabindex', !value ? '0' : '-1');

            if (this.activeEle) {
              this.activeEle.setAttribute('tabindex', !value ? '0' : '-1');
            }

            if (this.scrollModule) {
              this.scrollModule.disable(value);
            }

            if (this.popObj) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.popObj.element) && this.overflowMode !== 'Extended') {
                this.popObj.hide();
              }

              rootEle.querySelector('#' + rootEle.id + '_nav').setAttribute('tabindex', !value ? '0' : '-1');
            }
          }
        }, {
          key: "eleContains",
          value: function eleContains(el) {
            // tslint:disable-next-line:max-line-length
            return el.classList.contains(CLS_SEPARATOR) || el.classList.contains(CLS_DISABLE$2) || el.getAttribute('disabled') || el.classList.contains(CLS_HIDDEN) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(el); // tslint:enable-next-line:max-line-length
          }
        }, {
          key: "eleFocus",
          value: function eleFocus(closest$$1, pos) {
            var sib = Object(closest$$1)[pos + 'ElementSibling'];

            if (sib) {
              var skipEle = this.eleContains(sib);

              if (skipEle) {
                this.eleFocus(sib, pos);
                return;
              }

              this.elementFocus(sib);
            } else if (this.tbarAlign) {
              var elem = Object(closest$$1.parentElement)[pos + 'ElementSibling'];

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(elem) && elem.children.length === 0) {
                elem = Object(elem)[pos + 'ElementSibling'];
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(elem) && elem.children.length > 0) {
                if (pos === 'next') {
                  var el = elem.querySelector('.' + CLS_ITEM);

                  if (this.eleContains(el)) {
                    this.eleFocus(el, pos);
                  } else {
                    el.firstElementChild.focus();
                    this.activeEleSwitch(el);
                  }
                } else {
                  var _el = elem.lastElementChild;

                  if (this.eleContains(_el)) {
                    this.eleFocus(_el, pos);
                  } else {
                    this.elementFocus(_el);
                  }
                }
              }
            }
          }
        }, {
          key: "clickHandler",
          value: function clickHandler(e) {
            var _this45 = this;

            var trgt = e.target;
            var clsList = trgt.classList;
            var ele = this.element;
            var isPopupElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_POPUPCLASS));
            var popupNav = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_TBARNAV);

            if (!popupNav) {
              popupNav = trgt;
            }

            if (!ele.children[0].classList.contains('e-hscroll') && !ele.children[0].classList.contains('e-vscroll') && clsList.contains(CLS_TBARNAV)) {
              clsList = trgt.querySelector('.e-icons').classList;
            }

            if (clsList.contains(CLS_POPUPICON) || clsList.contains(CLS_POPUPDOWN)) {
              this.popupClickHandler(ele, popupNav, CLS_RTL$2);
            }

            var itemObj;
            var clst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + CLS_ITEM);

            if ((Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(clst) || clst.classList.contains(CLS_DISABLE$2)) && !popupNav.classList.contains(CLS_TBARNAV)) {
              return;
            }

            if (clst) {
              var tempItem = this.items[this.tbarEle.indexOf(clst)];

              if (tempItem && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                itemObj = {
                  id: tempItem.id,
                  text: tempItem.text,
                  width: tempItem.width,
                  cssClass: tempItem.cssClass,
                  showAlwaysInPopup: tempItem.showAlwaysInPopup,
                  disabled: tempItem.disabled,
                  prefixIcon: tempItem.prefixIcon,
                  suffixIcon: tempItem.suffixIcon,
                  visible: tempItem.visible,
                  overflow: tempItem.overflow,
                  template: tempItem.template,
                  type: tempItem.type,
                  showTextOn: tempItem.showTextOn,
                  htmlAttributes: tempItem.htmlAttributes,
                  tooltipText: tempItem.tooltipText,
                  align: tempItem.align,
                  click: tempItem.click
                };
              } else {
                itemObj = tempItem;
              }
            }

            var eventArgs = {
              originalEvent: e,
              item: itemObj
            };

            if (itemObj && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(itemObj.click)) {
              this.trigger('items[' + this.tbarEle.indexOf(clst) + '].click', eventArgs);
            }

            if (!eventArgs.cancel) {
              this.trigger('clicked', eventArgs, function (clickedArgs) {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this45.popObj) && isPopupElement && !clickedArgs.cancel && _this45.overflowMode === 'Popup' && clickedArgs.item && clickedArgs.item.type !== 'Input') {
                  _this45.popObj.hide({
                    name: 'FadeOut',
                    duration: 100
                  });
                }
              });
            }
          }
        }, {
          key: "popupClickHandler",
          value: function popupClickHandler(ele, popupNav, CLS_RTL) {
            var popObj = this.popObj;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(popObj.element)) {
              popupNav.classList.remove(CLS_TBARNAVACT);
              popObj.hide({
                name: 'FadeOut',
                duration: 100
              });
            } else {
              if (ele.classList.contains(CLS_RTL)) {
                popObj.enableRtl = true;
                popObj.position = {
                  X: 'left',
                  Y: 'top'
                };
              }

              if (popObj.offsetX === 0 && !ele.classList.contains(CLS_RTL)) {
                popObj.enableRtl = false;
                popObj.position = {
                  X: 'right',
                  Y: 'top'
                };
              }

              popObj.dataBind();
              popObj.refreshPosition();
              popObj.element.style.top = this.getElementOffsetY() + 'px';

              if (this.overflowMode === 'Extended') {
                popObj.element.style.minHeight = '0px';
              }

              popupNav.classList.add(CLS_TBARNAVACT);
              popObj.show({
                name: 'FadeIn',
                duration: 100
              });
            }
          }
          /**
           * To Initialize the control rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.initialize();
            this.renderControl();
            this.wireEvents();
            this.renderComplete();
          }
        }, {
          key: "initialize",
          value: function initialize() {
            var width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width);
            var height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height);

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name !== 'msie' || this.height !== 'auto' || this.overflowMode === 'MultiRow') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                'height': height
              });
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
              'width': width
            });
            var ariaAttr = {
              'role': 'toolbar',
              'aria-disabled': 'false',
              'aria-haspopup': 'false',
              'aria-orientation': !this.isVertical ? 'horizontal' : 'vertical'
            };
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, ariaAttr);

            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.cssClass.split(' '));
            }
          }
        }, {
          key: "renderControl",
          value: function renderControl() {
            var ele = this.element;
            this.trgtEle = ele.children.length > 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered ? ele.querySelector('div') : null;
            this.tbarAlgEle = {
              lefts: [],
              centers: [],
              rights: []
            };
            this.renderItems();
            this.renderLayout();
          }
        }, {
          key: "renderLayout",
          value: function renderLayout() {
            this.renderOverflowMode();

            if (this.tbarAlign) {
              this.itemPositioning();
            }

            if (this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element)) {
              this.popupRefresh(this.popObj.element, false);
            }

            this.separator();
          }
        }, {
          key: "itemsAlign",
          value: function itemsAlign(items, itemEleDom) {
            var innerItem;
            var innerPos;

            if (!this.tbarEle) {
              this.tbarEle = [];
            }

            for (var i = 0; i < items.length; i++) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                this.isVertical = this.element.classList.contains(CLS_VERTICAL) ? true : false;
                var itemEleBlaDom = this.element.querySelector('.' + BZ_ITEMS);
                innerItem = itemEleBlaDom.querySelector('.' + CLS_ITEM + '[data-index="' + i + '"]');

                if (!innerItem) {
                  continue;
                }

                if (items[i].overflow !== 'Show' && items[i].showAlwaysInPopup && !innerItem.classList.contains(CLS_SEPARATOR)) {
                  this.popupPriCount++;
                }

                if (items[i].htmlAttributes) {
                  this.setAttr(items[i].htmlAttributes, innerItem);
                }

                if (items[i].type === 'Button') {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].clearEvents(innerItem);

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(innerItem, 'click', this.itemClick, this);
                }
              } else {
                innerItem = this.renderSubComponent(items[i], i);
              }

              if (this.tbarEle.indexOf(innerItem) === -1) {
                this.tbarEle.push(innerItem);
              }

              if (!this.tbarAlign) {
                this.tbarItemAlign(items[i], itemEleDom, i);
              }

              innerPos = itemEleDom.querySelector('.e-toolbar-' + items[i].align.toLowerCase());

              if (innerPos) {
                if (!(items[i].showAlwaysInPopup && items[i].overflow !== 'Show')) {
                  this.tbarAlgEle[(items[i].align + 's').toLowerCase()].push(innerItem);
                }

                innerPos.appendChild(innerItem);
              } else {
                itemEleDom.appendChild(innerItem);
              }
            }
          }
        }, {
          key: "serverItemsRerender",
          value: function serverItemsRerender() {
            this.destroyMode();
            this.resetServerItems();
            this.serverItemsRefresh();
          }
        }, {
          key: "serverItemsRefresh",
          value: function serverItemsRefresh() {
            var wrapBlaEleDom = this.element.querySelector('.' + BZ_ITEMS);

            if (wrapBlaEleDom.children.length > 0) {
              this.itemsAlign(this.items, this.element.querySelector('.' + CLS_ITEMS));
              this.renderLayout();
              this.refreshOverflow();
            }
          }
        }, {
          key: "resetServerItems",
          value: function resetServerItems() {
            var wrapBlaEleDom = this.element.querySelector('.' + BZ_ITEMS);
            var itemEles = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEMS + ' .' + CLS_ITEM, this.element));
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(itemEles, wrapBlaEleDom);
            this.clearProperty();
          }
          /** @hidden */

        }, {
          key: "changeOrientation",
          value: function changeOrientation() {
            var ele = this.element;

            if (this.isVertical) {
              ele.classList.remove(CLS_VERTICAL);
              this.isVertical = false;

              if (this.height === 'auto' || this.height === '100%') {
                ele.style.height = this.height;
              }

              ele.setAttribute('aria-orientation', 'horizontal');
            } else {
              ele.classList.add(CLS_VERTICAL);
              this.isVertical = true;
              ele.setAttribute('aria-orientation', 'vertical');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height),
                'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width)
              });
            }

            this.destroyMode();
            this.refreshOverflow();
          }
        }, {
          key: "initScroll",
          value: function initScroll(element, innerItems) {
            if (!this.scrollModule && this.checkOverflow(element, innerItems[0])) {
              if (this.tbarAlign) {
                this.element.querySelector('.' + CLS_ITEMS + ' .' + CLS_TBARCENTER).removeAttribute('style');
              }

              if (this.isVertical) {
                this.scrollModule = new VScroll({
                  scrollStep: this.scrollStep,
                  enableRtl: this.enableRtl
                }, innerItems[0]);
              } else {
                this.scrollModule = new HScroll({
                  scrollStep: this.scrollStep,
                  enableRtl: this.enableRtl
                }, innerItems[0]);
              }

              this.remove(this.scrollModule.element, CLS_TBARPOS);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                overflow: 'hidden'
              });
            }
          }
        }, {
          key: "itemWidthCal",
          value: function itemWidthCal(items) {
            var _this46 = this;

            var width = 0;
            var style;
            [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, items)).forEach(function (el) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(el)) {
                style = window.getComputedStyle(el);
                width += _this46.isVertical ? el.offsetHeight : el.offsetWidth;
                width += parseFloat(_this46.isVertical ? style.marginTop : style.marginRight);
                width += parseFloat(_this46.isVertical ? style.marginBottom : style.marginLeft);
              }
            });
            return width;
          }
        }, {
          key: "getScrollCntEle",
          value: function getScrollCntEle(innerItem) {
            var trgClass = this.isVertical ? '.e-vscroll-content' : '.e-hscroll-content';
            return innerItem.querySelector(trgClass);
          }
        }, {
          key: "checkOverflow",
          value: function checkOverflow(element, innerItem) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(innerItem) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(element)) {
              return false;
            }

            var eleWidth = this.isVertical ? element.offsetHeight : element.offsetWidth;
            var itemWidth = this.isVertical ? innerItem.offsetHeight : innerItem.offsetWidth;

            if (this.tbarAlign || this.scrollModule || eleWidth === itemWidth) {
              itemWidth = this.itemWidthCal(this.scrollModule ? this.getScrollCntEle(innerItem) : innerItem);
            }

            var popNav = element.querySelector('.' + CLS_TBARNAV);
            var scrollNav = element.querySelector('.' + CLS_TBARSCRLNAV);
            var navEleWidth = 0;

            if (popNav) {
              navEleWidth = this.isVertical ? popNav.offsetHeight : popNav.offsetWidth;
            } else if (scrollNav) {
              navEleWidth = this.isVertical ? scrollNav.offsetHeight * 2 : scrollNav.offsetWidth * 2;
            }

            if (itemWidth > eleWidth - navEleWidth) {
              return true;
            } else {
              return false;
            }
          }
          /**
           * Refresh the whole Toolbar component without re-rendering.
           * - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.
           * - It will refresh the Toolbar component after loading items dynamically.
           * @returns void.
           */

        }, {
          key: "refreshOverflow",
          value: function refreshOverflow() {
            this.resize();
          }
        }, {
          key: "toolbarAlign",
          value: function toolbarAlign(innerItems) {
            if (this.tbarAlign) {
              this.add(innerItems, CLS_TBARPOS);
              this.itemPositioning();
            }
          }
        }, {
          key: "renderOverflowMode",
          value: function renderOverflowMode() {
            var ele = this.element;
            var innerItems = ele.querySelector('.' + CLS_ITEMS);
            var priorityCheck = this.popupPriCount > 0;

            if (ele && ele.children.length > 0) {
              this.offsetWid = ele.offsetWidth;
              this.remove(this.element, 'e-toolpop');

              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' && this.height === 'auto') {
                ele.style.height = '';
              }

              switch (this.overflowMode) {
                case 'Scrollable':
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.scrollModule)) {
                    this.initScroll(ele, [].slice.call(ele.getElementsByClassName(CLS_ITEMS)));
                  }

                  break;

                case 'Popup':
                  this.add(this.element, 'e-toolpop');

                  if (this.tbarAlign) {
                    this.removePositioning();
                  }

                  if (this.checkOverflow(ele, innerItems) || priorityCheck) {
                    this.setOverflowAttributes(ele);
                  }

                  this.toolbarAlign(innerItems);
                  break;

                case 'MultiRow':
                  this.add(innerItems, CLS_MULTIROW);

                  if (this.checkOverflow(ele, innerItems) && this.tbarAlign) {
                    this.removePositioning();
                    this.add(innerItems, CLS_MULTIROWPOS);
                  }

                  if (ele.style.overflow === 'hidden') {
                    ele.style.overflow = '';
                  }

                  if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' || ele.style.height !== 'auto') {
                    ele.style.height = 'auto';
                  }

                  break;

                case 'Extended':
                  this.add(this.element, CLS_EXTEANDABLE_TOOLBAR);

                  if (this.checkOverflow(ele, innerItems) || priorityCheck) {
                    if (this.tbarAlign) {
                      this.removePositioning();
                    }

                    this.setOverflowAttributes(ele);
                  }

                  this.toolbarAlign(innerItems);
              }
            }
          }
        }, {
          key: "setOverflowAttributes",
          value: function setOverflowAttributes(ele) {
            this.createPopupEle(ele, [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEMS + ' .' + CLS_ITEM, ele)));
            this.element.querySelector('.' + CLS_TBARNAV).setAttribute('tabIndex', '0');
            this.element.querySelector('.' + CLS_TBARNAV).setAttribute('role', 'list');
          }
        }, {
          key: "separator",
          value: function separator() {
            var element = this.element;
            var eleItem = [].slice.call(element.querySelectorAll('.' + CLS_SEPARATOR));
            var eleInlineItem;
            var multiVar = element.querySelector('.' + CLS_MULTIROW_SEPARATOR);
            var extendVar = element.querySelector('.' + CLS_EXTENDABLE_SEPARATOR);
            eleInlineItem = this.overflowMode === 'MultiRow' ? multiVar : extendVar;

            if (eleInlineItem !== null) {
              if (this.overflowMode === 'MultiRow') {
                eleInlineItem.classList.remove(CLS_MULTIROW_SEPARATOR);
              } else if (this.overflowMode === 'Extended') {
                eleInlineItem.classList.remove(CLS_EXTENDABLE_SEPARATOR);
              }
            }

            for (var i = 0; i <= eleItem.length - 1; i++) {
              if (eleItem[i].offsetLeft < 30 && eleItem[i].offsetLeft !== 0) {
                if (this.overflowMode === 'MultiRow') {
                  eleItem[i].classList.add(CLS_MULTIROW_SEPARATOR);
                } else if (this.overflowMode === 'Extended') {
                  eleItem[i].classList.add(CLS_EXTENDABLE_SEPARATOR);
                }
              }
            }
          }
        }, {
          key: "createPopupEle",
          value: function createPopupEle(ele, innerEle) {
            var innerNav = ele.querySelector('.' + CLS_TBARNAV);
            var vertical = this.isVertical;

            if (!innerNav) {
              this.createPopupIcon(ele);
            }

            innerNav = ele.querySelector('.' + CLS_TBARNAV);
            var innerNavDom = vertical ? innerNav.offsetHeight : innerNav.offsetWidth;
            var eleWidth = (vertical ? ele.offsetHeight : ele.offsetWidth) - innerNavDom;
            this.element.classList.remove('e-rtl');
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
              direction: 'initial'
            });
            this.checkPriority(ele, innerEle, eleWidth, true);

            if (this.enableRtl) {
              this.element.classList.add('e-rtl');
            }

            this.element.style.removeProperty('direction');
            this.createPopup();
          }
        }, {
          key: "pushingPoppedEle",
          value: function pushingPoppedEle(tbarObj, popupPri, ele, eleHeight, sepHeight) {
            var element = tbarObj.element;
            var nodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TBAROVERFLOW, ele);
            var nodeIndex = 0;
            var poppedEle = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_POPUP, element.querySelector('.' + CLS_ITEMS)));
            var nodePri = 0;
            poppedEle.forEach(function (el, index) {
              nodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TBAROVERFLOW, ele);

              if (el.classList.contains(CLS_TBAROVERFLOW) && nodes.length > 0) {
                if (tbarObj.tbResize && nodes.length > index) {
                  ele.insertBefore(el, nodes[index]);
                  ++nodePri;
                } else {
                  ele.insertBefore(el, ele.children[nodes.length]);
                  ++nodePri;
                }
              } else if (el.classList.contains(CLS_TBAROVERFLOW)) {
                ele.insertBefore(el, ele.firstChild);
                ++nodePri;
              } else if (tbarObj.tbResize && el.classList.contains(CLS_POPOVERFLOW) && ele.children.length > 0 && nodes.length === 0) {
                ele.insertBefore(el, ele.firstChild);
                ++nodePri;
              } else if (el.classList.contains(CLS_POPOVERFLOW)) {
                popupPri.push(el);
              } else if (tbarObj.tbResize) {
                ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]);
                ++nodeIndex;
              } else {
                ele.appendChild(el);
              }

              if (el.classList.contains(CLS_SEPARATOR)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(el, {
                  display: '',
                  height: sepHeight + 'px'
                });
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(el, {
                  display: '',
                  height: eleHeight + 'px'
                });
              }
            });
            popupPri.forEach(function (el) {
              ele.appendChild(el);
            });
            var tbarEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, element.querySelector('.' + CLS_ITEMS));

            for (var i = tbarEle.length - 1; i >= 0; i--) {
              var tbarElement = tbarEle[i];

              if (tbarElement.classList.contains(CLS_SEPARATOR) && this.overflowMode !== 'Extended') {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(tbarElement, {
                  display: 'none'
                });
              } else {
                break;
              }
            }
          }
        }, {
          key: "createPopup",
          value: function createPopup() {
            var element = this.element;
            var eleHeight;
            var eleItem;
            var sepHeight;
            var sepItem;

            if (this.overflowMode === 'Extended') {
              sepItem = element.querySelector('.' + CLS_SEPARATOR + ':not(.' + CLS_POPUP + ')');
              sepHeight = element.style.height === 'auto' || element.style.height === '' ? null : sepItem.offsetHeight;
            }

            eleItem = element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_POPUP + ')');
            eleHeight = element.style.height === 'auto' || element.style.height === '' ? null : eleItem && eleItem.offsetHeight;
            var ele;
            var popupPri = [];

            if (element.querySelector('#' + element.id + '_popup.' + CLS_POPUPCLASS)) {
              ele = element.querySelector('#' + element.id + '_popup.' + CLS_POPUPCLASS);
            } else {
              var extendEle = this.createElement('div', {
                id: element.id + '_popup',
                className: CLS_POPUPCLASS + ' ' + CLS_EXTENDABLECLASS
              });
              var popupEle = this.createElement('div', {
                id: element.id + '_popup',
                className: CLS_POPUPCLASS
              });
              ele = this.overflowMode === 'Extended' ? extendEle : popupEle;
            }

            this.pushingPoppedEle(this, popupPri, ele, eleHeight, sepHeight);
            this.popupInit(element, ele);
          }
        }, {
          key: "getElementOffsetY",
          value: function getElementOffsetY() {
            return this.overflowMode === 'Extended' && window.getComputedStyle(this.element).getPropertyValue('box-sizing') === 'border-box' ? this.element.clientHeight : this.element.offsetHeight;
          }
        }, {
          key: "popupInit",
          value: function popupInit(element, ele) {
            if (!this.popObj) {
              element.appendChild(ele);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                overflow: ''
              });
              var eleStyles = window.getComputedStyle(this.element);
              var popup = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["Popup"](null, {
                relateTo: this.element,
                offsetY: this.isVertical ? 0 : this.getElementOffsetY(),
                enableRtl: this.enableRtl,
                open: this.popupOpen.bind(this),
                close: this.popupClose.bind(this),
                collision: {
                  Y: this.enableCollision ? 'flip' : 'none'
                },
                position: this.enableRtl ? {
                  X: 'left',
                  Y: 'top'
                } : {
                  X: 'right',
                  Y: 'top'
                }
              });
              popup.appendTo(ele);

              if (this.overflowMode === 'Extended') {
                popup.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;
                popup.offsetX = 0;
              }

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'scroll', this.docEvent.bind(this));

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'click ', this.docEvent.bind(this));

              popup.element.style.maxHeight = popup.element.offsetHeight + 'px';

              if (this.isVertical) {
                popup.element.style.visibility = 'hidden';
              }

              if (this.isExtendedOpen) {
                var popupNav = this.element.querySelector('.' + CLS_TBARNAV);
                popupNav.classList.add(CLS_TBARNAVACT);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(popupNav.firstElementChild, [CLS_POPUPICON], [CLS_POPUPDOWN]);
                this.element.querySelector('.' + CLS_EXTENDABLECLASS).classList.add(CLS_POPUPOPEN);
              } else {
                popup.hide();
              }

              this.popObj = popup;
              this.element.setAttribute('aria-haspopup', 'true');
            } else {
              var popupEle = this.popObj.element;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(popupEle, {
                maxHeight: '',
                display: 'block'
              });
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(popupEle, {
                maxHeight: popupEle.offsetHeight + 'px',
                display: ''
              });
            }
          }
        }, {
          key: "tbarPopupHandler",
          value: function tbarPopupHandler(isOpen) {
            if (this.overflowMode === 'Extended') {
              isOpen ? this.add(this.element, CLS_EXTENDEDPOPOPEN) : this.remove(this.element, CLS_EXTENDEDPOPOPEN);
            }
          }
        }, {
          key: "popupOpen",
          value: function popupOpen(e) {
            var popObj = this.popObj;

            if (!this.isVertical) {
              popObj.offsetY = this.getElementOffsetY();
              popObj.dataBind();
            }

            var popupEle = this.popObj.element;
            var toolEle = this.popObj.element.parentElement;
            var popupNav = toolEle.querySelector('.' + CLS_TBARNAV);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(popObj.element, {
              height: 'auto',
              maxHeight: ''
            });
            popObj.element.style.maxHeight = popObj.element.offsetHeight + 'px';

            if (this.overflowMode === 'Extended') {
              popObj.element.style.minHeight = '';
            }

            var popupElePos = popupEle.offsetTop + popupEle.offsetHeight + Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["calculatePosition"])(toolEle).top;
            var popIcon = popupNav.firstElementChild;
            popupNav.classList.add(CLS_TBARNAVACT);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(popIcon, [CLS_POPUPICON], [CLS_POPUPDOWN]);
            this.tbarPopupHandler(true);
            var scrollVal = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(window.scrollY) ? 0 : window.scrollY;

            if (!this.isVertical && window.innerHeight + scrollVal < popupElePos && this.element.offsetTop < popupEle.offsetHeight) {
              var overflowHeight = popupEle.offsetHeight - (popupElePos - window.innerHeight - scrollVal + 5);
              popObj.height = overflowHeight + 'px';

              for (var i = 0; i <= popupEle.childElementCount; i++) {
                var ele = popupEle.children[i];

                if (ele.offsetTop + ele.offsetHeight > overflowHeight) {
                  overflowHeight = ele.offsetTop;
                  break;
                }
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(popObj.element, {
                maxHeight: overflowHeight + 'px'
              });
            } else if (this.isVertical) {
              var tbEleData = this.element.getBoundingClientRect();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(popObj.element, {
                maxHeight: tbEleData.top + this.element.offsetHeight + 'px',
                bottom: 0,
                visibility: ''
              });
            }

            if (popObj) {
              popObj.refreshPosition();
            }
          }
        }, {
          key: "popupClose",
          value: function popupClose(e) {
            var element = this.element;
            var popupNav = element.querySelector('.' + CLS_TBARNAV);
            var popIcon = popupNav.firstElementChild;
            popupNav.classList.remove(CLS_TBARNAVACT);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(popIcon, [CLS_POPUPDOWN], [CLS_POPUPICON]);
            this.tbarPopupHandler(false);
          }
        }, {
          key: "checkPriority",
          value: function checkPriority(ele, inEle, eleWidth, pre) {
            var popPriority = this.popupPriCount > 0;
            var len = inEle.length;
            var eleWid = eleWidth;
            var eleOffset;
            var checkoffset;
            var sepCheck = 0;
            var itemCount = 0;
            var itemPopCount = 0;

            var checkClass = function checkClass(ele, val) {
              var rVal = false;
              val.forEach(function (cls) {
                if (ele.classList.contains(cls)) {
                  rVal = true;
                }
              });
              return rVal;
            };

            for (var i = len - 1; i >= 0; i--) {
              var mrgn = void 0;
              var compuStyle = window.getComputedStyle(inEle[i]);

              if (this.isVertical) {
                mrgn = parseFloat(compuStyle.marginTop);
                mrgn += parseFloat(compuStyle.marginBottom);
              } else {
                mrgn = parseFloat(compuStyle.marginRight);
                mrgn += parseFloat(compuStyle.marginLeft);
              }

              var fstEleCheck = inEle[i] === this.tbarEle[0];

              if (fstEleCheck) {
                this.tbarEleMrgn = mrgn;
              }

              eleOffset = this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth;

              var _eleWid = fstEleCheck ? eleOffset + mrgn : eleOffset;

              if (checkClass(inEle[i], [CLS_POPPRI]) && popPriority) {
                inEle[i].classList.add(CLS_POPUP);

                if (this.isVertical) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(inEle[i], {
                    display: 'none',
                    minHeight: _eleWid + 'px'
                  });
                } else {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(inEle[i], {
                    display: 'none',
                    minWidth: _eleWid + 'px'
                  });
                }

                itemPopCount++;
              }

              if (this.isVertical) {
                checkoffset = inEle[i].offsetTop + inEle[i].offsetHeight + mrgn > eleWidth;
              } else {
                checkoffset = inEle[i].offsetLeft + inEle[i].offsetWidth + mrgn > eleWidth;
              }

              if (checkoffset) {
                if (inEle[i].classList.contains(CLS_SEPARATOR)) {
                  if (this.overflowMode === 'Extended') {
                    if (itemCount === itemPopCount) {
                      var sepEle = inEle[i];

                      if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                        inEle[i].classList.add(CLS_POPUP);
                        itemPopCount++;
                      }
                    }

                    itemCount++;
                  } else if (this.overflowMode === 'Popup') {
                    if (sepCheck > 0 && itemCount === itemPopCount) {
                      var _sepEle = inEle[i + itemCount + (sepCheck - 1)];

                      if (checkClass(_sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(_sepEle, {
                          display: 'none'
                        });
                      }
                    }

                    sepCheck++;
                    itemCount = 0;
                    itemPopCount = 0;
                  }
                } else {
                  itemCount++;
                }

                if (inEle[i].classList.contains(CLS_TBAROVERFLOW) && pre) {
                  eleWidth -= (this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth) + mrgn;
                } else if (!checkClass(inEle[i], [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                  inEle[i].classList.add(CLS_POPUP);

                  if (this.isVertical) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(inEle[i], {
                      display: 'none',
                      minHeight: _eleWid + 'px'
                    });
                  } else {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(inEle[i], {
                      display: 'none',
                      minWidth: _eleWid + 'px'
                    });
                  }

                  itemPopCount++;
                } else {
                  eleWidth -= (this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth) + mrgn;
                }
              }
            }

            if (pre) {
              var popedEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM + ':not(.' + CLS_POPUP + ')', this.element);
              this.checkPriority(ele, popedEle, eleWid, false);
            }
          }
        }, {
          key: "createPopupIcon",
          value: function createPopupIcon(element) {
            var id = element.id.concat('_nav');
            var className = 'e-' + element.id.concat('_nav ' + CLS_POPUPNAV);
            className = this.overflowMode === 'Extended' ? className + ' ' + CLS_EXTENDPOPUP : className;
            var nav = this.createElement('div', {
              id: id,
              className: className
            });

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'edge') {
              nav.classList.add('e-ie-align');
            }

            var navItem = this.createElement('div', {
              className: CLS_POPUPDOWN + ' e-icons'
            });
            nav.appendChild(navItem);
            nav.setAttribute('tabindex', '0');
            nav.setAttribute('role', 'list');
            element.appendChild(nav);
          }
        }, {
          key: "tbarPriRef",
          value: function tbarPriRef(inEle, indx, sepPri, el, des, elWid, wid, ig) {
            var ignoreCount = ig;
            var popEle = this.popObj.element;
            var query = '.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_TBAROVERFLOW + ')';
            var priEleCnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_POPUP + ':not(.' + CLS_TBAROVERFLOW + ')', popEle).length;

            var checkClass = function checkClass(ele, val) {
              return ele.classList.contains(val);
            };

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(query, inEle).length === 0) {
              var eleSep = inEle.children[indx - (indx - sepPri) - 1];
              var ignoreCheck = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eleSep) && checkClass(eleSep, CLS_TBARIGNORE);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eleSep) && checkClass(eleSep, CLS_SEPARATOR) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(eleSep) || ignoreCheck) {
                var sepDisplay = 'none';
                eleSep.style.display = 'inherit';
                var eleSepWidth = eleSep.offsetWidth + parseFloat(window.getComputedStyle(eleSep).marginRight) * 2;
                var prevSep = eleSep.previousElementSibling;

                if (elWid + eleSepWidth < wid || des) {
                  inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(prevSep)) {
                    prevSep.style.display = '';
                  }
                } else {
                  if (prevSep.classList.contains(CLS_SEPARATOR)) {
                    prevSep.style.display = sepDisplay;
                  }
                }

                eleSep.style.display = '';
              } else {
                inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);
              }
            } else {
              inEle.insertBefore(el, inEle.children[indx + ignoreCount - priEleCnt]);
            }
          }
        }, {
          key: "popupRefresh",
          value: function popupRefresh(popupEle, destroy) {
            var _this47 = this;

            var ele = this.element;
            var isVer = this.isVertical;
            var popNav = ele.querySelector('.' + CLS_TBARNAV);
            var innerEle = ele.querySelector('.' + CLS_ITEMS);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(popNav)) {
              return;
            }

            innerEle.removeAttribute('style');
            popupEle.style.display = 'block';
            var dimension;

            if (isVer) {
              dimension = ele.offsetHeight - (popNav.offsetHeight + innerEle.offsetHeight);
            } else {
              dimension = ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth);
            }

            var popupEleWidth = 0;
            [].slice.call(popupEle.children).forEach(function (el) {
              popupEleWidth += _this47.popupEleWidth(el);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(el, {
                'position': ''
              });
            });

            if (dimension + (isVer ? popNav.offsetHeight : popNav.offsetWidth) > popupEleWidth && this.popupPriCount === 0) {
              destroy = true;
            }

            this.popupEleRefresh(dimension, popupEle, destroy);
            popupEle.style.display = '';

            if (popupEle.children.length === 0 && popNav && this.popObj) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(popNav);
              popNav = null;
              this.popObj.destroy();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.popObj.element);
              this.popObj = null;
              ele.setAttribute('aria-haspopup', 'false');
            }
          }
        }, {
          key: "ignoreEleFetch",
          value: function ignoreEleFetch(index, innerEle) {
            var ignoreEle = [].slice.call(innerEle.querySelectorAll('.' + CLS_TBARIGNORE));
            var ignoreInx = [];
            var count = 0;

            if (ignoreEle.length > 0) {
              ignoreEle.forEach(function (ele) {
                ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));
              });
            } else {
              return 0;
            }

            ignoreInx.forEach(function (val) {
              if (val <= index) {
                count++;
              }
            });
            return count;
          }
        }, {
          key: "checkPopupRefresh",
          value: function checkPopupRefresh(root, popEle) {
            popEle.style.display = 'block';
            var elWid = this.popupEleWidth(popEle.firstElementChild);
            popEle.firstElementChild.style.removeProperty('Position');
            var tbarWidth = root.offsetWidth - root.querySelector('.' + CLS_TBARNAV).offsetWidth;
            var tbarItemsWid = root.querySelector('.' + CLS_ITEMS).offsetWidth;
            popEle.style.removeProperty('display');

            if (tbarWidth > elWid + tbarItemsWid) {
              return true;
            }

            return false;
          }
        }, {
          key: "popupEleWidth",
          value: function popupEleWidth(el) {
            el.style.position = 'absolute';
            var elWidth = this.isVertical ? el.offsetHeight : el.offsetWidth;
            var btnText = el.querySelector('.' + CLS_TBARBTNTEXT);

            if (el.classList.contains('e-tbtn-align') || el.classList.contains(CLS_TBARTEXT)) {
              var btn = el.children[0];

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(btnText) && el.classList.contains(CLS_TBARTEXT)) {
                btnText.style.display = 'none';
              } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(btnText) && el.classList.contains(CLS_POPUPTEXT)) {
                btnText.style.display = 'block';
              }

              btn.style.minWidth = '0%';
              elWidth = parseFloat(!this.isVertical ? el.style.minWidth : el.style.minHeight);
              btn.style.minWidth = '';
              btn.style.minHeight = '';

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(btnText)) {
                btnText.style.display = '';
              }
            }

            return elWidth;
          }
        }, {
          key: "popupEleRefresh",
          value: function popupEleRefresh(width, popupEle, destroy) {
            var _this48 = this;

            var popPriority = this.popupPriCount > 0;
            var eleSplice = this.tbarEle;
            var priEleCnt;
            var index;
            var checkOverflow;
            var innerEle = this.element.querySelector('.' + CLS_ITEMS);
            var ignoreCount = 0;

            var _iterator40 = _createForOfIteratorHelper([].slice.call(popupEle.children)),
                _step40;

            try {
              for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
                var el = _step40.value;

                if (el.classList.contains(CLS_POPPRI) && popPriority && !destroy) {
                  continue;
                }

                var elWidth = this.popupEleWidth(el);

                if (el === this.tbarEle[0]) {
                  elWidth += this.tbarEleMrgn;
                }

                el.style.position = '';

                if (elWidth < width || destroy) {
                  (function () {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(el, {
                      minWidth: '',
                      height: '',
                      minHeight: ''
                    });

                    if (!el.classList.contains(CLS_POPOVERFLOW)) {
                      el.classList.remove(CLS_POPUP);
                    }

                    index = _this48.tbarEle.indexOf(el);

                    if (_this48.tbarAlign) {
                      var pos = _this48.items[index].align;
                      index = _this48.tbarAlgEle[(pos + 's').toLowerCase()].indexOf(el);
                      eleSplice = _this48.tbarAlgEle[(pos + 's').toLowerCase()];
                      innerEle = _this48.element.querySelector('.' + CLS_ITEMS + ' .' + 'e-toolbar-' + pos.toLowerCase());
                    }

                    var sepBeforePri = 0;

                    if (_this48.overflowMode !== 'Extended') {
                      eleSplice.slice(0, index).forEach(function (el) {
                        if (el.classList.contains(CLS_TBAROVERFLOW) || el.classList.contains(CLS_SEPARATOR)) {
                          if (el.classList.contains(CLS_SEPARATOR)) {
                            el.style.display = '';
                            width -= el.offsetWidth;
                          }

                          sepBeforePri++;
                        }
                      });
                    }

                    ignoreCount = _this48.ignoreEleFetch(index, innerEle);

                    if (el.classList.contains(CLS_TBAROVERFLOW)) {
                      _this48.tbarPriRef(innerEle, index, sepBeforePri, el, destroy, elWidth, width, ignoreCount);

                      width -= el.offsetWidth;
                    } else if (index === 0) {
                      innerEle.insertBefore(el, innerEle.firstChild);
                      width -= el.offsetWidth;
                    } else {
                      priEleCnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TBAROVERFLOW, _this48.popObj.element).length;
                      innerEle.insertBefore(el, innerEle.children[index + ignoreCount - priEleCnt]);
                      width -= el.offsetWidth;
                    }

                    el.style.height = '';
                  })();
                } else {
                  break;
                }
              }
            } catch (err) {
              _iterator40.e(err);
            } finally {
              _iterator40.f();
            }

            checkOverflow = this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS)[0]);

            if (checkOverflow && !destroy) {
              this.renderOverflowMode();
            }
          }
        }, {
          key: "removePositioning",
          value: function removePositioning() {
            var item = this.element.querySelector('.' + CLS_ITEMS);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item) || !item.classList.contains(CLS_TBARPOS)) {
              return;
            }

            this.remove(item, CLS_TBARPOS);
            var innerItem = [].slice.call(item.childNodes);
            innerItem[1].removeAttribute('style');
            innerItem[2].removeAttribute('style');
          }
        }, {
          key: "refreshPositioning",
          value: function refreshPositioning() {
            var item = this.element.querySelector('.' + CLS_ITEMS);
            this.add(item, CLS_TBARPOS);
            this.itemPositioning();
          }
        }, {
          key: "itemPositioning",
          value: function itemPositioning() {
            var item = this.element.querySelector('.' + CLS_ITEMS);
            var margin;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item) || !item.classList.contains(CLS_TBARPOS)) {
              return;
            }

            var popupNav = this.element.querySelector('.' + CLS_TBARNAV);
            var innerItem;

            if (this.scrollModule) {
              var trgClass = this.isVertical ? CLS_VSCROLLCNT : CLS_HSCROLLCNT;
              innerItem = [].slice.call(item.querySelector('.' + trgClass).children);
            } else {
              innerItem = [].slice.call(item.childNodes);
            }

            if (this.isVertical) {
              margin = innerItem[0].offsetHeight + innerItem[2].offsetHeight;
            } else {
              margin = innerItem[0].offsetWidth + innerItem[2].offsetWidth;
            }

            var tbarWid = this.isVertical ? this.element.offsetHeight : this.element.offsetWidth;

            if (popupNav) {
              tbarWid -= this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth;
              var popWid = (this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth) + 'px';
              innerItem[2].removeAttribute('style');

              if (this.isVertical) {
                this.enableRtl ? innerItem[2].style.top = popWid : innerItem[2].style.bottom = popWid;
              } else {
                this.enableRtl ? innerItem[2].style.left = popWid : innerItem[2].style.right = popWid;
              }
            }

            if (tbarWid <= margin) {
              return;
            }

            var value = (tbarWid - margin - (!this.isVertical ? innerItem[1].offsetWidth : innerItem[1].offsetHeight)) / 2;
            innerItem[1].removeAttribute('style');
            var mrgn = (!this.isVertical ? innerItem[0].offsetWidth : innerItem[0].offsetHeight) + value + 'px';

            if (this.isVertical) {
              this.enableRtl ? innerItem[1].style.marginBottom = mrgn : innerItem[1].style.marginTop = mrgn;
            } else {
              this.enableRtl ? innerItem[1].style.marginRight = mrgn : innerItem[1].style.marginLeft = mrgn;
            }
          }
        }, {
          key: "tbarItemAlign",
          value: function tbarItemAlign(item, itemEle, pos) {
            var _this49 = this;

            if (item.showAlwaysInPopup && item.overflow !== 'Show') {
              return;
            }

            var alignDiv = [];
            alignDiv.push(this.createElement('div', {
              className: CLS_TBARLEFT
            }));
            alignDiv.push(this.createElement('div', {
              className: CLS_TBARCENTER
            }));
            alignDiv.push(this.createElement('div', {
              className: CLS_TBARRIGHT
            }));

            if (pos === 0 && item.align !== 'Left') {
              alignDiv.forEach(function (ele) {
                itemEle.appendChild(ele);
              });
              this.tbarAlign = true;
              this.add(itemEle, CLS_TBARPOS);
            } else if (item.align !== 'Left') {
              var alignEle = itemEle.childNodes;
              var leftAlign = alignDiv[0];
              [].slice.call(alignEle).forEach(function (el) {
                _this49.tbarAlgEle.lefts.push(el);

                leftAlign.appendChild(el);
              });
              itemEle.appendChild(leftAlign);
              itemEle.appendChild(alignDiv[1]);
              itemEle.appendChild(alignDiv[2]);
              this.tbarAlign = true;
              this.add(itemEle, CLS_TBARPOS);
            }
          }
        }, {
          key: "ctrlTemplate",
          value: function ctrlTemplate() {
            var _this50 = this;

            this.ctrlTem = this.trgtEle.cloneNode(true);
            this.add(this.trgtEle, CLS_ITEMS);
            this.tbarEle = [];
            var innerEle = [].slice.call(this.trgtEle.children);
            innerEle.forEach(function (ele) {
              if (ele.tagName === 'DIV') {
                _this50.tbarEle.push(ele);

                ele.setAttribute('aria-disabled', 'false');

                _this50.add(ele, CLS_ITEM);
              }
            });
          }
        }, {
          key: "renderItems",
          value: function renderItems() {
            var ele = this.element;
            var items = this.items;

            if (this.trgtEle != null) {
              this.ctrlTemplate();
            } else if (ele && items.length > 0) {
              var itemEleDom;

              if (ele && ele.children.length > 0) {
                itemEleDom = ele.querySelector('.' + CLS_ITEMS);
              }

              if (!itemEleDom) {
                itemEleDom = this.createElement('div', {
                  className: CLS_ITEMS
                });
              }

              this.itemsAlign(items, itemEleDom);
              ele.appendChild(itemEleDom);
            }
          }
        }, {
          key: "setAttr",
          value: function setAttr(attr, element) {
            var key = Object.keys(attr);
            var keyVal;

            for (var i = 0; i < key.length; i++) {
              keyVal = key[i];
              keyVal === 'class' ? this.add(element, attr[keyVal]) : element.setAttribute(keyVal, attr[keyVal]);
            }
          }
          /**
           * Enables or disables the specified Toolbar item.
           * @param  {number|HTMLElement|NodeList} items - DOM element or an array of items to be enabled or disabled.
           * @param  {boolean} isEnable  - Boolean value that determines whether the command should be enabled or disabled.
           * By default, `isEnable` is set to true.
           * @returns void.
           */

        }, {
          key: "enableItems",
          value: function enableItems(items, isEnable) {
            var elements = items;
            var len = elements.length;
            var ele;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(isEnable)) {
              isEnable = true;
            }

            var enable = function enable(isEnable, ele) {
              if (isEnable) {
                ele.classList.remove(CLS_DISABLE$2);
                ele.setAttribute('aria-disabled', 'false');
              } else {
                ele.classList.add(CLS_DISABLE$2);
                ele.setAttribute('aria-disabled', 'true');
              }
            };

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(len) && len >= 1) {
              for (var a = 0, element = [].slice.call(elements); a < len; a++) {
                var itemElement = element[a];

                if (typeof itemElement === 'number') {
                  ele = this.getElementByIndex(itemElement);

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
                    return;
                  } else {
                    elements[a] = ele;
                  }
                } else {
                  ele = itemElement;
                }

                enable(isEnable, ele);
              }

              isEnable ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(elements, CLS_DISABLE$2) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(elements, CLS_DISABLE$2);
            } else {
              if (typeof elements === 'number') {
                ele = this.getElementByIndex(elements);

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
                  return;
                }
              } else {
                ele = items;
              }

              enable(isEnable, ele);
            }
          }
        }, {
          key: "getElementByIndex",
          value: function getElementByIndex(index) {
            if (this.tbarEle[index]) {
              return this.tbarEle[index];
            }

            return null;
          }
          /**
           * Adds new items to the Toolbar that accepts an array as Toolbar items.
           * @param  {ItemsModel[]} items - DOM element or an array of items to be added to the Toolbar.
           * @param  {number} index - Number value that determines where the command is to be added. By default, index is 0.
           * @returns void.
           * @deprecated
           */

        }, {
          key: "addItems",
          value: function addItems(items, index) {
            var innerItems;
            this.extendedOpen();
            var itemsDiv = this.element.querySelector('.' + CLS_ITEMS);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(itemsDiv)) {
              this.itemsRerender(items);
              return;
            }

            var innerEle;
            var itemAgn = 'Left';

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
              index = 0;
            }

            items.forEach(function (e) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e.align) && e.align !== 'Left' && itemAgn === 'Left') {
                itemAgn = e.align;
              }
            });

            var _iterator41 = _createForOfIteratorHelper(items),
                _step41;

            try {
              for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
                var item = _step41.value;

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.type)) {
                  item.type = 'Button';
                }

                innerItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, this.element);
                item.align = itemAgn;
                innerEle = this.renderSubComponent(item, index);

                if (this.tbarEle.length >= index && innerItems.length >= 0) {
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.scrollModule)) {
                    this.destroyMode();
                  }

                  var algIndex = item.align[0] === 'L' ? 0 : item.align[0] === 'C' ? 1 : 2;
                  var ele = void 0;

                  if (!this.tbarAlign && itemAgn !== 'Left') {
                    this.tbarItemAlign(item, itemsDiv, 1);
                    this.tbarAlign = true;
                    ele = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(innerItems[0], '.' + CLS_ITEMS).children[algIndex];
                    ele.appendChild(innerEle);
                    this.tbarAlgEle[(item.align + 's').toLowerCase()].push(innerEle);
                    this.refreshPositioning();
                  } else if (this.tbarAlign) {
                    ele = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(innerItems[0], '.' + CLS_ITEMS).children[algIndex];
                    ele.insertBefore(innerEle, ele.children[index]);
                    this.tbarAlgEle[(item.align + 's').toLowerCase()].splice(index, 0, innerEle);
                    this.refreshPositioning();
                  } else if (innerItems.length === 0) {
                    innerItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEMS, this.element);
                    innerItems[0].appendChild(innerEle);
                  } else {
                    innerItems[0].parentNode.insertBefore(innerEle, innerItems[index]);
                  }

                  this.items.splice(index, 0, item);
                  this.tbarEle.splice(index, 0, innerEle);
                  index++;
                  this.offsetWid = itemsDiv.offsetWidth;
                }
              }
            } catch (err) {
              _iterator41.e(err);
            } finally {
              _iterator41.f();
            }

            itemsDiv.style.width = '';
            this.renderOverflowMode();
          }
          /**
           * Removes the items from the Toolbar. Acceptable arguments are index of item/HTMLElement/node list.
           * @param  {number|HTMLElement|NodeList|HTMLElement[]} args
           * Index or DOM element or an Array of item which is to be removed from the Toolbar.
           * @returns void.
           * @deprecated
           */

        }, {
          key: "removeItems",
          value: function removeItems(args) {
            var elements = args;
            var index;
            var innerItems = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, this.element));

            if (typeof elements === 'number') {
              index = parseInt(args.toString(), 10);
              this.removeItemByIndex(index, innerItems);
            } else {
              if (elements && elements.length > 1) {
                var _iterator42 = _createForOfIteratorHelper([].slice.call(elements)),
                    _step42;

                try {
                  for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
                    var ele = _step42.value;
                    index = this.tbarEle.indexOf(ele);
                    this.removeItemByIndex(index, innerItems);
                    innerItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, this.element);
                  }
                } catch (err) {
                  _iterator42.e(err);
                } finally {
                  _iterator42.f();
                }
              } else {
                var _ele5 = elements && elements.length && elements.length === 1 ? elements[0] : args;

                index = innerItems.indexOf(_ele5);
                this.removeItemByIndex(index, innerItems);
              }
            }

            this.resize();
          }
        }, {
          key: "removeItemByIndex",
          value: function removeItemByIndex(index, innerItems) {
            if (this.tbarEle[index] && innerItems[index]) {
              var eleIdx = this.tbarEle.indexOf(innerItems[index]);

              if (this.tbarAlign) {
                var indexAgn;
                indexAgn = this.tbarAlgEle[(this.items[eleIdx].align + 's').toLowerCase()].indexOf(this.tbarEle[eleIdx]);
                this.tbarAlgEle[(this.items[eleIdx].align + 's').toLowerCase()].splice(indexAgn, 1);
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(innerItems[index]);
              this.items.splice(eleIdx, 1);
              this.tbarEle.splice(eleIdx, 1);
            }
          }
        }, {
          key: "templateRender",
          value: function templateRender(templateProp, innerEle, item, index) {
            var itemType = item.type;
            var eleObj = templateProp;
            var isComponent;

            if (typeof templateProp === 'object') {
              isComponent = typeof eleObj.appendTo === 'function';
            }

            if (typeof templateProp === 'string' || !isComponent) {
              var templateFn;
              var val = templateProp;
              val = typeof templateProp === 'string' ? templateProp.trim() : templateProp;

              try {
                if (typeof templateProp === 'object' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(templateProp.tagName)) {
                  innerEle.appendChild(templateProp);
                } else if (document.querySelectorAll(val).length) {
                  var ele = document.querySelector(val);
                  var tempStr = ele.outerHTML.trim();
                  innerEle.appendChild(ele);
                  ele.style.display = '';

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tempStr)) {
                    this.tempId.push(val);
                  }
                }
              } catch (e) {
                templateFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(val);
              }

              var tempArray;

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(templateFn)) {
                var toolbarTemplateID = this.element.id + index + '_template';
                tempArray = templateFn({}, this, 'template', toolbarTemplateID, this.isStringTemplate);
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tempArray) && tempArray.length > 0) {
                [].slice.call(tempArray).forEach(function (ele) {
                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele.tagName)) {
                    ele.style.display = '';
                  }

                  innerEle.appendChild(ele);
                });
              }
            } else if (itemType === 'Input') {
              var _ele6 = this.createElement('input');

              item.id ? _ele6.id = item.id : _ele6.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('tbr-ipt');
              innerEle.appendChild(_ele6);
              eleObj.appendTo(_ele6);
            }

            this.add(innerEle, CLS_TEMPLATE);
            this.tbarEle.push(innerEle);
          }
        }, {
          key: "buttonRendering",
          value: function buttonRendering(item, innerEle) {
            var dom = this.createElement('button', {
              className: CLS_TBARBTN
            });
            dom.setAttribute('type', 'button');
            var textStr = item.text;
            var iconCss;
            var iconPos;
            item.id ? dom.id = item.id : dom.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('e-tbr-btn');
            var btnTxt = this.createElement('span', {
              className: 'e-tbar-btn-text'
            });

            if (textStr) {
              btnTxt.innerHTML = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(textStr) : textStr;
              dom.appendChild(btnTxt);
              dom.classList.add('e-tbtn-txt');
            } else {
              this.add(innerEle, 'e-tbtn-align');
            }

            if (item.prefixIcon || item.suffixIcon) {
              if (item.prefixIcon && item.suffixIcon || item.prefixIcon) {
                iconCss = item.prefixIcon + ' e-icons';
                iconPos = 'Left';
              } else {
                iconCss = item.suffixIcon + ' e-icons';
                iconPos = 'Right';
              }
            }

            var btnObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_3__["Button"]({
              iconCss: iconCss,
              iconPosition: iconPos
            });
            btnObj.createElement = this.createElement;
            btnObj.appendTo(dom);

            if (item.width) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(dom, {
                'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(item.width)
              });
            }

            return dom;
          }
        }, {
          key: "renderSubComponent",
          value: function renderSubComponent(item, index) {
            var innerEle;
            var dom;
            innerEle = this.createElement('div', {
              className: CLS_ITEM
            });
            innerEle.setAttribute('aria-disabled', 'false');
            var tempDom = this.createElement('div', {
              innerHTML: this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(item.tooltipText) : item.tooltipText
            });

            if (!this.tbarEle) {
              this.tbarEle = [];
            }

            if (item.htmlAttributes) {
              this.setAttr(item.htmlAttributes, innerEle);
            }

            if (item.tooltipText) {
              innerEle.setAttribute('title', tempDom.textContent);
            }

            if (item.cssClass) {
              innerEle.className = innerEle.className + ' ' + item.cssClass;
            }

            if (item.template) {
              this.templateRender(item.template, innerEle, item, index);
            } else {
              switch (item.type) {
                case 'Button':
                  dom = this.buttonRendering(item, innerEle);
                  dom.setAttribute('tabindex', '-1');
                  dom.setAttribute('aria-label', item.text || item.tooltipText);
                  innerEle.appendChild(dom);
                  innerEle.addEventListener('click', this.itemClick.bind(this));
                  break;

                case 'Separator':
                  this.add(innerEle, CLS_SEPARATOR);
                  break;
              }
            }

            if (item.showTextOn) {
              var sTxt = item.showTextOn;

              if (sTxt === 'Toolbar') {
                this.add(innerEle, CLS_POPUPTEXT);
                this.add(innerEle, 'e-tbtn-align');
              } else if (sTxt === 'Overflow') {
                this.add(innerEle, CLS_TBARTEXT);
              }
            }

            if (item.overflow) {
              var overflow = item.overflow;

              if (overflow === 'Show') {
                this.add(innerEle, CLS_TBAROVERFLOW);
              } else if (overflow === 'Hide') {
                if (!innerEle.classList.contains(CLS_SEPARATOR)) {
                  this.add(innerEle, CLS_POPOVERFLOW);
                }
              }
            }

            if (item.overflow !== 'Show' && item.showAlwaysInPopup && !innerEle.classList.contains(CLS_SEPARATOR)) {
              this.add(innerEle, CLS_POPPRI);
              this.popupPriCount++;
            }

            if (item.disabled) {
              this.add(innerEle, CLS_DISABLE$2);
            }

            if (item.visible === false) {
              this.add(innerEle, CLS_HIDDEN);
            }

            return innerEle;
          }
        }, {
          key: "itemClick",
          value: function itemClick(e) {
            this.activeEleSwitch(e.currentTarget);
          }
        }, {
          key: "activeEleSwitch",
          value: function activeEleSwitch(ele) {
            this.activeEleRemove(ele.firstElementChild);
            this.activeEle.focus();
          }
        }, {
          key: "activeEleRemove",
          value: function activeEleRemove(curEle) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.activeEle)) {
              this.activeEle.setAttribute('tabindex', '-1');
            }

            this.activeEle = curEle;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.trgtEle) && !curEle.parentElement.classList.contains(CLS_TEMPLATE)) {
              curEle.removeAttribute('tabindex');
            } else {
              this.activeEle.setAttribute('tabindex', '0');
            }
          }
        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist([]);
          }
          /**
           * Returns the current module name.
           * @returns string
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'toolbar';
          }
        }, {
          key: "itemsRerender",
          value: function itemsRerender(newProp) {
            this.items = this.tbarItemsCol;
            this.destroyMode();
            this.destroyItems();
            this.items = newProp;
            this.tbarItemsCol = this.items;
            this.renderItems();
            this.renderOverflowMode();
          }
        }, {
          key: "resize",
          value: function resize() {
            var ele = this.element;
            this.tbResize = true;

            if (this.tbarAlign) {
              this.itemPositioning();
            }

            if (this.popObj && this.overflowMode === 'Popup') {
              this.popObj.hide();
            }

            var checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS)[0]);

            if (!checkOverflow) {
              this.destroyScroll();
              var multirowele = ele.querySelector('.' + CLS_ITEMS);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(multirowele)) {
                this.remove(multirowele, CLS_MULTIROWPOS);

                if (this.tbarAlign) {
                  this.add(multirowele, CLS_TBARPOS);
                }
              }
            }

            if (checkOverflow && this.scrollModule && this.offsetWid === ele.offsetWidth) {
              return;
            }

            if (this.offsetWid > ele.offsetWidth || checkOverflow) {
              this.renderOverflowMode();
            }

            if (this.popObj) {
              if (this.overflowMode === 'Extended') {
                var eleStyles = window.getComputedStyle(this.element);
                this.popObj.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;
              }

              if (this.tbarAlign) {
                this.removePositioning();
              }

              this.popupRefresh(this.popObj.element, false);

              if (this.tbarAlign) {
                this.refreshPositioning();
              }
            }

            if (this.element.querySelector('.' + CLS_HSCROLLBAR$1)) {
              this.scrollStep = this.element.querySelector('.' + CLS_HSCROLLBAR$1).offsetWidth;
            }

            this.offsetWid = ele.offsetWidth;
            this.tbResize = false;
            this.separator();
          }
        }, {
          key: "extendedOpen",
          value: function extendedOpen() {
            var sib = this.element.querySelector('.' + CLS_EXTENDABLECLASS);

            if (this.overflowMode === 'Extended' && sib) {
              this.isExtendedOpen = sib.classList.contains(CLS_POPUPOPEN);
            }
          }
          /**
           * Gets called when the model property changes.The data that describes the old and new values of the property that changed.
           * @param  {ToolbarModel} newProp
           * @param  {ToolbarModel} oldProp
           * @returns void
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var tEle = this.element;
            this.extendedOpen();

            for (var _i19 = 0, _Object$keys6 = Object.keys(newProp); _i19 < _Object$keys6.length; _i19++) {
              var prop = _Object$keys6[_i19];

              switch (prop) {
                case 'items':
                  if (!(newProp.items instanceof Array && oldProp.items instanceof Array) && !this.isServerRendered) {
                    var changedProb = Object.keys(newProp.items);

                    for (var i = 0; i < changedProb.length; i++) {
                      var index = parseInt(Object.keys(newProp.items)[i], 10);
                      var property = Object.keys(newProp.items[index])[0];
                      var newProperty = Object(newProp.items[index])[property];

                      if (this.tbarAlign || property === 'align') {
                        this.refresh();
                        this.trigger('created');
                        break;
                      }

                      var popupPriCheck = property === 'showAlwaysInPopup' && !newProperty;
                      var booleanCheck = property === 'overflow' && this.popupPriCount !== 0;

                      if (popupPriCheck || this.items[index].showAlwaysInPopup && booleanCheck) {
                        --this.popupPriCount;
                      }

                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.scrollModule)) {
                        this.destroyMode();
                      }

                      var itemCol = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEMS + ' .' + CLS_ITEM, tEle));
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(itemCol[index]);
                      this.tbarEle.splice(index, 1);
                      this.addItems([this.items[index]], index);
                      this.items.splice(index, 1);

                      if (this.items[index].template) {
                        this.tbarEle.splice(this.items.length, 1);
                      }
                    }
                  } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                    this.serverItemsRerender();
                    this.notify('onItemsChanged', {});
                  } else {
                    this.itemsRerender(newProp.items);
                  }

                  break;

                case 'width':
                  var wid = tEle.offsetWidth;
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(tEle, {
                    'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.width)
                  });
                  this.renderOverflowMode();

                  if (this.popObj && wid < tEle.offsetWidth) {
                    this.popupRefresh(this.popObj.element, false);
                  }

                  break;

                case 'height':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                    'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.height)
                  });
                  break;

                case 'overflowMode':
                  this.destroyMode();
                  this.renderOverflowMode();

                  if (this.enableRtl) {
                    this.add(tEle, CLS_RTL$2);
                  }

                  this.refreshOverflow();
                  break;

                case 'enableRtl':
                  newProp.enableRtl ? this.add(tEle, CLS_RTL$2) : this.remove(tEle, CLS_RTL$2);

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.scrollModule)) {
                    newProp.enableRtl ? this.add(this.scrollModule.element, CLS_RTL$2) : this.remove(this.scrollModule.element, CLS_RTL$2);
                  }

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popObj)) {
                    newProp.enableRtl ? this.add(this.popObj.element, CLS_RTL$2) : this.remove(this.popObj.element, CLS_RTL$2);
                  }

                  if (this.tbarAlign) {
                    this.itemPositioning();
                  }

                  break;

                case 'scrollStep':
                  if (this.scrollModule) {
                    this.scrollModule.scrollStep = this.scrollStep;
                  }

                  break;

                case 'enableCollision':
                  if (this.popObj) {
                    this.popObj.collision = {
                      Y: this.enableCollision ? 'flip' : 'none'
                    };
                  }

                  break;

                case 'cssClass':
                  if (oldProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldProp.cssClass.split(' '));
                  }

                  if (newProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], newProp.cssClass.split(' '));
                  }

                  break;

                case 'allowKeyboard':
                  this.unwireKeyboardEvent();

                  if (newProp.allowKeyboard) {
                    this.wireKeyboardEvent();
                  }

                  break;
              }
            }
          }
          /**
           * Shows or hides the Toolbar item that is in the specified index.
           * @param  {number | HTMLElement} index - Index value of target item or DOM element  of items to be hidden or shown.
           * @param  {boolean} value - Based on this Boolean value, item will be hide (true) or show (false). By default, value is false.
           * @returns void.
           */

        }, {
          key: "hideItem",
          value: function hideItem(index, value) {
            var isElement = typeof index === 'object' ? true : false;
            var eleIndex = index;
            var initIndex;
            var ele;
            var innerItems = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, this.element));

            if (isElement) {
              ele = index;
            } else if (this.tbarEle[eleIndex]) {
              var _innerItems = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, this.element));

              ele = _innerItems[eleIndex];
            }

            if (ele) {
              value ? ele.classList.add(CLS_HIDDEN) : ele.classList.remove(CLS_HIDDEN);

              if (value && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute('tabindex')) && !ele.classList.contains(CLS_SEPARATOR)) {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele.firstElementChild.getAttribute('tabindex'))) {
                  ele.firstElementChild.setAttribute('tabindex', '-1');

                  var _innerItems2 = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM, this.element));

                  if (isElement) {
                    eleIndex = _innerItems2.indexOf(ele);
                  }

                  var nextEle = _innerItems2[++eleIndex];

                  while (nextEle) {
                    var skipEle = this.eleContains(nextEle);

                    if (!skipEle) {
                      nextEle.firstElementChild.removeAttribute('tabindex');
                      break;
                    }

                    nextEle = _innerItems2[++eleIndex];
                  }
                }
              } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute('tabindex')) && !ele.classList.contains(CLS_SEPARATOR)) {
                initIndex = 0;
                var setFlag = false;
                var removeFlag = false;
                var initELe = innerItems[initIndex];

                while (initELe) {
                  if (!initELe.classList.contains(CLS_SEPARATOR)) {
                    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(initELe.firstElementChild.getAttribute('tabindex'))) {
                      initELe.firstElementChild.setAttribute('tabindex', '-1');
                      setFlag = true;
                    } else {
                      if (setFlag && removeFlag) {
                        break;
                      }

                      var _skipEle = this.eleContains(initELe);

                      if (!_skipEle) {
                        initELe.firstElementChild.removeAttribute('tabindex');
                        removeFlag = true;
                      }

                      initELe = innerItems[++initIndex];
                    }
                  } else {
                    initELe = innerItems[++initIndex];
                  }
                }
              }

              this.refreshOverflow();
            }
          }
        }]);

        return Toolbar;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], Item)], Toolbar.prototype, "items", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Toolbar.prototype, "width", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Toolbar.prototype, "height", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Toolbar.prototype, "cssClass", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Scrollable')], Toolbar.prototype, "overflowMode", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Toolbar.prototype, "scrollStep", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Toolbar.prototype, "enableCollision", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Toolbar.prototype, "enableHtmlSanitizer", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Toolbar.prototype, "allowKeyboard", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Toolbar.prototype, "clicked", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Toolbar.prototype, "created", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Toolbar.prototype, "destroyed", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Toolbar.prototype, "beforeCreate", void 0);

      Toolbar = __decorate$3([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Toolbar);
      /**
       * Toolbar modules
       */

      var __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var CLS_ACRDN_ROOT = 'e-acrdn-root';
      var CLS_ROOT$2 = 'e-accordion';
      var CLS_ITEM$1 = 'e-acrdn-item';
      var CLS_ITEMFOCUS = 'e-item-focus';
      var CLS_ITEMHIDE = 'e-hide';
      var CLS_HEADER = 'e-acrdn-header';
      var CLS_HEADERICN = 'e-acrdn-header-icon';
      var CLS_HEADERCTN = 'e-acrdn-header-content';
      var CLS_CONTENT = 'e-acrdn-panel';
      var CLS_CTENT = 'e-acrdn-content';
      var CLS_TOOGLEICN = 'e-toggle-icon';
      var CLS_COLLAPSEICN = 'e-tgl-collapse-icon e-icons';
      var CLS_EXPANDICN = 'e-expand-icon';
      var CLS_RTL$3 = 'e-rtl';
      var CLS_CTNHIDE = 'e-content-hide';
      var CLS_SLCT = 'e-select';
      var CLS_SLCTED = 'e-selected';
      var CLS_ACTIVE = 'e-active';
      var CLS_ANIMATE = 'e-animate';
      var CLS_DISABLE$3 = 'e-overlay';
      var CLS_TOGANIMATE = 'e-toggle-animation';
      var CLS_NEST = 'e-nested';
      var CLS_EXPANDSTATE = 'e-expand-state';
      var CLS_CONTAINER = 'e-accordion-container';
      /**
       * Objects used for configuring the Accordion expanding item action properties.
       */

      var AccordionActionSettings = /*#__PURE__*/function (_syncfusion_ej2_base_9) {
        _inherits2(AccordionActionSettings, _syncfusion_ej2_base_9);

        var _super17 = _createSuper(AccordionActionSettings);

        function AccordionActionSettings() {
          _classCallCheck2(this, AccordionActionSettings);

          return _super17.apply(this, arguments);
        }

        return AccordionActionSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('SlideDown')], AccordionActionSettings.prototype, "effect", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(400)], AccordionActionSettings.prototype, "duration", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('linear')], AccordionActionSettings.prototype, "easing", void 0);
      /**
       * Objects used for configuring the Accordion animation properties.
       */


      var AccordionAnimationSettings = /*#__PURE__*/function (_syncfusion_ej2_base_10) {
        _inherits2(AccordionAnimationSettings, _syncfusion_ej2_base_10);

        var _super18 = _createSuper(AccordionAnimationSettings);

        function AccordionAnimationSettings() {
          _classCallCheck2(this, AccordionAnimationSettings);

          return _super18.apply(this, arguments);
        }

        return AccordionAnimationSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        effect: 'SlideUp',
        duration: 400,
        easing: 'linear'
      }, AccordionActionSettings)], AccordionAnimationSettings.prototype, "collapse", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        effect: 'SlideDown',
        duration: 400,
        easing: 'linear'
      }, AccordionActionSettings)], AccordionAnimationSettings.prototype, "expand", void 0);
      /**
       * An item object that is used to configure Accordion items.
       */


      var AccordionItem = /*#__PURE__*/function (_syncfusion_ej2_base_11) {
        _inherits2(AccordionItem, _syncfusion_ej2_base_11);

        var _super19 = _createSuper(AccordionItem);

        function AccordionItem() {
          _classCallCheck2(this, AccordionItem);

          return _super19.apply(this, arguments);
        }

        return AccordionItem;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], AccordionItem.prototype, "content", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], AccordionItem.prototype, "header", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], AccordionItem.prototype, "cssClass", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], AccordionItem.prototype, "iconCss", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], AccordionItem.prototype, "expanded", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], AccordionItem.prototype, "visible", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], AccordionItem.prototype, "disabled", void 0);
      /**
       * The Accordion is a vertically collapsible content panel that displays one or more panels at a time within the available space.
       * ```html
       * <div id='accordion'/>
       * <script>
       *   var accordionObj = new Accordion();
       *   accordionObj.appendTo('#accordion');
       * </script>
       * ```
       */


      var Accordion = /*#__PURE__*/function (_syncfusion_ej2_base_12) {
        _inherits2(Accordion, _syncfusion_ej2_base_12);

        var _super20 = _createSuper(Accordion);

        /**
         * Initializes a new instance of the Accordion class.
         * @param options  - Specifies Accordion model properties as options.
         * @param element  - Specifies the element that is rendered as an Accordion.
         */
        function Accordion(options, element) {
          var _this51;

          _classCallCheck2(this, Accordion);

          _this51 = _super20.call(this, options, element);
          /**
           * Contains the keyboard configuration of the Accordion.
           */

          _this51.keyConfigs = {
            moveUp: 'uparrow',
            moveDown: 'downarrow',
            enter: 'enter',
            space: 'space',
            home: 'home',
            end: 'end'
          };
          return _this51;
        }
        /**
         * Removes the control from the DOM and also removes all its related events.
         * @returns void
         */


        _createClass2(Accordion, [{
          key: "destroy",
          value: function destroy() {
            var _this52 = this;

            var ele = this.element;

            _get2(_getPrototypeOf2(Accordion.prototype), "destroy", this).call(this);

            this.unwireEvents();
            this.isDestroy = true;
            this.restoreContent(null);
            [].slice.call(ele.children).forEach(function (el) {
              if (!el.classList.contains('blazor-template')) {
                ele.removeChild(el);
              }
            });

            if (this.trgtEle) {
              while (this.ctrlTem.firstElementChild) {
                ele.appendChild(this.ctrlTem.firstElementChild);
              }
            }

            ele.classList.remove(CLS_ACRDN_ROOT);
            ele.removeAttribute('style');
            ['aria-disabled', 'aria-multiselectable', 'role', 'data-ripple'].forEach(function (attrb) {
              _this52.element.removeAttribute(attrb);
            });

            if (!this.isNested && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isRippleEnabled"]) {
              this.removeRippleEffect();
            }
          }
        }, {
          key: "preRender",
          value: function preRender() {
            var nested = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, '.' + CLS_CONTENT);
            this.isNested = false;
            this.templateEle = [];

            if (!this.isDestroy) {
              this.isDestroy = false;
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nested)) {
              nested.classList.add(CLS_NEST);
              this.isNested = true;
            } else {
              this.element.classList.add(CLS_ACRDN_ROOT);
            }

            if (this.enableRtl) {
              this.add(this.element, CLS_RTL$3);
            }
          }
        }, {
          key: "add",
          value: function add(ele, val) {
            ele.classList.add(val);
          }
        }, {
          key: "remove",
          value: function remove(ele, val) {
            ele.classList.remove(val);
          }
          /**
           * To initialize the control rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            if (!this.isServerRendered) {
              this.initializeheaderTemplate();
              this.initializeItemTemplate();
              this.initialize();
              this.renderControl();
            } else {
              this.wireFocusEvents();
            }

            this.wireEvents();
            this.renderComplete();
          }
        }, {
          key: "initialize",
          value: function initialize() {
            var width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width);
            var height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
              'width': width,
              'height': height
            });
            var ariaAttr = {
              'aria-disabled': 'false',
              'role': 'presentation',
              'aria-multiselectable': 'true'
            };

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.initExpand)) {
              this.initExpand = [];
            }

            if (this.expandedIndices.length > 0) {
              this.initExpand = this.expandedIndices;
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, ariaAttr);

            if (this.expandMode === 'Single') {
              this.element.setAttribute('aria-multiselectable', 'false');
            }
          }
        }, {
          key: "renderControl",
          value: function renderControl() {
            this.trgtEle = this.element.children.length > 0 && !(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isStringTemplate) ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div', this.element) : null;
            this.renderItems();
            this.initItemExpand();
          }
        }, {
          key: "wireFocusEvents",
          value: function wireFocusEvents() {
            var acrdItem = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM$1));

            var _iterator43 = _createForOfIteratorHelper(acrdItem),
                _step43;

            try {
              for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
                var item = _step43.value;
                var headerEle = item.querySelector('.' + CLS_HEADER);

                if (item.childElementCount > 0 && headerEle) {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].clearEvents(headerEle);

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(headerEle, 'focus', this.focusIn, this);

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(headerEle, 'blur', this.focusOut, this);
                }
              }
            } catch (err) {
              _iterator43.e(err);
            } finally {
              _iterator43.f();
            }
          }
        }, {
          key: "unwireEvents",
          value: function unwireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.clickHandler);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.keyModule)) {
              this.keyModule.destroy();
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.clickHandler, this);

            if (!this.isNested && !this.isDestroy) {
              this.removeRippleEffect = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.element, {
                selector: '.' + CLS_HEADER
              });
            }

            if (!this.isNested) {
              this.keyModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.element, {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigs,
                eventName: 'keydown'
              });
            }
          }
        }, {
          key: "templateParser",
          value: function templateParser(template) {
            if (template) {
              try {
                if (document.querySelectorAll(template).length) {
                  return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(template).innerHTML.trim());
                }
              } catch (error) {
                return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
              }
            }

            return undefined;
          }
        }, {
          key: "initializeheaderTemplate",
          value: function initializeheaderTemplate() {
            if (this.headerTemplate) {
              this.headerTemplateFn = this.templateParser(this.headerTemplate);
            }
          }
        }, {
          key: "initializeItemTemplate",
          value: function initializeItemTemplate() {
            if (this.itemTemplate) {
              this.itemTemplateFn = this.templateParser(this.itemTemplate);
            }
          }
        }, {
          key: "getheaderTemplate",
          value: function getheaderTemplate() {
            return this.headerTemplateFn;
          }
        }, {
          key: "getItemTemplate",
          value: function getItemTemplate() {
            return this.itemTemplateFn;
          }
        }, {
          key: "focusIn",
          value: function focusIn(e) {
            e.target.parentElement.classList.add(CLS_ITEMFOCUS);
          }
        }, {
          key: "focusOut",
          value: function focusOut(e) {
            e.target.parentElement.classList.remove(CLS_ITEMFOCUS);
          }
        }, {
          key: "ctrlTemplate",
          value: function ctrlTemplate() {
            this.ctrlTem = this.element.cloneNode(true);
            var innerEles;
            var rootEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTAINER, this.element);

            if (rootEle) {
              innerEles = rootEle.children;
            } else {
              innerEles = this.element.children;
            }

            var items = [];
            /* tslint:disable */

            [].slice.call(innerEles).forEach(function (el) {
              items.push({
                header: el.childElementCount > 0 && el.children[0] ? el.children[0] : '',
                content: el.childElementCount > 1 && el.children[1] ? el.children[1] : ''
              });
              el.parentNode.removeChild(el);
            });
            /* tslint:enable */

            if (rootEle) {
              this.element.removeChild(rootEle);
            }

            this.setProperties({
              items: items
            }, true);
          }
        }, {
          key: "toggleIconGenerate",
          value: function toggleIconGenerate() {
            var tglIcon = this.createElement('div', {
              className: CLS_TOOGLEICN
            });
            var hdrColIcon = this.createElement('span', {
              className: CLS_COLLAPSEICN
            });
            tglIcon.appendChild(hdrColIcon);
            return tglIcon;
          }
        }, {
          key: "initItemExpand",
          value: function initItemExpand() {
            var len = this.initExpand.length;

            if (len === 0) {
              return;
            }

            if (this.expandMode === 'Single') {
              this.expandItem(true, this.initExpand[len - 1]);
            } else {
              for (var i = 0; i < len; i++) {
                this.expandItem(true, this.initExpand[i]);
              }
            }
          }
        }, {
          key: "renderItems",
          value: function renderItems() {
            var _this53 = this;

            var ele = this.element;
            var innerItem;
            var innerDataSourceItem;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.trgtEle)) {
              this.ctrlTemplate();
            }

            if (this.dataSource.length > 0) {
              this.dataSource.forEach(function (item, index) {
                innerDataSourceItem = _this53.renderInnerItem(item, index);
                ele.appendChild(innerDataSourceItem);

                if (innerDataSourceItem.childElementCount > 0) {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'focus', _this53.focusIn, _this53);

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'blur', _this53.focusOut, _this53);
                }
              });
            } else {
              var items = this.items;

              if (ele && items.length > 0) {
                items.forEach(function (item, index) {
                  innerItem = _this53.renderInnerItem(item, index);
                  ele.appendChild(innerItem);

                  if (innerItem.childElementCount > 0) {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(innerItem.querySelector('.' + CLS_HEADER), 'focus', _this53.focusIn, _this53);

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(innerItem.querySelector('.' + CLS_HEADER), 'blur', _this53.focusOut, _this53);
                  }
                });
              }
            }
          }
        }, {
          key: "clickHandler",
          value: function clickHandler(e) {
            var _this54 = this;

            var trgt = e.target;
            var items = this.getItems();
            var eventArgs = {};
            var index;
            var tglIcon;
            var acrdEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ROOT$2);

            if (acrdEle !== this.element) {
              return;
            }

            trgt.classList.add('e-target');
            var acrdnItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ITEM$1);
            var acrdnHdr = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_HEADER);
            var acrdnCtn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_CONTENT);

            if (acrdnItem && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(acrdnHdr) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(acrdnCtn))) {
              acrdnHdr = acrdnItem.children[0];
              acrdnCtn = acrdnItem.children[1];
            }

            if (acrdnHdr) {
              tglIcon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TOOGLEICN, acrdnHdr);
            }

            var acrdnCtnItem;

            if (acrdnHdr) {
              acrdnCtnItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(acrdnHdr, '.' + CLS_ITEM$1);
            } else if (acrdnCtn) {
              acrdnCtnItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(acrdnCtn, '.' + CLS_ITEM$1);
            }

            index = this.getIndexByItem(acrdnItem);

            if (acrdnCtnItem) {
              eventArgs.item = items[this.getIndexByItem(acrdnCtnItem)];
            }

            eventArgs.originalEvent = e;
            var ctnCheck = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tglIcon) && acrdnItem.childElementCount <= 1;

            if (ctnCheck && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(acrdnCtn) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER + ' .' + CLS_TOOGLEICN, acrdnCtnItem)))) {
              if (!this.isServerRendered) {
                acrdnItem.appendChild(this.contentRendering(index));
                this.ariaAttrUpdate(acrdnItem);
                this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
              } else {
                var id = acrdnItem.id;

                if (this.items.length > 0) {
                  // tslint:disable-next-line:no-any
                  this.interopAdaptor.invokeMethodAsync('OnItemClick', index).then(function () {
                    if (_this54.isDestroyed) {
                      return;
                    }

                    _this54.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
                  });
                } else {
                  // tslint:disable-next-line:no-any
                  this.interopAdaptor.invokeMethodAsync('OnDataClick', id).then(function () {
                    if (_this54.isDestroyed) {
                      return;
                    }

                    _this54.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
                  });
                }
              }
            } else {
              this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
            }
          }
        }, {
          key: "afterContentRender",
          value: function afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem) {
            var _this55 = this;

            var acrdActive = [];
            this.trigger('clicked', eventArgs);
            var cntclkCheck = acrdnCtn && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-target', acrdnCtn));
            var inlineAcrdnSel = '.' + CLS_CONTENT + ' .' + CLS_ROOT$2;
            var inlineEleAcrdn = acrdnCtn && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_ROOT$2, acrdnCtn)) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, inlineAcrdnSel));
            var nestContCheck = acrdnCtn && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_ROOT$2, acrdnCtn)) || !(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ROOT$2) === this.element);
            cntclkCheck = cntclkCheck && (inlineEleAcrdn || nestContCheck);
            trgt.classList.remove('e-target');

            if (trgt.classList.contains(CLS_CONTENT) || trgt.classList.contains(CLS_CTENT) || cntclkCheck) {
              return;
            }

            var acrdcontainer = this.element.querySelector('.' + CLS_CONTAINER);
            var acrdnchild = acrdcontainer ? acrdcontainer.children : this.element.children;
            [].slice.call(acrdnchild).forEach(function (el) {
              if (el.classList.contains(CLS_ACTIVE)) {
                acrdActive.push(el);
              }
            });
            var acrdAniEle = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM$1 + ' [' + CLS_ANIMATE + ']'));

            if (acrdAniEle.length > 0) {
              var _iterator44 = _createForOfIteratorHelper(acrdAniEle),
                  _step44;

              try {
                for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
                  var el = _step44.value;
                  acrdActive.push(el.parentElement);
                }
              } catch (err) {
                _iterator44.e(err);
              } finally {
                _iterator44.f();
              }
            }

            var sameContentCheck = acrdActive.indexOf(acrdnCtnItem) !== -1 && acrdnCtn.getAttribute('e-animate') === 'true';
            var sameHeader = false;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(acrdnItem) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(acrdnHdr)) {
              var _acrdnCtn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, acrdnItem);

              var acrdnRoot = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(acrdnItem, '.' + CLS_ACRDN_ROOT);
              var expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_acrdnCtn)) {
                return;
              }

              sameHeader = expandState === acrdnItem;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(_acrdnCtn) && (!sameContentCheck || acrdnCtnItem.classList.contains(CLS_SLCTED))) {
                this.collapse(_acrdnCtn);
              } else {
                if (acrdActive.length > 0 && this.expandMode === 'Single' && !sameContentCheck) {
                  acrdActive.forEach(function (el) {
                    _this55.collapse(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, el));

                    el.classList.remove(CLS_EXPANDSTATE);
                  });
                }

                this.expand(_acrdnCtn);
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(expandState) && !sameHeader) {
                expandState.classList.remove(CLS_EXPANDSTATE);
              }
            }
          }
        }, {
          key: "eleMoveFocus",
          value: function eleMoveFocus(action, root, trgt) {
            var clst;
            var clstItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ITEM$1);

            if (trgt === root) {
              clst = (action === 'moveUp' ? trgt.lastElementChild : trgt).querySelector('.' + CLS_HEADER);
            } else if (trgt.classList.contains(CLS_HEADER)) {
              clstItem = action === 'moveUp' ? clstItem.previousElementSibling : clstItem.nextElementSibling;

              if (clstItem) {
                clst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER, clstItem);
              }
            }

            if (clst) {
              clst.focus();
            }
          }
        }, {
          key: "keyActionHandler",
          value: function keyActionHandler(e) {
            var trgt = e.target;
            var header = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, CLS_HEADER);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(header) && !trgt.classList.contains(CLS_ROOT$2) && !trgt.classList.contains(CLS_HEADER)) {
              return;
            }

            var clst;
            var root = this.element;
            var content;

            switch (e.action) {
              case 'moveUp':
                this.eleMoveFocus(e.action, root, trgt);
                break;

              case 'moveDown':
                this.eleMoveFocus(e.action, root, trgt);
                break;

              case 'space':
              case 'enter':
                content = trgt.nextElementSibling;

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(content) && content.classList.contains(CLS_CONTENT)) {
                  if (content.getAttribute('e-animate') !== 'true') {
                    trgt.click();
                  }
                } else {
                  trgt.click();
                }

                break;

              case 'home':
              case 'end':
                clst = e.action === 'home' ? root.firstElementChild.children[0] : root.lastElementChild.children[0];
                clst.focus();
                break;
            }
          }
        }, {
          key: "headerEleGenerate",
          value: function headerEleGenerate() {
            var header = this.createElement('div', {
              className: CLS_HEADER,
              id: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('acrdn_header')
            });
            var items = this.getItems();
            var ariaAttr = {
              'tabindex': '0',
              'role': 'heading',
              'aria-selected': 'false',
              'aria-disabled': 'false',
              'aria-level': items.length.toString()
            };
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(header, ariaAttr);
            return header;
          }
        }, {
          key: "renderInnerItem",
          value: function renderInnerItem(item, index) {
            var innerEle;
            innerEle = this.createElement('div', {
              className: CLS_ITEM$1
            });
            innerEle.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('acrdn_item');
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(innerEle, {
              'aria-expanded': 'false'
            });

            if (this.headerTemplate) {
              var ctnEle = this.headerEleGenerate();
              var hdrEle = this.createElement('div', {
                className: CLS_HEADERCTN
              });
              ctnEle.appendChild(hdrEle);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(this.getheaderTemplate()(item, this, 'headerTemplate', this.element.id + '_headerTemplate', false), hdrEle);
              innerEle.appendChild(ctnEle);
              ctnEle.appendChild(this.toggleIconGenerate());
              this.add(innerEle, CLS_SLCT);
              return innerEle;
            }

            if (item.header && this.angularnativeCondiCheck(item, 'header')) {
              if (this.enableHtmlSanitizer && typeof item.header === 'string') {
                item.header = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(item.header);
              }

              var _ctnEle = this.headerEleGenerate();

              var _hdrEle = this.createElement('div', {
                className: CLS_HEADERCTN
              });

              _ctnEle.appendChild(_hdrEle);

              _ctnEle.appendChild(this.fetchElement(_hdrEle, item.header, index, true));

              innerEle.appendChild(_ctnEle);
            }

            var hdr = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER, innerEle);

            if (item.expanded && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index) && !this.enablePersistence) {
              if (this.initExpand.indexOf(index) === -1) {
                this.initExpand.push(index);
              }
            }

            if (item.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([innerEle], item.cssClass.split(' '));
            }

            if (item.disabled) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([innerEle], CLS_DISABLE$3);
            }

            if (item.visible === false) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([innerEle], CLS_ITEMHIDE);
            }

            if (item.iconCss) {
              var hdrIcnEle = this.createElement('div', {
                className: CLS_HEADERICN
              });
              var icon = this.createElement('span', {
                className: item.iconCss + ' e-icons'
              });
              hdrIcnEle.appendChild(icon);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(hdr)) {
                hdr = this.headerEleGenerate();
                hdr.appendChild(hdrIcnEle);
                innerEle.appendChild(hdr);
              } else {
                hdr.insertBefore(hdrIcnEle, hdr.childNodes[0]);
              }
            }

            if (item.content && this.angularnativeCondiCheck(item, 'content')) {
              var hdrIcon = this.toggleIconGenerate();

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(hdr)) {
                hdr = this.headerEleGenerate();
                innerEle.appendChild(hdr);
              }

              hdr.appendChild(hdrIcon);
              this.add(innerEle, CLS_SLCT);
            }

            return innerEle;
          }
        }, {
          key: "angularnativeCondiCheck",
          value: function angularnativeCondiCheck(item, prop) {
            var property = prop === 'content' ? item.content : item.header;
            var content = property;

            if (this.isAngular && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(content.elementRef)) {
              var data = content.elementRef.nativeElement.data;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data) || data === '' || data.indexOf('bindings=') === -1) {
                return true;
              }

              var parseddata = JSON.parse(content.elementRef.nativeElement.data.replace('bindings=', ''));

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parseddata) && parseddata['ng-reflect-ng-if'] === 'false') {
                return false;
              } else {
                return true;
              }
            } else {
              return true;
            }
          }
        }, {
          key: "fetchElement",
          value: function fetchElement(ele, value, index, isHeader) {
            var templateFn;
            var temString;

            try {
              if (document.querySelectorAll(value).length) {
                var eleVal = document.querySelector(value);
                temString = eleVal.outerHTML.trim();
                ele.appendChild(eleVal);
                eleVal.style.display = '';
              }
            } catch (e) {
              if (typeof value === 'string' && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && value.indexOf('<div>Blazor') !== 0) {
                ele.innerHTML = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(value);
                /* tslint:disable */
              } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.trgtEle) && value instanceof HTMLElement) {
                ele.appendChild(value);
                ele.firstElementChild.style.display = '';
                /* tslint:enable */
              } else {
                templateFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(value);
              }
            }

            var tempArray;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(templateFn)) {
              var templateProps;

              if (ele.classList.contains(CLS_HEADERCTN)) {
                templateProps = this.element.id + index + '_header';
              } else if (ele.classList.contains(CLS_CTENT)) {
                templateProps = this.element.id + index + '_content';
              }

              tempArray = templateFn({}, null, null, templateProps, this.isStringTemplate);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tempArray) && tempArray.length > 0 && !(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tempArray[0].tagName) && tempArray.length === 1)) {
              [].slice.call(tempArray).forEach(function (el) {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(el.tagName)) {
                  el.style.display = '';
                }

                ele.appendChild(el);
              });
            } else if (ele.childElementCount === 0) {
              ele.innerHTML = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(value);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(temString)) {
              if (this.templateEle.indexOf(value) === -1) {
                this.templateEle.push(value);
              }
            }

            return ele;
          }
        }, {
          key: "ariaAttrUpdate",
          value: function ariaAttrUpdate(itemEle) {
            var header = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER, itemEle);
            var content = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT, itemEle);
            header.setAttribute('aria-controls', content.id);
            content.setAttribute('aria-labelledby', header.id);
            content.setAttribute('role', 'definition');
          }
        }, {
          key: "contentRendering",
          value: function contentRendering(index) {
            var itemcnt = this.createElement('div', {
              className: CLS_CONTENT + ' ' + CLS_CTNHIDE,
              id: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('acrdn_panel')
            });
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(itemcnt, {
              'aria-hidden': 'true'
            });
            var ctn = this.createElement('div', {
              className: CLS_CTENT
            });

            if (this.dataSource.length > 0) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(this.getItemTemplate()(this.dataSource[index], this, 'itemTemplate', this.element.id + '_itemTemplate', false), ctn);
              itemcnt.appendChild(ctn);
            } else {
              if (this.enableHtmlSanitizer && typeof this.items[index].content) {
                this.items[index].content = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(this.items[index].content);
              }

              itemcnt.appendChild(this.fetchElement(ctn, this.items[index].content, index, false));
            }

            return itemcnt;
          }
        }, {
          key: "expand",
          value: function expand(trgt) {
            var _this56 = this;

            var eventArgs;
            var items = this.getItems();
            var trgtItemEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ITEM$1);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trgt) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(trgt) && trgt.getAttribute('e-animate') !== 'true' || trgtItemEle.classList.contains(CLS_DISABLE$3)) {
              return;
            }

            var acrdnRoot = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgtItemEle, '.' + CLS_ACRDN_ROOT);
            var expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);
            var animation = {
              name: this.animation.expand.effect,
              duration: this.animation.expand.duration,
              timingFunction: this.animation.expand.easing
            };
            var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
            eventArgs = {
              element: trgtItemEle,
              item: items[this.getIndexByItem(trgtItemEle)],
              index: this.getIndexByItem(trgtItemEle),
              content: trgtItemEle.querySelector('.' + CLS_CONTENT),
              isExpanded: true
            };
            this.trigger('expanding', eventArgs, function (expandArgs) {
              if (!expandArgs.cancel) {
                icon.classList.add(CLS_TOGANIMATE);

                _this56.expandedItemsPush(trgtItemEle);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(expandState)) {
                  expandState.classList.remove(CLS_EXPANDSTATE);
                }

                trgtItemEle.classList.add(CLS_EXPANDSTATE);

                if (animation.name === 'None') {
                  _this56.expandProgress('begin', icon, trgt, trgtItemEle, expandArgs);

                  _this56.expandProgress('end', icon, trgt, trgtItemEle, expandArgs);
                } else {
                  _this56.expandAnimation(animation.name, icon, trgt, trgtItemEle, animation, expandArgs);
                }
              }
            });
          }
        }, {
          key: "expandAnimation",
          value: function expandAnimation(ef, icn, trgt, trgtItemEle, animate, args) {
            var _this57 = this;

            var height;
            this.lastActiveItemId = trgtItemEle.id;

            if (ef === 'SlideDown') {
              animate.begin = function () {
                _this57.expandProgress('begin', icn, trgt, trgtItemEle, args);

                trgt.style.position = 'absolute';
                height = trgtItemEle.offsetHeight;
                trgt.style.maxHeight = trgt.offsetHeight + 'px';
                trgtItemEle.style.maxHeight = '';
              };

              animate.progress = function () {
                trgtItemEle.style.minHeight = height + trgt.offsetHeight + 'px';
              };

              animate.end = function () {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(trgt, {
                  'position': '',
                  'maxHeight': ''
                });
                trgtItemEle.style.minHeight = '';

                _this57.expandProgress('end', icn, trgt, trgtItemEle, args);
              };
            } else {
              animate.begin = function () {
                _this57.expandProgress('begin', icn, trgt, trgtItemEle, args);
              };

              animate.end = function () {
                _this57.expandProgress('end', icn, trgt, trgtItemEle, args);
              };
            }

            new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](animate).animate(trgt);
          }
        }, {
          key: "expandProgress",
          value: function expandProgress(progress, icon, trgt, trgtItemEle, eventArgs) {
            this.remove(trgt, CLS_CTNHIDE);
            this.add(trgtItemEle, CLS_SLCTED);
            this.add(icon, CLS_EXPANDICN);

            if (progress === 'end') {
              this.add(trgtItemEle, CLS_ACTIVE);
              trgt.setAttribute('aria-hidden', 'false');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(trgtItemEle, {
                'aria-expanded': 'true'
              });
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(trgt.previousElementSibling, {
                'aria-selected': 'true'
              });
              icon.classList.remove(CLS_TOGANIMATE);
              this.trigger('expanded', eventArgs);
            }
          }
        }, {
          key: "expandedItemsPush",
          value: function expandedItemsPush(item) {
            var index = this.getIndexByItem(item);

            if (this.expandedIndices.indexOf(index) === -1) {
              var temp = [].slice.call(this.expandedIndices);
              temp.push(index);
              this.setProperties({
                expandedIndices: temp
              }, true);
            }
          }
        }, {
          key: "getIndexByItem",
          value: function getIndexByItem(item) {
            var itemEle = this.getItemElements();
            return [].slice.call(itemEle).indexOf(item);
          }
        }, {
          key: "getItemElements",
          value: function getItemElements() {
            var itemEle = [];
            var itemCollection = this.element.children;
            [].slice.call(itemCollection).forEach(function (el) {
              if (el.classList.contains(CLS_ITEM$1)) {
                itemEle.push(el);
              }
            });
            return itemEle;
          }
        }, {
          key: "expandedItemsPop",
          value: function expandedItemsPop(item) {
            var index = this.getIndexByItem(item);
            var temp = [].slice.call(this.expandedIndices);
            temp.splice(temp.indexOf(index), 1);
            this.setProperties({
              expandedIndices: temp
            }, true);
          }
        }, {
          key: "collapse",
          value: function collapse(trgt) {
            var _this58 = this;

            var eventArgs;
            var items = this.getItems();
            var trgtItemEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '.' + CLS_ITEM$1);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trgt) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(trgt) || trgtItemEle.classList.contains(CLS_DISABLE$3)) {
              return;
            }

            var animation = {
              name: this.animation.collapse.effect,
              duration: this.animation.collapse.duration,
              timingFunction: this.animation.collapse.easing
            };
            var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
            eventArgs = {
              element: trgtItemEle,
              item: items[this.getIndexByItem(trgtItemEle)],
              index: this.getIndexByItem(trgtItemEle),
              content: trgtItemEle.querySelector('.' + CLS_CONTENT),
              isExpanded: false
            };
            this.trigger('expanding', eventArgs, function (expandArgs) {
              if (!expandArgs.cancel) {
                _this58.expandedItemsPop(trgtItemEle);

                trgtItemEle.classList.add(CLS_EXPANDSTATE);
                icon.classList.add(CLS_TOGANIMATE);

                if (animation.name === 'None') {
                  _this58.collapseProgress('begin', icon, trgt, trgtItemEle, expandArgs);

                  _this58.collapseProgress('end', icon, trgt, trgtItemEle, expandArgs);
                } else {
                  _this58.collapseAnimation(animation.name, trgt, trgtItemEle, icon, animation, expandArgs);
                }
              }
            });
          }
        }, {
          key: "collapseAnimation",
          value: function collapseAnimation(ef, trgt, trgtItEl, icn, animate, args) {
            var _this59 = this;

            var height;
            var trgtHeight;
            var itemHeight;
            var remain;
            this.lastActiveItemId = trgtItEl.id;

            if (ef === 'SlideUp') {
              animate.begin = function () {
                itemHeight = trgtItEl.offsetHeight;
                trgtItEl.style.minHeight = itemHeight + 'px';
                trgt.style.position = 'absolute';
                height = trgtItEl.offsetHeight;
                trgtHeight = trgt.offsetHeight;
                trgt.style.maxHeight = trgtHeight + 'px';

                _this59.collapseProgress('begin', icn, trgt, trgtItEl, args);
              };

              animate.progress = function () {
                remain = height - (trgtHeight - trgt.offsetHeight);

                if (remain < itemHeight) {
                  trgtItEl.style.minHeight = remain + 'px';
                }
              };

              animate.end = function () {
                trgt.style.display = 'none';

                _this59.collapseProgress('end', icn, trgt, trgtItEl, args);

                trgtItEl.style.minHeight = '';
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(trgt, {
                  'position': '',
                  'maxHeight': '',
                  'display': ''
                });
              };
            } else {
              animate.begin = function () {
                _this59.collapseProgress('begin', icn, trgt, trgtItEl, args);
              };

              animate.end = function () {
                _this59.collapseProgress('end', icn, trgt, trgtItEl, args);
              };
            }

            new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](animate).animate(trgt);
          }
        }, {
          key: "collapseProgress",
          value: function collapseProgress(progress, icon, trgt, trgtItemEle, eventArgs) {
            this.remove(icon, CLS_EXPANDICN);
            this.remove(trgtItemEle, CLS_SLCTED);

            if (progress === 'end') {
              this.add(trgt, CLS_CTNHIDE);
              icon.classList.remove(CLS_TOGANIMATE);
              this.remove(trgtItemEle, CLS_ACTIVE);
              trgt.setAttribute('aria-hidden', 'true');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(trgtItemEle, {
                'aria-expanded': 'false'
              });
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(trgt.previousElementSibling, {
                'aria-selected': 'false'
              });
              this.trigger('expanded', eventArgs);
            }
          }
          /**
           * Returns the current module name.
           * @returns string
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'accordion';
          }
        }, {
          key: "itemAttribUpdate",
          value: function itemAttribUpdate() {
            var items = this.getItems();
            var itemEle = this.getItemElements();
            var itemLen = items.length;
            itemEle.forEach(function (ele) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER, ele).setAttribute('aria-level', '' + itemLen);
            });
          }
        }, {
          key: "getItems",
          value: function getItems() {
            var items;

            if (this.itemTemplate && this.headerTemplate) {
              items = this.dataSource;
            } else {
              items = this.items;
            }

            return items;
          }
          /**
           * Adds new item to the Accordion with the specified index of the Accordion.
           * @param  {AccordionItemModel | AccordionItemModel[] | Object | Object[]} item - Item array that is to be added to the Accordion.
           * @param  {number} index - Number value that determines where the item should be added.
           * By default, item is added at the last index if the index is not specified.
           * @returns void
           * @deprecated
           */

        }, {
          key: "addItem",
          value: function addItem(item, index) {
            var _this60 = this;

            var ele = this.element;
            var itemEle = this.getItemElements();
            var items = this.getItems();

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
              index = items.length;
            }

            if (ele.childElementCount >= index) {
              var addItems = item instanceof Array ? item : [item];
              addItems.forEach(function (addItem, i) {
                var itemIndex = index + i;
                items.splice(itemIndex, 0, addItem);

                var innerItemEle = _this60.renderInnerItem(addItem, itemIndex);

                if (ele.childElementCount === itemIndex) {
                  ele.appendChild(innerItemEle);
                } else {
                  ele.insertBefore(innerItemEle, itemEle[itemIndex]);
                }

                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(innerItemEle.querySelector('.' + CLS_HEADER), 'focus', _this60.focusIn, _this60);

                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(innerItemEle.querySelector('.' + CLS_HEADER), 'blur', _this60.focusOut, _this60);

                _this60.itemAttribUpdate();

                _this60.expandedIndices = [];

                _this60.expandedItemRefresh(ele);

                if (addItem && addItem.expanded) {
                  _this60.expandItem(true, itemIndex);
                }
              });
            }
          }
        }, {
          key: "expandedItemRefresh",
          value: function expandedItemRefresh(ele) {
            var _this61 = this;

            var itemEle = this.getItemElements();
            [].slice.call(itemEle).forEach(function (el) {
              if (el.classList.contains(CLS_SLCTED)) {
                _this61.expandedItemsPush(el);
              }
            });
          }
          /**
           * Dynamically removes item from Accordion.
           * @param  {number} index - Number value that determines which item should be removed.
           * @returns void.
           * @deprecated
           */

        }, {
          key: "removeItem",
          value: function removeItem(index) {
            var itemEle = this.getItemElements();
            var ele = itemEle[index];
            var items = this.getItems();

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
              return;
            }

            this.restoreContent(index);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
            items.splice(index, 1);
            this.itemAttribUpdate();
            this.expandedIndices = [];
            this.expandedItemRefresh(this.element);
          }
          /**
           * Sets focus to the specified index item header in Accordion.
           * @param  {number} index - Number value that determines which item should be focused.
           * @returns void.
           */

        }, {
          key: "select",
          value: function select(index) {
            var itemEle = this.getItemElements();
            var ele = itemEle[index];

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER, ele))) {
              return;
            }

            ele.children[0].focus();
          }
          /**
           * Shows or hides the specified item from Accordion.
           * @param  {number} index - Number value that determines which item should be hidden/shown.
           * @param  {Boolean} isHidden - Boolean value that determines the action either hide (true) or show (false). Default value is false.
           *  If the `isHidden` value is false, the item is shown or else item it is hidden.
           * @returns void.
           */

        }, {
          key: "hideItem",
          value: function hideItem(index, isHidden) {
            var itemEle = this.getItemElements();
            var ele = itemEle[index];

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
              return;
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(isHidden)) {
              isHidden = true;
            }

            isHidden ? this.add(ele, CLS_ITEMHIDE) : this.remove(ele, CLS_ITEMHIDE);
          }
          /**
           * Enables/Disables the specified Accordion item.
           * @param  {number} index - Number value that determines which item should be enabled/disabled.
           * @param  {boolean} isEnable - Boolean value that determines the action as enable (true) or disable (false).
           * If the `isEnable` value is true, the item is enabled or else it is disabled.
           * @returns void.
           */

        }, {
          key: "enableItem",
          value: function enableItem(index, isEnable) {
            var itemEle = this.getItemElements();
            var ele = itemEle[index];

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
              return;
            }

            var eleHeader = ele.firstElementChild;

            if (isEnable) {
              this.remove(ele, CLS_DISABLE$3);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(eleHeader, {
                'tabindex': '0',
                'aria-disabled': 'false'
              });
              eleHeader.focus();
            } else {
              if (ele.classList.contains(CLS_ACTIVE)) {
                this.expandItem(false, index);
                this.eleMoveFocus('movedown', this.element, eleHeader);
              }

              this.add(ele, CLS_DISABLE$3);
              eleHeader.setAttribute('aria-disabled', 'true');
              eleHeader.removeAttribute('tabindex');
            }
          }
          /**
           * Refresh the Accordion component.
           * @returns void.
           */

        }, {
          key: "refresh",
          value: function refresh() {
            if (!this.isServerRendered) {
              _get2(_getPrototypeOf2(Accordion.prototype), "refresh", this).call(this);
            }
          }
          /**
           * Expands/Collapses the specified Accordion item.
           * @param  {boolean} isExpand - Boolean value that determines the action as expand or collapse.
           * @param  {number} index - Number value that determines which item should be expanded/collapsed.`index` is optional parameter.
           *  Without Specifying index, based on the `isExpand` value all Accordion item can be expanded or collapsed.
           * @returns void.
           */

        }, {
          key: "expandItem",
          value: function expandItem(isExpand, index) {
            var _this62 = this;

            var itemEle = this.getItemElements();

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
              if (this.expandMode === 'Single' && isExpand) {
                var ele = itemEle[itemEle.length - 1];
                this.itemExpand(isExpand, ele, this.getIndexByItem(ele));
              } else {
                var item = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + this.lastActiveItemId, this.element);
                [].slice.call(itemEle).forEach(function (el) {
                  _this62.itemExpand(isExpand, el, _this62.getIndexByItem(el));

                  el.classList.remove(CLS_EXPANDSTATE);
                });
                var expandedItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_EXPANDSTATE, this.element);

                if (expandedItem) {
                  expandedItem.classList.remove(CLS_EXPANDSTATE);
                }

                if (item) {
                  item.classList.add(CLS_EXPANDSTATE);
                }
              }
            } else {
              var _ele7 = itemEle[index];

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_ele7) || !_ele7.classList.contains(CLS_SLCT) || _ele7.classList.contains(CLS_ACTIVE) && isExpand) {
                return;
              } else {
                if (this.expandMode === 'Single') {
                  this.expandItem(false);
                }

                this.itemExpand(isExpand, _ele7, index);
              }
            }
          }
        }, {
          key: "itemExpand",
          value: function itemExpand(isExpand, ele, index) {
            var _this63 = this;

            var ctn = ele.children[1];

            if (ele.classList.contains(CLS_DISABLE$3)) {
              return;
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ctn) && isExpand) {
              if (!this.isServerRendered) {
                ctn = this.contentRendering(index);
                ele.appendChild(ctn);
                this.ariaAttrUpdate(ele);
                this.expand(ctn);
              } else {
                var id = ele.id;

                if (this.items.length > 0) {
                  // tslint:disable-next-line:no-any
                  this.interopAdaptor.invokeMethodAsync('OnItemClick', index).then(function () {
                    if (_this63.isDestroyed) {
                      return;
                    }

                    ctn = ele.children[1];

                    _this63.expand(ctn);
                  });
                } else {
                  // tslint:disable-next-line:no-any
                  this.interopAdaptor.invokeMethodAsync('OnDataClick', id).then(function () {
                    if (_this63.isDestroyed) {
                      return;
                    }

                    ctn = ele.children[1];

                    _this63.expand(ctn);
                  });
                }
              }
            } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ctn)) {
              isExpand ? this.expand(ctn) : this.collapse(ctn);
            }
          }
        }, {
          key: "destroyItems",
          value: function destroyItems() {
            this.restoreContent(null);
            [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM$1)).forEach(function (el) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(el);
            });
          }
        }, {
          key: "restoreContent",
          value: function restoreContent(index) {
            var ctnElePos;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
              ctnElePos = this.element;
            } else {
              ctnElePos = this.element.querySelectorAll('.' + CLS_ITEM$1)[index];
            }

            this.templateEle.forEach(function (eleStr) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ctnElePos.querySelector(eleStr))) {
                document.body.appendChild(ctnElePos.querySelector(eleStr)).style.display = 'none';
              }
            });
          }
        }, {
          key: "updateItem",
          value: function updateItem(item, index) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
              var items = this.getItems();
              var itemObj = items[index];
              items.splice(index, 1);
              this.restoreContent(index);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(item);
              this.addItem(itemObj, index);
            }
          }
        }, {
          key: "getPersistData",
          value: function getPersistData() {
            var keyEntity = ['expandedIndices'];
            return this.addOnPersist(keyEntity);
          }
          /**
           * Gets called when the model property changes.The data that describes the old and new values of the property that changed.
           * @param  {AccordionModel} newProp
           * @param  {AccordionModel} oldProp
           * @returns void
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var acrdn = this.element;
            var isRefresh = false;

            for (var _i20 = 0, _Object$keys7 = Object.keys(newProp); _i20 < _Object$keys7.length; _i20++) {
              var prop = _Object$keys7[_i20];

              switch (prop) {
                case 'items':
                  if (this.isServerRendered) {
                    this.wireFocusEvents();
                    break;
                  }

                  if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
                    var changedProp = Object.keys(newProp.items);

                    for (var j = 0; j < changedProp.length; j++) {
                      var index = parseInt(Object.keys(newProp.items)[j], 10);
                      var property = Object.keys(newProp.items[index])[0];
                      var item = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM$1, this.element)[index];
                      var oldVal = Object(oldProp.items[index])[property];
                      var newVal = Object(newProp.items[index])[property];
                      var temp = property;

                      if (temp === 'header' || temp === 'iconCss' || temp === 'expanded' || temp === 'content' && oldVal === '') {
                        this.updateItem(item, index);
                      }

                      if (property === 'cssClass' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
                        item.classList.remove(oldVal);
                        item.classList.add(newVal);
                      }

                      if (property === 'visible' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
                        Object(newProp.items[index])[property] === false ? item.classList.add(CLS_ITEMHIDE) : item.classList.remove(CLS_ITEMHIDE);
                      }

                      if (property === 'disabled' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
                        this.enableItem(index, !newVal);
                      }

                      if (property === 'content' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item) && item.children.length === 2) {
                        if (item.classList.contains(CLS_SLCTED)) {
                          this.expandItem(false, index);
                        }

                        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(item.querySelector('.' + CLS_CONTENT));
                      }
                    }
                  } else {
                    isRefresh = true;
                  }

                  break;

                case 'dataSource':
                case 'expandedIndices':
                  if (this.expandedIndices === null) {
                    this.expandedIndices = [];
                  }

                  isRefresh = true;
                  break;

                case 'headerTemplate':
                  this.initializeheaderTemplate();
                  isRefresh = true;
                  break;

                case 'itemTemplate':
                  this.initializeItemTemplate();
                  isRefresh = true;
                  break;

                case 'enableRtl':
                  newProp.enableRtl ? this.add(acrdn, CLS_RTL$3) : this.remove(acrdn, CLS_RTL$3);
                  break;

                case 'height':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                    'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.height)
                  });
                  break;

                case 'width':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                    'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.width)
                  });
                  break;

                case 'expandMode':
                  if (newProp.expandMode === 'Single') {
                    this.element.setAttribute('aria-multiselectable', 'false');

                    if (this.expandedIndices.length > 1) {
                      this.expandItem(false);
                    }
                  } else {
                    this.element.setAttribute('aria-multiselectable', 'true');
                  }

                  break;
              }
            }

            if (isRefresh && !this.isServerRendered) {
              this.initExpand = [];

              if (this.expandedIndices.length > 0) {
                this.initExpand = this.expandedIndices;
              }

              this.destroyItems();
              this.renderItems();
              this.initItemExpand();
            }
          }
        }]);

        return Accordion;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], AccordionItem)], Accordion.prototype, "items", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], Accordion.prototype, "dataSource", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Accordion.prototype, "itemTemplate", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Accordion.prototype, "headerTemplate", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], Accordion.prototype, "width", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Accordion.prototype, "height", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], Accordion.prototype, "expandedIndices", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Multiple')], Accordion.prototype, "expandMode", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Accordion.prototype, "enableHtmlSanitizer", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, AccordionAnimationSettings)], Accordion.prototype, "animation", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Accordion.prototype, "clicked", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Accordion.prototype, "expanding", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Accordion.prototype, "expanded", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Accordion.prototype, "created", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Accordion.prototype, "destroyed", void 0);

      Accordion = __decorate$4([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Accordion);
      /**
       * Accordion all modules
       */

      var __decorate$5 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      }; /// <reference path='../common/menu-base-model.d.ts'/>

      /**
       * The ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
       * ```html
       * <div id = 'target'></div>
       * <ul id = 'contextmenu'></ul>
       * ```
       * ```typescript
       * <script>
       * var contextMenuObj = new ContextMenu({items: [{ text: 'Cut' }, { text: 'Copy' },{ text: 'Paste' }], target: '#target'});
       * </script>
       * ```
       */


      var ContextMenu = /*#__PURE__*/function (_MenuBase) {
        _inherits2(ContextMenu, _MenuBase);

        var _super21 = _createSuper(ContextMenu);

        /**
         * Constructor for creating the widget.
         * @private
         */
        function ContextMenu(options, element) {
          _classCallCheck2(this, ContextMenu);

          return _super21.call(this, options, element);
        }
        /**
         * For internal use only - prerender processing.
         * @private
         */


        _createClass2(ContextMenu, [{
          key: "preRender",
          value: function preRender() {
            this.isMenu = false;
            this.element.id = this.element.id || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('ej2-contextmenu');

            _get2(_getPrototypeOf2(ContextMenu.prototype), "preRender", this).call(this);
          }
        }, {
          key: "initialize",
          value: function initialize() {
            _get2(_getPrototypeOf2(ContextMenu.prototype), "initialize", this).call(this);

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              'role': 'context menu',
              'tabindex': '0'
            });
            this.element.style.zIndex = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["getZindexPartial"])(this.element).toString();
          }
          /**
           * This method is used to open the ContextMenu in specified position.
           * @param top - To specify ContextMenu vertical positioning.
           * @param left - To specify ContextMenu horizontal positioning.
           * @param target - To calculate z-index for ContextMenu based upon the specified target.
           * @method open
           * @returns void
           */

        }, {
          key: "open",
          value: function open(top, left, target) {
            _get2(_getPrototypeOf2(ContextMenu.prototype), "openMenu", this).call(this, null, null, top, left, null, target);
          }
          /**
           * Closes the ContextMenu if it is opened.
           */

        }, {
          key: "close",
          value: function close() {
            _get2(_getPrototypeOf2(ContextMenu.prototype), "closeMenu", this).call(this);
          }
          /**
           * Called internally if any of the property value changed
           * @private
           * @param {ContextMenuModel} newProp
           * @param {ContextMenuModel} oldProp
           * @returns void
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            _get2(_getPrototypeOf2(ContextMenu.prototype), "onPropertyChanged", this).call(this, newProp, oldProp);

            for (var _i21 = 0, _Object$keys8 = Object.keys(newProp); _i21 < _Object$keys8.length; _i21++) {
              var prop = _Object$keys8[_i21];

              switch (prop) {
                case 'filter':
                  this.close();
                  this.filter = newProp.filter;
                  break;

                case 'target':
                  this.unWireEvents(oldProp.target);
                  this.wireEvents();
                  break;
              }
            }
          }
          /**
           * Get module name.
           * @returns string
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'contextmenu';
          }
        }]);

        return ContextMenu;
      }(MenuBase);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ContextMenu.prototype, "target", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ContextMenu.prototype, "filter", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], MenuItem)], ContextMenu.prototype, "items", void 0);

      ContextMenu = __decorate$5([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], ContextMenu);
      /**
       * ContextMenu modules
       */

      var __decorate$6 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      }; /// <reference path='../common/menu-base-model.d.ts'/>


      var VMENU = 'e-vertical';
      var SCROLLABLE = 'e-scrollable';
      var HAMBURGER = 'e-hamburger';
      /**
       * The Menu is a graphical user interface that serve as navigation headers for your application or site.
       * ```html
       * <ul id = 'menu'></ul>
       * ```
       * ```typescript
       * <script>
       * var menuObj = new Menu({ items: [{ text: 'Home' }, { text: 'Contact Us' },{ text: 'Login' }]});
       * menuObj.appendTo("#menu");
       * </script>
       * ```
       */

      var Menu = /*#__PURE__*/function (_MenuBase2) {
        _inherits2(Menu, _MenuBase2);

        var _super22 = _createSuper(Menu);

        /**
         * Constructor for creating the component.
         * @private
         */
        function Menu(options, element) {
          var _this64;

          _classCallCheck2(this, Menu);

          _this64 = _super22.call(this, options, element);
          _this64.tempItems = [];
          return _this64;
        }
        /**
         * Get module name.
         * @returns string
         * @private
         */


        _createClass2(Menu, [{
          key: "getModuleName",
          value: function getModuleName() {
            return 'menu';
          }
          /**
           * For internal use only - prerender processing.
           * @private
           */

        }, {
          key: "preRender",
          value: function preRender() {
            this.isMenu = true;
            this.element.id = this.element.id || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('ej2-menu');

            if (this.template) {
              try {
                if (document.querySelectorAll(this.template).length) {
                  this.template = document.querySelector(this.template).innerHTML.trim();
                  this.clearChanges();
                }
              } catch (e) {
                /* action on catch */
              }
            } else {
              this.updateMenuItems(this.items);
            }

            _get2(_getPrototypeOf2(Menu.prototype), "preRender", this).call(this);
          }
        }, {
          key: "initialize",
          value: function initialize() {
            _get2(_getPrototypeOf2(Menu.prototype), "initialize", this).call(this);

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              'role': 'menubar',
              'tabindex': '0'
            });

            if (this.orientation === 'Vertical') {
              this.element.classList.add(VMENU);

              if (this.hamburgerMode && !this.target) {
                this.element.previousElementSibling.classList.add(VMENU);
              }

              this.element.setAttribute('aria-orientation', 'vertical');
            } else {
              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !this.enableScrolling) {
                this.element.parentElement.classList.add(SCROLLABLE);
              }
            }

            if (this.hamburgerMode) {
              this.element.parentElement.classList.add(HAMBURGER);

              if (this.orientation === 'Horizontal') {
                this.element.classList.add('e-hide-menu');
              }
            }
          }
        }, {
          key: "updateMenuItems",
          value: function updateMenuItems(items) {
            this.tempItems = items;
            this.items = [];
            this.tempItems.map(this.createMenuItems, this);
            this.setProperties({
              items: this.items
            }, true);
            this.tempItems = [];
          }
          /**
           * Called internally if any of the property value changed
           * @private
           * @param {MenuModel} newProp
           * @param {MenuModel} oldProp
           * @returns void
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i22 = 0, _Object$keys9 = Object.keys(newProp); _i22 < _Object$keys9.length; _i22++) {
              var prop = _Object$keys9[_i22];

              switch (prop) {
                case 'orientation':
                  if (newProp.orientation === 'Vertical') {
                    this.element.classList.add(VMENU);

                    if (this.hamburgerMode) {
                      if (!this.target) {
                        this.element.previousElementSibling.classList.add(VMENU);
                      }

                      this.element.classList.remove('e-hide-menu');
                    }

                    this.element.setAttribute('aria-orientation', 'vertical');
                  } else {
                    this.element.classList.remove(VMENU);

                    if (this.hamburgerMode) {
                      if (!this.target) {
                        this.element.previousElementSibling.classList.remove(VMENU);
                      }

                      this.element.classList.add('e-hide-menu');
                    }

                    this.element.removeAttribute('aria-orientation');
                  }

                  break;

                case 'items':
                  if (!Object.keys(oldProp.items).length) {
                    this.updateMenuItems(newProp.items);
                  }

                  break;

                case 'hamburgerMode':
                  if (!this.element.previousElementSibling) {
                    _get2(_getPrototypeOf2(Menu.prototype), "createHeaderContainer", this).call(this);
                  }

                  if (newProp.hamburgerMode) {
                    this.element.parentElement.classList.add(HAMBURGER);
                  } else {
                    this.element.parentElement.classList.remove(HAMBURGER);
                  }

                  if (this.orientation === 'Vertical') {
                    if (!this.target) {
                      this.element.previousElementSibling.classList.add(VMENU);
                    }

                    this.element.classList.remove('e-hide-menu');
                  } else {
                    if (this.target) {
                      this.element.previousElementSibling.classList.add(VMENU);
                    } else {
                      this.element.previousElementSibling.classList.remove(VMENU);
                    }

                    this.element.classList[newProp.hamburgerMode ? 'add' : 'remove']('e-hide-menu');
                  }

                  break;

                case 'title':
                  if (this.hamburgerMode && this.element.previousElementSibling) {
                    newProp.title = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(newProp.title) : newProp.title;
                    this.element.previousElementSibling.querySelector('.e-menu-title').innerHTML = newProp.title;
                  }

                  break;

                case 'target':
                  if (this.hamburgerMode) {
                    this.unWireEvents(oldProp.target);
                    this.wireEvents();

                    if (this.orientation === 'Horizontal') {
                      if (!newProp.target) {
                        if (!this.element.previousElementSibling) {
                          _get2(_getPrototypeOf2(Menu.prototype), "createHeaderContainer", this).call(this);
                        }

                        this.element.previousElementSibling.classList.remove(VMENU);
                      } else {
                        this.element.previousElementSibling.classList.add(VMENU);
                      }

                      this.element.classList.add('e-hide-menu');
                    }
                  }

                  break;
              }
            }

            _get2(_getPrototypeOf2(Menu.prototype), "onPropertyChanged", this).call(this, newProp, oldProp);
          }
        }, {
          key: "createMenuItems",
          value: function createMenuItems(item) {
            var pIdField;
            var idx;
            var i;
            var items = this.items;
            pIdField = this.getField('parentId');

            if (item[pIdField]) {
              idx = this.getIndex(item[pIdField].toString(), true);

              for (i = 0; i < idx.length; i++) {
                if (!items[idx[i]].items) {
                  items[idx[i]].items = [];
                }

                items = items[idx[i]].items;
              }

              items.push(item);
            } else {
              this.items.push(item);
            }
          }
          /**
           * This method is used to open the Menu in hamburger mode.
           * @method open
           * @returns void
           */

        }, {
          key: "open",
          value: function open() {
            _get2(_getPrototypeOf2(Menu.prototype), "openHamburgerMenu", this).call(this);
          }
          /**
           * Closes the Menu if it is opened in hamburger mode.
           */

        }, {
          key: "close",
          value: function close() {
            _get2(_getPrototypeOf2(Menu.prototype), "closeHamburgerMenu", this).call(this);
          }
        }]);

        return Menu;
      }(MenuBase);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Horizontal')], Menu.prototype, "orientation", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Menu.prototype, "target", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Menu.prototype, "template", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Menu.prototype, "enableScrolling", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Menu.prototype, "hamburgerMode", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Menu')], Menu.prototype, "title", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Menu.prototype, "enableHtmlSanitizer", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        itemId: "id",
        text: "text",
        parentId: "parentId",
        iconCss: "iconCss",
        url: "url",
        separator: "separator",
        children: "items"
      }, FieldSettings)], Menu.prototype, "fields", void 0);

      Menu = __decorate$6([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Menu);
      /**
       * Menu modules
       */

      var __decorate$7 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var CLS_TAB = 'e-tab';
      var CLS_HEADER$1 = 'e-tab-header';
      var CLS_BLA_TEM = 'blazor-template';
      var CLS_CONTENT$1 = 'e-content';
      var CLS_NEST$1 = 'e-nested';
      var CLS_ITEMS$1 = 'e-items';
      var CLS_ITEM$2 = 'e-item';
      var CLS_TEMPLATE$1 = 'e-template';
      var CLS_RTL$4 = 'e-rtl';
      var CLS_ACTIVE$1 = 'e-active';
      var CLS_DISABLE$4 = 'e-disable';
      var CLS_HIDDEN$1 = 'e-hidden';
      var CLS_FOCUS = 'e-focused';
      var CLS_ICONS = 'e-icons';
      var CLS_ICON = 'e-icon';
      var CLS_ICON_TAB = 'e-icon-tab';
      var CLS_ICON_CLOSE = 'e-close-icon';
      var CLS_CLOSE_SHOW = 'e-close-show';
      var CLS_TEXT = 'e-tab-text';
      var CLS_INDICATOR = 'e-indicator';
      var CLS_WRAP = 'e-tab-wrap';
      var CLS_TEXT_WRAP = 'e-text-wrap';
      var CLS_TAB_ICON = 'e-tab-icon';
      var CLS_TB_ITEMS = 'e-toolbar-items';
      var CLS_TB_ITEM = 'e-toolbar-item';
      var CLS_TB_POP = 'e-toolbar-pop';
      var CLS_TB_POPUP = 'e-toolbar-popup';
      var CLS_HOR_NAV = 'e-hor-nav';
      var CLS_POPUP_OPEN = 'e-popup-open';
      var CLS_POPUP_CLOSE = 'e-popup-close';
      var CLS_PROGRESS = 'e-progress';
      var CLS_IGNORE = 'e-ignore';
      var CLS_OVERLAY$2 = 'e-overlay';
      var CLS_HSCRCNT = 'e-hscroll-content';
      var CLS_VSCRCNT = 'e-vscroll-content';
      var CLS_VTAB = 'e-vertical-tab';
      var CLS_VERTICAL$1 = 'e-vertical';
      var CLS_VLEFT = 'e-vertical-left';
      var CLS_VRIGHT = 'e-vertical-right';
      var CLS_HBOTTOM = 'e-horizontal-bottom';
      var CLS_FILL = 'e-fill-mode';
      /**
       * Objects used for configuring the Tab selecting item action properties.
       */

      var TabActionSettings = /*#__PURE__*/function (_syncfusion_ej2_base_13) {
        _inherits2(TabActionSettings, _syncfusion_ej2_base_13);

        var _super23 = _createSuper(TabActionSettings);

        function TabActionSettings() {
          _classCallCheck2(this, TabActionSettings);

          return _super23.apply(this, arguments);
        }

        return TabActionSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('SlideLeftIn')], TabActionSettings.prototype, "effect", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(600)], TabActionSettings.prototype, "duration", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('ease')], TabActionSettings.prototype, "easing", void 0);
      /**
       * Objects used for configuring the Tab animation properties.
       */


      var TabAnimationSettings = /*#__PURE__*/function (_syncfusion_ej2_base_14) {
        _inherits2(TabAnimationSettings, _syncfusion_ej2_base_14);

        var _super24 = _createSuper(TabAnimationSettings);

        function TabAnimationSettings() {
          _classCallCheck2(this, TabAnimationSettings);

          return _super24.apply(this, arguments);
        }

        return TabAnimationSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        effect: 'SlideLeftIn',
        duration: 600,
        easing: 'ease'
      }, TabActionSettings)], TabAnimationSettings.prototype, "previous", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        effect: 'SlideRightIn',
        duration: 600,
        easing: 'ease'
      }, TabActionSettings)], TabAnimationSettings.prototype, "next", void 0);
      /**
       * Objects used for configuring the Tab item header properties.
       */


      var Header = /*#__PURE__*/function (_syncfusion_ej2_base_15) {
        _inherits2(Header, _syncfusion_ej2_base_15);

        var _super25 = _createSuper(Header);

        function Header() {
          _classCallCheck2(this, Header);

          return _super25.apply(this, arguments);
        }

        return Header;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Header.prototype, "text", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Header.prototype, "iconCss", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('left')], Header.prototype, "iconPosition", void 0);
      /**
       * An array of object that is used to configure the Tab.
       */


      var TabItem = /*#__PURE__*/function (_syncfusion_ej2_base_16) {
        _inherits2(TabItem, _syncfusion_ej2_base_16);

        var _super26 = _createSuper(TabItem);

        function TabItem() {
          _classCallCheck2(this, TabItem);

          return _super26.apply(this, arguments);
        }

        return TabItem;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, Header)], TabItem.prototype, "header", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TabItem.prototype, "headerTemplate", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], TabItem.prototype, "content", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], TabItem.prototype, "cssClass", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TabItem.prototype, "disabled", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], TabItem.prototype, "visible", void 0);
      /**
       * Tab is a content panel to show multiple contents in a single space, one at a time.
       * Each Tab item has an associated content, that will be displayed based on the active Tab header item.
       * ```html
       * <div id="tab"></div>
       * <script>
       *   var tabObj = new Tab();
       *   tab.appendTo("#tab");
       * </script>
       * ```
       */


      var Tab = /*#__PURE__*/function (_syncfusion_ej2_base_17) {
        _inherits2(Tab, _syncfusion_ej2_base_17);

        var _super27 = _createSuper(Tab);

        /**
         * Initializes a new instance of the Tab class.
         * @param options  - Specifies Tab model properties as options.
         * @param element  - Specifies the element that is rendered as a Tab.
         */
        function Tab(options, element) {
          var _this65;

          _classCallCheck2(this, Tab);

          _this65 = _super27.call(this, options, element);
          _this65.show = {};
          _this65.hide = {};
          _this65.maxHeight = 0;
          _this65.title = 'Close';
          _this65.lastIndex = 0;
          _this65.isAdd = false;
          _this65.isIconAlone = false;
          _this65.resizeContext = _this65.refreshActElePosition.bind(_assertThisInitialized2(_this65));
          /**
           * Contains the keyboard configuration of the Tab.
           */

          _this65.keyConfigs = {
            tab: 'tab',
            home: 'home',
            end: 'end',
            enter: 'enter',
            space: 'space',
            "delete": 'delete',
            moveLeft: 'leftarrow',
            moveRight: 'rightarrow',
            moveUp: 'uparrow',
            moveDown: 'downarrow'
          };
          return _this65;
        }
        /**
         * Removes the component from the DOM and detaches all its related event handlers, attributes and classes.
         * @returns void
         */


        _createClass2(Tab, [{
          key: "destroy",
          value: function destroy() {
            var _this66 = this;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tbObj)) {
              this.tbObj.destroy();
            }

            this.unWireEvents();
            ['role', 'aria-disabled', 'aria-activedescendant', 'tabindex', 'aria-orientation'].forEach(function (val) {
              _this66.element.removeAttribute(val);
            });
            this.expTemplateContent();

            if (!this.isTemplate) {
              while (this.element.firstElementChild) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.element.firstElementChild);
              }
            } else {
              var cntEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);
              this.element.classList.remove(CLS_TEMPLATE$1);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cntEle)) {
                cntEle.innerHTML = this.cnt;
              }
            }

            _get2(_getPrototypeOf2(Tab.prototype), "destroy", this).call(this);

            this.trigger('destroyed');
          }
          /**
           * Refresh the tab component
           */

        }, {
          key: "refresh",
          value: function refresh() {
            if (!this.isServerRendered) {
              _get2(_getPrototypeOf2(Tab.prototype), "refresh", this).call(this);
            } else if (this.isServerRendered && this.loadOn !== 'Dynamic') {
              this.setActiveBorder();
            }
          }
          /**
           * Initialize component
           * @private
           */

        }, {
          key: "preRender",
          value: function preRender() {
            var nested = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, '.' + CLS_CONTENT$1);
            this.prevIndex = 0;
            this.isNested = false;
            this.isPopup = false;
            this.initRender = true;
            this.isSwipeed = false;
            this.itemIndexArray = [];
            this.templateEle = [];

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nested)) {
              nested.parentElement.classList.add(CLS_NEST$1);
              this.isNested = true;
            }

            var name = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name;
            var css = name === 'msie' ? 'e-ie' : name === 'edge' ? 'e-edge' : name === 'safari' ? 'e-safari' : '';
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
              'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width),
              'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height)
            });
            this.setCssClass(this.element, this.cssClass, true);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              role: 'tablist',
              'aria-disabled': 'false',
              'aria-activedescendant': ''
            });
            this.setCssClass(this.element, css, true);
            this.updatePopAnimationConfig();
          }
          /**
           * Initialize the component rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.btnCls = this.createElement('span', {
              className: CLS_ICONS + ' ' + CLS_ICON_CLOSE,
              attrs: {
                title: this.title
              }
            });
            this.tabId = this.element.id.length > 0 ? '-' + this.element.id : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getRandomId"])();
            this.renderContainer();
            this.wireEvents();
            this.initRender = false;
          }
        }, {
          key: "renderContainer",
          value: function renderContainer() {
            if (this.isServerRendered) {
              this.isTemplate = false;
              return;
            }

            var ele = this.element;

            if (this.items.length > 0 && ele.children.length === 0) {
              ele.appendChild(this.createElement('div', {
                className: CLS_CONTENT$1
              }));
              this.setOrientation(this.headerPlacement, this.createElement('div', {
                className: CLS_HEADER$1
              }));
              this.isTemplate = false;
            } else if (this.element.children.length > 0) {
              this.isTemplate = true;
              ele.classList.add(CLS_TEMPLATE$1);
              var header = ele.querySelector('.' + CLS_HEADER$1);

              if (header && this.headerPlacement === 'Bottom') {
                this.setOrientation(this.headerPlacement, header);
              }
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER$1, this.element)) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT$1, this.element))) {
              this.renderHeader();
              this.tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEMS, this.element);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tbItems)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.tbItems, {
                  selector: '.e-tab-wrap'
                });
              }

              this.renderContent();

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element).length > 0) {
                var scrCnt;
                this.tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEMS, this.element);
                this.bdrLine = this.createElement('div', {
                  className: CLS_INDICATOR + ' ' + CLS_HIDDEN$1 + ' ' + CLS_IGNORE
                });
                scrCnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + this.scrCntClass, this.tbItems);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(scrCnt)) {
                  scrCnt.insertBefore(this.bdrLine, scrCnt.firstChild);
                } else {
                  this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstChild);
                }

                this.setContentHeight(true);
                this.select(this.selectedItem);
              }

              this.setRTL(this.enableRtl);
            }
          }
        }, {
          key: "serverItemsChanged",
          value: function serverItemsChanged() {
            this.enableAnimation = false;
            this.setActive(this.selectedItem, true);

            if (this.loadOn !== 'Dynamic' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cntEle)) {
              var itemCollection = [].slice.call(this.cntEle.children);
              var content = CLS_CONTENT$1 + this.tabId + '_' + this.selectedItem;
              itemCollection.forEach(function (item) {
                if (item.classList.contains(CLS_ACTIVE$1) && item.id !== content) {
                  item.classList.remove(CLS_ACTIVE$1);
                }

                if (item.id === content) {
                  item.classList.add(CLS_ACTIVE$1);
                }
              });
              this.prevIndex = this.selectedItem;
              this.triggerAnimation(CLS_ITEM$2 + this.tabId + '_' + this.selectedItem, false);
            }

            this.enableAnimation = true;
          }
        }, {
          key: "headerReady",
          value: function headerReady() {
            this.initRender = true;
            this.hdrEle = this.getTabHeader();
            this.setOrientation(this.headerPlacement, this.hdrEle);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.hdrEle)) {
              this.tbObj = this.hdrEle && this.hdrEle.ej2_instances[0];
            }

            this.tbObj.clicked = this.clickHandler.bind(this);
            this.tbObj.on('onItemsChanged', this.serverItemsChanged.bind(this));
            this.tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEMS, this.element);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tbItems)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.tbItems, {
                selector: '.e-tab-wrap'
              });
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element).length > 0) {
              var scrollCnt;
              this.bdrLine = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_INDICATOR + '.' + CLS_IGNORE, this.element);
              scrollCnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + this.scrCntClass, this.tbItems);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(scrollCnt)) {
                scrollCnt.insertBefore(this.bdrLine, scrollCnt.firstElementChild);
              } else {
                this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstElementChild);
              }

              this.select(this.selectedItem);
            }

            this.cntEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cntEle)) {
              this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.cntEle, {
                swipe: this.swipeHandler.bind(this)
              });
            }

            if (this.loadOn === 'Demand') {
              var id = this.setActiveContent();
              this.triggerAnimation(id, false);
            }

            this.initRender = false;
            this.renderComplete();
          }
        }, {
          key: "setActiveContent",
          value: function setActiveContent() {
            var id = CLS_ITEM$2 + this.tabId + '_' + this.selectedItem;
            var item = this.getTrgContent(this.cntEle, this.extIndex(id));

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
              item.classList.add(CLS_ACTIVE$1);
            }

            return id;
          }
        }, {
          key: "renderHeader",
          value: function renderHeader() {
            var _this67 = this;

            var hdrPlace = this.headerPlacement;
            var tabItems = [];
            this.hdrEle = this.getTabHeader();
            this.addVerticalClass();

            if (!this.isTemplate) {
              tabItems = this.parseObject(this.items, 0);
            } else {
              if (this.element.children.length > 1 && this.element.children[1].classList.contains(CLS_HEADER$1)) {
                this.setProperties({
                  headerPlacement: 'Bottom'
                }, true);
              }

              var count = this.hdrEle.children.length;
              var hdrItems = [];

              for (var i = 0; i < count; i++) {
                hdrItems.push(this.hdrEle.children.item(i).innerHTML);
              }

              if (count > 0) {
                while (this.hdrEle.firstElementChild) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.hdrEle.firstElementChild);
                }

                var _tabItems = this.createElement('div', {
                  className: CLS_ITEMS$1
                });

                this.hdrEle.appendChild(_tabItems);
                hdrItems.forEach(function (item, index) {
                  _this67.lastIndex = index;
                  var attr = {
                    className: CLS_ITEM$2,
                    id: CLS_ITEM$2 + _this67.tabId + '_' + index,
                    attrs: {
                      role: 'tab',
                      'aria-controls': CLS_CONTENT$1 + _this67.tabId + '_' + index,
                      'aria-selected': 'false'
                    }
                  };

                  var txt = _this67.createElement('span', {
                    className: CLS_TEXT,
                    innerHTML: item,
                    attrs: {
                      'role': 'presentation'
                    }
                  }).outerHTML;

                  var cont = _this67.createElement('div', {
                    className: CLS_TEXT_WRAP,
                    innerHTML: txt + _this67.btnCls.outerHTML
                  }).outerHTML;

                  var wrap = _this67.createElement('div', {
                    className: CLS_WRAP,
                    innerHTML: cont,
                    attrs: {
                      tabIndex: '-1'
                    }
                  });

                  _tabItems.appendChild(_this67.createElement('div', attr));

                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_ITEM$2, _tabItems)[index].appendChild(wrap);
                });
              }
            }

            this.tbObj = new Toolbar({
              width: hdrPlace === 'Left' || hdrPlace === 'Right' ? 'auto' : '100%',
              height: hdrPlace === 'Left' || hdrPlace === 'Right' ? '100%' : 'auto',
              overflowMode: this.overflowMode,
              items: tabItems.length !== 0 ? tabItems : [],
              clicked: this.clickHandler.bind(this),
              scrollStep: this.scrollStep,
              enableHtmlSanitizer: this.enableHtmlSanitizer
            });
            this.tbObj.isStringTemplate = true;
            this.tbObj.createElement = this.createElement;
            this.tbObj.appendTo(this.hdrEle);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.hdrEle, {
              'aria-label': 'tab-header'
            });
            this.updateOrientationAttribute();
            this.setCloseButton(this.showCloseButton);
          }
        }, {
          key: "renderContent",
          value: function renderContent() {
            this.cntEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT$1, this.element);
            var hdrItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element);

            if (this.isTemplate) {
              this.cnt = this.cntEle.children.length > 0 ? this.cntEle.innerHTML : '';
              var contents = this.cntEle.children;

              for (var i = 0; i < hdrItem.length; i++) {
                if (contents.length - 1 >= i) {
                  contents.item(i).className += CLS_ITEM$2;
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(contents.item(i), {
                    'role': 'tabpanel',
                    'aria-labelledby': CLS_ITEM$2 + this.tabId + '_' + i
                  });
                  contents.item(i).id = CLS_CONTENT$1 + this.tabId + '_' + i;
                }
              }
            }
          }
        }, {
          key: "reRenderItems",
          value: function reRenderItems() {
            this.renderContainer();

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cntEle)) {
              this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.cntEle, {
                swipe: this.swipeHandler.bind(this)
              });
            }
          }
        }, {
          key: "parseObject",
          value: function parseObject(items, index) {
            var _this68 = this;

            var tbCount = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element).length;
            var tItems = [];
            var txtWrapEle;
            var spliceArray = [];
            items.forEach(function (item, i) {
              var pos = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header.iconPosition) ? '' : item.header.iconPosition;
              var css = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header.iconCss) ? '' : item.header.iconCss;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.headerTemplate) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header.text) || item.header.text.length === 0 && css === '')) {
                spliceArray.push(i);
                return;
              }

              var txt = item.headerTemplate || item.header.text;

              if (typeof txt === 'string' && _this68.enableHtmlSanitizer) {
                txt = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(txt);
              }

              _this68.lastIndex = tbCount === 0 ? i : _this68.isReplace ? index + i : _this68.lastIndex + 1;
              var disabled = item.disabled ? ' ' + CLS_DISABLE$4 + ' ' + CLS_OVERLAY$2 : '';
              var hidden = item.visible === false ? ' ' + CLS_HIDDEN$1 : '';
              txtWrapEle = _this68.createElement('div', {
                className: CLS_TEXT,
                attrs: {
                  'role': 'presentation'
                }
              });
              var tHtml = txt instanceof Object ? txt.outerHTML : txt;
              var txtEmpty = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tHtml) && tHtml !== '';

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(txt.tagName)) {
                txtWrapEle.appendChild(txt);
              } else {
                _this68.headerTextCompile(txtWrapEle, txt, i);
              }

              var tEle;

              var icon = _this68.createElement('span', {
                className: CLS_ICONS + ' ' + CLS_TAB_ICON + ' ' + CLS_ICON + '-' + pos + ' ' + css
              });

              var tCont = _this68.createElement('div', {
                className: CLS_TEXT_WRAP
              });

              tCont.appendChild(txtWrapEle);

              if (txt !== '' && txt !== undefined && css !== '') {
                if (pos === 'left' || pos === 'top') {
                  tCont.insertBefore(icon, tCont.firstElementChild);
                } else {
                  tCont.appendChild(icon);
                }

                tEle = txtWrapEle;
                _this68.isIconAlone = false;
              } else {
                tEle = css === '' ? txtWrapEle : icon;

                if (tEle === icon) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(txtWrapEle);
                  tCont.appendChild(icon);
                  _this68.isIconAlone = true;
                }
              }

              var wrapAttrs = item.disabled ? {} : {
                tabIndex: '-1'
              };
              tCont.appendChild(_this68.btnCls.cloneNode(true));

              var wrap = _this68.createElement('div', {
                className: CLS_WRAP,
                attrs: wrapAttrs
              });

              wrap.appendChild(tCont);

              if (_this68.itemIndexArray === []) {
                _this68.itemIndexArray.push(CLS_ITEM$2 + _this68.tabId + '_' + _this68.lastIndex);
              } else {
                _this68.itemIndexArray.splice(index + i, 0, CLS_ITEM$2 + _this68.tabId + '_' + _this68.lastIndex);
              }

              var attrObj = {
                id: CLS_ITEM$2 + _this68.tabId + '_' + _this68.lastIndex,
                role: 'tab',
                'aria-selected': 'false'
              };
              var tItem = {
                htmlAttributes: attrObj,
                template: wrap
              };
              tItem.cssClass = (item.cssClass !== undefined ? item.cssClass : ' ') + ' ' + disabled + ' ' + hidden + (css !== '' ? 'e-i' + pos : '') + ' ' + (!txtEmpty ? CLS_ICON : '');

              if (pos === 'top' || pos === 'bottom') {
                _this68.element.classList.add('e-vertical-icon');
              }

              tItems.push(tItem);
              i++;
            });

            if (!this.isAdd) {
              spliceArray.forEach(function (spliceItemIndex) {
                _this68.items.splice(spliceItemIndex, 1);
              });
            }

            this.isIconAlone ? this.element.classList.add(CLS_ICON_TAB) : this.element.classList.remove(CLS_ICON_TAB);
            return tItems;
          }
        }, {
          key: "removeActiveClass",
          value: function removeActiveClass() {
            var tabHeader = this.getTabHeader();

            if (tabHeader) {
              var tabItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1, tabHeader);
              [].slice.call(tabItems).forEach(function (node) {
                return node.classList.remove(CLS_ACTIVE$1);
              });
            }
          }
        }, {
          key: "checkPopupOverflow",
          value: function checkPopupOverflow(ele) {
            this.tbPop = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_POP, this.element);
            var popIcon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-hor-nav', this.element);
            var tbrItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS, this.element);
            var lastChild = tbrItems.lastChild;
            var isOverflow = false;

            if (!this.isVertical() && (this.enableRtl && popIcon.offsetLeft + popIcon.offsetWidth > tbrItems.offsetLeft || !this.enableRtl && popIcon.offsetLeft < tbrItems.offsetWidth)) {
              isOverflow = true;
            } else if (this.isVertical() && popIcon.offsetTop < lastChild.offsetTop + lastChild.offsetHeight) {
              isOverflow = true;
            }

            if (isOverflow) {
              ele.classList.add(CLS_TB_POPUP);
              this.tbPop.insertBefore(ele, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_POPUP, this.tbPop)[0]);
            }

            return true;
          }
        }, {
          key: "popupHandler",
          value: function popupHandler(target) {
            var ripEle = target.querySelector('.e-ripple-element');

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ripEle)) {
              ripEle.outerHTML = '';
              target.querySelector('.' + CLS_WRAP).classList.remove('e-ripple');
            }

            this.tbItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEMS + ' .' + CLS_TB_ITEM, this.hdrEle);
            var lastChild = this.tbItem[this.tbItem.length - 1];

            if (this.tbItem.length !== 0) {
              target.classList.remove(CLS_TB_POPUP);
              target.removeAttribute('style');
              this.tbItems.appendChild(target);
              this.actEleId = target.id;

              if (this.checkPopupOverflow(lastChild)) {
                var prevEle = this.tbItems.lastChild.previousElementSibling;
                this.checkPopupOverflow(prevEle);
              }

              this.isPopup = true;
            }

            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.tbItems).length - 1;
          }
        }, {
          key: "updateOrientationAttribute",
          value: function updateOrientationAttribute() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              'aria-orientation': this.isVertical() ? 'vertical' : 'horizontal'
            });
          }
        }, {
          key: "setCloseButton",
          value: function setCloseButton(val) {
            var trg = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER$1, this.element);
            val === true ? trg.classList.add(CLS_CLOSE_SHOW) : trg.classList.remove(CLS_CLOSE_SHOW);
            this.tbObj.refreshOverflow();
            this.refreshActElePosition();
          }
        }, {
          key: "prevCtnAnimation",
          value: function prevCtnAnimation(prev, current) {
            var animation;
            var checkRTL = this.enableRtl || this.element.classList.contains(CLS_RTL$4);

            if (this.isPopup || prev <= current) {
              if (this.animation.previous.effect === 'SlideLeftIn') {
                animation = {
                  name: 'SlideLeftOut',
                  duration: this.animation.previous.duration,
                  timingFunction: this.animation.previous.easing
                };
              } else {
                animation = null;
              }
            } else {
              if (this.animation.next.effect === 'SlideRightIn') {
                animation = {
                  name: 'SlideRightOut',
                  duration: this.animation.next.duration,
                  timingFunction: this.animation.next.easing
                };
              } else {
                animation = null;
              }
            }

            return animation;
          }
        }, {
          key: "triggerPrevAnimation",
          value: function triggerPrevAnimation(oldCnt, prevIndex) {
            var _this69 = this;

            var animateObj = this.prevCtnAnimation(prevIndex, this.selectedItem);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(animateObj)) {
              animateObj.begin = function () {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(oldCnt, {
                  'position': 'absolute'
                });
                oldCnt.classList.add(CLS_PROGRESS);
                oldCnt.classList.add('e-view');
              };

              animateObj.end = function () {
                oldCnt.style.display = 'none';
                oldCnt.classList.remove(CLS_ACTIVE$1);
                oldCnt.classList.remove(CLS_PROGRESS);
                oldCnt.classList.remove('e-view');
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(oldCnt, {
                  'display': '',
                  'position': ''
                });

                if (oldCnt.childNodes.length === 0 && !_this69.isTemplate) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(oldCnt);
                }
              };

              new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](animateObj).animate(oldCnt);
            } else {
              oldCnt.classList.remove(CLS_ACTIVE$1);
            }
          }
        }, {
          key: "triggerAnimation",
          value: function triggerAnimation(id, value) {
            var _this70 = this;

            var prevIndex = this.prevIndex;
            var oldCnt;
            var newCnt;

            if (!this.isServerRendered || this.isServerRendered && this.loadOn !== 'Dynamic') {
              var itemCollection = [].slice.call(this.element.querySelector('.' + CLS_CONTENT$1).children);
              itemCollection.forEach(function (item) {
                if (item.id === _this70.prevActiveEle) {
                  oldCnt = item;
                }
              });
              var prevEle = this.tbItem[prevIndex];
              newCnt = this.getTrgContent(this.cntEle, this.extIndex(id));

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldCnt) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(prevEle)) {
                var idNo = this.extIndex(prevEle.id);
                oldCnt = this.getTrgContent(this.cntEle, idNo);
              }
            } else {
              newCnt = this.cntEle.firstElementChild;
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newCnt)) {
              this.prevActiveEle = newCnt.id;
            }

            if (this.initRender || value === false || this.animation === {} || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.animation)) {
              if (oldCnt && oldCnt !== newCnt) {
                oldCnt.classList.remove(CLS_ACTIVE$1);
              }

              return;
            }

            var cnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT$1, this.element);
            var animateObj;

            if (this.prevIndex > this.selectedItem && !this.isPopup) {
              var openEff = this.animation.previous.effect;
              animateObj = {
                name: openEff === 'None' ? '' : openEff !== 'SlideLeftIn' ? openEff : 'SlideLeftIn',
                duration: this.animation.previous.duration,
                timingFunction: this.animation.previous.easing
              };
            } else if (this.isPopup || this.prevIndex < this.selectedItem || this.prevIndex === this.selectedItem) {
              var clsEff = this.animation.next.effect;
              animateObj = {
                name: clsEff === 'None' ? '' : clsEff !== 'SlideRightIn' ? clsEff : 'SlideRightIn',
                duration: this.animation.next.duration,
                timingFunction: this.animation.next.easing
              };
            }

            animateObj.progress = function () {
              cnt.classList.add(CLS_PROGRESS);

              _this70.setActiveBorder();
            };

            animateObj.end = function () {
              cnt.classList.remove(CLS_PROGRESS);
              newCnt.classList.add(CLS_ACTIVE$1);
            };

            if (!this.initRender && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldCnt)) {
              this.triggerPrevAnimation(oldCnt, prevIndex);
            }

            this.isPopup = false;

            if (animateObj.name === '') {
              newCnt.classList.add(CLS_ACTIVE$1);
            } else {
              new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](animateObj).animate(newCnt);
            }
          }
        }, {
          key: "keyPressed",
          value: function keyPressed(trg) {
            var trgParent = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trg, '.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEM);
            var trgIndex = this.getEleIndex(trgParent);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popEle) && trg.classList.contains('e-hor-nav')) {
              this.popEle.classList.contains(CLS_POPUP_OPEN) ? this.popObj.hide(this.hide) : this.popObj.show(this.show);
            } else if (trg.classList.contains('e-scroll-nav')) {
              trg.click();
            } else {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trgParent) && trgParent.classList.contains(CLS_ACTIVE$1) === false) {
                this.select(trgIndex);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popEle)) {
                  this.popObj.hide(this.hide);
                }
              }
            }
          }
        }, {
          key: "getTabHeader",
          value: function getTabHeader() {
            var headers = [].slice.call(this.element.children).filter(function (e) {
              return e.classList.contains(CLS_HEADER$1);
            });

            if (headers.length > 0) {
              return headers[0];
            } else {
              var wrap = [].slice.call(this.element.children).filter(function (e) {
                return !e.classList.contains(CLS_BLA_TEM);
              })[0];

              if (!wrap) {
                return undefined;
              }

              return [].slice.call(wrap.children).filter(function (e) {
                return e.classList.contains(CLS_HEADER$1);
              })[0];
            }
          }
        }, {
          key: "getEleIndex",
          value: function getEleIndex(item) {
            return Array.prototype.indexOf.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.getTabHeader()), item);
          }
        }, {
          key: "extIndex",
          value: function extIndex(id) {
            return id.replace(CLS_ITEM$2 + this.tabId + '_', '');
          }
        }, {
          key: "expTemplateContent",
          value: function expTemplateContent() {
            var _this71 = this;

            this.templateEle.forEach(function (eleStr) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this71.element.querySelector(eleStr))) {
                document.body.appendChild(_this71.element.querySelector(eleStr)).style.display = 'none';
              }
            });
          }
        }, {
          key: "templateCompile",
          value: function templateCompile(ele, cnt, index) {
            var tempEle = this.createElement('div');
            this.compileElement(tempEle, cnt, 'content', index);

            if (tempEle.childNodes.length !== 0) {
              ele.appendChild(tempEle);
            }
          }
        }, {
          key: "compileElement",
          value: function compileElement(ele, val, prop, index) {
            var templateFn;

            if (typeof val === 'string' && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && val.indexOf('<div>Blazor') !== 0) {
              val = val.trim();
              ele.innerHTML = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(val);
            } else {
              templateFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(val);
            }

            var templateFUN;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(templateFn)) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isStringTemplate && val.indexOf('<div>Blazor') === 0) {
                templateFUN = templateFn({}, this, prop, this.element.id + index + '_' + prop, this.isStringTemplate);
              } else {
                templateFUN = templateFn({}, this, prop);
              }
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(templateFn) && templateFUN.length > 0) {
              [].slice.call(templateFUN).forEach(function (el) {
                ele.appendChild(el);
              });
            }
          }
        }, {
          key: "headerTextCompile",
          value: function headerTextCompile(element, text, index) {
            this.compileElement(element, text, 'headerTemplate', index);
          }
        }, {
          key: "getContent",
          value: function getContent(ele, cnt, callType, index) {
            var eleStr;

            if (typeof cnt === 'string' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cnt.innerHTML)) {
              if (typeof cnt === 'string' && this.enableHtmlSanitizer) {
                cnt = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(cnt);
              }

              if (cnt[0] === '.' || cnt[0] === '#') {
                if (document.querySelectorAll(cnt).length) {
                  var eleVal = document.querySelector(cnt);
                  eleStr = eleVal.outerHTML.trim();

                  if (callType === 'clone') {
                    ele.appendChild(eleVal.cloneNode(true));
                  } else {
                    ele.appendChild(eleVal);
                    eleVal.style.display = '';
                  }
                } else {
                  this.templateCompile(ele, cnt, index);
                }
              } else {
                this.templateCompile(ele, cnt, index);
              }
            } else {
              ele.appendChild(cnt);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eleStr)) {
              if (this.templateEle.indexOf(cnt.toString()) === -1) {
                this.templateEle.push(cnt.toString());
              }
            }
          }
        }, {
          key: "getTrgContent",
          value: function getTrgContent(cntEle, no) {
            var ele;

            if (this.element.classList.contains(CLS_NEST$1)) {
              ele = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_NEST$1 + '> .' + CLS_CONTENT$1 + ' > #' + CLS_CONTENT$1 + this.tabId + '_' + no, this.element);
            } else {
              ele = this.findEle(cntEle.children, CLS_CONTENT$1 + this.tabId + '_' + no);
            }

            return ele;
          }
        }, {
          key: "findEle",
          value: function findEle(items, key) {
            var ele;

            for (var i = 0; i < items.length; i++) {
              if (items[i].id === key) {
                ele = items[i];
                break;
              }
            }

            return ele;
          }
        }, {
          key: "isVertical",
          value: function isVertical() {
            var isVertical = this.headerPlacement === 'Left' || this.headerPlacement === 'Right' ? true : false;
            this.scrCntClass = isVertical ? CLS_VSCRCNT : CLS_HSCRCNT;
            return isVertical;
          }
        }, {
          key: "addVerticalClass",
          value: function addVerticalClass() {
            if (this.isVertical()) {
              var tbPos = this.headerPlacement === 'Left' ? CLS_VLEFT : CLS_VRIGHT;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.hdrEle], [CLS_VERTICAL$1, tbPos]);

              if (!this.element.classList.contains(CLS_NEST$1)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [CLS_VTAB, tbPos]);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.hdrEle], [CLS_VTAB, tbPos]);
              }
            }

            if (this.headerPlacement === 'Bottom') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.hdrEle], [CLS_HBOTTOM]);
            }
          }
        }, {
          key: "updatePopAnimationConfig",
          value: function updatePopAnimationConfig() {
            this.show = {
              name: this.isVertical() ? 'FadeIn' : 'SlideDown',
              duration: 100
            };
            this.hide = {
              name: this.isVertical() ? 'FadeOut' : 'SlideUp',
              duration: 100
            };
          }
        }, {
          key: "changeOrientation",
          value: function changeOrientation(place) {
            this.setOrientation(place, this.hdrEle);
            var isVertical = this.hdrEle.classList.contains(CLS_VERTICAL$1) ? true : false;
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [CLS_VTAB]);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.hdrEle], [CLS_VERTICAL$1, CLS_VLEFT, CLS_VRIGHT]);

            if (isVertical !== this.isVertical()) {
              this.changeToolbarOrientation();
            }

            this.addVerticalClass();
            this.updateOrientationAttribute();
            this.setActiveBorder();
            this.focusItem();
          }
        }, {
          key: "focusItem",
          value: function focusItem() {
            var curActItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(' #' + CLS_ITEM$2 + this.tabId + '_' + this.selectedItem, this.hdrEle);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(curActItem)) {
              curActItem.firstElementChild.focus();
            }
          }
        }, {
          key: "serverChangeOrientation",
          value: function serverChangeOrientation(newProp, oldProp) {
            this.setOrientation(newProp, this.hdrEle);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [CLS_VTAB]);
            var newValue = newProp === 'Left' || newProp === 'Right';
            var oldValue = oldProp === 'Left' || oldProp === 'Right';

            if (newValue !== oldValue) {
              this.changeToolbarOrientation();
            }

            if (this.isVertical()) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [CLS_VTAB]);
            }

            this.updateOrientationAttribute();
            this.setActiveBorder();
            this.focusItem();
          }
        }, {
          key: "changeToolbarOrientation",
          value: function changeToolbarOrientation() {
            this.tbObj.setProperties({
              height: this.isVertical() ? '100%' : 'auto',
              width: this.isVertical() ? 'auto' : '100%'
            }, true);
            this.tbObj.changeOrientation();
            this.updatePopAnimationConfig();
          }
        }, {
          key: "setOrientation",
          value: function setOrientation(place, ele) {
            var headerPos = Array.prototype.indexOf.call(this.element.children, ele);
            var contentPos = Array.prototype.indexOf.call(this.element.children, this.element.querySelector('.' + CLS_CONTENT$1));

            if (place === 'Bottom' && contentPos > headerPos) {
              this.element.appendChild(ele);
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([ele], [CLS_HBOTTOM]);
              this.element.insertBefore(ele, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT$1, this.element));
            }
          }
        }, {
          key: "setCssClass",
          value: function setCssClass(ele, cls, val) {
            if (cls === '') {
              return;
            }

            var list = cls.split(' ');

            for (var i = 0; i < list.length; i++) {
              if (val) {
                ele.classList.add(list[i]);
              } else {
                ele.classList.remove(list[i]);
              }
            }
          }
        }, {
          key: "setContentHeight",
          value: function setContentHeight(val) {
            if (this.element.classList.contains(CLS_FILL)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [CLS_FILL]);
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cntEle)) {
              return;
            }

            var hdrEle = this.getTabHeader();

            if (this.heightAdjustMode === 'None') {
              if (this.height === 'auto') {
                return;
              } else {
                if (!this.isVertical()) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.cntEle, {
                    'height': this.element.offsetHeight - hdrEle.offsetHeight + 'px'
                  });
                }
              }
            } else if (this.heightAdjustMode === 'Fill') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [CLS_FILL]);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                'height': '100%'
              });
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.cntEle, {
                'height': '100%'
              });
            } else if (this.heightAdjustMode === 'Auto') {
              if (this.isTemplate === true) {
                var cnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_CONTENT$1 + ' > .' + CLS_ITEM$2, this.element);

                for (var i = 0; i < cnt.length; i++) {
                  cnt[i].setAttribute('style', 'display:block; visibility: visible');
                  this.maxHeight = Math.max(this.maxHeight, this.getHeight(cnt[i]));
                  cnt[i].style.removeProperty('display');
                  cnt[i].style.removeProperty('visibility');
                }
              } else {
                this.cntEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT$1, this.element);

                if (val === true) {
                  this.cntEle.appendChild(this.createElement('div', {
                    id: CLS_CONTENT$1 + this.tabId + '_' + 0,
                    className: CLS_ITEM$2 + ' ' + CLS_ACTIVE$1,
                    attrs: {
                      'role': 'tabpanel',
                      'aria-labelledby': CLS_ITEM$2 + this.tabId + '_' + 0
                    }
                  }));
                }

                var ele = this.cntEle.children.item(0);

                for (var _i23 = 0; _i23 < this.items.length; _i23++) {
                  this.getContent(ele, this.items[_i23].content, 'clone', _i23);
                  this.maxHeight = Math.max(this.maxHeight, this.getHeight(ele));

                  while (ele.firstChild) {
                    ele.removeChild(ele.firstChild);
                  }
                }

                this.clearTemplate(['content']);
                this.templateEle = [];
                this.getContent(ele, this.items[0].content, 'render', 0);
                ele.classList.remove(CLS_ACTIVE$1);
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.cntEle, {
                'height': this.maxHeight + 'px'
              });
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.cntEle, {
                'height': 'auto'
              });
            }
          }
        }, {
          key: "getHeight",
          value: function getHeight(ele) {
            var cs = window.getComputedStyle(ele);
            return ele.offsetHeight + parseFloat(cs.getPropertyValue('padding-top')) + parseFloat(cs.getPropertyValue('padding-bottom')) + parseFloat(cs.getPropertyValue('margin-top')) + parseFloat(cs.getPropertyValue('margin-bottom'));
          }
        }, {
          key: "setActiveBorder",
          value: function setActiveBorder() {
            var bar;
            var scrollCnt;
            var trgHdrEle = this.getTabHeader();
            var trg = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1, trgHdrEle);

            if (trg === null) {
              return;
            }

            if (this.isServerRendered && trg.classList.contains(CLS_TB_POPUP)) {
              this.popupHandler(trg);
            }

            var root = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trg, '.' + CLS_TAB);

            if (this.element !== root) {
              return;
            }

            this.tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS, trgHdrEle);
            bar = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_INDICATOR, trgHdrEle);
            scrollCnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS + ' .' + this.scrCntClass, trgHdrEle);

            if (this.isVertical()) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(bar, {
                'left': '',
                'right': ''
              });
              var tbHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(scrollCnt) ? this.tbItems.offsetHeight : scrollCnt.offsetHeight;

              if (tbHeight !== 0) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(bar, {
                  'top': trg.offsetTop + 'px',
                  'height': trg.offsetHeight + 'px'
                });
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(bar, {
                  'top': 0,
                  'height': 0
                });
              }
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(bar, {
                'top': '',
                'height': ''
              });
              var tbWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(scrollCnt) ? this.tbItems.offsetWidth : scrollCnt.offsetWidth;

              if (tbWidth !== 0) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(bar, {
                  'left': trg.offsetLeft + 'px',
                  'right': tbWidth - (trg.offsetLeft + trg.offsetWidth) + 'px'
                });
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(bar, {
                  'left': 'auto',
                  'right': 'auto'
                });
              }
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.bdrLine)) {
              this.bdrLine.classList.remove(CLS_HIDDEN$1);
            }
          }
        }, {
          key: "setActive",
          value: function setActive(value) {
            var skipDataBind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            this.tbItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.getTabHeader());
            var trg = this.tbItem[value];

            if (this.isServerRendered && trg) {
              value = parseInt(trg.getAttribute('data-index'), 10);
            }

            if (value < 0 || isNaN(value) || this.tbItem.length === 0) {
              return;
            }

            if (value >= 0 && !skipDataBind) {
              this.allowServerDataBinding = false;
              this.setProperties({
                selectedItem: value
              }, true);
              this.allowServerDataBinding = true;

              if (!this.initRender) {
                this.serverDataBind();
              }
            }

            if (trg.classList.contains(CLS_ACTIVE$1)) {
              this.setActiveBorder();
              return;
            }

            if (!this.isTemplate) {
              var prev = this.tbItem[this.prevIndex];

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(prev)) {
                prev.removeAttribute('aria-controls');
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(trg, {
                'aria-controls': CLS_CONTENT$1 + this.tabId + '_' + value
              });
            }

            var id = trg.id;
            this.removeActiveClass();
            trg.classList.add(CLS_ACTIVE$1);
            trg.setAttribute('aria-selected', 'true');
            var no = Number(this.extIndex(id));

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.prevActiveEle)) {
              this.prevActiveEle = CLS_CONTENT$1 + this.tabId + '_' + no;
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              'aria-activedescendant': id
            });

            if (this.isTemplate) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT$1, this.element).children.length > 0) {
                var _trg = this.findEle(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT$1, this.element).children, CLS_CONTENT$1 + this.tabId + '_' + no);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_trg)) {
                  _trg.classList.add(CLS_ACTIVE$1);
                }

                this.triggerAnimation(id, this.enableAnimation);
              }
            } else if (!this.isServerRendered || this.isServerRendered && this.loadOn === 'Init') {
              this.cntEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);
              var item = this.getTrgContent(this.cntEle, this.extIndex(id));

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
                this.cntEle.appendChild(this.createElement('div', {
                  id: CLS_CONTENT$1 + this.tabId + '_' + this.extIndex(id),
                  className: CLS_ITEM$2 + ' ' + CLS_ACTIVE$1,
                  attrs: {
                    role: 'tabpanel',
                    'aria-labelledby': CLS_ITEM$2 + this.tabId + '_' + this.extIndex(id)
                  }
                }));
                var eleTrg = this.getTrgContent(this.cntEle, this.extIndex(id));
                var itemIndex = Array.prototype.indexOf.call(this.itemIndexArray, id);
                this.getContent(eleTrg, this.items[itemIndex].content, 'render', itemIndex);
              } else {
                item.classList.add(CLS_ACTIVE$1);
              }

              this.triggerAnimation(id, this.enableAnimation);
            }

            this.setActiveBorder();
            this.refreshItemVisibility(trg);

            if (!this.initRender && !skipDataBind) {
              trg.firstElementChild.focus();
              var eventArg = {
                previousItem: this.prevItem,
                previousIndex: this.prevIndex,
                selectedItem: trg,
                selectedIndex: value,
                selectedContent: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + CLS_CONTENT$1 + this.tabId + '_' + this.selectingID, this.content),
                isSwiped: this.isSwipeed
              };
              this.trigger('selected', eventArg);
            }
          }
        }, {
          key: "contentReady",
          value: function contentReady() {
            var id = this.setActiveContent();
            this.triggerAnimation(id, this.enableAnimation);
          }
        }, {
          key: "setItems",
          value: function setItems(items) {
            this.isReplace = true;
            this.tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS, this.getTabHeader());
            this.tbObj.items = this.parseObject(items, 0);
            this.tbObj.dataBind();
            this.isReplace = false;
          }
        }, {
          key: "setRTL",
          value: function setRTL(value) {
            this.tbObj.enableRtl = value;
            this.tbObj.dataBind();
            this.setCssClass(this.element, CLS_RTL$4, value);
            this.refreshActiveBorder();
          }
        }, {
          key: "refreshActiveBorder",
          value: function refreshActiveBorder() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.bdrLine)) {
              this.bdrLine.classList.add(CLS_HIDDEN$1);
            }

            this.setActiveBorder();
          }
        }, {
          key: "showPopup",
          value: function showPopup(config) {
            var tbPop = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-popup.e-toolbar-pop', this.hdrEle);

            if (tbPop.classList.contains('e-popup-close')) {
              var tbPopObj = tbPop && tbPop.ej2_instances[0];
              tbPopObj.position.X = this.headerPlacement === 'Left' ? 'left' : 'right';
              tbPopObj.dataBind();
              tbPopObj.show(config);
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            window.addEventListener('resize', this.resizeContext);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseover', this.hoverHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keydown', this.spaceKeyDown, this);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cntEle)) {
              this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.cntEle, {
                swipe: this.swipeHandler.bind(this)
              });
            }

            this.keyModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.element, {
              keyAction: this.keyHandler.bind(this),
              keyConfigs: this.keyConfigs
            });
            this.tabKeyModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.element, {
              keyAction: this.keyHandler.bind(this),
              keyConfigs: {
                openPopup: 'shift+f10',
                tab: 'tab',
                shiftTab: 'shift+tab'
              },
              eventName: 'keydown'
            });
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            this.keyModule.destroy();
            this.tabKeyModule.destroy();

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cntEle)) {
              this.touchModule.destroy();
            }

            window.removeEventListener('resize', this.resizeContext);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseover', this.hoverHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keydown', this.spaceKeyDown);

            this.element.classList.remove(CLS_RTL$4);
            this.element.classList.remove(CLS_FOCUS);
          }
        }, {
          key: "clickHandler",
          value: function clickHandler(args) {
            this.element.classList.remove(CLS_FOCUS);
            var trg = args.originalEvent.target;
            var trgParent = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trg, '.' + CLS_TB_ITEM);
            var trgIndex = this.getEleIndex(trgParent);

            if (trg.classList.contains(CLS_ICON_CLOSE)) {
              this.removeTab(trgIndex);
            } else if (this.isVertical() && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trg, '.' + CLS_HOR_NAV)) {
              this.showPopup(this.show);
            } else {
              this.isPopup = false;

              if (this.isServerRendered && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trgParent)) {
                if (parseInt(trgParent.getAttribute('data-index'), 10) !== this.selectedItem) {
                  this.select(trgIndex);
                }
              } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trgParent) && (trgIndex !== this.selectedItem || trgIndex !== this.prevIndex)) {
                this.select(trgIndex);
              }
            }
          }
        }, {
          key: "swipeHandler",
          value: function swipeHandler(e) {
            if (e.velocity < 3 && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e.originalEvent.changedTouches)) {
              return;
            }

            if (e.originalEvent) {
              e.originalEvent.stopPropagation();
            }

            this.isSwipeed = true;

            if (e.swipeDirection === 'Right' && this.selectedItem !== 0) {
              for (var k = this.selectedItem - 1; k >= 0; k--) {
                if (!this.tbItem[k].classList.contains(CLS_HIDDEN$1)) {
                  this.select(k);
                  break;
                }
              }
            } else if (e.swipeDirection === 'Left' && this.selectedItem !== Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element).length - 1) {
              for (var i = this.selectedItem + 1; i < this.tbItem.length; i++) {
                if (!this.tbItem[i].classList.contains(CLS_HIDDEN$1)) {
                  this.select(i);
                  break;
                }
              }
            }

            this.isSwipeed = false;
          }
        }, {
          key: "spaceKeyDown",
          value: function spaceKeyDown(e) {
            if (e.keyCode === 32 && e.which === 32 || e.keyCode === 35 && e.which === 35) {
              var clstHead = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + CLS_HEADER$1);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(clstHead)) {
                e.preventDefault();
              }
            }
          }
        }, {
          key: "keyHandler",
          value: function keyHandler(e) {
            if (this.element.classList.contains(CLS_DISABLE$4)) {
              return;
            }

            this.element.classList.add(CLS_FOCUS);
            var trg = e.target;
            var tabHeader = this.getTabHeader();
            var actEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_ACTIVE$1, tabHeader);
            this.popEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_POP, tabHeader);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popEle)) {
              this.popObj = this.popEle.ej2_instances[0];
            }

            switch (e.action) {
              case 'space':
              case 'enter':
                if (trg.parentElement.classList.contains(CLS_DISABLE$4)) {
                  return;
                }

                if (e.action === 'enter' && trg.classList.contains('e-hor-nav')) {
                  this.showPopup(this.show);
                  break;
                }

                this.keyPressed(trg);
                break;

              case 'tab':
              case 'shiftTab':
                if (trg.classList.contains(CLS_WRAP) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trg, '.' + CLS_TB_ITEM).classList.contains(CLS_ACTIVE$1) === false) {
                  trg.setAttribute('tabindex', '-1');
                }

                if (this.popObj && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(this.popObj.element)) {
                  this.popObj.hide(this.hide);
                }

                actEle.children.item(0).setAttribute('tabindex', '0');
                break;

              case 'moveLeft':
              case 'moveRight':
                var item = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(document.activeElement, '.' + CLS_TB_ITEM);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
                  this.refreshItemVisibility(item);
                }

                break;

              case 'openPopup':
                e.preventDefault();

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popEle) && this.popEle.classList.contains(CLS_POPUP_CLOSE)) {
                  this.popObj.show(this.show);
                }

                break;

              case 'delete':
                var trgParent = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trg, '.' + CLS_TB_ITEM);

                if (this.showCloseButton === true && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trgParent)) {
                  var nxtSib = trgParent.nextSibling;

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nxtSib) && nxtSib.classList.contains(CLS_TB_ITEM)) {
                    nxtSib.firstElementChild.focus();
                  }

                  this.removeTab(this.getEleIndex(trgParent));
                }

                this.setActiveBorder();
                break;
            }
          }
        }, {
          key: "refreshActElePosition",
          value: function refreshActElePosition() {
            var activeEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEM + '.' + CLS_TB_POPUP + '.' + CLS_ACTIVE$1, this.element);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeEle)) {
              this.select(this.getEleIndex(activeEle));
            }

            this.refreshActiveBorder();
          }
        }, {
          key: "refreshItemVisibility",
          value: function refreshItemVisibility(target) {
            var scrCnt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + this.scrCntClass, this.tbItems);

            if (!this.isVertical() && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(scrCnt)) {
              var scrBar = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-hscroll-bar', this.tbItems);
              var scrStart = scrBar.scrollLeft;
              var scrEnd = scrStart + scrBar.offsetWidth;
              var eleStart = target.offsetLeft;
              var eleWidth = target.offsetWidth;
              var eleEnd = target.offsetLeft + target.offsetWidth;

              if (scrStart < eleStart && scrEnd < eleEnd) {
                var eleViewRange = scrEnd - eleStart;
                scrBar.scrollLeft = scrStart + (eleWidth - eleViewRange);
              } else {
                if (scrStart > eleStart && scrEnd > eleEnd) {
                  var _eleViewRange = eleEnd - scrStart;

                  scrBar.scrollLeft = scrStart - (eleWidth - _eleViewRange);
                }
              }
            } else {
              return;
            }
          }
        }, {
          key: "hoverHandler",
          value: function hoverHandler(e) {
            var trg = e.target;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trg.classList) && trg.classList.contains(CLS_ICON_CLOSE)) {
              trg.setAttribute('title', new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('tab', {
                closeButtonTitle: this.title
              }, this.locale).getConstant('closeButtonTitle'));
            }
          }
        }, {
          key: "evalOnPropertyChangeItems",
          value: function evalOnPropertyChangeItems(newProp, oldProp) {
            if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
              var changedProp = Object.keys(newProp.items);

              for (var i = 0; i < changedProp.length; i++) {
                var index = parseInt(Object.keys(newProp.items)[i], 10);
                var property = Object.keys(newProp.items[index])[0];
                var oldVal = Object(oldProp.items[index])[property];
                var newVal = Object(newProp.items[index])[property];
                var hdrItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS + ' #' + CLS_ITEM$2 + this.tabId + '_' + index, this.element);
                var cntItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT$1 + ' #' + CLS_CONTENT$1 + this.tabId + '_' + index, this.element);

                if (property === 'header' || property === 'headerTemplate') {
                  var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.items[index].header) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.items[index].header.iconCss) ? '' : this.items[index].header.iconCss;
                  var textVal = this.items[index].headerTemplate || this.items[index].header.text;

                  if (textVal === '' && icon === '') {
                    this.removeTab(index);
                  } else {
                    var arr = [];
                    arr.push(this.items[index]);
                    this.items.splice(index, 1);
                    this.itemIndexArray.splice(index, 1);
                    this.tbObj.items.splice(index, 1);
                    var isHiddenEle = hdrItem.classList.contains(CLS_HIDDEN$1);
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(hdrItem);
                    this.isReplace = true;
                    this.addTab(arr, index);

                    if (isHiddenEle) {
                      this.hideTab(index);
                    }

                    this.isReplace = false;
                  }
                }

                if (property === 'content' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cntItem)) {
                  var strVal = typeof newVal === 'string' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newVal.innerHTML);

                  if (strVal && (newVal[0] === '.' || newVal[0] === '#') && newVal.length) {
                    var eleVal = document.querySelector(newVal);
                    cntItem.appendChild(eleVal);
                    eleVal.style.display = '';
                  } else if (newVal === '' && oldVal[0] === '#') {
                    document.body.appendChild(this.element.querySelector(oldVal)).style.display = 'none';
                    cntItem.innerHTML = newVal;
                  } else {
                    cntItem.innerHTML = newVal;
                  }
                }

                if (property === 'cssClass') {
                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(hdrItem)) {
                    hdrItem.classList.remove(oldVal);
                    hdrItem.classList.add(newVal);
                  }

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cntItem)) {
                    cntItem.classList.remove(oldVal);
                    cntItem.classList.add(newVal);
                  }
                }

                if (property === 'disabled') {
                  this.enableTab(index, newVal === true ? false : true);
                }

                if (property === 'visible') {
                  this.hideTab(index, newVal === true ? false : true);
                }
              }
            } else {
              this.lastIndex = 0;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tbObj)) {
                this.reRenderItems();
              } else {
                this.setItems(newProp.items);

                if (this.templateEle.length > 0) {
                  this.expTemplateContent();
                }

                this.templateEle = [];
                var selectElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);

                while (selectElement.firstElementChild && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(selectElement.firstElementChild);
                }

                this.select(this.selectedItem);
              }
            }
          }
          /**
           * Enables or disables the specified Tab item. On passing value as `false`, the item will be disabled.
           * @param  {number} index - Index value of target Tab item.
           * @param  {boolean} value - Boolean value that determines whether the command should be enabled or disabled.
           * By default, isEnable is true.
           * @returns void.
           */

        }, {
          key: "enableTab",
          value: function enableTab(index, value) {
            var tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element)[index];

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tbItems)) {
              return;
            }

            if (value === true) {
              tbItems.classList.remove(CLS_DISABLE$4, CLS_OVERLAY$2);
              tbItems.firstElementChild.setAttribute('tabindex', '-1');
            } else {
              tbItems.classList.add(CLS_DISABLE$4, CLS_OVERLAY$2);
              tbItems.firstElementChild.removeAttribute('tabindex');

              if (tbItems.classList.contains(CLS_ACTIVE$1)) {
                this.select(index + 1);
              }
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.items[index])) {
              this.items[index].disabled = !value;
              this.dataBind();
            }

            tbItems.setAttribute('aria-disabled', value === true ? 'false' : 'true');
          }
          /**
           * Adds new items to the Tab that accepts an array as Tab items.
           * @param  {TabItemsModel[]} items - An array of item that is added to the Tab.
           * @param  {number} index - Number value that determines where the items to be added. By default, index is 0.
           * @returns void.
           * @deprecated
           */

        }, {
          key: "addTab",
          value: function addTab(items, index) {
            var _this72 = this;

            var addArgs = {
              addedItems: items,
              cancel: false
            };

            if (!this.isReplace) {
              this.trigger('adding', addArgs, function (tabAddingArgs) {
                if (!tabAddingArgs.cancel) {
                  _this72.addingTabContent(items, index);
                }
              });
            } else {
              this.addingTabContent(items, index);
            }
          }
        }, {
          key: "addingTabContent",
          value: function addingTabContent(items, index) {
            var _this73 = this;

            var lastEleIndex = 0;
            this.hdrEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_HEADER$1, this.element);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.hdrEle)) {
              this.items = items;
              this.reRenderItems();
            } else {
              var itemsCount = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element).length;

              if (itemsCount !== 0) {
                lastEleIndex = this.lastIndex + 1;
              }

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
                index = itemsCount - 1;
              }

              if (itemsCount < index || index < 0 || isNaN(index)) {
                return;
              }

              if (itemsCount === 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.hdrEle)) {
                this.hdrEle.style.display = '';
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.bdrLine)) {
                this.bdrLine.classList.add(CLS_HIDDEN$1);
              }

              this.tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS, this.getTabHeader());
              this.isAdd = true;
              var tabItems = this.parseObject(items, index);
              this.isAdd = false;
              var i = 0;
              var textValue;
              items.forEach(function (item, place) {
                textValue = item.headerTemplate || item.header.text;

                if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.headerTemplate || item.header) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(textValue) || textValue.length === 0 && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header.iconCss))) {
                  _this73.items.splice(index + i, 0, item);

                  i++;
                }

                if (_this73.isTemplate && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item.header.text)) {
                  var no = lastEleIndex + place;

                  var ele = _this73.createElement('div', {
                    id: CLS_CONTENT$1 + _this73.tabId + '_' + no,
                    className: CLS_ITEM$2,
                    attrs: {
                      role: 'tabpanel',
                      'aria-labelledby': CLS_ITEM$2 + '_' + no
                    }
                  });

                  _this73.cntEle.insertBefore(ele, _this73.cntEle.children[index + place]);

                  var eleTrg = _this73.getTrgContent(_this73.cntEle, no.toString());

                  _this73.getContent(eleTrg, item.content, 'render', index);
                }
              });
              this.tbObj.addItems(tabItems, index);

              if (!this.isReplace) {
                this.trigger('added', {
                  addedItems: items
                });
              }

              if (this.selectedItem === index) {
                this.select(index);
              } else {
                this.setActiveBorder();
              }
            }
          }
          /**
           * Removes the items in the Tab from the specified index.
           * @param  {number} index - Index of target item that is going to be removed.
           * @returns void.
           * @deprecated
           */

        }, {
          key: "removeTab",
          value: function removeTab(index) {
            var _this74 = this;

            var trg = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element)[index];

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trg)) {
              return;
            }

            var removeArgs = {
              removedItem: trg,
              removedIndex: index,
              cancel: false
            };
            this.trigger('removing', removeArgs, function (tabRemovingArgs) {
              if (!tabRemovingArgs.cancel) {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && _this74.isServerRendered) {
                  // tslint:disable-next-line:no-any
                  _this74.interopAdaptor.invokeMethodAsync('OnRemoveItem', index);

                  return;
                }

                _this74.tbObj.removeItems(index);

                _this74.items.splice(index, 1);

                _this74.itemIndexArray.splice(index, 1);

                _this74.refreshActiveBorder();

                var cntTrg = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + CLS_CONTENT$1 + _this74.tabId + '_' + _this74.extIndex(trg.id), Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT$1, _this74.element));

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cntTrg)) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(cntTrg);
                }

                _this74.trigger('removed', tabRemovingArgs);

                if (trg.classList.contains(CLS_ACTIVE$1)) {
                  // tslint:disable-next-line:max-line-length
                  index = index > Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM + ':not(.' + CLS_TB_POPUP + ')', _this74.element).length - 1 ? index - 1 : index;
                  _this74.enableAnimation = false;
                  _this74.selectedItem = index;

                  _this74.select(index);
                }

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, _this74.element).length === 0) {
                  _this74.hdrEle.style.display = 'none';
                }

                _this74.enableAnimation = true;
              }
            });
          }
          /**
           * Shows or hides the Tab that is in the specified index.
           * @param  {number} index - Index value of target item.
           * @param  {boolean} value - Based on this Boolean value, item will be hide (false) or show (true). By default, value is true.
           * @returns void.
           */

        }, {
          key: "hideTab",
          value: function hideTab(index, value) {
            var items;
            var item = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, this.element)[index];

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
              return;
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value)) {
              value = true;
            }

            this.bdrLine.classList.add(CLS_HIDDEN$1);

            if (value === true) {
              item.classList.add(CLS_HIDDEN$1);
              items = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN$1 + ')', this.tbItems);

              if (items.length !== 0 && item.classList.contains(CLS_ACTIVE$1)) {
                if (index !== 0) {
                  for (var i = index - 1; i >= 0; i--) {
                    if (!this.tbItem[i].classList.contains(CLS_HIDDEN$1)) {
                      this.select(i);
                      break;
                    } else if (i === 0) {
                      for (var k = index + 1; k < this.tbItem.length; k++) {
                        if (!this.tbItem[k].classList.contains(CLS_HIDDEN$1)) {
                          this.select(k);
                          break;
                        }
                      }
                    }
                  }
                } else {
                  for (var _k = index + 1; _k < this.tbItem.length; _k++) {
                    if (!this.tbItem[_k].classList.contains(CLS_HIDDEN$1)) {
                      this.select(_k);
                      break;
                    }
                  }
                }
              } else if (items.length === 0) {
                this.element.classList.add(CLS_HIDDEN$1);
              }
            } else {
              this.element.classList.remove(CLS_HIDDEN$1);
              items = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN$1 + ')', this.tbItems);
              item.classList.remove(CLS_HIDDEN$1);

              if (items.length === 0) {
                this.select(index);
              }
            }

            this.setActiveBorder();
            item.setAttribute('aria-hidden', '' + value);

            if (!this.isServerRendered && this.overflowMode === 'Popup' && this.tbObj) {
              this.tbObj.refreshOverflow();
            }
          }
          /**
           * Specifies the index or HTMLElement to select an item from the Tab.
           * @param  {number | HTMLElement} args - Index or DOM element is used for selecting an item from the Tab.
           * @returns void.
           */

        }, {
          key: "select",
          value: function select(args) {
            var _this75 = this;

            var tabHeader = this.getTabHeader();
            this.tbItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_TB_ITEMS, tabHeader);
            this.tbItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CLS_TB_ITEM, tabHeader);
            this.content = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CLS_CONTENT$1, this.element);
            this.prevItem = this.tbItem[this.prevIndex];

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectedItem) || this.selectedItem < 0 || this.tbItem.length <= this.selectedItem || isNaN(this.selectedItem)) {
              this.selectedItem = 0;
            } else {
              this.selectedID = this.extIndex(this.tbItem[this.selectedItem].id);
            }

            var trg = this.tbItem[args];

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(trg)) {
              this.selectedID = '0';
            } else {
              this.selectingID = this.extIndex(trg.id);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.prevItem) && !this.prevItem.classList.contains(CLS_DISABLE$4)) {
              this.prevItem.children.item(0).setAttribute('tabindex', '-1');
            }

            var eventArg = {
              previousItem: this.prevItem,
              previousIndex: this.prevIndex,
              selectedItem: this.tbItem[this.selectedItem],
              selectedIndex: this.selectedItem,
              selectedContent: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content) ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + CLS_CONTENT$1 + this.tabId + '_' + this.selectedID, this.content) : null,
              selectingItem: trg,
              selectingIndex: args,
              selectingContent: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content) ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('#' + CLS_CONTENT$1 + this.tabId + '_' + this.selectingID, this.content) : null,
              isSwiped: this.isSwipeed,
              cancel: false
            };

            if (!this.initRender) {
              this.trigger('selecting', eventArg, function (selectArgs) {
                if (!selectArgs.cancel) {
                  _this75.selectingContent(args);
                }
              });
            } else {
              this.selectingContent(args);
            }
          }
        }, {
          key: "selectingContent",
          value: function selectingContent(args) {
            if (typeof args === 'number') {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tbItem[args]) && (this.tbItem[args].classList.contains(CLS_DISABLE$4) || this.tbItem[args].classList.contains(CLS_HIDDEN$1))) {
                for (var i = args + 1; i < this.items.length; i++) {
                  if (this.items[i].disabled === false && this.items[i].visible === true) {
                    args = i;
                    break;
                  } else {
                    args = 0;
                  }
                }
              }

              if (this.tbItem.length > args && args >= 0 && !isNaN(args)) {
                this.prevIndex = this.selectedItem;

                if (this.tbItem[args].classList.contains(CLS_TB_POPUP)) {
                  this.setActive(this.popupHandler(this.tbItem[args]));
                } else {
                  this.setActive(args);
                }
              } else {
                this.setActive(0);
              }
            } else if (args instanceof HTMLElement) {
              this.setActive(this.getEleIndex(args));
            }
          }
          /**
           * Specifies the value to disable/enable the Tab component.
           * When set to `true`, the component will be disabled.
           * @param  {boolean} value - Based on this Boolean value, Tab will be enabled (false) or disabled (true).
           * @returns void.
           */

        }, {
          key: "disable",
          value: function disable(value) {
            this.setCssClass(this.element, CLS_DISABLE$4, value);
            this.element.setAttribute('aria-disabled', '' + value);
          }
          /**
           * Get the properties to be maintained in the persisted state.
           * @returns string
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist(['selectedItem', 'actEleId']);
          }
          /**
           * Returns the current module name.
           * @returns string
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'tab';
          }
          /**
           * Gets called when the model property changes.The data that describes the old and new values of the property that changed.
           * @param  {TabModel} newProp
           * @param  {TabModel} oldProp
           * @returns void
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i24 = 0, _Object$keys10 = Object.keys(newProp); _i24 < _Object$keys10.length; _i24++) {
              var prop = _Object$keys10[_i24];

              switch (prop) {
                case 'width':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                    width: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.width)
                  });
                  break;

                case 'height':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                    height: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.height)
                  });

                  if (!this.isServerRendered) {
                    this.setContentHeight(false);
                  }

                  break;

                case 'cssClass':
                  if (oldProp.cssClass !== '') {
                    this.setCssClass(this.element, oldProp.cssClass, false);
                    this.setCssClass(this.element, newProp.cssClass, true);
                  } else {
                    this.setCssClass(this.element, newProp.cssClass, true);
                  }

                  break;

                case 'items':
                  if (!this.isServerRendered) {
                    this.evalOnPropertyChangeItems(newProp, oldProp);
                  }

                  break;

                case 'showCloseButton':
                  this.setCloseButton(newProp.showCloseButton);
                  break;

                case 'selectedItem':
                  if (!this.isServerRendered) {
                    this.selectedItem = oldProp.selectedItem;
                    this.select(newProp.selectedItem);
                  }

                  break;

                case 'headerPlacement':
                  if (this.isServerRendered) {
                    this.serverChangeOrientation(newProp.headerPlacement, oldProp.headerPlacement);
                  } else {
                    this.changeOrientation(newProp.headerPlacement);
                  }

                  break;

                case 'enableRtl':
                  this.setRTL(newProp.enableRtl);
                  break;

                case 'overflowMode':
                  this.tbObj.overflowMode = newProp.overflowMode;
                  this.tbObj.dataBind();
                  this.refreshActElePosition();
                  break;

                case 'heightAdjustMode':
                  if (!this.isServerRendered) {
                    this.setContentHeight(false);
                    this.select(this.selectedItem);
                  }

                  break;

                case 'scrollStep':
                  if (this.tbObj) {
                    this.tbObj.scrollStep = this.scrollStep;
                  }

                  break;
              }
            }
          }
        }]);

        return Tab;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], TabItem)], Tab.prototype, "items", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], Tab.prototype, "width", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Tab.prototype, "height", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Tab.prototype, "cssClass", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Tab.prototype, "selectedItem", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Top')], Tab.prototype, "headerPlacement", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Content')], Tab.prototype, "heightAdjustMode", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Scrollable')], Tab.prototype, "overflowMode", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Dynamic')], Tab.prototype, "loadOn", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tab.prototype, "enablePersistence", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tab.prototype, "enableHtmlSanitizer", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tab.prototype, "showCloseButton", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Tab.prototype, "scrollStep", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, TabAnimationSettings)], Tab.prototype, "animation", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "created", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "adding", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "added", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "selecting", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "selected", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "removing", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "removed", void 0);

      __decorate$7([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tab.prototype, "destroyed", void 0);

      Tab = __decorate$7([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Tab);
      /**
       * Tab modules
       */

      var __decorate$8 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var TreeView_1;
      var ROOT = 'e-treeview';
      var CONTROL = 'e-control';
      var COLLAPSIBLE = 'e-icon-collapsible';
      var EXPANDABLE = 'e-icon-expandable';
      var LISTITEM = 'e-list-item';
      var LISTTEXT = 'e-list-text';
      var PARENTITEM = 'e-list-parent';
      var HOVER = 'e-hover';
      var ACTIVE = 'e-active';
      var LOAD = 'e-icons-spinner';
      var PROCESS = 'e-process';
      var ICON = 'e-icons';
      var TEXTWRAP = 'e-text-content';
      var INPUT = 'e-input';
      var INPUTGROUP = 'e-input-group';
      var TREEINPUT = 'e-tree-input';
      var EDITING = 'e-editing';
      var RTL$1 = 'e-rtl';
      var DRAGITEM = 'e-drag-item';
      var DROPPABLE = 'e-droppable';
      var DRAGGING = 'e-dragging';
      var SIBLING = 'e-sibling';
      var DROPIN = 'e-drop-in';
      var DROPNEXT = 'e-drop-next';
      var DROPOUT = 'e-drop-out';
      var NODROP = 'e-no-drop';
      var FULLROWWRAP = 'e-fullrow-wrap';
      var FULLROW = 'e-fullrow';
      var SELECTED$1 = 'e-selected';
      var EXPANDED = 'e-expanded';
      var NODECOLLAPSED = 'e-node-collapsed';
      var DISABLE = 'e-disable';
      var DROPCOUNT = 'e-drop-count';
      var CHECK = 'e-check';
      var INDETERMINATE = 'e-stop';
      var CHECKBOXWRAP = 'e-checkbox-wrapper';
      var CHECKBOXFRAME = 'e-frame';
      var CHECKBOXRIPPLE = 'e-ripple-container';
      var RIPPLE = 'e-ripple';
      var RIPPLEELMENT = 'e-ripple-element';
      var FOCUS = 'e-node-focus';
      var IMAGE = 'e-list-img';
      var BIGGER = 'e-bigger';
      var SMALL = 'e-small';
      var CHILD = 'e-has-child';
      var ITEM_ANIMATION_ACTIVE = 'e-animation-active';
      var DISABLED$1 = 'e-disabled';
      var treeAriaAttr = {
        treeRole: 'tree',
        itemRole: 'treeitem',
        listRole: 'group',
        itemText: '',
        wrapperRole: ''
      };
      /**
       * Configures the fields to bind to the properties of node in the TreeView component.
       */

      var FieldsSettings = /*#__PURE__*/function (_syncfusion_ej2_base_18) {
        _inherits2(FieldsSettings, _syncfusion_ej2_base_18);

        var _super28 = _createSuper(FieldsSettings);

        function FieldsSettings() {
          _classCallCheck2(this, FieldsSettings);

          return _super28.apply(this, arguments);
        }

        return FieldsSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('child')], FieldsSettings.prototype, "child", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], FieldsSettings.prototype, "dataSource", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('expanded')], FieldsSettings.prototype, "expanded", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('hasChildren')], FieldsSettings.prototype, "hasChildren", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('htmlAttributes')], FieldsSettings.prototype, "htmlAttributes", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('iconCss')], FieldsSettings.prototype, "iconCss", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('id')], FieldsSettings.prototype, "id", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('imageUrl')], FieldsSettings.prototype, "imageUrl", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('isChecked')], FieldsSettings.prototype, "isChecked", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('parentID')], FieldsSettings.prototype, "parentID", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], FieldsSettings.prototype, "query", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('selected')], FieldsSettings.prototype, "selected", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], FieldsSettings.prototype, "tableName", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('text')], FieldsSettings.prototype, "text", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('tooltip')], FieldsSettings.prototype, "tooltip", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('navigateUrl')], FieldsSettings.prototype, "navigateUrl", void 0);
      /**
       * Configures animation settings for the TreeView component.
       */


      var ActionSettings = /*#__PURE__*/function (_syncfusion_ej2_base_19) {
        _inherits2(ActionSettings, _syncfusion_ej2_base_19);

        var _super29 = _createSuper(ActionSettings);

        function ActionSettings() {
          _classCallCheck2(this, ActionSettings);

          return _super29.apply(this, arguments);
        }

        return ActionSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('SlideDown')], ActionSettings.prototype, "effect", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(400)], ActionSettings.prototype, "duration", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('linear')], ActionSettings.prototype, "easing", void 0);
      /**
       * Configures the animation settings for expanding and collapsing nodes in TreeView.
       */


      var NodeAnimationSettings = /*#__PURE__*/function (_syncfusion_ej2_base_20) {
        _inherits2(NodeAnimationSettings, _syncfusion_ej2_base_20);

        var _super30 = _createSuper(NodeAnimationSettings);

        function NodeAnimationSettings() {
          _classCallCheck2(this, NodeAnimationSettings);

          return _super30.apply(this, arguments);
        }

        return NodeAnimationSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        effect: 'SlideUp',
        duration: 400,
        easing: 'linear'
      }, ActionSettings)], NodeAnimationSettings.prototype, "collapse", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        effect: 'SlideDown',
        duration: 400,
        easing: 'linear'
      }, ActionSettings)], NodeAnimationSettings.prototype, "expand", void 0);
      /**
       * The TreeView component is used to represent hierarchical data in a tree like structure with advanced
       * functions to perform edit, drag and drop, selection with check-box, and more.
       * ```html
       *  <div id="tree"></div>
       * ```
       * ```typescript
       *  let treeObj: TreeView = new TreeView();
       *  treeObj.appendTo('#tree');
       * ```
       */


      var TreeView = TreeView_1 = /*#__PURE__*/function (_syncfusion_ej2_base_21) {
        _inherits2(TreeView, _syncfusion_ej2_base_21);

        var _super31 = _createSuper(TreeView);

        function TreeView(options, element) {
          var _this76;

          _classCallCheck2(this, TreeView);

          _this76 = _super31.call(this, options, element);
          _this76.isRefreshed = false;
          _this76.preventExpand = false;
          _this76.checkedElement = [];
          _this76.disableNode = [];
          _this76.validArr = [];
          _this76.expandChildren = [];
          _this76.isFieldChange = false;
          _this76.changeDataSource = false;
          _this76.isBlazorExpandedNodes = [];
          _this76.mouseDownStatus = false;
          return _this76;
        }
        /**
         * Get component name.
         * @returns string
         * @private
         */


        _createClass2(TreeView, [{
          key: "getModuleName",
          value: function getModuleName() {
            return 'treeview';
          }
          /**
           * Initialize the event handler
           */

        }, {
          key: "preRender",
          value: function preRender() {
            var _this77 = this;

            this.isBlazorPlatform = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered;
            this.checkActionNodes = [];
            this.parentNodeCheck = [];
            this.dragStartAction = false;
            this.isAnimate = false;
            this.keyConfigs = {
              escape: 'escape',
              end: 'end',
              enter: 'enter',
              f2: 'f2',
              home: 'home',
              moveDown: 'downarrow',
              moveLeft: 'leftarrow',
              moveRight: 'rightarrow',
              moveUp: 'uparrow',
              ctrlDown: 'ctrl+downarrow',
              ctrlUp: 'ctrl+uparrow',
              ctrlEnter: 'ctrl+enter',
              ctrlHome: 'ctrl+home',
              ctrlEnd: 'ctrl+end',
              ctrlA: 'ctrl+A',
              shiftDown: 'shift+downarrow',
              shiftUp: 'shift+uparrow',
              shiftEnter: 'shift+enter',
              shiftHome: 'shift+home',
              shiftEnd: 'shift+end',
              csDown: 'ctrl+shift+downarrow',
              csUp: 'ctrl+shift+uparrow',
              csEnter: 'ctrl+shift+enter',
              csHome: 'ctrl+shift+home',
              csEnd: 'ctrl+shift+end',
              space: 'space'
            };
            this.listBaseOption = {
              expandCollapse: true,
              showIcon: true,
              expandIconClass: EXPANDABLE,
              ariaAttributes: treeAriaAttr,
              expandIconPosition: 'Left',
              itemCreated: function itemCreated(e) {
                _this77.beforeNodeCreate(e);
              },
              enableHtmlSanitizer: this.enableHtmlSanitizer,
              itemNavigable: this.fullRowNavigable
            };
            this.updateListProp(this.fields);
            this.aniObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"]({});
            this.treeList = [];
            this.isLoaded = false;
            this.isInitalExpand = false;
            this.expandChildren = [];
            this.index = 0;
            this.setTouchClass();

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectedNodes)) {
              this.setProperties({
                selectedNodes: []
              }, true);
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.checkedNodes)) {
              this.setProperties({
                checkedNodes: []
              }, true);
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.expandedNodes)) {
              this.setProperties({
                expandedNodes: []
              }, true);
            } else {
              this.isInitalExpand = true;
            }
          }
          /**
           * Get the properties to be maintained in the persisted state.
           * @returns string
           * @hidden
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];
            return this.addOnPersist(keyEntity);
          }
          /**
           * To Initialize the control rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.initialRender = true;
            this.blazorInitialRender = false;
            this.initialize();
            this.setDataBinding(false);
            this.setDisabledMode();
            this.setExpandOnType();

            if (!this.disabled) {
              this.setRipple();
            }

            this.wireEditingEvents(this.allowEditing);
            this.setDragAndDrop(this.allowDragAndDrop);

            if (!this.disabled) {
              this.wireEvents();
            }

            if (!this.isBlazorPlatform) {
              this.initialRender = false;
            }

            this.renderComplete();
          }
        }, {
          key: "initialize",
          value: function initialize() {
            if (!this.isBlazorPlatform) {
              this.element.setAttribute('role', 'tree');
              this.element.setAttribute('tabindex', '0');
              this.element.setAttribute('aria-activedescendant', this.element.id + '_active');
              this.setCssClass(null, this.cssClass);
              this.setEnableRtl();
              this.setFullRow(this.fullRowSelect);
            }

            this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
          }
        }, {
          key: "setDisabledMode",
          value: function setDisabledMode() {
            if (this.disabled) {
              this.element.classList.add(DISABLED$1);
            } else {
              this.element.classList.remove(DISABLED$1);
            }
          }
        }, {
          key: "setEnableRtl",
          value: function setEnableRtl() {
            this.enableRtl ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], RTL$1) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], RTL$1);
          }
        }, {
          key: "setRipple",
          value: function setRipple() {
            var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;
            var rippleModel = {
              selector: tempStr,
              ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP
            };
            this.rippleFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.element, rippleModel);
            var iconModel = {
              selector: '.' + TEXTWRAP + ' > .' + ICON,
              isCenterRipple: true
            };
            this.rippleIconFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.element, iconModel);
          }
        }, {
          key: "setFullRow",
          value: function setFullRow(isEnabled) {
            isEnabled ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], FULLROWWRAP) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], FULLROWWRAP);
          }
        }, {
          key: "setMultiSelect",
          value: function setMultiSelect(isEnabled) {
            var firstUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, this.element);

            if (isEnabled) {
              firstUl.setAttribute('aria-multiselectable', 'true');
            } else {
              firstUl.removeAttribute('aria-multiselectable');
            }
          }
        }, {
          key: "templateComplier",
          value: function templateComplier(template) {
            if (template) {
              try {
                if (document.querySelectorAll(template).length) {
                  return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(template).innerHTML.trim());
                }
              } catch (e) {
                return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
              }
            }

            return undefined;
          }
        }, {
          key: "setDataBinding",
          value: function setDataBinding(changeDataSource) {
            var _this78 = this;

            this.treeList.push('false');

            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"]) {
              // tslint:disable
              this.isOffline = this.isBlazorPlatform ? this.fields.dataSource.offline : this.fields.dataSource.dataSource.offline;

              if (this.fields.dataSource.ready) {
                this.fields.dataSource.ready.then(function (e) {
                  // tslint:disable
                  _this78.isOffline = _this78.isBlazorPlatform ? _this78.fields.dataSource.offline : _this78.fields.dataSource.dataSource.offline;

                  if (_this78.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && _this78.isOffline) {
                    _this78.treeList.pop();

                    _this78.treeData = e.result;
                    _this78.isNumberTypeId = _this78.getType();

                    _this78.setRootData();

                    _this78.renderItems(true);

                    if (_this78.treeList.length === 0 && !_this78.isLoaded) {
                      _this78.finalize();
                    }
                  }
                })["catch"](function (e) {
                  _this78.trigger('actionFailure', {
                    error: e
                  });
                });
              } else {
                this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {
                  _this78.treeList.pop();

                  _this78.treeData = e.result;
                  _this78.isNumberTypeId = _this78.getType();

                  _this78.setRootData();

                  if (changeDataSource) {
                    _this78.changeDataSource = true;
                  }

                  _this78.renderItems(true);

                  _this78.changeDataSource = false;

                  if (_this78.treeList.length === 0 && !_this78.isLoaded) {
                    _this78.finalize();
                  }
                })["catch"](function (e) {
                  _this78.trigger('actionFailure', {
                    error: e
                  });
                });
              }
            } else {
              this.treeList.pop();

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.dataSource)) {
                this.rootData = this.treeData = [];
              } else {
                this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));
                this.setRootData();
              }

              this.isNumberTypeId = this.getType();
              this.renderItems(false);
            }

            if (this.treeList.length === 0 && !this.isLoaded) {
              this.finalize();
            }
          }
        }, {
          key: "getQuery",
          value: function getQuery(mapper) {
            var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var columns = [];
            var query;

            if (!mapper.query) {
              query = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["Query"]();
              var prop = this.getActualProperties(mapper);

              for (var _i25 = 0, _Object$keys11 = Object.keys(prop); _i25 < _Object$keys11.length; _i25++) {
                var col = _Object$keys11[_i25];

                if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col] && col !== 'url' && columns.indexOf(mapper[col]) === -1) {
                  columns.push(mapper[col]);
                }
              }

              query.select(columns);

              if (prop.hasOwnProperty('tableName')) {
                query.from(mapper.tableName);
              }
            } else {
              query = mapper.query.clone();
            }

            _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].addSorting(this.sortOrder, mapper.text, query);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.parentID)) {
              query.where(mapper.parentID, 'equal', this.isNumberTypeId ? parseFloat(value) : value);
            }

            return query;
          }
        }, {
          key: "getType",
          value: function getType() {
            return this.treeData[0] ? typeof Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.id, this.treeData[0]) === 'number' ? true : false : false;
          }
        }, {
          key: "setRootData",
          value: function setRootData() {
            this.dataType = this.getDataType(this.treeData, this.fields);

            if (this.dataType === 1) {
              this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
              var rootItems = this.getChildNodes(this.treeData, undefined, true);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(rootItems)) {
                this.rootData = [];
              } else {
                this.rootData = rootItems;
              }
            } else {
              this.rootData = this.treeData;
            }
          }
        }, {
          key: "renderItems",
          value: function renderItems(isSorted) {
            // tslint:disable
            if (!this.isBlazorPlatform || this.isBlazorPlatform && this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && this.fields.dataSource.adaptorName !== 'BlazorAdaptor' || this.changeDataSource) {
              this.listBaseOption.ariaAttributes.level = 1;
              var sortedData = this.getSortedData(this.rootData);
              this.ulElement = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);
              this.element.appendChild(this.ulElement);
              var rootNodes = this.ulElement.querySelectorAll('.e-list-item');

              if (this.loadOnDemand === false) {
                var i = 0;

                while (i < rootNodes.length) {
                  this.renderChildNodes(rootNodes[i], true, null, true);
                  i++;
                }
              }

              var parentEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + PARENTITEM, this.element);

              if (parentEle.length === 1 && rootNodes && rootNodes.length !== 0 || this.loadOnDemand) {
                this.finalizeNode(this.element);
              }
            }

            this.updateTemplateForBlazor();
            this.parentNodeCheck = [];
            this.parentCheckData = [];
            this.updateCheckedStateFromDS();

            if (this.autoCheck && this.showCheckBox && !this.isLoaded) {
              this.updateParentCheckState();
            }
          }
        }, {
          key: "updateTemplateForBlazor",
          value: function updateTemplateForBlazor() {
            if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {
              this.updateBlazorTemplate();
            }
          }
          /**
           * Update the checkedNodes from datasource at initial rendering
           */

        }, {
          key: "updateCheckedStateFromDS",
          value: function updateCheckedStateFromDS(id) {
            if (this.treeData && this.showCheckBox) {
              if (this.dataType === 1) {
                var mapper = this.fields;
                var resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["Query"]().where(mapper.isChecked, 'equal', true, false));

                for (var i = 0; i < resultData.length; i++) {
                  var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;
                  var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;

                  if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {
                    this.checkedNodes.push(resultId);
                  }

                  if (resultData[i][this.fields.hasChildren]) {
                    var _id = resultData[i][this.fields.id];
                    var childData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["Query"]().where(mapper.parentID, 'equal', _id, false));

                    for (var child = 0; child < childData.length; child++) {
                      var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;

                      if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {
                        this.checkedNodes.push(childId);
                      }
                    }
                  }
                }

                for (var _i26 = 0; _i26 < this.checkedNodes.length; _i26++) {
                  var _mapper2 = this.fields;
                  var checkState = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["Query"]().where(_mapper2.id, 'equal', this.checkedNodes[_i26], true));

                  if (checkState[0] && this.autoCheck) {
                    this.getCheckedNodeDetails(_mapper2, checkState);
                    this.checkIndeterminateState(checkState[0]);
                  }

                  var checkedData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["Query"]().where(_mapper2.parentID, 'equal', this.checkedNodes[_i26], true));

                  for (var index = 0; index < checkedData.length; index++) {
                    var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;

                    if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {
                      this.checkedNodes.push(checkedId);
                    }
                  }
                }
              } else if (this.dataType === 2 || this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && this.isOffline) {
                for (var _index = 0; _index < this.treeData.length; _index++) {
                  var fieldId = this.treeData[_index][this.fields.id] ? this.treeData[_index][this.fields.id].toString() : '';

                  if (this.treeData[_index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {
                    this.checkedNodes.push(fieldId);
                  }

                  var childItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), this.treeData[_index]);

                  if (childItems) {
                    this.updateChildCheckState(childItems, this.treeData[_index]);
                  }
                }
              }
            }
          }
          /**
           * To check whether the list data has sub child and to change the parent check state accordingly
           */

        }, {
          key: "getCheckedNodeDetails",
          value: function getCheckedNodeDetails(mapper, checkNodes) {
            var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;
            var count = 0;
            var element = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.id] + '"]');
            var parentEle = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.parentID] + '"]');

            if (!element && !parentEle) {
              var len = this.parentNodeCheck.length;

              if (this.parentNodeCheck.indexOf(id) === -1) {
                this.parentNodeCheck.push(id);
              }

              var childNodes = this.getChildNodes(this.treeData, id);

              for (var i = 0; i < childNodes.length; i++) {
                var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;

                if (this.checkedNodes.indexOf(childId) !== -1) {
                  count++;
                }

                if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {
                  this.checkedNodes.push(id);
                }
              }

              var preElement = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["Query"]().where(mapper.id, 'equal', id, true));
              this.getCheckedNodeDetails(mapper, preElement);
            } else if (parentEle) {
              var check = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECK, parentEle);

              if (!check) {
                this.changeState(parentEle, 'indeterminate', null, true, true);
              }
            }
          }
          /**
           * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering
           */

        }, {
          key: "updateParentCheckState",
          value: function updateParentCheckState() {
            var indeterminate = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + INDETERMINATE, this.element);
            var childCheckedElement;

            for (var i = 0; i < indeterminate.length; i++) {
              var node = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(indeterminate[i], '.' + LISTITEM);
              var nodeId = node.getAttribute('data-uid').toString();

              if (this.dataType === 1) {
                childCheckedElement = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["Query"]().where(this.fields.parentID, 'equal', nodeId, true));
              } else {
                childCheckedElement = this.getChildNodes(this.treeData, nodeId);
              }

              var count = 0;

              if (childCheckedElement) {
                for (var j = 0; j < childCheckedElement.length; j++) {
                  var childId = childCheckedElement[j][this.fields.id].toString();

                  if (this.checkedNodes.indexOf(childId) !== -1) {
                    count++;
                  }
                }

                if (count === childCheckedElement.length) {
                  var nodeCheck = node.getAttribute('data-uid');

                  if (this.checkedNodes.indexOf(nodeCheck) === -1) {
                    this.checkedNodes.push(nodeCheck);
                  }

                  this.changeState(node, 'check', null, true, true);
                } else if (count === 0 && this.checkedNodes.length === 0) {
                  this.changeState(node, 'uncheck', null, true, true);
                }
              }
            }
          }
          /**
           * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM
           */

        }, {
          key: "checkIndeterminateState",
          value: function checkIndeterminateState(data) {
            var element;

            if (this.dataType === 1) {
              element = this.element.querySelector('[data-uid="' + data[this.fields.parentID] + '"]');
            } else {
              element = this.element.querySelector('[data-uid="' + data[this.fields.id] + '"]');
            }

            if (element) {
              var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');

              if (ariaChecked !== 'true') {
                this.changeState(element, 'indeterminate', null, true, true);
              }
            } else if (this.dataType === 2) {
              var len = this.parentNodeCheck.length;

              if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {
                this.parentNodeCheck.push(data[this.fields.id].toString());
              }
            }
          }
          /**
           * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering
           */

        }, {
          key: "updateChildCheckState",
          value: function updateChildCheckState(childItems, treeData) {
            var count = 0;
            var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';

            for (var index = 0; index < childItems.length; index++) {
              var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';

              if (childItems[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {
                this.checkedNodes.push(checkedChild);
              }

              if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {
                this.checkedNodes.push(checkedChild);
              }

              if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
                count++;
              }

              var subChildItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), childItems[index]);

              if (subChildItems) {
                this.parentCheckData.push(treeData);
                this.updateChildCheckState(subChildItems, childItems[index]);
              }

              if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {
                this.checkedNodes.push(checkedParent);
              }
            }

            if (count !== 0 && this.autoCheck) {
              this.checkIndeterminateState(treeData);

              for (var len = 0; len < this.parentCheckData.length; len++) {
                if (treeData !== this.parentCheckData[len] && this.parentCheckData[len]) {
                  this.checkIndeterminateState(this.parentCheckData[len]);
                }
              }
            }

            this.parentCheckData = [];
          }
        }, {
          key: "beforeNodeCreate",
          value: function beforeNodeCreate(e) {
            if (this.showCheckBox) {
              var checkboxEle = Object(_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_3__["createCheckBox"])(this.createElement, true, {
                cssClass: this.touchClass
              });
              checkboxEle.setAttribute('role', 'checkbox');
              var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, e.item);
              var id = e.item.getAttribute('data-uid');
              e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon) ? 0 : 1]);
              var checkValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(e.fields.isChecked, e.curData);

              if (this.checkedNodes.indexOf(id) > -1) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);
                checkboxEle.setAttribute('aria-checked', 'true');
                this.addCheck(e.item);
              } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(checkValue) && checkValue.toString() === 'true') {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);
                checkboxEle.setAttribute('aria-checked', 'true');
                this.addCheck(e.item);
              } else {
                checkboxEle.setAttribute('aria-checked', 'false');
              }

              var frame = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXFRAME, checkboxEle);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(frame, 'mousedown', this.frameMouseHandler, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(frame, 'mouseup', this.frameMouseHandler, this);
            }

            if (this.fullRowSelect) {
              this.createFullRow(e.item);
            }

            if (this.allowMultiSelection && !e.item.classList.contains(SELECTED$1)) {
              e.item.setAttribute('aria-selected', 'false');
            }

            var fields = e.fields;
            this.addActionClass(e, fields.selected, SELECTED$1);
            this.addActionClass(e, fields.expanded, EXPANDED);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.nodeTemplateFn)) {
              var textEle = e.item.querySelector('.' + LISTTEXT);
              textEle.innerHTML = '';
              var tempArr = this.nodeTemplateFn(e.curData, undefined, undefined, this.element.id + 'nodeTemplate', this.isStringTemplate);
              tempArr = Array.prototype.slice.call(tempArr);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(tempArr, textEle);
            }

            var eventArgs = {
              node: e.item,
              nodeData: e.curData,
              text: e.text
            };

            if (!this.isRefreshed) {
              this.trigger('drawNode', eventArgs);
            }
          }
        }, {
          key: "frameMouseHandler",
          value: function frameMouseHandler(e) {
            var rippleSpan = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXRIPPLE, e.target.parentElement);
            Object(_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_3__["rippleMouseHandler"])(e, rippleSpan);
          }
        }, {
          key: "addActionClass",
          value: function addActionClass(e, action, cssClass) {
            var data = e.curData;
            var actionValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(action, data);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(actionValue) && actionValue.toString() !== 'false') {
              e.item.classList.add(cssClass);
            }
          }
        }, {
          key: "getDataType",
          value: function getDataType(ds, mapper) {
            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {
              for (var i = 0; i < ds.length; i++) {
                if (this.isOffline) {
                  if (typeof mapper.child === 'string' && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, ds[i])) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.parentID, ds[i]))) {
                    return 1;
                  }
                } else if (typeof mapper.child === 'string' && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, ds[i]))) {
                  return 1;
                }
              }

              return 2;
            }

            for (var _i27 = 0, len = ds.length; _i27 < len; _i27++) {
              if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, ds[_i27]))) {
                return 2;
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.parentID, ds[_i27])) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.hasChildren, ds[_i27]))) {
                return 1;
              }
            }

            return 1;
          }
        }, {
          key: "getGroupedData",
          value: function getGroupedData(dataSource, groupBy) {
            var cusQuery = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["Query"]().group(groupBy);

            var ds = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].getDataSource(dataSource, cusQuery);

            var grpItem = [];

            for (var j = 0; j < ds.length; j++) {
              var itemObj = ds[j].items;
              grpItem.push(itemObj);
            }

            return grpItem;
          }
        }, {
          key: "getSortedData",
          value: function getSortedData(list) {
            if (list && this.sortOrder !== 'None') {
              list = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].getDataSource(list, _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].addSorting(this.sortOrder, this.fields.text));
            }

            return list;
          }
        }, {
          key: "finalizeNode",
          value: function finalizeNode(element) {
            var iNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + IMAGE, element);

            for (var k = 0; k < iNodes.length; k++) {
              iNodes[k].setAttribute('alt', IMAGE);
            }

            if (this.isLoaded) {
              var sNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + SELECTED$1, element);

              for (var i = 0; i < sNodes.length; i++) {
                this.selectNode(sNodes[i], null);
                break;
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(sNodes, SELECTED$1);
            }

            var cNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);

            for (var j = 0; j < cNodes.length; j++) {
              var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, cNodes[j]);

              if (icon && icon.classList.contains(EXPANDABLE)) {
                this.disableExpandAttr(cNodes[j]);
              }
            }

            var eNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + EXPANDED, element);

            if (!this.isInitalExpand) {
              for (var _i28 = 0; _i28 < eNodes.length; _i28++) {
                this.renderChildNodes(eNodes[_i28]);
              }
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(eNodes, EXPANDED);
            this.updateList();

            if (this.isLoaded) {
              this.updateCheckedProp();
            }
          }
        }, {
          key: "updateCheckedProp",
          value: function updateCheckedProp() {
            if (this.showCheckBox) {
              var nodes = [].concat([], this.checkedNodes);
              this.setProperties({
                checkedNodes: nodes
              }, true);
            }
          }
        }, {
          key: "ensureIndeterminate",
          value: function ensureIndeterminate() {
            if (this.autoCheck) {
              var liElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('li', this.element);
              var ulElement;

              for (var i = 0; i < liElement.length; i++) {
                if (liElement[i].classList.contains(LISTITEM)) {
                  ulElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, liElement[i]);

                  if (ulElement) {
                    this.ensureParentCheckState(liElement[i]);
                  } else {
                    this.ensureChildCheckState(liElement[i]);
                  }
                }
              }
            } else {
              var indeterminate = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + INDETERMINATE, this.element);

              for (var _i29 = 0; _i29 < indeterminate.length; _i29++) {
                indeterminate[_i29].classList.remove(INDETERMINATE);
              }
            }
          }
        }, {
          key: "ensureParentCheckState",
          value: function ensureParentCheckState(element) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
              if (element.classList.contains(ROOT)) {
                return;
              }

              var ulElement = element;

              if (element.classList.contains(LISTITEM)) {
                ulElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, element);
              }

              var checkedNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CHECK, ulElement);
              var indeterminateNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + INDETERMINATE, ulElement);
              var nodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM, ulElement);
              var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];

              if (nodes.length === checkedNodes.length) {
                this.changeState(checkBoxEle, 'check', null, true, true);
              } else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {
                this.changeState(checkBoxEle, 'indeterminate', null, true, true);
              } else if (checkedNodes.length === 0) {
                this.changeState(checkBoxEle, 'uncheck', null, true, true);
              }

              var parentUL = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(element, '.' + PARENTITEM);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parentUL)) {
                var currentParent = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(parentUL, '.' + LISTITEM);
                this.ensureParentCheckState(currentParent);
              }
            }
          }
        }, {
          key: "ensureChildCheckState",
          value: function ensureChildCheckState(element, e) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
              var childElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, element);
              var checkBoxes;

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(childElement)) {
                checkBoxes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CHECKBOXWRAP, childElement);
                var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);
                var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);
                var childCheck = childElement.querySelectorAll('li');
                var expandState = childElement.parentElement.getAttribute('aria-expanded');
                var checkedState;

                for (var index = 0; index < checkBoxes.length; index++) {
                  var childId = childCheck[index].getAttribute('data-uid');

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.currentLoadData) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.isChecked, this.currentLoadData[index]))) {
                    checkedState = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';

                    if (this.ele !== -1) {
                      checkedState = isChecked ? 'check' : 'uncheck';
                    }

                    if (checkedState === 'uncheck' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(this.parentNodeCheck) && this.autoCheck && this.parentNodeCheck.indexOf(childId) !== -1) {
                      this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
                      checkedState = 'indeterminate';
                    }
                  } else {
                    var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);

                    if (isChecked) {
                      checkedState = 'check';
                    } else if (isNodeChecked && !this.isLoaded) {
                      checkedState = 'check';
                    } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {
                      checkedState = 'check';
                    } else if (childCheck[index].classList.contains(CHILD) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {
                      checkedState = 'indeterminate';
                      this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
                    } else if (this.dataType === 1 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {
                      checkedState = 'indeterminate';
                      this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
                    } else {
                      checkedState = 'uncheck';
                    }
                  }

                  this.changeState(checkBoxes[index], checkedState, e, true, true);
                }
              }

              if (this.autoCheck && this.isLoaded) {
                this.updateParentCheckState();
              }
            }
          }
        }, {
          key: "doCheckBoxAction",
          value: function doCheckBoxAction(nodes, doCheck) {
            var li = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM, this.element);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
              for (var len = nodes.length; len >= 0; len--) {
                var liEle = void 0;

                if (nodes.length === 1) {
                  liEle = this.getElement(nodes[len - 1]);
                } else {
                  liEle = this.getElement(nodes[len]);
                }

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
                  var node = void 0;
                  node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;

                  if (node !== '' && doCheck && node) {
                    this.setValidCheckedNode(node);
                    this.dynamicCheckState(node, doCheck);
                  } else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {
                    this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);
                    var childItems = this.getChildNodes(this.treeData, node);

                    if (childItems) {
                      for (var i = 0; i < childItems.length; i++) {
                        var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;

                        if (this.checkedNodes.indexOf(id) !== -1) {
                          this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
                        }
                      }

                      if (this.parentNodeCheck.indexOf(node) !== -1) {
                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);
                      }
                    }

                    if (node) {
                      this.dynamicCheckState(node, doCheck);
                    }

                    this.updateField(this.treeData, this.fields, node, 'isChecked', null);
                  }

                  continue;
                }

                var checkBox = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);
                this.validateCheckNode(checkBox, !doCheck, liEle, null);
              }
            } else {
              var checkBoxes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CHECKBOXWRAP, this.element);

              if (this.loadOnDemand) {
                for (var index = 0; index < checkBoxes.length; index++) {
                  this.updateFieldChecked(checkBoxes[index], doCheck);
                  this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);
                }
              } else {
                for (var _index2 = 0; _index2 < checkBoxes.length; _index2++) {
                  this.updateFieldChecked(checkBoxes[_index2], doCheck);
                  this.changeState(checkBoxes[_index2], doCheck ? 'check' : 'uncheck');
                }
              }
            }

            if (nodes) {
              for (var j = 0; j < nodes.length; j++) {
                var _node = nodes[j] ? nodes[j].toString() : '';

                if (!doCheck) {
                  this.updateField(this.treeData, this.fields, _node, 'isChecked', null);
                }
              }
            }

            if (this.autoCheck) {
              this.updateParentCheckState();
            }
          }
        }, {
          key: "updateFieldChecked",
          value: function updateFieldChecked(checkbox, doCheck) {
            var currLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(checkbox, '.' + LISTITEM);
            var id = currLi.getAttribute('data-uid');
            var nodeDetails = this.getNodeData(currLi);

            if (nodeDetails.isChecked === 'true' && !doCheck) {
              this.updateField(this.treeData, this.fields, id, 'isChecked', null);
            }
          }
          /**
           * Changes the parent and child  check state while changing the checkedNodes via setmodel
           */

        }, {
          key: "dynamicCheckState",
          value: function dynamicCheckState(node, doCheck) {
            if (this.dataType === 1) {
              var count = 0;
              var resultId = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["Query"]().where(this.fields.id, 'equal', node, true));

              if (resultId[0]) {
                var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;
                var parent = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;
                var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');
                var indeterminate = parentElement ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INDETERMINATE, parentElement) : null;
                var check = parentElement ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECK, parentElement) : null;
                var element = this.element.querySelector('[data-uid="' + id + '"]');
                var childNodes = this.getChildNodes(this.treeData, parent);

                if (childNodes) {
                  for (var i = 0; i < childNodes.length; i++) {
                    var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;

                    if (this.checkedNodes.indexOf(childId) !== -1) {
                      count++;
                    }
                  }
                }

                if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {
                  this.changeState(parentElement, 'indeterminate', null);
                } else if (this.checkedNodes.indexOf(node) === -1 && element && id === node && !doCheck) {
                  this.changeState(element, 'uncheck', null);
                } else if (this.checkedNodes.indexOf(node) !== -1 && element && id === node && doCheck) {
                  this.changeState(element, 'check', null);
                } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count !== 0) {
                  this.changeState(parentElement, 'indeterminate', null);
                } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count === 0) {
                  this.changeState(parentElement, 'uncheck', null);
                } else if (!element && !parentElement && id === node && this.autoCheck) {
                  this.updateIndeterminate(node, doCheck);
                }
              }
            } else if (this.dataType === 2 || this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && this.isOffline) {
              var _id2;

              var _parentElement;

              var _check;

              for (var _i30 = 0; _i30 < this.treeData.length; _i30++) {
                _id2 = this.treeData[_i30][this.fields.id] ? this.treeData[_i30][this.fields.id].toString() : '';
                _parentElement = this.element.querySelector('[data-uid="' + _id2 + '"]');
                _check = _parentElement ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECK, _parentElement) : null;

                if (this.checkedNodes.indexOf(_id2) === -1 && _parentElement && _check && !doCheck) {
                  this.changeState(_parentElement, 'uncheck', null);
                }

                var subChild = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), this.treeData[_i30]);

                if (subChild) {
                  this.updateChildIndeterminate(subChild, _id2, node, doCheck, _id2);
                }
              }
            }
          }
          /**
           * updates the parent and child  check state while changing the checkedNodes via setmodel for listData
           */

        }, {
          key: "updateIndeterminate",
          value: function updateIndeterminate(node, doCheck) {
            var indeterminateData = this.getTreeData(node);
            var count = 0;
            var parent;

            if (this.dataType === 1) {
              parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;
            }

            var childNodes = this.getChildNodes(this.treeData, parent);

            if (childNodes) {
              for (var i = 0; i < childNodes.length; i++) {
                var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;

                if (this.checkedNodes.indexOf(childId) !== -1) {
                  count++;
                }
              }
            }

            var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');

            if (parentElement && doCheck) {
              this.changeState(parentElement, 'indeterminate', null);
            } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
              this.changeState(parentElement, 'indeterminate', null);
            } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {
              this.changeState(parentElement, 'uncheck', null);
            } else if (!parentElement) {
              if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);
              } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {
                this.parentNodeCheck.push(parent);
              } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
                this.parentNodeCheck.push(parent);
              }

              this.updateIndeterminate(parent, doCheck);

              if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {
                this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);
              }
            }
          }
          /**
           * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data
           */

        }, {
          key: "updateChildIndeterminate",
          value: function updateChildIndeterminate(subChild, parent, node, doCheck, child) {
            var count = 0;

            for (var j = 0; j < subChild.length; j++) {
              var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';

              if (this.checkedNodes.indexOf(subId) !== -1) {
                count++;
              }

              var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');
              var indeterminate = parentElement ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INDETERMINATE, parentElement) : null;
              var check = parentElement ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECK, parentElement) : null;
              var element = this.element.querySelector('[data-uid="' + subId + '"]');
              var childElementCheck = element ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECK, element) : null;

              if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {
                this.changeState(parentElement, 'indeterminate', null);
              } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && subId === node && !doCheck) {
                if (this.autoCheck) {
                  this.changeState(parentElement, 'uncheck', null);
                } else {
                  if (count !== 0) {
                    this.changeState(parentElement, 'indeterminate', null);
                  } else {
                    this.changeState(parentElement, 'uncheck', null);
                  }
                }
              } else if (this.checkedNodes.indexOf(node) === -1 && element && subId === node && !doCheck) {
                this.changeState(element, 'uncheck', null);
              } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {
                indeterminate.classList.remove(INDETERMINATE);
              } else if (this.checkedNodes.indexOf(node) === -1 && !element && check && subId === node && count === 0) {
                this.changeState(parentElement, 'uncheck', null);
              } else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {
                this.changeState(element, 'uncheck', null);
              } else if (!element && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {
                var childElement = this.element.querySelector('[data-uid="' + child + '"]');

                if (doCheck && count !== 0) {
                  this.changeState(childElement, 'indeterminate', null);
                } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {
                  this.checkedNodes.push(parent);
                } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {
                  this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));
                }

                if (this.parentNodeCheck.indexOf(parent) === -1) {
                  this.parentNodeCheck.push(parent);
                }
              }

              var innerChild = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), subChild[j]);

              if (innerChild) {
                this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);
              }
            }
          }
        }, {
          key: "changeState",
          value: function changeState(wrapper, state, e, isPrevent, isAdd, doCheck) {
            var _this79 = this;

            var eventArgs;
            var currLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(wrapper, '.' + LISTITEM);

            if (!isPrevent) {
              this.checkActionNodes = [];
              eventArgs = this.getCheckEvent(currLi, state, e);
              this.trigger('nodeChecking', eventArgs, function (observedArgs) {
                if (!observedArgs.cancel) {
                  _this79.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);
                }
              });
            } else {
              this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);
            }
          }
        }, {
          key: "nodeCheckAction",
          value: function nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {
            var ariaState;
            var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];

            if (state === 'check' && !frameSpan.classList.contains(CHECK)) {
              frameSpan.classList.remove(INDETERMINATE);
              frameSpan.classList.add(CHECK);
              this.addCheck(currLi);
              ariaState = 'true';
            } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([frameSpan], [CHECK, INDETERMINATE]);
              this.removeCheck(currLi);
              ariaState = 'false';
            } else if (state === 'indeterminate' && !frameSpan.classList.contains(INDETERMINATE) && this.autoCheck) {
              frameSpan.classList.remove(CHECK);
              frameSpan.classList.add(INDETERMINATE);
              this.removeCheck(currLi);
              ariaState = 'mixed';
            }

            ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ariaState)) {
              wrapper.setAttribute('aria-checked', ariaState);
            }

            if (isAdd) {
              var data = [].concat([], this.checkActionNodes);
              eventArgs = this.getCheckEvent(currLi, state, e);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(isPrevent)) {
                eventArgs.data = data;
              }
            }

            if (doCheck !== undefined) {
              this.ensureStateChange(currLi, doCheck);
            }

            if (!isPrevent) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ariaState)) {
                wrapper.setAttribute('aria-checked', ariaState);
                this.allowServerDataBinding = true;
                this.updateServerProperties("check");
                this.allowServerDataBinding = false;
                eventArgs.data[0].checked = ariaState;
                this.trigger('nodeChecked', eventArgs);
                this.checkActionNodes = [];
              }
            }
          }
        }, {
          key: "addCheck",
          value: function addCheck(liEle) {
            var id = liEle.getAttribute('data-uid');

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id) && this.checkedNodes.indexOf(id) === -1) {
              this.checkedNodes.push(id);
            }
          }
        }, {
          key: "removeCheck",
          value: function removeCheck(liEle) {
            var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));

            if (index > -1) {
              this.checkedNodes.splice(index, 1);
            }
          }
        }, {
          key: "getCheckEvent",
          value: function getCheckEvent(currLi, action, e) {
            this.checkActionNodes.push(this.getNodeData(currLi));
            var nodeData = this.checkActionNodes;
            return {
              action: action,
              cancel: false,
              isInteracted: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) ? false : true,
              node: currLi,
              data: nodeData
            };
          }
        }, {
          key: "finalize",
          value: function finalize() {
            var firstUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, this.element);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(firstUl)) {
              firstUl.setAttribute('role', treeAriaAttr.treeRole);
              this.setMultiSelect(this.allowMultiSelection);
              var firstNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTITEM, this.element);

              if (firstNode) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([firstNode], FOCUS);
                this.updateIdAttr(null, firstNode);
              }

              this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;
              this.doExpandAction();
            }
          }
        }, {
          key: "doExpandAction",
          value: function doExpandAction() {
            var eUids = this.expandedNodes;

            if (this.isInitalExpand && eUids.length > 0) {
              this.setProperties({
                expandedNodes: []
              }, true);

              if (this.isBlazorPlatform && !this.initialRender) {
                return;
              } // tslint:disable


              if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {
                this.expandGivenNodes(eUids);
              } else {
                for (var i = 0; i < eUids.length; i++) {
                  var eNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('[data-uid="' + eUids[i] + '"]', this.element);

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eNode)) {
                    var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + EXPANDABLE, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, eNode));

                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon)) {
                      this.expandAction(eNode, icon, null);
                    }
                  } else {
                    if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {
                      this.expandChildren.push(eUids[i].toString());
                    }

                    continue;
                  }
                }

                this.afterFinalized();
              }
            } else {
              this.afterFinalized();
            }
          }
        }, {
          key: "expandGivenNodes",
          value: function expandGivenNodes(arr) {
            var proxy = this;
            this.expandCallback(arr[this.index], function () {
              proxy.index++;

              if (proxy.index < arr.length) {
                proxy.expandGivenNodes(arr);
              } else {
                proxy.afterFinalized();
              }
            });
          }
        }, {
          key: "expandCallback",
          value: function expandCallback(eUid, callback) {
            var eNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('[data-uid="' + eUid + '"]', this.element);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eNode)) {
              var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + EXPANDABLE, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, eNode));

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon)) {
                this.expandAction(eNode, icon, null, false, callback);
              } else {
                callback();
              }
            } else {
              callback();
            }
          }
        }, {
          key: "afterFinalized",
          value: function afterFinalized() {
            if (!this.isBlazorPlatform || this.isBlazorPlatform && !this.initialRender) {
              this.doSelectionAction();
            }

            this.updateCheckedProp();

            if (this.isBlazorPlatform) {
              if (this.initialRender) {
                this.setCheckedNodes(this.checkedNodes);
              }

              this.updateInstance();
              this.initialRender = false;
            }

            this.isAnimate = true;
            this.isInitalExpand = false;

            if (!this.isLoaded || this.isFieldChange) {
              var eventArgs = {
                data: this.treeData
              };
              this.trigger('dataBound', eventArgs);
            }

            this.isLoaded = true;
          }
        }, {
          key: "doSelectionAction",
          value: function doSelectionAction() {
            var sNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + SELECTED$1, this.element);
            var sUids = this.selectedNodes;

            if (sUids.length > 0) {
              this.setProperties({
                selectedNodes: []
              }, true);

              for (var i = 0; i < sUids.length; i++) {
                var sNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('[data-uid="' + sUids[i] + '"]', this.element);

                if (sNode && !sNode.classList.contains('e-active')) {
                  this.selectNode(sNode, null, true);
                } else {
                  this.selectedNodes.push(sUids[i]);
                }

                if (!this.allowMultiSelection) {
                  break;
                }
              }
            } else {
              this.selectGivenNodes(sNodes);
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(sNodes, SELECTED$1);
          }
        }, {
          key: "selectGivenNodes",
          value: function selectGivenNodes(sNodes) {
            for (var i = 0; i < sNodes.length; i++) {
              if (!sNodes[i].classList.contains('e-disable')) {
                this.selectNode(sNodes[i], null, true);
              }

              if (!this.allowMultiSelection) {
                break;
              }
            }
          }
        }, {
          key: "clickHandler",
          value: function clickHandler(event) {
            var target = event.originalEvent.target;

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'contextmenu', this.preventContextMenu);

            if (!target || this.dragStartAction) {
              return;
            } else {
              var classList$$1 = target.classList;
              var li = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTITEM);

              if (!li) {
                return;
              } else if (event.originalEvent.which !== 3) {
                var rippleElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + RIPPLEELMENT, li);
                var rippleIcons = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + ICON, li);
                this.removeHover();
                this.setFocusElement(li);

                if (this.showCheckBox && !li.classList.contains('e-disable')) {
                  var checkWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + CHECKBOXWRAP);

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(checkWrapper)) {
                    var checkElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXFRAME, checkWrapper);
                    this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);
                    this.triggerClickEvent(event.originalEvent, li);
                    return;
                  }
                }

                if (classList$$1.contains(EXPANDABLE)) {
                  this.expandAction(li, target, event);
                } else if (classList$$1.contains(COLLAPSIBLE)) {
                  this.collapseNode(li, target, event);
                } else if (rippleElement && rippleIcons) {
                  if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {
                    this.expandAction(li, rippleIcons, event);
                  } else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {
                    this.collapseNode(li, rippleIcons, event);
                  } else if (!classList$$1.contains(PARENTITEM) && !classList$$1.contains(LISTITEM)) {
                    this.toggleSelect(li, event.originalEvent, false);
                  }
                } else {
                  if (!classList$$1.contains(PARENTITEM) && !classList$$1.contains(LISTITEM)) {
                    this.toggleSelect(li, event.originalEvent, false);
                  }
                }
              }

              this.triggerClickEvent(event.originalEvent, li);
            }
          }
        }, {
          key: "nodeCheckedEvent",
          value: function nodeCheckedEvent(wrapper, isCheck, e) {
            var currLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(wrapper, '.' + LISTITEM);
            var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);
            eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);
            this.trigger('nodeChecked', eventArgs);
          }
        }, {
          key: "triggerClickEvent",
          value: function triggerClickEvent(e, li) {
            var eventArgs = {
              event: e,
              node: li
            };
            this.trigger('nodeClicked', eventArgs);
          }
        }, {
          key: "expandNode",
          value: function expandNode(currLi, icon, loaded) {
            var _this80 = this;

            if (icon.classList.contains(LOAD)) {
              this.hideSpinner(icon);
            }

            if (!this.initialRender) {
              icon.classList.add('interaction');
            }

            if (loaded !== true || loaded === true && currLi.classList.contains('e-expanded')) {
              if (this.preventExpand !== true) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], EXPANDABLE);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], COLLAPSIBLE);
                var start = 0;
                var end = 0;
                var proxy = this;
                var ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, currLi);
                var liEle = currLi;
                this.setHeight(liEle, ul);
                var activeElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTITEM + '.' + ACTIVE, currLi);

                if (this.isAnimate && !this.isRefreshed) {
                  this.aniObj.animate(ul, {
                    name: this.animation.expand.effect,
                    duration: this.animation.expand.duration,
                    timingFunction: this.animation.expand.easing,
                    begin: function begin(args) {
                      liEle.style.overflow = 'hidden';

                      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeElement) && activeElement instanceof HTMLElement) {
                        activeElement.classList.add(ITEM_ANIMATION_ACTIVE);
                      }

                      start = liEle.offsetHeight;
                      end = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, currLi).offsetHeight;
                    },
                    progress: function progress(args) {
                      args.element.style.display = 'block';
                      proxy.animateHeight(args, start, end);
                    },
                    end: function end(args) {
                      args.element.style.display = 'block';

                      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeElement) && activeElement instanceof HTMLElement) {
                        activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);
                      }

                      _this80.expandedNode(liEle, ul, icon);
                    }
                  });
                } else {
                  this.expandedNode(liEle, ul, icon);
                }
              }
            } else {
              var _ul2 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, currLi);

              _ul2.style.display = 'none';

              if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] === true) {
                this.preventExpand = false;
              }
            }

            if (this.initialRender) {
              icon.classList.add('interaction');
            }
          }
        }, {
          key: "expandedNode",
          value: function expandedNode(currLi, ul, icon) {
            ul.style.display = 'block';
            currLi.style.display = 'block';
            currLi.style.overflow = '';
            currLi.style.height = '';
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], PROCESS);
            this.addExpand(currLi);
            this.allowServerDataBinding = true;
            this.updateServerProperties("expand");
            this.allowServerDataBinding = false;

            if (this.isLoaded && this.expandArgs && !this.isRefreshed) {
              this.expandArgs = this.getExpandEvent(currLi, null);
              this.trigger('nodeExpanded', this.expandArgs);
            }
          }
        }, {
          key: "addExpand",
          value: function addExpand(liEle) {
            liEle.setAttribute('aria-expanded', 'true');
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([liEle], NODECOLLAPSED);
            var id = liEle.getAttribute('data-uid');

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id) && this.expandedNodes.indexOf(id) === -1) {
              this.expandedNodes.push(id);
            }
          }
        }, {
          key: "collapseNode",
          value: function collapseNode(currLi, icon, e) {
            var _this81 = this;

            if (icon.classList.contains(PROCESS)) {
              return;
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], PROCESS);
            }

            var colArgs;

            if (this.isLoaded) {
              colArgs = this.getExpandEvent(currLi, e);
              this.trigger('nodeCollapsing', colArgs, function (observedArgs) {
                if (observedArgs.cancel) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], PROCESS);
                } else {
                  _this81.nodeCollapseAction(currLi, icon, observedArgs);
                }
              });
            } else {
              this.nodeCollapseAction(currLi, icon, colArgs);
            }
          }
        }, {
          key: "nodeCollapseAction",
          value: function nodeCollapseAction(currLi, icon, colArgs) {
            var _this82 = this;

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], COLLAPSIBLE);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], EXPANDABLE);
            var start = 0;
            var end = 0;
            var proxy = this;
            var ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, currLi);
            var liEle = currLi;
            var activeElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTITEM + '.' + ACTIVE, currLi);

            if (this.isAnimate) {
              this.aniObj.animate(ul, {
                name: this.animation.collapse.effect,
                duration: this.animation.collapse.duration,
                timingFunction: this.animation.collapse.easing,
                begin: function begin(args) {
                  liEle.style.overflow = 'hidden';

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeElement) && activeElement instanceof HTMLElement) {
                    activeElement.classList.add(ITEM_ANIMATION_ACTIVE);
                  }

                  start = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, currLi).offsetHeight;
                  end = liEle.offsetHeight;
                },
                progress: function progress(args) {
                  proxy.animateHeight(args, start, end);
                },
                end: function end(args) {
                  args.element.style.display = 'none';

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeElement) && activeElement instanceof HTMLElement) {
                    activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);
                  }

                  _this82.collapsedNode(liEle, ul, icon, colArgs);
                }
              });
            } else {
              this.collapsedNode(liEle, ul, icon, colArgs);
            }
          }
        }, {
          key: "collapsedNode",
          value: function collapsedNode(liEle, ul, icon, colArgs) {
            ul.style.display = 'none';
            liEle.style.overflow = '';
            liEle.style.height = '';
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], PROCESS);
            this.allowServerDataBinding = true;
            this.updateServerProperties("expand");
            this.allowServerDataBinding = false;
            this.removeExpand(liEle);

            if (this.isLoaded) {
              this.trigger('nodeCollapsed', colArgs);
            }
          }
        }, {
          key: "removeExpand",
          value: function removeExpand(liEle, toRemove) {
            if (toRemove) {
              liEle.removeAttribute('aria-expanded');
            } else {
              this.disableExpandAttr(liEle);
            }

            var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));

            if (index > -1) {
              this.expandedNodes.splice(index, 1);
            }
          }
        }, {
          key: "disableExpandAttr",
          value: function disableExpandAttr(liEle) {
            liEle.setAttribute('aria-expanded', 'false');
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([liEle], NODECOLLAPSED);
          }
        }, {
          key: "setHeight",
          value: function setHeight(currLi, ul) {
            ul.style.display = 'block';
            ul.style.visibility = 'hidden';
            currLi.style.height = currLi.offsetHeight + 'px';
            ul.style.display = 'none';
            ul.style.visibility = '';
          }
        }, {
          key: "animateHeight",
          value: function animateHeight(args, start, end) {
            var remaining = (args.duration - args.timeStamp) / args.duration;
            var currentHeight = (end - start) * remaining + start;
            args.element.parentElement.style.height = currentHeight + 'px';
          }
        }, {
          key: "renderChildNodes",
          value: function renderChildNodes(parentLi, expandChild, callback, loaded) {
            var _this83 = this;

            var eicon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, parentLi);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eicon)) {
              return;
            }

            this.showSpinner(eicon);
            var childItems; // tslint:disable

            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {
              var level = this.parents(parentLi, '.' + PARENTITEM).length;
              var mapper = this.getChildFields(this.fields, level, 1);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.dataSource)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(eicon);
                this.removeExpand(parentLi, true);
                return;
              }

              this.treeList.push('false');

              if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && this.isOffline) {
                this.treeList.pop();
                childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));
                this.loadChild(childItems, mapper, eicon, parentLi, expandChild, callback, loaded);
                this.updateTemplateForBlazor();
              } else {
                mapper.dataSource.executeQuery(this.getQuery(mapper, parentLi.getAttribute('data-uid'))).then(function (e) {
                  _this83.treeList.pop();

                  childItems = e.result;

                  if (_this83.dataType === 1) {
                    _this83.dataType = 2;
                  }

                  _this83.loadChild(childItems, mapper, eicon, parentLi, expandChild, callback, loaded);

                  _this83.updateTemplateForBlazor();
                })["catch"](function (e) {
                  _this83.trigger('actionFailure', {
                    error: e
                  });
                });
              }
            } else {
              childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));
              this.currentLoadData = childItems;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(childItems) || childItems.length === 0) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(eicon);
                this.removeExpand(parentLi, true);
                return;
              } else {
                if (!this.isBlazorPlatform || !this.initialRender) {
                  this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;
                  parentLi.appendChild(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].createList(this.createElement, this.getSortedData(childItems), this.listBaseOption));
                }

                this.expandNode(parentLi, eicon, loaded);
                this.setSelectionForChildNodes(childItems);
                this.ensureCheckNode(parentLi);
                this.finalizeNode(parentLi);

                if (this.loadOnDemand && this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {
                  this.updateBlazorTemplate();
                }

                this.disableTreeNodes(childItems);
                this.renderSubChild(parentLi, expandChild, loaded);
              }
            }
          }
        }, {
          key: "loadChild",
          value: function loadChild(childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {
            this.currentLoadData = childItems;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(childItems) || childItems.length === 0) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(eicon);
              this.removeExpand(parentLi, true);
            } else {
              this.updateListProp(mapper);

              if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && !this.isOffline) {
                var id = parentLi.getAttribute('data-uid');
                var nodeData = this.getNodeObject(id);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('child', childItems, nodeData);
              }

              this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;
              parentLi.appendChild(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].createList(this.createElement, childItems, this.listBaseOption));
              this.expandNode(parentLi, eicon, loaded);
              this.setSelectionForChildNodes(childItems);
              this.ensureCheckNode(parentLi);
              this.finalizeNode(parentLi);
              this.disableTreeNodes(childItems);
              this.renderSubChild(parentLi, expandChild, loaded);
            }

            if (callback) {
              callback();
            }

            if (this.treeList.length === 0 && !this.isLoaded) {
              this.finalize();
            }
          }
        }, {
          key: "disableTreeNodes",
          value: function disableTreeNodes(childItems) {
            var i = 0;

            while (i < childItems.length) {
              var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;

              if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {
                this.doDisableAction([id]);
              }

              i++;
            }
          }
          /**
           * Sets the child Item in selectedState while rendering the child node
           */

        }, {
          key: "setSelectionForChildNodes",
          value: function setSelectionForChildNodes(nodes) {
            var i;

            for (i = 0; i < nodes.length; i++) {
              var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;

              if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {
                this.doSelectionAction();
              }
            }
          }
        }, {
          key: "ensureCheckNode",
          value: function ensureCheckNode(element) {
            if (this.showCheckBox) {
              this.ele = this.checkedElement ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;

              if (this.autoCheck) {
                this.ensureChildCheckState(element);
                this.ensureParentCheckState(element);
              }
            }

            this.currentLoadData = null;
          }
        }, {
          key: "getFields",
          value: function getFields(mapper, nodeLevel, dataLevel) {
            if (nodeLevel === dataLevel) {
              return mapper;
            } else {
              return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
            }
          }
        }, {
          key: "getChildFields",
          value: function getChildFields(mapper, nodeLevel, dataLevel) {
            if (nodeLevel === dataLevel) {
              return this.getChildMapper(mapper);
            } else {
              return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
            }
          }
        }, {
          key: "getChildMapper",
          value: function getChildMapper(mapper) {
            return typeof mapper.child === 'string' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.child) ? mapper : mapper.child;
          }
        }, {
          key: "getChildNodes",
          value: function getChildNodes(obj, parentId) {
            var isRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var childNodes;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(obj)) {
              return childNodes;
            } else if (this.dataType === 1) {
              return this.getChildGroup(this.groupedData, parentId, isRoot);
            } else {
              if (typeof this.fields.child === 'string') {
                for (var i = 0, objlen = obj.length; i < objlen; i++) {
                  var dataId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.id, obj[i]);

                  if (dataId && dataId.toString() === parentId) {
                    return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child, obj[i]);
                  } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child, obj[i]))) {
                    childNodes = this.getChildNodes(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child, obj[i]), parentId);

                    if (childNodes !== undefined) {
                      break;
                    }
                  }
                }
              }
            }

            return childNodes;
          }
        }, {
          key: "getChildGroup",
          value: function getChildGroup(data, parentId, isRoot) {
            var childNodes;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data)) {
              return childNodes;
            }

            for (var i = 0, objlen = data.length; i < objlen; i++) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data[i][0]) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.parentID, data[i][0]))) {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.parentID, data[i][0]).toString() === parentId) {
                  return data[i];
                }
              } else if (isRoot) {
                return data[i];
              } else {
                return [];
              }
            }

            return childNodes;
          }
        }, {
          key: "renderSubChild",
          value: function renderSubChild(element, expandChild, loaded) {
            if (expandChild) {
              var cIcons = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + EXPANDABLE, element);

              for (var i = 0, len = cIcons.length; i < len; i++) {
                var icon = cIcons[i];

                if (element.querySelector('.e-icons') !== cIcons[i]) {
                  var curLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(icon, '.' + LISTITEM);
                  this.expandArgs = this.getExpandEvent(curLi, null);

                  if (loaded !== true) {
                    this.trigger('nodeExpanding', this.expandArgs);
                  }

                  this.renderChildNodes(curLi, expandChild, null, loaded);
                }
              }
            }
          }
        }, {
          key: "toggleSelect",
          value: function toggleSelect(li, e, multiSelect) {
            if (!li.classList.contains('e-disable')) {
              if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {
                this.unselectNode(li, e);
              } else {
                this.selectNode(li, e, multiSelect);
              }
            }
          }
        }, {
          key: "isActive",
          value: function isActive(li) {
            return li.classList.contains(ACTIVE) ? true : false;
          }
        }, {
          key: "selectNode",
          value: function selectNode(li, e, multiSelect) {
            var _this84 = this;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li) || !this.allowMultiSelection && this.isActive(li) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)) {
              this.setFocusElement(li);
              return;
            }

            var eventArgs;

            if (this.isLoaded) {
              eventArgs = this.getSelectEvent(li, 'select', e);
              this.trigger('nodeSelecting', eventArgs, function (observedArgs) {
                if (!observedArgs.cancel) {
                  _this84.nodeSelectAction(li, e, observedArgs, multiSelect);
                }
              });
            } else {
              this.nodeSelectAction(li, e, eventArgs, multiSelect);
            }
          }
        }, {
          key: "nodeSelectAction",
          value: function nodeSelectAction(li, e, eventArgs, multiSelect) {
            if (!this.allowMultiSelection || !multiSelect && (!e || e && !e.ctrlKey)) {
              this.removeSelectAll();
            }

            if (this.allowMultiSelection && e && e.shiftKey) {
              if (!this.startNode) {
                this.startNode = li;
              }

              var startIndex = this.liList.indexOf(this.startNode);
              var endIndex = this.liList.indexOf(li);

              if (startIndex > endIndex) {
                var temp = startIndex;
                startIndex = endIndex;
                endIndex = temp;
              }

              for (var i = startIndex; i <= endIndex; i++) {
                var currNode = this.liList[i];

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(currNode) && !currNode.classList.contains('e-disable')) {
                  this.addSelect(currNode);
                }
              }
            } else {
              this.startNode = li;
              this.addSelect(li);
            }

            this.setFocusElement(li);

            if (this.isLoaded) {
              this.allowServerDataBinding = true;
              this.updateServerProperties("select");
              this.allowServerDataBinding = false;
              eventArgs.nodeData = this.getNodeData(li);
              this.trigger('nodeSelected', eventArgs);
            }
          }
        }, {
          key: "unselectNode",
          value: function unselectNode(li, e) {
            var _this85 = this;

            var eventArgs;

            if (this.isLoaded) {
              eventArgs = this.getSelectEvent(li, 'un-select', e);
              this.trigger('nodeSelecting', eventArgs, function (observedArgs) {
                if (!observedArgs.cancel) {
                  _this85.allowServerDataBinding = true;

                  _this85.updateServerProperties("select");

                  _this85.allowServerDataBinding = false;

                  _this85.nodeUnselectAction(li, observedArgs);
                }
              });
            } else {
              this.nodeUnselectAction(li, eventArgs);
            }
          }
        }, {
          key: "nodeUnselectAction",
          value: function nodeUnselectAction(li, eventArgs) {
            this.removeSelect(li);
            this.setFocusElement(li);

            if (this.isLoaded) {
              this.allowServerDataBinding = true;
              this.updateServerProperties("select");
              this.allowServerDataBinding = false;
              eventArgs.nodeData = this.getNodeData(li);
              this.trigger('nodeSelected', eventArgs);
            }
          }
        }, {
          key: "setFocusElement",
          value: function setFocusElement(li) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
              var focusedNode = this.getFocusedNode();

              if (focusedNode) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([focusedNode], FOCUS);
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([li], FOCUS);
              this.updateIdAttr(focusedNode, li);
            }
          }
        }, {
          key: "addSelect",
          value: function addSelect(liEle) {
            liEle.setAttribute('aria-selected', 'true');
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([liEle], ACTIVE);
            var id = liEle.getAttribute('data-uid');

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id) && this.selectedNodes.indexOf(id) === -1) {
              this.selectedNodes.push(id);
            }
          }
        }, {
          key: "removeSelect",
          value: function removeSelect(liEle) {
            if (this.allowMultiSelection) {
              liEle.setAttribute('aria-selected', 'false');
            } else {
              liEle.removeAttribute('aria-selected');
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([liEle], ACTIVE);
            var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));

            if (index > -1) {
              this.selectedNodes.splice(index, 1);
            }
          }
        }, {
          key: "removeSelectAll",
          value: function removeSelectAll() {
            var selectedLI = this.element.querySelectorAll('.' + ACTIVE);

            var _iterator45 = _createForOfIteratorHelper(selectedLI),
                _step45;

            try {
              for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
                var ele = _step45.value;

                if (this.allowMultiSelection) {
                  ele.setAttribute('aria-selected', 'false');
                } else {
                  ele.removeAttribute('aria-selected');
                }
              }
            } catch (err) {
              _iterator45.e(err);
            } finally {
              _iterator45.f();
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(selectedLI, ACTIVE);
            this.setProperties({
              selectedNodes: []
            }, true);
          }
        }, {
          key: "getSelectEvent",
          value: function getSelectEvent(currLi, action, e) {
            var nodeData = this.getNodeData(currLi);
            return {
              action: action,
              cancel: false,
              isInteracted: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) ? false : true,
              node: currLi,
              nodeData: nodeData
            };
          }
        }, {
          key: "setExpandOnType",
          value: function setExpandOnType() {
            this.expandOnType = this.expandOn === 'Auto' ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? 'Click' : 'DblClick' : this.expandOn;
          }
        }, {
          key: "expandHandler",
          value: function expandHandler(e) {
            var target = e.originalEvent.target;

            if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || this.showCheckBox && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + CHECKBOXWRAP)) {
              return;
            } else {
              this.expandCollapseAction(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTITEM), e);
            }
          }
        }, {
          key: "expandCollapseAction",
          value: function expandCollapseAction(currLi, e) {
            var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, currLi);

            if (!icon || icon.classList.contains(PROCESS)) {
              return;
            } else {
              var classList$$1 = icon.classList;

              if (classList$$1.contains(EXPANDABLE)) {
                this.expandAction(currLi, icon, e);
              } else if (classList$$1.contains(COLLAPSIBLE)) {
                this.collapseNode(currLi, icon, e);
              }
            }
          }
        }, {
          key: "expandAction",
          value: function expandAction(currLi, icon, e, expandChild, callback) {
            var _this86 = this;

            if (icon.classList.contains(PROCESS)) {
              return;
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], PROCESS);
            }

            if (this.isLoaded && !this.isRefreshed) {
              this.expandArgs = this.getExpandEvent(currLi, e);
              this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {
                if (observedArgs.cancel) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], PROCESS);
                } else {
                  _this86.nodeExpandAction(currLi, icon, expandChild, callback);
                }
              });
            } else {
              this.nodeExpandAction(currLi, icon, expandChild, callback);
            }
          }
        }, {
          key: "nodeExpandAction",
          value: function nodeExpandAction(currLi, icon, expandChild, callback) {
            var ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, currLi);

            if (ul && ul.nodeName === 'UL') {
              this.expandNode(currLi, icon);
            } else {
              this.renderChildNodes(currLi, expandChild, callback);
              var liEles = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM, currLi);

              for (var i = 0; i < liEles.length; i++) {
                var id = this.getId(liEles[i]);

                if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {
                  var _icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + EXPANDABLE, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, liEles[i]));

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_icon)) {
                    this.expandAction(liEles[i], _icon, null);
                  }

                  this.expandChildren.splice(this.expandChildren.indexOf(id), 1);
                }
              }
            }
          }
        }, {
          key: "keyActionHandler",
          value: function keyActionHandler(e) {
            var _this87 = this;

            var target = e.target;
            var focusedNode = this.getFocusedNode();

            if (target && target.classList.contains(INPUT)) {
              var inpEle = target;

              if (e.action === 'enter') {
                inpEle.blur();
                this.element.focus();
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([focusedNode], HOVER);
              } else if (e.action === 'escape') {
                inpEle.value = this.oldText;
                inpEle.blur();
                this.element.focus();
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([focusedNode], HOVER);
              }

              return;
            }

            e.preventDefault();
            var eventArgs = {
              cancel: false,
              event: e,
              node: focusedNode
            };
            this.trigger('keyPress', eventArgs, function (observedArgs) {
              if (!observedArgs.cancel) {
                switch (e.action) {
                  case 'space':
                    if (_this87.showCheckBox) {
                      _this87.checkNode(e);
                    }

                    break;

                  case 'moveRight':
                    _this87.openNode(_this87.enableRtl ? false : true, e);

                    break;

                  case 'moveLeft':
                    _this87.openNode(_this87.enableRtl ? true : false, e);

                    break;

                  case 'shiftDown':
                    _this87.shiftKeySelect(true, e);

                    break;

                  case 'moveDown':
                  case 'ctrlDown':
                  case 'csDown':
                    _this87.navigateNode(true);

                    break;

                  case 'shiftUp':
                    _this87.shiftKeySelect(false, e);

                    break;

                  case 'moveUp':
                  case 'ctrlUp':
                  case 'csUp':
                    _this87.navigateNode(false);

                    break;

                  case 'home':
                  case 'shiftHome':
                  case 'ctrlHome':
                  case 'csHome':
                    _this87.navigateRootNode(true);

                    break;

                  case 'end':
                  case 'shiftEnd':
                  case 'ctrlEnd':
                  case 'csEnd':
                    _this87.navigateRootNode(false);

                    break;

                  case 'enter':
                  case 'ctrlEnter':
                  case 'shiftEnter':
                  case 'csEnter':
                    _this87.toggleSelect(focusedNode, e);

                    break;

                  case 'f2':
                    if (_this87.allowEditing && !focusedNode.classList.contains('e-disable')) {
                      _this87.createTextbox(focusedNode, e);
                    }

                    break;

                  case 'ctrlA':
                    if (_this87.allowMultiSelection) {
                      var sNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this87.element);

                      _this87.selectGivenNodes(sNodes);
                    }

                    break;
                }
              }
            });
          }
        }, {
          key: "navigateToFocus",
          value: function navigateToFocus(isUp) {
            var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);
            var pos = focusNode.getBoundingClientRect();
            var parent = this.getScrollParent(this.element);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parent)) {
              var parentPos = parent.getBoundingClientRect();

              if (pos.bottom > parentPos.bottom) {
                parent.scrollTop += pos.bottom - parentPos.bottom;
              } else if (pos.top < parentPos.top) {
                parent.scrollTop -= parentPos.top - pos.top;
              }
            }

            var isVisible$$1 = this.isVisibleInViewport(focusNode);

            if (!isVisible$$1) {
              focusNode.scrollIntoView(isUp);
            }
          }
        }, {
          key: "isVisibleInViewport",
          value: function isVisibleInViewport(txtWrap) {
            var pos = txtWrap.getBoundingClientRect();
            return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);
          }
        }, {
          key: "getScrollParent",
          value: function getScrollParent(node) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(node)) {
              return null;
            }

            return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);
          }
        }, {
          key: "shiftKeySelect",
          value: function shiftKeySelect(isTowards, e) {
            if (this.allowMultiSelection) {
              var focusedNode = this.getFocusedNode();
              var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);
              this.removeHover();
              this.setFocusElement(nextNode);
              this.toggleSelect(nextNode, e, false);
              this.navigateToFocus(!isTowards);
            } else {
              this.navigateNode(isTowards);
            }
          }
        }, {
          key: "checkNode",
          value: function checkNode(e) {
            var focusedNode = this.getFocusedNode();
            var checkWrap = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXWRAP, focusedNode);
            var isChecked = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);

            if (!focusedNode.classList.contains('e-disable')) {
              if (focusedNode.getElementsByClassName("e-checkbox-disabled").length == 0) {
                this.validateCheckNode(checkWrap, isChecked, focusedNode, e);
              }
            }
          }
        }, {
          key: "validateCheckNode",
          value: function validateCheckNode(checkWrap, isCheck, li, e) {
            var _this88 = this;

            var currLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(checkWrap, '.' + LISTITEM);
            this.checkActionNodes = [];
            var ariaState = !isCheck ? 'true' : 'false';

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ariaState)) {
              checkWrap.setAttribute('aria-checked', ariaState);
            }

            var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);
            this.trigger('nodeChecking', eventArgs, function (observedArgs) {
              if (!observedArgs.cancel) {
                _this88.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);
              }
            });
          }
        }, {
          key: "nodeCheckingAction",
          value: function nodeCheckingAction(checkWrap, isCheck, li, eventArgs, e) {
            if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {
              this.checkedElement.push(li.getAttribute('data-uid'));
              var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));
              child !== null ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;
            }

            this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);

            if (this.autoCheck) {
              this.ensureChildCheckState(li);
              this.ensureParentCheckState(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(li, '.' + PARENTITEM), '.' + LISTITEM));
              var doCheck;

              if (eventArgs.action === 'check') {
                doCheck = true;
              } else if (eventArgs.action === 'uncheck') {
                doCheck = false;
              }

              this.ensureStateChange(li, doCheck);
            }

            this.allowServerDataBinding = true;
            this.updateServerProperties("check");
            this.allowServerDataBinding = false;
            this.nodeCheckedEvent(checkWrap, isCheck, e);
          }
          /**
           * Update checkedNodes when UI interaction happens before the child node renders in DOM
           */

        }, {
          key: "ensureStateChange",
          value: function ensureStateChange(li, doCheck) {
            var childElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, li);
            var parentIndex = li.getAttribute('data-uid');
            var mapper = this.fields;

            if (this.dataType === 1 && this.autoCheck) {
              var resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["Query"]().where(mapper.parentID, 'equal', parentIndex, true));

              for (var i = 0; i < resultData.length; i++) {
                var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;
                var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;

                if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {
                  this.checkedNodes.push(resultId);
                  var childItems = this.getChildNodes(this.treeData, resultId);
                  this.getChildItems(childItems, doCheck);

                  if (this.parentNodeCheck.indexOf(resultId) !== -1) {
                    this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
                  }
                } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {
                  this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);

                  if (isCheck === 'true') {
                    this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);
                  }

                  if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {
                    var childNodes = this.getChildNodes(this.treeData, resultId);
                    this.getChildItems(childNodes, doCheck);

                    if (this.parentNodeCheck.indexOf(resultId) !== -1) {
                      this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
                    }
                  }
                } else {
                  var _childItems = this.getChildNodes(this.treeData, resultId);

                  this.getChildItems(_childItems, doCheck);
                }
              }
            } else if (this.dataType === 1 && !this.autoCheck) {
              if (!doCheck) {
                var checkedData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["Query"]().where(mapper.isChecked, 'equal', true, false));

                for (var _i31 = 0; _i31 < checkedData.length; _i31++) {
                  var id = checkedData[_i31][this.fields.id] ? checkedData[_i31][this.fields.id].toString() : null;

                  if (this.checkedNodes.indexOf(id) !== -1) {
                    this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
                  }

                  this.updateField(this.treeData, this.fields, id, 'isChecked', null);
                }

                this.checkedNodes = [];
              } else {
                for (var _i32 = 0; _i32 < this.treeData.length; _i32++) {
                  var checkedId = this.treeData[_i32][this.fields.id] ? this.treeData[_i32][this.fields.id].toString() : null;

                  if (this.checkedNodes.indexOf(checkedId) === -1) {
                    this.checkedNodes.push(checkedId);
                  }
                }
              }
            } else {
              var _childItems2 = this.getChildNodes(this.treeData, parentIndex);

              if (_childItems2) {
                this.childStateChange(_childItems2, parentIndex, childElement, doCheck);
              }
            }
          }
        }, {
          key: "getChildItems",
          value: function getChildItems(childItems, doCheck) {
            for (var i = 0; i < childItems.length; i++) {
              var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;
              var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;

              if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {
                this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);
              }

              if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {
                this.checkedNodes.push(childId);
              }

              if (childIsCheck === 'true' && !doCheck) {
                this.updateField(this.treeData, this.fields, childId, 'isChecked', null);
              }

              var subChildItems = this.getChildNodes(this.treeData, childId);

              if (subChildItems.length > 0) {
                this.getChildItems(subChildItems, doCheck);
              }
            }
          }
          /**
           * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS
           */

        }, {
          key: "childStateChange",
          value: function childStateChange(childItems, parent, childElement, doCheck) {
            for (var i = 0; i < childItems.length; i++) {
              var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';
              var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;

              if (this.autoCheck) {
                if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {
                  this.checkedNodes.push(checkedChild);

                  if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {
                    this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);
                  }
                } else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {
                  this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);

                  if (isCheck === 'true') {
                    this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);
                  }
                }
              } else if (!this.autoCheck) {
                if (!doCheck) {
                  if (this.checkedNodes.indexOf(checkedChild) !== -1) {
                    this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);
                  }

                  this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);
                  this.checkedNodes = [];
                } else {
                  if (this.checkedNodes.indexOf(checkedChild) === -1) {
                    this.checkedNodes.push(checkedChild);
                  }
                }
              }

              var subChild = this.getChildNodes([childItems[i]], checkedChild);

              if (subChild) {
                this.childStateChange(subChild, parent, childElement, doCheck);
              }
            }
          } //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false

        }, {
          key: "allCheckNode",
          value: function allCheckNode(child, newCheck, checked, childCheck, validateCheck) {
            if (child) {
              for (var length = 0; length < child.length; length++) {
                var childId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.id, child[length]);
                var check = this.element.querySelector('[data-uid="' + childId + '"]'); //Validates isChecked case while no UI interaction has been performed on the node or it's parent

                if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {
                  if (check === null && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(child[length][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {
                    child[length][this.fields.isChecked] !== false || checked === 2 ? newCheck.push(childId.toString()) : childCheck = null;
                    childCheck = child[length][this.fields.isChecked] !== false || checked === 2 ? 0 : null;
                  }
                } //Pushes child checked node done thro' UI interaction


                if (newCheck.indexOf(childId.toString()) === -1 && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(checked)) {
                  newCheck.push(childId.toString());
                } //Gets if any next level children are available for child nodes


                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.hasChildren, child[length]) === true || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), child[length])) {
                  var id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.id, child[length]);

                  var _childId = this.getChildNodes(this.treeData, id.toString());

                  if (_childId) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(validateCheck) ? this.allCheckNode(_childId, newCheck, checked, childCheck) : this.allCheckNode(_childId, newCheck, checked, childCheck, validateCheck);
                    childCheck = null;
                  }
                }

                childCheck = null;
              }
            }
          }
        }, {
          key: "openNode",
          value: function openNode(toBeOpened, e) {
            var focusedNode = this.getFocusedNode();
            var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, focusedNode);

            if (toBeOpened) {
              if (!icon) {
                return;
              } else if (icon.classList.contains(EXPANDABLE)) {
                this.expandAction(focusedNode, icon, e);
              } else {
                this.focusNextNode(focusedNode, true);
              }
            } else {
              if (icon && icon.classList.contains(COLLAPSIBLE)) {
                this.collapseNode(focusedNode, icon, e);
              } else {
                var parentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);

                if (!parentLi) {
                  return;
                } else {
                  if (!parentLi.classList.contains('e-disable')) {
                    this.setFocus(focusedNode, parentLi);
                    this.navigateToFocus(true);
                  }
                }
              }
            }
          }
        }, {
          key: "navigateNode",
          value: function navigateNode(isTowards) {
            var focusedNode = this.getFocusedNode();
            this.focusNextNode(focusedNode, isTowards);
          }
        }, {
          key: "navigateRootNode",
          value: function navigateRootNode(isBackwards) {
            var focusedNode = this.getFocusedNode();
            var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();

            if (!rootNode.classList.contains('e-disable')) {
              this.setFocus(focusedNode, rootNode);
              this.navigateToFocus(isBackwards);
            }
          }
        }, {
          key: "getFocusedNode",
          value: function getFocusedNode() {
            var selectedItem;
            var fNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTITEM + '.' + FOCUS, this.element);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fNode)) {
              selectedItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTITEM, this.element);
            }

            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fNode) ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;
          }
        }, {
          key: "focusNextNode",
          value: function focusNextNode(li, isTowards) {
            var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);
            this.setFocus(li, nextNode);
            this.navigateToFocus(!isTowards);

            if (nextNode.classList.contains('e-disable')) {
              var lastChild = nextNode.lastChild;

              if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {
                this.focusNextNode(nextNode, true);
              } else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {
                this.focusNextNode(nextNode, false);
              } else if (nextNode.nextSibling == null && lastChild.classList.contains('e-text-content')) {
                this.focusNextNode(nextNode, false);
              } else {
                this.focusNextNode(nextNode, isTowards);
              }
            }
          }
        }, {
          key: "getNextNode",
          value: function getNextNode(li) {
            var index = this.liList.indexOf(li);
            var nextNode;

            do {
              index++;
              nextNode = this.liList[index];

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nextNode)) {
                return li;
              }
            } while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(nextNode));

            return nextNode;
          }
        }, {
          key: "getPrevNode",
          value: function getPrevNode(li) {
            var index = this.liList.indexOf(li);
            var prevNode;

            do {
              index--;
              prevNode = this.liList[index];

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(prevNode)) {
                return li;
              }
            } while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(prevNode));

            return prevNode;
          }
        }, {
          key: "getRootNode",
          value: function getRootNode() {
            var index = 0;
            var rootNode;

            do {
              rootNode = this.liList[index];
              index++;
            } while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(rootNode));

            return rootNode;
          }
        }, {
          key: "getEndNode",
          value: function getEndNode() {
            var index = this.liList.length - 1;
            var endNode;

            do {
              endNode = this.liList[index];
              index--;
            } while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(endNode));

            return endNode;
          }
        }, {
          key: "setFocus",
          value: function setFocus(preNode, nextNode) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([preNode], [HOVER, FOCUS]);

            if (!nextNode.classList.contains('e-disable')) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([nextNode], [HOVER, FOCUS]);
              this.updateIdAttr(preNode, nextNode);
            }
          }
        }, {
          key: "updateIdAttr",
          value: function updateIdAttr(preNode, nextNode) {
            this.element.removeAttribute('aria-activedescendant');

            if (preNode) {
              preNode.removeAttribute('id');
            }

            nextNode.setAttribute('id', this.element.id + '_active');
            this.element.setAttribute('aria-activedescendant', this.element.id + '_active');
          }
        }, {
          key: "focusIn",
          value: function focusIn() {
            if (!this.mouseDownStatus) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.getFocusedNode()], HOVER);
            }

            this.mouseDownStatus = false;
          }
        }, {
          key: "focusOut",
          value: function focusOut() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.getFocusedNode()], HOVER);
          }
        }, {
          key: "onMouseOver",
          value: function onMouseOver(e) {
            var target = e.target;
            var classList$$1 = target.classList;
            var currentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTITEM);

            if (!currentLi || classList$$1.contains(PARENTITEM) || classList$$1.contains(LISTITEM)) {
              this.removeHover();
              return;
            } else {
              if (currentLi && !currentLi.classList.contains('e-disable')) {
                this.setHover(currentLi);
              }
            }
          }
        }, {
          key: "setHover",
          value: function setHover(li) {
            if (!li.classList.contains(HOVER)) {
              this.removeHover();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([li], HOVER);
            }
          }
        }, {
          key: "onMouseLeave",
          value: function onMouseLeave(e) {
            this.removeHover();
          }
        }, {
          key: "removeHover",
          value: function removeHover() {
            var hoveredNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + HOVER, this.element);

            if (hoveredNode && hoveredNode.length) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(hoveredNode, HOVER);
            }
          }
        }, {
          key: "getNodeData",
          value: function getNodeData(currLi, fromDS) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(currLi) && currLi.classList.contains(LISTITEM) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(currLi, '.' + CONTROL)) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(currLi, '.' + CONTROL).classList.contains(ROOT)) {
              var id = currLi.getAttribute('data-uid');
              var text = this.getText(currLi, fromDS);
              var pNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(currLi.parentNode, '.' + LISTITEM);
              var pid = pNode ? pNode.getAttribute('data-uid') : null;
              var selected = currLi.classList.contains(ACTIVE);
              var expanded = currLi.getAttribute('aria-expanded') === 'true' ? true : false;
              var hasChildren = currLi.getAttribute('aria-expanded') === null ? false : true;

              if (this.isBlazorPlatform) {
                hasChildren = currLi.getAttribute('aria-expanded') === 'true' ? true : (currLi.querySelector('.e-icon-expandable') || currLi.querySelector('.e-icon-collapsible')) != null ? true : false;
              }

              var checked = null;

              if (this.showCheckBox) {
                checked = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXWRAP, currLi).getAttribute('aria-checked');
              }

              return {
                id: id,
                text: text,
                parentID: pid,
                selected: selected,
                expanded: expanded,
                isChecked: checked,
                hasChildren: hasChildren
              };
            }

            return {
              id: '',
              text: '',
              parentID: '',
              selected: false,
              expanded: false,
              isChecked: '',
              hasChildren: false
            };
          }
        }, {
          key: "getText",
          value: function getText(currLi, fromDS) {
            if (fromDS) {
              var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));
              var level = parseFloat(currLi.getAttribute('aria-level'));
              var nodeFields = this.getFields(this.fields, level, 1);
              return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(nodeFields.text, nodeData);
            }

            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTTEXT, currLi).textContent;
          }
        }, {
          key: "getExpandEvent",
          value: function getExpandEvent(currLi, e) {
            var nodeData = this.getNodeData(currLi);
            return {
              cancel: false,
              isInteracted: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) ? false : true,
              node: currLi,
              nodeData: nodeData,
              event: e
            };
          }
        }, {
          key: "destroyTemplate",
          value: function destroyTemplate(nodeTemplate) {
            this.clearTemplate(['nodeTemplate']);
          }
        }, {
          key: "reRenderNodes",
          value: function reRenderNodes() {
            this.updateListProp(this.fields);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.element.id + 'nodeTemplate', 'NodeTemplate');

            if (this.isBlazorPlatform) {
              this.ulElement = this.element.querySelector('.e-list-parent.e-ul');
              this.ulElement.parentElement.removeChild(this.ulElement);
            } else {
              this.element.innerHTML = '';
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.nodeTemplateFn)) {
              this.destroyTemplate(this.nodeTemplate);
            }

            this.setTouchClass();
            this.setProperties({
              selectedNodes: [],
              checkedNodes: [],
              expandedNodes: []
            }, true);
            this.checkedElement = [];
            this.isLoaded = false;
            this.setDataBinding(true);
          }
        }, {
          key: "setCssClass",
          value: function setCssClass(oldClass, newClass) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldClass) && oldClass !== '') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldClass.split(' '));
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newClass) && newClass !== '') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], newClass.split(' '));
            }
          }
        }, {
          key: "editingHandler",
          value: function editingHandler(e) {
            var target = e.target;

            if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {
              return;
            } else {
              var liEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTITEM);
              this.createTextbox(liEle, e);
            }
          }
        }, {
          key: "createTextbox",
          value: function createTextbox(liEle, e) {
            var _this89 = this;

            var oldInpEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TREEINPUT, this.element);

            if (oldInpEle) {
              oldInpEle.blur();
            }

            var textEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTTEXT, liEle);
            this.updateOldText(liEle);
            var innerEle = this.createElement('input', {
              className: TREEINPUT,
              attrs: {
                value: this.oldText
              }
            });
            var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);
            this.trigger('nodeEditing', eventArgs, function (observedArgs) {
              if (!observedArgs.cancel) {
                var inpWidth = textEle.offsetWidth + 5;
                var style = 'width:' + inpWidth + 'px';
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([liEle], EDITING);
                textEle.innerHTML = eventArgs.innerHtml;
                var inpEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TREEINPUT, textEle);
                _this89.inputObj = _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_5__["Input"].createInput({
                  element: inpEle,
                  properties: {
                    enableRtl: _this89.enableRtl
                  }
                }, _this89.createElement);

                _this89.inputObj.container.setAttribute('style', style);

                inpEle.focus();
                var inputEle = inpEle;
                inputEle.setSelectionRange(0, inputEle.value.length);

                _this89.wireInputEvents(inpEle);
              }
            });
          }
        }, {
          key: "updateOldText",
          value: function updateOldText(liEle) {
            var id = liEle.getAttribute('data-uid');
            this.editData = this.getNodeObject(id);
            var level = parseFloat(liEle.getAttribute('aria-level'));
            this.editFields = this.getFields(this.fields, level, 1);
            this.oldText = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.editFields.text, this.editData);
          }
        }, {
          key: "inputFocusOut",
          value: function inputFocusOut(e) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TREEINPUT, this.element)) {
              return;
            }

            var target = e.target;
            var newText = target.value;
            var txtEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTTEXT);
            var liEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + LISTITEM);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.inputObj.container);

            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && !this.isOffline && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {
              this.crudOperation('update', null, liEle, newText, null, null, true);
            } else {
              this.appendNewText(liEle, txtEle, newText, true);
            }
          }
        }, {
          key: "appendNewText",
          value: function appendNewText(liEle, txtEle, newText, isInput) {
            var _this90 = this;

            var eventArgs = this.getEditEvent(liEle, newText, null);
            this.trigger('nodeEdited', eventArgs, function (observedArgs) {
              newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;

              _this90.updateText(liEle, txtEle, newText, isInput);

              if (observedArgs.oldText !== newText) {
                _this90.triggerEvent();
              }
            });
          }
        }, {
          key: "updateText",
          value: function updateText(liEle, txtEle, newText, isInput) {
            var newData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(this.editFields.text, newText, this.editData);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.nodeTemplateFn)) {
              txtEle.innerText = '';
              var tempArr = this.nodeTemplateFn(newData, undefined, undefined, this.element.id + 'nodeTemplate', this.isStringTemplate);
              tempArr = Array.prototype.slice.call(tempArr);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(tempArr, txtEle);
              this.updateBlazorTemplate();
            } else {
              txtEle.innerText = newText;
            }

            if (isInput) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([liEle], EDITING);
              txtEle.focus();
            }
          }
        }, {
          key: "getElement",
          value: function getElement(ele) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
              return null;
            } else if (typeof ele === 'string') {
              return this.element.querySelector('[data-uid="' + ele + '"]');
            } else if (typeof ele === 'object') {
              return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getElement"])(ele);
            } else {
              return null;
            }
          }
        }, {
          key: "getId",
          value: function getId(ele) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
              return null;
            } else if (typeof ele === 'string') {
              return ele;
            } else if (typeof ele === 'object') {
              return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getElement"])(ele).getAttribute('data-uid');
            } else {
              return null;
            }
          }
        }, {
          key: "getEditEvent",
          value: function getEditEvent(liEle, newText, inpEle) {
            var data = this.getNodeData(liEle);
            return {
              cancel: false,
              newText: newText,
              node: liEle,
              nodeData: data,
              oldText: this.oldText,
              innerHtml: inpEle
            };
          }
        }, {
          key: "getNodeObject",
          value: function getNodeObject(id) {
            var childNodes;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id)) {
              return childNodes;
            } else if (this.dataType === 1) {
              for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {
                var dataId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.id, this.treeData[i]);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.treeData[i]) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataId) && dataId.toString() === id) {
                  return this.treeData[i];
                }
              }
            } else {
              return this.getChildNodeObject(this.treeData, this.fields, id);
            }

            return childNodes;
          }
        }, {
          key: "getChildNodeObject",
          value: function getChildNodeObject(obj, mapper, id) {
            var newList;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(obj)) {
              return newList;
            }

            for (var i = 0, objlen = obj.length; i < objlen; i++) {
              var dataId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.id, obj[i]);

              if (obj[i] && dataId && dataId.toString() === id) {
                return obj[i];
              } else if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]))) {
                var childData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]);
                newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);

                if (newList !== undefined) {
                  break;
                }
              } else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]))) {
                var child = 'child';
                newList = this.getChildNodeObject(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(child, obj[i]), this.getChildMapper(mapper), id);

                if (newList !== undefined) {
                  break;
                }
              }
            }

            return newList;
          }
        }, {
          key: "setDragAndDrop",
          value: function setDragAndDrop(toBind) {
            if (toBind && !this.disabled) {
              this.initializeDrag();
            } else {
              this.destroyDrag();
            }
          } // tslint:disable-next-line:max-func-body-length

        }, {
          key: "initializeDrag",
          value: function initializeDrag() {
            var _this91 = this;

            var virtualEle;
            var proxy = this;
            this.dragObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Draggable"](this.element, {
              enableTailMode: true,
              enableAutoScroll: true,
              dragArea: this.dragArea,
              dragTarget: '.' + TEXTWRAP,
              helper: function helper(e) {
                _this91.dragTarget = e.sender.target;
                var dragRoot = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(_this91.dragTarget, '.' + ROOT);
                var dragWrap = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(_this91.dragTarget, '.' + TEXTWRAP);
                _this91.dragLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(_this91.dragTarget, '.' + LISTITEM);

                if (_this91.fullRowSelect && !dragWrap && _this91.dragTarget.classList.contains(FULLROW)) {
                  dragWrap = _this91.dragTarget.nextElementSibling;
                }

                if (!_this91.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this91.dragTarget.classList.contains(ROOT) || _this91.dragTarget.classList.contains(PARENTITEM) || _this91.dragTarget.classList.contains(LISTITEM) || _this91.dragLi.classList.contains('e-disable')) {
                  return false;
                }

                var cloneEle = dragWrap.cloneNode(true);

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, cloneEle))) {
                  var icon = proxy.createElement('div', {
                    className: ICON + ' ' + EXPANDABLE
                  });
                  cloneEle.insertBefore(icon, cloneEle.children[0]);
                }

                var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this91.cssClass + ' ' + (_this91.enableRtl ? RTL$1 : '');
                virtualEle = proxy.createElement('div', {
                  className: cssClass
                });
                virtualEle.appendChild(cloneEle);
                var nLen = _this91.selectedNodes.length;

                if (nLen > 1 && _this91.allowMultiSelection && _this91.dragLi.classList.contains(ACTIVE)) {
                  var cNode = proxy.createElement('span', {
                    className: DROPCOUNT,
                    innerHTML: '' + nLen
                  });
                  virtualEle.appendChild(cNode);
                }

                document.body.appendChild(virtualEle);
                document.body.style.cursor = '';
                _this91.dragData = _this91.getNodeData(_this91.dragLi);
                return virtualEle;
              },
              dragStart: function dragStart(e) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this91.element], DRAGGING);
                var listItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-list-item');
                var level;

                if (listItem) {
                  level = parseInt(listItem.getAttribute('aria-level'), 10);
                }

                var eventArgs = _this91.getDragEvent(e.event, _this91, null, e.target, null, virtualEle, level);

                if (eventArgs.draggedNode.classList.contains(EDITING)) {
                  _this91.dragObj.intDestroy(e.event);

                  _this91.dragCancelAction(virtualEle);
                } else {
                  _this91.trigger('nodeDragStart', eventArgs, function (observedArgs) {
                    if (observedArgs.cancel) {
                      _this91.dragObj.intDestroy(e.event);

                      _this91.dragCancelAction(virtualEle);
                    } else {
                      _this91.dragStartAction = true;
                    }

                    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                      e.bindEvents(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getElement"])(e.dragElement));
                    }
                  });
                }
              },
              drag: function drag(e) {
                _this91.dragObj.setProperties({
                  cursorAt: {
                    top: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e.event.targetTouches) || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? 60 : -20
                  }
                });

                _this91.dragAction(e, virtualEle);
              },
              dragStop: function dragStop(e) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this91.element], DRAGGING);

                _this91.removeVirtualEle();

                var dropTarget = e.target;
                var preventTargetExpand = false;
                var dropRoot = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropTarget, '.' + DROPPABLE);
                var isHelperElement = true;

                if (!dropTarget || !dropRoot) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(e.helper);
                  document.body.style.cursor = '';
                  isHelperElement = false;
                }

                var listItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropTarget, '.e-list-item');
                var level;

                if (listItem) {
                  level = parseInt(listItem.getAttribute('aria-level'), 10);
                }

                var eventArgs = _this91.getDragEvent(e.event, _this91, dropTarget, dropTarget, null, e.helper, level);

                eventArgs.preventTargetExpand = preventTargetExpand;

                if (_this91.isBlazorPlatform && _this91.dragStartAction || !_this91.isBlazorPlatform) {
                  _this91.trigger('nodeDragStop', eventArgs, function (observedArgs) {
                    _this91.dragParent = observedArgs.draggedParentNode;
                    _this91.preventExpand = observedArgs.preventTargetExpand;

                    if (observedArgs.cancel) {
                      if (e.helper.parentNode) {
                        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(e.helper);
                      }

                      document.body.style.cursor = '';
                      isHelperElement = false;
                    }

                    _this91.dragStartAction = false;

                    if (_this91.isBlazorPlatform && isHelperElement) {
                      _this91.dropAction(e, true);
                    }
                  });
                }
              }
            });
            this.dropObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Droppable"](this.element, {
              out: function out(e) {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) && !e.target.classList.contains(SIBLING)) {
                  document.body.style.cursor = 'not-allowed';
                }
              },
              over: function over(e) {
                document.body.style.cursor = '';
              },
              drop: function drop(e) {
                if (!_this91.isBlazorPlatform) {
                  _this91.dropAction(e);
                }
              }
            });
          }
        }, {
          key: "dragCancelAction",
          value: function dragCancelAction(virtualEle) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(virtualEle);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], DRAGGING);
            this.dragStartAction = false;
          }
        }, {
          key: "dragAction",
          value: function dragAction(e, virtualEle) {
            var dropRoot = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + DROPPABLE);
            var dropWrap = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + TEXTWRAP);
            var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, virtualEle);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);
            this.removeVirtualEle();
            document.body.style.cursor = '';
            var classList$$1 = e.target.classList;

            if (this.fullRowSelect && !dropWrap && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(classList$$1) && classList$$1.contains(FULLROW)) {
              dropWrap = e.target.nextElementSibling;
            }

            if (dropRoot) {
              var dropLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + LISTITEM);
              var checkWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + CHECKBOXWRAP);
              var collapse = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + COLLAPSIBLE);
              var expand = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + EXPANDABLE);

              if (!dropRoot.classList.contains(ROOT) || dropWrap && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {
                if (dropLi && e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], DROPNEXT);
                  var virEle = this.createElement('div', {
                    className: SIBLING
                  });
                  var index = this.fullRowSelect ? 1 : 0;
                  dropLi.insertBefore(virEle, dropLi.children[index]);
                } else if (dropLi && e && !expand && !collapse && e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10 && !checkWrapper || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], DROPNEXT);

                  var _virEle = this.createElement('div', {
                    className: SIBLING
                  });

                  var _index3 = this.fullRowSelect ? 2 : 1;

                  dropLi.insertBefore(_virEle, dropLi.children[_index3]);
                } else {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], DROPIN);
                }
              } else if (e.target.nodeName === 'LI' && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], DROPNEXT);
                this.renderVirtualEle(e);
              } else if (e.target.classList.contains(SIBLING)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], DROPNEXT);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], DROPOUT);
              }
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], NODROP);
              document.body.style.cursor = 'not-allowed';
            }

            var listItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.e-list-item');
            var level;

            if (listItem) {
              level = parseInt(listItem.getAttribute('aria-level'), 10);
            }

            var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);

            if (eventArgs.dropIndicator) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], eventArgs.dropIndicator);
            }

            this.trigger('nodeDragging', eventArgs);

            if (eventArgs.dropIndicator) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([icon], eventArgs.dropIndicator);
            }
          } // tslint:disable

        }, {
          key: "dropAction",
          value: function dropAction(e, isBlazorDrop) {
            var offsetY = e.event.offsetY;
            var dropTarget = e.target;
            var dragObj;
            var level;
            var drop = false;
            var dragInstance;

            if (!isBlazorDrop) {
              dragInstance = e.dragData.draggable;
            } else {
              dragInstance = e.element;
            }

            for (var i = 0; i < dragInstance.ej2_instances.length; i++) {
              if (dragInstance.ej2_instances[i] instanceof TreeView_1) {
                dragObj = dragInstance.ej2_instances[i];
                break;
              }
            }

            if (dragObj && dragObj.dragTarget) {
              var dragTarget = dragObj.dragTarget;
              var dragLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragTarget, '.' + LISTITEM);
              var dropLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropTarget, '.' + LISTITEM);

              if (dropLi == null && dropTarget.classList.contains(ROOT)) {
                dropLi = dropTarget.firstElementChild;
              }

              if (!isBlazorDrop) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(e.droppedElement);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(e.helper);
              }

              document.body.style.cursor = '';

              if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
                if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] === false) {
                  this.preventExpand = false;
                }

                return;
              }

              if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {
                var sNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + ACTIVE, dragObj.element);

                if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {
                  for (var _i33 = sNodes.length - 1; _i33 >= 0; _i33--) {
                    if (dropLi.isSameNode(sNodes[_i33]) || this.isDescendant(sNodes[_i33], dropLi)) {
                      continue;
                    }

                    this.appendNode(dropTarget, sNodes[_i33], dropLi, e, dragObj, offsetY);
                  }
                } else {
                  for (var _i34 = 0; _i34 < sNodes.length; _i34++) {
                    if (dropLi.isSameNode(sNodes[_i34]) || this.isDescendant(sNodes[_i34], dropLi)) {
                      continue;
                    }

                    this.appendNode(dropTarget, sNodes[_i34], dropLi, e, dragObj, offsetY);
                  }
                }
              } else {
                this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);
              }

              level = parseInt(dragLi.getAttribute('aria-level'), 10);
              drop = true;
            }

            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] === false) {
              this.preventExpand = false;
            }

            if (!isBlazorDrop) {
              this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));
            } else {
              this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.element, null, level, drop));
            }

            this.triggerEvent();
          }
        }, {
          key: "appendNode",
          value: function appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY) {
            var checkWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropTarget, '.' + CHECKBOXWRAP);
            var collapse = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + COLLAPSIBLE);
            var expand = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + EXPANDABLE);

            if (!dragLi.classList.contains('e-disable') && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {
              if (dropTarget.nodeName === 'LI') {
                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
              } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {
                if (dropTarget.firstElementChild.nodeName === 'UL') {
                  this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
                }
              } else if (dropTarget.classList.contains('e-icon-collapsible') || dropTarget.classList.contains('e-icon-expandable')) {
                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
              } else {
                this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);
              }
            } else {
              this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);
            }
          }
        }, {
          key: "dropAsSiblingNode",
          value: function dropAsSiblingNode(dragLi, dropLi, e, dragObj) {
            var dropUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropLi, '.' + PARENTITEM);
            var dragParentUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragLi, '.' + PARENTITEM);
            var dragParentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragParentUl, '.' + LISTITEM);
            var pre;

            if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {
              pre = false;
            } else if (e.event.offsetY < 2) {
              pre = true;
            } else if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {
              if (e.event.offsetY < 5 || e.event.offsetX < 3) {
                pre = true;
              } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {
                pre = false;
              }
            }

            if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {
              var target = e.target.closest('li');
              dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);
            } else {
              dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);
            }

            this.moveData(dragLi, dropLi, dropUl, pre, dragObj);
            this.updateElement(dragParentUl, dragParentLi);
            this.updateAriaLevel(dragLi);

            if (dragObj.element.id === this.element.id) {
              this.updateList();
            } else {
              dragObj.updateInstance();
              this.updateInstance();
            }
          }
        }, {
          key: "dropAsChildNode",
          value: function dropAsChildNode(dragLi, dropLi, dragObj, index, e, pos, isCheck) {
            var dragParentUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragLi, '.' + PARENTITEM);
            var dragParentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragParentUl, '.' + LISTITEM);
            var dropParentUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropLi, '.' + PARENTITEM);

            if (e && pos < 7 && !isCheck) {
              dropParentUl.insertBefore(dragLi, dropLi);
              this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);
            } else if (e && e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10 && !isCheck) {
              dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);
              this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);
            } else {
              var dropUl = this.expandParent(dropLi);
              var childLi = dropUl.childNodes[index];
              dropUl.insertBefore(dragLi, childLi);
              this.moveData(dragLi, childLi, dropUl, true, dragObj);
            }

            this.updateElement(dragParentUl, dragParentLi);
            this.updateAriaLevel(dragLi);

            if (dragObj.element.id === this.element.id) {
              this.updateList();
            } else {
              dragObj.updateInstance();
              this.updateInstance();
            }
          }
        }, {
          key: "moveData",
          value: function moveData(dragLi, dropLi, dropUl, pre, dragObj) {
            var dropParentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropUl, '.' + LISTITEM);
            var id = this.getId(dragLi);
            var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);
            var refId = this.getId(dropLi);
            var index = this.getDataPos(this.treeData, this.fields, refId);
            var parentId = this.getId(dropParentLi);

            if (this.dataType === 1) {
              this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);
              var pos = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index) ? this.treeData.length : pre ? index : index + 1;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parentId) && !this.hasPid) {
                delete removedData[0][this.fields.parentID];
              } else {
                var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(this.fields.parentID, currPid, removedData[0]);
              }

              this.treeData.splice(pos, 0, removedData[0]);

              if (dragObj.element.id !== this.element.id) {
                var childData = dragObj.removeChildNodes(id);
                pos++;

                for (var i = 0, len = childData.length; i < len; i++) {
                  this.treeData.splice(pos, 0, childData[i]);
                  pos++;
                }

                dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);
              }

              this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
            } else {
              this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);
            }
          }
        }, {
          key: "expandParent",
          value: function expandParent(dropLi) {
            var dropIcon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, dropLi);

            if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {
              this.expandAction(dropLi, dropIcon, null);
            }

            var dropUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, dropLi);

            if (this.preventExpand === true && !dropUl && dropIcon) {
              this.renderChildNodes(dropLi);
            }

            dropUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, dropLi);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropUl) && this.preventExpand === true) {
              dropUl.style.display = 'none';
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropUl) && this.preventExpand === false) {
              dropUl.style.display = 'block';
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropUl) && this.preventExpand === true) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropIcon)) {
                _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
              }

              var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, dropLi);

              if (icon) {
                icon.classList.add('e-icon-expandable');
              }

              dropUl = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].generateUL(this.createElement, [], null, this.listBaseOption);
              dropLi.appendChild(dropUl);

              if (icon) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([icon], COLLAPSIBLE);
              } else {
                _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
              }

              dropLi.setAttribute('aria-expanded', 'false');
              dropUl.style.display = 'none';
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropUl)) {
              this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropIcon)) {
                _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);
              }

              var _icon2 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, dropLi);

              if (_icon2) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_icon2], EXPANDABLE);
              } else {
                _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);

                _icon2 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, dropLi);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_icon2], EXPANDABLE);
              }

              dropUl = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].generateUL(this.createElement, [], null, this.listBaseOption);
              dropLi.appendChild(dropUl);
              this.addExpand(dropLi);
              this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));
            }

            return dropUl;
          }
        }, {
          key: "updateElement",
          value: function updateElement(dragParentUl, dragParentLi) {
            if (dragParentLi && dragParentUl.childElementCount === 0) {
              var dragIcon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, dragParentLi);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(dragParentUl);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(dragIcon);
              var parentId = this.getId(dragParentLi);
              this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);
              this.removeExpand(dragParentLi, true);
            }
          }
        }, {
          key: "updateAriaLevel",
          value: function updateAriaLevel(dragLi) {
            var level = this.parents(dragLi, '.' + PARENTITEM).length;
            dragLi.setAttribute('aria-level', '' + level);
            this.updateChildAriaLevel(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, dragLi), level + 1);
          }
        }, {
          key: "updateChildAriaLevel",
          value: function updateChildAriaLevel(element, level) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
              var cNodes = element.childNodes;

              for (var i = 0, len = cNodes.length; i < len; i++) {
                var liEle = cNodes[i];
                liEle.setAttribute('aria-level', '' + level);
                this.updateChildAriaLevel(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, liEle), level + 1);
              }
            }
          }
        }, {
          key: "renderVirtualEle",
          value: function renderVirtualEle(e) {
            var pre;

            if (e.event.offsetY > e.target.offsetHeight - 2) {
              pre = false;
            } else if (e.event.offsetY < 2) {
              pre = true;
            }

            var virEle = this.createElement('div', {
              className: SIBLING
            });
            var index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;
            e.target.insertBefore(virEle, e.target.children[index]);
          }
        }, {
          key: "removeVirtualEle",
          value: function removeVirtualEle() {
            var sibEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + SIBLING);

            if (sibEle) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(sibEle);
            }
          }
        }, {
          key: "destroyDrag",
          value: function destroyDrag() {
            if (this.dragObj && this.dropObj) {
              this.dragObj.destroy();
              this.dropObj.destroy();
            }
          }
        }, {
          key: "getDragEvent",
          value: function getDragEvent(event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {
            var dropLi = dropTarget ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dropTarget, '.' + LISTITEM) : null;
            var dropData = dropLi ? this.getNodeData(dropLi) : null;
            var draggedNode = obj ? obj.dragLi : dragNode;
            var draggedNodeData = obj ? obj.dragData : null;
            var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;
            var dragLiParent = obj.dragLi.parentElement;
            var dragParent = obj.dragLi ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragLiParent, '.' + LISTITEM) : null;
            var targetParent = null;
            var indexValue = null;
            var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];
            var iconClass = null;
            var node = drop === true ? draggedNode : dropLi;
            var index = node ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(node, '.e-list-parent') : null;
            var i = 0;
            dragParent = obj.dragLi && dragParent === null ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragLiParent, '.' + ROOT) : dragParent;
            dragParent = drop === true ? this.dragParent : dragParent;

            if (cloneEle) {
              while (i < 4) {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + ICON, cloneEle).classList.contains(iconCss[i])) {
                  iconClass = iconCss[i];
                  break;
                }

                i++;
              }
            }

            if (index) {
              var dropTar = 0;

              for (i = 0; i < index.childElementCount; i++) {
                dropTar = drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;

                if (drop !== true && index.children[i].classList.contains('e-hover')) {
                  indexValue = event.offsetY >= 23 ? i + 1 : i;
                  break;
                } else if (index.children[i] === node) {
                  indexValue = event.offsetY >= 23 ? i : i;
                  break;
                }
              }

              indexValue = dropTar !== 0 ? --indexValue : indexValue;
            }

            if (dropTarget) {
              if (newParent.length === 0) {
                targetParent = null;
              } else if (dropTarget.classList.contains(LISTITEM)) {
                targetParent = newParent[0];
              } else {
                targetParent = newParent[1];
              }
            }

            if (dropLi === draggedNode) {
              targetParent = dropLi;
            }

            if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {
              targetParent = dropLi;

              if (drop !== true) {
                level = ++level;
                var parent = targetParent ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-list-parent', targetParent) : null;
                indexValue = parent ? parent.children.length : 0;

                if (!(this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"]) && parent === null && targetParent) {
                  var _parent = targetParent.hasAttribute('data-uid') ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;

                  indexValue = _parent ? _parent.length : 0;
                }
              }
            }

            return {
              cancel: false,
              clonedNode: cloneEle,
              event: event,
              draggedNode: draggedNode,
              draggedNodeData: draggedNodeData,
              droppedNode: dropLi,
              droppedNodeData: dropData,
              dropIndex: indexValue,
              dropLevel: level,
              draggedParentNode: dragParent,
              dropTarget: targetParent,
              dropIndicator: iconClass,
              target: target
            };
          }
        }, {
          key: "addFullRow",
          value: function addFullRow(toAdd) {
            var len = this.liList.length;

            if (toAdd) {
              for (var i = 0; i < len; i++) {
                this.createFullRow(this.liList[i]);
              }
            } else {
              for (var _i35 = 0; _i35 < len; _i35++) {
                var rowDiv = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + FULLROW, this.liList[_i35]);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(rowDiv);
              }
            }
          }
        }, {
          key: "createFullRow",
          value: function createFullRow(item) {
            var rowDiv = this.createElement('div', {
              className: FULLROW
            });
            item.insertBefore(rowDiv, item.childNodes[0]);
          }
        }, {
          key: "addMultiSelect",
          value: function addMultiSelect(toAdd) {
            if (toAdd) {
              var liEles = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM + ':not([aria-selected="true"])', this.element);

              var _iterator46 = _createForOfIteratorHelper(liEles),
                  _step46;

              try {
                for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
                  var ele = _step46.value;
                  ele.setAttribute('aria-selected', 'false');
                }
              } catch (err) {
                _iterator46.e(err);
              } finally {
                _iterator46.f();
              }
            } else {
              var _liEles = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM + '[aria-selected="false"]', this.element);

              var _iterator47 = _createForOfIteratorHelper(_liEles),
                  _step47;

              try {
                for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
                  var _ele8 = _step47.value;

                  _ele8.removeAttribute('aria-selected');
                }
              } catch (err) {
                _iterator47.e(err);
              } finally {
                _iterator47.f();
              }
            }
          }
        }, {
          key: "collapseByLevel",
          value: function collapseByLevel(element, level, excludeHiddenNodes) {
            if (level > 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
              var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);

              for (var i = 0, len = cNodes.length; i < len; i++) {
                var liEle = cNodes[i];
                var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + COLLAPSIBLE, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, liEle));

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon)) {
                  this.collapseNode(liEle, icon, null);
                }

                this.collapseByLevel(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
              }
            }
          }
        }, {
          key: "collapseAllNodes",
          value: function collapseAllNodes(excludeHiddenNodes) {
            var cIcons = this.getVisibleNodes(excludeHiddenNodes, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + COLLAPSIBLE, this.element));

            for (var i = 0, len = cIcons.length; i < len; i++) {
              var icon = cIcons[i];
              var liEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(icon, '.' + LISTITEM);
              this.collapseNode(liEle, icon, null);
            }
          }
        }, {
          key: "expandByLevel",
          value: function expandByLevel(element, level, excludeHiddenNodes) {
            if (level > 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
              var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);

              for (var i = 0, len = eNodes.length; i < len; i++) {
                var liEle = eNodes[i];
                var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + EXPANDABLE, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, liEle));

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon)) {
                  this.expandAction(liEle, icon, null);
                }

                this.expandByLevel(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
              }
            }
          }
        }, {
          key: "expandAllNodes",
          value: function expandAllNodes(excludeHiddenNodes) {
            var eIcons = this.getVisibleNodes(excludeHiddenNodes, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + EXPANDABLE, this.element));

            for (var i = 0, len = eIcons.length; i < len; i++) {
              var icon = eIcons[i];
              var liEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(icon, '.' + LISTITEM);
              this.expandAction(liEle, icon, null, true);
            }
          }
        }, {
          key: "getVisibleNodes",
          value: function getVisibleNodes(excludeHiddenNodes, nodes) {
            var vNodes = Array.prototype.slice.call(nodes);

            if (excludeHiddenNodes) {
              for (var i = 0; i < vNodes.length; i++) {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(vNodes[i])) {
                  vNodes.splice(i, 1);
                  i--;
                }
              }
            }

            return vNodes;
          }
        }, {
          key: "removeNode",
          value: function removeNode(node) {
            var dragParentUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(node, '.' + PARENTITEM);
            var dragParentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(dragParentUl, '.' + LISTITEM);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(node);
            this.updateElement(dragParentUl, dragParentLi);
            this.updateInstance();
            this.removeData(node);
          }
        }, {
          key: "updateInstance",
          value: function updateInstance() {
            this.updateList();
            this.updateSelectedNodes();
            this.updateExpandedNodes();
            this.allowServerDataBinding = false;
            this.updateServerProperties("expand");
            this.updateServerProperties("check");
            this.updateServerProperties("select");
            this.allowServerDataBinding = true;
          }
        }, {
          key: "updateServerProperties",
          value: function updateServerProperties(action) {
            if (this.isBlazorPlatform) {
              if (action == "expand") {
                this.isBlazorExpandedNodes = this.expandedNodes;
                this.setProperties({
                  expandedNodes: []
                }, true);
              } else if (action == "check") {
                this.setProperties({
                  checkedNodes: this.checkedNodes
                }, true);
              } else {
                this.setProperties({
                  selectedNodes: this.selectedNodes
                }, true);
              }
            }
          }
        }, {
          key: "updateList",
          value: function updateList() {
            this.liList = Array.prototype.slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + LISTITEM, this.element));
          }
        }, {
          key: "updateSelectedNodes",
          value: function updateSelectedNodes() {
            if (!this.isBlazorPlatform || this.isBlazorPlatform && !this.initialRender) {
              this.setProperties({
                selectedNodes: []
              }, true);
              var sNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + ACTIVE, this.element);
              this.selectGivenNodes(sNodes);
            } else if (this.isBlazorPlatform && this.initialRender) {
              var _sNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + ACTIVE, this.element);

              for (var a = 0; a < _sNodes.length; a++) {
                var id = _sNodes[a].getAttribute("data-uid").toString();

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id) && this.selectedNodes.indexOf(id) === -1) {
                  this.selectedNodes.push(id);
                }
              }
            }
          }
        }, {
          key: "updateExpandedNodes",
          value: function updateExpandedNodes() {
            if (!this.isBlazorPlatform || this.isBlazorPlatform && !this.initialRender) {
              this.setProperties({
                expandedNodes: []
              }, true);
              var eNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('[aria-expanded="true"]', this.element);

              for (var i = 0, len = eNodes.length; i < len; i++) {
                this.addExpand(eNodes[i]);
              }
            } else if (this.isBlazorPlatform && this.initialRender) {
              var _eNodes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('[aria-expanded="true"]', this.element);

              for (var a = 0; a < _eNodes.length; a++) {
                var id = _eNodes[a].getAttribute("data-uid").toString();

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id) && this.expandedNodes.indexOf(id) === -1) {
                  this.expandedNodes.push(id);
                }
              }
            }
          }
        }, {
          key: "removeData",
          value: function removeData(node) {
            if (this.dataType === 1) {
              var dm = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"](this.treeData);
              var id = this.getId(node);
              var data = {};
              var newId = this.isNumberTypeId ? parseFloat(id) : id;
              data[this.fields.id] = newId;
              dm.remove(this.fields.id, data);
              this.removeChildNodes(id);
            } else {
              var _id3 = this.getId(node);

              this.updateChildField(this.treeData, this.fields, _id3, null, null, true);
            }
          }
        }, {
          key: "removeChildNodes",
          value: function removeChildNodes(parentId) {
            var cNodes = this.getChildGroup(this.groupedData, parentId, false);
            var childData = [];

            if (cNodes) {
              for (var i = 0, len = cNodes.length; i < len; i++) {
                var dm = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"](this.treeData);
                var id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.id, cNodes[i]).toString();
                var data = {};
                var currId = this.isNumberTypeId ? parseFloat(id) : id;
                data[this.fields.id] = currId;
                var nodeData = dm.remove(this.fields.id, data);
                childData.push(nodeData[0]);
                this.removeChildNodes(id);
              }
            }

            return childData;
          }
        }, {
          key: "doGivenAction",
          value: function doGivenAction(nodes, selector, toExpand) {
            for (var i = 0, len = nodes.length; i < len; i++) {
              var liEle = this.getElement(nodes[i]);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
                continue;
              }

              var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + selector, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, liEle));

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon)) {
                toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);
              }
            }
          }
        }, {
          key: "addGivenNodes",
          value: function addGivenNodes(nodes, dropLi, index, isRemote, dropEle) {
            if (nodes.length === 0) {
              return;
            }

            var sNodes = this.getSortedData(nodes);
            var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;

            if (isRemote) {
              this.updateMapper(level);
            }

            var li = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);

            var dropUl;

            if (!dropEle) {
              dropUl = dropLi ? this.expandParent(dropLi) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, this.element);
            } else {
              dropUl = dropEle;
            }

            var refNode = dropUl.childNodes[index];

            for (var i = 0; i < li.length; i++) {
              dropUl.insertBefore(li[i], refNode);
            }

            if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {
              this.updateBlazorTemplate();
            }

            var id = this.getId(dropLi);

            if (this.dataType === 1) {
              this.updateField(this.treeData, this.fields, id, 'hasChildren', true);
              var refId = this.getId(refNode);
              var pos = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);

              for (var j = 0; j < nodes.length; j++) {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id)) {
                  var currId = this.isNumberTypeId ? parseFloat(id) : id;
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(this.fields.parentID, currId, nodes[j]);
                }

                this.treeData.splice(pos, 0, nodes[j]);
                pos++;
              }
            } else {
              this.addChildData(this.treeData, this.fields, id, nodes, index);
            }

            this.finalizeNode(dropUl);
          }
        }, {
          key: "updateMapper",
          value: function updateMapper(level) {
            var mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);
            this.updateListProp(mapper);
          }
        }, {
          key: "updateListProp",
          value: function updateListProp(mapper) {
            var prop = this.getActualProperties(mapper);
            this.listBaseOption.fields = prop;
            this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';
          }
        }, {
          key: "getDataPos",
          value: function getDataPos(obj, mapper, id) {
            var pos = null;

            for (var i = 0, objlen = obj.length; i < objlen; i++) {
              var nodeId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.id, obj[i]);

              if (obj[i] && nodeId && nodeId.toString() === id) {
                return i;
              } else if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]))) {
                var data = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]);
                pos = this.getDataPos(data, this.getChildMapper(mapper), id);

                if (pos !== null) {
                  break;
                }
              } else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]))) {
                var items = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]);
                pos = this.getDataPos(items, this.getChildMapper(mapper), id);

                if (pos !== null) {
                  break;
                }
              }
            }

            return pos;
          }
        }, {
          key: "addChildData",
          value: function addChildData(obj, mapper, id, data, index) {
            var updated;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id)) {
              index = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index) ? obj.length : index;

              for (var k = 0, len = data.length; k < len; k++) {
                obj.splice(index, 0, data[k]);
                index++;
              }

              return updated;
            }

            for (var i = 0, objlen = obj.length; i < objlen; i++) {
              var nodeId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.id, obj[i]);

              if (obj[i] && nodeId && nodeId.toString() === id) {
                if (typeof mapper.child === 'string' && obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null || this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && this.fields.dataSource.adaptorName !== 'BlazorAdaptor' && obj[i].hasOwnProperty('child')) {
                  var key = typeof mapper.child === 'string' ? mapper.child : 'child';
                  var childData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(key, obj[i]);

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(childData)) {
                    childData = [];
                  }

                  index = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index) ? childData.length : index;

                  for (var _k2 = 0, _len4 = data.length; _k2 < _len4; _k2++) {
                    childData.splice(index, 0, data[_k2]);
                    index++;
                  }
                } else {
                  var _key4 = typeof mapper.child === 'string' ? mapper.child : 'child';

                  obj[i][_key4] = data;
                }

                return true;
              } else if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]))) {
                var childObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]);
                updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);

                if (updated !== undefined) {
                  break;
                }
              } else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && this.fields.dataSource.adaptorName !== 'BlazorAdaptor' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]))) {
                var _childData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]);

                updated = this.addChildData(_childData, this.getChildMapper(mapper), id, data, index);

                if (updated !== undefined) {
                  break;
                }
              }
            }

            return updated;
          }
        }, {
          key: "doDisableAction",
          value: function doDisableAction(nodes) {
            var validNodes = this.nodeType(nodes);
            var validID = this.checkValidId(validNodes);
            this.validArr = [];

            for (var i = 0, len = validID.length; i < len; i++) {
              var id = validID[i][this.fields.id].toString();

              if (id && this.disableNode.indexOf(id) === -1) {
                this.disableNode.push(id);
              }

              var liEle = this.getElement(id);

              if (liEle) {
                liEle.setAttribute('aria-disabled', 'true');
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([liEle], DISABLE);
              }
            }
          }
        }, {
          key: "doEnableAction",
          value: function doEnableAction(nodes) {
            var strNodes = this.nodeType(nodes);

            for (var i = 0, len = strNodes.length; i < len; i++) {
              var liEle = this.getElement(strNodes[i]);
              var id = strNodes[i];

              if (id && this.disableNode.indexOf(id) !== -1) {
                this.disableNode.splice(this.disableNode.indexOf(id), 1);
              }

              if (liEle) {
                liEle.removeAttribute('aria-disabled');
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([liEle], DISABLE);
              }
            }
          }
        }, {
          key: "nodeType",
          value: function nodeType(nodes) {
            var validID = [];

            for (var i = 0, len = nodes.length; i < len; i++) {
              var id = void 0;

              if (typeof nodes[i] == "string") {
                id = nodes[i] ? nodes[i].toString() : null;
              } else if (typeof nodes[i] === "object") {
                id = nodes[i] ? nodes[i].getAttribute("data-uid").toString() : null;
              }

              if (validID.indexOf(id) == -1) {
                validID.push(id);
              }
            }

            return validID;
          }
        }, {
          key: "checkValidId",
          value: function checkValidId(node) {
            var _this92 = this;

            if (this.dataType === 1) {
              this.validArr = this.treeData.filter(function (data) {
                return node.indexOf(data[_this92.fields.id] ? data[_this92.fields.id].toString() : null) !== -1;
              });
            } else if (this.dataType === 2) {
              for (var k = 0; k < this.treeData.length; k++) {
                var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;

                if (node.indexOf(id) !== -1) {
                  this.validArr.push(this.treeData[k]);
                }

                var childItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), this.treeData[k]);

                if (childItems) {
                  this.filterNestedChild(childItems, node);
                }
              }
            }

            return this.validArr;
          }
        }, {
          key: "filterNestedChild",
          value: function filterNestedChild(treeData, nodes) {
            for (var k = 0; k < treeData.length; k++) {
              var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;

              if (nodes.indexOf(id) !== -1) {
                this.validArr.push(treeData[k]);
              }

              var childItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), treeData[k]);

              if (childItems) {
                this.filterNestedChild(childItems, nodes);
              }
            }
          }
        }, {
          key: "setTouchClass",
          value: function setTouchClass() {
            var ele = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, '.' + BIGGER);
            this.touchClass = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele) ? '' : SMALL;
          }
        }, {
          key: "updatePersistProp",
          value: function updatePersistProp() {
            this.removeField(this.treeData, this.fields, ['selected', 'expanded']);
            var sleNodes = this.selectedNodes;

            for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {
              this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);
            }

            var enodes = this.expandedNodes;

            if (this.isBlazorPlatform) {
              enodes = this.isBlazorExpandedNodes;
            }

            for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {
              this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);
            }

            if (this.showCheckBox) {
              this.removeField(this.treeData, this.fields, ['isChecked']);
              var cnodes = this.checkedNodes;

              for (var m = 0, _nodelen = cnodes.length; m < _nodelen; m++) {
                this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);
              }
            }
          }
        }, {
          key: "removeField",
          value: function removeField(obj, mapper, names) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(obj) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper)) {
              return;
            }

            for (var i = 0, objlen = obj.length; i < objlen; i++) {
              for (var j = 0; j < names.length; j++) {
                var field = this.getMapperProp(mapper, names[j]);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(obj[i][field])) {
                  delete obj[i][field];
                }
              }

              if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]))) {
                this.removeField(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]), this.getChildMapper(mapper), names);
              } else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]))) {
                this.removeField(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]), this.getChildMapper(mapper), names);
              }
            }
          }
        }, {
          key: "getMapperProp",
          value: function getMapperProp(mapper, fieldName) {
            switch (fieldName) {
              case 'selected':
                return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.selected) ? mapper.selected : 'selected';

              case 'expanded':
                return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.expanded) ? mapper.expanded : 'expanded';

              case 'isChecked':
                return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.isChecked) ? mapper.isChecked : 'isChecked';

              case 'hasChildren':
                return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';

              default:
                return fieldName;
            }
          }
        }, {
          key: "updateField",
          value: function updateField(obj, mapper, id, key, value) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id)) {
              return;
            } else if (this.dataType === 1) {
              var newId = this.isNumberTypeId ? parseFloat(id) : id;
              var resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["Query"]().where(mapper.id, 'equal', newId, false));
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(this.getMapperProp(mapper, key), value, resultData[0]);
            } else {
              this.updateChildField(obj, mapper, id, key, value);
            }
          }
        }, {
          key: "updateChildField",
          value: function updateChildField(obj, mapper, id, key, value, remove$$1) {
            var removedData;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(obj)) {
              return removedData;
            }

            for (var i = 0, objlen = obj.length; i < objlen; i++) {
              var nodeId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.id, obj[i]);

              if (obj[i] && nodeId && nodeId.toString() === id) {
                if (remove$$1) {
                  removedData = obj.splice(i, 1);
                } else {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(this.getMapperProp(mapper, key), value, obj[i]);
                  removedData = [];
                }

                return removedData;
              } else if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]))) {
                var childData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, obj[i]);
                removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove$$1);

                if (removedData !== undefined) {
                  break;
                }
              } else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]))) {
                var childItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', obj[i]);
                removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove$$1);

                if (removedData !== undefined) {
                  break;
                }
              }
            }

            return removedData;
          }
        }, {
          key: "triggerEvent",
          value: function triggerEvent() {
            this.updateTemplateForBlazor();
            var eventArgs = {
              data: this.treeData
            };
            this.trigger('dataSourceChanged', eventArgs);
          }
        }, {
          key: "updateBlazorTemplate",
          value: function updateBlazorTemplate() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.element.id + 'nodeTemplate', 'NodeTemplate', this, false);
          }
        }, {
          key: "clientUpdateInitial",
          value: function clientUpdateInitial() {
            this.blazorInitialRender = true;
          }
        }, {
          key: "wireInputEvents",
          value: function wireInputEvents(inpEle) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(inpEle, 'blur', this.inputFocusOut, this);
          }
        }, {
          key: "wireEditingEvents",
          value: function wireEditingEvents(toBind) {
            if (toBind && !this.disabled) {
              var proxy = this;
              this.touchEditObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
                tap: function tap(e) {
                  if (e.tapCount === 2) {
                    e.originalEvent.preventDefault();
                    proxy.editingHandler(e.originalEvent);
                  }
                }
              });
            } else {
              if (this.touchEditObj) {
                this.touchEditObj.destroy();
              }
            }
          }
        }, {
          key: "wireClickEvent",
          value: function wireClickEvent(toBind) {
            if (toBind) {
              var proxy = this;
              this.touchClickObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
                tap: function tap(e) {
                  proxy.clickHandler(e);
                }
              });
            } else {
              if (this.touchClickObj) {
                this.touchClickObj.destroy();
              }
            }
          }
        }, {
          key: "wireExpandOnEvent",
          value: function wireExpandOnEvent(toBind) {
            var _this93 = this;

            if (toBind) {
              var proxy = this;
              this.touchExpandObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
                tap: function tap(e) {
                  if ((_this93.expandOnType === 'Click' || _this93.expandOnType === 'DblClick' && e.tapCount === 2) && e.originalEvent.which !== 3) {
                    proxy.expandHandler(e);
                  }
                }
              });
            } else {
              if (this.touchExpandObj) {
                this.touchExpandObj.destroy();
              }
            }
          }
        }, {
          key: "mouseDownHandler",
          value: function mouseDownHandler(e) {
            this.mouseDownStatus = true;

            if (e.shiftKey || e.ctrlKey) {
              e.preventDefault();
            }

            if (e.ctrlKey && this.allowMultiSelection) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'contextmenu', this.preventContextMenu, this);
            }
          }
        }, {
          key: "preventContextMenu",
          value: function preventContextMenu(e) {
            e.preventDefault();
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mousedown', this.mouseDownHandler, this);

            this.wireClickEvent(true);

            if (this.expandOnType !== 'None') {
              this.wireExpandOnEvent(true);
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focus', this.focusIn, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'blur', this.focusOut, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseover', this.onMouseOver, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseout', this.onMouseLeave, this);

            this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.element, {
              keyAction: this.keyActionHandler.bind(this),
              keyConfigs: this.keyConfigs,
              eventName: 'keydown'
            });
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mousedown', this.mouseDownHandler);

            this.wireClickEvent(false);
            this.wireExpandOnEvent(false);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focus', this.focusIn);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'blur', this.focusOut);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseover', this.onMouseOver);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseout', this.onMouseLeave);

            if (!this.disabled) {
              this.keyboardModule.destroy();
            }
          }
        }, {
          key: "parents",
          value: function parents(element, selector) {
            var matched = [];
            var el = element.parentNode;

            while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(el)) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["matches"])(el, selector)) {
                matched.push(el);
              }

              el = el.parentNode;
            }

            return matched;
          }
        }, {
          key: "isDescendant",
          value: function isDescendant(parent, child) {
            var node = child.parentNode;

            while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(node)) {
              if (node === parent) {
                return true;
              }

              node = node.parentNode;
            }

            return false;
          }
        }, {
          key: "showSpinner",
          value: function showSpinner(element) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], LOAD);
            Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["createSpinner"])({
              target: element,
              width: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? 16 : 14
            }, this.createElement);
            Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["showSpinner"])(element);
          }
        }, {
          key: "hideSpinner",
          value: function hideSpinner(element) {
            Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["hideSpinner"])(element);
            element.innerHTML = '';
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([element], LOAD);
          }
        }, {
          key: "setCheckedNodes",
          value: function setCheckedNodes(nodes) {
            nodes = JSON.parse(JSON.stringify(nodes));
            this.uncheckAll(this.checkedNodes);
            this.setIndeterminate(nodes);

            if (nodes.length > 0) {
              this.checkAll(nodes);
            }
          }
          /**
           * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel
           */

        }, {
          key: "setValidCheckedNode",
          value: function setValidCheckedNode(node) {
            if (this.dataType === 1) {
              var mapper = this.fields;
              var resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"](this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["Query"]().where(mapper.id, 'equal', node, true));

              if (resultData[0]) {
                this.setChildCheckState(resultData, node, resultData[0]);

                if (this.autoCheck) {
                  var parent = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;
                  var childNodes = this.getChildNodes(this.treeData, parent);
                  var count = 0;

                  for (var len = 0; len < childNodes.length; len++) {
                    var childId = childNodes[len][this.fields.id].toString();

                    if (this.checkedNodes.indexOf(childId) !== -1) {
                      count++;
                    }
                  }

                  if (count === childNodes.length && this.checkedNodes.indexOf(parent) === -1 && parent) {
                    this.checkedNodes.push(parent);
                  }
                }
              }
            } else if (this.dataType === 2) {
              for (var a = 0; a < this.treeData.length; a++) {
                var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';

                if (index === node && this.checkedNodes.indexOf(node) === -1) {
                  this.checkedNodes.push(node);
                  break;
                }

                var childItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), this.treeData[a]);

                if (childItems) {
                  this.setChildCheckState(childItems, node, this.treeData[a]);
                }
              }
            }
          }
          /**
           * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)
           */

        }, {
          key: "setChildCheckState",
          value: function setChildCheckState(childItems, node, treeData) {
            var checkedParent;
            var count = 0;

            if (this.dataType === 1) {
              if (treeData) {
                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;
              }

              for (var index = 0; index < childItems.length; index++) {
                var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;

                if (treeData && checkedParent && this.autoCheck) {
                  if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {
                    this.checkedNodes.push(checkNode);
                  }
                }

                if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {
                  this.checkedNodes.push(node);
                }

                var subChildItems = this.getChildNodes(this.treeData, checkNode);

                if (subChildItems) {
                  this.setChildCheckState(subChildItems, node, treeData);
                }
              }
            } else {
              if (treeData) {
                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';
              }

              for (var _index4 = 0; _index4 < childItems.length; _index4++) {
                var checkedChild = childItems[_index4][this.fields.id] ? childItems[_index4][this.fields.id].toString() : '';

                if (treeData && checkedParent && this.autoCheck) {
                  if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {
                    this.checkedNodes.push(checkedChild);
                  }
                }

                if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {
                  this.checkedNodes.push(node);
                }

                var _subChildItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), childItems[_index4]);

                if (_subChildItems) {
                  this.setChildCheckState(_subChildItems, node, childItems[_index4]);
                }

                if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
                  count++;
                }

                if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {
                  this.checkedNodes.push(checkedParent);
                }
              }
            }
          }
        }, {
          key: "setIndeterminate",
          value: function setIndeterminate(nodes) {
            for (var i = 0; i < nodes.length; i++) {
              this.setValidCheckedNode(nodes[i]);
            }
          }
        }, {
          key: "updatePosition",
          value: function updatePosition(id, newData, isRefreshChild, childValue) {
            if (this.dataType === 1) {
              var pos = this.getDataPos(this.treeData, this.fields, id);
              this.treeData.splice(pos, 1, newData);

              if (isRefreshChild) {
                this.removeChildNodes(id);

                for (var j = 0; j < childValue.length; j++) {
                  this.treeData.splice(pos, 0, childValue[j]);
                  pos++;
                }
              }

              this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
            } else {
              this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);
            }
          }
        }, {
          key: "updateChildPosition",
          value: function updateChildPosition(treeData, mapper, currID, newData, index) {
            var found;

            for (var i = 0, objlen = treeData.length; i < objlen; i++) {
              var nodeId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.id, treeData[i]);

              if (treeData[i] && nodeId && nodeId.toString() === currID) {
                treeData[i] = newData[0];
                return true;
              } else if (typeof mapper.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, treeData[i]))) {
                var childObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(mapper.child, treeData[i]);
                found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);

                if (found !== undefined) {
                  break;
                }
              } else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', treeData[i]))) {
                var childData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', treeData[i]);
                found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);

                if (found !== undefined) {
                  break;
                }
              }
            }

            return found;
          }
        }, {
          key: "dynamicState",
          value: function dynamicState() {
            this.setDragAndDrop(this.allowDragAndDrop);
            this.wireEditingEvents(this.allowEditing);

            if (!this.disabled) {
              this.wireEvents();
              this.setRipple();
            } else {
              this.unWireEvents();
              this.rippleFn();
              this.rippleIconFn();
            }
          }
        }, {
          key: "crudOperation",
          value: function crudOperation(operation, nodes, target, newText, newNode, index, prevent) {
            var _this94 = this;

            var data = this.fields.dataSource;
            var matchedArr = [];
            var query = this.getQuery(this.fields);
            var key = this.fields.id;
            var crud;
            var changes = {
              addedRecords: [],
              deletedRecords: [],
              changedRecords: []
            };
            var nodesID = [];

            if (nodes) {
              nodesID = this.nodeType(nodes);
            } else if (target) {
              if (typeof target == "string") {
                nodesID[0] = target.toString();
              } else if (typeof target === "object") {
                nodesID[0] = target.getAttribute("data-uid").toString();
              }
            }

            for (var i = 0, len = nodesID.length; i < len; i++) {
              var liEle = this.getElement(nodesID[i]);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
                continue;
              }

              var removedData = this.getNodeObject(nodesID[i]);
              matchedArr.push(removedData);
            }

            switch (operation) {
              case 'delete':
                if (nodes.length == 1) {
                  crud = data.remove(key, matchedArr[0], query.fromTable, query);
                } else {
                  changes.deletedRecords = matchedArr;
                  crud = data.saveChanges(changes, key, query.fromTable, query);
                }

                crud.then(function (e) {
                  return _this94.deleteSuccess(nodesID);
                })["catch"](function (e) {
                  return _this94.dmFailure(e);
                });
                break;

              case 'update':
                matchedArr[0][this.fields.text] = newText;
                crud = data.update(key, matchedArr[0], query.fromTable, query);
                crud.then(function (e) {
                  return _this94.editSucess(target, newText, prevent);
                })["catch"](function (e) {
                  return _this94.dmFailure(e, target, prevent);
                });
                break;

              case 'insert':
                if (newNode.length == 1) {
                  crud = data.insert(newNode[0], query.fromTable, query);
                } else {
                  var arr = [];

                  for (var _i36 = 0, _len5 = newNode.length; _i36 < _len5; _i36++) {
                    arr.push(newNode[_i36]);
                  }

                  changes.addedRecords = arr;
                  crud = data.saveChanges(changes, key, query.fromTable, query);
                }

                crud.then(function (e) {
                  var dropLi = _this94.getElement(target);

                  _this94.addSuccess(newNode, dropLi, index);

                  _this94.preventExpand = false;
                })["catch"](function (e) {
                  return _this94.dmFailure(e);
                });
                break;
            }
          }
        }, {
          key: "deleteSuccess",
          value: function deleteSuccess(nodes) {
            for (var i = 0, len = nodes.length; i < len; i++) {
              var liEle = this.getElement(nodes[i]);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
                continue;
              }

              this.removeNode(liEle);
            }

            if (this.dataType === 1) {
              this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
            }

            this.triggerEvent();
          }
        }, {
          key: "editSucess",
          value: function editSucess(target, newText, prevent) {
            var liEle = this.getElement(target);
            var txtEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTTEXT, liEle);
            this.appendNewText(liEle, txtEle, newText, prevent);
          }
        }, {
          key: "addSuccess",
          value: function addSuccess(nodes, dropLi, index) {
            var dropUl;
            var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;
            var proxy = this;

            if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector('.' + PARENTITEM) === null) {
              proxy.renderChildNodes(dropLi, null, function () {
                dropUl = dropLi.querySelector('.' + PARENTITEM);
                proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);
                proxy.triggerEvent();
              });
            } else {
              this.addGivenNodes(nodes, dropLi, index, true);
              this.triggerEvent();
            }
          }
        }, {
          key: "dmFailure",
          value: function dmFailure(e, target, prevent) {
            if (target) {
              this.updatePreviousText(target, prevent);
            }

            this.trigger('actionFailure', {
              error: e
            });
          }
        }, {
          key: "updatePreviousText",
          value: function updatePreviousText(target, prevent) {
            var liEle = this.getElement(target);
            var txtEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTTEXT, liEle);
            this.updateText(liEle, txtEle, this.oldText, prevent);
          }
          /**
           * Called internally if any of the property value changed.
           * @param  {TreeView} newProp
           * @param  {TreeView} oldProp
           * @returns void
           * @private
           */
          // tslint:disable-next-line:max-func-body-length

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i37 = 0, _Object$keys12 = Object.keys(newProp); _i37 < _Object$keys12.length; _i37++) {
              var prop = _Object$keys12[_i37];

              switch (prop) {
                case 'allowDragAndDrop':
                  this.setDragAndDrop(this.allowDragAndDrop);
                  break;

                case 'dragArea':
                  if (this.allowDragAndDrop) {
                    this.dragObj.dragArea = this.dragArea;
                  }

                  break;

                case 'allowEditing':
                  this.wireEditingEvents(this.allowEditing);
                  break;

                case 'allowMultiSelection':
                  if (this.selectedNodes.length > 1) {
                    var sNode = this.getElement(this.selectedNodes[0]);
                    this.isLoaded = false;
                    this.removeSelectAll();
                    this.selectNode(sNode, null);
                    this.isLoaded = true;
                  }

                  this.setMultiSelect(this.allowMultiSelection);
                  this.addMultiSelect(this.allowMultiSelection);
                  break;

                case 'checkedNodes':
                  if (this.showCheckBox) {
                    this.checkedNodes = oldProp.checkedNodes;
                    this.setCheckedNodes(newProp.checkedNodes);
                  }

                  break;

                case 'autoCheck':
                  if (this.showCheckBox) {
                    this.autoCheck = newProp.autoCheck;
                    this.ensureIndeterminate();
                  }

                  break;

                case 'cssClass':
                  this.setCssClass(oldProp.cssClass, newProp.cssClass);
                  break;

                case 'enableRtl':
                  this.setEnableRtl();
                  break;

                case 'expandedNodes':
                  this.isAnimate = false;

                  if (!this.isBlazorPlatform) {
                    this.setProperties({
                      expandedNodes: []
                    }, true);
                  }

                  this.collapseAll();
                  this.isInitalExpand = true;

                  if (!this.isBlazorPlatform) {
                    this.setProperties({
                      expandedNodes: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.expandedNodes) ? [] : newProp.expandedNodes
                    }, true);
                  }

                  this.doExpandAction();
                  this.isInitalExpand = false;
                  this.isAnimate = true;
                  break;

                case 'expandOn':
                  this.wireExpandOnEvent(false);
                  this.setExpandOnType();

                  if (this.expandOnType !== 'None' && !this.disabled) {
                    this.wireExpandOnEvent(true);
                  }

                  break;

                case 'disabled':
                  this.setDisabledMode();
                  this.dynamicState();
                  break;

                case 'fields':
                  this.isAnimate = false;
                  this.isFieldChange = true;
                  this.initialRender = true;

                  if (!this.blazorInitialRender) {
                    this.reRenderNodes();
                  }

                  this.blazorInitialRender = false;
                  this.initialRender = false;
                  this.isAnimate = true;
                  this.isFieldChange = false;
                  break;

                case 'fullRowSelect':
                  this.setFullRow(this.fullRowSelect);
                  this.addFullRow(this.fullRowSelect);
                  break;

                case 'loadOnDemand':
                  if (this.loadOnDemand === false && !this.onLoaded) {
                    var nodes = this.element.querySelectorAll('li');
                    var i = 0;

                    while (i < nodes.length) {
                      if (nodes[i].getAttribute('aria-expanded') !== 'true') {
                        this.renderChildNodes(nodes[i], true, null, true);
                      }

                      i++;
                    }

                    this.onLoaded = true;
                  }

                  break;

                case 'nodeTemplate':
                  this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
                  this.reRenderNodes();
                  break;

                case 'selectedNodes':
                  this.removeSelectAll();
                  this.setProperties({
                    selectedNodes: newProp.selectedNodes
                  }, true);
                  this.doSelectionAction();
                  break;

                case 'showCheckBox':
                  this.reRenderNodes();
                  break;

                case 'sortOrder':
                  this.reRenderNodes();
                  break;

                case 'fullRowNavigable':
                  this.setProperties({
                    fullRowNavigable: newProp.fullRowNavigable
                  }, true);
                  this.listBaseOption.itemNavigable = newProp.fullRowNavigable;
                  this.reRenderNodes();
                  break;
              }
            }
          }
          /**
           * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.
           */

        }, {
          key: "destroy",
          value: function destroy() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.element.id + 'nodeTemplate', 'NodeTemplate');
            this.element.removeAttribute('aria-activedescendant');
            this.element.removeAttribute('tabindex');
            this.unWireEvents();
            this.wireEditingEvents(false);

            if (!this.disabled) {
              this.rippleFn();
              this.rippleIconFn();
            }

            this.setCssClass(this.cssClass, null);
            this.setDragAndDrop(false);
            this.setFullRow(false);

            if (this.isBlazorPlatform) {
              this.ulElement = this.element.querySelector('.e-list-parent.e-ul');
            }

            if (this.ulElement && this.ulElement.parentElement) {
              this.ulElement.parentElement.removeChild(this.ulElement);
            }

            if (!this.isBlazorPlatform) {
              _get2(_getPrototypeOf2(TreeView.prototype), "destroy", this).call(this);
            }
          }
          /**
           * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,
           * then the nodes are added as children of the given parentID or in the root level of TreeView.
           * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.
           * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.
           * @param  { number } index - Specifies the index to place the newly added nodes in the target element.
           * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.
           */

        }, {
          key: "addNodes",
          value: function addNodes(nodes, target, index, preventTargetExpand) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
              return;
            }

            nodes = JSON.parse(JSON.stringify(nodes));
            var dropLi = this.getElement(target);
            this.preventExpand = preventTargetExpand;

            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {
              if (!this.isOffline) {
                this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);
              } else {
                this.addSuccess(nodes, dropLi, index);
              }
            } else if (this.dataType === 2) {
              this.addGivenNodes(nodes, dropLi, index);
            } else {
              if (dropLi) {
                this.addGivenNodes(nodes, dropLi, index);
              } else {
                nodes = this.getSortedData(nodes);

                for (var i = 0; i < nodes.length; i++) {
                  var pid = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.parentID, nodes[i]);
                  dropLi = pid ? this.getElement(pid.toString()) : pid;
                  this.addGivenNodes([nodes[i]], dropLi, index);
                }
              }

              this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
            }

            if (this.showCheckBox && dropLi) {
              this.ensureParentCheckState(dropLi);
            }

            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] === false || this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && this.fields.dataSource.adaptorName === 'BlazorAdaptor') {
              this.preventExpand = false;
              this.triggerEvent();
            }
          }
          /**
           * Instead of clicking on the TreeView node for editing, we can enable it by using
           * `beginEdit` property. On passing the node ID or element through this property, the edit textBox
           * will be created for the particular node thus allowing us to edit it.
           * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.
           */

        }, {
          key: "beginEdit",
          value: function beginEdit(node) {
            var ele = this.getElement(node);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele) || this.disabled) {
              return;
            }

            this.createTextbox(ele, null);
          }
          /**
           * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes
           * as argument to this method.
           * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.
           */

        }, {
          key: "checkAll",
          value: function checkAll(nodes) {
            if (this.showCheckBox) {
              this.doCheckBoxAction(nodes, true);
            }
          }
          /**
           * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.
           * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse
           * a specific level of nodes, set **level** as argument to collapseAll method.
           * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.
           * @param  {number} level - TreeView nodes will collapse up to the given level.
           * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.
           */

        }, {
          key: "collapseAll",
          value: function collapseAll(nodes, level, excludeHiddenNodes) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
              this.doGivenAction(nodes, COLLAPSIBLE, false);
            } else {
              if (level > 0) {
                this.collapseByLevel(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, this.element), level, excludeHiddenNodes);
              } else {
                this.collapseAllNodes(excludeHiddenNodes);
              }
            }
          }
          /**
           * Disables the collection of nodes by passing the ID of nodes or node elements in the array.
           * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.
           */

        }, {
          key: "disableNodes",
          value: function disableNodes(nodes) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
              this.doDisableAction(nodes);
            }
          }
          /**
           * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.
           * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.
           */

        }, {
          key: "enableNodes",
          value: function enableNodes(nodes) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
              this.doEnableAction(nodes);
            }
          }
          /**
           * Ensures visibility of the TreeView node by using node ID or node element.
           * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property
           * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.
           * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.
           */

        }, {
          key: "ensureVisible",
          value: function ensureVisible(node) {
            var liEle = this.getElement(node);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
              return;
            }

            var parents = this.parents(liEle, '.' + LISTITEM);
            this.expandAll(parents);
            setTimeout(function () {
              liEle.scrollIntoView(true);
            }, 450);
          }
          /**
           * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes
           * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting
           * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.
           * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.
           * @param  {number} level - TreeView nodes will expand up to the given level.
           * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.
           */

        }, {
          key: "expandAll",
          value: function expandAll(nodes, level, excludeHiddenNodes) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
              this.doGivenAction(nodes, EXPANDABLE, true);
            } else {
              if (level > 0) {
                this.expandByLevel(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, this.element), level, excludeHiddenNodes);
              } else {
                this.expandAllNodes(excludeHiddenNodes);
              }
            }
          }
          /**
           * Gets all the checked nodes including child, whether it is loaded or not.
           */

        }, {
          key: "getAllCheckedNodes",
          value: function getAllCheckedNodes() {
            var checkNodes = this.checkedNodes;
            return checkNodes;
          }
          /**
          * Gets all the disabled nodes including child, whether it is loaded or not.
          */

        }, {
          key: "getDisabledNodes",
          value: function getDisabledNodes() {
            var disabledNodes = this.disableNode;
            return disabledNodes;
          }
          /**
           * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.
           * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.
           * @BlazorType NodeData
           */

        }, {
          key: "getNode",
          value: function getNode(node) {
            var ele = this.getElement(node);
            return this.getNodeData(ele, true);
          }
          /**
           * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,
           * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.
           * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source
           * of the corresponding node otherwise it will return the entire updated data source of TreeView.
           * * The updated data source also contains custom attributes if you specified in data source.
           * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.
           * @isGenericType true
           */

        }, {
          key: "getTreeData",
          value: function getTreeData(node) {
            var id = this.getId(node);
            this.updatePersistProp();

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(id)) {
              return this.treeData;
            } else {
              var data = this.getNodeObject(id);
              return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data) ? [] : [data];
            }
          }
          /**
           * Moves the collection of nodes within the same TreeView based on target or its index position.
           * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.
           * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.
           * @param  {number} index - Specifies the index to place the moved nodes in the target element.
           * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.
           */

        }, {
          key: "moveNodes",
          value: function moveNodes(sourceNodes, target, index, preventTargetExpand) {
            var dropLi = this.getElement(target);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dropLi)) {
              return;
            }

            for (var i = 0; i < sourceNodes.length; i++) {
              var dragLi = this.getElement(sourceNodes[i]);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
                continue;
              }

              this.preventExpand = preventTargetExpand;
              this.dropAsChildNode(dragLi, dropLi, this, index);
            }

            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] === false) {
              this.preventExpand = false;
            }

            this.triggerEvent();
          }
          /**
           * Refreshes a particular node of the TreeView.
           * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.
           * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.
           */

        }, {
          key: "refreshNode",
          value: function refreshNode(target, newData) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newData)) {
              return;
            }

            var id;
            var isRefreshChild = false;

            if (this.dataType == 1 && newData.length > 1) {
              isRefreshChild = true;
            } else if (this.dataType == 2 && newData.length === 1) {
              var updatedChildValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), newData[0]);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(updatedChildValue)) {
                isRefreshChild = true;
              }
            }

            var liEle = this.getElement(target);
            id = liEle ? liEle.getAttribute('data-uid') : target ? target.toString() : null;
            this.refreshData = this.getNodeObject(id);
            newData = JSON.parse(JSON.stringify(newData)); // tslint:disable

            var newNodeData;
            var parentData;

            if (this.dataType == 1 && isRefreshChild) {
              for (var k = 0; k < newData.length; k++) {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newData[k][this.fields.parentID])) {
                  parentData = newData[k];
                  newData.splice(k, 1);
                  break;
                }
              }

              newNodeData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, this.refreshData, parentData);
            } else {
              newNodeData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, this.refreshData, newData[0]);
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
              this.updatePosition(id, newNodeData, isRefreshChild, newData);
              return;
            }

            this.isRefreshed = true;
            var level = parseFloat(liEle.getAttribute('aria-level'));

            var newliEle = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_1__["ListBase"].createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);

            var ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, liEle);
            var childItems = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.child.toString(), newNodeData);

            if (isRefreshChild && ul || isRefreshChild && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(childItems)) {
              liEle.innerHTML = newliEle[0].innerHTML;
              this.updatePosition(id, newNodeData, isRefreshChild, newData);

              if (isRefreshChild && ul) {
                this.expandAll([id]);
              }
            } else {
              var txtEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, liEle);
              var newTextEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + TEXTWRAP, newliEle[0]);
              var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, txtEle);
              var newIcon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, newTextEle);

              if (icon && newIcon) {
                if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([newIcon], EXPANDABLE);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([newIcon], COLLAPSIBLE);
                } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([newIcon], COLLAPSIBLE);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([newIcon], EXPANDABLE);
                } else if (icon.classList.contains('interaction')) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([newIcon], 'interaction');
                }
              }

              txtEle.innerHTML = newTextEle.innerHTML;
              this.updatePosition(id, newNodeData, isRefreshChild, newData);
            }

            if (newNodeData[this.fields.tooltip]) {
              liEle.setAttribute("title", newNodeData[this.fields.tooltip]);
            }

            if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {
              var attr = {};
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(attr, newNodeData[this.fields.htmlAttributes]);

              if (attr["class"]) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([liEle], attr["class"].split(' '));
                delete attr["class"];
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(liEle, attr);
              }
            }

            this.isRefreshed = false;
            this.triggerEvent();
          }
          /**
           * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.
           * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.
           */

        }, {
          key: "removeNodes",
          value: function removeNodes(nodes) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nodes)) {
              if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && !this.isOffline && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {
                this.crudOperation('delete', nodes);
              } else {
                this.deleteSuccess(nodes);
              }
            }
          }
          /**
           * Replaces the text of the TreeView node with the given text.
           * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.
           * @param  {string} newText - Specifies the new text of TreeView node.
           */

        }, {
          key: "updateNode",
          value: function updateNode(target, newText) {
            var _this95 = this;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newText) || !this.allowEditing) {
              return;
            }

            var liEle = this.getElement(target);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liEle)) {
              return;
            }

            var txtEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + LISTTEXT, liEle);
            this.updateOldText(liEle);
            var eventArgs = this.getEditEvent(liEle, null, null);
            this.trigger('nodeEditing', eventArgs, function (observedArgs) {
              if (!observedArgs.cancel) {
                if (_this95.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_4__["DataManager"] && !_this95.isOffline && _this95.fields.dataSource.adaptorName !== 'BlazorAdaptor') {
                  _this95.crudOperation('update', null, target, newText, null, null, false);
                } else {
                  _this95.appendNewText(liEle, txtEle, newText, false);
                }
              }
            });
          }
          /**
           * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes
           * as argument to this method.
           * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.
           */

        }, {
          key: "uncheckAll",
          value: function uncheckAll(nodes) {
            if (this.showCheckBox) {
              this.doCheckBoxAction(nodes, false);
            }
          }
        }]);

        return TreeView;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "allowDragAndDrop", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "allowEditing", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "allowMultiSelection", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, NodeAnimationSettings)], TreeView.prototype, "animation", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], TreeView.prototype, "checkedNodes", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], TreeView.prototype, "cssClass", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "disabled", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TreeView.prototype, "dragArea", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "enableHtmlSanitizer", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "enablePersistence", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], TreeView.prototype, "expandedNodes", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Auto')], TreeView.prototype, "expandOn", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, FieldsSettings)], TreeView.prototype, "fields", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], TreeView.prototype, "fullRowSelect", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], TreeView.prototype, "loadOnDemand", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], TreeView.prototype, "locale", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], TreeView.prototype, "nodeTemplate", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], TreeView.prototype, "selectedNodes", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('None')], TreeView.prototype, "sortOrder", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "showCheckBox", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], TreeView.prototype, "autoCheck", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeView.prototype, "fullRowNavigable", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "actionFailure", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "created", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "dataBound", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "dataSourceChanged", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "drawNode", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "destroyed", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "keyPress", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeChecked", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeChecking", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeClicked", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeCollapsed", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeCollapsing", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeDragging", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeDragStart", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeDragStop", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeDropped", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeEdited", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeEditing", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeExpanded", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeExpanding", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeSelected", void 0);

      __decorate$8([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TreeView.prototype, "nodeSelecting", void 0);

      TreeView = TreeView_1 = __decorate$8([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], TreeView);
      /**
       * TreeView modules
       */

      var __decorate$9 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var CONTROL$1 = 'e-control';
      var ROOT$1 = 'e-sidebar';
      var DOCKER = 'e-dock';
      var CLOSE = 'e-close';
      var OPEN = 'e-open';
      var TRASITION = 'e-transition';
      var DEFAULTBACKDROP = 'e-sidebar-overlay';
      var CONTEXTBACKDROP = 'e-backdrop';
      var RTL$2 = 'e-rtl';
      var RIGHT = 'e-right';
      var LEFT = 'e-left';
      var OVER = 'e-over';
      var PUSH = 'e-push';
      var SLIDE = 'e-slide';
      var VISIBILITY = 'e-visibility';
      var MAINCONTENTANIMATION = 'e-content-animation';
      var DISABLEANIMATION = 'e-disable-animation';
      var CONTEXT = 'e-sidebar-context';
      var SIDEBARABSOLUTE = 'e-sidebar-absolute';
      /**
       * Sidebar is an expandable or collapsible
       * component that typically act as a side container to place the primary or secondary content alongside of the main content.
       * ```html
       * <aside id="sidebar">
       * </aside>
       * ```
       * ```typescript
       * <script>
       *   let sidebarObject: Sidebar = new Sidebar();
       *   sidebarObject.appendTo("#sidebar");
       * </script>
       * ```
       */

      var Sidebar = /*#__PURE__*/function (_syncfusion_ej2_base_22) {
        _inherits2(Sidebar, _syncfusion_ej2_base_22);

        var _super32 = _createSuper(Sidebar);

        function Sidebar(options, element) {
          var _this96;

          _classCallCheck2(this, Sidebar);

          _this96 = _super32.call(this, options, element);
          _this96.isBlazor = false;
          return _this96;
        }

        _createClass2(Sidebar, [{
          key: "preRender",
          value: function preRender() {
            this.isBlazor = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered;

            if (!this.isBlazor) {
              this.setWidth();
            }
          }
        }, {
          key: "render",
          value: function render() {
            this.initialize();
            this.wireEvents();
            this.renderComplete();
          }
        }, {
          key: "initialize",
          value: function initialize() {
            this.setTarget();
            this.addClass();

            if (!this.isBlazor) {
              this.setZindex();
            }

            if (this.enableDock) {
              this.setDock();
            }

            if (this.isOpen) {
              this.show();
            } else {
              this.setMediaQuery();
            }

            this.checkType(true);
            this.setType(this.type);
            this.setCloseOnDocumentClick();

            if (!this.isBlazor) {
              this.setEnableRTL();
            }

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              this.windowWidth = window.innerWidth;
            }
          }
        }, {
          key: "setEnableRTL",
          value: function setEnableRTL() {
            this.enableRtl ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], RTL$2) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], RTL$2);
          }
        }, {
          key: "setTarget",
          value: function setTarget() {
            this.targetEle = this.element.nextElementSibling;
            this.sidebarEleCopy = this.element.cloneNode(true);

            if (typeof this.target === 'string') {
              this.setProperties({
                target: document.querySelector(this.target)
              }, true);
            }

            if (this.target) {
              this.target.insertBefore(this.element, this.target.children[0]);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], SIDEBARABSOLUTE);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.target], CONTEXT);
              this.targetEle = this.getTargetElement();
            }
          }
        }, {
          key: "getTargetElement",
          value: function getTargetElement() {
            var siblingElement = this.element.nextElementSibling;

            while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(siblingElement)) {
              if (!siblingElement.classList.contains(ROOT$1)) {
                break;
              }

              siblingElement = siblingElement.nextElementSibling;
            }

            return siblingElement;
          }
        }, {
          key: "setCloseOnDocumentClick",
          value: function setCloseOnDocumentClick() {
            if (this.closeOnDocumentClick) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousedown touchstart', this.documentclickHandler, this);
            } else {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousedown touchstart', this.documentclickHandler);
            }
          }
        }, {
          key: "setWidth",
          value: function setWidth() {
            if (this.enableDock && this.position === 'Left') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                'width': this.setDimension(this.dockSize)
              });
            } else if (this.enableDock && this.position === 'Right') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                'width': this.setDimension(this.dockSize)
              });
            } else if (!this.enableDock) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                'width': this.setDimension(this.width)
              });
            }
          }
        }, {
          key: "setDimension",
          value: function setDimension(width) {
            if (typeof width === 'number') {
              width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
            } else if (typeof width === 'string') {
              width = width.match(/px|%|em/) ? width : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
            } else {
              width = '100%';
            }

            return width;
          }
        }, {
          key: "setZindex",
          value: function setZindex() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
              'z-index': '' + this.zIndex
            });
          }
        }, {
          key: "addClass",
          value: function addClass() {
            var classELement = document.querySelector('.e-main-content');

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(classELement || this.targetEle)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([classELement || this.targetEle], [MAINCONTENTANIMATION]);
            }

            this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';

            if (!this.isBlazor) {
              if (!this.enableDock && this.type !== 'Auto') {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [VISIBILITY]);
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [OPEN, CLOSE, RIGHT, LEFT, SLIDE, PUSH, OVER]);
              this.element.classList.add(ROOT$1);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.position === 'Right' ? RIGHT : LEFT);

              if (this.enableDock) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], DOCKER);
              }

              this.element.setAttribute('tabindex', this.tabIndex);
            }

            if (this.type === 'Auto' && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              this.show();
            } else if (!this.isOpen) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLOSE);
            }
          }
        }, {
          key: "checkType",
          value: function checkType(val) {
            if (!(this.type === 'Push' || this.type === 'Over' || this.type === 'Slide')) {
              this.type = 'Auto';
            } else {
              if (!this.element.classList.contains(CLOSE) && !val) {
                this.hide();
              }
            }
          }
        }, {
          key: "transitionEnd",
          value: function transitionEnd(e) {
            this.setDock();

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) && e.target === this.element) {
              this.triggerChange();
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'transitionend', this.transitionEnd);
          }
        }, {
          key: "destroyBackDrop",
          value: function destroyBackDrop() {
            var sibling = document.querySelector('.e-main-content') || this.targetEle;

            if (this.target && this.showBackdrop && sibling) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([sibling], CONTEXTBACKDROP);
            } else if (this.showBackdrop && this.modal) {
              this.modal.style.display = 'none';
              this.modal.outerHTML = '';
              this.modal = null;
            }
          }
          /**
           * Hide the Sidebar component, if it is in an open state.
           * @returns void
           */

        }, {
          key: "hide",
          value: function hide(e) {
            var _this97 = this;

            var closeArguments = {
              model: this,
              element: this.element,
              cancel: false,
              isInteracted: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e),
              event: e || null
            };

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              delete closeArguments.model;
            }

            this.trigger('close', closeArguments, function (observedcloseArgs) {
              if (!observedcloseArgs.cancel) {
                if (_this97.element.classList.contains(CLOSE)) {
                  return;
                }

                if (_this97.element.classList.contains(OPEN) && !_this97.animate) {
                  _this97.triggerChange();
                }

                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this97.element], CLOSE);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this97.element], OPEN);
                _this97.enableDock ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(_this97.element, {
                  'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(_this97.dockSize)
                }) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(_this97.element, {
                  'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(_this97.width)
                });

                _this97.setType(_this97.type);

                var sibling = document.querySelector('.e-main-content') || _this97.targetEle;

                if (!_this97.enableDock && sibling) {
                  sibling.style.transform = 'translateX(' + 0 + 'px)';
                  _this97.position === 'Left' ? sibling.style.marginLeft = '0px' : sibling.style.marginRight = '0px';
                }

                _this97.destroyBackDrop();

                _this97.setAnimation();

                if (_this97.type === 'Slide') {
                  document.body.classList.remove('e-sidebar-overflow');
                }

                _this97.setProperties({
                  isOpen: false
                }, true);

                if (_this97.enableDock) {
                  setTimeout(function () {
                    return _this97.setTimeOut();
                  }, 50);
                }

                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(_this97.element, 'transitionend', _this97.transitionEnd, _this97);
              }
            });
          }
        }, {
          key: "setTimeOut",
          value: function setTimeOut() {
            var sibling = document.querySelector('.e-main-content') || this.targetEle;

            if (this.element.classList.contains(OPEN) && sibling) {
              if (this.position === 'Left') {
                this.width === 'auto' ? sibling.style.marginLeft = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginLeft = this.setDimension(this.width);
              } else {
                this.width === 'auto' ? sibling.style.marginRight = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginRight = this.setDimension(this.width);
              }
            } else if (this.element.classList.contains(CLOSE) && sibling) {
              if (this.position === 'Left') {
                this.dockSize === 'auto' ? sibling.style.marginLeft = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginLeft = this.setDimension(this.dockSize);
              } else {
                this.dockSize === 'auto' ? sibling.style.marginRight = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginRight = this.setDimension(this.dockSize);
              }
            }
          }
        }, {
          key: "show",

          /**
           * Shows the Sidebar component, if it is in closed state.
           * @returns void
           */
          value: function show(e) {
            var _this98 = this;

            var openArguments = {
              model: this,
              element: this.element,
              cancel: false,
              isInteracted: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e),
              event: e || null
            };

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              delete openArguments.model;
            }

            this.trigger('open', openArguments, function (observedopenArgs) {
              if (!observedopenArgs.cancel) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this98.element], VISIBILITY);

                if (_this98.element.classList.contains(OPEN)) {
                  return;
                }

                if (_this98.element.classList.contains(CLOSE) && !_this98.animate) {
                  _this98.triggerChange();
                }

                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this98.element], [OPEN, TRASITION]);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(_this98.element, {
                  'transform': ''
                });
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this98.element], CLOSE);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(_this98.element, {
                  'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(_this98.width)
                });

                _this98.setType(_this98.type);

                _this98.createBackDrop();

                _this98.setAnimation();

                if (_this98.type === 'Slide') {
                  document.body.classList.add('e-sidebar-overflow');
                }

                _this98.setProperties({
                  isOpen: true
                }, true);

                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(_this98.element, 'transitionend', _this98.transitionEnd, _this98);
              }
            });
          }
        }, {
          key: "setAnimation",
          value: function setAnimation() {
            if (this.animate) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], DISABLEANIMATION);
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], DISABLEANIMATION);
            }
          }
        }, {
          key: "triggerChange",
          value: function triggerChange() {
            var changeArguments = {
              name: 'change',
              element: this.element
            };
            this.trigger('change', changeArguments);
          }
        }, {
          key: "setDock",
          value: function setDock() {
            if (this.enableDock && this.position === 'Left' && !this.getState()) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                'transform': 'translateX(' + -100 + '%) translateX(' + this.setDimension(this.dockSize) + ')'
              });
            } else if (this.enableDock && this.position === 'Right' && !this.getState()) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                'transform': 'translateX(' + 100 + '%) translateX(' + '-' + this.setDimension(this.dockSize) + ')'
              });
            }

            if (this.element.classList.contains(CLOSE) && this.enableDock) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                'width': this.setDimension(this.dockSize)
              });
            }
          }
        }, {
          key: "createBackDrop",
          value: function createBackDrop() {
            if (this.target && this.showBackdrop && this.getState()) {
              var sibling = document.querySelector('.e-main-content') || this.targetEle;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([sibling], CONTEXTBACKDROP);
            } else if (this.showBackdrop && !this.modal && this.getState()) {
              this.modal = this.createElement('div');
              this.modal.className = DEFAULTBACKDROP;
              this.modal.style.display = 'block';
              document.body.appendChild(this.modal);
            }
          }
        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist(['type', 'position', 'isOpen']);
          }
          /**
           * Returns the current module name.
           * @returns string
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'sidebar';
          }
          /**
           * Shows or hides the Sidebar based on the current state.
           * @returns void
           */

        }, {
          key: "toggle",
          value: function toggle(e) {
            this.element.classList.contains(OPEN) ? this.hide() : this.show();
          }
        }, {
          key: "getState",
          value: function getState() {
            return this.element.classList.contains(OPEN) ? true : false;
          }
        }, {
          key: "setMediaQuery",
          value: function setMediaQuery() {
            if (this.mediaQuery) {
              var media = false;

              if (typeof this.mediaQuery === 'string') {
                media = window.matchMedia(this.mediaQuery).matches;
              } else {
                media = this.mediaQuery.matches;
              }

              if (media && this.windowWidth !== window.innerWidth) {
                this.show();
              } else if (this.getState() && this.windowWidth !== window.innerWidth) {
                this.hide();
              }
            }
          }
        }, {
          key: "resize",
          value: function resize(e) {
            if (this.type === 'Auto') {
              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], OVER);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], PUSH);
              }
            }

            this.setMediaQuery();

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              this.windowWidth = window.innerWidth;
            }
          }
        }, {
          key: "documentclickHandler",
          value: function documentclickHandler(e) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + CONTROL$1 + '' + '.' + ROOT$1)) {
              return;
            }

            this.hide(e);
          }
        }, {
          key: "enableGestureHandler",
          value: function enableGestureHandler(args) {
            if (!this.isOpen && this.position === 'Left' && args.swipeDirection === 'Right' && args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {
              this.show();
            } else if (this.isOpen && this.position === 'Left' && args.swipeDirection === 'Left') {
              this.hide();
            } else if (this.isOpen && this.position === 'Right' && args.swipeDirection === 'Right') {
              this.hide();
            } else if (!this.isOpen && this.position === 'Right' && args.swipeDirection === 'Left' && window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {
              this.show();
            }
          }
        }, {
          key: "setEnableGestures",
          value: function setEnableGestures() {
            if (this.enableGestures) {
              this.mainContentEle = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](document.body, {
                swipe: this.enableGestureHandler.bind(this)
              });
              this.sidebarEle = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
                swipe: this.enableGestureHandler.bind(this)
              });
            } else {
              if (this.mainContentEle && this.sidebarEle) {
                this.mainContentEle.destroy();
                this.sidebarEle.destroy();
              }
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            this.setEnableGestures();
            window.addEventListener('resize', this.resize.bind(this));
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            window.removeEventListener('resize', this.resize.bind(this));

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousedown touchstart', this.documentclickHandler);

            if (this.mainContentEle) {
              this.mainContentEle.destroy();
            }

            if (this.sidebarEle) {
              this.sidebarEle.destroy();
            }
          }
          /**
           * Called internally if any of the property value changed.
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var sibling = document.querySelector('.e-main-content') || this.targetEle;

            for (var _i38 = 0, _Object$keys13 = Object.keys(newProp); _i38 < _Object$keys13.length; _i38++) {
              var prop = _Object$keys13[_i38];

              switch (prop) {
                case 'isOpen':
                  this.isOpen ? this.show() : this.hide();
                  break;

                case 'width':
                  this.setWidth();

                  if (!this.getState()) {
                    this.setDock();
                  }

                  break;

                case 'animate':
                  this.setAnimation();
                  break;

                case 'type':
                  this.checkType(false);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [VISIBILITY]);
                  this.addClass();
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.type === 'Auto' ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? ['e-over'] : ['e-push'] : ['e-' + this.type.toLowerCase()]);
                  break;

                case 'position':
                  this.element.style.transform = '';
                  this.setDock();

                  if (sibling) {
                    this.position === 'Left' ? sibling.style.marginRight = '0px' : sibling.style.marginLeft = '0px';
                  }

                  if (this.position === 'Right') {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], LEFT);
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], RIGHT);
                  } else {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], RIGHT);
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], LEFT);
                  }

                  this.setType(this.type);
                  break;

                case 'showBackdrop':
                  if (this.showBackdrop) {
                    this.createBackDrop();
                  } else {
                    if (this.modal) {
                      this.modal.style.display = 'none';
                      this.modal.outerHTML = '';
                      this.modal = null;
                    }
                  }

                  break;

                case 'target':
                  if (typeof this.target === 'string') {
                    this.setProperties({
                      target: document.querySelector(this.target)
                    }, true);
                  }

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target)) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], SIDEBARABSOLUTE);
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([oldProp.target], CONTEXT);
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(sibling, {
                      'margin-left': 0,
                      'margin-right': 0
                    });
                    document.body.insertAdjacentElement('afterbegin', this.element);
                  }

                  var isRendered = this.isServerRendered;
                  this.isServerRendered = false;

                  _get2(_getPrototypeOf2(Sidebar.prototype), "refresh", this).call(this);

                  this.isServerRendered = isRendered;
                  break;

                case 'closeOnDocumentClick':
                  this.setCloseOnDocumentClick();
                  break;

                case 'enableDock':
                  if (!this.getState()) {
                    this.setDock();
                  }

                  break;

                case 'zIndex':
                  this.setZindex();
                  break;

                case 'mediaQuery':
                  this.setMediaQuery();
                  break;

                case 'enableGestures':
                  this.setEnableGestures();
                  break;

                case 'enableRtl':
                  this.setEnableRTL();
                  break;
              }
            }
          }
        }, {
          key: "setType",
          value: function setType(type) {
            var elementWidth = this.element.getBoundingClientRect().width;
            this.setZindex();
            var sibling = document.querySelector('.e-main-content') || this.targetEle;

            if (sibling) {
              sibling.style.transform = 'translateX(' + 0 + 'px)';

              if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.type !== 'Auto') {
                this.position === 'Left' ? sibling.style.marginLeft = '0px' : sibling.style.marginRight = '0px';
              }
            }

            var margin = this.position === 'Left' ? elementWidth + 'px' : elementWidth + 'px';
            var eleWidth = this.position === 'Left' ? elementWidth : -elementWidth;
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [PUSH, OVER, SLIDE]);

            switch (type) {
              case 'Push':
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [PUSH]);

                if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
                  this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
                }

                break;

              case 'Slide':
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [SLIDE]);

                if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
                  sibling.style.transform = 'translateX(' + eleWidth + 'px)';
                }

                break;

              case 'Over':
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [OVER]);

                if (this.enableDock && this.element.classList.contains(CLOSE)) {
                  if (sibling) {
                    this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
                  }
                }

                break;

              case 'Auto':
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], [TRASITION]);

                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                  if (sibling && this.enableDock && !this.getState()) {
                    this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], PUSH);
                  } else {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], OVER);
                  }
                } else {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], PUSH);

                  if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
                    this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
                  }
                }

                this.createBackDrop();
            }
          }
          /**
           * Removes the control from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
           * @returns void
           */

        }, {
          key: "destroy",
          value: function destroy() {
            _get2(_getPrototypeOf2(Sidebar.prototype), "destroy", this).call(this);

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [OPEN, CLOSE, PUSH, SLIDE, OVER, LEFT, RIGHT, TRASITION]);

            if (this.target) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], SIDEBARABSOLUTE);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.target], CONTEXT);
            }

            this.destroyBackDrop();
            this.element.style.width = '';
            this.element.style.zIndex = '';
            this.element.style.transform = '';
            this.windowWidth = null;
            !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.sidebarEleCopy.getAttribute('tabindex')) ? this.element.setAttribute('tabindex', this.tabIndex) : this.element.removeAttribute('tabindex');
            var sibling = document.querySelector('.e-main-content') || this.targetEle;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(sibling)) {
              sibling.style.margin = '';
              sibling.style.transform = '';
            }

            this.unWireEvents();
          }
        }]);

        return Sidebar;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Sidebar.prototype, "dockSize", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Sidebar.prototype, "mediaQuery", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sidebar.prototype, "enableDock", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('en-US')], Sidebar.prototype, "locale", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sidebar.prototype, "enablePersistence", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Sidebar.prototype, "enableGestures", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sidebar.prototype, "isOpen", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sidebar.prototype, "enableRtl", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Sidebar.prototype, "animate", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Sidebar.prototype, "height", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sidebar.prototype, "closeOnDocumentClick", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], Sidebar.prototype, "position", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Sidebar.prototype, "target", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sidebar.prototype, "showBackdrop", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Auto')], Sidebar.prototype, "type", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Sidebar.prototype, "width", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1000)], Sidebar.prototype, "zIndex", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sidebar.prototype, "created", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sidebar.prototype, "close", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sidebar.prototype, "open", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sidebar.prototype, "change", void 0);

      __decorate$9([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sidebar.prototype, "destroyed", void 0);

      Sidebar = __decorate$9([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Sidebar);
      /**
       * Sidebar modules
       */

      /**
       * Navigation all modules
       */
      //# sourceMappingURL=ej2-navigations.es2015.js.map

      /***/
    },

    /***/
    "72GX":
    /*!*************************************************************************!*\
      !*** ./node_modules/@syncfusion/ej2-lists/dist/es6/ej2-lists.es2015.js ***!
      \*************************************************************************/

    /*! exports provided: classNames, FieldSettings, ListView, Virtualization, cssClass, ListBase, getFieldValues, Sortable, moveTo */

    /***/
    function GX(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "classNames", function () {
        return classNames;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FieldSettings", function () {
        return FieldSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ListView", function () {
        return ListView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Virtualization", function () {
        return Virtualization;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cssClass", function () {
        return cssClass;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ListBase", function () {
        return ListBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getFieldValues", function () {
        return getFieldValues;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Sortable", function () {
        return Sortable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "moveTo", function () {
        return _moveTo;
      });
      /* harmony import */


      var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @syncfusion/ej2-base */
      "4SUy");
      /* harmony import */


      var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @syncfusion/ej2-data */
      "H552");
      /* harmony import */


      var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @syncfusion/ej2-buttons */
      "TF3C");

      var cssClass = {
        li: 'e-list-item',
        ul: 'e-list-parent e-ul',
        group: 'e-list-group-item',
        icon: 'e-list-icon',
        text: 'e-list-text',
        check: 'e-list-check',
        checked: 'e-checked',
        selected: 'e-selected',
        expanded: 'e-expanded',
        textContent: 'e-text-content',
        hasChild: 'e-has-child',
        level: 'e-level',
        url: 'e-list-url',
        collapsible: 'e-icon-collapsible',
        disabled: 'e-disabled',
        image: 'e-list-img',
        iconWrapper: 'e-icon-wrapper',
        anchorWrap: 'e-anchor-wrap',
        navigable: 'e-navigable'
      };
      /**
       * Base List Generator
       */

      var ListBase;

      (function (ListBase) {
        /**
         * Default mapped fields.
         */
        ListBase.defaultMappedFields = {
          id: 'id',
          text: 'text',
          url: 'url',
          value: 'value',
          isChecked: 'isChecked',
          enabled: 'enabled',
          expanded: 'expanded',
          selected: 'selected',
          iconCss: 'iconCss',
          child: 'child',
          isVisible: 'isVisible',
          hasChildren: 'hasChildren',
          tooltip: 'tooltip',
          htmlAttributes: 'htmlAttributes',
          urlAttributes: 'urlAttributes',
          imageAttributes: 'imageAttributes',
          imageUrl: 'imageUrl',
          groupBy: null
        };
        var defaultAriaAttributes = {
          level: 1,
          listRole: 'presentation',
          itemRole: 'presentation',
          groupItemRole: 'group',
          itemText: 'list-item',
          wrapperRole: 'presentation'
        };
        var defaultListBaseOptions = {
          showCheckBox: false,
          showIcon: false,
          enableHtmlSanitizer: false,
          expandCollapse: false,
          fields: ListBase.defaultMappedFields,
          ariaAttributes: defaultAriaAttributes,
          listClass: '',
          itemClass: '',
          processSubChild: false,
          sortOrder: 'None',
          template: null,
          groupTemplate: null,
          headerTemplate: null,
          expandIconClass: 'e-icon-collapsible',
          moduleName: 'list',
          expandIconPosition: 'Right',
          itemNavigable: false
        };
        /**
         * Function helps to created and return the UL Li element based on your data.
         * @param  {{[key:string]:Object}[]|string[]} dataSource - Specifies an array of JSON or String data.
         * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.
         */

        function createList(createElement, dataSource, options, isSingleLevel) {
          var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
          var ariaAttributes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultAriaAttributes, curOpt.ariaAttributes);
          var type = typeofData(dataSource)["typeof"];

          if (type === 'string' || type === 'number') {
            return createListFromArray(createElement, dataSource, isSingleLevel, options);
          } else {
            return createListFromJson(createElement, dataSource, options, ariaAttributes.level, isSingleLevel);
          }
        }

        ListBase.createList = createList;
        /**
         * Function helps to created an element list based on string array input .
         * @param  {string[]} dataSource - Specifies an array of string data
         */

        function createListFromArray(createElement, dataSource, isSingleLevel, options) {
          var subChild = createListItemFromArray(createElement, dataSource, isSingleLevel, options);
          return generateUL(createElement, subChild, null, options);
        }

        ListBase.createListFromArray = createListFromArray;
        /**
         * Function helps to created an element list based on string array input .
         * @param  {string[]} dataSource - Specifies an array of string data
         */

        function createListItemFromArray(createElement, dataSource, isSingleLevel, options) {
          var subChild = [];
          var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
          cssClass = getModuleClass(curOpt.moduleName);
          var id = generateId(); // generate id for drop-down-list option.

          for (var i = 0; i < dataSource.length; i++) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataSource[i])) {
              continue;
            }

            var li = void 0;

            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
              var curData = {
                dataSource: dataSource,
                curData: dataSource[i],
                text: dataSource[i],
                options: curOpt
              };
              curOpt.itemCreating(curData);
            }

            if (isSingleLevel) {
              li = generateSingleLevelLI(createElement, dataSource[i], undefined, null, null, [], null, id, i, options);
            } else {
              li = generateLI(createElement, dataSource[i], undefined, null, null, options);
            }

            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {
              var _curData = {
                dataSource: dataSource,
                curData: dataSource[i],
                text: dataSource[i],
                item: li,
                options: curOpt
              };
              curOpt.itemCreated(_curData);
            }

            subChild.push(li);
          }

          return subChild;
        }

        ListBase.createListItemFromArray = createListItemFromArray;
        /**
         * Function helps to created an element list based on array of JSON input .
         * @param  {{[key:string]:Object}[]} dataSource - Specifies an array of JSON data.
         * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.
         */
        // tslint:disable-next-line:max-func-body-length

        function createListItemFromJson(createElement, dataSource, options, level, isSingleLevel) {
          var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
          cssClass = getModuleClass(curOpt.moduleName);
          var fields = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, ListBase.defaultMappedFields, curOpt.fields);
          var ariaAttributes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultAriaAttributes, curOpt.ariaAttributes);
          var id;
          var checkboxElement = [];

          if (level) {
            ariaAttributes.level = level;
          }

          var child = [];
          var li;
          var anchorElement;

          if (dataSource && dataSource.length && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(typeofData(dataSource).item) && !typeofData(dataSource).item.hasOwnProperty(fields.id)) {
            id = generateId(); // generate id for drop-down-list option.
          }

          for (var i = 0; i < dataSource.length; i++) {
            var fieldData = getFieldValues(dataSource[i], fields);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataSource[i])) {
              continue;
            }

            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
              var curData = {
                dataSource: dataSource,
                curData: dataSource[i],
                text: fieldData[fields.text],
                options: curOpt,
                fields: fields
              };
              curOpt.itemCreating(curData);
            }

            var curItem = dataSource[i];

            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
              fieldData = getFieldValues(dataSource[i], fields);
            }

            if (fieldData.hasOwnProperty(fields.id) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[fields.id])) {
              id = fieldData[fields.id];
            }

            var innerEle = [];

            if (curOpt.showCheckBox) {
              if (curOpt.itemNavigable && (fieldData[fields.url] || fieldData[fields.urlAttributes])) {
                checkboxElement.push(createElement('input', {
                  className: cssClass.check,
                  attrs: {
                    type: 'checkbox'
                  }
                }));
              } else {
                innerEle.push(createElement('input', {
                  className: cssClass.check,
                  attrs: {
                    type: 'checkbox'
                  }
                }));
              }
            }

            if (isSingleLevel === true) {
              if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[fields.iconCss])) {
                innerEle.push(createElement('span', {
                  className: cssClass.icon + ' ' + fieldData[fields.iconCss]
                }));
              }

              li = generateSingleLevelLI(createElement, curItem, fieldData, fields, curOpt.itemClass, innerEle, curItem.hasOwnProperty('isHeader') && curItem.isHeader ? true : false, id, i, options);
              anchorElement = li.querySelector('.' + cssClass.anchorWrap);

              if (curOpt.itemNavigable && checkboxElement.length) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])(checkboxElement, li.firstElementChild);
              }
            } else {
              li = generateLI(createElement, curItem, fieldData, fields, curOpt.itemClass, options);
              li.classList.add(cssClass.level + '-' + ariaAttributes.level);
              li.setAttribute('aria-level', ariaAttributes.level.toString());
              anchorElement = li.querySelector('.' + cssClass.anchorWrap);

              if (fieldData.hasOwnProperty(fields.tooltip)) {
                li.setAttribute('title', fieldData[fields.tooltip]);
              }

              if (fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {
                setAttribute(li, fieldData[fields.htmlAttributes]);
              }

              if (fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled] === false) {
                li.classList.add(cssClass.disabled);
              }

              if (fieldData.hasOwnProperty(fields.isVisible) && fieldData[fields.isVisible] === false) {
                li.style.display = 'none';
              }

              if (fieldData.hasOwnProperty(fields.imageUrl) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[fields.imageUrl]) && !curOpt.template) {
                var attr = {
                  src: fieldData[fields.imageUrl]
                };
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(attr, fieldData[fields.imageAttributes]);
                var imageElemnt = createElement('img', {
                  className: cssClass.image,
                  attrs: attr
                });

                if (anchorElement) {
                  anchorElement.insertAdjacentElement('afterbegin', imageElemnt);
                } else {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([imageElemnt], li.firstElementChild);
                }
              }

              if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[fields.iconCss]) && !curOpt.template) {
                var iconElement = void 0;
                iconElement = createElement('div', {
                  className: cssClass.icon + ' ' + fieldData[fields.iconCss]
                });

                if (anchorElement) {
                  anchorElement.insertAdjacentElement('afterbegin', iconElement);
                } else {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([iconElement], li.firstElementChild);
                }
              }

              if (innerEle.length) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])(innerEle, li.firstElementChild);
              }

              if (curOpt.itemNavigable && checkboxElement.length) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])(checkboxElement, li.firstElementChild);
              }

              processSubChild(createElement, fieldData, fields, dataSource, curOpt, li, ariaAttributes.level);
            }

            if (anchorElement) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([li], [cssClass.navigable]);
            }

            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {
              var _curData2 = {
                dataSource: dataSource,
                curData: dataSource[i],
                text: fieldData[fields.text],
                item: li,
                options: curOpt,
                fields: fields
              };
              curOpt.itemCreated(_curData2);
            }

            checkboxElement = [];
            child.push(li);
          }

          return child;
        }

        ListBase.createListItemFromJson = createListItemFromJson;
        /**
         * Function helps to created an element list based on array of JSON input .
         * @param  {{[key:string]:Object}[]} dataSource - Specifies an array of JSON data.
         * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.
         */

        function createListFromJson(createElement, dataSource, options, level, isSingleLevel) {
          var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
          var li = createListItemFromJson(createElement, dataSource, options, level, isSingleLevel);
          return generateUL(createElement, li, curOpt.listClass, options);
        }

        ListBase.createListFromJson = createListFromJson;
        /**
         * Return the next or previous visible element.
         * @param  {Element[]|NodeList} elementArray - An element array to find next or previous element.
         * @param  {Element} li - An element to find next or previous after this element.
         * @param  {boolean} isPrevious? - Specify when the need get previous element from array.
         */

        function getSiblingLI(elementArray, element, isPrevious) {
          cssClass = getModuleClass(defaultListBaseOptions.moduleName);

          if (!elementArray || !elementArray.length) {
            return void 0;
          }

          var siblingLI;
          var liIndex;
          var liCollections = Array.prototype.slice.call(elementArray);

          if (element) {
            liIndex = indexOf(element, liCollections);
          } else {
            liIndex = isPrevious === true ? liCollections.length : -1;
          }

          siblingLI = liCollections[liIndex + (isPrevious === true ? -1 : 1)];

          while (siblingLI && (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isVisible"])(siblingLI) || siblingLI.classList.contains(cssClass.disabled))) {
            liIndex = liIndex + (isPrevious === true ? -1 : 1);
            siblingLI = liCollections[liIndex];
          }

          return siblingLI;
        }

        ListBase.getSiblingLI = getSiblingLI;
        /**
         * Return the index of the li element
         * @param  {Element} item - An element to find next or previous after this element.
         * @param  {Element[]|NodeList} elementArray - An element array to find index of given li.
         */

        function indexOf(item, elementArray) {
          if (!elementArray || !item) {
            return void 0;
          } else {
            var liCollections = elementArray;
            liCollections = Array.prototype.slice.call(elementArray);
            return liCollections.indexOf(item);
          }
        }

        ListBase.indexOf = indexOf;
        /**
         * Returns the grouped data from given dataSource.
         * @param  {{[key:string]:Object}[]} dataSource - The JSON data which is necessary to process.
         * @param  {FieldsMapping} fields - Fields that are mapped from the data source.
         * @param  {SortOrder='None'} sortOrder- Specifies final result sort order.
         */

        function groupDataSource(dataSource, fields) {
          var sortOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'None';
          var curFields = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, ListBase.defaultMappedFields, fields);
          var cusQuery = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().group(curFields.groupBy); // need to remove once sorting issues fixed in DataManager

          cusQuery = addSorting(sortOrder, 'key', cusQuery);
          var ds = getDataSource(dataSource, cusQuery);
          dataSource = [];

          for (var j = 0; j < ds.length; j++) {
            var itemObj = ds[j].items;
            var grpItem = {};
            var hdr = 'isHeader';
            grpItem[curFields.text] = ds[j].key;
            grpItem[hdr] = true;
            var newtext = curFields.text;

            if (newtext === 'id') {
              newtext = 'text';
              grpItem[newtext] = ds[j].key;
            }

            grpItem._id = 'group-list-item-' + (ds[j].key ? ds[j].key.toString().trim() : 'undefined');
            grpItem.items = itemObj;
            dataSource.push(grpItem);

            for (var k = 0; k < itemObj.length; k++) {
              dataSource.push(itemObj[k]);
            }
          }

          return dataSource;
        }

        ListBase.groupDataSource = groupDataSource;
        /**
         * Returns a sorted query object.
         * @param  {SortOrder} sortOrder - Specifies that sort order.
         * @param  {string} sortBy - Specifies sortBy fields.
         * @param  {Query=new Query()} query - Pass if any existing query.
         */

        function addSorting(sortOrder, sortBy) {
          var query = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();

          if (sortOrder === 'Ascending') {
            query.sortBy(sortBy, 'ascending', true);
          } else if (sortOrder === 'Descending') {
            query.sortBy(sortBy, 'descending', true);
          } else {
            for (var i = 0; i < query.queries.length; i++) {
              if (query.queries[i].fn === 'onSortBy') {
                query.queries.splice(i, 1);
              }
            }
          }

          return query;
        }

        ListBase.addSorting = addSorting;
        /**
         * Return an array of JSON Data that processed based on queries.
         * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.
         * @param  {Query} query - Specifies query that need to process.
         */

        function getDataSource(dataSource, query) {
          // tslint:disable-next-line
          return new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](dataSource).executeLocal(query);
        }

        ListBase.getDataSource = getDataSource;
        /**
         * Created JSON data based the UL and LI element
         * @param  {HTMLElement|Element} element - UL element that need to convert as a JSON
         * @param  {ListBaseOptions} options? - Specifies listbase option for fields.
         */

        function createJsonFromElement(element, options) {
          var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
          var fields = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, ListBase.defaultMappedFields, curOpt.fields);
          var curEle = element.cloneNode(true);
          var jsonAr = [];
          curEle.classList.add('json-parent');
          var childs = curEle.querySelectorAll('.json-parent>li');
          curEle.classList.remove('json-parent');

          for (var i = 0; i < childs.length; i++) {
            var li = childs[i];
            var anchor = li.querySelector('a');
            var ul = li.querySelector('ul');
            var json = {};
            var childNodes = anchor ? anchor.childNodes : li.childNodes;
            var keys = Object.keys(childNodes);

            for (var _i39 = 0; _i39 < childNodes.length; _i39++) {
              if (!childNodes[Number(keys[_i39])].hasChildNodes()) {
                json[fields.text] = childNodes[Number(keys[_i39])].textContent;
              }
            }

            var attributes$$1 = getAllAttributes(li);

            if (attributes$$1.id) {
              json[fields.id] = attributes$$1.id;
              delete attributes$$1.id;
            } else {
              json[fields.id] = generateId();
            }

            if (Object.keys(attributes$$1).length) {
              json[fields.htmlAttributes] = attributes$$1;
            }

            if (anchor) {
              attributes$$1 = getAllAttributes(anchor);

              if (Object.keys(attributes$$1).length) {
                json[fields.urlAttributes] = attributes$$1;
              }
            }

            if (ul) {
              json[fields.child] = createJsonFromElement(ul, options);
            }

            jsonAr.push(json);
          }

          return jsonAr;
        }

        ListBase.createJsonFromElement = createJsonFromElement;

        function typeofData(data) {
          var match = {
            "typeof": null,
            item: null
          };

          for (var i = 0; i < data.length; i++) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data[i])) {
              return match = {
                "typeof": typeof data[i],
                item: data[i]
              };
            }
          }

          return match;
        }

        function setAttribute(element, elementAttributes) {
          var attr = {};
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(attr, elementAttributes);

          if (attr["class"]) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], attr["class"].split(' '));
            delete attr["class"];
          }

          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, attr);
        }

        function getAllAttributes(element) {
          var attributes$$1 = {};
          var attr = element.attributes;

          for (var index = 0; index < attr.length; index++) {
            attributes$$1[attr[index].nodeName] = attr[index].nodeValue;
          }

          return attributes$$1;
        }
        /**
         * Created UL element from content template.
         * @param  {string} template - that need to convert and generate li element.
         * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.
         * @param  {ListBaseOptions} options? - Specifies listbase option for fields.
         */


        function renderContentTemplate(createElement, template, dataSource, fields, options) {
          cssClass = getModuleClass(defaultListBaseOptions.moduleName);
          var ulElement = createElement('ul', {
            className: cssClass.ul,
            attrs: {
              role: 'presentation'
            }
          });
          var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
          var curFields = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, ListBase.defaultMappedFields, fields);
          var compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
          var liCollection = [];
          var id = generateId(); // generate id for drop-down-list option.

          for (var i = 0; i < dataSource.length; i++) {
            var fieldData = getFieldValues(dataSource[i], curFields);
            var curItem = dataSource[i];
            var isHeader = curItem.isHeader;
            var value = fieldData[curFields.value];

            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
              var curData = {
                dataSource: dataSource,
                curData: curItem,
                text: value,
                options: curOpt,
                fields: curFields
              };
              curOpt.itemCreating(curData);
            }

            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
              fieldData = getFieldValues(dataSource[i], curFields);
              value = fieldData[curFields.value];
            }

            var li = createElement('li', {
              id: id + '-' + i,
              className: isHeader ? cssClass.group : cssClass.li,
              attrs: {
                role: 'presentation'
              }
            });

            if (isHeader) {
              li.innerText = fieldData[curFields.text];
            } else {
              var currentID = isHeader ? curOpt.groupTemplateID : curOpt.templateID;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledString(curItem, null, null, currentID, !!curOpt.isStringTemplate), li);
              li.setAttribute('data-value', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) ? 'null' : value);
              li.setAttribute('role', 'option');
            }

            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {
              var _curData3 = {
                dataSource: dataSource,
                curData: curItem,
                text: value,
                item: li,
                options: curOpt,
                fields: curFields
              };
              curOpt.itemCreated(_curData3);
            }

            liCollection.push(li);
          }

          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(liCollection, ulElement);
          return ulElement;
        }

        ListBase.renderContentTemplate = renderContentTemplate;
        /**
         * Created header items from group template.
         * @param  {string} template - that need to convert and generate li element.
         * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.
         * @param  {FieldsMapping} fields - Specifies fields for mapping the dataSource.
         * @param  {Element[]} headerItems? - Specifies listbase header items.
         */

        function renderGroupTemplate(groupTemplate, groupDataSource, fields, headerItems, options) {
          var compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(groupTemplate);
          var curFields = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, ListBase.defaultMappedFields, fields);
          var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
          var category = curFields.groupBy;

          var _iterator48 = _createForOfIteratorHelper(headerItems),
              _step48;

          try {
            for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
              var header = _step48.value;
              var headerData = {};
              headerData[category] = header.textContent;
              header.innerHTML = '';
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledString(headerData, null, null, curOpt.groupTemplateID, !!curOpt.isStringTemplate), header);
            }
          } catch (err) {
            _iterator48.e(err);
          } finally {
            _iterator48.f();
          }

          return headerItems;
        }

        ListBase.renderGroupTemplate = renderGroupTemplate;

        function generateId() {
          return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
        }

        ListBase.generateId = generateId;

        function processSubChild(createElement, fieldData, fields, ds, options, element, level) {
          // Get SubList
          var subDS = fieldData[fields.child] || [];
          var hasChildren = fieldData[fields.hasChildren]; //Create Sub child

          if (subDS.length) {
            hasChildren = true;
            element.classList.add(cssClass.hasChild);

            if (options.processSubChild) {
              var subLi = createListFromJson(createElement, subDS, options, ++level);
              element.appendChild(subLi);
            }
          } // Create expand and collapse node


          if (!!options.expandCollapse && hasChildren && !options.template) {
            element.firstElementChild.classList.add(cssClass.iconWrapper);
            var expandElement = options.expandIconPosition === 'Left' ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"] : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"];
            expandElement([createElement('div', {
              className: 'e-icons ' + options.expandIconClass
            })], element.querySelector('.' + cssClass.textContent));
          }
        }

        function generateSingleLevelLI(createElement, item, fieldData, fields, className, innerElements, grpLI, id, index, options) {
          var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
          var ariaAttributes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultAriaAttributes, curOpt.ariaAttributes);
          var text = item;
          var value = item;
          var dataSource;

          if (typeof item !== 'string' && typeof item !== 'number' && typeof item !== 'boolean') {
            dataSource = item;
            text = typeof fieldData[fields.text] === 'boolean' || typeof fieldData[fields.text] === 'number' ? fieldData[fields.text] : fieldData[fields.text] || '';
            value = fieldData[fields.value];
          }

          var elementID;

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataSource) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[fields.id]) && fieldData[fields.id] !== '') {
            elementID = id;
          } else {
            elementID = id + '-' + index;
          }

          var li = createElement('li', {
            className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(className) ? '' : className),
            id: elementID,
            attrs: ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ? {
              role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole
            } : {}
          });

          if (dataSource && fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled].toString() === 'false') {
            li.classList.add(cssClass.disabled);
          }

          if (grpLI) {
            li.innerText = text;
          } else {
            li.setAttribute('data-value', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) ? 'null' : value);
            li.setAttribute('role', 'option');

            if (dataSource && fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {
              setAttribute(li, fieldData[fields.htmlAttributes]);
            }

            if (innerElements.length && !curOpt.itemNavigable) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(innerElements, li);
            }

            if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {
              li.appendChild(anchorTag(createElement, dataSource, fields, text, innerElements, curOpt.itemNavigable));
            } else {
              if (innerElements.length && curOpt.itemNavigable) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(innerElements, li);
              }

              li.appendChild(document.createTextNode(text));
            }
          }

          return li;
        }

        function getModuleClass(moduleName) {
          var moduleClass;
          return moduleClass = {
            li: "e-".concat(moduleName, "-item"),
            ul: "e-".concat(moduleName, "-parent e-ul"),
            group: "e-".concat(moduleName, "-group-item"),
            icon: "e-".concat(moduleName, "-icon"),
            text: "e-".concat(moduleName, "-text"),
            check: "e-".concat(moduleName, "-check"),
            checked: 'e-checked',
            selected: 'e-selected',
            expanded: 'e-expanded',
            textContent: 'e-text-content',
            hasChild: 'e-has-child',
            level: 'e-level',
            url: "e-".concat(moduleName, "-url"),
            collapsible: 'e-icon-collapsible',
            disabled: 'e-disabled',
            image: "e-".concat(moduleName, "-img"),
            iconWrapper: 'e-icon-wrapper',
            anchorWrap: 'e-anchor-wrap',
            navigable: 'e-navigable'
          };
        }

        function anchorTag(createElement, dataSource, fields, text, innerElements, isFullNavigation) {
          var fieldData = getFieldValues(dataSource, fields);
          var attr = {
            href: fieldData[fields.url]
          };

          if (fieldData.hasOwnProperty(fields.urlAttributes) && fieldData[fields.urlAttributes]) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(attr, fieldData[fields.urlAttributes]);
            attr.href = fieldData[fields.url] ? fieldData[fields.url] : fieldData[fields.urlAttributes].href;
          }

          var anchorTag;

          if (!isFullNavigation) {
            anchorTag = createElement('a', {
              className: cssClass.text + ' ' + cssClass.url,
              innerHTML: text
            });
          } else {
            anchorTag = createElement('a', {
              className: cssClass.text + ' ' + cssClass.url
            });
            var anchorWrapper = createElement('div', {
              className: cssClass.anchorWrap
            });

            if (innerElements && innerElements.length) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(innerElements, anchorWrapper);
            }

            anchorWrapper.appendChild(document.createTextNode(text));
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([anchorWrapper], anchorTag);
          }

          setAttribute(anchorTag, attr);
          return anchorTag;
        }
        /* tslint:disable:align */


        function generateLI(createElement, item, fieldData, fields, className, options) {
          var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
          var ariaAttributes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultAriaAttributes, curOpt.ariaAttributes);
          var text = item;
          var uID;
          var grpLI;
          var dataSource;

          if (typeof item !== 'string' && typeof item !== 'number') {
            dataSource = item;
            text = fieldData[fields.text] || ''; // tslint:disable-next-line

            uID = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData['_id']) ? fieldData[fields.id] : fieldData['_id'];
            grpLI = item.hasOwnProperty('isHeader') && item.isHeader ? true : false;
          }

          if (options && options.enableHtmlSanitizer) {
            text = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(text);
          }

          var li = createElement('li', {
            className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(className) ? '' : className),
            attrs: ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ? {
              role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole
            } : {}
          });
          !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(uID) ? li.setAttribute('data-uid', uID) : li.setAttribute('data-uid', generateId());
          var blazId = 'BlazId';

          if (options && !!options.removeBlazorID && typeof item === 'object' && item.hasOwnProperty(blazId)) {
            delete item[blazId];
          }

          if (grpLI && options && options.groupTemplate) {
            var compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(options.groupTemplate);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledString(item, null, null, curOpt.groupTemplateID, !!curOpt.isStringTemplate), li);
          } else if (!grpLI && options && options.template) {
            var _compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(options.template);

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(_compiledString(item, null, null, curOpt.templateID, !!curOpt.isStringTemplate), li);
          } else {
            var innerDiv = createElement('div', {
              className: cssClass.textContent,
              attrs: ariaAttributes.wrapperRole !== '' ? {
                role: ariaAttributes.wrapperRole
              } : {}
            });

            if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {
              innerDiv.appendChild(anchorTag(createElement, dataSource, fields, text, null, curOpt.itemNavigable));
            } else {
              var element = createElement('span', {
                className: cssClass.text,
                attrs: ariaAttributes.itemText !== '' ? {
                  role: ariaAttributes.itemText
                } : {}
              });

              if (options && options.enableHtmlSanitizer) {
                element.innerText = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(text);
              } else {
                element.innerHTML = text;
              }

              innerDiv.appendChild(element);
            }

            li.appendChild(innerDiv);
          }

          return li;
        }
        /**
         * Returns UL element based on the given LI element.
         * @param  {HTMLElement[]} liElement - Specifies array of LI element.
         * @param  {string} className? - Specifies class name that need to be added in UL element.
         * @param  {ListBaseOptions} options? - Specifies ListBase options.
         */


        function generateUL(createElement, liElement, className, options) {
          var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
          var ariaAttributes = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultAriaAttributes, curOpt.ariaAttributes);
          cssClass = getModuleClass(curOpt.moduleName);
          var ulElement = createElement('ul', {
            className: cssClass.ul + ' ' + (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(className) ? '' : className),
            attrs: ariaAttributes.listRole !== '' ? {
              role: ariaAttributes.listRole
            } : {}
          });
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(liElement, ulElement);
          return ulElement;
        }

        ListBase.generateUL = generateUL;
        /**
         * Returns LI element with additional DIV tag based on the given LI element.
         * @param  {liElement} liElement - Specifies LI element.
         * @param  {string} className? - Specifies class name that need to be added in created DIV element.
         * @param  {ListBaseOptions} options? - Specifies ListBase options.
         */

        function generateIcon(createElement, liElement, className, options) {
          var curOpt = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultListBaseOptions, options);
          cssClass = getModuleClass(curOpt.moduleName);
          var expandElement = curOpt.expandIconPosition === 'Left' ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"] : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"];
          expandElement([createElement('div', {
            className: 'e-icons ' + curOpt.expandIconClass + ' ' + (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(className) ? '' : className)
          })], liElement.querySelector('.' + cssClass.textContent));
          return liElement;
        }

        ListBase.generateIcon = generateIcon;
      })(ListBase || (ListBase = {}));
      /**
       * Used to get dataSource item from complex data using fields.
       * @param {{[key:string]:Object}|string[]|string} dataSource - Specifies an  JSON or String data.
       * @param {FieldsMapping} fields - Fields that are mapped from the dataSource.
       */


      function getFieldValues(dataItem, fields) {
        var fieldData = {};

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataItem) || typeof dataItem === 'string' || typeof dataItem === 'number' || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataItem.isHeader)) {
          return dataItem;
        } else {
          for (var _i40 = 0, _Object$keys14 = Object.keys(fields); _i40 < _Object$keys14.length; _i40++) {
            var field = _Object$keys14[_i40];
            var dataField = fields[field];
            var value = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataField) && typeof dataField === 'string' ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(dataField, dataItem) : undefined;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value)) {
              fieldData[dataField] = value;
            }
          }
        }

        return fieldData;
      }

      var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      }; // Effect Configuration Effect[] =  [fromViewBackward,fromViewForward,toViewBackward,toviewForward];


      var effectsConfig = {
        'None': [],
        'SlideLeft': ['SlideRightOut', 'SlideLeftOut', 'SlideLeftIn', 'SlideRightIn'],
        'SlideDown': ['SlideTopOut', 'SlideBottomOut', 'SlideBottomIn', 'SlideTopIn'],
        'Zoom': ['FadeOut', 'FadeZoomOut', 'FadeZoomIn', 'FadeIn'],
        'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']
      };
      var effectsRTLConfig = {
        'None': [],
        'SlideLeft': ['SlideLeftOut', 'SlideRightOut', 'SlideRightIn', 'SlideLeftIn'],
        'SlideDown': ['SlideBottomOut', 'SlideTopOut', 'SlideTopIn', 'SlideBottomIn'],
        'Zoom': ['FadeZoomOut', 'FadeOut', 'FadeIn', 'FadeZoomIn'],
        'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']
      }; // don't use space in classnames.

      var classNames = {
        root: 'e-listview',
        hover: 'e-hover',
        selected: 'e-active',
        focused: 'e-focused',
        parentItem: 'e-list-parent',
        listItem: 'e-list-item',
        listIcon: 'e-list-icon',
        textContent: 'e-text-content',
        listItemText: 'e-list-text',
        groupListItem: 'e-list-group-item',
        hasChild: 'e-has-child',
        view: 'e-view',
        header: 'e-list-header',
        headerText: 'e-headertext',
        headerTemplateText: 'e-headertemplate-text',
        text: 'e-text',
        disable: 'e-disabled',
        content: 'e-content',
        icon: 'e-icons',
        backIcon: 'e-icon-back',
        checkboxWrapper: 'e-checkbox-wrapper',
        checkbox: 'e-checkbox',
        checked: 'e-check',
        checklist: 'e-checklist',
        checkboxIcon: 'e-frame',
        checkboxRight: 'e-checkbox-right',
        checkboxLeft: 'e-checkbox-left',
        listviewCheckbox: 'e-listview-checkbox',
        itemCheckList: 'e-checklist',
        virtualElementContainer: 'e-list-virtualcontainer'
      };
      var LISTVIEW_TEMPLATE_PROPERTY = 'Template';
      var LISTVIEW_GROUPTEMPLATE_PROPERTY = 'GroupTemplate';
      var LISTVIEW_HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';
      var swipeVelocity = 0.5;
      /**
       * Represents the field settings of the ListView.
       */

      var FieldSettings = /*#__PURE__*/function (_syncfusion_ej2_base_23) {
        _inherits2(FieldSettings, _syncfusion_ej2_base_23);

        var _super33 = _createSuper(FieldSettings);

        function FieldSettings() {
          _classCallCheck2(this, FieldSettings);

          return _super33.apply(this, arguments);
        }

        return FieldSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('id')], FieldSettings.prototype, "id", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('text')], FieldSettings.prototype, "text", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('isChecked')], FieldSettings.prototype, "isChecked", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('isVisible')], FieldSettings.prototype, "isVisible", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('enabled')], FieldSettings.prototype, "enabled", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('iconCss')], FieldSettings.prototype, "iconCss", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('child')], FieldSettings.prototype, "child", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('tooltip')], FieldSettings.prototype, "tooltip", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('groupBy')], FieldSettings.prototype, "groupBy", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('text')], FieldSettings.prototype, "sortBy", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('htmlAttributes')], FieldSettings.prototype, "htmlAttributes", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('tableName')], FieldSettings.prototype, "tableName", void 0);
      /**
       * Represents the EJ2 ListView control.
       * ```html
       * <div id="listview">
       * <ul>
       * <li>Favorite</li>
       * <li>Documents</li>
       * <li>Downloads</li>
       * </ul>
       * </div>
       * ```
       * ```typescript
       *   var listviewObject = new ListView({});
       *   listviewObject.appendTo("#listview");
       * ```
       */


      var ListView = /*#__PURE__*/function (_syncfusion_ej2_base_24) {
        _inherits2(ListView, _syncfusion_ej2_base_24);

        var _super34 = _createSuper(ListView);

        /**
         * Constructor for creating the widget
         */
        function ListView(options, element) {
          var _this99;

          _classCallCheck2(this, ListView);

          _this99 = _super34.call(this, options, element);
          _this99.itemReRender = false;
          _this99.previousSelectedItems = [];
          _this99.hiddenItems = [];
          _this99.enabledItems = [];
          _this99.disabledItems = [];
          return _this99;
        }
        /**
         * @private
         */


        _createClass2(ListView, [{
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i41 = 0, _Object$keys15 = Object.keys(newProp); _i41 < _Object$keys15.length; _i41++) {
              var prop = _Object$keys15[_i41];

              switch (prop) {
                case 'htmlAttributes':
                  this.setHTMLAttribute();
                  break;

                case 'cssClass':
                  this.setCSSClass(oldProp.cssClass);
                  break;

                case 'enable':
                  this.setEnable();
                  break;

                case 'width':
                case 'height':
                  this.setSize();
                  break;

                case 'enableRtl':
                  this.setEnableRTL();
                  break;

                case 'fields':
                  this.listBaseOption.fields = this.fields.properties;

                  if (this.enableVirtualization) {
                    if (!(this.isServerRendered && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])())) {
                      this.virtualizationModule.reRenderUiVirtualization();
                    }
                  } else {
                    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && !this.enableVirtualization) {
                      this.itemReRender = true;
                    }

                    this.reRender();
                  }

                  break;

                case 'headerTitle':
                  if (!this.curDSLevel.length) {
                    this.header(this.headerTitle, false);
                  }

                  break;

                case 'query':
                  if (this.enableVirtualization) {
                    if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
                      this.virtualizationModule.reRenderUiVirtualization();
                    }
                  } else {
                    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && !this.enableVirtualization) {
                      this.itemReRender = true;
                    }

                    this.reRender();
                  }

                  break;

                case 'showHeader':
                  this.header(this.headerTitle, false);
                  break;

                case 'enableVirtualization':
                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.contentContainer)) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.contentContainer);
                  }

                  this.refresh();
                  break;

                case 'showCheckBox':
                case 'checkBoxPosition':
                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
                    if (this.enableVirtualization) {
                      this.virtualizationModule.reRenderUiVirtualization();
                    } else {
                      this.setCheckbox();
                    }
                  }

                  break;

                case 'dataSource':
                  if (this.enableVirtualization) {
                    if (!(this.isServerRendered && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])())) {
                      this.virtualizationModule.reRenderUiVirtualization();
                    }
                  } else {
                    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && !this.enableVirtualization) {
                      this.itemReRender = true;
                    }

                    this.reRender();
                  }

                  break;

                case 'sortOrder':
                case 'showIcon':
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                    // tslint:disable
                    this.interopAdaptor.invokeMethodAsync('ItemSorting'); //tslint:enable
                  } else {
                    if (this.enableVirtualization) {
                      this.virtualizationModule.reRenderUiVirtualization();
                    } else {
                      this.listBaseOption.showIcon = this.showIcon;
                      this.curViewDS = this.getSubDS();
                      this.resetCurrentList();
                    }
                  }

                  break;

                default:
                  break;
              }
            }
          } // Model Changes

        }, {
          key: "setHTMLAttribute",
          value: function setHTMLAttribute() {
            if (Object.keys(this.htmlAttributes).length) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, this.htmlAttributes);
            }
          }
        }, {
          key: "setCSSClass",
          value: function setCSSClass(oldCSSClass) {
            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.cssClass.split(' ').filter(function (css) {
                return css;
              }));
            }

            if (oldCSSClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldCSSClass.split(' ').filter(function (css) {
                return css;
              }));
            }
          }
        }, {
          key: "setSize",
          value: function setSize() {
            this.element.style.height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height);
            this.element.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width);
            this.isWindow = this.element.clientHeight ? false : true;
          }
        }, {
          key: "setEnable",
          value: function setEnable() {
            this.enableElement(this.element, this.enable);
          }
        }, {
          key: "setEnableRTL",
          value: function setEnableRTL() {
            if (this.enableRtl) {
              this.element.classList.add('e-rtl');
            } else {
              this.element.classList.remove('e-rtl');
            }
          }
        }, {
          key: "enableElement",
          value: function enableElement(element, isEnabled) {
            if (isEnabled) {
              element.classList.remove(classNames.disable);
            } else {
              element.classList.add(classNames.disable);
            }
          } // Support Component Functions

        }, {
          key: "header",
          value: function header(text, showBack) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              var args = {
                HeaderText: text,
                BackButton: showBack
              }; // tslint:disable

              this.interopAdaptor.invokeMethodAsync('HeaderTitle', args); // tslint:disable
            } else {
              if (this.headerEle === undefined && this.showHeader) {
                if (this.enableHtmlSanitizer) {
                  this.setProperties({
                    headerTitle: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(this.headerTitle)
                  }, true);
                }

                this.headerEle = this.createElement('div', {
                  className: classNames.header
                });
                var innerHeaderEle = this.createElement('span', {
                  className: classNames.headerText,
                  innerHTML: this.headerTitle
                });
                var textEle = this.createElement('div', {
                  className: classNames.text,
                  innerHTML: innerHeaderEle.outerHTML
                });
                var hedBackButton = this.createElement('div', {
                  className: classNames.icon + ' ' + classNames.backIcon + ' e-but-back',
                  attrs: {
                    style: 'display:none;'
                  }
                });
                this.headerEle.appendChild(hedBackButton);
                this.headerEle.appendChild(textEle);

                if (this.headerTemplate) {
                  var compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.headerTemplate);
                  var headerTemplateEle = this.createElement('div', {
                    className: classNames.headerTemplateText
                  });
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledString({}, null, null, this.LISTVIEW_HEADERTEMPLATE_ID), headerTemplateEle);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([headerTemplateEle], this.headerEle);
                  this.updateBlazorTemplates(false, true, true);
                }

                if (this.headerTemplate && this.headerTitle) {
                  textEle.classList.add('header');
                }

                this.element.classList.add('e-has-header');
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.headerEle], this.element);
              } else if (this.headerEle) {
                if (this.showHeader) {
                  this.headerEle.style.display = '';

                  var _textEle = this.headerEle.querySelector('.' + classNames.headerText);

                  var _hedBackButton = this.headerEle.querySelector('.' + classNames.backIcon);

                  if (this.enableHtmlSanitizer) {
                    text = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(text);
                  }

                  _textEle.innerHTML = text;

                  if (this.headerTemplate && showBack) {
                    _textEle.parentElement.classList.remove('header');

                    this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('nested-header');
                  }

                  if (this.headerTemplate && !showBack) {
                    _textEle.parentElement.classList.add('header');

                    this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.remove('nested-header');
                    this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('header');
                  }

                  if (showBack === true) {
                    _hedBackButton.style.display = '';
                  } else {
                    _hedBackButton.style.display = 'none';
                  }
                } else {
                  this.headerEle.style.display = 'none';
                }
              }
            }
          } // Animation Related Functions

        }, {
          key: "switchView",
          value: function switchView(fromView, toView, reverse) {
            var _this100 = this;

            if (fromView && toView) {
              var fPos = fromView.style.position;
              var overflow = this.element.style.overflow !== 'hidden' ? this.element.style.overflow : '';
              fromView.style.position = 'absolute';
              fromView.classList.add('e-view');
              var anim;
              var duration = this.animation.duration;

              if (this.animation.effect) {
                anim = this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect];
              } else {
                var slideLeft = 'SlideLeft';
                anim = effectsConfig[slideLeft];
                reverse = this.enableRtl;
                duration = 0;
              }

              this.element.style.overflow = 'hidden';
              this.aniObj.animate(fromView, {
                name: reverse === true ? anim[0] : anim[1],
                duration: duration,
                timingFunction: this.animation.easing,
                end: function end(model) {
                  fromView.style.display = 'none';
                  _this100.element.style.overflow = overflow;
                  fromView.style.position = fPos;
                  fromView.classList.remove('e-view');
                }
              });
              toView.style.display = '';
              this.aniObj.animate(toView, {
                name: reverse === true ? anim[2] : anim[3],
                duration: duration,
                timingFunction: this.animation.easing,
                end: function end() {
                  _this100.trigger('actionComplete');
                }
              });
              this.curUL = toView;
            }
          }
        }, {
          key: "preRender",
          value: function preRender() {
            this.listBaseOption = {
              template: this.template,
              headerTemplate: this.headerTemplate,
              groupTemplate: this.groupTemplate,
              expandCollapse: true,
              listClass: '',
              ariaAttributes: {
                itemRole: 'option',
                listRole: 'presentation',
                itemText: '',
                groupItemRole: 'group',
                wrapperRole: 'presentation'
              },
              fields: this.fields.properties,
              sortOrder: this.sortOrder,
              showIcon: this.showIcon,
              itemCreated: this.renderCheckbox.bind(this),
              templateID: "".concat(this.element.id).concat(LISTVIEW_TEMPLATE_PROPERTY),
              groupTemplateID: "".concat(this.element.id).concat(LISTVIEW_GROUPTEMPLATE_PROPERTY),
              enableHtmlSanitizer: this.enableHtmlSanitizer,
              removeBlazorID: true
            };
            this.initialization();
          }
        }, {
          key: "updateLiElementHeight",
          value: function updateLiElementHeight() {
            var liContainer = this.element.querySelector('.' + classNames.virtualElementContainer);

            if (liContainer.children[0]) {
              this.liElementHeight = liContainer.children[0].getBoundingClientRect().height; // tslint:disable

              this.interopAdaptor.invokeMethodAsync('LiElementHeight', this.liElementHeight); // tslint:enable
            }
          }
        }, {
          key: "initialization",
          value: function initialization() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && this.enableVirtualization) {
              var ulContainer = this.element.querySelector('.' + classNames.virtualElementContainer);

              if (ulContainer !== null) {
                if (this.height === '') {
                  // tslint:disable
                  this.interopAdaptor.invokeMethodAsync('SetComponentHeight', window.innerHeight); // tslint:enable

                  this.isWindow = true;
                  ulContainer.scrollIntoView();
                }

                if (this.height.toString().indexOf('%') !== -1) {
                  // tslint:disable
                  this.interopAdaptor.invokeMethodAsync('SetContainerHeight', this.element.getBoundingClientRect().height.toString()); // tslint:enable
                }

                if (ulContainer.children[0]) {
                  this.liElementHeight = ulContainer.children[0].getBoundingClientRect().height; // tslint:disable

                  this.interopAdaptor.invokeMethodAsync('LiElementHeight', this.liElementHeight); // tslint:enable
                }
              }
            }

            this.curDSLevel = [];
            this.animateOptions = {};
            this.curViewDS = [];
            this.currentLiElements = [];
            this.isNestedList = false;
            this.selectedData = [];
            this.selectedId = [];
            this.LISTVIEW_TEMPLATE_ID = "".concat(this.element.id).concat(LISTVIEW_TEMPLATE_PROPERTY);
            this.LISTVIEW_GROUPTEMPLATE_ID = "".concat(this.element.id).concat(LISTVIEW_GROUPTEMPLATE_PROPERTY);
            this.LISTVIEW_HEADERTEMPLATE_ID = "".concat(this.element.id).concat(LISTVIEW_HEADERTEMPLATE_PROPERTY);
            this.aniObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](this.animateOptions);
            this.removeElement(this.curUL);
            this.removeElement(this.ulElement);
            this.removeElement(this.headerEle);
            this.removeElement(this.contentContainer);
            this.curUL = this.ulElement = this.liCollection = this.headerEle = this.contentContainer = undefined;
          }
        }, {
          key: "renderCheckbox",
          value: function renderCheckbox(args) {
            if (args.item.classList.contains(classNames.hasChild)) {
              this.isNestedList = true;
            }

            if (this.showCheckBox && this.isValidLI(args.item)) {
              var checkboxElement;
              var fieldData;
              checkboxElement = Object(_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_2__["createCheckBox"])(this.createElement, false, {
                checked: false,
                enableRtl: this.enableRtl,
                cssClass: classNames.listviewCheckbox
              });
              checkboxElement.setAttribute('role', 'checkbox');
              var frameElement = checkboxElement.querySelector('.' + classNames.checkboxIcon);
              args.item.classList.add(classNames.itemCheckList);
              args.item.firstElementChild.classList.add(classNames.checkbox);

              if (typeof this.dataSource[0] !== 'string' && typeof this.dataSource[0] !== 'number') {
                fieldData = getFieldValues(args.curData, this.listBaseOption.fields);

                if (fieldData[this.listBaseOption.fields.isChecked]) {
                  this.checkInternally(args, checkboxElement);
                }
              } else if ((typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number') && this.selectedData.indexOf(args.text) !== -1) {
                this.checkInternally(args, checkboxElement);
              }

              checkboxElement.setAttribute('aria-checked', frameElement.classList.contains(classNames.checked) ? 'true' : 'false');

              if (this.checkBoxPosition === 'Left') {
                checkboxElement.classList.add(classNames.checkboxLeft);
                args.item.firstElementChild.classList.add(classNames.checkboxLeft);
                args.item.firstElementChild.insertBefore(checkboxElement, args.item.firstElementChild.childNodes[0]);
              } else {
                checkboxElement.classList.add(classNames.checkboxRight);
                args.item.firstElementChild.classList.add(classNames.checkboxRight);
                args.item.firstElementChild.appendChild(checkboxElement);
              }

              this.currentLiElements.push(args.item);
              this.checkBoxPosition === 'Left' ? this.virtualCheckBox = args.item.firstElementChild.children[0] : this.virtualCheckBox = args.item.firstElementChild.lastElementChild;
            }
          }
        }, {
          key: "checkInternally",
          value: function checkInternally(args, checkboxElement) {
            args.item.classList.add(classNames.selected);
            args.item.setAttribute('aria-selected', 'true');
            checkboxElement.querySelector('.' + classNames.checkboxIcon).classList.add(classNames.checked);
            checkboxElement.setAttribute('aria-checked', 'true');
          }
          /**
           * Checks the specific list item by passing the unchecked fields as an argument to this method.
           * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.
           */

        }, {
          key: "checkItem",
          value: function checkItem(item) {
            this.toggleCheckBase(item, true);
          }
        }, {
          key: "toggleCheckBase",
          value: function toggleCheckBase(item, checked) {
            if (this.showCheckBox) {
              var liElement = item;

              if (item instanceof Object && item.constructor !== HTMLLIElement) {
                liElement = this.getLiFromObjOrElement(item);
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
                var checkboxIcon = liElement.querySelector('.' + classNames.checkboxIcon);
                checked ? liElement.classList.add(classNames.selected) : liElement.classList.remove(classNames.selected);
                liElement.setAttribute('aria-selected', checked ? 'true' : 'false');
                checked ? checkboxIcon.classList.add(classNames.checked) : checkboxIcon.classList.remove(classNames.checked);
                checkboxIcon.parentElement.setAttribute('aria-checked', checked ? 'true' : 'false');
              }

              this.setSelectedItemData(liElement);
            }
          }
          /**
           * Uncheck the specific list item by passing the checked fields as an argument to this method.
           * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.
           */

        }, {
          key: "uncheckItem",
          value: function uncheckItem(item) {
            this.toggleCheckBase(item, false);
          }
          /**
           * Checks all the unchecked items in the ListView.
           */

        }, {
          key: "checkAllItems",
          value: function checkAllItems() {
            this.toggleAllCheckBase(true);
          }
          /**
           * Uncheck all the checked items in ListView.
           */

        }, {
          key: "uncheckAllItems",
          value: function uncheckAllItems() {
            this.toggleAllCheckBase(false);
          }
        }, {
          key: "toggleAllCheckBase",
          value: function toggleAllCheckBase(checked) {
            if (this.showCheckBox) {
              for (var i = 0; i < this.liCollection.length; i++) {
                var checkIcon = this.liCollection[i].querySelector('.' + classNames.checkboxIcon);

                if (checkIcon) {
                  if (checked) {
                    if (!checkIcon.classList.contains(classNames.checked)) {
                      this.checkItem(this.liCollection[i]);
                    }
                  } else {
                    if (checkIcon.classList.contains(classNames.checked)) {
                      this.uncheckItem(this.liCollection[i]);
                    }
                  }
                }
              }

              if (this.enableVirtualization) {
                this.virtualizationModule.checkedItem(checked);
              }
            }
          }
        }, {
          key: "setCheckbox",
          value: function setCheckbox() {
            if (this.showCheckBox) {
              var liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));
              var args = {
                item: undefined,
                curData: undefined,
                dataSource: undefined,
                fields: undefined,
                options: undefined,
                text: ''
              };

              for (var i = 0; i < liCollection.length; i++) {
                var element = liCollection[i];
                args.item = element;
                args.curData = this.getItemData(element);

                if (element.querySelector('.' + classNames.checkboxWrapper)) {
                  this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));
                }

                this.renderCheckbox(args);

                if (args.item.classList.contains(classNames.selected)) {
                  this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));
                }
              }
            } else {
              var _liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.itemCheckList));

              for (var _i42 = 0; _i42 < _liCollection.length; _i42++) {
                var _element2 = _liCollection[_i42];

                _element2.classList.remove(classNames.selected);

                _element2.firstElementChild.classList.remove(classNames.checkbox);

                this.removeElement(_element2.querySelector('.' + classNames.checkboxWrapper));
              }

              if (this.selectedItems) {
                this.selectedItems.item.classList.add(classNames.selected);
              }
            }
          }
          /**
           * Refresh the height of the list item.
           */

        }, {
          key: "refreshItemHeight",
          value: function refreshItemHeight() {
            this.virtualizationModule.refreshItemHeight();
          }
        }, {
          key: "clickHandler",
          value: function clickHandler(e) {
            var target = e.target;
            var classList = target.classList;
            var closestElement;

            if (classList.contains(classNames.backIcon) || classList.contains(classNames.headerText)) {
              if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
                this.uncheckAllItems();
              }

              this.back();
            } else {
              var li = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target.parentNode, '.' + classNames.listItem);

              if (li === null) {
                li = target;
              }

              this.removeFocus();

              if (this.enable && this.showCheckBox && this.isValidLI(li)) {
                if (e.target.classList.contains(classNames.checkboxIcon)) {
                  li.classList.add(classNames.focused);

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + classNames.checked))) {
                    var args = {
                      curData: undefined,
                      dataSource: undefined,
                      fields: undefined,
                      options: undefined,
                      text: undefined,
                      item: li
                    };
                    this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));
                  } else {
                    this.uncheckItem(li);
                    li.classList.add(classNames.focused);
                  }

                  if (this.enableVirtualization) {
                    this.virtualizationModule.setCheckboxLI(li, e);
                  }

                  if (e) {
                    var eventArgs = this.selectEventData(li, e);
                    var checkIcon = li.querySelector('.' + classNames.checkboxIcon);
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(eventArgs, {
                      isChecked: checkIcon.classList.contains(classNames.checked)
                    });
                    this.trigger('select', eventArgs);
                  }
                } else if (li.classList.contains(classNames.hasChild)) {
                  this.removeHover();
                  this.removeSelect();
                  this.removeSelect(li);
                  this.setSelectLI(li, e);
                  li.classList.remove(classNames.selected);
                } else {
                  this.setCheckboxLI(li, e);
                }
              } else {
                this.setSelectLI(li, e);
              }

              closestElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, 'li');

              if (closestElement !== undefined) {
                if (closestElement.classList.contains('e-has-child') && !e.target.parentElement.classList.contains('e-listview-checkbox')) {
                  closestElement.classList.add(classNames.disable);
                }
              }
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && this.enableVirtualization) {
              var ulElementContainer = this.element.querySelector('.' + classNames.virtualElementContainer);

              if (ulElementContainer.querySelector('.e-active')) {
                // tslint:disable-next-line:no-any
                var selectedElements = ulElementContainer.querySelectorAll('.e-active'); // tslint:enable-next-line:no-any

                if (this.showCheckBox) {
                  for (var i = 0; i < selectedElements.length; i++) {
                    // tslint:disable-next-line:no-any
                    if (!this.previousSelectedItems.includes(selectedElements[i].getAttribute('data-uid'))) {
                      this.previousSelectedItems.push(selectedElements[i].getAttribute('data-uid'));
                    } // tslint:enable-next-line:no-any

                  }
                } else {
                  this.previousSelectedItems[0] = ulElementContainer.querySelector('.e-active').getAttribute('data-uid');
                }
              }

              if (ulElementContainer.querySelector('.e-focused')) {
                // tslint:disable-next-line:no-any
                var focusElement = ulElementContainer.querySelector('.e-focused'); // tslint:enable-next-line:no-any

                if (!focusElement.classList.contains('e-active')) {
                  var focusElementId = focusElement.getAttribute('data-uid'); // tslint:disable-next-line:no-any

                  if (this.previousSelectedItems.includes(focusElementId)) {
                    var selectedElement1 = this.previousSelectedItems.slice(0, this.previousSelectedItems.indexOf(focusElementId));
                    var selectedElement2 = this.previousSelectedItems.slice(this.previousSelectedItems.indexOf(focusElementId) + 1, this.previousSelectedItems.length);
                    this.previousSelectedItems = selectedElement1.concat(selectedElement2);
                  } // tslint:enable-next-line:no-any

                }
              }
            }
          }
        }, {
          key: "removeElement",
          value: function removeElement(element) {
            return element && element.parentNode && element.parentNode.removeChild(element);
          }
        }, {
          key: "hoverHandler",
          value: function hoverHandler(e) {
            var curLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target.parentNode, '.' + classNames.listItem);
            this.setHoverLI(curLi);
          }
        }, {
          key: "leaveHandler",
          value: function leaveHandler(e) {
            this.removeHover();
          }
        }, {
          key: "homeKeyHandler",
          value: function homeKeyHandler(e, end) {
            if (Object.keys(this.dataSource).length && this.curUL) {
              if (this.selectedItems) {
                this.selectedItems.item.setAttribute('aria-selected', 'false');
              }

              var li = this.curUL.querySelectorAll('.' + classNames.listItem);
              var focusedElement = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);

              if (focusedElement) {
                focusedElement.classList.remove(classNames.focused);

                if (!this.showCheckBox) {
                  focusedElement.classList.remove(classNames.selected);
                }
              }

              var index = !end ? 0 : li.length - 1;

              if (li[index].classList.contains(classNames.hasChild) || this.showCheckBox) {
                li[index].classList.add(classNames.focused);
              } else {
                this.setSelectLI(li[index], e);
              }

              if (li[index]) {
                this.element.setAttribute('aria-activedescendant', li[index].id.toString());
              } else {
                this.element.removeAttribute('aria-activedescendant');
              }
            }
          }
        }, {
          key: "onArrowKeyDown",
          value: function onArrowKeyDown(e, prev) {
            var siblingLI;
            var li;
            var hasChild = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;

            if (hasChild || this.showCheckBox) {
              li = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);
              siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(siblingLI)) {
                if (li) {
                  li.classList.remove(classNames.focused);

                  if (!this.showCheckBox) {
                    li.classList.remove(classNames.selected);
                  }
                }

                if (siblingLI.classList.contains(classNames.hasChild) || this.showCheckBox) {
                  siblingLI.classList.add(classNames.focused);
                } else {
                  this.setSelectLI(siblingLI, e);
                }
              }
            } else {
              li = this.curUL.querySelector('.' + classNames.selected);
              siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);
              this.setSelectLI(siblingLI, e);
            }

            if (siblingLI) {
              this.element.setAttribute('aria-activedescendant', siblingLI.id.toString());
            } else {
              this.element.removeAttribute('aria-activedescendant');
            }

            return siblingLI;
          }
        }, {
          key: "arrowKeyHandler",
          value: function arrowKeyHandler(e, prev) {
            var _this101 = this;

            e.preventDefault();

            if (Object.keys(this.dataSource).length && this.curUL) {
              var siblingLI = this.onArrowKeyDown(e, prev);
              var elementTop = this.element.getBoundingClientRect().top;
              var elementHeight = this.element.getBoundingClientRect().height;
              var firstItemBounds = this.curUL.querySelector('.' + classNames.listItem).getBoundingClientRect();
              var heightDiff;
              var groupItemBounds;

              if (this.fields.groupBy) {
                groupItemBounds = this.curUL.querySelector('.' + classNames.groupListItem).getBoundingClientRect();
              }

              if (siblingLI) {
                var siblingTop = siblingLI.getBoundingClientRect().top;
                var siblingHeight = siblingLI.getBoundingClientRect().height;

                if (!prev) {
                  var height = this.isWindow ? window.innerHeight : elementHeight;
                  heightDiff = this.isWindow ? siblingTop + siblingHeight : siblingTop - elementTop + siblingHeight;

                  if (heightDiff > height) {
                    this.isWindow ? window.scroll(0, pageYOffset + (heightDiff - height)) : this.element.scrollTop = this.element.scrollTop + (heightDiff - height);
                  }
                } else {
                  heightDiff = this.isWindow ? siblingTop : siblingTop - elementTop;

                  if (heightDiff < 0) {
                    this.isWindow ? window.scroll(0, pageYOffset + heightDiff) : this.element.scrollTop = this.element.scrollTop + heightDiff;
                  }
                }
              } else if (this.enableVirtualization && prev && this.virtualizationModule.uiFirstIndex) {
                this.onUIScrolled = function () {
                  _this101.onArrowKeyDown(e, prev);

                  _this101.onUIScrolled = undefined;
                };

                heightDiff = this.virtualizationModule.listItemHeight;
                this.isWindow ? window.scroll(0, pageYOffset - heightDiff) : this.element.scrollTop = this.element.scrollTop - heightDiff;
              } else if (prev) {
                if (this.showHeader && this.headerEle) {
                  var topHeight = groupItemBounds ? groupItemBounds.top : firstItemBounds.top;
                  var headerBounds = this.headerEle.getBoundingClientRect();
                  heightDiff = headerBounds.top < 0 ? headerBounds.height - topHeight : 0;
                  this.isWindow ? window.scroll(0, pageYOffset - heightDiff) : this.element.scrollTop = 0;
                } else if (this.fields.groupBy) {
                  heightDiff = this.isWindow ? groupItemBounds.top < 0 ? groupItemBounds.top : 0 : elementTop - firstItemBounds.top + groupItemBounds.height;
                  this.isWindow ? window.scroll(0, pageYOffset + heightDiff) : this.element.scrollTop = this.element.scrollTop - heightDiff;
                }
              }
            }
          }
        }, {
          key: "enterKeyHandler",
          value: function enterKeyHandler(e) {
            if (Object.keys(this.dataSource).length && this.curUL) {
              var hasChild = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;
              var li = this.curUL.querySelector('.' + classNames.focused);

              if (hasChild && li) {
                li.classList.remove(classNames.focused);

                if (this.showCheckBox) {
                  this.removeSelect();
                  this.removeSelect(li);
                  this.removeHover();
                }

                this.setSelectLI(li, e);
              }
            }
          }
        }, {
          key: "spaceKeyHandler",
          value: function spaceKeyHandler(e) {
            if (this.enable && this.showCheckBox && Object.keys(this.dataSource).length && this.curUL) {
              var li = this.curUL.querySelector('.' + classNames.focused);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + classNames.checked))) {
                var args = {
                  curData: undefined,
                  dataSource: undefined,
                  fields: undefined,
                  options: undefined,
                  text: undefined,
                  item: li
                };
                this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));
              } else {
                this.uncheckItem(li);
              }
            }
          }
        }, {
          key: "keyActionHandler",
          value: function keyActionHandler(e) {
            switch (e.keyCode) {
              case 36:
                this.homeKeyHandler(e);
                break;

              case 35:
                this.homeKeyHandler(e, true);
                break;

              case 40:
                this.arrowKeyHandler(e);
                break;

              case 38:
                this.arrowKeyHandler(e, true);
                break;

              case 13:
                this.enterKeyHandler(e);
                break;

              case 8:
                if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
                  this.uncheckAllItems();
                }

                this.back();
                break;

              case 32:
                this.spaceKeyHandler(e);
                break;
            }
          }
        }, {
          key: "swipeActionHandler",
          value: function swipeActionHandler(e) {
            if (e.swipeDirection === 'Right' && e.velocity > swipeVelocity && e.originalEvent.type === 'touchend') {
              if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
                this.uncheckAllItems();
              }

              this.back();
            }
          }
        }, {
          key: "focusout",
          value: function focusout() {
            if (Object.keys(this.dataSource).length && this.curUL) {
              var focusedElement = this.curUL.querySelector('.' + classNames.focused);
              var activeElement = this.curUL.querySelector('[aria-selected = true]');

              if (focusedElement) {
                focusedElement.classList.remove(classNames.focused);

                if (activeElement && !this.showCheckBox) {
                  activeElement.classList.add(classNames.selected);
                }
              }
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keydown', this.keyActionHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.clickHandler, this);

            if (!this.enableVirtualization) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseover', this.hoverHandler, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseout', this.leaveHandler, this);
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focusout', this.focusout, this);

            this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
              swipe: this.swipeActionHandler.bind(this)
            });
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.clickHandler);

            if (!this.enableVirtualization) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseover', this.hoverHandler);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseout', this.leaveHandler);
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseover', this.hoverHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseout', this.leaveHandler);

            this.touchModule.destroy();
          }
        }, {
          key: "removeFocus",
          value: function removeFocus() {
            var focusedLI = this.element.querySelectorAll('.' + classNames.focused);

            var _iterator49 = _createForOfIteratorHelper(focusedLI),
                _step49;

            try {
              for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
                var ele = _step49.value;
                ele.classList.remove(classNames.focused);
              }
            } catch (err) {
              _iterator49.e(err);
            } finally {
              _iterator49.f();
            }
          }
        }, {
          key: "removeHover",
          value: function removeHover() {
            var hoverLI = this.element.querySelector('.' + classNames.hover);

            if (hoverLI) {
              hoverLI.classList.remove(classNames.hover);
            }
          }
        }, {
          key: "removeSelect",
          value: function removeSelect(li) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
              var selectedLI = this.element.querySelectorAll('.' + classNames.selected);

              var _iterator50 = _createForOfIteratorHelper(selectedLI),
                  _step50;

              try {
                for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
                  var ele = _step50.value;

                  if (this.showCheckBox && ele.querySelector('.' + classNames.checked)) {
                    continue;
                  } else {
                    ele.setAttribute('aria-selected', 'false');
                    ele.classList.remove(classNames.selected);
                  }
                }
              } catch (err) {
                _iterator50.e(err);
              } finally {
                _iterator50.f();
              }
            } else {
              li.classList.remove(classNames.selected);
              li.setAttribute('aria-selected', 'false');
            }
          }
        }, {
          key: "isValidLI",
          value: function isValidLI(li) {
            return li && li.classList.contains(classNames.listItem) && !li.classList.contains(classNames.groupListItem) && !li.classList.contains(classNames.disable);
          }
        }, {
          key: "setCheckboxLI",
          value: function setCheckboxLI(li, e) {
            if (this.isValidLI(li) && this.enable && this.showCheckBox) {
              if (this.curUL.querySelector('.' + classNames.focused)) {
                this.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);
              }

              li.classList.add(classNames.focused);
              var checkboxElement = li.querySelector('.' + classNames.checkboxWrapper);
              var checkIcon = checkboxElement.querySelector('.' + classNames.checkboxIcon + '.' + classNames.icon);
              this.removeHover();

              if (!checkIcon.classList.contains(classNames.checked)) {
                checkIcon.classList.add(classNames.checked);
                li.classList.add(classNames.selected);
                li.setAttribute('aria-selected', 'true');
              } else {
                checkIcon.classList.remove(classNames.checked);
                li.classList.remove(classNames.selected);
                li.setAttribute('aria-selected', 'false');
              }

              checkboxElement.setAttribute('aria-checked', checkIcon.classList.contains(classNames.checked) ? 'true' : 'false');
              var eventArgs = this.selectEventData(li, e);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(eventArgs, {
                isChecked: checkIcon.classList.contains(classNames.checked)
              });

              if (this.enableVirtualization) {
                this.virtualizationModule.setCheckboxLI(li, e);
              }

              this.trigger('select', eventArgs);
              this.setSelectedItemData(li);
              this.renderSubList(li);
            }
          }
        }, {
          key: "selectEventData",
          value: function selectEventData(li, e) {
            var data = this.getItemData(li);
            var fieldData = getFieldValues(data, this.listBaseOption.fields);
            var selectedItem;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data) && typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number') {
              selectedItem = {
                item: li,
                text: li && li.innerText.trim(),
                data: this.dataSource
              };
            } else {
              selectedItem = {
                item: li,
                text: fieldData && fieldData[this.listBaseOption.fields.text],
                data: data
              };
            }

            var eventArgs = {};
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(eventArgs, selectedItem);

            if (e) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(eventArgs, {
                isInteracted: true,
                event: e,
                index: this.curUL && Array.prototype.indexOf.call(this.curUL.children, li)
              });
            }

            return eventArgs;
          }
        }, {
          key: "setSelectedItemData",
          value: function setSelectedItemData(li) {
            var data = this.getItemData(li);
            var fieldData = getFieldValues(data, this.listBaseOption.fields);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data) && (typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number')) {
              this.selectedItems = {
                item: li,
                text: li && li.innerText.trim(),
                data: this.dataSource
              };
            } else {
              this.selectedItems = {
                item: li,
                text: fieldData && fieldData[this.listBaseOption.fields.text],
                data: data
              };
            }
          }
        }, {
          key: "setSelectLI",
          value: function setSelectLI(li, e) {
            if (this.isValidLI(li) && !li.classList.contains(classNames.selected) && this.enable) {
              if (!this.showCheckBox) {
                this.removeSelect();
              }

              li.classList.add(classNames.selected);
              li.setAttribute('aria-selected', 'true');
              this.removeHover();
              this.setSelectedItemData(li);

              if (this.enableVirtualization) {
                this.virtualizationModule.setSelectLI(li, e);
              }

              var eventArgs = this.selectEventData(li, e);
              this.trigger('select', eventArgs);
              this.selectedLI = li;
              this.renderSubList(li);
            }
          }
        }, {
          key: "setHoverLI",
          value: function setHoverLI(li) {
            if (this.isValidLI(li) && !li.classList.contains(classNames.hover) && this.enable) {
              var lastLi = this.element.querySelectorAll('.' + classNames.hover);

              if (lastLi && lastLi.length) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(lastLi, classNames.hover);
              }

              if (!li.classList.contains(classNames.selected) || this.showCheckBox) {
                li.classList.add(classNames.hover);
              }
            }
          } //Data Source Related Functions

        }, {
          key: "getSubDS",
          value: function getSubDS() {
            var levelKeys = this.curDSLevel;

            if (levelKeys.length) {
              var ds = this.localData;

              var _iterator51 = _createForOfIteratorHelper(levelKeys),
                  _step51;

              try {
                for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
                  var key = _step51.value;
                  var field = {};
                  field[this.fields.id] = key;
                  this.curDSJSON = this.findItemFromDS(ds, field);
                  var fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);
                  ds = this.curDSJSON ? fieldData[this.fields.child] : ds;
                }
              } catch (err) {
                _iterator51.e(err);
              } finally {
                _iterator51.f();
              }

              return ds;
            }

            return this.localData;
          }
        }, {
          key: "getItemData",
          value: function getItemData(li) {
            var dataSource = this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] ? this.localData : this.dataSource;
            var fields = this.getElementUID(li);
            var curDS;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.' + classNames.hasChild)) && this.fields.groupBy) {
              curDS = this.curViewDS;
            } else {
              curDS = dataSource;
            }

            return this.findItemFromDS(curDS, fields);
          }
        }, {
          key: "findItemFromDS",
          value: function findItemFromDS(dataSource, fields, parent) {
            var _this102 = this;

            var resultJSON;

            if (dataSource && dataSource.length && fields) {
              dataSource.some(function (data) {
                var fieldData = getFieldValues(data, _this102.listBaseOption.fields); //(!(fid) || id === fid) && (!(ftext) || text === ftext) && (!!fid || !!ftext)

                if ((fields[_this102.fields.id] || fields[_this102.fields.text]) && (!fields[_this102.fields.id] || (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[_this102.fields.id]) && fieldData[_this102.fields.id].toString()) === fields[_this102.fields.id].toString()) && (!fields[_this102.fields.text] || fieldData[_this102.fields.text] === fields[_this102.fields.text])) {
                  resultJSON = parent ? dataSource : data;
                } else if (typeof data !== 'object' && dataSource.indexOf(data) !== -1) {
                  resultJSON = parent ? dataSource : data;
                } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fields[_this102.fields.id]) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fieldData[_this102.fields.id])) {
                  var li = _this102.element.querySelector('[data-uid="' + fields[_this102.fields.id] + '"]');

                  if (li && li.innerText.trim() === fieldData[_this102.fields.text]) {
                    resultJSON = data;
                  }
                } else if (fieldData.hasOwnProperty(_this102.fields.child) && fieldData[_this102.fields.child].length) {
                  resultJSON = _this102.findItemFromDS(fieldData[_this102.fields.child], fields, parent);
                }

                return !!resultJSON;
              });
            } else {
              resultJSON = dataSource;
            }

            return resultJSON;
          }
        }, {
          key: "getQuery",
          value: function getQuery() {
            var columns = [];
            var query = this.query ? this.query : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();

            if (!this.query) {
              for (var _i43 = 0, _Object$keys16 = Object.keys(this.fields.properties); _i43 < _Object$keys16.length; _i43++) {
                var column = _Object$keys16[_i43];

                if (column !== 'tableName' && !!this.fields[column] && this.fields[column] !== ListBase.defaultMappedFields[column] && columns.indexOf(this.fields[column]) === -1) {
                  columns.push(this.fields[column]);
                }
              }

              query.select(columns);

              if (this.fields.properties.hasOwnProperty('tableName')) {
                query.from(this.fields.tableName);
              }
            }

            return query;
          }
        }, {
          key: "setViewDataSource",
          value: function setViewDataSource() {
            var dataSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.localData;

            if (dataSource && this.fields.groupBy) {
              if (this.sortOrder !== 'None') {
                this.curViewDS = ListBase.groupDataSource(ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, this.fields.sortBy)), this.listBaseOption.fields, this.sortOrder);
              } else {
                this.curViewDS = ListBase.groupDataSource(dataSource, this.listBaseOption.fields, this.sortOrder);
              }
            } else if (dataSource && this.sortOrder !== 'None') {
              this.curViewDS = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, this.fields.sortBy));
            } else {
              this.curViewDS = dataSource;
            }
          }
        }, {
          key: "isInAnimation",
          value: function isInAnimation() {
            return this.curUL.classList.contains('.e-animate');
          }
        }, {
          key: "setLocalData",
          value: function setLocalData() {
            var _this103 = this;

            this.trigger('actionBegin');
            var listViewComponent = this;

            if (this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
              this.dataSource.executeQuery(this.getQuery()).then(function (e) {
                if (_this103.isDestroyed) {
                  return;
                }

                _this103.localData = e.result;

                if (!_this103.isServerRendered || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                  listViewComponent.removeElement(listViewComponent.contentContainer);
                }

                _this103.renderList();

                _this103.trigger('actionComplete', e);
              })["catch"](function (e) {
                if (_this103.isDestroyed) {
                  return;
                }

                _this103.trigger('actionFailure', e);
              });
            } else if (!this.dataSource || !this.dataSource.length) {
              var ul = this.element.querySelector('ul');

              if (ul) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(ul);
                this.setProperties({
                  dataSource: ListBase.createJsonFromElement(ul)
                }, true);
                this.localData = this.dataSource;
                this.renderList();
                this.trigger('actionComplete', {
                  data: this.localData
                });
              }
            } else {
              this.localData = this.dataSource;
              this.renderList();
              this.trigger('actionComplete', {
                data: this.localData
              });
            }
          }
        }, {
          key: "reRender",
          value: function reRender() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered || this.enableVirtualization) {
              this.resetBlazorTemplates();
              this.removeElement(this.headerEle);
              this.removeElement(this.ulElement);
              this.removeElement(this.contentContainer);

              if (Object.keys(window).indexOf('ejsInterop') === -1) {
                this.element.innerHTML = '';
              }

              this.headerEle = this.ulElement = this.liCollection = undefined;
              this.header();
            }

            this.setLocalData();
          }
        }, {
          key: "resetCurrentList",
          value: function resetCurrentList() {
            this.resetBlazorTemplates();
            this.setViewDataSource(this.curViewDS);
            this.contentContainer.innerHTML = '';
            this.createList();
            this.renderIntoDom(this.curUL);
          }
        }, {
          key: "setAttributes",
          value: function setAttributes(liElements) {
            for (var i = 0; i < liElements.length; i++) {
              var element = liElements[i];

              if (element.classList.contains('e-list-item')) {
                element.setAttribute('id', this.element.id + '_' + element.getAttribute('data-uid'));
                element.setAttribute('aria-selected', 'false');
                element.setAttribute('tabindex', '-1');
              }
            }
          }
        }, {
          key: "createList",
          value: function createList() {
            this.currentLiElements = [];
            this.isNestedList = false;
            this.ulElement = this.curUL = ListBase.createList(this.createElement, this.curViewDS, this.listBaseOption);
            this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);
            this.setAttributes(this.liCollection);
            this.updateBlazorTemplates(true);
          }
        }, {
          key: "resetBlazorTemplates",
          value: function resetBlazorTemplates() {
            // tslint:disable-next-line:no-any
            var templateCollection = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["blazorTemplates"];

            if (this.template) {
              templateCollection[this.LISTVIEW_TEMPLATE_ID] = [];
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.LISTVIEW_TEMPLATE_ID, LISTVIEW_TEMPLATE_PROPERTY);
            }

            if (this.groupTemplate) {
              templateCollection[this.LISTVIEW_GROUPTEMPLATE_ID] = [];
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.LISTVIEW_GROUPTEMPLATE_ID, LISTVIEW_GROUPTEMPLATE_PROPERTY);
            }

            if (this.headerTemplate) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.LISTVIEW_HEADERTEMPLATE_ID, LISTVIEW_HEADERTEMPLATE_PROPERTY);
            }
          }
        }, {
          key: "updateBlazorTemplates",
          value: function updateBlazorTemplates() {
            var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var headerTemplate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var resetExistingElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (this.template && template && !this.enableVirtualization) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.LISTVIEW_TEMPLATE_ID, LISTVIEW_TEMPLATE_PROPERTY, this, resetExistingElements);
            }

            if (this.groupTemplate && template && !this.enableVirtualization) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.LISTVIEW_GROUPTEMPLATE_ID, LISTVIEW_GROUPTEMPLATE_PROPERTY, this, resetExistingElements);
            }

            if (this.headerTemplate && headerTemplate) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.LISTVIEW_HEADERTEMPLATE_ID, LISTVIEW_HEADERTEMPLATE_PROPERTY, this, resetExistingElements);
            }
          }
        }, {
          key: "exceptionEvent",
          value: function exceptionEvent(e) {
            this.trigger('actionFailure', e);
          }
        }, {
          key: "UpdateCurrentUL",
          value: function UpdateCurrentUL() {
            this.ulElement = this.curUL = this.element.querySelector('.' + classNames.parentItem);

            if (this.curUL) {
              // tslint:disable
              this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem); // tslint:enable
            }
          }
        }, {
          key: "removeActiveClass",
          value: function removeActiveClass() {
            var listViewComponent = this;
            setTimeout(function () {
              var ulContainer = listViewComponent.element.querySelector('.' + classNames.virtualElementContainer);

              for (var i = 0; i < ulContainer.childElementCount; i++) {
                var selectedElement = ulContainer.children[i];
                var elementIndex = void 0;
                var hiddenElementIndex = void 0;

                if (listViewComponent.showCheckBox) {
                  if (listViewComponent.previousSelectedItems.length > 0) {
                    for (var j = 0; j < listViewComponent.previousSelectedItems.length; j++) {
                      if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[j]) {
                        selectedElement.classList.add('e-active');
                        selectedElement.setAttribute('aria-selected', 'true');

                        if (selectedElement.querySelector('.e-frame.e-icons')) {
                          selectedElement.querySelector('.e-frame.e-icons').classList.add('e-check');
                        }

                        elementIndex = i;
                      } else {
                        if (elementIndex !== i) {
                          selectedElement.classList.remove('e-active');
                          selectedElement.removeAttribute('aria-selected');

                          if (selectedElement.querySelector('.e-check')) {
                            selectedElement.querySelector('.e-check').classList.remove('e-check');
                          }
                        }
                      }
                    }
                  } else {
                    selectedElement.classList.remove('e-active');
                    selectedElement.removeAttribute('aria-selected');

                    if (selectedElement.querySelector('.e-check')) {
                      selectedElement.querySelector('.e-check').classList.remove('e-check');
                    }
                  }
                } else {
                  if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[0]) {
                    selectedElement.classList.add('e-active');
                    selectedElement.setAttribute('aria-selected', 'true');
                  } else {
                    selectedElement.classList.remove('e-active');
                    selectedElement.removeAttribute('aria-selected');
                  }
                }

                if (listViewComponent.hiddenItems.length > 0) {
                  for (var k = 0; k < listViewComponent.hiddenItems.length; k++) {
                    if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[k]) {
                      selectedElement.style.display = 'none';
                      hiddenElementIndex = i;
                    } else {
                      if (hiddenElementIndex !== i) {
                        selectedElement.style.display = null;
                      }
                    }
                  }
                }

                if (listViewComponent.enabledItems.length > 0) {
                  for (var x = 0; x < listViewComponent.enabledItems.length; x++) {
                    if (selectedElement.getAttribute('data-uid') === listViewComponent.enabledItems[x]) {
                      if (selectedElement.classList.contains('e-disabled')) {
                        selectedElement.classList.remove('e-disabled');
                      }
                    }
                  }
                }

                if (listViewComponent.disabledItems.length > 0) {
                  for (var y = 0; y < listViewComponent.disabledItems.length; y++) {
                    if (selectedElement.getAttribute('data-uid') === listViewComponent.disabledItems[y]) {
                      if (!selectedElement.classList.contains('e-disabled')) {
                        selectedElement.classList.add('e-disabled');
                      }
                    }
                  }
                }
              }
            }, 200);
          }
        }, {
          key: "renderingNestedList",
          value: function renderingNestedList() {
            var ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.liElement.parentNode, '.' + classNames.parentItem);
            var ctrlId = this.element.id;
            var ulElement = document.getElementById(ctrlId);
            var currentListItem = ulElement.getElementsByTagName('UL')[ulElement.getElementsByTagName('UL').length - 1];
            this.switchView(ul, currentListItem);
            this.liElement = null;
          }
        }, {
          key: "renderSubList",
          value: function renderSubList(li) {
            this.liElement = li;
            var uID = li.getAttribute('data-uid');

            if (li.classList.contains(classNames.hasChild) && uID) {
              var ul = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(li.parentNode, '.' + classNames.parentItem);
              var ele = this.element.querySelector('[pid=\'' + uID + '\']');
              this.curDSLevel.push(uID);
              this.setViewDataSource(this.getSubDS());

              if (!ele) {
                var data = this.curViewDS;

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                  // tslint:disable
                  this.interopAdaptor.invokeMethodAsync('ListChildDataSource', data); // tslint:enable
                } else {
                  ele = ListBase.createListFromJson(this.createElement, data, this.listBaseOption, this.curDSLevel.length);
                  var lists = ele.querySelectorAll('.' + classNames.listItem);
                  this.setAttributes(lists);
                  ele.setAttribute('pID', uID);
                  ele.style.display = 'none';
                  this.renderIntoDom(ele);
                  this.updateBlazorTemplates(true);
                }
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered || this.enableVirtualization) {
                this.switchView(ul, ele);
              }

              this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);

              if (this.selectedItems) {
                var fieldData = getFieldValues(this.selectedItems.data, this.listBaseOption.fields);
                this.header(fieldData[this.listBaseOption.fields.text], true);
              }

              this.selectedLI = undefined;
            }
          }
        }, {
          key: "renderIntoDom",
          value: function renderIntoDom(ele) {
            this.contentContainer.appendChild(ele);
          }
        }, {
          key: "renderList",
          value: function renderList(data) {
            this.setViewDataSource(data);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered || this.enableVirtualization) {
              if (this.enableVirtualization) {
                if (Object.keys(this.dataSource).length) {
                  if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
                    if ((this.template || this.groupTemplate) && !this.virtualizationModule.isNgTemplate()) {
                      this.listBaseOption.template = null;
                      this.listBaseOption.groupTemplate = null;
                      this.listBaseOption.itemCreated = this.virtualizationModule.createUIItem.bind(this.virtualizationModule);
                    }
                  }
                }

                this.virtualizationModule.uiVirtualization();
              } else {
                this.createList();
                this.contentContainer = this.createElement('div', {
                  className: classNames.content
                });
                this.element.appendChild(this.contentContainer);
                this.renderIntoDom(this.ulElement);
              }
            }
          }
        }, {
          key: "getElementUID",
          value: function getElementUID(obj) {
            var fields = {};

            if (obj instanceof Element) {
              fields[this.fields.id] = obj.getAttribute('data-uid');
            } else {
              fields = obj;
            }

            return fields;
          }
          /**
           * Initializes the ListView component rendering.
           */

        }, {
          key: "render",
          value: function render() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
              this.element.classList.add(classNames.root);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
                role: 'list',
                tabindex: '0'
              });
              this.setCSSClass();
              this.setEnableRTL();
              this.setEnable();
              this.setSize();
              this.wireEvents();
              this.header();
              this.setLocalData();
              this.setHTMLAttribute();
            } else {
              this.initBlazor(true);
            }

            this.rippleFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.element, {
              selector: '.' + classNames.listItem
            });
            this.renderComplete();
          }
        }, {
          key: "initBlazor",
          value: function initBlazor(firstRender) {
            if (firstRender === null) {
              firstRender = false;
            }

            this.setLocalData();
            this.setViewDataSource(this.localData);
            this.contentContainer = this.element.querySelector('.' + classNames.content);

            if (firstRender) {
              this.wireEvents();
            }
          }
          /**
           * It is used to destroy the ListView component.
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.resetBlazorTemplates();
            this.unWireEvents();
            var classAr = [classNames.root, classNames.disable, 'e-rtl', 'e-has-header', 'e-lib'].concat(this.cssClass.split(' ').filter(function (css) {
              return css;
            }));
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], classAr);
            this.element.removeAttribute('role');
            this.element.removeAttribute('tabindex');
            this.curUL = this.ulElement = this.liCollection = this.headerEle = undefined;

            if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
              this.element.innerHTML = '';

              _get2(_getPrototypeOf2(ListView.prototype), "destroy", this).call(this);
            } else {
              this.element.style.display = 'none';
            }
          }
          /**
           * Switches back from the navigated sub list item.
           */

        }, {
          key: "back",
          value: function back() {
            var pID = this.curDSLevel[this.curDSLevel.length - 1];

            if (pID === undefined || this.isInAnimation()) {
              return;
            }

            this.curDSLevel.pop();
            this.setViewDataSource(this.getSubDS());
            var toUL = this.element.querySelector('[data-uid=\'' + pID + '\']');
            var fromUL = this.curUL;

            if (!toUL) {
              this.createList();
              this.renderIntoDom(this.ulElement);
              toUL = this.curUL;
            } else {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && this.enableVirtualization) {
                toUL = toUL.parentElement.parentElement.parentElement;
              } else {
                toUL = toUL.parentElement;
              }
            }

            var fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);
            var text = fieldData[this.fields.text];
            this.switchView(fromUL, toUL, true);
            this.removeFocus();
            var li = this.element.querySelector('[data-uid=\'' + pID + '\']');
            li.classList.remove(classNames.disable);
            li.classList.add(classNames.focused);

            if (this.showCheckBox && li.querySelector('.' + classNames.checkboxIcon).classList.contains(classNames.checked)) {
              li.setAttribute('aria-selected', 'true');
            } else {
              li.classList.remove(classNames.selected);
              li.setAttribute('aria-selected', 'false');
            }

            this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);

            if (this.enableHtmlSanitizer) {
              this.setProperties({
                headerTitle: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(this.headerTitle)
              }, true);
            }

            this.header(this.curDSLevel.length ? text : this.headerTitle, this.curDSLevel.length ? true : false);
          }
          /**
           * Selects the list item from the ListView by passing the elements or field object.
           * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
           */

        }, {
          key: "selectItem",
          value: function selectItem(item) {
            if (this.enableVirtualization) {
              this.virtualizationModule.selectItem(item);
            } else if (this.showCheckBox) {
              this.setCheckboxLI(this.getLiFromObjOrElement(item));
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item) ? this.removeSelect() : this.setSelectLI(this.getLiFromObjOrElement(item));
            }
          }
        }, {
          key: "getLiFromObjOrElement",
          value: function getLiFromObjOrElement(obj) {
            var li;
            var dataSource = this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] ? this.localData : this.dataSource;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(obj)) {
              if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {
                if (obj instanceof Element) {
                  var uid = obj.getAttribute('data-uid').toString();

                  for (var i = 0; i < this.liCollection.length; i++) {
                    if (this.liCollection[i].getAttribute('data-uid').toString() === uid) {
                      li = this.liCollection[i];
                      break;
                    }
                  }
                } else {
                  Array.prototype.some.call(this.curUL.querySelectorAll('.' + classNames.listItem), function (item) {
                    if (item.innerText.trim() === obj.toString()) {
                      li = item;
                      return true;
                    } else {
                      return false;
                    }
                  });
                }
              } else {
                var resultJSON = this.getItemData(obj);
                var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);

                if (resultJSON) {
                  li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');

                  if (!this.enableVirtualization && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
                    var curLi = this.element.querySelectorAll('.' + classNames.listItem);

                    for (var _i44 = 0; _i44 < curLi.length; _i44++) {
                      if (curLi[_i44].innerText.trim() === fieldData[this.fields.text]) {
                        li = curLi[_i44];
                      }
                    }
                  }
                }
              }
            }

            return li;
          }
          /**
           * Selects multiple list items from the ListView.
           * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of
           *  elements or array of fields Object with ID and Text fields.
           */

        }, {
          key: "selectMultipleItems",
          value: function selectMultipleItems(item) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
              for (var i = 0; i < item.length; i++) {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item[i])) {
                  this.selectItem(item[i]);
                }
              }
            }
          }
        }, {
          key: "getParentId",
          value: function getParentId() {
            var parentId = [];

            if (this.isNestedList) {
              for (var i = this.curDSLevel.length - 1; i >= 0; i--) {
                parentId.push(this.curDSLevel[i]);
              }
            }

            return parentId;
          }
          /**
           * Gets the details of the currently selected item from the list items.
           * @blazorType ListSelectedItem<TValue>
           */

        }, {
          key: "getSelectedItems",
          value: function getSelectedItems() {
            // tslint:disable-next-line:no-any
            var finalValue;
            var isCompleted = false;
            this.selectedId = [];
            var dataSource = this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] ? this.localData : this.dataSource;

            if (this.enableVirtualization && !isCompleted) {
              finalValue = this.virtualizationModule.getSelectedItems();
              isCompleted = true;
            } else if (this.showCheckBox && !isCompleted) {
              // tslint:disable-next-line:no-any
              var liCollection = this.curUL.getElementsByClassName(classNames.selected);
              var liTextCollection = [];
              var liDataCollection = [];
              this.selectedId = [];
              var dataParent = [];

              for (var i = 0; i < liCollection.length; i++) {
                if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {
                  liTextCollection.push(liCollection[i].innerText.trim());
                } else {
                  var tempData = this.getItemData(liCollection[i]);
                  var fieldData = getFieldValues(tempData, this.listBaseOption.fields);

                  if (this.isNestedList) {
                    dataParent.push({
                      data: tempData,
                      parentId: this.getParentId()
                    });
                  } else {
                    liDataCollection.push(tempData);
                  }

                  if (fieldData) {
                    liTextCollection.push(fieldData[this.listBaseOption.fields.text]);
                    this.selectedId.push(fieldData[this.listBaseOption.fields.id]);
                  } else {
                    liTextCollection.push(undefined);
                    this.selectedId.push(undefined);
                  }
                }
              }

              if ((typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') && !isCompleted) {
                finalValue = {
                  item: liCollection,
                  data: dataSource,
                  text: liTextCollection
                };
                isCompleted = true;
              }

              if (this.isNestedList && !isCompleted) {
                finalValue = {
                  item: liCollection,
                  data: dataParent,
                  text: liTextCollection
                };
                isCompleted = true;
              } else if (!isCompleted) {
                finalValue = {
                  item: liCollection,
                  data: liDataCollection,
                  text: liTextCollection
                };
                isCompleted = true;
              }
            } else if (!isCompleted) {
              var liElement = this.element.getElementsByClassName(classNames.selected)[0];

              var _fieldData = getFieldValues(this.getItemData(liElement), this.listBaseOption.fields);

              if ((typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') && !isCompleted) {
                finalValue = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement) ? {
                  item: liElement,
                  data: dataSource,
                  text: liElement.innerText.trim()
                } : undefined;
                isCompleted = true;
              } else if (!isCompleted) {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_fieldData) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
                  finalValue = undefined;
                  isCompleted = true;
                } else {
                  this.selectedId.push(_fieldData[this.listBaseOption.fields.id]);
                  finalValue = {
                    text: _fieldData[this.listBaseOption.fields.text],
                    item: liElement,
                    data: this.getItemData(liElement)
                  };
                  isCompleted = true;
                }
              }
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              // tslint:disable-next-line:no-any
              return this.blazorGetSelectedItems(finalValue);
            } else {
              return finalValue;
            }
          } // tslint:disable-next-line:no-any

        }, {
          key: "blazorGetSelectedItems",
          value: function blazorGetSelectedItems(finalGetSelectedItem) {
            var blazorSelectedItem = {
              data: [],
              index: [],
              parentId: [],
              text: []
            };

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(finalGetSelectedItem)) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(finalGetSelectedItem.data)) {
                if (this.showCheckBox && this.isNestedList) {
                  for (var i = 0; i < finalGetSelectedItem.data.length; i++) {
                    blazorSelectedItem.data.push(finalGetSelectedItem.data[i].data);
                  }

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(finalGetSelectedItem.data[0]) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(finalGetSelectedItem.data[0].parentId)) {
                    blazorSelectedItem.parentId = finalGetSelectedItem.data[0].parentId;
                  }
                } else {
                  blazorSelectedItem.data = this.convertItemsToArray(finalGetSelectedItem.data);
                }
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(finalGetSelectedItem.text)) {
                blazorSelectedItem.text = this.convertItemsToArray(finalGetSelectedItem.text);
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(finalGetSelectedItem.index)) {
                blazorSelectedItem.index = this.convertItemsToArray(finalGetSelectedItem.index);
              }
            }

            return blazorSelectedItem;
          } // tslint:disable-next-line:no-any

        }, {
          key: "convertItemsToArray",
          value: function convertItemsToArray(items) {
            return Array.isArray(items) ? _toConsumableArray(items) : [items];
          }
          /**
           * Finds out an item details from the current list.
           * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
           * @blazorType TValue
           */

        }, {
          key: "findItem",
          value: function findItem(item) {
            return this.getItemData(item);
          }
          /**
           * Enables the disabled list items by passing the Id and text fields.
           * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
           */

        }, {
          key: "enableItem",
          value: function enableItem(item) {
            this.setItemState(item, true);

            if (this.enableVirtualization) {
              this.virtualizationModule.enableItem(item);
            }
          }
          /**
           * Disables the list items by passing the Id and text fields.
           * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
           */

        }, {
          key: "disableItem",
          value: function disableItem(item) {
            this.setItemState(item, false);

            if (this.enableVirtualization) {
              this.virtualizationModule.disableItem(item);
            }
          } //A function that used to set state of the list item like enable, disable.

        }, {
          key: "setItemState",
          value: function setItemState(item, isEnable) {
            var resultJSON = this.getItemData(item);
            var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);

            if (resultJSON) {
              var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');

              if (isEnable) {
                if (li) {
                  li.classList.remove(classNames.disable);
                }

                delete resultJSON[this.fields.enabled];
              } else if (!isEnable) {
                if (li) {
                  li.classList.add(classNames.disable);
                }

                resultJSON[this.fields.enabled] = false;
              }
            }
          }
          /**
           * Shows the hide list item from the ListView.
           * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
           */

        }, {
          key: "showItem",
          value: function showItem(item) {
            this.showHideItem(item, false, '');

            if (this.enableVirtualization) {
              this.virtualizationModule.showItem(item);
            }
          }
          /**
           * Hides an list item from the ListView.
           * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
           */

        }, {
          key: "hideItem",
          value: function hideItem(item) {
            this.showHideItem(item, true, 'none');

            if (this.enableVirtualization) {
              this.virtualizationModule.hideItem(item);
            }
          }
        }, {
          key: "showHideItem",
          value: function showHideItem(obj, isHide, display) {
            var resultJSON = this.getItemData(obj);
            var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);

            if (resultJSON) {
              var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');

              if (li) {
                li.style.display = display;
              }

              if (isHide) {
                resultJSON[this.fields.isVisible] = false;
              } else {
                delete resultJSON[this.fields.isVisible];
              }
            }
          }
          /**
           * Adds the new list item(s) to the current ListView.
           * To add a new list item(s) in the ListView, we need to pass the `data` as an array of items that need
           * to be added and `fields` as the target item to which we need to add the given item(s) as its children.
           * For example fields: { text: 'Name', tooltip: 'Name', id:'id'}
           * @param  {{[key:string]:Object}[]} data - JSON Array Data that need to add.
           * @param  {Fields} fields - Target item to add the given data as its children (can be null).
           * @blazorArgsType data|object,fields|object
           */

        }, {
          key: "addItem",
          value: function addItem(data) {
            var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var dataSource = this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] ? this.localData : this.dataSource;
            this.addItemInternally(data, fields, dataSource);
          }
        }, {
          key: "addItemInternally",
          value: function addItemInternally(data, fields, dataSource) {
            if (data instanceof Array) {
              if (this.enableVirtualization) {
                this.virtualizationModule.addItem(data, fields, dataSource);
              } else {
                var ds = this.findItemFromDS(dataSource, fields);
                var child;

                if (ds) {
                  var fieldData = getFieldValues(ds, this.listBaseOption.fields);
                  child = fieldData[this.fields.child];

                  if (!child) {
                    child = [];
                  }

                  child = child.concat(data);
                } // check for whether target is nested level or top level in list


                if (ds instanceof Array) {
                  for (var i = 0; i < data.length; i++) {
                    dataSource.push(data[i]);
                    this.setViewDataSource(dataSource); // since it is top level target, get the content container's first child
                    // as it is always the top level UL

                    var targetUL = this.contentContainer ? this.contentContainer.children[0] : null; // check for whether the list was previously empty or not, if it is
                    // proceed to call initial render

                    if (this.contentContainer && targetUL) {
                      this.addItemIntoDom(data[i], targetUL, this.curViewDS);
                    } else {
                      this.reRender();
                    }
                  }

                  if (this.curUL) {
                    this.updateBlazorTemplates(true);
                  }

                  this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);
                } else {
                  // proceed as target item is in nested level, only if it is a valid target ds
                  if (ds) {
                    ds[this.fields.child] = child;
                    this.addItemInNestedList(ds, data);
                  }
                }
              }
            }
          }
        }, {
          key: "addItemInNestedList",
          value: function addItemInNestedList(targetItemData, itemQueue) {
            var targetItemId = targetItemData[this.fields.id];
            var targetChildDS = targetItemData[this.fields.child];
            var isAlreadyRenderedUL = this.element.querySelector('[pid=\'' + targetItemId + '\']');
            var targetLi = this.element.querySelector('[data-uid=\'' + targetItemId + '\']');
            var targetUL = isAlreadyRenderedUL ? isAlreadyRenderedUL : targetLi ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(targetLi, 'ul') : null;
            var targetDS = isAlreadyRenderedUL ? targetChildDS : [targetItemData];
            var isTargetEmptyChild = targetLi ? !targetLi.classList.contains(classNames.hasChild) : false;
            var isRefreshTemplateNeeded = false; // if li element is already rendered, that element needs to be refreshed so that
            // it becomes child viewable due to new child items are added now

            if (isTargetEmptyChild) {
              var targetRefreshedElement = ListBase.createListItemFromJson(this.createElement, targetDS, this.listBaseOption);
              this.setAttributes(targetRefreshedElement);
              targetUL.insertBefore(targetRefreshedElement[0], targetLi);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(targetLi);
              isRefreshTemplateNeeded = true;
            } // if it is already rendered element, we need to create and append new elements


            if (isAlreadyRenderedUL && itemQueue) {
              for (var i = 0; i < itemQueue.length; i++) {
                targetDS.push(itemQueue[i]);
                this.addItemIntoDom(itemQueue[i], targetUL, targetDS);
              }

              isRefreshTemplateNeeded = true;
            }

            if (isRefreshTemplateNeeded) {
              this.updateBlazorTemplates(true);
            }
          }
        }, {
          key: "addItemIntoDom",
          value: function addItemIntoDom(currentItem, targetUL, curViewDS) {
            var index = curViewDS.indexOf(currentItem);
            this.addListItem(currentItem, index, targetUL, curViewDS);
            var curItemDS = curViewDS[index - 1];

            if (curItemDS && curItemDS.isHeader && curItemDS.items.length === 1) {
              this.addListItem(curItemDS, index - 1, targetUL, curViewDS);
            }
          }
        }, {
          key: "addListItem",
          value: function addListItem(dataSource, index, ulElement, curViewDS) {
            var target = this.getLiFromObjOrElement(curViewDS[index + 1]) || this.getLiFromObjOrElement(curViewDS[index + 2]) || null;
            var li = ListBase.createListItemFromJson(this.createElement, [dataSource], this.listBaseOption);
            this.setAttributes(li);
            ulElement.insertBefore(li[0], target);
          }
          /**
           * Removes the list item from the data source based on a passed
           *  element like fields: { text: 'Name', tooltip: 'Name', id:'id'}
           * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.
           */

        }, {
          key: "removeItem",
          value: function removeItem(item) {
            var listDataSource = this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] ? this.localData : this.dataSource;

            if (this.enableVirtualization) {
              this.virtualizationModule.removeItem(item);
            } else {
              this.removeItemFromList(item, listDataSource);
              this.updateBlazorTemplates(true);
            }
          }
        }, {
          key: "removeItemFromList",
          value: function removeItemFromList(obj, listDataSource) {
            var _this104 = this;

            var curViewDS = this.curViewDS;
            var fields = obj instanceof Element ? this.getElementUID(obj) : obj;
            var dataSource;
            dataSource = this.findItemFromDS(listDataSource, fields, true);

            if (dataSource) {
              var data;
              data = this.findItemFromDS(dataSource, fields);
              var index = curViewDS.indexOf(data);
              var li = this.getLiFromObjOrElement(obj);
              var groupLi;
              this.validateNestedView(li);

              if (this.fields.groupBy && this.curViewDS[index - 1] && curViewDS[index - 1].isHeader && curViewDS[index - 1].items.length === 1) {
                if (li && li.previousElementSibling.classList.contains(classNames.groupListItem) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.nextElementSibling) || li.nextElementSibling && li.nextElementSibling.classList.contains(classNames.groupListItem))) {
                  groupLi = li.previousElementSibling;
                }
              }

              if (li) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(li);
              }

              if (groupLi) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(groupLi);
              } // tslint:disable-next-line:no-any


              var foundData = dataSource.length - 1 <= 0 ? this.findParent(this.localData, this.fields.id, function (value) {
                return value === data[_this104.fields.id];
              }, null) : null;
              var dsIndex = dataSource.indexOf(data);
              dataSource.splice(dsIndex, 1);
              this.setViewDataSource(listDataSource);

              if (foundData && foundData.parent && Array.isArray(foundData.parent[this.fields.child]) && foundData.parent[this.fields.child].length <= 0) {
                var parentLi = this.getLiFromObjOrElement(foundData.parent);

                if (parentLi) {
                  var _li = ListBase.createListItemFromJson(this.createElement, [foundData.parent], this.listBaseOption);

                  this.setAttributes(_li);
                  parentLi.parentElement.insertBefore(_li[0], parentLi);
                  parentLi.parentElement.removeChild(parentLi);
                }
              }

              if (dataSource.length <= 0) {
                this.back();
              }

              this.liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));
            }
          } // validate before removing an element whether the current view is inside target element's child view

        }, {
          key: "validateNestedView",
          value: function validateNestedView(li) {
            var liID = li ? li.getAttribute('data-uid').toString().toLowerCase() : null;

            if (liID && this.curDSLevel && this.curDSLevel.length > 0) {
              while (this.curDSLevel.some(function (id) {
                return id.toString().toLowerCase() === liID;
              })) {
                this.back();
              }
            }
          }
          /**
           * Removes multiple items from the ListView by passing the array of elements or array of field objects.
           * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of elements or array of field Object with ID and Text fields.
           */

        }, {
          key: "removeMultipleItems",
          value: function removeMultipleItems(item) {
            if (item.length) {
              for (var i = 0; i < item.length; i++) {
                this.removeItem(item[i]);
              }

              this.updateBlazorTemplates(true);
            }
          } // tslint:disable-next-line:no-any

        }, {
          key: "findParent",
          value: function findParent(dataSource, id, callback, parent) {
            if (dataSource.hasOwnProperty(id) && callback(dataSource[id]) === true) {
              return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, dataSource);
            }

            for (var i = 0; i < Object.keys(dataSource).length; i++) {
              if (dataSource[Object.keys(dataSource)[i]] && typeof dataSource[Object.keys(dataSource)[i]] === 'object') {
                // tslint:disable-next-line:no-any
                var result = this.findParent(dataSource[Object.keys(dataSource)[i]], id, callback, dataSource);

                if (result != null) {
                  if (!result.parent) {
                    result.parent = parent;
                  }

                  return result;
                }
              }
            }

            return null;
          } // Module Required function

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'listview';
          }
        }, {
          key: "requiredModules",
          value: function requiredModules() {
            var modules = [];

            if (this.enableVirtualization) {
              modules.push({
                args: [this],
                member: 'virtualization'
              });
            }

            return modules;
          }
          /**
           * Get the properties to be maintained in the persisted state.
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist(['cssClass', 'enableRtl', 'htmlAttributes', 'enable', 'fields', 'animation', 'headerTitle', 'sortOrder', 'showIcon', 'height', 'width', 'showCheckBox', 'checkBoxPosition']);
          }
        }]);

        return ListView;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ListView.prototype, "cssClass", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ListView.prototype, "enableVirtualization", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], ListView.prototype, "htmlAttributes", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], ListView.prototype, "enable", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], ListView.prototype, "dataSource", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], ListView.prototype, "query", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])(ListBase.defaultMappedFields, FieldSettings)], ListView.prototype, "fields", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({
        effect: 'SlideLeft',
        duration: 400,
        easing: 'ease'
      })], ListView.prototype, "animation", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('None')], ListView.prototype, "sortOrder", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ListView.prototype, "showIcon", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ListView.prototype, "showCheckBox", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], ListView.prototype, "checkBoxPosition", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ListView.prototype, "headerTitle", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ListView.prototype, "showHeader", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ListView.prototype, "enableHtmlSanitizer", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ListView.prototype, "height", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ListView.prototype, "width", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ListView.prototype, "template", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ListView.prototype, "headerTemplate", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ListView.prototype, "groupTemplate", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListView.prototype, "select", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListView.prototype, "actionBegin", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListView.prototype, "actionComplete", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListView.prototype, "actionFailure", void 0);

      ListView = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], ListView);
      var listElementCount = 1.5;
      var windowElementCount = 3;

      var Virtualization = /*#__PURE__*/function () {
        function Virtualization(instance) {
          _classCallCheck2(this, Virtualization);

          this.elementDifference = 0;
          this.listViewInstance = instance;
        }
        /**
         * For internal use only.
         * @private
         */


        _createClass2(Virtualization, [{
          key: "isNgTemplate",
          value: function isNgTemplate() {
            return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listViewInstance.templateRef) && typeof this.listViewInstance.templateRef !== 'string';
          }
          /**
           * For internal use only.
           * @private
           */

        }, {
          key: "uiVirtualization",
          value: function uiVirtualization() {
            this.wireScrollEvent(false);
            var curViewDS = this.listViewInstance.curViewDS;
            var firstDs = curViewDS.slice(0, 1);

            if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || this.listViewInstance.isServerRendered)) {
              this.listViewInstance.ulElement = this.listViewInstance.curUL = ListBase.createList(this.listViewInstance.createElement, firstDs, this.listViewInstance.listBaseOption);
              this.listViewInstance.contentContainer = this.listViewInstance.createElement('div', {
                className: classNames.content
              });
              this.listViewInstance.element.appendChild(this.listViewInstance.contentContainer);
              this.listViewInstance.contentContainer.appendChild(this.listViewInstance.ulElement);
            }

            this.listItemHeight = this.listViewInstance.ulElement.firstElementChild.getBoundingClientRect().height;
            this.expectedDomItemCount = this.ValidateItemCount(10000);
            this.domItemCount = this.ValidateItemCount(Object.keys(this.listViewInstance.curViewDS).length);
            this.uiFirstIndex = 0;
            this.uiLastIndex = this.domItemCount - 1;
            var otherDs = curViewDS.slice(1, this.domItemCount);

            if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || this.listViewInstance.isServerRendered)) {
              var listItems = ListBase.createListItemFromJson(this.listViewInstance.createElement, otherDs, this.listViewInstance.listBaseOption);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(listItems, this.listViewInstance.ulElement);
              this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');
              this.topElement = this.listViewInstance.createElement('div');
              this.listViewInstance.ulElement.insertBefore(this.topElement, this.listViewInstance.ulElement.firstElementChild);
              this.bottomElement = this.listViewInstance.createElement('div');
              this.listViewInstance.ulElement.insertBefore(this.bottomElement, null);
              this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
              this.topElement.style.height = 0 + 'px';
              this.bottomElement.style.height = this.totalHeight + 'px';
              this.topElementHeight = 0;
              this.bottomElementHeight = this.totalHeight;
            } else {
              this.listViewInstance.contentContainer = this.listViewInstance.element.querySelector('.e-content');
              this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');
            }

            this.listDiff = 0;
            this.uiIndicesInitialization();
          }
        }, {
          key: "wireScrollEvent",
          value: function wireScrollEvent(destroy) {
            if (!destroy) {
              if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.listViewInstance.isServerRendered)) {
                if (this.listViewInstance.isWindow) {
                  this.onVirtualScroll = this.onVirtualUiScroll.bind(this);
                  window.addEventListener('scroll', this.onVirtualScroll);
                } else {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll, this);
                }
              } else {
                if (this.listViewInstance.isWindow) {
                  // tslint:disable-next-line:no-any
                  this.onVirtualScroll = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["debounce"])(this.onVirtualUiScroll.bind(this), 350); // tslint:enable-next-line:no-any      

                  this.updateUl = this.updateUlContainer.bind(this);
                  window.addEventListener('scroll', this.onVirtualScroll);
                  window.addEventListener('scroll', this.updateUl);
                } else {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.listViewInstance.element, 'scroll', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["debounce"])(this.onVirtualUiScroll, 350), this);

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.listViewInstance.element, 'scroll', this.updateUlContainer, this);
                }
              }
            } else {
              this.listViewInstance.isWindow ? window.removeEventListener('scroll', this.onVirtualScroll) : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll);
              this.listViewInstance.isWindow ? window.removeEventListener('scroll', this.updateUl) : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.listViewInstance.element, 'scroll', this.updateUlContainer);
            }
          }
        }, {
          key: "updateUlContainer",
          value: function updateUlContainer(e) {
            var listDiff;
            var virtualElementContainer = this.listViewInstance.ulElement.querySelector('.' + classNames.virtualElementContainer);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listViewInstance.liElementHeight)) {
              this.listViewInstance.updateLiElementHeight();
            }

            if (this.listViewInstance.isWindow) {
              // tslint:disable-next-line:no-any
              listDiff = Math.round(e.target.documentElement.scrollTop / this.listViewInstance.liElementHeight) - 2; // tslint:enable-next-line:no-any  
            } else {
              // tslint:disable-next-line:no-any
              listDiff = Math.round(e.target.scrollTop / this.listViewInstance.liElementHeight) - 2; // tslint:enable-next-line:no-any  
            }

            if ((listDiff - 1) * this.listViewInstance.liElementHeight < 0) {
              virtualElementContainer.style.top = '0px';
            } else {
              virtualElementContainer.style.top = listDiff * this.listViewInstance.liElementHeight + 'px';
            }
          }
        }, {
          key: "ValidateItemCount",
          value: function ValidateItemCount(dataSourceLength) {
            var height = parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.listViewInstance.height));
            var itemCount;

            if (this.listViewInstance.isWindow) {
              itemCount = Math.round(window.innerHeight / this.listItemHeight * windowElementCount);
            } else {
              if (typeof this.listViewInstance.height === 'string' && this.listViewInstance.height.indexOf('%') !== -1) {
                // tslint:disable-next-line:max-line-length
                itemCount = Math.round(this.listViewInstance.element.getBoundingClientRect().height / this.listItemHeight * listElementCount);
              } else {
                itemCount = Math.round(height / this.listItemHeight * listElementCount);
              }
            }

            if (itemCount > dataSourceLength) {
              itemCount = dataSourceLength;
            }

            return itemCount;
          }
        }, {
          key: "uiIndicesInitialization",
          value: function uiIndicesInitialization() {
            this.uiIndices = {
              'activeIndices': [],
              'disabledItemIndices': [],
              'hiddenItemIndices': []
            };
            var data = this.listViewInstance.curViewDS;

            for (var i = 0; i < data.length; i++) {
              if (this.listViewInstance.showCheckBox && data[i][this.listViewInstance.fields.isChecked]) {
                this.uiIndices.activeIndices.push(i);
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data[i][this.listViewInstance.fields.enabled]) && !data[i][this.listViewInstance.fields.enabled]) {
                this.uiIndices.disabledItemIndices.push(i);
              }
            }

            if (this.isNgTemplate()) {
              var items = this.listViewInstance.element.querySelectorAll('.' + classNames.listItem);

              for (var index = 0; index < items.length; index++) {
                items[index].context = this.listViewInstance.viewContainerRef.get(index).context;
              }
            }
          }
        }, {
          key: "refreshItemHeight",
          value: function refreshItemHeight() {
            if (this.listViewInstance.curViewDS.length) {
              var curViewDS = this.listViewInstance.curViewDS;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.listViewInstance.isServerRendered) {
                this.listViewInstance.ulElement.children[0].style.height = this.listViewInstance.liElementHeight * Object.keys(curViewDS).length + 'px';
              } else {
                this.listItemHeight = this.topElement.nextSibling.getBoundingClientRect().height;
                this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
                this.bottomElementHeight = this.totalHeight;
                this.bottomElement.style.height = this.totalHeight + 'px';
              }
            }
          }
        }, {
          key: "getscrollerHeight",
          value: function getscrollerHeight(startingHeight) {
            return this.listViewInstance.isWindow ? pageYOffset - startingHeight <= 0 ? 0 : pageYOffset - startingHeight : this.listViewInstance.element.scrollTop - startingHeight <= 0 ? 0 : this.listViewInstance.element.scrollTop - startingHeight;
          }
        }, {
          key: "onVirtualUiScroll",
          value: function onVirtualUiScroll(e) {
            var startingHeight;

            if (this.listViewInstance.isWindow) {
              startingHeight = this.listViewInstance.ulElement.getBoundingClientRect().top - document.documentElement.getBoundingClientRect().top;
            } else {
              startingHeight = this.listViewInstance.headerEle ? this.listViewInstance.headerEle.getBoundingClientRect().height : 0;
            }

            this.scrollPosition = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.scrollPosition) ? 0 : this.scrollPosition;
            var scroll = this.getscrollerHeight(startingHeight);
            this.topElementHeight = this.listItemHeight * Math.floor(scroll / this.listItemHeight);
            this.bottomElementHeight = this.totalHeight - this.topElementHeight;

            var _ref2 = scroll <= this.totalHeight ? [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0];

            var _ref3 = _slicedToArray(_ref2, 2);

            this.topElementHeight = _ref3[0];
            this.bottomElementHeight = _ref3[1];

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.listViewInstance.isServerRendered) {
              var listDiff;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listViewInstance.liElementHeight)) {
                this.listViewInstance.updateLiElementHeight();
              }

              if (this.listViewInstance.isWindow) {
                listDiff = Math.round(document.documentElement.scrollTop / this.listViewInstance.liElementHeight);
              } else {
                // tslint:disable-next-line:no-any
                listDiff = Math.round(e.target.scrollTop / this.listViewInstance.liElementHeight); // tslint:enable-next-line:no-any
              }

              if (listDiff - 2 - this.elementDifference >= 3 || listDiff - 2 - this.elementDifference <= -1) {
                var args = {
                  listDiff: listDiff - 2,
                  selectedItems: this.listViewInstance.previousSelectedItems
                };
                this.listViewInstance.interopAdaptor.invokeMethodAsync('VirtalScrolling', args);

                if (this.listViewInstance.ulElement.querySelector('.e-focused')) {
                  this.listViewInstance.ulElement.querySelector('.e-focused').classList.remove('e-focused');
                }

                this.elementDifference = listDiff - 2;
              }
            } else {
              if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {
                this.topElement.style.height = this.topElementHeight + 'px';
                this.bottomElement.style.height = this.bottomElementHeight + 'px';

                if (scroll > this.scrollPosition) {
                  var _listDiff = Math.round(this.topElementHeight / this.listItemHeight - this.listDiff);

                  if (_listDiff > this.expectedDomItemCount + 5) {
                    this.onLongScroll(_listDiff, true);
                  } else {
                    this.onNormalScroll(_listDiff, true);
                  }
                } else {
                  var _listDiff2 = Math.round(this.listDiff - this.topElementHeight / this.listItemHeight);

                  if (_listDiff2 > this.expectedDomItemCount + 5) {
                    this.onLongScroll(_listDiff2, false);
                  } else {
                    this.onNormalScroll(_listDiff2, false);
                  }
                }
              }

              this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);

              if (typeof this.listViewInstance.onUIScrolled === 'function') {
                this.listViewInstance.onUIScrolled();
              }
            }

            this.scrollPosition = scroll;
          }
        }, {
          key: "onLongScroll",
          value: function onLongScroll(listDiff, isScrollingDown) {
            var index = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;
            var elements = this.listViewInstance.ulElement.querySelectorAll('li');

            for (var i = 0; i < elements.length; i++) {
              this.updateUI(elements[i], index);
              index++;
            }

            this.uiLastIndex = isScrollingDown ? this.uiLastIndex + listDiff : this.uiLastIndex - listDiff;
            this.uiFirstIndex = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;
          }
        }, {
          key: "onNormalScroll",
          value: function onNormalScroll(listDiff, isScrollingDown) {
            if (isScrollingDown) {
              for (var i = 0; i < listDiff; i++) {
                var index = ++this.uiLastIndex;
                this.updateUI(this.topElement.nextElementSibling, index, this.bottomElement);
                this.uiFirstIndex++;
              }
            } else {
              for (var _i45 = 0; _i45 < listDiff; _i45++) {
                var _index5 = --this.uiFirstIndex;

                var target = this.topElement.nextSibling;
                this.updateUI(this.bottomElement.previousElementSibling, _index5, target);
                this.uiLastIndex--;
              }
            }
          }
        }, {
          key: "updateUiContent",
          value: function updateUiContent(element, index) {
            var curViewDs = this.listViewInstance.curViewDS;

            if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {
              element.dataset.uid = ListBase.generateId();
              element.getElementsByClassName(classNames.listItemText)[0].innerHTML = this.listViewInstance.curViewDS[index].toString();
            } else {
              element.dataset.uid = curViewDs[index][this.listViewInstance.fields.id] ? curViewDs[index][this.listViewInstance.fields.id].toString() : ListBase.generateId();
              element.getElementsByClassName(classNames.listItemText)[0].innerHTML = curViewDs[index][this.listViewInstance.fields.text].toString();
            }

            if (this.listViewInstance.showIcon) {
              if (element.querySelector('.' + classNames.listIcon)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(element.querySelector('.' + classNames.listIcon));
              }

              if (this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]) {
                var textContent = element.querySelector('.' + classNames.textContent);
                var target = this.listViewInstance.createElement('div', {
                  className: classNames.listIcon + ' ' + this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]
                });
                textContent.insertBefore(target, element.querySelector('.' + classNames.listItemText));
              }
            }

            if (this.listViewInstance.showCheckBox && this.listViewInstance.fields.groupBy) {
              if (!this.checkListWrapper) {
                this.checkListWrapper = this.listViewInstance.curUL.querySelector('.' + classNames.checkboxWrapper).cloneNode(true);
              }

              var _textContent = element.querySelector('.' + classNames.textContent);

              if (this.listViewInstance.curViewDS[index].isHeader) {
                if (element.querySelector('.' + classNames.checkboxWrapper)) {
                  element.classList.remove(classNames.checklist);

                  _textContent.classList.remove(classNames.checkbox);

                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(element.querySelector('.' + classNames.checkboxWrapper));
                }
              } else {
                if (!element.querySelector('.' + classNames.checkboxWrapper)) {
                  element.classList.add(classNames.checklist);

                  _textContent.classList.add(classNames.checkbox);

                  _textContent.insertBefore(this.checkListWrapper.cloneNode(true), element.querySelector('.' + classNames.listItemText));
                }
              }
            }
          }
        }, {
          key: "changeElementAttributes",
          value: function changeElementAttributes(element, index) {
            element.classList.remove(classNames.disable);

            if (this.uiIndices.disabledItemIndices.length && this.uiIndices.disabledItemIndices.indexOf(index) !== -1) {
              element.classList.add(classNames.disable);
            }

            element.style.display = '';

            if (this.uiIndices.hiddenItemIndices.length && this.uiIndices.hiddenItemIndices.indexOf(index) !== -1) {
              element.style.display = 'none';
            }

            if (this.listViewInstance.showCheckBox) {
              var checklistElement = element.querySelector('.' + classNames.checkboxWrapper);
              element.classList.remove(classNames.selected);
              element.classList.remove(classNames.focused);

              if (checklistElement) {
                checklistElement.removeAttribute('aria-checked');
                checklistElement.firstElementChild.classList.remove(classNames.checked);
              }

              if (this.uiIndices.activeIndices.length && this.uiIndices.activeIndices.indexOf(index) !== -1 && !this.listViewInstance.curUL.querySelector(classNames.selected)) {
                element.classList.add(classNames.selected);
                checklistElement.firstElementChild.classList.add(classNames.checked);
                checklistElement.setAttribute('aria-checked', 'true');

                if (this.activeIndex === index) {
                  element.classList.add(classNames.focused);
                }
              }
            } else {
              element.classList.remove(classNames.selected);
              element.removeAttribute('aria-selected');

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.activeIndex) && this.activeIndex === index && !this.listViewInstance.curUL.querySelector(classNames.selected)) {
                element.classList.add(classNames.selected);
                element.setAttribute('aria-selected', 'true');
              }
            }

            if (this.listViewInstance.fields.groupBy) {
              if (this.listViewInstance.curViewDS[index].isHeader) {
                if (element.classList.contains(classNames.listItem)) {
                  element.classList.remove(classNames.listItem);
                  element.setAttribute('role', 'group');
                  element.classList.add(classNames.groupListItem);
                }
              } else {
                if (element.classList.contains(classNames.groupListItem)) {
                  element.classList.remove(classNames.groupListItem);
                  element.setAttribute('role', 'listitem');
                  element.classList.add(classNames.listItem);
                }
              }
            }
          }
        }, {
          key: "findDSAndIndexFromId",
          value: function findDSAndIndexFromId(ds, fields) {
            var _this105 = this;

            var resultJSON = {};
            fields = this.listViewInstance.getElementUID(fields);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fields)) {
              ds.some(function (data, index) {
                if (fields[_this105.listViewInstance.fields.id] && fields[_this105.listViewInstance.fields.id].toString() === (data[_this105.listViewInstance.fields.id] && data[_this105.listViewInstance.fields.id].toString()) || fields === data) {
                  resultJSON.index = index;
                  resultJSON.data = data;
                  return true;
                } else {
                  return false;
                }
              });
            }

            return resultJSON;
          }
        }, {
          key: "getSelectedItems",
          value: function getSelectedItems() {
            var _this106 = this;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.activeIndex) || this.listViewInstance.showCheckBox && this.uiIndices.activeIndices.length) {
              var dataCollection = [];
              var textCollection = [];

              if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {
                var curViewDS = this.listViewInstance.curViewDS;

                if (this.listViewInstance.showCheckBox) {
                  var indices = this.uiIndices.activeIndices;

                  for (var i = 0; i < indices.length; i++) {
                    dataCollection.push(curViewDS[indices[i]]);
                  }

                  return {
                    text: dataCollection,
                    data: dataCollection,
                    index: this.uiIndices.activeIndices.map(function (index) {
                      return _this106.listViewInstance.dataSource.indexOf(curViewDS[index]);
                    })
                  };
                } else {
                  return {
                    text: curViewDS[this.activeIndex],
                    data: curViewDS[this.activeIndex],
                    index: this.listViewInstance.dataSource.indexOf(curViewDS[this.activeIndex])
                  };
                }
              } else {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.listViewInstance.isServerRendered) {
                  var scrollDiff = Math.round(this.listViewInstance.element.scrollTop / this.listViewInstance.liElementHeight) - 2;

                  if (scrollDiff < 0) {
                    scrollDiff = 0;
                  }

                  this.activeIndex += scrollDiff;
                }

                var _curViewDS = this.listViewInstance.curViewDS;
                var text = this.listViewInstance.fields.text;

                if (this.listViewInstance.showCheckBox) {
                  var indexArray = this.uiIndices.activeIndices;

                  for (var _i46 = 0; _i46 < indexArray.length; _i46++) {
                    textCollection.push(_curViewDS[indexArray[_i46]][text]);
                    dataCollection.push(_curViewDS[indexArray[_i46]]);
                  }

                  var dataSource = this.listViewInstance.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] ? _curViewDS : this.listViewInstance.dataSource;
                  return {
                    text: textCollection,
                    data: dataCollection,
                    index: this.uiIndices.activeIndices.map(function (index) {
                      return dataSource.indexOf(_curViewDS[index]);
                    })
                  };
                } else {
                  var _dataSource = this.listViewInstance.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] ? _curViewDS : this.listViewInstance.dataSource;

                  return {
                    text: _curViewDS[this.activeIndex][this.listViewInstance.fields.text],
                    data: _curViewDS[this.activeIndex],
                    index: _dataSource.indexOf(_curViewDS[this.activeIndex])
                  };
                }
              }
            } else {
              return undefined;
            }
          }
        }, {
          key: "selectItem",
          value: function selectItem(obj) {
            var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

            if (Object.keys(resutJSON).length) {
              var isSelected = this.activeIndex === resutJSON.index;
              var isChecked;
              this.activeIndex = resutJSON.index;

              if (this.listViewInstance.showCheckBox) {
                if (this.uiIndices.activeIndices.indexOf(resutJSON.index) === -1) {
                  isChecked = true;
                  this.uiIndices.activeIndices.push(resutJSON.index);
                } else {
                  isChecked = false;
                  this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(resutJSON.index), 1);
                }

                if (this.listViewInstance.curUL.querySelector('.' + classNames.focused)) {
                  this.listViewInstance.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);
                }
              }

              if (this.listViewInstance.getLiFromObjOrElement(obj)) {
                if (this.listViewInstance.showCheckBox) {
                  this.listViewInstance.setCheckboxLI(this.listViewInstance.getLiFromObjOrElement(obj));
                } else {
                  this.listViewInstance.setSelectLI(this.listViewInstance.getLiFromObjOrElement(obj));
                }
              } else {
                var eventArgs;

                if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {
                  eventArgs = {
                    text: this.listViewInstance.curViewDS[this.activeIndex],
                    data: this.listViewInstance.curViewDS[this.activeIndex],
                    index: this.activeIndex
                  };
                } else {
                  var curViewDS = this.listViewInstance.curViewDS;
                  eventArgs = {
                    text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],
                    data: curViewDS[this.activeIndex],
                    index: this.activeIndex
                  };
                }

                if (this.listViewInstance.showCheckBox) {
                  eventArgs.isChecked = isChecked;
                  this.listViewInstance.trigger('select', eventArgs);
                } else if (!isSelected) {
                  this.listViewInstance.removeSelect();
                  this.listViewInstance.trigger('select', eventArgs);
                }
              }
            } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(obj) && !this.listViewInstance.showCheckBox) {
              this.listViewInstance.removeSelect();
              this.activeIndex = undefined;
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.listViewInstance.isServerRendered) {
              // tslint:disable-next-line:no-any
              var elementId = resutJSON.data[this.listViewInstance.fields.id]; // tslint:enable-next-line:no-any

              if (this.listViewInstance.showCheckBox) {
                if (!this.listViewInstance.previousSelectedItems.includes(elementId)) {
                  this.listViewInstance.previousSelectedItems.push(elementId);
                } else {
                  var indexPosition = this.listViewInstance.previousSelectedItems.indexOf(elementId);

                  if (indexPosition > -1) {
                    this.listViewInstance.previousSelectedItems.splice(indexPosition, 1);
                  }
                }
              } else {
                this.listViewInstance.previousSelectedItems[0] = elementId;
              }

              this.listViewInstance.removeActiveClass();
            }
          }
        }, {
          key: "enableItem",
          value: function enableItem(obj) {
            var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.listViewInstance.isServerRendered) {
              var itemId = resutJSON.data[this.listViewInstance.fields.id];

              if (!this.listViewInstance.enabledItems.includes(itemId)) {
                this.listViewInstance.enabledItems.push(itemId);
                this.listViewInstance.removeActiveClass();
              }

              if (this.listViewInstance.disabledItems.includes(itemId)) {
                var indexPosition = this.listViewInstance.disabledItems.indexOf(itemId);

                if (indexPosition > -1) {
                  this.listViewInstance.disabledItems.splice(indexPosition, 1);
                }
              }
            } else {
              if (Object.keys(resutJSON).length) {
                this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(resutJSON.index), 1);
              }
            }
          }
        }, {
          key: "disableItem",
          value: function disableItem(obj) {
            var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.listViewInstance.isServerRendered) {
              var liElementId = resutJSON.data[this.listViewInstance.fields.id];

              if (!this.listViewInstance.disabledItems.includes(liElementId)) {
                this.listViewInstance.disabledItems.push(liElementId);
                this.listViewInstance.removeActiveClass();
              }

              if (this.listViewInstance.enabledItems.includes(liElementId)) {
                var indexPosition = this.listViewInstance.enabledItems.indexOf(liElementId);

                if (indexPosition > -1) {
                  this.listViewInstance.enabledItems.splice(indexPosition, 1);
                }
              }
            } else {
              if (Object.keys(resutJSON).length && this.uiIndices.disabledItemIndices.indexOf(resutJSON.index) === -1) {
                this.uiIndices.disabledItemIndices.push(resutJSON.index);
              }
            }
          }
        }, {
          key: "showItem",
          value: function showItem(obj) {
            var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.listViewInstance.isServerRendered) {
              // tslint:disable-next-line:no-any
              var hiddenElementId = resutJSON.data[this.listViewInstance.fields.id]; // tslint:enable-next-line:no-any

              if (this.listViewInstance.hiddenItems.includes(hiddenElementId)) {
                var indexPosition = this.listViewInstance.hiddenItems.indexOf(hiddenElementId);

                if (indexPosition > -1) {
                  this.listViewInstance.previousSelectedItems.splice(indexPosition, 1);
                  this.listViewInstance.removeActiveClass();
                }
              }
            } else {
              if (Object.keys(resutJSON).length) {
                this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index), 1);
              }
            }
          }
        }, {
          key: "hideItem",
          value: function hideItem(obj) {
            var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.listViewInstance.isServerRendered) {
              // tslint:disable-next-line:no-any
              var elementId = resutJSON.data[this.listViewInstance.fields.id]; // tslint:enable-next-line:no-any

              if (!this.listViewInstance.hiddenItems.includes(elementId)) {
                this.listViewInstance.hiddenItems.push(elementId);
                this.listViewInstance.removeActiveClass();
              }
            } else {
              if (Object.keys(resutJSON).length && this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index) === -1) {
                this.uiIndices.hiddenItemIndices.push(resutJSON.index);
              }
            }
          }
        }, {
          key: "removeItem",
          value: function removeItem(obj) {
            var dataSource;
            var curViewDS = this.listViewInstance.curViewDS;
            var resutJSON = this.findDSAndIndexFromId(curViewDS, obj);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.listViewInstance.isServerRendered) {
              if (resutJSON.index !== undefined) {
                // tslint:disable
                this.listViewInstance.interopAdaptor.invokeMethodAsync('RemoveItemPosition', resutJSON.index); // tslint:enable
              }
            }

            if (Object.keys(resutJSON).length) {
              dataSource = resutJSON.data;

              if (curViewDS[resutJSON.index - 1] && curViewDS[resutJSON.index - 1].isHeader && curViewDS[resutJSON.index - 1].items.length === 1) {
                this.removeUiItem(resutJSON.index - 1);
                this.removeUiItem(resutJSON.index - 1);
              } else {
                if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.listViewInstance.isServerRendered)) {
                  this.removeUiItem(resutJSON.index);
                }
              }
            }

            var listDataSource = this.listViewInstance.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] ? this.listViewInstance.localData : this.listViewInstance.dataSource;
            var index = listDataSource.indexOf(dataSource);

            if (index !== -1) {
              listDataSource.splice(index, 1);
              this.listViewInstance.setViewDataSource(listDataSource);
            } // recollect all the list item into collection


            this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');
          }
        }, {
          key: "setCheckboxLI",
          value: function setCheckboxLI(li, e) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.listViewInstance.isServerRendered) {
              this.uiFirstIndex = Math.round(this.listViewInstance.element.scrollTop / 36) - 4;

              if (this.uiFirstIndex < 0) {
                this.uiFirstIndex = 0;
              }
            }

            var index = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;
            this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;

            if (li.classList.contains(classNames.selected)) {
              if (this.uiIndices.activeIndices.indexOf(index) === -1) {
                this.uiIndices.activeIndices.push(index);
              }
            } else {
              this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);
            }
          }
        }, {
          key: "setSelectLI",
          value: function setSelectLI(li, e) {
            this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;
          }
        }, {
          key: "checkedItem",
          value: function checkedItem(checked) {
            if (checked) {
              this.uiIndices.activeIndices = [];
              this.activeIndex = undefined;
              var data = this.listViewInstance.curViewDS;

              for (var index = 0; index < data.length; index++) {
                if (!data[index].isHeader) {
                  this.uiIndices.activeIndices.push(index);
                }
              }
            } else {
              this.activeIndex = undefined;
              this.uiIndices.activeIndices = [];
            }
          }
        }, {
          key: "addUiItem",
          value: function addUiItem(index) {
            // virtually new add list item based on the scollbar position
            // if the scroll bar is at the top, just pretend the new item has been added since no UI
            // change is required for the item that has been added at last but when scroll bar is at the bottom
            // just detach top and inject into bottom to mimic new item is added
            var curViewDs = this.listViewInstance.curViewDS;
            this.changeUiIndices(index, true);

            if (this.activeIndex && this.activeIndex >= index) {
              this.activeIndex++;
            }

            if (this.listViewInstance.showCheckBox && curViewDs[index][this.listViewInstance.fields.isChecked]) {
              this.uiIndices.activeIndices.push(index);
            }

            if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {
              this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';
            }

            if (parseFloat(this.bottomElement.style.height)) {
              var liItem = this.listViewInstance.curUL.lastElementChild.previousSibling;
              var target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);

              if (target) {
                this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';
                this.updateUI(liItem, index, target);
              }
            } else {
              var _liItem = this.listViewInstance.curUL.firstElementChild.nextSibling;

              var _target;

              if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {
                _target = this.listViewInstance.curUL.lastElementChild;
              } else {
                _target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);
              }

              this.topElement.style.height = parseFloat(this.topElement.style.height) + this.listItemHeight + 'px';
              this.uiFirstIndex++;
              this.uiLastIndex++;

              if (_target) {
                this.updateUI(_liItem, index, _target);
                this.listViewInstance.isWindow ? window.scrollTo(0, pageYOffset + this.listItemHeight) : this.listViewInstance.element.scrollTop += this.listItemHeight;
              }
            }

            this.totalHeight += this.listItemHeight;
            this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);
          }
        }, {
          key: "removeUiItem",
          value: function removeUiItem(index) {
            this.totalHeight -= this.listItemHeight;
            var curViewDS = this.listViewInstance.curViewDS[index];
            var liItem = this.listViewInstance.getLiFromObjOrElement(curViewDS);
            this.listViewInstance.curViewDS.splice(index, 1);

            if (this.activeIndex && this.activeIndex >= index) {
              this.activeIndex--;
            }

            if (liItem) {
              if (this.domItemCount > Object.keys(this.listViewInstance.curViewDS).length) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liItem);
                this.domItemCount--;
                this.uiLastIndex--;
                this.totalHeight = 0;
              } else {
                if (liItem.classList.contains(classNames.disable)) {
                  liItem.classList.remove(classNames.disable);
                  this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(index), 1);
                }

                if (liItem.style.display === 'none') {
                  liItem.style.display = '';
                  this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(index), 1);
                }

                if (this.listViewInstance.showCheckBox && liItem.classList.contains(classNames.selected)) {
                  this.listViewInstance.removeSelect();
                  this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);
                  var checklistElement = liItem.querySelector('.' + classNames.checkboxWrapper);
                  checklistElement.removeAttribute('aria-checked');
                  checklistElement.firstElementChild.classList.remove(classNames.checked);

                  if (liItem.classList.contains(classNames.focused)) {
                    liItem.classList.remove(classNames.focused);
                    this.activeIndex = undefined;
                  }
                } else if (liItem.classList.contains(classNames.selected)) {
                  this.listViewInstance.removeSelect();
                  this.activeIndex = undefined;
                }

                if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {
                  this.updateUI(liItem, this.uiLastIndex, this.bottomElement);
                } else if (parseFloat(this.bottomElement.style.height)) {
                  this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) - this.listItemHeight + 'px';
                  this.updateUI(liItem, this.uiLastIndex, this.bottomElement);
                } else {
                  this.topElement.style.height = parseFloat(this.topElement.style.height) - this.listItemHeight + 'px';
                  this.updateUI(liItem, this.uiFirstIndex - 1, this.topElement.nextSibling);
                  this.uiLastIndex--;
                  this.uiFirstIndex--;
                }
              }
            }

            this.changeUiIndices(index, false);
            this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);
          }
        }, {
          key: "changeUiIndices",
          value: function changeUiIndices(index, increment) {
            var keys = Object.keys(this.uiIndices);

            for (var ind = 0; ind < keys.length; ind++) {
              this.uiIndices[keys[ind]] = this.uiIndices[keys[ind]].map(function (i) {
                if (i >= index) {
                  return increment ? ++i : --i;
                } else {
                  return i;
                }
              });
            }
          }
        }, {
          key: "addItem",
          value: function addItem(data, fields, dataSource) {
            for (var i = 0; i < data.length; i++) {
              var currentItem = data[i]; // push the given data to main data array

              dataSource.push(currentItem); // recalculate all the group data or other datasource related things

              this.listViewInstance.setViewDataSource(dataSource); // render list items for first time due to no datasource present earlier

              if (!this.domItemCount) {
                // fresh rendering for first time
                if ((this.listViewInstance.template || this.listViewInstance.groupTemplate) && !this.isNgTemplate()) {
                  this.listViewInstance.listBaseOption.template = null;
                  this.listViewInstance.listBaseOption.groupTemplate = null;
                  this.listViewInstance.listBaseOption.itemCreated = this.createUIItem.bind(this);
                }

                this.uiVirtualization(); // when expected expected DOM count doesn't meet the condition we need to create and inject new item into DOM
              } else if (this.domItemCount < this.expectedDomItemCount) {
                var ds = this.listViewInstance.findItemFromDS(dataSource, fields);

                if (ds instanceof Array) {
                  if (this.listViewInstance.ulElement) {
                    var index = this.listViewInstance.curViewDS.indexOf(currentItem); // inject new list item into DOM

                    this.createAndInjectNewItem(currentItem, index); // check for group header item

                    var curViewDS = this.listViewInstance.curViewDS[index - 1];

                    if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {
                      // target group item index in datasource
                      --index; // inject new group header into DOM for previously created list item

                      this.createAndInjectNewItem(curViewDS, index);
                    }
                  } // recollect all the list item into collection


                  this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');
                }
              } else {
                var _index6 = this.listViewInstance.curViewDS.indexOf(currentItem); // virtually new add list item based on the scollbar position


                this.addUiItem(_index6); // check for group header item needs to be added

                var _curViewDS2 = this.listViewInstance.curViewDS[_index6 - 1];

                if (_curViewDS2 && _curViewDS2.isHeader && _curViewDS2.items.length === 1) {
                  this.addUiItem(_index6 - 1);
                }
              }
            }
          }
        }, {
          key: "createAndInjectNewItem",
          value: function createAndInjectNewItem(itemData, index) {
            // generate li item for given datasource
            var target;
            var li = ListBase.createListItemFromJson(this.listViewInstance.createElement, [itemData], this.listViewInstance.listBaseOption); // check for target element whether to insert before last item or group item

            if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {
              target = this.listViewInstance.curUL.lastElementChild;
            } else {
              // target group header's first child item to append its header
              target = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 1]) || this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 2]);
            } // insert before the target element


            this.listViewInstance.ulElement.insertBefore(li[0], target); // increment internal DOM count, last index count for new element

            this.domItemCount++;

            if (this.bottomElementHeight <= 0) {
              this.uiLastIndex++;
            } // recalculate the current item height, to avoid jumpy scroller


            this.refreshItemHeight();
          }
        }, {
          key: "createUIItem",
          value: function createUIItem(args) {
            var virtualTemplate = this.listViewInstance.template;
            var template = this.listViewInstance.createElement('div');
            var commonTemplate = '<div class="e-text-content" role="presentation"> ' + '<span class="e-list-text"> ${' + this.listViewInstance.fields.text + '} </span></div>';

            if (this.listViewInstance.showCheckBox) {
              // tslint:disable-next-line:no-any
              this.listViewInstance.renderCheckbox(args); // tslint:enable-next-line:no-any

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listViewInstance.virtualCheckBox) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listViewInstance.virtualCheckBox.outerHTML)) {
                var div = document.createElement('div');
                div.innerHTML = this.listViewInstance.template || commonTemplate;
                div.children[0].classList.add('e-checkbox');
                this.listViewInstance.checkBoxPosition === 'Left' ? div.children[0].classList.add('e-checkbox-left') : div.children[0].classList.add('e-checkbox-right');

                if (this.listViewInstance.checkBoxPosition === 'Left') {
                  div.children[0].insertBefore(this.listViewInstance.virtualCheckBox, div.childNodes[0].children[0]);
                } else {
                  div.children[0].appendChild(this.listViewInstance.virtualCheckBox);
                }

                this.listViewInstance.template = div.innerHTML;
              }

              template.innerHTML = this.listViewInstance.template;
              this.listViewInstance.template = virtualTemplate;
            } else {
              template.innerHTML = this.listViewInstance.template || commonTemplate;
            } // tslint:disable-next-line:no-any


            var templateElements = template.getElementsByTagName('*');
            var groupTemplate = this.listViewInstance.createElement('div');

            if (this.listViewInstance.fields.groupBy) {
              groupTemplate.innerHTML = this.listViewInstance.groupTemplate || commonTemplate;
            } // tslint:disable-next-line:no-any


            var groupTemplateElements = groupTemplate.getElementsByTagName('*');

            if (args.curData.isHeader) {
              this.headerData = args.curData;
            }

            this.templateData = args.curData.isHeader ? args.curData.items[0] : args.curData;
            args.item.innerHTML = '';
            args.item.context = {
              data: args.curData,
              nodes: {
                flatTemplateNodes: [],
                groupTemplateNodes: []
              }
            };

            for (var i = 0; i < templateElements.length; i++) {
              this.compileTemplate(templateElements[i], args.item, false);
            }

            for (var _i47 = 0; _i47 < groupTemplateElements.length; _i47++) {
              this.compileTemplate(groupTemplateElements[_i47], args.item, true);
            }

            args.item.context.template = args.curData.isHeader ? template.firstElementChild : groupTemplate.firstElementChild;
            args.item.context.type = args.curData.isHeader ? 'flatList' : 'groupList';
            var element = args.curData.isHeader ? groupTemplate : template;
            args.item.insertBefore(element.firstElementChild, null);
          }
        }, {
          key: "compileTemplate",
          value: function compileTemplate(element, item, isHeader) {
            this.textProperty(element, item, isHeader);
            this.classProperty(element, item, isHeader);
            this.attributeProperty(element, item, isHeader);
          }
        }, {
          key: "onChange",
          value: function onChange(newData, listElement) {
            listElement.context.data = newData;
            var groupTemplateNodes = listElement.context.nodes.groupTemplateNodes;
            var flatTemplateNodes = listElement.context.nodes.flatTemplateNodes;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newData.isHeader) && newData.isHeader && listElement.context.type === 'groupList') {
              var element = listElement.firstElementChild;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(listElement.firstElementChild);
              listElement.insertBefore(listElement.context.template, null);
              listElement.context.template = element;
              listElement.context.type = 'flatList';

              for (var i = 0; i < groupTemplateNodes.length; i++) {
                groupTemplateNodes[i].onChange(newData);
              }
            } else if (!newData.isHeader && listElement.context.type === 'flatList') {
              var _element3 = listElement.firstElementChild;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(listElement.firstElementChild);
              listElement.insertBefore(listElement.context.template, null);
              listElement.context.template = _element3;
              listElement.context.type = 'groupList';

              for (var _i48 = 0; _i48 < flatTemplateNodes.length; _i48++) {
                flatTemplateNodes[_i48].onChange(newData);
              }
            } else if (!newData.isHeader) {
              for (var _i49 = 0; _i49 < flatTemplateNodes.length; _i49++) {
                flatTemplateNodes[_i49].onChange(newData);
              }
            } else {
              for (var _i50 = 0; _i50 < groupTemplateNodes.length; _i50++) {
                groupTemplateNodes[_i50].onChange(newData);
              }
            }
          }
        }, {
          key: "updateContextData",
          value: function updateContextData(listElement, node, isHeader) {
            if (isHeader) {
              listElement.context.nodes.groupTemplateNodes.push(node);
            } else {
              listElement.context.nodes.flatTemplateNodes.push(node);
            }
          }
        }, {
          key: "classProperty",
          value: function classProperty(element, listElement, isHeader) {
            var _this107 = this;

            var regex = new RegExp('\\${([^}]*)}', 'g');
            var resultantOutput = [];
            var regexMatch;

            while (regexMatch !== null) {
              var match = regex.exec(element.className);
              resultantOutput.push(match);
              regexMatch = match;

              if (regexMatch === null) {
                resultantOutput.pop();
              }
            }

            if (resultantOutput && resultantOutput.length) {
              var _loop6 = function _loop6(i) {
                var classNameMatch = resultantOutput[i];
                var classFunction = void 0;

                if (classNameMatch[1].indexOf('?') !== -1 && classNameMatch[1].indexOf(':') !== -1) {
                  // tslint:disable-next-line:no-function-constructor-with-string-args
                  classFunction = new Function('data', 'return ' + classNameMatch[1].replace(/\$/g, 'data.'));
                } else {
                  // tslint:disable-next-line:no-function-constructor-with-string-args
                  classFunction = new Function('data', 'return ' + 'data.' + classNameMatch[1]);
                }

                var subNode = {};

                if (isHeader) {
                  subNode.bindedvalue = classFunction(_this107.headerData);
                } else {
                  subNode.bindedvalue = classFunction(_this107.templateData);
                }

                subNode.onChange = function (value) {
                  if (subNode.bindedvalue) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([element], subNode.bindedvalue.split(' ').filter(function (css) {
                      return css;
                    }));
                  }

                  var newCss = classFunction(value);

                  if (newCss) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], newCss.split(' ').filter(function (css) {
                      return css;
                    }));
                  }

                  subNode.bindedvalue = newCss;
                };

                var className = classNameMatch[0].split(' ');

                for (var _i51 = 0; _i51 < className.length; _i51++) {
                  element.classList.remove(className[_i51]);
                }

                if (subNode.bindedvalue) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], subNode.bindedvalue.split(' ').filter(function (css) {
                    return css;
                  }));
                }

                _this107.updateContextData(listElement, subNode, isHeader);
              };

              for (var i = 0; i < resultantOutput.length; i++) {
                _loop6(i);
              }
            }
          }
        }, {
          key: "attributeProperty",
          value: function attributeProperty(element, listElement, isHeader) {
            var _this108 = this;

            var attributeNames = [];

            for (var i = 0; i < element.attributes.length; i++) {
              attributeNames.push(element.attributes[i].nodeName);
            }

            if (attributeNames.indexOf('class') !== -1) {
              attributeNames.splice(attributeNames.indexOf('class'), 1);
            }

            var _loop7 = function _loop7(_i52) {
              var attributeName = attributeNames[_i52];
              var attrNameMatch = new RegExp('\\${([^}]*)}', 'g').exec(attributeName) || [];
              var attrValueMatch = new RegExp('\\${([^}]*)}', 'g').exec(element.getAttribute(attributeName)) || [];
              var attributeNameFunction = void 0;
              var attributeValueFunction = void 0;

              if (attrNameMatch.length || attrValueMatch.length) {
                if (attrNameMatch[1]) {
                  // tslint:disable-next-line:no-function-constructor-with-string-args
                  attributeNameFunction = new Function('data', 'return ' + 'data.' + attrNameMatch[1]);
                }

                if (attrValueMatch[1]) {
                  if (attrValueMatch[1].indexOf('?') !== -1 && attrValueMatch[1].indexOf(':') !== -1) {
                    // tslint:disable-next-line:no-function-constructor-with-string-args
                    attributeValueFunction = new Function('data', 'return ' + attrValueMatch[1].replace(/\$/g, 'data.'));
                  } else {
                    // tslint:disable-next-line:no-function-constructor-with-string-args
                    attributeValueFunction = new Function('data', 'return ' + 'data.' + attrValueMatch[1]);
                  }
                }

                var subNode = {};

                if (isHeader) {
                  subNode.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(_this108.headerData), attrValueMatch[1] === undefined ? undefined : attributeValueFunction(_this108.headerData)];
                } else {
                  subNode.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(_this108.templateData), attrValueMatch[1] === undefined ? undefined : attributeValueFunction(_this108.templateData)];
                }

                subNode.attrName = subNode.bindedvalue[0] === undefined ? attributeName : subNode.bindedvalue[0];

                subNode.onChange = function (value) {
                  var bindedvalue = subNode.bindedvalue[1] === undefined ? element.getAttribute(subNode.attrName) : attributeValueFunction(value);
                  element.removeAttribute(subNode.attrName);
                  subNode.attrName = subNode.bindedvalue[0] === undefined ? subNode.attrName : attributeNameFunction(value);
                  element.setAttribute(subNode.attrName, bindedvalue);
                  subNode.bindedvalue = [subNode.bindedvalue[0] === undefined ? undefined : attributeNameFunction(value), subNode.bindedvalue[1] === undefined ? undefined : attributeValueFunction(value)];
                };

                var attributeValue = subNode.bindedvalue[1] === undefined ? element.getAttribute(attributeName) : subNode.bindedvalue[1];
                element.removeAttribute(attributeName);
                element.setAttribute(subNode.attrName, attributeValue);

                _this108.updateContextData(listElement, subNode, isHeader);
              }
            };

            for (var _i52 = 0; _i52 < attributeNames.length; _i52++) {
              _loop7(_i52);
            }
          }
        }, {
          key: "textProperty",
          value: function textProperty(element, listElement, isHeader) {
            var _this109 = this;

            var regex = new RegExp('\\${([^}]*)}', 'g');
            var resultantOutput = [];
            var regexMatch;

            while (regexMatch !== null) {
              var match = regex.exec(element.innerText);
              resultantOutput.push(match);
              regexMatch = match;

              if (regexMatch === null) {
                resultantOutput.pop();
              }
            }

            var isChildHasTextContent = Array.prototype.some.call(element.children, function (element) {
              if (new RegExp('\\${([^}]*)}', 'g').exec(element.innerText)) {
                return true;
              } else {
                return false;
              }
            });

            if (resultantOutput && resultantOutput.length && !isChildHasTextContent) {
              var _loop8 = function _loop8(i) {
                var textPropertyMatch = resultantOutput[i];
                var subNode = {};
                var textFunction = void 0;

                if (textPropertyMatch[1].indexOf('?') !== -1 && textPropertyMatch[1].indexOf(':') !== -1) {
                  // tslint:disable-next-line:no-function-constructor-with-string-args
                  textFunction = new Function('data', 'return ' + textPropertyMatch[1].replace(/\$/g, 'data.'));
                } else {
                  // tslint:disable-next-line:no-function-constructor-with-string-args
                  textFunction = new Function('data', 'return ' + 'data.' + textPropertyMatch[1]);
                }

                if (isHeader) {
                  subNode.bindedvalue = textFunction(_this109.headerData);
                } else {
                  subNode.bindedvalue = textFunction(_this109.templateData);
                }

                subNode.onChange = function (value) {
                  element.innerText = element.innerText.replace(subNode.bindedvalue, textFunction(value));
                  subNode.bindedvalue = textFunction(value);
                };

                element.innerText = element.innerText.replace(textPropertyMatch[0], subNode.bindedvalue);

                _this109.updateContextData(listElement, subNode, isHeader);
              };

              for (var i = 0; i < resultantOutput.length; i++) {
                _loop8(i);
              }
            }
          }
        }, {
          key: "reRenderUiVirtualization",
          value: function reRenderUiVirtualization() {
            this.wireScrollEvent(true);

            if (this.listViewInstance.contentContainer) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.listViewInstance.contentContainer);
            }

            this.listViewInstance.preRender(); // resetting the dom count to 0, to avoid edge case of dataSource suddenly becoming zero
            // and then manually adding item using addItem API

            this.domItemCount = 0;
            this.listViewInstance.header();
            this.listViewInstance.setLocalData();
          }
        }, {
          key: "updateUI",
          value: function updateUI(element, index, targetElement) {
            var onChange = this.isNgTemplate() ? this.onNgChange : this.onChange;

            if (this.listViewInstance.template || this.listViewInstance.groupTemplate) {
              var curViewDS = this.listViewInstance.curViewDS[index];
              element.dataset.uid = curViewDS[this.listViewInstance.fields.id] ? curViewDS[this.listViewInstance.fields.id].toString() : ListBase.generateId();
              onChange(curViewDS, element, this);
            } else {
              this.updateUiContent(element, index);
            }

            this.changeElementAttributes(element, index);

            if (targetElement) {
              this.listViewInstance.ulElement.insertBefore(element, targetElement);
            }
          }
        }, {
          key: "onNgChange",
          value: function onNgChange(newData, listElement, virtualThis) {
            // compile given target element with template for new data
            var templateCompiler = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(virtualThis.listViewInstance.template);
            var resultElement = templateCompiler(newData);

            while (listElement.lastChild) {
              listElement.removeChild(listElement.lastChild);
            }

            listElement.appendChild(resultElement[0]);
          }
        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'virtualization';
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.wireScrollEvent(true);
          }
        }]);

        return Virtualization;
      }();
      /**
       * Listview Component
       */

      /**
       * Listview Component
       */


      var __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var Sortable_1;
      /**
       * Sortable Module provides support to enable sortable functionality in Dom Elements.
       * ```html
       * <div id="sortable">
       *   <div>Item 1</div>
       *   <div>Item 2</div>
       *   <div>Item 3</div>
       *   <div>Item 4</div>
       *   <div>Item 5</div>
       * </div>
       * ```
       * ```typescript
       *   let ele: HTMLElement = document.getElementById('sortable');
       *   let sortObj: Sortable = new Sortable(ele, {});
       * ```
       */

      var Sortable = Sortable_1 = /*#__PURE__*/function (_syncfusion_ej2_base_25) {
        _inherits2(Sortable, _syncfusion_ej2_base_25);

        var _super35 = _createSuper(Sortable);

        function Sortable(element, options) {
          var _this110;

          _classCallCheck2(this, Sortable);

          _this110 = _super35.call(this, options, element);

          _this110.getHelper = function (e) {
            var target = _this110.getSortableElement(e.sender.target);

            if (!_this110.isValidTarget(target, _assertThisInitialized2(_this110))) {
              return false;
            }

            var element;

            if (_this110.helper) {
              element = _this110.helper({
                sender: target,
                element: e.element
              });
            } else {
              element = target.cloneNode(true);
              element.style.width = "".concat(target.offsetWidth, "px");
              element.style.height = "".concat(target.offsetHeight, "px");
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], ['e-sortableclone']);
            document.body.appendChild(element);
            return element;
          };

          _this110.onDrag = function (e) {
            _this110.trigger('drag', {
              event: e.event,
              element: _this110.element,
              target: e.target
            });

            var newInst = _this110.getSortableInstance(e.target);

            var target = _this110.getSortableElement(e.target, newInst);

            if ((_this110.isValidTarget(target, newInst) || e.target.className.indexOf('e-list-group-item') > -1) && _this110.curTarget !== target && (newInst.placeHolderElement ? newInst.placeHolderElement !== e.target : true)) {
              if (e.target.className.indexOf('e-list-group-item') > -1) {
                target = e.target;
              }

              _this110.curTarget = target;

              var oldIdx = _this110.getIndex(newInst.placeHolderElement, newInst);

              oldIdx = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldIdx) ? _this110.getIndex(_this110.target) : _this110.getIndex(target, newInst) < oldIdx || !oldIdx ? oldIdx : oldIdx - 1;
              newInst.placeHolderElement = _this110.getPlaceHolder(target, newInst);

              var newIdx = _this110.getIndex(target, newInst);

              var idx = newInst.element !== _this110.element ? newIdx : oldIdx < newIdx ? newIdx + 1 : newIdx;

              if (newInst.placeHolderElement) {
                if (e.target.className.indexOf('e-list-group-item') > -1) {
                  newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);
                } else if (newInst.element !== _this110.element && idx === newInst.element.childElementCount - 1) {
                  newInst.element.appendChild(newInst.placeHolderElement);
                } else {
                  newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[idx]);
                }

                _this110.refreshDisabled(oldIdx, newIdx, newInst);
              } else {
                _this110.updateItemClass(newInst);

                newInst.element.insertBefore(_this110.target, newInst.element.children[idx]);

                _this110.refreshDisabled(oldIdx, newIdx, newInst);

                _this110.curTarget = _this110.target;

                _this110.trigger('drop', {
                  droppedElement: _this110.target,
                  element: newInst.element,
                  previousIndex: oldIdx,
                  currentIndex: newIdx,
                  target: e.target,
                  helper: document.getElementsByClassName('e-sortableclone')[0],
                  event: e.event,
                  scope: _this110.scope
                });
              }
            }

            newInst = _this110.getSortableInstance(_this110.curTarget);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target) && e.target !== newInst.placeHolderElement) {
              if (_this110.isPlaceHolderPresent(newInst)) {
                _this110.removePlaceHolder(newInst);
              }
            } else {
              var placeHolders = [].slice.call(document.getElementsByClassName('e-sortable-placeholder'));
              var inst;
              placeHolders.forEach(function (placeHolder) {
                inst = _this110.getSortableInstance(placeHolder);

                if (inst.element && inst !== newInst) {
                  _this110.removePlaceHolder(inst);
                }
              });
            }
          };

          _this110.onDragStart = function (e) {
            _this110.target = _this110.getSortableElement(e.target);
            var cancelDrag = false;

            _this110.target.classList.add('e-grabbed');

            _this110.curTarget = _this110.target;
            e.helper = document.getElementsByClassName('e-sortableclone')[0];
            var args = {
              cancel: false,
              element: _this110.element,
              target: _this110.target
            };

            _this110.trigger('beforeDragStart', args, function (observedArgs) {
              if (observedArgs.cancel) {
                cancelDrag = observedArgs.cancel;

                _this110.onDragStop(e);
              }
            });

            if (cancelDrag) {
              return;
            }

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"]) {
              _this110.trigger('dragStart', {
                event: e.event,
                element: _this110.element,
                target: _this110.target,
                bindEvents: e.bindEvents,
                dragElement: e.dragElement
              });
            } else {
              _this110.trigger('dragStart', {
                event: e.event,
                element: _this110.element,
                target: _this110.target
              });
            }
          };

          _this110.onDragStop = function (e) {
            var dropInst = _this110.getSortableInstance(_this110.curTarget);

            var prevIdx;
            var curIdx;
            var handled;
            prevIdx = _this110.getIndex(_this110.target);

            if (_this110.isPlaceHolderPresent(dropInst)) {
              var _curIdx = _this110.getIndex(dropInst.placeHolderElement, dropInst);

              var args = {
                previousIndex: prevIdx,
                currentIndex: _curIdx,
                target: e.target,
                droppedElement: _this110.target,
                helper: e.helper,
                cancel: false,
                handled: false
              };

              _this110.trigger('beforeDrop', args, function (observedArgs) {
                if (!observedArgs.cancel) {
                  handled = observedArgs.handled;

                  _this110.updateItemClass(dropInst);

                  if (observedArgs.handled) {
                    var ele = _this110.target.cloneNode(true);

                    _this110.target.classList.remove('e-grabbed');

                    _this110.target = ele;
                  }

                  dropInst.element.insertBefore(_this110.target, dropInst.placeHolderElement);

                  var _curIdx2 = _this110.getIndex(_this110.target, dropInst);

                  prevIdx = _assertThisInitialized2(_this110) === dropInst && prevIdx - _curIdx2 > 1 ? prevIdx - 1 : prevIdx;

                  _this110.trigger('drop', {
                    event: e.event,
                    element: dropInst.element,
                    previousIndex: prevIdx,
                    currentIndex: _curIdx2,
                    target: e.target,
                    helper: e.helper,
                    droppedElement: _this110.target,
                    scopeName: _this110.scope,
                    handled: handled
                  });
                }

                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(dropInst.placeHolderElement);
              });
            }

            dropInst = _this110.getSortableInstance(e.target);
            curIdx = dropInst.element.childElementCount;
            prevIdx = _this110.getIndex(_this110.target);

            if (dropInst.element === e.target) {
              var beforeDropArgs = {
                previousIndex: prevIdx,
                currentIndex: curIdx,
                target: e.target,
                droppedElement: _this110.target,
                helper: e.helper,
                cancel: false
              };

              _this110.trigger('beforeDrop', beforeDropArgs, function (observedArgs) {
                if (!observedArgs.cancel) {
                  _this110.updateItemClass(dropInst);

                  dropInst.element.appendChild(_this110.target);

                  _this110.trigger('drop', {
                    event: e.event,
                    element: dropInst.element,
                    previousIndex: prevIdx,
                    currentIndex: curIdx,
                    target: e.target,
                    helper: e.helper,
                    droppedElement: _this110.target,
                    scopeName: _this110.scope
                  });
                }
              });
            }

            _this110.target.classList.remove('e-grabbed');

            _this110.target = null;
            _this110.curTarget = null;
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(e.helper);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(_this110.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Draggable"]).intDestroy(e.event);
          };

          _this110.bind();

          return _this110;
        }

        _createClass2(Sortable, [{
          key: "bind",
          value: function bind() {
            if (!this.element.id) {
              this.element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('sortable');
            }

            if (!this.itemClass) {
              this.itemClass = 'e-sort-item';
              this.dataBind();
            }

            this.initializeDraggable();
          }
        }, {
          key: "initializeDraggable",
          value: function initializeDraggable() {
            new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Draggable"](this.element, {
              helper: this.getHelper,
              dragStart: this.onDragStart,
              drag: this.onDrag,
              dragStop: this.onDragStop,
              dragTarget: ".".concat(this.itemClass),
              enableTapHold: true,
              tapHoldThreshold: 200,
              queryPositionInfo: this.queryPositionInfo
            });
          }
        }, {
          key: "getPlaceHolder",
          value: function getPlaceHolder(target, instance) {
            if (instance.placeHolder) {
              if (this.isPlaceHolderPresent(instance)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(instance.placeHolderElement);
              }

              instance.placeHolderElement = instance.placeHolder({
                element: instance.element,
                grabbedElement: this.target,
                target: target
              });
              instance.placeHolderElement.classList.add('e-sortable-placeholder');
              return instance.placeHolderElement;
            }

            return null;
          }
        }, {
          key: "isValidTarget",
          value: function isValidTarget(target, instance) {
            return target && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compareElementParent"])(target, instance.element) && target.classList.contains(instance.itemClass) && !target.classList.contains('e-disabled');
          }
        }, {
          key: "removePlaceHolder",
          value: function removePlaceHolder(instance) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(instance.placeHolderElement);
            instance.placeHolderElement = null;
          }
        }, {
          key: "updateItemClass",
          value: function updateItemClass(instance) {
            if (this !== instance) {
              this.target.classList.remove(this.itemClass);
              this.target.classList.add(instance.itemClass);
            }
          }
        }, {
          key: "getSortableInstance",
          value: function getSortableInstance(element) {
            element = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(element, ".e-".concat(this.getModuleName()));

            if (element) {
              var inst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(element, Sortable_1);
              return inst.scope && this.scope && inst.scope === this.scope ? inst : this;
            } else {
              return this;
            }
          }
        }, {
          key: "refreshDisabled",
          value: function refreshDisabled(oldIdx, newIdx, instance) {
            if (instance === this) {
              var element;
              var increased = oldIdx < newIdx;
              var disabledIdx;
              var start = increased ? oldIdx : newIdx;
              var end = increased ? newIdx : oldIdx;

              while (start <= end) {
                element = this.element.children[start];

                if (element.classList.contains('e-disabled')) {
                  disabledIdx = this.getIndex(element);
                  this.element.insertBefore(element, this.element.children[increased ? disabledIdx + 2 : disabledIdx - 1]);
                  start = increased ? disabledIdx + 2 : disabledIdx + 1;
                } else {
                  start++;
                }
              }
            }
          }
        }, {
          key: "getIndex",
          value: function getIndex(target) {
            var instance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
            var idx;
            [].slice.call(instance.element.children).forEach(function (element, index) {
              if (element === target) {
                idx = index;
              }
            });
            return idx;
          }
        }, {
          key: "getSortableElement",
          value: function getSortableElement(element) {
            var instance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(element, ".".concat(instance.itemClass));
          }
        }, {
          key: "queryPositionInfo",
          value: function queryPositionInfo(value) {
            value.left = pageXOffset ? "".concat(parseFloat(value.left) - pageXOffset, "px") : value.left;
            value.top = pageYOffset ? "".concat(parseFloat(value.top) - pageYOffset, "px") : value.top;
            return value;
          }
        }, {
          key: "isPlaceHolderPresent",
          value: function isPlaceHolderPresent(instance) {
            return instance.placeHolderElement && !!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(instance.placeHolderElement, "#".concat(instance.element.id));
          }
          /**
           * It is used to sort array of elements from source element to destination element.
           * @param destination - Defines the destination element to which the sortable elements needs to be appended.
           * If it is null, then the Sortable library element will be considered as destination.
           * @param targetIndexes - Specifies the sortable elements indexes which needs to be sorted.
           * @param insertBefore - Specifies the index before which the sortable elements needs to be appended.
           * If it is null, elements will be appended as last child.
           * @method moveTo
           * @return {void}
           */

        }, {
          key: "moveTo",
          value: function moveTo(destination, targetIndexes, insertBefore) {
            _moveTo(this.element, destination, targetIndexes, insertBefore);
          }
          /**
           * It is used to destroy the Sortable library.
           */

        }, {
          key: "destroy",
          value: function destroy() {
            if (this.itemClass === 'e-sort-item') {
              this.itemClass = null;
              this.dataBind();
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Draggable"]).destroy();

            _get2(_getPrototypeOf2(Sortable.prototype), "destroy", this).call(this);
          }
        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'sortable';
          }
        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i53 = 0, _Object$keys17 = Object.keys(newProp); _i53 < _Object$keys17.length; _i53++) {
              var prop = _Object$keys17[_i53];

              switch (prop) {
                case 'itemClass':
                  [].slice.call(this.element.children).forEach(function (element) {
                    if (element.classList.contains(oldProp.itemClass)) {
                      element.classList.remove(oldProp.itemClass);
                    }

                    if (newProp.itemClass) {
                      element.classList.add(newProp.itemClass);
                    }
                  });
                  break;
              }
            }
          }
        }]);

        return Sortable;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Base"]);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Sortable.prototype, "enableAnimation", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Sortable.prototype, "itemClass", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Sortable.prototype, "scope", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Sortable.prototype, "helper", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Sortable.prototype, "placeHolder", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sortable.prototype, "drag", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sortable.prototype, "beforeDragStart", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sortable.prototype, "dragStart", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sortable.prototype, "beforeDrop", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Sortable.prototype, "drop", void 0);

      Sortable = Sortable_1 = __decorate$1([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Sortable);
      /**
       * It is used to sort array of elements from source element to destination element.
       * @private
       */

      function _moveTo(from, to, targetIndexes, insertBefore) {
        var targetElements = [];

        if (!to) {
          to = from;
        }

        if (targetIndexes && targetIndexes.length) {
          targetIndexes.forEach(function (index) {
            targetElements.push(from.children[index]);
          });
        } else {
          targetElements = [].slice.call(from.children);
        }

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(insertBefore)) {
          targetElements.forEach(function (target) {
            to.appendChild(target);
          });
        } else {
          var insertElement = to.children[insertBefore];
          targetElements.forEach(function (target) {
            to.insertBefore(target, insertElement);
          });
        }
      }
      /**
       * Sortable Module
       */

      /**
       * List Components
       */
      //# sourceMappingURL=ej2-lists.es2015.js.map

      /***/

    },

    /***/
    "8D7W":
    /*!******************************************!*\
      !*** ./src/app/pages/pages.component.ts ***!
      \******************************************/

    /*! exports provided: PagesComponent */

    /***/
    function D7W(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PagesComponent", function () {
        return PagesComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _themes_sidebar_sidebar_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../themes/sidebar/sidebar.component */
      "KunY");
      /* harmony import */


      var _themes_header_header_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../themes/header/header.component */
      "aNU0");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _themes_footer_footer_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../themes/footer/footer.component */
      "dVhd");

      var PagesComponent = /*#__PURE__*/function () {
        function PagesComponent() {
          _classCallCheck2(this, PagesComponent);
        }

        _createClass2(PagesComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
        }]);

        return PagesComponent;
      }();

      PagesComponent.ɵfac = function PagesComponent_Factory(t) {
        return new (t || PagesComponent)();
      };

      PagesComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: PagesComponent,
        selectors: [["app-pages"]],
        decls: 8,
        vars: 0,
        consts: [[1, "wrapper"], [1, "sidebar-wrapper"], [1, "main-panel"], [1, "content"]],
        template: function PagesComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "app-sidebar");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "app-header");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](6, "router-outlet");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](7, "app-footer");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }
        },
        directives: [_themes_sidebar_sidebar_component__WEBPACK_IMPORTED_MODULE_1__["SidebarComponent"], _themes_header_header_component__WEBPACK_IMPORTED_MODULE_2__["HeaderComponent"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterOutlet"], _themes_footer_footer_component__WEBPACK_IMPORTED_MODULE_4__["FooterComponent"]],
        styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3BhZ2VzLmNvbXBvbmVudC5zY3NzIn0= */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PagesComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-pages',
            templateUrl: './pages.component.html',
            styleUrls: ['./pages.component.scss']
          }]
        }], function () {
          return [];
        }, null);
      })();
      /***/

    },

    /***/
    "Aw0i":
    /*!**********************************************************************!*\
      !*** ./src/app/pages/leave-management/leave-management.component.ts ***!
      \**********************************************************************/

    /*! exports provided: LeaveManagementComponent */

    /***/
    function Aw0i(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LeaveManagementComponent", function () {
        return LeaveManagementComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");

      var LeaveManagementComponent = /*#__PURE__*/function () {
        function LeaveManagementComponent() {
          _classCallCheck2(this, LeaveManagementComponent);
        }

        _createClass2(LeaveManagementComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
        }]);

        return LeaveManagementComponent;
      }();

      LeaveManagementComponent.ɵfac = function LeaveManagementComponent_Factory(t) {
        return new (t || LeaveManagementComponent)();
      };

      LeaveManagementComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: LeaveManagementComponent,
        selectors: [["app-leave-management"]],
        decls: 1,
        vars: 0,
        template: function LeaveManagementComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "router-outlet");
          }
        },
        directives: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterOutlet"]],
        styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2xlYXZlLW1hbmFnZW1lbnQvbGVhdmUtbWFuYWdlbWVudC5jb21wb25lbnQuc2NzcyJ9 */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](LeaveManagementComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-leave-management',
            templateUrl: './leave-management.component.html',
            styleUrls: ['./leave-management.component.scss']
          }]
        }], function () {
          return [];
        }, null);
      })();
      /***/

    },

    /***/
    "H552":
    /*!***********************************************************************!*\
      !*** ./node_modules/@syncfusion/ej2-data/dist/es6/ej2-data.es2015.js ***!
      \***********************************************************************/

    /*! exports provided: DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CacheAdaptor, DataUtil */

    /***/
    function H552(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DataManager", function () {
        return DataManager;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Deferred", function () {
        return Deferred;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Query", function () {
        return Query;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Predicate", function () {
        return Predicate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Adaptor", function () {
        return Adaptor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "JsonAdaptor", function () {
        return JsonAdaptor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "UrlAdaptor", function () {
        return UrlAdaptor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ODataAdaptor", function () {
        return ODataAdaptor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ODataV4Adaptor", function () {
        return ODataV4Adaptor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "WebApiAdaptor", function () {
        return WebApiAdaptor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "WebMethodAdaptor", function () {
        return WebMethodAdaptor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RemoteSaveAdaptor", function () {
        return RemoteSaveAdaptor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CacheAdaptor", function () {
        return CacheAdaptor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DataUtil", function () {
        return DataUtil;
      });
      /* harmony import */


      var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @syncfusion/ej2-base */
      "4SUy");
      /**
       * Query class is used to build query which is used by the DataManager to communicate with datasource.
       */


      var Query = /*#__PURE__*/function () {
        /**
         * Constructor for Query class.
         * @param  {string|string[]} from?
         * @hidden
         */
        function Query(from) {
          _classCallCheck2(this, Query);

          /** @hidden */
          this.subQuery = null;
          /** @hidden */

          this.isChild = false;
          /** @hidden */

          this.distincts = [];
          this.queries = [];
          this.key = '';
          this.fKey = '';

          if (typeof from === 'string') {
            this.fromTable = from;
          } else if (from && from instanceof Array) {
            this.lookups = from;
          }

          this.expands = [];
          this.sortedColumns = [];
          this.groupedColumns = [];
          this.subQuery = null;
          this.isChild = false;
          this.params = [];
          return this;
        }
        /**
         * Sets the primary key.
         * @param  {string} field - Defines the column field.
         */


        _createClass2(Query, [{
          key: "setKey",
          value: function setKey(field) {
            this.key = field;
            return this;
          }
          /**
           * Sets default DataManager to execute query.
           * @param  {DataManager} dataManager - Defines the DataManager.
           */

        }, {
          key: "using",
          value: function using(dataManager) {
            this.dataManager = dataManager;
            return this;
          }
          /**
           * Executes query with the given DataManager.
           * @param  {DataManager} dataManager - Defines the DataManager.
           * @param  {Function} done - Defines the success callback.
           * @param  {Function} fail - Defines the failure callback.
           * @param  {Function} always - Defines the callback which will be invoked on either success or failure.
           *
           * <pre>
           * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);
           * let query: Query = new Query();
           * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });
           * let promise: Promise< Object > = query.execute(dataManager);
           * promise.then((e: { result: Object }) => { });
           * </pre>
           */

        }, {
          key: "execute",
          value: function execute(dataManager, done, fail, always) {
            dataManager = dataManager || this.dataManager;

            if (dataManager) {
              return dataManager.executeQuery(this, done, fail, always);
            }

            return DataUtil.throwError('Query - execute() : dataManager needs to be is set using "using" function or should be passed as argument');
          }
          /**
           * Executes query with the local datasource.
           * @param  {DataManager} dataManager - Defines the DataManager.
           */

        }, {
          key: "executeLocal",
          value: function executeLocal(dataManager) {
            dataManager = dataManager || this.dataManager;

            if (dataManager) {
              return dataManager.executeLocal(this);
            }

            return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using "using" function or should be passed as argument');
          }
          /**
           * Creates deep copy of the Query object.
           */

        }, {
          key: "clone",
          value: function clone() {
            var cloned = new Query();
            cloned.queries = this.queries.slice(0);
            cloned.key = this.key;
            cloned.isChild = this.isChild;
            cloned.dataManager = this.dataManager;
            cloned.fromTable = this.fromTable;
            cloned.params = this.params.slice(0);
            cloned.expands = this.expands.slice(0);
            cloned.sortedColumns = this.sortedColumns.slice(0);
            cloned.groupedColumns = this.groupedColumns.slice(0);
            cloned.subQuerySelector = this.subQuerySelector;
            cloned.subQuery = this.subQuery;
            cloned.fKey = this.fKey;
            cloned.isCountRequired = this.isCountRequired;
            cloned.distincts = this.distincts.slice(0);
            return cloned;
          }
          /**
           * Specifies the name of table to retrieve data in query execution.
           * @param  {string} tableName - Defines the table name.
           */

        }, {
          key: "from",
          value: function from(tableName) {
            this.fromTable = tableName;
            return this;
          }
          /**
           * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.
           * @param  {string} key - Defines the key of additional parameter.
           * @param  {Function|string} value - Defines the value for the key.
           */

        }, {
          key: "addParams",
          value: function addParams(key, value) {
            if (typeof value === 'function') {
              this.params.push({
                key: key,
                fn: value
              });
            } else {
              this.params.push({
                key: key,
                value: value
              });
            }

            return this;
          }
          /**
           * @hidden
           */

        }, {
          key: "distinct",
          value: function distinct(fields) {
            if (typeof fields === 'string') {
              this.distincts = [].slice.call([fields], 0);
            } else {
              this.distincts = fields.slice(0);
            }

            return this;
          }
          /**
           * Expands the related table.
           * @param  {string|Object[]} tables
           */

        }, {
          key: "expand",
          value: function expand(tables) {
            if (typeof tables === 'string') {
              this.expands = [].slice.call([tables], 0);
            } else {
              this.expands = tables.slice(0);
            }

            return this;
          }
          /**
           * Filter data with given filter criteria.
           * @param  {string|Predicate} fieldName - Defines the column field or Predicate.
           * @param  {string} operator - Defines the operator how to filter data.
           * @param  {string|number|boolean} value - Defines the values to match with data.
           * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else
           * filter data with case insensitive.
           */

        }, {
          key: "where",
          value: function where(fieldName, operator, value, ignoreCase, ignoreAccent) {
            operator = operator ? operator.toLowerCase() : null;
            var predicate = null;

            if (typeof fieldName === 'string') {
              predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);
            } else if (fieldName instanceof Predicate) {
              predicate = fieldName;
            }

            this.queries.push({
              fn: 'onWhere',
              e: predicate
            });
            return this;
          }
          /**
           * Search data with given search criteria.
           * @param  {string|number|boolean} searchKey - Defines the search key.
           * @param  {string|string[]} fieldNames - Defines the collection of column fields.
           * @param  {string} operator - Defines the operator how to search data.
           * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else
           * filter data with case insensitive.
           */

        }, {
          key: "search",
          value: function search(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {
            if (typeof fieldNames === 'string') {
              fieldNames = [fieldNames];
            }

            if (!operator || operator === 'none') {
              operator = 'contains';
            }

            var comparer = DataUtil.fnOperators[operator];
            this.queries.push({
              fn: 'onSearch',
              e: {
                fieldNames: fieldNames,
                operator: operator,
                searchKey: searchKey,
                ignoreCase: ignoreCase,
                ignoreAccent: ignoreAccent,
                comparer: comparer
              }
            });
            return this;
          }
          /**
           * Sort the data with given sort criteria.
           * By default, sort direction is ascending.
           * @param  {string|string[]} fieldName - Defines the single or collection of column fields.
           * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.
           */

        }, {
          key: "sortBy",
          value: function sortBy(fieldName, comparer, isFromGroup) {
            var order = 'ascending';
            var sorts;
            var temp;

            if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {
              fieldName = fieldName.replace(/ desc$/i, '');
              comparer = 'descending';
            }

            if (!comparer || typeof comparer === 'string') {
              order = comparer ? comparer.toLowerCase() : 'ascending';
              comparer = DataUtil.fnSort(comparer);
            }

            if (isFromGroup) {
              sorts = Query.filterQueries(this.queries, 'onSortBy');

              for (var i = 0; i < sorts.length; i++) {
                temp = sorts[i].e.fieldName;

                if (typeof temp === 'string') {
                  if (temp === fieldName) {
                    return this;
                  }
                } else if (temp instanceof Array) {
                  for (var j = 0; j < temp.length; j++) {
                    if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {
                      return this;
                    }
                  }
                }
              }
            }

            this.queries.push({
              fn: 'onSortBy',
              e: {
                fieldName: fieldName,
                comparer: comparer,
                direction: order
              }
            });
            return this;
          }
          /**
           * Sorts data in descending order.
           * @param  {string} fieldName - Defines the column field.
           */

        }, {
          key: "sortByDesc",
          value: function sortByDesc(fieldName) {
            return this.sortBy(fieldName, 'descending');
          }
          /**
           * Groups data with the given field name.
           * @param  {string} fieldName - Defines the column field.
           */

        }, {
          key: "group",
          value: function group(fieldName, fn, format) {
            this.sortBy(fieldName, null, true);
            this.queries.push({
              fn: 'onGroup',
              e: {
                fieldName: fieldName,
                comparer: fn ? fn : null,
                format: format ? format : null
              }
            });
            return this;
          }
          /**
           * Gets data based on the given page index and size.
           * @param  {number} pageIndex - Defines the current page index.
           * @param  {number} pageSize - Defines the no of records per page.
           */

        }, {
          key: "page",
          value: function page(pageIndex, pageSize) {
            this.queries.push({
              fn: 'onPage',
              e: {
                pageIndex: pageIndex,
                pageSize: pageSize
              }
            });
            return this;
          }
          /**
           * Gets data based on the given start and end index.
           * @param  {number} start - Defines the start index of the datasource.
           * @param  {number} end - Defines the end index of the datasource.
           */

        }, {
          key: "range",
          value: function range(start, end) {
            this.queries.push({
              fn: 'onRange',
              e: {
                start: start,
                end: end
              }
            });
            return this;
          }
          /**
           * Gets data from the top of the data source based on given number of records count.
           * @param  {number} nos - Defines the no of records to retrieve from datasource.
           */

        }, {
          key: "take",
          value: function take(nos) {
            this.queries.push({
              fn: 'onTake',
              e: {
                nos: nos
              }
            });
            return this;
          }
          /**
           * Skips data with given number of records count from the top of the data source.
           * @param  {number} nos - Defines the no of records skip in the datasource.
           */

        }, {
          key: "skip",
          value: function skip(nos) {
            this.queries.push({
              fn: 'onSkip',
              e: {
                nos: nos
              }
            });
            return this;
          }
          /**
           * Selects specified columns from the data source.
           * @param  {string|string[]} fieldNames - Defines the collection of column fields.
           */

        }, {
          key: "select",
          value: function select(fieldNames) {
            if (typeof fieldNames === 'string') {
              fieldNames = [].slice.call([fieldNames], 0);
            }

            this.queries.push({
              fn: 'onSelect',
              e: {
                fieldNames: fieldNames
              }
            });
            return this;
          }
          /**
           * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.
           * @param  {Query} query - Defines the query to relate two tables.
           * @param  {Function} selectorFn - Defines the custom function to select records.
           */

        }, {
          key: "hierarchy",
          value: function hierarchy(query, selectorFn) {
            this.subQuerySelector = selectorFn;
            this.subQuery = query;
            return this;
          }
          /**
           * Sets the foreign key which is used to get data from the related table.
           * @param  {string} key - Defines the foreign key.
           */

        }, {
          key: "foreignKey",
          value: function foreignKey(key) {
            this.fKey = key;
            return this;
          }
          /**
           * It is used to get total number of records in the DataManager execution result.
           */

        }, {
          key: "requiresCount",
          value: function requiresCount() {
            this.isCountRequired = true;
            return this;
          } //type - sum, avg, min, max

          /**
           * Aggregate the data with given type and field name.
           * @param  {string} type - Defines the aggregate type.
           * @param  {string} field - Defines the column field to aggregate.
           */

        }, {
          key: "aggregate",
          value: function aggregate(type, field) {
            this.queries.push({
              fn: 'onAggregates',
              e: {
                field: field,
                type: type
              }
            });
            return this;
          }
          /**
           * Pass array of filterColumn query for performing filter operation.
           * @param  {QueryOptions[]} queries
           * @param  {string} name
           * @hidden
           */

        }], [{
          key: "filterQueries",
          value: function filterQueries(queries, name) {
            return queries.filter(function (q) {
              return q.fn === name;
            });
          }
          /**
           * To get the list of queries which is already filtered in current data source.
           * @param  {Object[]} queries
           * @param  {string[]} singles
           * @hidden
           */

        }, {
          key: "filterQueryLists",
          value: function filterQueryLists(queries, singles) {
            var filtered = queries.filter(function (q) {
              return singles.indexOf(q.fn) !== -1;
            });
            var res = {};

            for (var i = 0; i < filtered.length; i++) {
              if (!res[filtered[i].fn]) {
                res[filtered[i].fn] = filtered[i].e;
              }
            }

            return res;
          }
        }]);

        return Query;
      }();
      /**
       * Predicate class is used to generate complex filter criteria.
       * This will be used by DataManager to perform multiple filtering operation.
       */


      var Predicate = /*#__PURE__*/function () {
        /**
         * Constructor for Predicate class.
         * @param  {string|Predicate} field
         * @param  {string} operator
         * @param  {string|number|boolean|Predicate|Predicate[]} value
         * @param  {boolean=false} ignoreCase
         * @hidden
         */
        function Predicate(field, operator, value) {
          var ignoreCase = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
          var ignoreAccent = arguments.length > 4 ? arguments[4] : undefined;

          _classCallCheck2(this, Predicate);

          /** @hidden */
          this.ignoreAccent = false;
          /** @hidden */

          this.isComplex = false;

          if (typeof field === 'string') {
            this.field = field;
            this.operator = operator.toLowerCase();
            this.value = value;
            this.ignoreCase = ignoreCase;
            this.ignoreAccent = ignoreAccent;
            this.isComplex = false;
            this.comparer = DataUtil.fnOperators.processOperator(this.operator);
          } else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {
            this.isComplex = true;
            this.condition = operator.toLowerCase();
            this.predicates = [field];

            if (value instanceof Array) {
              [].push.apply(this.predicates, value);
            } else {
              this.predicates.push(value);
            }
          }

          return this;
        }
        /**
         * Adds n-number of new predicates on existing predicate with “and” condition.
         * @param  {Object[]} args - Defines the collection of predicates.
         */


        _createClass2(Predicate, [{
          key: "and",

          /**
           * Adds new predicate on existing predicate with “and” condition.
           * @param  {string} field - Defines the column field.
           * @param  {string} operator - Defines the operator how to filter data.
           * @param  {string} value - Defines the values to match with data.
           * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else
           * filter data with case insensitive.
           */
          value: function and(field, operator, value, ignoreCase, ignoreAccent) {
            return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);
          }
          /**
           * Adds n-number of new predicates on existing predicate with “or” condition.
           * @param  {Object[]} args - Defines the collection of predicates.
           */

        }, {
          key: "or",

          /**
           * Adds new predicate on existing predicate with “or” condition.
           * @param  {string} field - Defines the column field.
           * @param  {string} operator - Defines the operator how to filter data.
           * @param  {string} value - Defines the values to match with data.
           * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else
           * filter data with case insensitive.
           */
          value: function or(field, operator, value, ignoreCase, ignoreAccent) {
            return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);
          }
          /**
           * Converts plain JavaScript object to Predicate object.
           * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.
           */

        }, {
          key: "validate",

          /**
           * Validate the record based on the predicates.
           * @param  {Object} record - Defines the datasource record.
           */
          value: function validate(record) {
            var predicate = this.predicates ? this.predicates : [];
            var isAnd;
            var ret;

            if (!this.isComplex && this.comparer) {
              return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);
            }

            isAnd = this.condition === 'and';

            for (var i = 0; i < predicate.length; i++) {
              ret = predicate[i].validate(record);

              if (isAnd) {
                if (!ret) {
                  return false;
                }
              } else {
                if (ret) {
                  return true;
                }
              }
            }

            return isAnd;
          }
          /**
           * Converts predicates to plain JavaScript.
           * This method is uses Json stringify when serializing Predicate object.
           */

        }, {
          key: "toJson",
          value: function toJson() {
            var predicates;
            var p;

            if (this.isComplex) {
              predicates = [];
              p = this.predicates;

              for (var i = 0; i < p.length; i++) {
                predicates.push(p[i].toJson());
              }
            }

            return {
              isComplex: this.isComplex,
              field: this.field,
              operator: this.operator,
              value: this.value,
              ignoreCase: this.ignoreCase,
              ignoreAccent: this.ignoreAccent,
              condition: this.condition,
              predicates: predicates
            };
          }
        }], [{
          key: "and",
          value: function and() {
            for (var _len6 = arguments.length, args = new Array(_len6), _key5 = 0; _key5 < _len6; _key5++) {
              args[_key5] = arguments[_key5];
            }

            return Predicate.combinePredicates([].slice.call(args, 0), 'and');
          }
        }, {
          key: "or",
          value: function or() {
            for (var _len7 = arguments.length, args = new Array(_len7), _key6 = 0; _key6 < _len7; _key6++) {
              args[_key6] = arguments[_key6];
            }

            return Predicate.combinePredicates([].slice.call(args, 0), 'or');
          }
        }, {
          key: "fromJson",
          value: function fromJson(json) {
            if (json instanceof Array) {
              var res = [];

              for (var i = 0, len = json.length; i < len; i++) {
                res.push(this.fromJSONData(json[i]));
              }

              return res;
            }

            var pred = json;
            return this.fromJSONData(pred);
          }
        }, {
          key: "combinePredicates",
          value: function combinePredicates(predicates, operator) {
            if (predicates.length === 1) {
              if (!(predicates[0] instanceof Array)) {
                return predicates[0];
              }

              predicates = predicates[0];
            }

            return new Predicate(predicates[0], operator, predicates.slice(1));
          }
        }, {
          key: "combine",
          value: function combine(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {
            if (field instanceof Predicate) {
              return Predicate[condition](pred, field);
            }

            if (typeof field === 'string') {
              return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));
            }

            return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');
          }
        }, {
          key: "fromJSONData",
          value: function fromJSONData(json) {
            var preds = json.predicates || [];
            var len = preds.length;
            var predicates = [];
            var result;

            for (var i = 0; i < len; i++) {
              predicates.push(this.fromJSONData(preds[i]));
            }

            if (!json.isComplex) {
              result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);
            } else {
              result = new Predicate(predicates[0], json.condition, predicates.slice(1));
            }

            return result;
          }
        }]);

        return Predicate;
      }();

      var consts = {
        GroupGuid: '{271bbba0-1ee7}'
      };
      /**
       * Data manager common utility methods.
       * @hidden
       */

      var DataUtil = /*#__PURE__*/function () {
        function DataUtil() {
          _classCallCheck2(this, DataUtil);
        }

        _createClass2(DataUtil, null, [{
          key: "getValue",

          /**
           * Returns the value by invoking the provided parameter function.
           * If the paramater is not of type function then it will be returned as it is.
           * @param  {Function|string|string[]|number} value
           * @param  {Object} inst?
           * @hidden
           */
          value: function getValue(value, inst) {
            if (typeof value === 'function') {
              return value.call(inst || {});
            }

            return value;
          }
          /**
           * Returns true if the input string ends with given string.
           * @param  {string} input
           * @param  {string} substr
           */

        }, {
          key: "endsWith",
          value: function endsWith(input, substr) {
            return input.slice && input.slice(-substr.length) === substr;
          }
          /**
           * Returns true if the input string starts with given string.
           * @param  {string} str
           * @param  {string} startstr
           */

        }, {
          key: "startsWith",
          value: function startsWith(input, start) {
            return input.slice(0, start.length) === start;
          }
          /**
           * To return the sorting function based on the string.
           * @param  {string} order
           * @hidden
           */

        }, {
          key: "fnSort",
          value: function fnSort(order) {
            order = order ? DataUtil.toLowerCase(order) : 'ascending';

            if (order === 'ascending') {
              return this.fnAscending;
            }

            return this.fnDescending;
          }
          /**
           * Comparer function which is used to sort the data in ascending order.
           * @param  {string|number} x
           * @param  {string|number} y
           * @returns number
           */

        }, {
          key: "fnAscending",
          value: function fnAscending(x, y) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(x) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(y)) {
              return -1;
            }

            if (y === null || y === undefined) {
              return -1;
            }

            if (typeof x === 'string') {
              return x.localeCompare(y);
            }

            if (x === null || x === undefined) {
              return 1;
            }

            return x - y;
          }
          /**
           * Comparer function which is used to sort the data in descending order.
           * @param  {string|number} x
           * @param  {string|number} y
           * @returns number
           */

        }, {
          key: "fnDescending",
          value: function fnDescending(x, y) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(x) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(y)) {
              return -1;
            }

            if (y === null || y === undefined) {
              return 1;
            }

            if (typeof x === 'string') {
              return x.localeCompare(y) * -1;
            }

            if (x === null || x === undefined) {
              return -1;
            }

            return y - x;
          }
        }, {
          key: "extractFields",
          value: function extractFields(obj, fields) {
            var newObj = {};

            for (var i = 0; i < fields.length; i++) {
              newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);
            }

            return newObj;
          }
          /**
           * Select objects by given fields from jsonArray.
           * @param  {Object[]} jsonArray
           * @param  {string[]} fields
           */

        }, {
          key: "select",
          value: function select(jsonArray, fields) {
            var newData = [];

            for (var i = 0; i < jsonArray.length; i++) {
              newData.push(this.extractFields(jsonArray[i], fields));
            }

            return newData;
          }
          /**
           * Group the input data based on the field name.
           * It also performs aggregation of the grouped records based on the aggregates paramater.
           * @param  {Object[]} jsonArray
           * @param  {string} field?
           * @param  {Object[]} agg?
           * @param  {number} level?
           * @param  {Object[]} groupDs?
           */

        }, {
          key: "group",
          value: function group(jsonArray, field, aggregates, level, groupDs, format) {
            var _this111 = this;

            level = level || 1;
            var jsonData = jsonArray;
            var guid = 'GroupGuid';

            if (jsonData.GroupGuid === consts[guid]) {
              var _loop9 = function _loop9(j) {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(groupDs)) {
                  var indx = -1;
                  var temp = groupDs.filter(function (e) {
                    return e.key === jsonData[j].key;
                  });
                  indx = groupDs.indexOf(temp[0]);
                  jsonData[j].items = _this111.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format);
                  jsonData[j].count = groupDs[indx].count;
                } else {
                  jsonData[j].items = _this111.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format);
                  jsonData[j].count = jsonData[j].items.length;
                }
              };

              for (var j = 0; j < jsonData.length; j++) {
                _loop9(j);
              }

              jsonData.childLevels += 1;
              return jsonData;
            }

            var grouped = {};
            var groupedArray = [];
            groupedArray.GroupGuid = consts[guid];
            groupedArray.level = level;
            groupedArray.childLevels = 0;
            groupedArray.records = jsonData;

            var _loop10 = function _loop10(i) {
              var val = _this111.getVal(jsonData, i, field);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(format)) {
                val = format(val, field);
              }

              if (!grouped[val]) {
                grouped[val] = {
                  key: val,
                  count: 0,
                  items: [],
                  aggregates: {},
                  field: field
                };
                groupedArray.push(grouped[val]);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(groupDs)) {
                  var tempObj = groupDs.filter(function (e) {
                    return e.key === grouped[val].key;
                  });
                  grouped[val].count = tempObj[0].count;
                }
              }

              grouped[val].count = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(groupDs) ? grouped[val].count : grouped[val].count += 1;
              grouped[val].items.push(jsonData[i]);
            };

            for (var i = 0; i < jsonData.length; i++) {
              _loop10(i);
            }

            if (aggregates && aggregates.length) {
              var _loop11 = function _loop11(_i54) {
                var res = {};
                var fn = void 0;
                var aggs = aggregates;

                for (var _j = 0; _j < aggregates.length; _j++) {
                  fn = DataUtil.aggregates[aggregates[_j].type];

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(groupDs)) {
                    var temp = groupDs.filter(function (e) {
                      return e.key === groupedArray[_i54].key;
                    });

                    if (fn) {
                      res[aggs[_j].field + ' - ' + aggs[_j].type] = fn(temp[0].items, aggs[_j].field);
                    }
                  } else {
                    if (fn) {
                      res[aggs[_j].field + ' - ' + aggs[_j].type] = fn(groupedArray[_i54].items, aggs[_j].field);
                    }
                  }
                }

                groupedArray[_i54].aggregates = res;
              };

              for (var _i54 = 0; _i54 < groupedArray.length; _i54++) {
                _loop11(_i54);
              }
            }

            return jsonData.length && groupedArray || jsonData;
          }
          /**
           * It is used to categorize the multiple items based on a specific field in jsonArray.
           * The hierarchical queries are commonly required when you use foreign key binding.
           * @param  {string} fKey
           * @param  {string} from
           * @param  {Object[]} source
           * @param  {Group} lookup?
           * @param  {string} pKey?
           * @hidden
           */

        }, {
          key: "buildHierarchy",
          value: function buildHierarchy(fKey, from, source, lookup, pKey) {
            var i;
            var grp = {};
            var temp;

            if (lookup.result) {
              lookup = lookup.result;
            }

            if (lookup.GroupGuid) {
              this.throwError('DataManager: Do not have support Grouping in hierarchy');
            }

            for (i = 0; i < lookup.length; i++) {
              var fKeyData = this.getObject(fKey, lookup[i]);
              temp = grp[fKeyData] || (grp[fKeyData] = []);
              temp.push(lookup[i]);
            }

            for (i = 0; i < source.length; i++) {
              var _fKeyData = this.getObject(pKey || fKey, source[i]);

              source[i][from] = grp[_fKeyData];
            }
          }
          /**
           * The method used to get the field names which started with specified characters.
           * @param  {Object} obj
           * @param  {string[]} fields?
           * @param  {string} prefix?
           * @hidden
           */

        }, {
          key: "getFieldList",
          value: function getFieldList(obj, fields, prefix) {
            if (prefix === undefined) {
              prefix = '';
            }

            if (fields === undefined || fields === null) {
              return this.getFieldList(obj, [], prefix);
            }

            var copyObj = obj;
            var keys = Object.keys(obj);

            for (var _i55 = 0, _keys12 = keys; _i55 < _keys12.length; _i55++) {
              var prop = _keys12[_i55];

              if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {
                this.getFieldList(copyObj[prop], fields, prefix + prop + '.');
              } else {
                fields.push(prefix + prop);
              }
            }

            return fields;
          }
          /**
           * Gets the value of the property in the given object.
           * The complex object can be accessed by providing the field names concatenated with dot(.).
           * @param  {string} nameSpace - The name of the property to be accessed.
           * @param  {Object} from - Defines the source object.
           */

        }, {
          key: "getObject",
          value: function getObject(nameSpace, from) {
            if (!nameSpace) {
              return from;
            }

            if (!from) {
              return undefined;
            }

            if (nameSpace.indexOf('.') === -1) {
              return from[nameSpace];
            }

            var value = from;
            var splits = nameSpace.split('.');

            for (var i = 0; i < splits.length; i++) {
              if (value == null) {
                break;
              }

              value = value[splits[i]];
            }

            return value;
          }
          /**
           * To set value for the nameSpace in desired object.
           * @param {string} nameSpace - String value to the get the inner object.
           * @param {Object} value - Value that you need to set.
           * @param {Object} obj - Object to get the inner object value.
           * @return { [key: string]: Object; } | Object
           * @hidden
           */

        }, {
          key: "setValue",
          value: function setValue(nameSpace, value, obj) {
            var keys = nameSpace.toString().split('.');
            var start = obj || {};
            var fromObj = start;
            var i;
            var length = keys.length;
            var key;

            for (i = 0; i < length; i++) {
              key = keys[i];

              if (i + 1 === length) {
                fromObj[key] = value === undefined ? undefined : value;
              } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fromObj[key])) {
                fromObj[key] = {};
              }

              fromObj = fromObj[key];
            }

            return start;
          }
          /**
           * Sort the given data based on the field and comparer.
           * @param  {Object[]} ds - Defines the input data.
           * @param  {string} field - Defines the field to be sorted.
           * @param  {Function} comparer - Defines the comparer function used to sort the records.
           */

        }, {
          key: "sort",
          value: function sort(ds, field, comparer) {
            if (ds.length <= 1) {
              return ds;
            }

            var middle = parseInt((ds.length / 2).toString(), 10);
            var left = ds.slice(0, middle);
            var right = ds.slice(middle);
            left = this.sort(left, field, comparer);
            right = this.sort(right, field, comparer);
            return this.merge(left, right, field, comparer);
          }
        }, {
          key: "ignoreDiacritics",
          value: function ignoreDiacritics(value) {
            if (typeof value !== 'string') {
              return value;
            }

            var result = value.split('');
            var newValue = result.map(function (temp) {
              return temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp;
            });
            return newValue.join('');
          }
        }, {
          key: "merge",
          value: function merge(left, right, fieldName, comparer) {
            var result = [];
            var current;

            while (left.length > 0 || right.length > 0) {
              if (left.length > 0 && right.length > 0) {
                if (comparer) {
                  current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;
                } else {
                  current = left[0][fieldName] < left[0][fieldName] ? left : right;
                }
              } else {
                current = left.length > 0 ? left : right;
              }

              result.push(current.shift());
            }

            return result;
          }
        }, {
          key: "getVal",
          value: function getVal(array, index, field) {
            return field ? this.getObject(field, array[index]) : array[index];
          }
        }, {
          key: "toLowerCase",
          value: function toLowerCase(val) {
            return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : val === 0 || val === false ? val.toString() : '';
          }
          /**
           * To perform the filter operation with specified adaptor and returns the result.
           * @param  {Object} adaptor
           * @param  {string} fnName
           * @param  {Object} param1?
           * @param  {Object} param2?
           * @hidden
           */

        }, {
          key: "callAdaptorFunction",
          value: function callAdaptorFunction(adaptor, fnName, param1, param2) {
            if (fnName in adaptor) {
              var res = adaptor[fnName](param1, param2);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(res)) {
                param1 = res;
              }
            }

            return param1;
          }
        }, {
          key: "getAddParams",
          value: function getAddParams(adp, dm, query) {
            var req = {};
            DataUtil.callAdaptorFunction(adp, 'addParams', {
              dm: dm,
              query: query,
              params: query.params,
              reqParams: req
            });
            return req;
          }
          /**
           * Checks wheather the given input is a plain object or not.
           * @param  {Object|Object[]} obj
           */

        }, {
          key: "isPlainObject",
          value: function isPlainObject(obj) {
            return !!obj && obj.constructor === Object;
          }
          /**
           * Returns true when the browser cross origin request.
           */

        }, {
          key: "isCors",
          value: function isCors() {
            var xhr = null;
            var request = 'XMLHttpRequest';

            try {
              xhr = new window[request]();
            } catch (e) {// No exception handling
            }

            return !!xhr && 'withCredentials' in xhr;
          }
          /**
           * Generate random GUID value which will be prefixed with the given value.
           * @param  {string} prefix
           */

        }, {
          key: "getGuid",
          value: function getGuid(prefix) {
            var hexs = '0123456789abcdef';
            var rand;
            return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, function (val, i) {
              if ('crypto' in window && 'getRandomValues' in crypto) {
                var arr = new Uint8Array(1);
                window.crypto.getRandomValues(arr);
                rand = arr[0] % 16 | 0;
              } else {
                rand = Math.random() * 16 | 0;
              }

              return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];
            });
          }
          /**
           * Checks wheather the given value is null or not.
           * @param  {string|Object} val
           * @returns boolean
           */

        }, {
          key: "isNull",
          value: function isNull(val) {
            return val === undefined || val === null;
          }
          /**
           * To get the required items from collection of objects.
           * @param  {Object[]} array
           * @param  {string} field
           * @param  {Function} comparer
           * @returns Object
           * @hidden
           */

        }, {
          key: "getItemFromComparer",
          value: function getItemFromComparer(array, field, comparer) {
            var keyVal;
            var current;
            var key;
            var i = 0;
            var castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';

            if (array.length) {
              while (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(keyVal) && i < array.length) {
                keyVal = DataUtil.getVal(array, i, field);
                key = array[i++];
              }
            }

            for (; i < array.length; i++) {
              current = DataUtil.getVal(array, i, field);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(current)) {
                continue;
              }

              if (castRequired) {
                keyVal = +keyVal;
                current = +current;
              }

              if (comparer(keyVal, current) > 0) {
                keyVal = current;
                key = array[i];
              }
            }

            return key;
          }
          /**
           * To get distinct values of Array or Array of Objects.
           * @param  {Object[]} json
           * @param  {string} field
           * @param  {boolean} requiresCompleteRecord
           * @returns Object[]
           * * distinct array of objects is return when requiresCompleteRecord set as true.
           * @hidden
           */

        }, {
          key: "distinct",
          value: function distinct(json, fieldName, requiresCompleteRecord) {
            requiresCompleteRecord = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(requiresCompleteRecord) ? false : requiresCompleteRecord;
            var result = [];
            var val;
            var tmp = {};
            json.forEach(function (data, index) {
              val = typeof json[index] === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];

              if (!(val in tmp)) {
                result.push(!requiresCompleteRecord ? val : json[index]);
                tmp[val] = 1;
              }
            });
            return result;
          }
        }]);

        return DataUtil;
      }();
      /**
       * Specifies the value which will be used to adjust the date value to server timezone.
       * @default null
       */


      DataUtil.serverTimezoneOffset = null;
      /**
       * Species whether are not to be parsed with serverTimezoneOffset value.
       * @hidden
       */

      DataUtil.timeZoneHandling = true;
      /**
       * Throw error with the given string as message.
       * @param  {string} er
       */

      DataUtil.throwError = function (error) {
        try {
          throw new Error(error);
        } catch (e) {
          throw e.message + '\n' + e.stack;
        }
      };

      DataUtil.aggregates = {
        /**
         * Calculate sum of the given field in the data.
         * @param  {Object[]} ds
         * @param  {string} field
         */
        sum: function sum(ds, field) {
          var result = 0;
          var val;
          var castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';

          for (var i = 0; i < ds.length; i++) {
            val = DataUtil.getVal(ds, i, field);

            if (!isNaN(val) && val !== null) {
              if (castRequired) {
                val = +val;
              }

              result += val;
            }
          }

          return result;
        },

        /**
         * Calculate average value of the given field in the data.
         * @param  {Object[]} ds
         * @param  {string} field
         */
        average: function average(ds, field) {
          return DataUtil.aggregates.sum(ds, field) / ds.length;
        },

        /**
         * Returns the min value of the data based on the field.
         * @param  {Object[]} ds
         * @param  {string|Function} field
         */
        min: function min(ds, field) {
          var comparer;

          if (typeof field === 'function') {
            comparer = field;
            field = null;
          }

          return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));
        },

        /**
         * Returns the max value of the data based on the field.
         * @param  {Object[]} ds
         * @param  {string} field
         * @returns number
         */
        max: function max(ds, field) {
          var comparer;

          if (typeof field === 'function') {
            comparer = field;
            field = null;
          }

          return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));
        },

        /**
         * Returns the total number of true value present in the data based on the given boolean field name.
         * @param  {Object[]} ds
         * @param  {string} field
         */
        truecount: function truecount(ds, field) {
          return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;
        },

        /**
         * Returns the total number of false value present in the data based on the given boolean field name.
         * @param  {Object[]} ds
         * @param  {string} field
         */
        falsecount: function falsecount(ds, field) {
          return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;
        },

        /**
         * Returns the length of the given data.
         * @param  {Object[]} ds
         * @param  {string} field?
         * @returns number
         */
        count: function count(ds, field) {
          return ds.length;
        }
      };
      /**
       * Specifies the Object with filter operators.
       */

      DataUtil.operatorSymbols = {
        '<': 'lessthan',
        '>': 'greaterthan',
        '<=': 'lessthanorequal',
        '>=': 'greaterthanorequal',
        '==': 'equal',
        '!=': 'notequal',
        '*=': 'contains',
        '$=': 'endswith',
        '^=': 'startswith'
      };
      /**
       * Specifies the Object with filter operators which will be used for OData filter query generation.
       * * It will be used for date/number type filter query.
       */

      DataUtil.odBiOperator = {
        '<': ' lt ',
        '>': ' gt ',
        '<=': ' le ',
        '>=': ' ge ',
        '==': ' eq ',
        '!=': ' ne ',
        'lessthan': ' lt ',
        'lessthanorequal': ' le ',
        'greaterthan': ' gt ',
        'greaterthanorequal': ' ge ',
        'equal': ' eq ',
        'notequal': ' ne '
      };
      /**
       * Specifies the Object with filter operators which will be used for OData filter query generation.
       * It will be used for string type filter query.
       */

      DataUtil.odUniOperator = {
        '$=': 'endswith',
        '^=': 'startswith',
        '*=': 'substringof',
        'endswith': 'endswith',
        'startswith': 'startswith',
        'contains': 'substringof'
      };
      /**
       * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.
       * It will be used for string type filter query.
       */

      DataUtil.odv4UniOperator = {
        '$=': 'endswith',
        '^=': 'startswith',
        '*=': 'contains',
        'endswith': 'endswith',
        'startswith': 'startswith',
        'contains': 'contains'
      };
      DataUtil.diacritics = {
        "\u24B6": 'A',
        "\uFF21": 'A',
        "\xC0": 'A',
        "\xC1": 'A',
        "\xC2": 'A',
        "\u1EA6": 'A',
        "\u1EA4": 'A',
        "\u1EAA": 'A',
        "\u1EA8": 'A',
        "\xC3": 'A',
        "\u0100": 'A',
        "\u0102": 'A',
        "\u1EB0": 'A',
        "\u1EAE": 'A',
        "\u1EB4": 'A',
        "\u1EB2": 'A',
        "\u0226": 'A',
        "\u01E0": 'A',
        "\xC4": 'A',
        "\u01DE": 'A',
        "\u1EA2": 'A',
        "\xC5": 'A',
        "\u01FA": 'A',
        "\u01CD": 'A',
        "\u0200": 'A',
        "\u0202": 'A',
        "\u1EA0": 'A',
        "\u1EAC": 'A',
        "\u1EB6": 'A',
        "\u1E00": 'A',
        "\u0104": 'A',
        "\u023A": 'A',
        "\u2C6F": 'A',
        "\uA732": 'AA',
        "\xC6": 'AE',
        "\u01FC": 'AE',
        "\u01E2": 'AE',
        "\uA734": 'AO',
        "\uA736": 'AU',
        "\uA738": 'AV',
        "\uA73A": 'AV',
        "\uA73C": 'AY',
        "\u24B7": 'B',
        "\uFF22": 'B',
        "\u1E02": 'B',
        "\u1E04": 'B',
        "\u1E06": 'B',
        "\u0243": 'B',
        "\u0182": 'B',
        "\u0181": 'B',
        "\u24B8": 'C',
        "\uFF23": 'C',
        "\u0106": 'C',
        "\u0108": 'C',
        "\u010A": 'C',
        "\u010C": 'C',
        "\xC7": 'C',
        "\u1E08": 'C',
        "\u0187": 'C',
        "\u023B": 'C',
        "\uA73E": 'C',
        "\u24B9": 'D',
        "\uFF24": 'D',
        "\u1E0A": 'D',
        "\u010E": 'D',
        "\u1E0C": 'D',
        "\u1E10": 'D',
        "\u1E12": 'D',
        "\u1E0E": 'D',
        "\u0110": 'D',
        "\u018B": 'D',
        "\u018A": 'D',
        "\u0189": 'D',
        "\uA779": 'D',
        "\u01F1": 'DZ',
        "\u01C4": 'DZ',
        "\u01F2": 'Dz',
        "\u01C5": 'Dz',
        "\u24BA": 'E',
        "\uFF25": 'E',
        "\xC8": 'E',
        "\xC9": 'E',
        "\xCA": 'E',
        "\u1EC0": 'E',
        "\u1EBE": 'E',
        "\u1EC4": 'E',
        "\u1EC2": 'E',
        "\u1EBC": 'E',
        "\u0112": 'E',
        "\u1E14": 'E',
        "\u1E16": 'E',
        "\u0114": 'E',
        "\u0116": 'E',
        "\xCB": 'E',
        "\u1EBA": 'E',
        "\u011A": 'E',
        "\u0204": 'E',
        "\u0206": 'E',
        "\u1EB8": 'E',
        "\u1EC6": 'E',
        "\u0228": 'E',
        "\u1E1C": 'E',
        "\u0118": 'E',
        "\u1E18": 'E',
        "\u1E1A": 'E',
        "\u0190": 'E',
        "\u018E": 'E',
        "\u24BB": 'F',
        "\uFF26": 'F',
        "\u1E1E": 'F',
        "\u0191": 'F',
        "\uA77B": 'F',
        "\u24BC": 'G',
        "\uFF27": 'G',
        "\u01F4": 'G',
        "\u011C": 'G',
        "\u1E20": 'G',
        "\u011E": 'G',
        "\u0120": 'G',
        "\u01E6": 'G',
        "\u0122": 'G',
        "\u01E4": 'G',
        "\u0193": 'G',
        "\uA7A0": 'G',
        "\uA77D": 'G',
        "\uA77E": 'G',
        "\u24BD": 'H',
        "\uFF28": 'H',
        "\u0124": 'H',
        "\u1E22": 'H',
        "\u1E26": 'H',
        "\u021E": 'H',
        "\u1E24": 'H',
        "\u1E28": 'H',
        "\u1E2A": 'H',
        "\u0126": 'H',
        "\u2C67": 'H',
        "\u2C75": 'H',
        "\uA78D": 'H',
        "\u24BE": 'I',
        "\uFF29": 'I',
        "\xCC": 'I',
        "\xCD": 'I',
        "\xCE": 'I',
        "\u0128": 'I',
        "\u012A": 'I',
        "\u012C": 'I',
        "\u0130": 'I',
        "\xCF": 'I',
        "\u1E2E": 'I',
        "\u1EC8": 'I',
        "\u01CF": 'I',
        "\u0208": 'I',
        "\u020A": 'I',
        "\u1ECA": 'I',
        "\u012E": 'I',
        "\u1E2C": 'I',
        "\u0197": 'I',
        "\u24BF": 'J',
        "\uFF2A": 'J',
        "\u0134": 'J',
        "\u0248": 'J',
        "\u24C0": 'K',
        "\uFF2B": 'K',
        "\u1E30": 'K',
        "\u01E8": 'K',
        "\u1E32": 'K',
        "\u0136": 'K',
        "\u1E34": 'K',
        "\u0198": 'K',
        "\u2C69": 'K',
        "\uA740": 'K',
        "\uA742": 'K',
        "\uA744": 'K',
        "\uA7A2": 'K',
        "\u24C1": 'L',
        "\uFF2C": 'L',
        "\u013F": 'L',
        "\u0139": 'L',
        "\u013D": 'L',
        "\u1E36": 'L',
        "\u1E38": 'L',
        "\u013B": 'L',
        "\u1E3C": 'L',
        "\u1E3A": 'L',
        "\u0141": 'L',
        "\u023D": 'L',
        "\u2C62": 'L',
        "\u2C60": 'L',
        "\uA748": 'L',
        "\uA746": 'L',
        "\uA780": 'L',
        "\u01C7": 'LJ',
        "\u01C8": 'Lj',
        "\u24C2": 'M',
        "\uFF2D": 'M',
        "\u1E3E": 'M',
        "\u1E40": 'M',
        "\u1E42": 'M',
        "\u2C6E": 'M',
        "\u019C": 'M',
        "\u24C3": 'N',
        "\uFF2E": 'N',
        "\u01F8": 'N',
        "\u0143": 'N',
        "\xD1": 'N',
        "\u1E44": 'N',
        "\u0147": 'N',
        "\u1E46": 'N',
        "\u0145": 'N',
        "\u1E4A": 'N',
        "\u1E48": 'N',
        "\u0220": 'N',
        "\u019D": 'N',
        "\uA790": 'N',
        "\uA7A4": 'N',
        "\u01CA": 'NJ',
        "\u01CB": 'Nj',
        "\u24C4": 'O',
        "\uFF2F": 'O',
        "\xD2": 'O',
        "\xD3": 'O',
        "\xD4": 'O',
        "\u1ED2": 'O',
        "\u1ED0": 'O',
        "\u1ED6": 'O',
        "\u1ED4": 'O',
        "\xD5": 'O',
        "\u1E4C": 'O',
        "\u022C": 'O',
        "\u1E4E": 'O',
        "\u014C": 'O',
        "\u1E50": 'O',
        "\u1E52": 'O',
        "\u014E": 'O',
        "\u022E": 'O',
        "\u0230": 'O',
        "\xD6": 'O',
        "\u022A": 'O',
        "\u1ECE": 'O',
        "\u0150": 'O',
        "\u01D1": 'O',
        "\u020C": 'O',
        "\u020E": 'O',
        "\u01A0": 'O',
        "\u1EDC": 'O',
        "\u1EDA": 'O',
        "\u1EE0": 'O',
        "\u1EDE": 'O',
        "\u1EE2": 'O',
        "\u1ECC": 'O',
        "\u1ED8": 'O',
        "\u01EA": 'O',
        "\u01EC": 'O',
        "\xD8": 'O',
        "\u01FE": 'O',
        "\u0186": 'O',
        "\u019F": 'O',
        "\uA74A": 'O',
        "\uA74C": 'O',
        "\u01A2": 'OI',
        "\uA74E": 'OO',
        "\u0222": 'OU',
        "\u24C5": 'P',
        "\uFF30": 'P',
        "\u1E54": 'P',
        "\u1E56": 'P',
        "\u01A4": 'P',
        "\u2C63": 'P',
        "\uA750": 'P',
        "\uA752": 'P',
        "\uA754": 'P',
        "\u24C6": 'Q',
        "\uFF31": 'Q',
        "\uA756": 'Q',
        "\uA758": 'Q',
        "\u024A": 'Q',
        "\u24C7": 'R',
        "\uFF32": 'R',
        "\u0154": 'R',
        "\u1E58": 'R',
        "\u0158": 'R',
        "\u0210": 'R',
        "\u0212": 'R',
        "\u1E5A": 'R',
        "\u1E5C": 'R',
        "\u0156": 'R',
        "\u1E5E": 'R',
        "\u024C": 'R',
        "\u2C64": 'R',
        "\uA75A": 'R',
        "\uA7A6": 'R',
        "\uA782": 'R',
        "\u24C8": 'S',
        "\uFF33": 'S',
        "\u1E9E": 'S',
        "\u015A": 'S',
        "\u1E64": 'S',
        "\u015C": 'S',
        "\u1E60": 'S',
        "\u0160": 'S',
        "\u1E66": 'S',
        "\u1E62": 'S',
        "\u1E68": 'S',
        "\u0218": 'S',
        "\u015E": 'S',
        "\u2C7E": 'S',
        "\uA7A8": 'S',
        "\uA784": 'S',
        "\u24C9": 'T',
        "\uFF34": 'T',
        "\u1E6A": 'T',
        "\u0164": 'T',
        "\u1E6C": 'T',
        "\u021A": 'T',
        "\u0162": 'T',
        "\u1E70": 'T',
        "\u1E6E": 'T',
        "\u0166": 'T',
        "\u01AC": 'T',
        "\u01AE": 'T',
        "\u023E": 'T',
        "\uA786": 'T',
        "\uA728": 'TZ',
        "\u24CA": 'U',
        "\uFF35": 'U',
        "\xD9": 'U',
        "\xDA": 'U',
        "\xDB": 'U',
        "\u0168": 'U',
        "\u1E78": 'U',
        "\u016A": 'U',
        "\u1E7A": 'U',
        "\u016C": 'U',
        "\xDC": 'U',
        "\u01DB": 'U',
        "\u01D7": 'U',
        "\u01D5": 'U',
        "\u01D9": 'U',
        "\u1EE6": 'U',
        "\u016E": 'U',
        "\u0170": 'U',
        "\u01D3": 'U',
        "\u0214": 'U',
        "\u0216": 'U',
        "\u01AF": 'U',
        "\u1EEA": 'U',
        "\u1EE8": 'U',
        "\u1EEE": 'U',
        "\u1EEC": 'U',
        "\u1EF0": 'U',
        "\u1EE4": 'U',
        "\u1E72": 'U',
        "\u0172": 'U',
        "\u1E76": 'U',
        "\u1E74": 'U',
        "\u0244": 'U',
        "\u24CB": 'V',
        "\uFF36": 'V',
        "\u1E7C": 'V',
        "\u1E7E": 'V',
        "\u01B2": 'V',
        "\uA75E": 'V',
        "\u0245": 'V',
        "\uA760": 'VY',
        "\u24CC": 'W',
        "\uFF37": 'W',
        "\u1E80": 'W',
        "\u1E82": 'W',
        "\u0174": 'W',
        "\u1E86": 'W',
        "\u1E84": 'W',
        "\u1E88": 'W',
        "\u2C72": 'W',
        "\u24CD": 'X',
        "\uFF38": 'X',
        "\u1E8A": 'X',
        "\u1E8C": 'X',
        "\u24CE": 'Y',
        "\uFF39": 'Y',
        "\u1EF2": 'Y',
        "\xDD": 'Y',
        "\u0176": 'Y',
        "\u1EF8": 'Y',
        "\u0232": 'Y',
        "\u1E8E": 'Y',
        "\u0178": 'Y',
        "\u1EF6": 'Y',
        "\u1EF4": 'Y',
        "\u01B3": 'Y',
        "\u024E": 'Y',
        "\u1EFE": 'Y',
        "\u24CF": 'Z',
        "\uFF3A": 'Z',
        "\u0179": 'Z',
        "\u1E90": 'Z',
        "\u017B": 'Z',
        "\u017D": 'Z',
        "\u1E92": 'Z',
        "\u1E94": 'Z',
        "\u01B5": 'Z',
        "\u0224": 'Z',
        "\u2C7F": 'Z',
        "\u2C6B": 'Z',
        "\uA762": 'Z',
        "\u24D0": 'a',
        "\uFF41": 'a',
        "\u1E9A": 'a',
        "\xE0": 'a',
        "\xE1": 'a',
        "\xE2": 'a',
        "\u1EA7": 'a',
        "\u1EA5": 'a',
        "\u1EAB": 'a',
        "\u1EA9": 'a',
        "\xE3": 'a',
        "\u0101": 'a',
        "\u0103": 'a',
        "\u1EB1": 'a',
        "\u1EAF": 'a',
        "\u1EB5": 'a',
        "\u1EB3": 'a',
        "\u0227": 'a',
        "\u01E1": 'a',
        "\xE4": 'a',
        "\u01DF": 'a',
        "\u1EA3": 'a',
        "\xE5": 'a',
        "\u01FB": 'a',
        "\u01CE": 'a',
        "\u0201": 'a',
        "\u0203": 'a',
        "\u1EA1": 'a',
        "\u1EAD": 'a',
        "\u1EB7": 'a',
        "\u1E01": 'a',
        "\u0105": 'a',
        "\u2C65": 'a',
        "\u0250": 'a',
        "\uA733": 'aa',
        "\xE6": 'ae',
        "\u01FD": 'ae',
        "\u01E3": 'ae',
        "\uA735": 'ao',
        "\uA737": 'au',
        "\uA739": 'av',
        "\uA73B": 'av',
        "\uA73D": 'ay',
        "\u24D1": 'b',
        "\uFF42": 'b',
        "\u1E03": 'b',
        "\u1E05": 'b',
        "\u1E07": 'b',
        "\u0180": 'b',
        "\u0183": 'b',
        "\u0253": 'b',
        "\u24D2": 'c',
        "\uFF43": 'c',
        "\u0107": 'c',
        "\u0109": 'c',
        "\u010B": 'c',
        "\u010D": 'c',
        "\xE7": 'c',
        "\u1E09": 'c',
        "\u0188": 'c',
        "\u023C": 'c',
        "\uA73F": 'c',
        "\u2184": 'c',
        "\u24D3": 'd',
        "\uFF44": 'd',
        "\u1E0B": 'd',
        "\u010F": 'd',
        "\u1E0D": 'd',
        "\u1E11": 'd',
        "\u1E13": 'd',
        "\u1E0F": 'd',
        "\u0111": 'd',
        "\u018C": 'd',
        "\u0256": 'd',
        "\u0257": 'd',
        "\uA77A": 'd',
        "\u01F3": 'dz',
        "\u01C6": 'dz',
        "\u24D4": 'e',
        "\uFF45": 'e',
        "\xE8": 'e',
        "\xE9": 'e',
        "\xEA": 'e',
        "\u1EC1": 'e',
        "\u1EBF": 'e',
        "\u1EC5": 'e',
        "\u1EC3": 'e',
        "\u1EBD": 'e',
        "\u0113": 'e',
        "\u1E15": 'e',
        "\u1E17": 'e',
        "\u0115": 'e',
        "\u0117": 'e',
        "\xEB": 'e',
        "\u1EBB": 'e',
        "\u011B": 'e',
        "\u0205": 'e',
        "\u0207": 'e',
        "\u1EB9": 'e',
        "\u1EC7": 'e',
        "\u0229": 'e',
        "\u1E1D": 'e',
        "\u0119": 'e',
        "\u1E19": 'e',
        "\u1E1B": 'e',
        "\u0247": 'e',
        "\u025B": 'e',
        "\u01DD": 'e',
        "\u24D5": 'f',
        "\uFF46": 'f',
        "\u1E1F": 'f',
        "\u0192": 'f',
        "\uA77C": 'f',
        "\u24D6": 'g',
        "\uFF47": 'g',
        "\u01F5": 'g',
        "\u011D": 'g',
        "\u1E21": 'g',
        "\u011F": 'g',
        "\u0121": 'g',
        "\u01E7": 'g',
        "\u0123": 'g',
        "\u01E5": 'g',
        "\u0260": 'g',
        "\uA7A1": 'g',
        "\u1D79": 'g',
        "\uA77F": 'g',
        "\u24D7": 'h',
        "\uFF48": 'h',
        "\u0125": 'h',
        "\u1E23": 'h',
        "\u1E27": 'h',
        "\u021F": 'h',
        "\u1E25": 'h',
        "\u1E29": 'h',
        "\u1E2B": 'h',
        "\u1E96": 'h',
        "\u0127": 'h',
        "\u2C68": 'h',
        "\u2C76": 'h',
        "\u0265": 'h',
        "\u0195": 'hv',
        "\u24D8": 'i',
        "\uFF49": 'i',
        "\xEC": 'i',
        "\xED": 'i',
        "\xEE": 'i',
        "\u0129": 'i',
        "\u012B": 'i',
        "\u012D": 'i',
        "\xEF": 'i',
        "\u1E2F": 'i',
        "\u1EC9": 'i',
        "\u01D0": 'i',
        "\u0209": 'i',
        "\u020B": 'i',
        "\u1ECB": 'i',
        "\u012F": 'i',
        "\u1E2D": 'i',
        "\u0268": 'i',
        "\u0131": 'i',
        "\u24D9": 'j',
        "\uFF4A": 'j',
        "\u0135": 'j',
        "\u01F0": 'j',
        "\u0249": 'j',
        "\u24DA": 'k',
        "\uFF4B": 'k',
        "\u1E31": 'k',
        "\u01E9": 'k',
        "\u1E33": 'k',
        "\u0137": 'k',
        "\u1E35": 'k',
        "\u0199": 'k',
        "\u2C6A": 'k',
        "\uA741": 'k',
        "\uA743": 'k',
        "\uA745": 'k',
        "\uA7A3": 'k',
        "\u24DB": 'l',
        "\uFF4C": 'l',
        "\u0140": 'l',
        "\u013A": 'l',
        "\u013E": 'l',
        "\u1E37": 'l',
        "\u1E39": 'l',
        "\u013C": 'l',
        "\u1E3D": 'l',
        "\u1E3B": 'l',
        "\u017F": 'l',
        "\u0142": 'l',
        "\u019A": 'l',
        "\u026B": 'l',
        "\u2C61": 'l',
        "\uA749": 'l',
        "\uA781": 'l',
        "\uA747": 'l',
        "\u01C9": 'lj',
        "\u24DC": 'm',
        "\uFF4D": 'm',
        "\u1E3F": 'm',
        "\u1E41": 'm',
        "\u1E43": 'm',
        "\u0271": 'm',
        "\u026F": 'm',
        "\u24DD": 'n',
        "\uFF4E": 'n',
        "\u01F9": 'n',
        "\u0144": 'n',
        "\xF1": 'n',
        "\u1E45": 'n',
        "\u0148": 'n',
        "\u1E47": 'n',
        "\u0146": 'n',
        "\u1E4B": 'n',
        "\u1E49": 'n',
        "\u019E": 'n',
        "\u0272": 'n',
        "\u0149": 'n',
        "\uA791": 'n',
        "\uA7A5": 'n',
        "\u01CC": 'nj',
        "\u24DE": 'o',
        "\uFF4F": 'o',
        "\xF2": 'o',
        "\xF3": 'o',
        "\xF4": 'o',
        "\u1ED3": 'o',
        "\u1ED1": 'o',
        "\u1ED7": 'o',
        "\u1ED5": 'o',
        "\xF5": 'o',
        "\u1E4D": 'o',
        "\u022D": 'o',
        "\u1E4F": 'o',
        "\u014D": 'o',
        "\u1E51": 'o',
        "\u1E53": 'o',
        "\u014F": 'o',
        "\u022F": 'o',
        "\u0231": 'o',
        "\xF6": 'o',
        "\u022B": 'o',
        "\u1ECF": 'o',
        "\u0151": 'o',
        "\u01D2": 'o',
        "\u020D": 'o',
        "\u020F": 'o',
        "\u01A1": 'o',
        "\u1EDD": 'o',
        "\u1EDB": 'o',
        "\u1EE1": 'o',
        "\u1EDF": 'o',
        "\u1EE3": 'o',
        "\u1ECD": 'o',
        "\u1ED9": 'o',
        "\u01EB": 'o',
        "\u01ED": 'o',
        "\xF8": 'o',
        "\u01FF": 'o',
        "\u0254": 'o',
        "\uA74B": 'o',
        "\uA74D": 'o',
        "\u0275": 'o',
        "\u01A3": 'oi',
        "\u0223": 'ou',
        "\uA74F": 'oo',
        "\u24DF": 'p',
        "\uFF50": 'p',
        "\u1E55": 'p',
        "\u1E57": 'p',
        "\u01A5": 'p',
        "\u1D7D": 'p',
        "\uA751": 'p',
        "\uA753": 'p',
        "\uA755": 'p',
        "\u24E0": 'q',
        "\uFF51": 'q',
        "\u024B": 'q',
        "\uA757": 'q',
        "\uA759": 'q',
        "\u24E1": 'r',
        "\uFF52": 'r',
        "\u0155": 'r',
        "\u1E59": 'r',
        "\u0159": 'r',
        "\u0211": 'r',
        "\u0213": 'r',
        "\u1E5B": 'r',
        "\u1E5D": 'r',
        "\u0157": 'r',
        "\u1E5F": 'r',
        "\u024D": 'r',
        "\u027D": 'r',
        "\uA75B": 'r',
        "\uA7A7": 'r',
        "\uA783": 'r',
        "\u24E2": 's',
        "\uFF53": 's',
        "\xDF": 's',
        "\u015B": 's',
        "\u1E65": 's',
        "\u015D": 's',
        "\u1E61": 's',
        "\u0161": 's',
        "\u1E67": 's',
        "\u1E63": 's',
        "\u1E69": 's',
        "\u0219": 's',
        "\u015F": 's',
        "\u023F": 's',
        "\uA7A9": 's',
        "\uA785": 's',
        "\u1E9B": 's',
        "\u24E3": 't',
        "\uFF54": 't',
        "\u1E6B": 't',
        "\u1E97": 't',
        "\u0165": 't',
        "\u1E6D": 't',
        "\u021B": 't',
        "\u0163": 't',
        "\u1E71": 't',
        "\u1E6F": 't',
        "\u0167": 't',
        "\u01AD": 't',
        "\u0288": 't',
        "\u2C66": 't',
        "\uA787": 't',
        "\uA729": 'tz',
        "\u24E4": 'u',
        "\uFF55": 'u',
        "\xF9": 'u',
        "\xFA": 'u',
        "\xFB": 'u',
        "\u0169": 'u',
        "\u1E79": 'u',
        "\u016B": 'u',
        "\u1E7B": 'u',
        "\u016D": 'u',
        "\xFC": 'u',
        "\u01DC": 'u',
        "\u01D8": 'u',
        "\u01D6": 'u',
        "\u01DA": 'u',
        "\u1EE7": 'u',
        "\u016F": 'u',
        "\u0171": 'u',
        "\u01D4": 'u',
        "\u0215": 'u',
        "\u0217": 'u',
        "\u01B0": 'u',
        "\u1EEB": 'u',
        "\u1EE9": 'u',
        "\u1EEF": 'u',
        "\u1EED": 'u',
        "\u1EF1": 'u',
        "\u1EE5": 'u',
        "\u1E73": 'u',
        "\u0173": 'u',
        "\u1E77": 'u',
        "\u1E75": 'u',
        "\u0289": 'u',
        "\u24E5": 'v',
        "\uFF56": 'v',
        "\u1E7D": 'v',
        "\u1E7F": 'v',
        "\u028B": 'v',
        "\uA75F": 'v',
        "\u028C": 'v',
        "\uA761": 'vy',
        "\u24E6": 'w',
        "\uFF57": 'w',
        "\u1E81": 'w',
        "\u1E83": 'w',
        "\u0175": 'w',
        "\u1E87": 'w',
        "\u1E85": 'w',
        "\u1E98": 'w',
        "\u1E89": 'w',
        "\u2C73": 'w',
        "\u24E7": 'x',
        "\uFF58": 'x',
        "\u1E8B": 'x',
        "\u1E8D": 'x',
        "\u24E8": 'y',
        "\uFF59": 'y',
        "\u1EF3": 'y',
        "\xFD": 'y',
        "\u0177": 'y',
        "\u1EF9": 'y',
        "\u0233": 'y',
        "\u1E8F": 'y',
        "\xFF": 'y',
        "\u1EF7": 'y',
        "\u1E99": 'y',
        "\u1EF5": 'y',
        "\u01B4": 'y',
        "\u024F": 'y',
        "\u1EFF": 'y',
        "\u24E9": 'z',
        "\uFF5A": 'z',
        "\u017A": 'z',
        "\u1E91": 'z',
        "\u017C": 'z',
        "\u017E": 'z',
        "\u1E93": 'z',
        "\u1E95": 'z',
        "\u01B6": 'z',
        "\u0225": 'z',
        "\u0240": 'z',
        "\u2C6C": 'z',
        "\uA763": 'z',
        "\u0386": "\u0391",
        "\u0388": "\u0395",
        "\u0389": "\u0397",
        "\u038A": "\u0399",
        "\u03AA": "\u0399",
        "\u038C": "\u039F",
        "\u038E": "\u03A5",
        "\u03AB": "\u03A5",
        "\u038F": "\u03A9",
        "\u03AC": "\u03B1",
        "\u03AD": "\u03B5",
        "\u03AE": "\u03B7",
        "\u03AF": "\u03B9",
        "\u03CA": "\u03B9",
        "\u0390": "\u03B9",
        "\u03CC": "\u03BF",
        "\u03CD": "\u03C5",
        "\u03CB": "\u03C5",
        "\u03B0": "\u03C5",
        "\u03C9": "\u03C9",
        "\u03C2": "\u03C3"
      };
      DataUtil.fnOperators = {
        /**
         * Returns true when the actual input is equal to the given input.
         * @param  {string|number|boolean} actual
         * @param  {string|number|boolean} expected
         * @param  {boolean} ignoreCase?
         * @param  {boolean} ignoreAccent?
         */
        equal: function equal(actual, expected, ignoreCase, ignoreAccent) {
          if (ignoreAccent) {
            actual = DataUtil.ignoreDiacritics(actual);
            expected = DataUtil.ignoreDiacritics(expected);
          }

          if (ignoreCase) {
            return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);
          }

          return actual === expected;
        },

        /**
         * Returns true when the actual input is not equal to the given input.
         * @param  {string|number|boolean} actual
         * @param  {string|number|boolean} expected
         * @param  {boolean} ignoreCase?
         */
        notequal: function notequal(actual, expected, ignoreCase, ignoreAccent) {
          if (ignoreAccent) {
            actual = DataUtil.ignoreDiacritics(actual);
            expected = DataUtil.ignoreDiacritics(expected);
          }

          return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);
        },

        /**
         * Returns true when the actual input is less than to the given input.
         * @param  {string|number|boolean} actual
         * @param  {string|number|boolean} expected
         * @param  {boolean} ignoreCase?
         */
        lessthan: function lessthan(actual, expected, ignoreCase) {
          if (ignoreCase) {
            return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);
          }

          return actual < expected;
        },

        /**
         * Returns true when the actual input is greater than to the given input.
         * @param  {string|number|boolean} actual
         * @param  {string|number|boolean} expected
         * @param  {boolean} ignoreCase?
         */
        greaterthan: function greaterthan(actual, expected, ignoreCase) {
          if (ignoreCase) {
            return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);
          }

          return actual > expected;
        },

        /**
         * Returns true when the actual input is less than or equal to the given input.
         * @param  {string|number|boolean} actual
         * @param  {string|number|boolean} expected
         * @param  {boolean} ignoreCase?
         */
        lessthanorequal: function lessthanorequal(actual, expected, ignoreCase) {
          if (ignoreCase) {
            return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);
          }

          return actual <= expected;
        },

        /**
         * Returns true when the actual input is greater than or equal to the given input.
         * @param  {string|number|boolean} actual
         * @param  {string|number|boolean} expected
         * @param  {boolean} ignoreCase?
         */
        greaterthanorequal: function greaterthanorequal(actual, expected, ignoreCase) {
          if (ignoreCase) {
            return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);
          }

          return actual >= expected;
        },

        /**
         * Returns true when the actual input contains the given string.
         * @param  {string|number} actual
         * @param  {string|number} expected
         * @param  {boolean} ignoreCase?
         */
        contains: function contains(actual, expected, ignoreCase, ignoreAccent) {
          if (ignoreAccent) {
            actual = DataUtil.ignoreDiacritics(actual);
            expected = DataUtil.ignoreDiacritics(expected);
          }

          if (ignoreCase) {
            return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(actual) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(expected) && DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;
          }

          return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(actual) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(expected) && actual.toString().indexOf(expected) !== -1;
        },

        /**
         * Returns true when the given input value is not null.
         * @param  {string|number} actual
         * @returns boolean
         */
        notnull: function notnull(actual) {
          return actual !== null;
        },

        /**
         * Returns true when the given input value is null.
         * @param  {string|number} actual
         * @returns boolean
         */
        isnull: function isnull(actual) {
          return actual === null;
        },

        /**
         * Returns true when the actual input starts with the given string
         * @param  {string} actual
         * @param  {string} expected
         * @param  {boolean} ignoreCase?
         */
        startswith: function startswith(actual, expected, ignoreCase, ignoreAccent) {
          if (ignoreAccent) {
            actual = DataUtil.ignoreDiacritics(actual);
            expected = DataUtil.ignoreDiacritics(expected);
          }

          if (ignoreCase) {
            return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));
          }

          return actual && expected && DataUtil.startsWith(actual, expected);
        },

        /**
         * Returns true when the actual input ends with the given string.
         * @param  {string} actual
         * @param  {string} expected
         * @param  {boolean} ignoreCase?
         */
        endswith: function endswith(actual, expected, ignoreCase, ignoreAccent) {
          if (ignoreAccent) {
            actual = DataUtil.ignoreDiacritics(actual);
            expected = DataUtil.ignoreDiacritics(expected);
          }

          if (ignoreCase) {
            return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));
          }

          return actual && expected && DataUtil.endsWith(actual, expected);
        },

        /**
         * It will return the filter operator based on the filter symbol.
         * @param  {string} operator
         * @hidden
         */
        processSymbols: function processSymbols(operator) {
          var fnName = DataUtil.operatorSymbols[operator];

          if (fnName) {
            var fn = DataUtil.fnOperators[fnName];
            return fn;
          }

          return DataUtil.throwError('Query - Process Operator : Invalid operator');
        },

        /**
         * It will return the valid filter operator based on the specified operators.
         * @param  {string} operator
         * @hidden
         */
        processOperator: function processOperator(operator) {
          var fn = DataUtil.fnOperators[operator];

          if (fn) {
            return fn;
          }

          return DataUtil.fnOperators.processSymbols(operator);
        }
      };
      /**
       * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.
       */

      DataUtil.parse = {
        /**
         * Parse the given string to the plain JavaScript object.
         * @param  {string|Object|Object[]} jsonText
         */
        parseJson: function parseJson(jsonText) {
          if (typeof jsonText === 'string') {
            jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);
          } else if (jsonText instanceof Array) {
            DataUtil.parse.iterateAndReviveArray(jsonText);
          } else if (typeof jsonText === 'object' && jsonText !== null) {
            DataUtil.parse.iterateAndReviveJson(jsonText);
          }

          return jsonText;
        },

        /**
         * It will perform on array of values.
         * @param  {string[]|Object[]} array
         * @hidden
         */
        iterateAndReviveArray: function iterateAndReviveArray(array) {
          for (var i = 0; i < array.length; i++) {
            if (typeof array[i] === 'object' && array[i] !== null) {
              DataUtil.parse.iterateAndReviveJson(array[i]);
            } else if (typeof array[i] === 'string' && !/^[\s]*\[|^[\s]*\{(.)+:|\"/g.test(array[i])) {
              array[i] = DataUtil.parse.jsonReviver('', array[i]);
            } else {
              array[i] = DataUtil.parse.parseJson(array[i]);
            }
          }
        },

        /**
         * It will perform on JSON values
         * @param  {JSON} json
         * @hidden
         */
        iterateAndReviveJson: function iterateAndReviveJson(json) {
          var value;
          var keys = Object.keys(json);

          for (var _i56 = 0, _keys13 = keys; _i56 < _keys13.length; _i56++) {
            var prop = _keys13[_i56];

            if (DataUtil.startsWith(prop, '__')) {
              continue;
            }

            value = json[prop];

            if (typeof value === 'object') {
              if (value instanceof Array) {
                DataUtil.parse.iterateAndReviveArray(value);
              } else if (value) {
                DataUtil.parse.iterateAndReviveJson(value);
              }
            } else {
              json[prop] = DataUtil.parse.jsonReviver(json[prop], value);
            }
          }
        },

        /**
         * It will perform on JSON values
         * @param  {string} field
         * @param  {string|Date} value
         * @hidden
         */
        jsonReviver: function jsonReviver(field, value) {
          if (typeof value === 'string') {
            var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
            var offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;

            if (ms) {
              return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);
            } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
              var isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;
              var arr = value.split(/[^0-9.]/);

              if (isUTC) {
                value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, false);
              } else {
                var utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));
                var hrs = parseInt(arr[6], 10);
                var mins = parseInt(arr[7], 10);

                if (isNaN(hrs) && isNaN(mins)) {
                  return utcFormat;
                }

                if (value.indexOf('+') > -1) {
                  utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);
                } else {
                  utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);
                }

                value = DataUtil.dateParse.toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);
              }

              if (DataUtil.serverTimezoneOffset == null) {
                value = DataUtil.dateParse.addSelfOffset(value);
              }
            }
          }

          return value;
        },

        /**
         * Check wheather the given value is JSON or not.
         * @param  {Object[]} jsonData
         */
        isJson: function isJson(jsonData) {
          if (typeof jsonData[0] === 'string') {
            return jsonData;
          }

          return DataUtil.parse.parseJson(jsonData);
        },

        /**
         * Checks wheather the given value is GUID or not.
         * @param  {string} value
         */
        isGuid: function isGuid(value) {
          var regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;
          var match = regex.exec(value);
          return match != null;
        },

        /**
         * The method used to replace the value based on the type.
         * @param  {Object} value
         * @param  {boolean} stringify
         * @hidden
         */
        replacer: function replacer(value, stringify) {
          if (DataUtil.isPlainObject(value)) {
            return DataUtil.parse.jsonReplacer(value, stringify);
          }

          if (value instanceof Array) {
            return DataUtil.parse.arrayReplacer(value);
          }

          if (value instanceof Date) {
            return DataUtil.parse.jsonReplacer({
              val: value
            }, stringify).val;
          }

          return value;
        },

        /**
         * It will replace the JSON value.
         * @param  {string} key
         * @param  {Object} val
         * @hidden
         */
        jsonReplacer: function jsonReplacer(val, stringify) {
          var value;
          var keys = Object.keys(val);

          for (var _i57 = 0, _keys14 = keys; _i57 < _keys14.length; _i57++) {
            var prop = _keys14[_i57];
            value = val[prop];

            if (!(value instanceof Date)) {
              continue;
            }

            var d = value;

            if (DataUtil.serverTimezoneOffset == null) {
              val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();
            } else {
              d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);
              val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();
            }
          }

          return val;
        },

        /**
         * It will replace the Array of value.
         * @param  {string} key
         * @param  {Object[]} val
         * @hidden
         */
        arrayReplacer: function arrayReplacer(val) {
          for (var i = 0; i < val.length; i++) {
            if (DataUtil.isPlainObject(val[i])) {
              val[i] = DataUtil.parse.jsonReplacer(val[i]);
            } else if (val[i] instanceof Date) {
              val[i] = DataUtil.parse.jsonReplacer({
                date: val[i]
              }).date;
            }
          }

          return val;
        },

        /**
         * It will replace the Date object with respective to UTC format value.
         * @param  {string} key
         * @param  {any} value
         * @hidden
         */

        /* tslint:disable-next-line:no-any */
        jsonDateReplacer: function jsonDateReplacer(key, value) {
          if (key === 'value' && value) {
            if (typeof value === 'string') {
              var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);

              if (ms) {
                value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);
              } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
                var arr = value.split(/[^0-9]/);
                value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);
              }
            }

            if (value instanceof Date) {
              value = DataUtil.dateParse.addSelfOffset(value);

              if (DataUtil.serverTimezoneOffset === null) {
                return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();
              } else {
                value = DataUtil.dateParse.toTimeZone(value, value.getTimezoneOffset() / 60 * 2 - DataUtil.serverTimezoneOffset, false);
                return value.toJSON();
              }
            }
          }

          return value;
        }
      };
      /**
       * @hidden
       */

      DataUtil.dateParse = {
        addSelfOffset: function addSelfOffset(input) {
          return new Date(+input - input.getTimezoneOffset() * 60000);
        },
        toUTC: function toUTC(input) {
          return new Date(+input + input.getTimezoneOffset() * 60000);
        },
        toTimeZone: function toTimeZone(input, offset, utc) {
          if (offset === null) {
            return input;
          }

          var unix = utc ? DataUtil.dateParse.toUTC(input) : input;
          return new Date(+unix - offset * 3600000);
        },
        toLocalTime: function toLocalTime(input) {
          var datefn = input;
          var timeZone = -datefn.getTimezoneOffset();
          var differenceString = timeZone >= 0 ? '+' : '-';

          var localtimefn = function localtimefn(num) {
            var norm = Math.floor(Math.abs(num));
            return (norm < 10 ? '0' : '') + norm;
          };

          var val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) + 'T' + localtimefn(datefn.getHours()) + ':' + localtimefn(datefn.getMinutes()) + ':' + localtimefn(datefn.getSeconds()) + differenceString + localtimefn(timeZone / 60) + ':' + localtimefn(timeZone % 60);
          return val;
        }
      };
      /**
       * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.
       * This is the base adaptor class that other adaptors can extend.
       * @hidden
       */

      var Adaptor = /*#__PURE__*/function () {
        /**
         * Constructor for Adaptor class
         * @param  {DataOptions} ds?
         * @hidden
         * @returns aggregates
         */
        function Adaptor(ds) {
          _classCallCheck2(this, Adaptor);

          // common options for all the adaptors 
          this.options = {
            from: 'table',
            requestType: 'json',
            sortBy: 'sorted',
            select: 'select',
            skip: 'skip',
            group: 'group',
            take: 'take',
            search: 'search',
            count: 'requiresCounts',
            where: 'where',
            aggregates: 'aggregates',
            expand: 'expand'
          };
          /**
           * Specifies the type of adaptor.
           * @default Adaptor
           */

          this.type = Adaptor;
          this.dataSource = ds;
          this.pvt = {};
        }
        /**
         * Returns the data from the query processing.
         * @param  {Object} data
         * @param  {DataOptions} ds?
         * @param  {Query} query?
         * @param  {XMLHttpRequest} xhr?
         * @returns Object
         */


        _createClass2(Adaptor, [{
          key: "processResponse",
          value: function processResponse(data, ds, query, xhr) {
            return data;
          }
        }]);

        return Adaptor;
      }();
      /**
       * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.
       * @hidden
       */


      var JsonAdaptor = /*#__PURE__*/function (_Adaptor) {
        _inherits2(JsonAdaptor, _Adaptor);

        var _super36 = _createSuper(JsonAdaptor);

        function JsonAdaptor() {
          _classCallCheck2(this, JsonAdaptor);

          return _super36.apply(this, arguments);
        }

        _createClass2(JsonAdaptor, [{
          key: "processQuery",

          /**
           * Process the JSON data based on the provided queries.
           * @param  {DataManager} dataManager
           * @param  {Query} query
           * @returns Object
           */
          value: function processQuery(dataManager, query) {
            var result = dataManager.dataSource.json.slice(0);
            var count = result.length;
            var countFlg = true;
            var ret;
            var key;
            var agg = {};

            for (var i = 0; i < query.queries.length; i++) {
              key = query.queries[i];
              ret = this[key.fn].call(this, result, key.e, query);

              if (key.fn === 'onAggregates') {
                agg[key.e.field + ' - ' + key.e.type] = ret;
              } else {
                result = ret !== undefined ? ret : result;
              }

              if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {
                countFlg = false;
              }

              if (countFlg) {
                count = result.length;
              }
            }

            if (query.isCountRequired) {
              result = {
                result: result,
                count: count,
                aggregates: agg
              };
            }

            return result;
          }
          /**
           * Performs batch update in the JSON array which add, remove and update records.
           * @param  {DataManager} dm
           * @param  {CrudOptions} changes
           * @param  {RemoteArgs} e
           */

        }, {
          key: "batchRequest",
          value: function batchRequest(dm, changes, e) {
            var i;
            var deletedRecordsLen = changes.deletedRecords.length;

            for (i = 0; i < changes.addedRecords.length; i++) {
              this.insert(dm, changes.addedRecords[i]);
            }

            for (i = 0; i < changes.changedRecords.length; i++) {
              this.update(dm, e.key, changes.changedRecords[i]);
            }

            for (i = 0; i < deletedRecordsLen; i++) {
              this.remove(dm, e.key, changes.deletedRecords[i]);
            }

            return changes;
          }
          /**
           * Performs filter operation with the given data and where query.
           * @param  {Object[]} ds
           * @param  {{validate:Function}} e
           */

        }, {
          key: "onWhere",
          value: function onWhere(ds, e) {
            if (!ds || !ds.length) {
              return ds;
            }

            return ds.filter(function (obj) {
              if (e) {
                return e.validate(obj);
              }
            });
          }
          /**
           * Returns aggregate function based on the aggregate type.
           * @param  {Object[]} ds
           * @param  {{field:string} e
           * @param  {string}} type
           */

        }, {
          key: "onAggregates",
          value: function onAggregates(ds, e) {
            var fn = DataUtil.aggregates[e.type];

            if (!ds || !fn || ds.length === 0) {
              return null;
            }

            return fn(ds, e.field);
          }
          /**
           * Performs search operation based on the given query.
           * @param  {Object[]} ds
           * @param  {QueryOptions} e
           */

        }, {
          key: "onSearch",
          value: function onSearch(ds, e) {
            if (!ds || !ds.length) {
              return ds;
            }

            if (e.fieldNames.length === 0) {
              DataUtil.getFieldList(ds[0], e.fieldNames);
            }

            return ds.filter(function (obj) {
              for (var j = 0; j < e.fieldNames.length; j++) {
                if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {
                  return true;
                }
              }

              return false;
            });
          }
          /**
           * Sort the data with given direction and field.
           * @param  {Object[]} ds
           * @param  {{comparer:(a:Object} e
           * @param  {Object} b
           */

        }, {
          key: "onSortBy",
          value: function onSortBy(ds, e, query) {
            if (!ds || !ds.length) {
              return ds;
            }

            var fnCompare;
            var field = DataUtil.getValue(e.fieldName, query);

            if (!field) {
              return ds.sort(e.comparer);
            }

            if (field instanceof Array) {
              field = field.slice(0);

              for (var i = field.length - 1; i >= 0; i--) {
                if (!field[i]) {
                  continue;
                }

                fnCompare = e.comparer;

                if (DataUtil.endsWith(field[i], ' desc')) {
                  fnCompare = DataUtil.fnSort('descending');
                  field[i] = field[i].replace(' desc', '');
                }

                ds = DataUtil.sort(ds, field[i], fnCompare);
              }

              return ds;
            }

            return DataUtil.sort(ds, field, e.comparer);
          }
          /**
           * Group the data based on the given query.
           * @param  {Object[]} ds
           * @param  {QueryOptions} e
           * @param  {Query} query
           */

        }, {
          key: "onGroup",
          value: function onGroup(ds, e, query) {
            if (!ds || !ds.length) {
              return ds;
            }

            var aggQuery = Query.filterQueries(query.queries, 'onAggregates');
            var agg = [];

            if (aggQuery.length) {
              var tmp;

              for (var i = 0; i < aggQuery.length; i++) {
                tmp = aggQuery[i].e;
                agg.push({
                  type: tmp.type,
                  field: DataUtil.getValue(tmp.field, query)
                });
              }
            }

            return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);
          }
          /**
           * Retrieves records based on the given page index and size.
           * @param  {Object[]} ds
           * @param  {{pageSize:number} e
           * @param  {number}} pageIndex
           * @param  {Query} query
           */

        }, {
          key: "onPage",
          value: function onPage(ds, e, query) {
            var size = DataUtil.getValue(e.pageSize, query);
            var start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;
            var end = start + size;

            if (!ds || !ds.length) {
              return ds;
            }

            return ds.slice(start, end);
          }
          /**
           * Retrieves records based on the given start and end index from query.
           * @param  {Object[]} ds
           * @param  {{start:number} e
           * @param  {number}} end
           */

        }, {
          key: "onRange",
          value: function onRange(ds, e) {
            if (!ds || !ds.length) {
              return ds;
            }

            return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));
          }
          /**
           * Picks the given count of records from the top of the datasource.
           * @param  {Object[]} ds
           * @param  {{nos:number}} e
           */

        }, {
          key: "onTake",
          value: function onTake(ds, e) {
            if (!ds || !ds.length) {
              return ds;
            }

            return ds.slice(0, DataUtil.getValue(e.nos));
          }
          /**
           * Skips the given count of records from the data source.
           * @param  {Object[]} ds
           * @param  {{nos:number}} e
           */

        }, {
          key: "onSkip",
          value: function onSkip(ds, e) {
            if (!ds || !ds.length) {
              return ds;
            }

            return ds.slice(DataUtil.getValue(e.nos));
          }
          /**
           * Selects specified columns from the data source.
           * @param  {Object[]} ds
           * @param  {{fieldNames:string}} e
           */

        }, {
          key: "onSelect",
          value: function onSelect(ds, e) {
            if (!ds || !ds.length) {
              return ds;
            }

            return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));
          }
          /**
           * Inserts new record in the table.
           * @param  {DataManager} dm
           * @param  {Object} data
           * @param  {number} position
           */

        }, {
          key: "insert",
          value: function insert(dm, data, tableName, query, position) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(position)) {
              return dm.dataSource.json.push(data);
            } else {
              return dm.dataSource.json.splice(position, 0, data);
            }
          }
          /**
           * Remove the data from the dataSource based on the key field value.
           * @param  {DataManager} dm
           * @param  {string} keyField
           * @param  {Object} value
           * @param  {string} tableName?
           * @returns null
           */

        }, {
          key: "remove",
          value: function remove(dm, keyField, value, tableName) {
            var ds = dm.dataSource.json;
            var i;

            if (typeof value === 'object' && !(value instanceof Date)) {
              value = DataUtil.getObject(keyField, value);
            }

            for (i = 0; i < ds.length; i++) {
              if (DataUtil.getObject(keyField, ds[i]) === value) {
                break;
              }
            }

            return i !== ds.length ? ds.splice(i, 1) : null;
          }
          /**
           * Updates existing record and saves the changes to the table.
           * @param  {DataManager} dm
           * @param  {string} keyField
           * @param  {Object} value
           * @param  {string} tableName?
           * @returns null
           */

        }, {
          key: "update",
          value: function update(dm, keyField, value, tableName) {
            var ds = dm.dataSource.json;
            var i;
            var key;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(keyField)) {
              key = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(keyField, value);
            }

            for (i = 0; i < ds.length; i++) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(keyField) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(keyField, ds[i]) === key) {
                break;
              }
            }

            return i < ds.length ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(ds[i], value) : null;
          }
        }]);

        return JsonAdaptor;
      }(Adaptor);
      /**
       * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.
       * It interacts with server-side for all DataManager Queries and CRUD operations.
       * @hidden
       */


      var UrlAdaptor = /*#__PURE__*/function (_Adaptor2) {
        _inherits2(UrlAdaptor, _Adaptor2);

        var _super37 = _createSuper(UrlAdaptor);

        function UrlAdaptor() {
          _classCallCheck2(this, UrlAdaptor);

          return _super37.apply(this, arguments);
        }

        _createClass2(UrlAdaptor, [{
          key: "processQuery",

          /**
           * Process the query to generate request body.
           * @param  {DataManager} dm
           * @param  {Query} query
           * @param  {Object[]} hierarchyFilters?
           * @returns p
           */
          value: function processQuery(dm, query, hierarchyFilters) {
            var queries = this.getQueryRequest(query);
            var singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);
            var params = query.params;
            var url = dm.dataSource.url;
            var temp;
            var skip;
            var take = null;
            var options = this.options;
            var request = {
              sorts: [],
              groups: [],
              filters: [],
              searches: [],
              aggregates: []
            }; // calc Paging & Range

            if ('onPage' in singles) {
              temp = singles.onPage;
              skip = DataUtil.getValue(temp.pageIndex, query);
              take = DataUtil.getValue(temp.pageSize, query);
              skip = (skip - 1) * take;
            } else if ('onRange' in singles) {
              temp = singles.onRange;
              skip = temp.start;
              take = temp.end - temp.start;
            } // Sorting


            for (var i = 0; i < queries.sorts.length; i++) {
              temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);
              request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', {
                name: temp,
                direction: queries.sorts[i].e.direction
              }, query));
            } // hierarchy


            if (hierarchyFilters) {
              temp = this.getFiltersFrom(hierarchyFilters, query);

              if (temp) {
                request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));
              }
            } // Filters


            for (var _i58 = 0; _i58 < queries.filters.length; _i58++) {
              request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[_i58].e.toJson(), query));

              var _keys15 = typeof request.filters[_i58] === 'object' ? Object.keys(request.filters[_i58]) : [];

              var _iterator52 = _createForOfIteratorHelper(_keys15),
                  _step52;

              try {
                for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
                  var prop = _step52.value;

                  if (DataUtil.isNull(request[prop])) {
                    delete request[prop];
                  }
                }
              } catch (err) {
                _iterator52.e(err);
              } finally {
                _iterator52.f();
              }
            } // Searches


            for (var _i59 = 0; _i59 < queries.searches.length; _i59++) {
              temp = queries.searches[_i59].e;
              request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {
                fields: temp.fieldNames,
                operator: temp.operator,
                key: temp.searchKey,
                ignoreCase: temp.ignoreCase
              }, query));
            } // Grouping


            for (var _i60 = 0; _i60 < queries.groups.length; _i60++) {
              request.groups.push(DataUtil.getValue(queries.groups[_i60].e.fieldName, query));
            } // aggregates


            for (var _i61 = 0; _i61 < queries.aggregates.length; _i61++) {
              temp = queries.aggregates[_i61].e;
              request.aggregates.push({
                type: temp.type,
                field: DataUtil.getValue(temp.field, query)
              });
            }

            var req = {};
            this.getRequestQuery(options, query, singles, request, req); // Params

            DataUtil.callAdaptorFunction(this, 'addParams', {
              dm: dm,
              query: query,
              params: params,
              reqParams: req
            }); // cleanup

            var keys = Object.keys(req);

            for (var _i62 = 0, _keys16 = keys; _i62 < _keys16.length; _i62++) {
              var _prop = _keys16[_i62];

              if (DataUtil.isNull(req[_prop]) || req[_prop] === '' || req[_prop].length === 0) {
                delete req[_prop];
              }
            }

            if (!(options.skip in req && options.take in req) && take !== null) {
              req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);
              req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);
            }

            var p = this.pvt;
            this.pvt = {};

            if (this.options.requestType === 'json') {
              return {
                data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),
                url: url,
                pvtData: p,
                type: 'POST',
                contentType: 'application/json; charset=utf-8'
              };
            }

            temp = this.convertToQueryString(req, query, dm);
            temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;
            return {
              type: 'GET',
              url: temp.length ? url.replace(/\/*$/, temp) : url,
              pvtData: p
            };
          }
        }, {
          key: "getRequestQuery",
          value: function getRequestQuery(options, query, singles, request, request1) {
            var param = 'param';
            var req = request1;
            req[options.from] = query.fromTable;

            if (options.apply && query.distincts.length) {
              req[options.apply] = 'onDistinct' in this ? DataUtil.callAdaptorFunction(this, 'onDistinct', query.distincts) : '';
            }

            if (!query.distincts.length && options.expand) {
              req[options.expand] = 'onExpand' in this && 'onSelect' in singles ? DataUtil.callAdaptorFunction(this, 'onExpand', {
                selects: DataUtil.getValue(singles.onSelect.fieldNames, query),
                expands: query.expands
              }, query) : query.expands;
            }

            req[options.select] = 'onSelect' in singles && !query.distincts.length ? DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';
            req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';
            req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';
            req[options.skip] = 'onSkip' in singles ? DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';
            req[options.take] = 'onTake' in singles ? DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';
            req[options.where] = request.filters.length || request.searches.length ? DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';
            req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';
            req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';
            req[options.aggregates] = request.aggregates.length ? DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';
            req[param] = [];
          }
          /**
           * Convert the object from processQuery to string which can be added query string.
           * @param  {Object} req
           * @param  {Query} query
           * @param  {DataManager} dm
           */

        }, {
          key: "convertToQueryString",
          value: function convertToQueryString(request, query, dm) {
            return ''; // this needs to be overridden
          }
          /**
           * Return the data from the data manager processing.
           * @param  {DataResult} data
           * @param  {DataOptions} ds?
           * @param  {Query} query?
           * @param  {XMLHttpRequest} xhr?
           * @param  {Object} request?
           * @param  {CrudOptions} changes?
           */

        }, {
          key: "processResponse",
          value: function processResponse(data, ds, query, xhr, request, changes) {
            if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('application/json') !== -1) {
              var handleTimeZone = DataUtil.timeZoneHandling;

              if (ds && !ds.timeZoneHandling) {
                DataUtil.timeZoneHandling = false;
              }

              data = DataUtil.parse.parseJson(data);
              DataUtil.timeZoneHandling = handleTimeZone;
            }

            var requests = request;
            var pvt = requests.pvtData || {};
            var groupDs = data ? data.groupDs : [];

            if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {
              return query.isCountRequired ? {
                result: [],
                count: 0
              } : [];
            }

            var d = JSON.parse(requests.data);

            if (d && d.action === 'batch' && data && data.addedRecords) {
              changes.addedRecords = data.addedRecords;
              return changes;
            }

            if (data && data.d) {
              data = data.d;
            }

            var args = {};

            if (data && 'count' in data) {
              args.count = data.count;
            }

            args.result = data && data.result ? data.result : data;
            this.getAggregateResult(pvt, data, args, groupDs, query);
            return DataUtil.isNull(args.count) ? args.result : {
              result: args.result,
              count: args.count,
              aggregates: args.aggregates
            };
          }
          /**
           * Add the group query to the adaptor`s option.
           * @param  {Object[]} e
           * @returns void
           */

        }, {
          key: "onGroup",
          value: function onGroup(e) {
            this.pvt.groups = e;
            return e;
          }
          /**
           * Add the aggregate query to the adaptor`s option.
           * @param  {Aggregates[]} e
           * @returns void
           */

        }, {
          key: "onAggregates",
          value: function onAggregates(e) {
            this.pvt.aggregates = e;
          }
          /**
           * Prepare the request body based on the newly added, removed and updated records.
           * The result is used by the batch request.
           * @param  {DataManager} dm
           * @param  {CrudOptions} changes
           * @param  {Object} e
           */

        }, {
          key: "batchRequest",
          value: function batchRequest(dm, changes, e, query, original) {
            var url;
            var key;
            return {
              type: 'POST',
              url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,
              contentType: 'application/json; charset=utf-8',
              dataType: 'json',
              data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
                changed: changes.changedRecords,
                added: changes.addedRecords,
                deleted: changes.deletedRecords,
                action: 'batch',
                table: e[url],
                key: e[key]
              }, DataUtil.getAddParams(this, dm, query)))
            };
          }
          /**
           * Method will trigger before send the request to server side.
           * Used to set the custom header or modify the request options.
           * @param  {DataManager} dm
           * @param  {XMLHttpRequest} request
           * @returns void
           */

        }, {
          key: "beforeSend",
          value: function beforeSend(dm, request) {// need to extend this method
          }
          /**
           * Prepare and returns request body which is used to insert a new record in the table.
           * @param  {DataManager} dm
           * @param  {Object} data
           * @param  {string} tableName
           */

        }, {
          key: "insert",
          value: function insert(dm, data, tableName, query) {
            return {
              url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
              data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
                value: data,
                table: tableName,
                action: 'insert'
              }, DataUtil.getAddParams(this, dm, query)))
            };
          }
          /**
           * Prepare and return request body which is used to remove record from the table.
           * @param  {DataManager} dm
           * @param  {string} keyField
           * @param  {number|string} value
           * @param  {string} tableName
           */

        }, {
          key: "remove",
          value: function remove(dm, keyField, value, tableName, query) {
            return {
              type: 'POST',
              url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
              data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
                key: value,
                keyColumn: keyField,
                table: tableName,
                action: 'remove'
              }, DataUtil.getAddParams(this, dm, query)))
            };
          }
          /**
           * Prepare and return request body which is used to update record.
           * @param  {DataManager} dm
           * @param  {string} keyField
           * @param  {Object} value
           * @param  {string} tableName
           */

        }, {
          key: "update",
          value: function update(dm, keyField, value, tableName, query) {
            return {
              type: 'POST',
              url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
              data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
                value: value,
                action: 'update',
                keyColumn: keyField,
                key: DataUtil.getObject(keyField, value),
                table: tableName
              }, DataUtil.getAddParams(this, dm, query)))
            };
          }
          /**
           * To generate the predicate based on the filtered query.
           * @param  {Object[]|string[]|number[]} data
           * @param  {Query} query
           * @hidden
           */

        }, {
          key: "getFiltersFrom",
          value: function getFiltersFrom(data, query) {
            var key = query.fKey;
            var value;
            var prop = key;
            var pKey = query.key;
            var predicats = [];

            if (typeof data[0] !== 'object') {
              prop = null;
            }

            for (var i = 0; i < data.length; i++) {
              if (typeof data[0] === 'object') {
                value = DataUtil.getObject(pKey || prop, data[i]);
              } else {
                value = data[i];
              }

              predicats.push(new Predicate(key, 'equal', value));
            }

            return Predicate.or(predicats);
          }
        }, {
          key: "getAggregateResult",
          value: function getAggregateResult(pvt, data, args, groupDs, query) {
            var pData = data;

            if (data && data.result) {
              pData = data.result;
            }

            if (pvt && pvt.aggregates && pvt.aggregates.length) {
              var agg = pvt.aggregates;
              var fn;
              var aggregateData = pData;
              var res = {};

              if (data.aggregate) {
                aggregateData = data.aggregate;
              }

              for (var i = 0; i < agg.length; i++) {
                fn = DataUtil.aggregates[agg[i].type];

                if (fn) {
                  res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);
                }
              }

              args.aggregates = res;
            }

            if (pvt && pvt.groups && pvt.groups.length) {
              var groups = pvt.groups;

              for (var _i63 = 0; _i63 < groups.length; _i63++) {
                var level = null;

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(groupDs)) {
                  groupDs = DataUtil.group(groupDs, groups[_i63]);
                }

                var groupQuery = Query.filterQueries(query.queries, 'onGroup')[_i63].e;

                pData = DataUtil.group(pData, groups[_i63], pvt.aggregates, level, groupDs, groupQuery.comparer);
              }

              args.result = pData;
            }

            return args;
          }
        }, {
          key: "getQueryRequest",
          value: function getQueryRequest(query) {
            var req = {
              sorts: [],
              groups: [],
              filters: [],
              searches: [],
              aggregates: []
            };
            req.sorts = Query.filterQueries(query.queries, 'onSortBy');
            req.groups = Query.filterQueries(query.queries, 'onGroup');
            req.filters = Query.filterQueries(query.queries, 'onWhere');
            req.searches = Query.filterQueries(query.queries, 'onSearch');
            req.aggregates = Query.filterQueries(query.queries, 'onAggregates');
            return req;
          }
        }, {
          key: "addParams",
          value: function addParams(options) {
            var req = options.reqParams;

            if (options.params.length) {
              req.params = {};
            }

            var _iterator53 = _createForOfIteratorHelper(options.params),
                _step53;

            try {
              for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
                var tmp = _step53.value;

                if (req[tmp.key]) {
                  throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');
                }

                req[tmp.key] = tmp.value;

                if (tmp.fn) {
                  req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);
                }

                req.params[tmp.key] = req[tmp.key];
              }
            } catch (err) {
              _iterator53.e(err);
            } finally {
              _iterator53.f();
            }
          }
        }]);

        return UrlAdaptor;
      }(Adaptor);
      /**
       * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.
       * @hidden
       */


      var ODataAdaptor = /*#__PURE__*/function (_UrlAdaptor) {
        _inherits2(ODataAdaptor, _UrlAdaptor);

        var _super38 = _createSuper(ODataAdaptor);

        function ODataAdaptor(props) {
          var _this112;

          _classCallCheck2(this, ODataAdaptor);

          _this112 = _super38.call(this); // options replaced the default adaptor options

          _this112.options = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, _this112.options, {
            requestType: 'get',
            accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',
            multipartAccept: 'multipart/mixed',
            sortBy: '$orderby',
            select: '$select',
            skip: '$skip',
            take: '$top',
            count: '$inlinecount',
            where: '$filter',
            expand: '$expand',
            batch: '$batch',
            changeSet: '--changeset_',
            batchPre: 'batch_',
            contentId: 'Content-Id: ',
            batchContent: 'Content-Type: multipart/mixed; boundary=',
            changeSetContent: 'Content-Type: application/http\nContent-Transfer-Encoding: binary ',
            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',
            updateType: 'PUT'
          });
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(_this112.options, props || {});
          return _this112;
        }

        _createClass2(ODataAdaptor, [{
          key: "getModuleName",
          value: function getModuleName() {
            return 'ODataAdaptor';
          }
          /**
           * Generate request string based on the filter criteria from query.
           * @param  {Predicate} pred
           * @param  {boolean} requiresCast?
           */

        }, {
          key: "onPredicate",
          value: function onPredicate(predicate, query, requiresCast) {
            var returnValue = '';
            var operator;
            var guid;
            var val = predicate.value;
            var type = typeof val;
            var field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;

            if (val instanceof Date) {
              val = 'datetime\'' + DataUtil.parse.replacer(val) + '\'';
            }

            if (type === 'string') {
              val = encodeURIComponent(val);
              val = '\'' + val + '\'';

              if (requiresCast) {
                field = 'cast(' + field + ', \'Edm.String\')';
              }

              if (DataUtil.parse.isGuid(val)) {
                guid = 'guid';
              }

              if (predicate.ignoreCase) {
                if (!guid) {
                  field = 'tolower(' + field + ')';
                }

                val = val.toLowerCase();
              }
            }

            operator = DataUtil.odBiOperator[predicate.operator];

            if (operator) {
              returnValue += field;
              returnValue += operator;

              if (guid) {
                returnValue += guid;
              }

              return returnValue + val;
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {
              operator = DataUtil.odv4UniOperator[predicate.operator];
            } else {
              operator = DataUtil.odUniOperator[predicate.operator];
            }

            if (operator === 'substringof') {
              var temp = val;
              val = field;
              field = temp;
            }

            returnValue += operator + '(';
            returnValue += field + ',';

            if (guid) {
              returnValue += guid;
            }

            returnValue += val + ')';
            return returnValue;
          }
        }, {
          key: "addParams",
          value: function addParams(options) {
            _get2(_getPrototypeOf2(ODataAdaptor.prototype), "addParams", this).call(this, options);

            delete options.reqParams.params;
          }
          /**
           * Generate request string based on the multiple filter criteria from query.
           * @param  {Predicate} pred
           * @param  {boolean} requiresCast?
           */

        }, {
          key: "onComplexPredicate",
          value: function onComplexPredicate(predicate, query, requiresCast) {
            var res = [];

            for (var i = 0; i < predicate.predicates.length; i++) {
              res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');
            }

            return res.join(' ' + predicate.condition + ' ');
          }
          /**
           * Generate query string based on the multiple filter criteria from query.
           * @param  {Predicate} filter
           * @param  {boolean} requiresCast?
           */

        }, {
          key: "onEachWhere",
          value: function onEachWhere(filter, query, requiresCast) {
            return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);
          }
          /**
           * Generate query string based on the multiple filter criteria from query.
           * @param  {string[]} filters
           */

        }, {
          key: "onWhere",
          value: function onWhere(filters) {
            if (this.pvt.search) {
              filters.push(this.onEachWhere(this.pvt.search, null, true));
            }

            return filters.join(' and ');
          }
          /**
           * Generate query string based on the multiple search criteria from query.
           * @param  {{fields:string[]} e
           * @param  {string} operator
           * @param  {string} key
           * @param  {boolean}} ignoreCase
           */

        }, {
          key: "onEachSearch",
          value: function onEachSearch(e) {
            if (e.fields && e.fields.length === 0) {
              DataUtil.throwError('Query() - Search : oData search requires list of field names to search');
            }

            var filter = this.pvt.search || [];

            for (var i = 0; i < e.fields.length; i++) {
              filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));
            }

            this.pvt.search = filter;
          }
          /**
           * Generate query string based on the search criteria from query.
           * @param  {Object} e
           */

        }, {
          key: "onSearch",
          value: function onSearch(e) {
            this.pvt.search = Predicate.or(this.pvt.search);
            return '';
          }
          /**
           * Generate query string based on multiple sort criteria from query.
           * @param  {QueryOptions} e
           */

        }, {
          key: "onEachSort",
          value: function onEachSort(e) {
            var res = [];

            if (e.name instanceof Array) {
              for (var i = 0; i < e.name.length; i++) {
                res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));
              }
            } else {
              res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));
            }

            return res.join(',');
          }
          /**
           * Returns sort query string.
           * @param  {string[]} e
           */

        }, {
          key: "onSortBy",
          value: function onSortBy(e) {
            return e.reverse().join(',');
          }
          /**
           * Adds the group query to the adaptor option.
           * @param  {Object[]} e
           * @returns string
           */

        }, {
          key: "onGroup",
          value: function onGroup(e) {
            this.pvt.groups = e;
            return [];
          }
          /**
           * Returns the select query string.
           * @param  {string[]} e
           */

        }, {
          key: "onSelect",
          value: function onSelect(e) {
            for (var i = 0; i < e.length; i++) {
              e[i] = ODataAdaptor.getField(e[i]);
            }

            return e.join(',');
          }
          /**
           * Add the aggregate query to the adaptor option.
           * @param  {Object[]} e
           * @returns string
           */

        }, {
          key: "onAggregates",
          value: function onAggregates(e) {
            this.pvt.aggregates = e;
            return '';
          }
          /**
           * Returns the query string which requests total count from the data source.
           * @param  {boolean} e
           * @returns string
           */

        }, {
          key: "onCount",
          value: function onCount(e) {
            return e === true ? 'allpages' : '';
          }
          /**
           * Method will trigger before send the request to server side.
           * Used to set the custom header or modify the request options.
           * @param  {DataManager} dm
           * @param  {XMLHttpRequest} request
           * @param  {Ajax} settings?
           */

        }, {
          key: "beforeSend",
          value: function beforeSend(dm, request, settings) {
            if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {
              request.setRequestHeader('Accept', this.options.multipartAccept);
              request.setRequestHeader('DataServiceVersion', '2.0');
              request.overrideMimeType('text/plain; charset=x-user-defined');
            } else {
              request.setRequestHeader('Accept', this.options.accept);
            }

            request.setRequestHeader('DataServiceVersion', '2.0');
            request.setRequestHeader('MaxDataServiceVersion', '2.0');
          }
          /**
           * Returns the data from the query processing.
           * @param  {DataResult} data
           * @param  {DataOptions} ds?
           * @param  {Query} query?
           * @param  {XMLHttpRequest} xhr?
           * @param  {Ajax} request?
           * @param  {CrudOptions} changes?
           * @returns aggregateResult
           */

        }, {
          key: "processResponse",
          value: function processResponse(data, ds, query, xhr, request, changes) {
            var metaCheck = 'odata.metadata';

            if (request && request.type === 'GET' && !this.rootUrl && data[metaCheck]) {
              var dataUrls = data[metaCheck].split('/$metadata#');
              this.rootUrl = dataUrls[0];
              this.resourceTableName = dataUrls[1];
            }

            var pvtData = 'pvtData';

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data.d)) {
              var dataCopy = query && query.isCountRequired ? data.d.results : data.d;
              var metaData = '__metadata';

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataCopy)) {
                for (var i = 0; i < dataCopy.length; i++) {
                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataCopy[i][metaData])) {
                    delete dataCopy[i][metaData];
                  }
                }
              }
            }

            var pvt = request && request[pvtData];
            var emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);

            if (emptyAndBatch) {
              return emptyAndBatch;
            }

            var versionCheck = xhr && request.getResponseHeader('DataServiceVersion');
            var count = null;
            var version = versionCheck && parseInt(versionCheck, 10) || 2;

            if (query && query.isCountRequired) {
              var oDataCount = '__count';

              if (data[oDataCount] || data['odata.count']) {
                count = data[oDataCount] || data['odata.count'];
              }

              if (data.d) {
                data = data.d;
              }

              if (data[oDataCount] || data['odata.count']) {
                count = data[oDataCount] || data['odata.count'];
              }
            }

            if (version === 3 && data.value) {
              data = data.value;
            }

            if (data.d) {
              data = data.d;
            }

            if (version < 3 && data.results) {
              data = data.results;
            }

            var args = {};
            args.count = count;
            args.result = data;
            this.getAggregateResult(pvt, data, args, null, query);
            return DataUtil.isNull(count) ? args.result : {
              result: args.result,
              count: args.count,
              aggregates: args.aggregates
            };
          }
          /**
           * Converts the request object to query string.
           * @param  {Object} req
           * @param  {Query} query
           * @param  {DataManager} dm
           * @returns tableName
           */

        }, {
          key: "convertToQueryString",
          value: function convertToQueryString(request, query, dm) {
            var res = [];
            var table = 'table';
            var tableName = request[table] || '';
            var format = '$format';
            delete request[table];

            if (dm.dataSource.requiresFormat) {
              request[format] = 'json';
            }

            var keys = Object.keys(request);

            for (var _i64 = 0, _keys17 = keys; _i64 < _keys17.length; _i64++) {
              var prop = _keys17[_i64];
              res.push(prop + '=' + request[prop]);
            }

            res = res.join('&');

            if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {
              return res;
            }

            return res.length ? tableName + '?' + res : tableName || '';
          }
        }, {
          key: "localTimeReplacer",
          value: function localTimeReplacer(key, convertObj) {
            var _iterator54 = _createForOfIteratorHelper(!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(convertObj) ? Object.keys(convertObj) : []),
                _step54;

            try {
              for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
                var prop = _step54.value;

                if (convertObj[prop] instanceof Date) {
                  convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);
                }
              }
            } catch (err) {
              _iterator54.e(err);
            } finally {
              _iterator54.f();
            }

            return convertObj;
          }
          /**
           * Prepare and returns request body which is used to insert a new record in the table.
           * @param  {DataManager} dm
           * @param  {Object} data
           * @param  {string} tableName?
           */

        }, {
          key: "insert",
          value: function insert(dm, data, tableName) {
            return {
              url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\/*$/, tableName ? '/' + tableName : ''),
              data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)
            };
          }
          /**
           * Prepare and return request body which is used to remove record from the table.
           * @param  {DataManager} dm
           * @param  {string} keyField
           * @param  {number} value
           * @param  {string} tableName?
           */

        }, {
          key: "remove",
          value: function remove(dm, keyField, value, tableName) {
            var url;

            if (typeof value === 'string' && !DataUtil.parse.isGuid(value)) {
              url = "('".concat(value, "')");
            } else {
              url = "(".concat(value, ")");
            }

            return {
              type: 'DELETE',
              url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\/*$/, tableName ? '/' + tableName : '') + url
            };
          }
          /**
           * Updates existing record and saves the changes to the table.
           * @param  {DataManager} dm
           * @param  {string} keyField
           * @param  {Object} value
           * @param  {string} tableName?
           * @returns this
           */

        }, {
          key: "update",
          value: function update(dm, keyField, value, tableName, query, original) {
            if (this.options.updateType === 'PATCH' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(original)) {
              value = this.compareAndRemove(value, original, keyField);
            }

            var url;

            if (typeof value[keyField] === 'string' && !DataUtil.parse.isGuid(value[keyField])) {
              url = "('".concat(value[keyField], "')");
            } else {
              url = "(".concat(value[keyField], ")");
            }

            return {
              type: this.options.updateType,
              url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\/*$/, tableName ? '/' + tableName : '') + url,
              data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),
              accept: this.options.accept
            };
          }
          /**
           * Prepare the request body based on the newly added, removed and updated records.
           * The result is used by the batch request.
           * @param  {DataManager} dm
           * @param  {CrudOptions} changes
           * @param  {RemoteArgs} e
           * @returns {Object}
           */

        }, {
          key: "batchRequest",
          value: function batchRequest(dm, changes, e, query, original) {
            var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);
            var url = this.rootUrl ? this.rootUrl + '/' + this.options.batch : dm.dataSource.url.replace(/\/*$/, '/' + this.options.batch);
            e.url = this.resourceTableName ? this.resourceTableName : e.url;
            var args = {
              url: e.url,
              key: e.key,
              cid: 1,
              cSet: DataUtil.getGuid(this.options.changeSet)
            };
            var req = '--' + initialGuid + '\n';
            req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\n';
            this.pvt.changeSet = 0;
            req += this.generateInsertRequest(changes.addedRecords, args, dm);
            req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);
            req += this.generateDeleteRequest(changes.deletedRecords, args, dm);
            req += args.cSet + '--\n';
            req += '--' + initialGuid + '--';
            return {
              type: 'POST',
              url: url,
              dataType: 'json',
              contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,
              data: req
            };
          }
          /**
           * Generate the string content from the removed records.
           * The result will be send during batch update.
           * @param  {Object[]} arr
           * @param  {RemoteArgs} e
           * @returns this
           */

        }, {
          key: "generateDeleteRequest",
          value: function generateDeleteRequest(arr, e, dm) {
            if (!arr) {
              return '';
            }

            var req = '';
            var stat = {
              'method': 'DELETE ',
              'url': function url(data, i, key) {
                var url = DataUtil.getObject(key, data[i]);

                if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {
                  return '(' + url + ')';
                } else if (url instanceof Date) {
                  var dateTime = data[i][key];
                  return '(' + dateTime.toJSON() + ')';
                } else {
                  return "('".concat(url, "')");
                }
              },
              'data': function data(_data2, i) {
                return '';
              }
            };
            req = this.generateBodyContent(arr, e, stat, dm);
            return req + '\n';
          }
          /**
           * Generate the string content from the inserted records.
           * The result will be send during batch update.
           * @param  {Object[]} arr
           * @param  {RemoteArgs} e
           */

        }, {
          key: "generateInsertRequest",
          value: function generateInsertRequest(arr, e, dm) {
            if (!arr) {
              return '';
            }

            var req = '';
            var stat = {
              'method': 'POST ',
              'url': function url(data, i, key) {
                return '';
              },
              'data': function data(_data3, i) {
                return JSON.stringify(_data3[i]) + '\n\n';
              }
            };
            req = this.generateBodyContent(arr, e, stat, dm);
            return req;
          }
          /**
           * Generate the string content from the updated records.
           * The result will be send during batch update.
           * @param  {Object[]} arr
           * @param  {RemoteArgs} e
           */

        }, {
          key: "generateUpdateRequest",
          value: function generateUpdateRequest(arr, e, dm, org) {
            var _this113 = this;

            if (!arr) {
              return '';
            }

            var req = '';
            arr.forEach(function (change) {
              return change = _this113.compareAndRemove(change, org.filter(function (o) {
                return DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change);
              })[0], e.key);
            });
            var stat = {
              'method': this.options.updateType + ' ',
              'url': function url(data, i, key) {
                if (typeof data[i][key] === 'number' || DataUtil.parse.isGuid(data[i][key])) {
                  return '(' + data[i][key] + ')';
                } else if (data[i][key] instanceof Date) {
                  var date = data[i][key];
                  return '(' + date.toJSON() + ')';
                } else {
                  return "('".concat(data[i][key], "')");
                }
              },
              'data': function data(_data4, i) {
                return JSON.stringify(_data4[i]) + '\n\n';
              }
            };
            req = this.generateBodyContent(arr, e, stat, dm);
            return req;
          }
        }, {
          key: "generateBodyContent",
          value: function generateBodyContent(arr, e, stat, dm) {
            var req = '';

            for (var i = 0; i < arr.length; i++) {
              req += '\n' + e.cSet + '\n';
              req += this.options.changeSetContent + '\n\n';
              req += stat.method;

              if (stat.method === 'POST ') {
                req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\n';
              } else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {
                req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\n';
              } else if (stat.method === 'DELETE ') {
                req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\n';
              }

              req += 'Accept: ' + this.options.accept + '\n';
              req += 'Content-Id: ' + this.pvt.changeSet++ + '\n';
              req += this.options.batchChangeSetContentType + '\n';

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(arr[i]['@odata.etag'])) {
                req += 'If-Match: ' + arr[i]['@odata.etag'] + '\n\n';
                delete arr[i]['@odata.etag'];
              } else {
                req += '\n';
              }

              req += stat.data(arr, i);
            }

            return req;
          }
        }, {
          key: "processBatchResponse",
          value: function processBatchResponse(data, query, xhr, request, changes) {
            if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {
              return query.isCountRequired ? {
                result: [],
                count: 0
              } : [];
            }

            if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {
              var guid = xhr.getResponseHeader('Content-Type');
              var cIdx;
              var jsonObj;
              var d = data + '';
              guid = guid.substring(guid.indexOf('=batchresponse') + 1);
              d = d.split(guid);

              if (d.length < 2) {
                return {};
              }

              d = d[1];
              var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);

              if (exVal) {
                d.replace(exVal[0], '');
              }

              var changeGuid = exVal ? exVal[1] : '';
              d = d.split(changeGuid);

              for (var i = d.length; i > -1; i--) {
                if (!/\bContent-ID:/i.test(d[i]) || !/\bHTTP.+201/.test(d[i])) {
                  continue;
                }

                cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(d[i])[1], 10);

                if (changes.addedRecords[cIdx]) {
                  jsonObj = DataUtil.parse.parseJson(/^\{.+\}/m.exec(d[i])[0]);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));
                }
              }

              return changes;
            }

            return null;
          }
        }, {
          key: "compareAndRemove",
          value: function compareAndRemove(data, original, key) {
            var _this114 = this;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(original)) {
              return data;
            }

            Object.keys(data).forEach(function (prop) {
              if (prop !== key && prop !== '@odata.etag') {
                if (DataUtil.isPlainObject(data[prop])) {
                  _this114.compareAndRemove(data[prop], original[prop]);

                  var _final = Object.keys(data[prop]).filter(function (data) {
                    return data !== '@odata.etag';
                  });

                  if (_final.length === 0) {
                    delete data[prop];
                  }
                } else if (data[prop] === original[prop]) {
                  delete data[prop];
                } else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {
                  delete data[prop];
                }
              }
            });
            return data;
          }
        }], [{
          key: "getField",
          value: function getField(prop) {
            return prop.replace(/\./g, '/');
          }
        }]);

        return ODataAdaptor;
      }(UrlAdaptor);
      /**
       * The OData v4 is an improved version of OData protocols.
       * The DataManager uses the ODataV4Adaptor to consume OData v4 services.
       * @hidden
       */


      var ODataV4Adaptor = /*#__PURE__*/function (_ODataAdaptor) {
        _inherits2(ODataV4Adaptor, _ODataAdaptor);

        var _super39 = _createSuper(ODataV4Adaptor);

        function ODataV4Adaptor(props) {
          var _this115;

          _classCallCheck2(this, ODataV4Adaptor);

          _this115 = _super39.call(this, props); // options replaced the default adaptor options

          _this115.options = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, _this115.options, {
            requestType: 'get',
            accept: 'application/json, text/javascript, */*; q=0.01',
            multipartAccept: 'multipart/mixed',
            sortBy: '$orderby',
            select: '$select',
            skip: '$skip',
            take: '$top',
            count: '$count',
            search: '$search',
            where: '$filter',
            expand: '$expand',
            batch: '$batch',
            changeSet: '--changeset_',
            batchPre: 'batch_',
            contentId: 'Content-Id: ',
            batchContent: 'Content-Type: multipart/mixed; boundary=',
            changeSetContent: 'Content-Type: application/http\nContent-Transfer-Encoding: binary ',
            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',
            updateType: 'PATCH',
            localTime: false,
            apply: '$apply'
          });
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(_this115.options, props || {});
          return _this115;
        }
        /**
         * @hidden
         */


        _createClass2(ODataV4Adaptor, [{
          key: "getModuleName",
          value: function getModuleName() {
            return 'ODataV4Adaptor';
          }
          /**
           * Returns the query string which requests total count from the data source.
           * @param  {boolean} e
           * @returns string
           */

        }, {
          key: "onCount",
          value: function onCount(e) {
            return e === true ? 'true' : '';
          }
          /**
           * Generate request string based on the filter criteria from query.
           * @param  {Predicate} pred
           * @param  {boolean} requiresCast?
           */

        }, {
          key: "onPredicate",
          value: function onPredicate(predicate, query, requiresCast) {
            var returnValue = '';
            var val = predicate.value;
            var isDate = val instanceof Date;

            if (query instanceof Query) {
              var queries = this.getQueryRequest(query);

              for (var i = 0; i < queries.filters.length; i++) {
                if (queries.filters[i].e.key === predicate.value) {
                  requiresCast = true;
                }
              }
            }

            returnValue = _get2(_getPrototypeOf2(ODataV4Adaptor.prototype), "onPredicate", this).call(this, predicate, query, requiresCast);

            if (isDate) {
              returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');
            }

            if (DataUtil.parse.isGuid(val)) {
              returnValue = returnValue.replace('guid', '').replace(/'/g, '');
            }

            return returnValue;
          }
          /**
           *  Generate query string based on the multiple search criteria from query.
           * @param  {{fields:string[]} e
           * @param  {string} operator
           * @param  {string} key
           * @param  {boolean}} ignoreCase
           */

        }, {
          key: "onEachSearch",
          value: function onEachSearch(e) {
            var search = this.pvt.searches || [];
            search.push(e.key);
            this.pvt.searches = search;
          }
          /**
           *  Generate query string based on the search criteria from query.
           * @param  {Object} e
           */

        }, {
          key: "onSearch",
          value: function onSearch(e) {
            return this.pvt.searches.join(' OR ');
          }
          /**
           * Returns the expand query string.
           * @param  {string} e
           */

        }, {
          key: "onExpand",
          value: function onExpand(e) {
            var _this116 = this;

            var selected = {};
            var expanded = {};
            var expands = e.expands.slice();
            var exArr = [];
            var selects = e.selects.filter(function (item) {
              return item.indexOf('.') > -1;
            });
            selects.forEach(function (select) {
              var splits = select.split('.');

              if (!(splits[0] in selected)) {
                selected[splits[0]] = [];
              }

              selected[splits[0]].push(splits[1]);
            }); //Auto expand from select query

            Object.keys(selected).forEach(function (expand) {
              if (expands.indexOf(expand) === -1) {
                expands.push(expand);
              }
            });
            expands.forEach(function (expand) {
              expanded[expand] = expand in selected ? "".concat(expand, "(").concat(_this116.options.select, "=").concat(selected[expand].join(','), ")") : expand;
            });
            Object.keys(expanded).forEach(function (ex) {
              return exArr.push(expanded[ex]);
            });
            return exArr.join(',');
          }
          /**
           * Returns the groupby query string.
           * @param  {string} e
           */

        }, {
          key: "onDistinct",
          value: function onDistinct(distinctFields) {
            var fields = distinctFields.map(function (field) {
              return ODataAdaptor.getField(field);
            }).join(',');
            return "groupby((".concat(fields, "))");
          }
          /**
           * Returns the select query string.
           * @param  {string[]} e
           */

        }, {
          key: "onSelect",
          value: function onSelect(e) {
            return _get2(_getPrototypeOf2(ODataV4Adaptor.prototype), "onSelect", this).call(this, e.filter(function (item) {
              return item.indexOf('.') === -1;
            }));
          }
          /**
           * Method will trigger before send the request to server side.
           * Used to set the custom header or modify the request options.
           * @param  {DataManager} dm
           * @param  {XMLHttpRequest} request
           * @param  {Ajax} settings
           * @returns void
           */

        }, {
          key: "beforeSend",
          value: function beforeSend(dm, request, settings) {
            if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {
              request.setRequestHeader('Prefer', 'return=representation');
            }

            request.setRequestHeader('Accept', this.options.accept);
          }
          /**
           * Returns the data from the query processing.
           * @param  {DataResult} data
           * @param  {DataOptions} ds?
           * @param  {Query} query?
           * @param  {XMLHttpRequest} xhr?
           * @param  {Ajax} request?
           * @param  {CrudOptions} changes?
           * @returns aggregateResult
           */

        }, {
          key: "processResponse",
          value: function processResponse(data, ds, query, xhr, request, changes) {
            var metaName = '@odata.context';

            if (request && request.type === 'GET' && !this.rootUrl && data[metaName]) {
              var dataUrl = data[metaName].split('/$metadata#');
              this.rootUrl = dataUrl[0];
              this.resourceTableName = dataUrl[1];
            }

            var pvtData = 'pvtData';
            var pvt = request && request[pvtData];

            var emptyAndBatch = _get2(_getPrototypeOf2(ODataV4Adaptor.prototype), "processBatchResponse", this).call(this, data, query, xhr, request, changes);

            if (emptyAndBatch) {
              return emptyAndBatch;
            }

            var count = null;
            var dataCount = '@odata.count';

            if (query && query.isCountRequired) {
              if (dataCount in data) {
                count = data[dataCount];
              }
            }

            data = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data.value) ? data.value : data;
            var args = {};
            args.count = count;
            args.result = data;
            this.getAggregateResult(pvt, data, args, null, query);
            return DataUtil.isNull(count) ? args.result : {
              result: args.result,
              count: count,
              aggregates: args.aggregates
            };
          }
        }]);

        return ODataV4Adaptor;
      }(ODataAdaptor);
      /**
       * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.
       * The DataManager uses the WebApiAdaptor to consume Web API.
       * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
       * @hidden
       */


      var WebApiAdaptor = /*#__PURE__*/function (_ODataAdaptor2) {
        _inherits2(WebApiAdaptor, _ODataAdaptor2);

        var _super40 = _createSuper(WebApiAdaptor);

        function WebApiAdaptor() {
          _classCallCheck2(this, WebApiAdaptor);

          return _super40.apply(this, arguments);
        }

        _createClass2(WebApiAdaptor, [{
          key: "getModuleName",
          value: function getModuleName() {
            return 'WebApiAdaptor';
          }
          /**
           * Prepare and returns request body which is used to insert a new record in the table.
           * @param  {DataManager} dm
           * @param  {Object} data
           * @param  {string} tableName?
           */

        }, {
          key: "insert",
          value: function insert(dm, data, tableName) {
            return {
              type: 'POST',
              url: dm.dataSource.url,
              data: JSON.stringify(data)
            };
          }
          /**
           * Prepare and return request body which is used to remove record from the table.
           * @param  {DataManager} dm
           * @param  {string} keyField
           * @param  {number} value
           * @param  {string} tableName?
           */

        }, {
          key: "remove",
          value: function remove(dm, keyField, value, tableName) {
            return {
              type: 'DELETE',
              url: dm.dataSource.url + '/' + value,
              data: JSON.stringify(value)
            };
          }
          /**
           * Prepare and return request body which is used to update record.
           * @param  {DataManager} dm
           * @param  {string} keyField
           * @param  {Object} value
           * @param  {string} tableName?
           */

        }, {
          key: "update",
          value: function update(dm, keyField, value, tableName) {
            return {
              type: 'PUT',
              url: dm.dataSource.url,
              data: JSON.stringify(value)
            };
          }
        }, {
          key: "batchRequest",
          value: function batchRequest(dm, changes, e) {
            var _this117 = this;

            var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);
            var url = dm.dataSource.url.replace(/\/*$/, '/' + this.options.batch);
            e.url = this.resourceTableName ? this.resourceTableName : e.url;
            var req = []; //insertion

            var _loop12 = function _loop12(i, x) {
              changes.addedRecords.forEach(function (j, d) {
                var stat = {
                  'method': 'POST ',
                  'url': function url(data, i, key) {
                    return '';
                  },
                  'data': function data(_data5, i) {
                    return JSON.stringify(_data5[i]) + '\n\n';
                  }
                };
                req.push('--' + initialGuid);
                req.push('Content-Type: application/http; msgtype=request', '');
                req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');
                req.push('Content-Type: ' + 'application/json; charset=utf-8');
                req.push('Host: ' + location.host);
                req.push('', j ? JSON.stringify(j) : '');
              });
            };

            for (var i = 0, x = changes.addedRecords.length; i < x; i++) {
              _loop12(i, x);
            } //updation 


            var _loop13 = function _loop13(_i65, _x) {
              changes.changedRecords.forEach(function (j, d) {
                var stat = {
                  'method': _this117.options.updateType + ' ',
                  'url': function url(data, i, key) {
                    return '';
                  },
                  'data': function data(_data6, i) {
                    return JSON.stringify(_data6[i]) + '\n\n';
                  }
                };
                req.push('--' + initialGuid);
                req.push('Content-Type: application/http; msgtype=request', '');
                req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.changedRecords, _i65, e.key) + ' HTTP/1.1');
                req.push('Content-Type: ' + 'application/json; charset=utf-8');
                req.push('Host: ' + location.host);
                req.push('', j ? JSON.stringify(j) : '');
              });
            };

            for (var _i65 = 0, _x = changes.changedRecords.length; _i65 < _x; _i65++) {
              _loop13(_i65, _x);
            } //deletion


            var _loop14 = function _loop14(_i66, _x2) {
              changes.deletedRecords.forEach(function (j, d) {
                var state = {
                  'mtd': 'DELETE ',
                  'url': function url(data, i, key) {
                    var url = DataUtil.getObject(key, data[i]);

                    if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {
                      return '/' + url;
                    } else if (url instanceof Date) {
                      var datTime = data[i][key];
                      return '/' + datTime.toJSON();
                    } else {
                      return "/'".concat(url, "'");
                    }
                  },
                  'data': function data(_data7, i) {
                    return '';
                  }
                };
                req.push('--' + initialGuid);
                req.push('Content-Type: application/http; msgtype=request', '');
                req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + state.url(changes.deletedRecords, _i66, e.key) + ' HTTP/1.1');
                req.push('Content-Type: ' + 'application/json; charset=utf-8');
                req.push('Host: ' + location.host);
                req.push('', j ? JSON.stringify(j) : '');
              });
            };

            for (var _i66 = 0, _x2 = changes.deletedRecords.length; _i66 < _x2; _i66++) {
              _loop14(_i66, _x2);
            }

            req.push('--' + initialGuid + '--', '');
            return {
              type: 'POST',
              url: url,
              contentType: 'multipart/mixed; boundary=' + initialGuid,
              data: req.join('\r\n')
            };
          }
          /**
           * Method will trigger before send the request to server side.
           * Used to set the custom header or modify the request options.
           * @param  {DataManager} dm
           * @param  {XMLHttpRequest} request
           * @param  {Ajax} settings
           * @returns void
           */

        }, {
          key: "beforeSend",
          value: function beforeSend(dm, request, settings) {
            request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');
          }
          /**
           * Returns the data from the query processing.
           * @param  {DataResult} data
           * @param  {DataOptions} ds?
           * @param  {Query} query?
           * @param  {XMLHttpRequest} xhr?
           * @param  {Ajax} request?
           * @param  {CrudOptions} changes?
           * @returns aggregateResult
           */

        }, {
          key: "processResponse",
          value: function processResponse(data, ds, query, xhr, request, changes) {
            var pvtData = 'pvtData';
            var pvt = request && request[pvtData];
            var count = null;
            var args = {};

            if (request && request.type.toLowerCase() !== 'post') {
              var versionCheck = xhr && request.getResponseHeader('DataServiceVersion');
              var version = versionCheck && parseInt(versionCheck, 10) || 2;

              if (query && query.isCountRequired) {
                if (!DataUtil.isNull(data.Count)) {
                  count = data.Count;
                }
              }

              if (version < 3 && data.Items) {
                data = data.Items;
              }

              args.count = count;
              args.result = data;
              this.getAggregateResult(pvt, data, args, null, query);
            }

            args.result = args.result || data;
            return DataUtil.isNull(count) ? args.result : {
              result: args.result,
              count: args.count,
              aggregates: args.aggregates
            };
          }
        }]);

        return WebApiAdaptor;
      }(ODataAdaptor);
      /**
       * WebMethodAdaptor can be used by DataManager to interact with web method.
       * @hidden
       */


      var WebMethodAdaptor = /*#__PURE__*/function (_UrlAdaptor2) {
        _inherits2(WebMethodAdaptor, _UrlAdaptor2);

        var _super41 = _createSuper(WebMethodAdaptor);

        function WebMethodAdaptor() {
          _classCallCheck2(this, WebMethodAdaptor);

          return _super41.apply(this, arguments);
        }

        _createClass2(WebMethodAdaptor, [{
          key: "processQuery",

          /**
           * Prepare the request body based on the query.
           * The query information can be accessed at the WebMethod using variable named `value`.
           * @param  {DataManager} dm
           * @param  {Query} query
           * @param  {Object[]} hierarchyFilters?
           * @returns application
           */
          value: function processQuery(dm, query, hierarchyFilters) {
            var obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);
            var getData = 'data';
            var data = DataUtil.parse.parseJson(obj[getData]);
            var result = {};
            var value = 'value';

            if (data.param) {
              for (var i = 0; i < data.param.length; i++) {
                var param = data.param[i];
                var key = Object.keys(param)[0];
                result[key] = param[key];
              }
            }

            result[value] = data;
            var pvtData = 'pvtData';
            var url = 'url';
            return {
              data: JSON.stringify(result),
              url: obj[url],
              pvtData: obj[pvtData],
              type: 'POST',
              contentType: 'application/json; charset=utf-8'
            };
          }
        }]);

        return WebMethodAdaptor;
      }(UrlAdaptor);
      /**
       * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.
       * It interacts with server-side only for CRUD operations.
       * @hidden
       */


      var RemoteSaveAdaptor = /*#__PURE__*/function (_JsonAdaptor) {
        _inherits2(RemoteSaveAdaptor, _JsonAdaptor);

        var _super42 = _createSuper(RemoteSaveAdaptor);

        /**
         * @hidden
         */
        function RemoteSaveAdaptor() {
          var _this118;

          _classCallCheck2(this, RemoteSaveAdaptor);

          _this118 = _super42.call(this);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('beforeSend', UrlAdaptor.prototype.beforeSend, _assertThisInitialized2(_this118));
          return _this118;
        }

        _createClass2(RemoteSaveAdaptor, [{
          key: "insert",
          value: function insert(dm, data, tableName, query, position) {
            this.pvt.position = position;
            this.updateType = 'add';
            return {
              url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
              data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
                value: data,
                table: tableName,
                action: 'insert'
              }, DataUtil.getAddParams(this, dm, query)))
            };
          }
        }, {
          key: "remove",
          value: function remove(dm, keyField, val, tableName, query) {
            _get2(_getPrototypeOf2(RemoteSaveAdaptor.prototype), "remove", this).call(this, dm, keyField, val);

            return {
              type: 'POST',
              url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
              data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
                key: val,
                keyColumn: keyField,
                table: tableName,
                action: 'remove'
              }, DataUtil.getAddParams(this, dm, query)))
            };
          }
        }, {
          key: "update",
          value: function update(dm, keyField, val, tableName, query) {
            this.updateType = 'update';
            this.updateKey = keyField;
            return {
              type: 'POST',
              url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
              data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
                value: val,
                action: 'update',
                keyColumn: keyField,
                key: val[keyField],
                table: tableName
              }, DataUtil.getAddParams(this, dm, query)))
            };
          }
        }, {
          key: "processResponse",
          value: function processResponse(data, ds, query, xhr, request, changes, e) {
            var i;

            if (this.updateType === 'add') {
              _get2(_getPrototypeOf2(RemoteSaveAdaptor.prototype), "insert", this).call(this, ds, data, null, null, this.pvt.position);
            }

            if (this.updateType === 'update') {
              _get2(_getPrototypeOf2(RemoteSaveAdaptor.prototype), "update", this).call(this, ds, this.updateKey, data);
            }

            this.updateType = undefined;

            if (data.added) {
              for (i = 0; i < data.added.length; i++) {
                _get2(_getPrototypeOf2(RemoteSaveAdaptor.prototype), "insert", this).call(this, ds, data.added[i]);
              }
            }

            if (data.changed) {
              for (i = 0; i < data.changed.length; i++) {
                _get2(_getPrototypeOf2(RemoteSaveAdaptor.prototype), "update", this).call(this, ds, e.key, data.changed[i]);
              }
            }

            if (data.deleted) {
              for (i = 0; i < data.deleted.length; i++) {
                _get2(_getPrototypeOf2(RemoteSaveAdaptor.prototype), "remove", this).call(this, ds, e.key, data.deleted[i]);
              }
            }

            return data;
          }
          /**
           * Prepare the request body based on the newly added, removed and updated records.
           * Also perform the changes in the locally cached data to sync with the remote data.
           * The result is used by the batch request.
           * @param  {DataManager} dm
           * @param  {CrudOptions} changes
           * @param  {RemoteArgs} e
           */

        }, {
          key: "batchRequest",
          value: function batchRequest(dm, changes, e, query, original) {
            return {
              type: 'POST',
              url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
              contentType: 'application/json; charset=utf-8',
              dataType: 'json',
              data: JSON.stringify(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
                changed: changes.changedRecords,
                added: changes.addedRecords,
                deleted: changes.deletedRecords,
                action: 'batch',
                table: e.url,
                key: e.key
              }, DataUtil.getAddParams(this, dm, query)))
            };
          }
        }, {
          key: "addParams",
          value: function addParams(options) {
            var urlParams = new UrlAdaptor();
            urlParams.addParams(options);
          }
        }]);

        return RemoteSaveAdaptor;
      }(JsonAdaptor);
      /**
       * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.
       * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager
       * @hidden
       */


      var CacheAdaptor = /*#__PURE__*/function (_UrlAdaptor3) {
        _inherits2(CacheAdaptor, _UrlAdaptor3);

        var _super43 = _createSuper(CacheAdaptor);

        /**
         * Constructor for CacheAdaptor class.
         * @param  {CacheAdaptor} adaptor?
         * @param  {number} timeStamp?
         * @param  {number} pageSize?
         * @hidden
         */
        function CacheAdaptor(adaptor, timeStamp, pageSize) {
          var _this119;

          _classCallCheck2(this, CacheAdaptor);

          _this119 = _super43.call(this);
          _this119.isCrudAction = false;
          _this119.isInsertAction = false;

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(adaptor)) {
            _this119.cacheAdaptor = adaptor;
          }

          _this119.pageSize = pageSize;
          _this119.guidId = DataUtil.getGuid('cacheAdaptor');
          var obj = {
            keys: [],
            results: []
          };
          window.localStorage.setItem(_this119.guidId, JSON.stringify(obj));
          var guid = _this119.guidId;

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(timeStamp)) {
            setInterval(function () {
              var data;
              data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));
              var forDel = [];

              for (var i = 0; i < data.results.length; i++) {
                var currentTime = +new Date();
                var requestTime = +new Date(data.results[i].timeStamp);
                data.results[i].timeStamp = currentTime - requestTime;

                if (currentTime - requestTime > timeStamp) {
                  forDel.push(i);
                }
              }

              for (var _i67 = 0; _i67 < forDel.length; _i67++) {
                data.results.splice(forDel[_i67], 1);
                data.keys.splice(forDel[_i67], 1);
              }

              window.localStorage.removeItem(guid);
              window.localStorage.setItem(guid, JSON.stringify(data));
            }, timeStamp);
          }

          return _this119;
        }
        /**
         * It will generate the key based on the URL when we send a request to server.
         * @param  {string} url
         * @param  {Query} query?
         * @hidden
         */


        _createClass2(CacheAdaptor, [{
          key: "generateKey",
          value: function generateKey(url, query) {
            var queries = this.getQueryRequest(query);
            var singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);
            var key = url;
            var page = 'onPage';

            if (page in singles) {
              key += singles[page].pageIndex;
            }

            queries.sorts.forEach(function (obj) {
              key += obj.e.direction + obj.e.fieldName;
            });
            queries.groups.forEach(function (obj) {
              key += obj.e.fieldName;
            });
            queries.searches.forEach(function (obj) {
              key += obj.e.searchKey;
            });

            for (var filter = 0; filter < queries.filters.length; filter++) {
              var currentFilter = queries.filters[filter];

              if (currentFilter.e.isComplex) {
                var newQuery = query.clone();
                newQuery.queries = [];

                for (var i = 0; i < currentFilter.e.predicates.length; i++) {
                  newQuery.queries.push({
                    fn: 'onWhere',
                    e: currentFilter.e.predicates[i],
                    filter: query.queries.filter
                  });
                }

                key += currentFilter.e.condition + this.generateKey(url, newQuery);
              } else {
                key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;
              }
            }

            return key;
          }
          /**
           * Process the query to generate request body.
           * If the data is already cached, it will return the cached data.
           * @param  {DataManager} dm
           * @param  {Query} query?
           * @param  {Object[]} hierarchyFilters?
           */

        }, {
          key: "processQuery",
          value: function processQuery(dm, query, hierarchyFilters) {
            var key = this.generateKey(dm.dataSource.url, query);
            var cachedItems;
            cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));
            var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;

            if (data != null && !this.isCrudAction && !this.isInsertAction) {
              return data;
            }

            this.isCrudAction = null;
            this.isInsertAction = null;
            return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
          }
          /**
           * Returns the data from the query processing.
           * It will also cache the data for later usage.
           * @param  {DataResult} data
           * @param  {DataManager} ds?
           * @param  {Query} query?
           * @param  {XMLHttpRequest} xhr?
           * @param  {Ajax} request?
           * @param  {CrudOptions} changes?
           */

        }, {
          key: "processResponse",
          value: function processResponse(data, ds, query, xhr, request, changes) {
            if (this.isInsertAction || request && this.cacheAdaptor.options.batch && DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post') {
              return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);
            }

            data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
            var key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;
            var obj = {};
            obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));
            var index = obj.keys.indexOf(key);

            if (index !== -1) {
              obj.results.splice(index, 1);
              obj.keys.splice(index, 1);
            }

            obj.results[obj.keys.push(key) - 1] = {
              keys: key,
              result: data.result,
              timeStamp: new Date(),
              count: data.count
            };

            while (obj.results.length > this.pageSize) {
              obj.results.splice(0, 1);
              obj.keys.splice(0, 1);
            }

            window.localStorage.setItem(this.guidId, JSON.stringify(obj));
            return data;
          }
          /**
           * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.
           * @param  {DataManager} dm
           * @param  {XMLHttpRequest} request
           * @param  {Ajax} settings?
           */

        }, {
          key: "beforeSend",
          value: function beforeSend(dm, request, settings) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch) && settings.type.toLowerCase() === 'post') {
              request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);
            }

            if (!dm.dataSource.crossDomain) {
              request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);
            }
          }
          /**
           * Updates existing record and saves the changes to the table.
           * @param  {DataManager} dm
           * @param  {string} keyField
           * @param  {Object} value
           * @param  {string} tableName
           */

        }, {
          key: "update",
          value: function update(dm, keyField, value, tableName) {
            this.isCrudAction = true;
            return this.cacheAdaptor.update(dm, keyField, value, tableName);
          }
          /**
           * Prepare and returns request body which is used to insert a new record in the table.
           * @param  {DataManager} dm
           * @param  {Object} data
           * @param  {string} tableName?
           */

        }, {
          key: "insert",
          value: function insert(dm, data, tableName) {
            this.isInsertAction = true;
            return this.cacheAdaptor.insert(dm, data, tableName);
          }
          /**
           * Prepare and return request body which is used to remove record from the table.
           * @param  {DataManager} dm
           * @param  {string} keyField
           * @param  {Object} value
           * @param  {string} tableName?
           */

        }, {
          key: "remove",
          value: function remove(dm, keyField, value, tableName) {
            this.isCrudAction = true;
            return this.cacheAdaptor.remove(dm, keyField, value, tableName);
          }
          /**
           * Prepare the request body based on the newly added, removed and updated records.
           * The result is used by the batch request.
           * @param  {DataManager} dm
           * @param  {CrudOptions} changes
           * @param  {RemoteArgs} e
           */

        }, {
          key: "batchRequest",
          value: function batchRequest(dm, changes, e) {
            return this.cacheAdaptor.batchRequest(dm, changes, e);
          }
        }]);

        return CacheAdaptor;
      }(UrlAdaptor);
      /**
       * DataManager is used to manage and manipulate relational data.
       */


      var DataManager = /*#__PURE__*/function () {
        /**
         * Constructor for DataManager class
         * @param  {DataOptions|JSON[]} dataSource?
         * @param  {Query} query?
         * @param  {AdaptorOptions|string} adaptor?
         * @hidden
         */
        function DataManager(dataSource, query, adaptor) {
          var _this120 = this;

          _classCallCheck2(this, DataManager);

          /** @hidden */
          this.dateParse = true;
          /** @hidden */

          this.timeZoneHandling = true;
          this.requests = [];

          if (!dataSource && !this.dataSource) {
            dataSource = [];
          }

          adaptor = adaptor || dataSource.adaptor;

          if (dataSource && dataSource.timeZoneHandling === false) {
            this.timeZoneHandling = dataSource.timeZoneHandling;
          }

          var data;

          if (dataSource instanceof Array) {
            data = {
              json: dataSource,
              offline: true
            };
          } else if (typeof dataSource === 'object') {
            if (!dataSource.json) {
              dataSource.json = [];
            }

            data = {
              url: dataSource.url,
              insertUrl: dataSource.insertUrl,
              removeUrl: dataSource.removeUrl,
              updateUrl: dataSource.updateUrl,
              crudUrl: dataSource.crudUrl,
              batchUrl: dataSource.batchUrl,
              json: dataSource.json,
              headers: dataSource.headers,
              accept: dataSource.accept,
              data: dataSource.data,
              timeTillExpiration: dataSource.timeTillExpiration,
              cachingPageSize: dataSource.cachingPageSize,
              enableCaching: dataSource.enableCaching,
              requestType: dataSource.requestType,
              key: dataSource.key,
              crossDomain: dataSource.crossDomain,
              jsonp: dataSource.jsonp,
              dataType: dataSource.dataType,
              offline: dataSource.offline !== undefined ? dataSource.offline : dataSource.adaptor instanceof RemoteSaveAdaptor ? false : dataSource.url ? false : true,
              requiresFormat: dataSource.requiresFormat
            };
          } else {
            DataUtil.throwError('DataManager: Invalid arguments');
          }

          if (data.requiresFormat === undefined && !DataUtil.isCors()) {
            data.requiresFormat = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data.crossDomain) ? true : data.crossDomain;
          }

          if (data.dataType === undefined) {
            data.dataType = 'json';
          }

          this.dataSource = data;
          this.defaultQuery = query;

          if (data.url && data.offline && !data.json.length) {
            this.isDataAvailable = false;
            this.adaptor = adaptor || new ODataAdaptor();
            this.dataSource.offline = false;
            this.ready = this.executeQuery(query || new Query());
            this.ready.then(function (e) {
              _this120.dataSource.offline = true;
              _this120.isDataAvailable = true;
              data.json = e.result;
              _this120.adaptor = new JsonAdaptor();
            });
          } else {
            this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();
          }

          if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {
            data.jsonp = 'callback';
          }

          this.adaptor = adaptor || this.adaptor;

          if (data.enableCaching) {
            this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);
          }

          return this;
        }
        /**
         * Overrides DataManager's default query with given query.
         * @param  {Query} query - Defines the new default query.
         */


        _createClass2(DataManager, [{
          key: "setDefaultQuery",
          value: function setDefaultQuery(query) {
            this.defaultQuery = query;
            return this;
          }
          /**
           * Executes the given query with local data source.
           * @param  {Query} query - Defines the query to retrieve data.
           */

        }, {
          key: "executeLocal",
          value: function executeLocal(query) {
            if (!this.defaultQuery && !(query instanceof Query)) {
              DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');
            }

            if (!this.dataSource.json) {
              DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');
            }

            query = query || this.defaultQuery;
            var result = this.adaptor.processQuery(this, query);

            if (query.subQuery) {
              var from = query.subQuery.fromTable;
              var lookup = query.subQuery.lookups;
              var res = query.isCountRequired ? result.result : result;

              if (lookup && lookup instanceof Array) {
                DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);
              }

              for (var j = 0; j < res.length; j++) {
                if (res[j][from] instanceof Array) {
                  res[j] = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {}, res[j]);
                  res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);
                }
              }
            }

            return this.adaptor.processResponse(result, this, query);
          }
          /**
           * Executes the given query with either local or remote data source.
           * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.
           * @param  {Query|Function} query - Defines the query to retrieve data.
           * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.
           * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.
           * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.
           */

        }, {
          key: "executeQuery",
          value: function executeQuery(query, done, fail, always) {
            var _this121 = this;

            var makeRequest = 'makeRequest';

            if (typeof query === 'function') {
              always = fail;
              fail = done;
              done = query;
              query = null;
            }

            if (!query) {
              query = this.defaultQuery;
            }

            if (!(query instanceof Query)) {
              DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');
            }

            var deffered = new Deferred();
            var args = {
              query: query
            };

            if (!this.dataSource.offline && this.dataSource.url !== undefined && this.dataSource.url !== '' || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.adaptor[makeRequest])) {
              var result = this.adaptor.processQuery(this, query);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.adaptor[makeRequest])) {
                this.adaptor[makeRequest](result, deffered, args, query);
              } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(result.url)) {
                this.makeRequest(result, deffered, args, query);
              } else {
                args = DataManager.getDeferedArgs(query, result, args);
                deffered.resolve(args);
              }
            } else {
              DataManager.nextTick(function () {
                var res = _this121.executeLocal(query);

                args = DataManager.getDeferedArgs(query, res, args);
                deffered.resolve(args);
              });
            }

            if (done || fail) {
              deffered.promise.then(done, fail);
            }

            if (always) {
              deffered.promise.then(always, always);
            }

            return deffered.promise;
          }
        }, {
          key: "extendRequest",
          value: function extendRequest(url, fnSuccess, fnFail) {
            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
              type: 'GET',
              dataType: this.dataSource.dataType,
              crossDomain: this.dataSource.crossDomain,
              jsonp: this.dataSource.jsonp,
              cache: true,
              processData: false,
              onSuccess: fnSuccess,
              onFailure: fnFail
            }, url);
          }
        }, {
          key: "makeRequest",
          value: function makeRequest(url, deffered, args, query) {
            var _this122 = this;

            var isSelector = !!query.subQuerySelector;

            var fnFail = function fnFail(e) {
              args.error = e;
              deffered.reject(args);
            };

            var process = function process(data, count, xhr, request, actual, aggregates, virtualSelectRecords) {
              args.xhr = xhr;
              args.count = count ? parseInt(count.toString(), 10) : 0;
              args.result = data;
              args.request = request;
              args.aggregates = aggregates;
              args.actual = actual;
              args.virtualSelectRecords = virtualSelectRecords;
              deffered.resolve(args);
            };

            var fnQueryChild = function fnQueryChild(data, selector) {
              var subDeffer = new Deferred();
              var childArgs = {
                parent: args
              };
              query.subQuery.isChild = true;

              var subUrl = _this122.adaptor.processQuery(_this122, query.subQuery, data ? _this122.adaptor.processResponse(data) : selector);

              var childReq = _this122.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);

              if (!isSelector) {
                subDeffer.then(function (subData) {
                  if (data) {
                    DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);
                    process(data, subData.count, subData.xhr);
                  }
                }, fnFail);
              }

              return childReq;
            };

            var fnSuccess = function fnSuccess(data, request) {
              if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && _this122.dateParse) {
                data = DataUtil.parse.parseJson(data);
              }

              var result = _this122.adaptor.processResponse(data, _this122, query, request.httpRequest, request);

              var count = 0;
              var aggregates = null;
              var virtualSelectRecords = 'virtualSelectRecords';
              var virtualRecords = data[virtualSelectRecords];

              if (query.isCountRequired) {
                count = result.count;
                aggregates = result.aggregates;
                result = result.result;
              }

              if (!query.subQuery) {
                process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);
                return;
              }

              if (!isSelector) {
                fnQueryChild(result, request);
              }
            };

            var req = this.extendRequest(url, fnSuccess, fnFail);
            var ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Ajax"](req);

            ajax.beforeSend = function () {
              _this122.beforeSend(ajax.httpRequest, ajax);
            };

            req = ajax.send();
            req["catch"](function (e) {
              return true;
            }); // to handle failure remote requests.        

            this.requests.push(ajax);

            if (isSelector) {
              var promise;
              var res = query.subQuerySelector.call(this, {
                query: query.subQuery,
                parent: query
              });

              if (res && res.length) {
                promise = Promise.all([req, fnQueryChild(null, res)]);
                promise.then(function () {
                  var result = arguments.length <= 0 ? undefined : arguments[0];

                  var pResult = _this122.adaptor.processResponse(result[0], _this122, query, _this122.requests[0].httpRequest, _this122.requests[0]);

                  var count = 0;

                  if (query.isCountRequired) {
                    count = pResult.count;
                    pResult = pResult.result;
                  }

                  var cResult = _this122.adaptor.processResponse(result[1], _this122, query.subQuery, _this122.requests[1].httpRequest, _this122.requests[1]);

                  count = 0;

                  if (query.subQuery.isCountRequired) {
                    count = cResult.count;
                    cResult = cResult.result;
                  }

                  DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);
                  isSelector = false;
                  process(pResult, count, _this122.requests[0].httpRequest);
                });
              } else {
                isSelector = false;
              }
            }

            return req;
          }
        }, {
          key: "beforeSend",
          value: function beforeSend(request, settings) {
            this.adaptor.beforeSend(this, request, settings);
            var headers = this.dataSource.headers;
            var props;

            for (var i = 0; headers && i < headers.length; i++) {
              props = [];
              var keys = Object.keys(headers[i]);

              for (var _i68 = 0, _keys18 = keys; _i68 < _keys18.length; _i68++) {
                var prop = _keys18[_i68];
                props.push(prop);
                request.setRequestHeader(prop, headers[i][prop]);
              }
            }
          }
          /**
           * Save bulk changes to the given table name.
           * User can add a new record, edit an existing record, and delete a record at the same time.
           * If the datasource from remote, then updated in a single post.
           * @param  {Object} changes - Defines the CrudOptions.
           * @param  {string} key - Defines the column field.
           * @param  {string|Query} tableName - Defines the table name.
           * @param  {Query} query - Sets default query for the DataManager.
           */

        }, {
          key: "saveChanges",
          value: function saveChanges(changes, key, tableName, query, original) {
            var _this123 = this;

            if (tableName instanceof Query) {
              query = tableName;
              tableName = null;
            }

            var args = {
              url: tableName,
              key: key || this.dataSource.key
            };
            var req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);
            var doAjaxRequest = 'doAjaxRequest';

            if (this.dataSource.offline) {
              return req;
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.adaptor[doAjaxRequest])) {
              return this.adaptor[doAjaxRequest](req);
            } else {
              var deff = new Deferred();
              var ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Ajax"](req);

              ajax.beforeSend = function () {
                _this123.beforeSend(ajax.httpRequest, ajax);
              };

              ajax.onSuccess = function (data, request) {
                deff.resolve(_this123.adaptor.processResponse(data, _this123, null, request.httpRequest, request, changes, args));
              };

              ajax.onFailure = function (e) {
                deff.reject([{
                  error: e
                }]);
              };

              ajax.send()["catch"](function (e) {
                return true;
              }); // to handle the failure requests.        

              return deff.promise;
            }
          }
          /**
           * Inserts new record in the given table.
           * @param  {Object} data - Defines the data to insert.
           * @param  {string|Query} tableName - Defines the table name.
           * @param  {Query} query - Sets default query for the DataManager.
           */

        }, {
          key: "insert",
          value: function insert(data, tableName, query, position) {
            if (tableName instanceof Query) {
              query = tableName;
              tableName = null;
            }

            var req = this.adaptor.insert(this, data, tableName, query, position);
            var doAjaxRequest = 'doAjaxRequest';

            if (this.dataSource.offline) {
              return req;
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.adaptor[doAjaxRequest])) {
              return this.adaptor[doAjaxRequest](req);
            } else {
              return this.doAjaxRequest(req);
            }
          }
          /**
           * Removes data from the table with the given key.
           * @param  {string} keyField - Defines the column field.
           * @param  {Object} value - Defines the value to find the data in the specified column.
           * @param  {string|Query} tableName - Defines the table name
           * @param  {Query} query - Sets default query for the DataManager.
           */

        }, {
          key: "remove",
          value: function remove(keyField, value, tableName, query) {
            if (typeof value === 'object') {
              value = DataUtil.getObject(keyField, value);
            }

            if (tableName instanceof Query) {
              query = tableName;
              tableName = null;
            }

            var res = this.adaptor.remove(this, keyField, value, tableName, query);
            var doAjaxRequest = 'doAjaxRequest';

            if (this.dataSource.offline) {
              return res;
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.adaptor[doAjaxRequest])) {
              return this.adaptor[doAjaxRequest](res);
            } else {
              return this.doAjaxRequest(res);
            }
          }
          /**
           * Updates existing record in the given table.
           * @param  {string} keyField - Defines the column field.
           * @param  {Object} value - Defines the value to find the data in the specified column.
           * @param  {string|Query} tableName - Defines the table name
           * @param  {Query} query - Sets default query for the DataManager.
           */

        }, {
          key: "update",
          value: function update(keyField, value, tableName, query, original) {
            if (tableName instanceof Query) {
              query = tableName;
              tableName = null;
            }

            var res = this.adaptor.update(this, keyField, value, tableName, query, original);
            var doAjaxRequest = 'doAjaxRequest';

            if (this.dataSource.offline) {
              return res;
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.adaptor[doAjaxRequest])) {
              return this.adaptor[doAjaxRequest](res);
            } else {
              return this.doAjaxRequest(res);
            }
          }
        }, {
          key: "doAjaxRequest",
          value: function doAjaxRequest(res) {
            var _this124 = this;

            var defer = new Deferred();
            res = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, {
              type: 'POST',
              contentType: 'application/json; charset=utf-8',
              processData: false
            }, res);
            var ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Ajax"](res);

            ajax.beforeSend = function () {
              _this124.beforeSend(ajax.httpRequest, ajax);
            };

            ajax.onSuccess = function (record, request) {
              try {
                DataUtil.parse.parseJson(record);
              } catch (e) {
                record = [];
              }

              record = _this124.adaptor.processResponse(DataUtil.parse.parseJson(record), _this124, null, request.httpRequest, request);
              defer.resolve(record);
            };

            ajax.onFailure = function (e) {
              defer.reject([{
                error: e
              }]);
            };

            ajax.send()["catch"](function (e) {
              return true;
            }); // to handle the failure requests.

            return defer.promise;
          }
        }], [{
          key: "getDeferedArgs",
          value: function getDeferedArgs(query, result, args) {
            if (query.isCountRequired) {
              args.result = result.result;
              args.count = result.count;
              args.aggregates = result.aggregates;
            } else {
              args.result = result;
            }

            return args;
          }
        }, {
          key: "nextTick",
          value: function nextTick(fn) {
            (window.setImmediate || window.setTimeout)(fn, 0);
          }
        }]);

        return DataManager;
      }();
      /**
       * Deferred is used to handle asynchronous operation.
       */


      var Deferred = function Deferred() {
        var _this125 = this;

        _classCallCheck2(this, Deferred);

        /**
         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.
         */
        this.promise = new Promise(function (resolve, reject) {
          _this125.resolve = resolve;
          _this125.reject = reject;
        });
        /**
         * Defines the callback function triggers when the Deferred object is resolved.
         */

        this.then = this.promise.then.bind(this.promise);
        /**
         * Defines the callback function triggers when the Deferred object is rejected.
         */

        this["catch"] = this.promise["catch"].bind(this.promise);
      };
      /**
       * Data modules
       */
      //# sourceMappingURL=ej2-data.es2015.js.map

      /***/

    },

    /***/
    "KunY":
    /*!*****************************************************!*\
      !*** ./src/app/themes/sidebar/sidebar.component.ts ***!
      \*****************************************************/

    /*! exports provided: SidebarComponent */

    /***/
    function KunY(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SidebarComponent", function () {
        return SidebarComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../../../environments/environment */
      "AytR");
      /* harmony import */


      var src_app_services_api_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! src/app/services/api.service */
      "H+bZ");
      /* harmony import */


      var src_app_pages_employee_wizard_services_employee_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! src/app/pages/employee-wizard/services/employee.service */
      "qp47");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");

      function SidebarComponent_li_14_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "a", 53);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "i", 54);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "p");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4, "Roles");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function SidebarComponent_li_15_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "a", 55);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "i", 56);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "p");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4, "Users");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      var _c0 = function _c0(a0) {
        return {
          "display": a0
        };
      };

      var SidebarComponent = /*#__PURE__*/function () {
        function SidebarComponent(api, companyEmployeeListAPI) {
          _classCallCheck2(this, SidebarComponent);

          this.api = api;
          this.companyEmployeeListAPI = companyEmployeeListAPI;
        }

        _createClass2(SidebarComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this126 = this;

            $('.list-group').click(function () {
              $(this).addClass('active').siblings().removeClass('active');
            }); // Get Company List Length

            this.api.getListData().subscribe(function (data) {
              if (data.status === 'success') {
                _this126.companyLength = data.company.length;

                if (_this126.companyLength > 0) {
                  for (var i = 0; i < _this126.companyLength; i++) {
                    var sessionId = sessionStorage.getItem('companyId');

                    if (sessionId === undefined) {
                      _this126.sideBarCompanyName = 'AryaVrat payroll';
                      _this126.sideBarCompanyLogo = "".concat(_environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].apiBaseUrl, "/assets/images/aryavrat-infotech-squarelogo-1533534321648.png");
                      break;
                    }

                    if (data.company[i]._id == sessionId) {
                      _this126.sideBarCompanyName = data.company[i].name;

                      if (data.company[i].logoUrl === "".concat(_environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].apiBaseUrl, "/assets/images/aryavrat-infotech-squarelogo-1533534321648.png")) {
                        _this126, _this126.sideBarCompanyLogo = "".concat(_environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].apiBaseUrl, "/assets/images/aryavrat-infotech-squarelogo-1533534321648.png");
                      } else {
                        _this126.sideBarCompanyLogo = "".concat(_environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].apiBaseUrl, "/").concat(data.company[i].logoUrl.substr(data.company[i].logoUrl.indexOf('public') + 6));
                      }
                    }
                  }
                } else {
                  _this126.sideBarCompanyName = 'AryaVrat payroll';
                  _this126.sideBarCompanyLogo = "".concat(_environments_environment__WEBPACK_IMPORTED_MODULE_1__["environment"].apiBaseUrl, "/assets/images/aryavrat-infotech-squarelogo-1533534321648.png");
                }
              }
            }); // Get Employees List For individual company

            this.companyEmployeeListAPI.getEmployeeList('Active').subscribe(function (data) {
              if (data.status === 'success') {
                _this126.employeeLength = data.data.length;
              }
            }); // Get Admin Status

            this.companyEmployeeListAPI.isAdmin().subscribe(function (data) {
              if (data.status === 'success') {
                _this126.adminStatus = data.data;
              }
            });
          }
        }]);

        return SidebarComponent;
      }();

      SidebarComponent.ɵfac = function SidebarComponent_Factory(t) {
        return new (t || SidebarComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](src_app_services_api_service__WEBPACK_IMPORTED_MODULE_2__["ApiService"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](src_app_pages_employee_wizard_services_employee_service__WEBPACK_IMPORTED_MODULE_3__["EmployeeService"]));
      };

      SidebarComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: SidebarComponent,
        selectors: [["app-sidebar"]],
        decls: 122,
        vars: 25,
        consts: [["data-color", "white", "data-active-color", "danger", 1, "sidebar"], [1, "logo"], ["routerLink", "/pages/dashboard/", 1, "simple-text", "logo-mini"], [1, "logo-image-small"], [3, "src"], ["routerLink", "/pages/dashboard", 1, "simple-text", "logo-normal", 2, "cursor", "pointer"], [1, "sidebar-wrapper"], [1, "nav"], [1, "list-group"], ["routerLink", "/pages/dashboard/"], [1, "fa", "fa-home"], ["class", "list-group", 4, "ngIf"], [1, "list-group", 3, "ngStyle"], ["routerLink", "/pages/branches/"], [1, "fas", "fa-building"], ["routerLink", "/pages/department/"], [1, "fa", "fa-sitemap"], [3, "ngStyle"], ["data-toggle", "collapse", "href", "#pagesExamples", "aria-expanded", "false", 1, "collapsed"], [1, "fa", "fa-forward"], [1, "caret"], ["id", "pagesExamples", 1, "collapse"], ["routerLink", "/pages/leave-types/"], [1, "fa", "fa-life-saver", "sub-menu-icon"], ["routerLink", "/pages/job-profile/"], [1, "fas", "fa-id-card", "sub-menu-icon"], ["routerLink", "/pages/job-category/"], [1, "fa", "fa-tasks", "sub-menu-icon"], ["routerLink", "/pages/skill-category/"], [1, "fa", "fa-shekel", "sub-menu-icon"], ["routerLink", "/pages/document-types/"], [1, "fa", "fa-file", "sub-menu-icon"], ["routerLink", "/pages/holiday/"], [1, "fa", "fa-bed", "sub-menu-icon"], ["routerLink", "/pages/payment-heads/"], [1, "fas", "fa-chart-area"], ["routerLink", "/pages/graderule/"], [1, "fab", "fa-pied-piper-hat"], ["routerLink", "/pages/employee-wizard/"], [1, "fa", "fa-group"], ["data-toggle", "collapse", "href", "#leaveManagement", "aria-expanded", "false", 1, "collapsed"], ["id", "leaveManagement", 1, "collapse"], ["routerLink", "/pages/leave-management/"], ["routerLink", "/pages/leave-management/list-leave"], [1, "fas", "fa-door-open", "sub-menu-icon"], ["data-toggle", "collapse", "href", "#payrollManagement", "aria-expanded", "false", 1, "collapsed"], ["id", "payrollManagement", 1, "collapse"], ["routerLink", "/pages/payroll"], [1, "fa", "fa-money", "sub-menu-icon"], ["routerLink", "/pages/payroll/payroll-sheet"], [1, "fa", "fa-file-excel-o", "sub-menu-icon"], ["routerLink", "/pages/company/company-report"], [1, "fa", "fa-file"], ["routerLink", "/pages/roles/"], [1, "fas", "fa-user-tag"], ["routerLink", "/pages/sub-user/"], [1, "fa", "fa-users"]],
        template: function SidebarComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "a", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "img", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "a", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "ul", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "a", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "i", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](13, "Dashboard");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](14, SidebarComponent_li_14_Template, 5, 0, "li", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](15, SidebarComponent_li_15_Template, 5, 0, "li", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "li", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](17, "a", 13);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](18, "i", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](19, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](20, "Branches");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "li", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "a", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](23, "i", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](24, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](25, "Departments");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](26, "li", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](27, "a", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](28, "i", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](29, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](30, "Employee Masters");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](31, "b", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](32, "div", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](33, "ul", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](34, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](35, "a", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](36, "i", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](37, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](38, "Leave Types");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](39, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](40, "a", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](41, "i", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](42, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](43, "Job Profiles");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](44, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](45, "a", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](46, "i", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](47, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](48, "Job Categories");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](49, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](50, "a", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](51, "i", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](52, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](53, "Skill Categories");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](54, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](55, "a", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](56, "i", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](57, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](58, "Document Types");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](59, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](60, "a", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](61, "i", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](62, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](63, "Holidays");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](64, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](65, "a", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](66, "i", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](67, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](68, "Payment Heads");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](69, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](70, "a", 36);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](71, "i", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](72, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](73, "Grade Rule");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](74, "li", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](75, "a", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](76, "i", 39);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](77, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](78, "Employees");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](79, "li", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](80, "a", 40);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](81, "i", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](82, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](83, "Leave Management");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](84, "b", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](85, "div", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](86, "ul", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](87, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](88, "a", 42);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](89, "i", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](90, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](91, "Manage Earned Leave");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](92, "ul", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](93, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](94, "a", 43);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](95, "i", 44);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](96, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](97, "Manage Leave Status");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](98, "li", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](99, "a", 45);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](100, "i", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](101, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](102, "Payroll");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](103, "b", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](104, "div", 46);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](105, "ul", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](106, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](107, "a", 47);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](108, "i", 48);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](109, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](110, "Salary Slips");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](111, "ul", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](112, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](113, "a", 49);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](114, "i", 50);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](115, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](116, "Salary Sheets");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](117, "li", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](118, "a", 51);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](119, "i", 52);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](120, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](121, "Company Report");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx.sideBarCompanyLogo, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx.sideBarCompanyName, " ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.adminStatus);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.adminStatus);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](11, _c0, ctx.companyLength > 0 ? "block" : "none"));

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](13, _c0, ctx.companyLength > 0 ? "block" : "none"));

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](15, _c0, ctx.companyLength > 0 ? "block" : "none"));

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](48);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](17, _c0, ctx.companyLength > 0 ? "block" : "none"));

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](19, _c0, ctx.employeeLength > 0 ? "block" : "none"));

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](21, _c0, ctx.employeeLength > 0 ? "block" : "none"));

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](23, _c0, ctx.companyLength > 0 ? "block" : "none"));
          }
        },
        directives: [_angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterLinkWithHref"], _angular_common__WEBPACK_IMPORTED_MODULE_5__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_5__["NgStyle"]],
        styles: ["@charset \"UTF-8\";\n.nav-link[data-toggle].collapsed[_ngcontent-%COMP%]:after {\n  content: \"\u25BE\";\n  float: right;\n  font-size: 20px;\n}\n.nav-link[data-toggle][_ngcontent-%COMP%]:not(.collapsed):after {\n  content: \"\u25B4\";\n  float: right;\n  font-size: 20px;\n}\n.sub-menu-icon[_ngcontent-%COMP%] {\n  font-size: 15px !important;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdGhlbWVzL3NpZGViYXIvc2lkZWJhci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0I7QUFBaEI7RUFDSSxZQUFBO0VBQ0EsWUFBQTtFQUNBLGVBQUE7QUFFSjtBQUFBO0VBQ0ksWUFBQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0FBR0o7QUFEQTtFQUNJLDBCQUFBO0FBSUoiLCJmaWxlIjoic3JjL2FwcC90aGVtZXMvc2lkZWJhci9zaWRlYmFyLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGNoYXJzZXQgXCJVVEYtOFwiO1xuLm5hdi1saW5rW2RhdGEtdG9nZ2xlXS5jb2xsYXBzZWQ6YWZ0ZXIge1xuICBjb250ZW50OiBcIuKWvlwiO1xuICBmbG9hdDogcmlnaHQ7XG4gIGZvbnQtc2l6ZTogMjBweDtcbn1cblxuLm5hdi1saW5rW2RhdGEtdG9nZ2xlXTpub3QoLmNvbGxhcHNlZCk6YWZ0ZXIge1xuICBjb250ZW50OiBcIuKWtFwiO1xuICBmbG9hdDogcmlnaHQ7XG4gIGZvbnQtc2l6ZTogMjBweDtcbn1cblxuLnN1Yi1tZW51LWljb24ge1xuICBmb250LXNpemU6IDE1cHggIWltcG9ydGFudDtcbn0iXX0= */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SidebarComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-sidebar',
            templateUrl: './sidebar.component.html',
            styleUrls: ['./sidebar.component.scss']
          }]
        }], function () {
          return [{
            type: src_app_services_api_service__WEBPACK_IMPORTED_MODULE_2__["ApiService"]
          }, {
            type: src_app_pages_employee_wizard_services_employee_service__WEBPACK_IMPORTED_MODULE_3__["EmployeeService"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "Naoh":
    /*!***************************************************************************!*\
      !*** ./node_modules/@syncfusion/ej2-popups/dist/es6/ej2-popups.es2015.js ***!
      \***************************************************************************/

    /*! exports provided: PositionData, Popup, getScrollableParent, getZindexPartial, getMaxZindex, calculateRelativeBasedPosition, calculatePosition, fit, isCollide, flip, ButtonProps, AnimationSettings, Dialog, DialogUtility, Animation, Tooltip, Spinner, createSpinner, showSpinner, hideSpinner, setSpinner */

    /***/
    function Naoh(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PositionData", function () {
        return PositionData;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Popup", function () {
        return Popup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getScrollableParent", function () {
        return _getScrollableParent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getZindexPartial", function () {
        return getZindexPartial;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getMaxZindex", function () {
        return getMaxZindex;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "calculateRelativeBasedPosition", function () {
        return calculateRelativeBasedPosition;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "calculatePosition", function () {
        return calculatePosition;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "fit", function () {
        return fit;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isCollide", function () {
        return isCollide;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "flip", function () {
        return flip;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ButtonProps", function () {
        return ButtonProps;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnimationSettings", function () {
        return AnimationSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Dialog", function () {
        return Dialog;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DialogUtility", function () {
        return DialogUtility;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Animation", function () {
        return Animation$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Tooltip", function () {
        return Tooltip;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Spinner", function () {
        return Spinner;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createSpinner", function () {
        return createSpinner;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "showSpinner", function () {
        return showSpinner;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "hideSpinner", function () {
        return hideSpinner;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setSpinner", function () {
        return setSpinner;
      });
      /* harmony import */


      var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @syncfusion/ej2-base */
      "4SUy");
      /* harmony import */


      var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @syncfusion/ej2-buttons */
      "TF3C");
      /**
       * Position library
       */


      var elementRect;
      var popupRect;
      var element;
      var parentDocument;
      var fixedParent = false;

      function calculateRelativeBasedPosition(anchor, element) {
        var fixedElement = false;
        var anchorPos = {
          left: 0,
          top: 0
        };
        var tempAnchor = anchor;

        if (!anchor || !element) {
          return anchorPos;
        }

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element.offsetParent) && element.style.position === 'fixed') {
          fixedElement = true;
        }

        while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {
          anchorPos.left += anchor.offsetLeft;
          anchorPos.top += anchor.offsetTop;
          anchor = anchor.offsetParent;
        }

        anchor = tempAnchor;

        while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {
          anchorPos.left -= anchor.scrollLeft;
          anchorPos.top -= anchor.scrollTop;
          anchor = anchor.parentElement;
        }

        return anchorPos;
      }

      function calculatePosition(currentElement, positionX, positionY, parentElement, targetValues) {
        positionY + positionX === 'topright' ? popupRect = undefined : popupRect = targetValues;
        popupRect = targetValues;
        fixedParent = parentElement ? true : false;

        if (!currentElement) {
          return {
            left: 0,
            top: 0
          };
        }

        if (!positionX) {
          positionX = 'left';
        }

        if (!positionY) {
          positionY = 'top';
        }

        parentDocument = currentElement.ownerDocument;
        element = currentElement;
        var pos = {
          left: 0,
          top: 0
        };
        return updatePosition(positionX.toLowerCase(), positionY.toLowerCase(), pos);
      }

      function setPosx(value, pos) {
        pos.left = value;
      }

      function setPosy(value, pos) {
        pos.top = value;
      }

      function updatePosition(posX, posY, pos) {
        elementRect = element.getBoundingClientRect();

        switch (posY + posX) {
          case 'topcenter':
            setPosx(getElementHCenter(), pos);
            setPosy(getElementTop(), pos);
            break;

          case 'topright':
            setPosx(getElementRight(), pos);
            setPosy(getElementTop(), pos);
            break;

          case 'centercenter':
            setPosx(getElementHCenter(), pos);
            setPosy(getElementVCenter(), pos);
            break;

          case 'centerright':
            setPosx(getElementRight(), pos);
            setPosy(getElementVCenter(), pos);
            break;

          case 'centerleft':
            setPosx(getElementLeft(), pos);
            setPosy(getElementVCenter(), pos);
            break;

          case 'bottomcenter':
            setPosx(getElementHCenter(), pos);
            setPosy(getElementBottom(), pos);
            break;

          case 'bottomright':
            setPosx(getElementRight(), pos);
            setPosy(getElementBottom(), pos);
            break;

          case 'bottomleft':
            setPosx(getElementLeft(), pos);
            setPosy(getElementBottom(), pos);
            break;

          default:
          case 'topleft':
            setPosx(getElementLeft(), pos);
            setPosy(getElementTop(), pos);
            break;
        }

        return pos;
      }

      function getBodyScrollTop() {
        return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;
      }

      function getBodyScrollLeft() {
        return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;
      }

      function getElementBottom() {
        return fixedParent ? elementRect.bottom : elementRect.bottom + getBodyScrollTop();
      }

      function getElementVCenter() {
        return getElementTop() + elementRect.height / 2;
      }

      function getElementTop() {
        return fixedParent ? elementRect.top : elementRect.top + getBodyScrollTop();
      }

      function getElementLeft() {
        return elementRect.left + getBodyScrollLeft();
      }

      function getElementRight() {
        return elementRect.right + getBodyScrollLeft() - (popupRect ? popupRect.width : 0);
      }

      function getElementHCenter() {
        return getElementLeft() + elementRect.width / 2;
      }
      /**
       * Collision module.
       */


      var parentDocument$1;
      var targetContainer;

      function fit(element) {
        var viewPortElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var axis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
          X: false,
          Y: false
        };
        var position = arguments.length > 3 ? arguments[3] : undefined;

        if (!axis.Y && !axis.X) {
          return {
            left: 0,
            top: 0
          };
        }

        var elemData = element.getBoundingClientRect();
        targetContainer = viewPortElement;
        parentDocument$1 = element.ownerDocument;

        if (!position) {
          position = calculatePosition(element, 'left', 'top');
        }

        if (axis.X) {
          var containerWidth = targetContainer ? getTargetContainerWidth() : getViewPortWidth();
          var containerLeft = ContainerLeft();
          var containerRight = ContainerRight();
          var overLeft = containerLeft - position.left;
          var overRight = position.left + elemData.width - containerRight;

          if (elemData.width > containerWidth) {
            if (overLeft > 0 && overRight <= 0) {
              position.left = containerRight - elemData.width;
            } else if (overRight > 0 && overLeft <= 0) {
              position.left = containerLeft;
            } else {
              position.left = overLeft > overRight ? containerRight - elemData.width : containerLeft;
            }
          } else if (overLeft > 0) {
            position.left += overLeft;
          } else if (overRight > 0) {
            position.left -= overRight;
          }
        }

        if (axis.Y) {
          var containerHeight = targetContainer ? getTargetContainerHeight() : getViewPortHeight();
          var containerTop = ContainerTop();
          var containerBottom = ContainerBottom();
          var overTop = containerTop - position.top;
          var overBottom = position.top + elemData.height - containerBottom;

          if (elemData.height > containerHeight) {
            if (overTop > 0 && overBottom <= 0) {
              position.top = containerBottom - elemData.height;
            } else if (overBottom > 0 && overTop <= 0) {
              position.top = containerTop;
            } else {
              position.top = overTop > overBottom ? containerBottom - elemData.height : containerTop;
            }
          } else if (overTop > 0) {
            position.top += overTop;
          } else if (overBottom > 0) {
            position.top -= overBottom;
          }
        }

        return position;
      }

      function isCollide(element) {
        var viewPortElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var x = arguments.length > 2 ? arguments[2] : undefined;
        var y = arguments.length > 3 ? arguments[3] : undefined;
        var elemOffset = calculatePosition(element, 'left', 'top');

        if (x) {
          elemOffset.left = x;
        }

        if (y) {
          elemOffset.top = y;
        }

        var data = [];
        targetContainer = viewPortElement;
        parentDocument$1 = element.ownerDocument;
        var elementRect = element.getBoundingClientRect();
        var top = elemOffset.top;
        var left = elemOffset.left;
        var right = elemOffset.left + elementRect.width;
        var bottom = elemOffset.top + elementRect.height;
        var yAxis = topCollideCheck(top, bottom);
        var xAxis = leftCollideCheck(left, right);

        if (yAxis.topSide) {
          data.push('top');
        }

        if (xAxis.rightSide) {
          data.push('right');
        }

        if (xAxis.leftSide) {
          data.push('left');
        }

        if (yAxis.bottomSide) {
          data.push('bottom');
        }

        return data;
      }

      function flip(element, target, offsetX, offsetY, positionX, positionY) {
        var viewPortElement = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
        var axis = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {
          X: true,
          Y: true
        };
        var fixedParent = arguments.length > 8 ? arguments[8] : undefined;

        if (!target || !element || !positionX || !positionY || !axis.X && !axis.Y) {
          return;
        }

        var tEdge = {
          TL: null,
          TR: null,
          BL: null,
          BR: null
        };
        var eEdge = {
          TL: null,
          TR: null,
          BL: null,
          BR: null
        };
        var elementRect = element.getBoundingClientRect();
        var pos = {
          posX: positionX,
          posY: positionY,
          offsetX: offsetX,
          offsetY: offsetY,
          position: {
            left: 0,
            top: 0
          }
        };
        targetContainer = viewPortElement;
        parentDocument$1 = target.ownerDocument;
        updateElementData(target, tEdge, pos, fixedParent, elementRect);
        setPosition(eEdge, pos, elementRect);

        if (axis.X) {
          leftFlip(target, eEdge, tEdge, pos, elementRect, true);
        }

        if (axis.Y && tEdge.TL.top > -1) {
          topFlip(target, eEdge, tEdge, pos, elementRect, true);
        }

        setPopup(element, pos, elementRect);
      }

      function setPopup(element, pos, elementRect) {
        var left = 0;
        var top = 0;

        if (element.offsetParent != null && (getComputedStyle(element.offsetParent).position === 'absolute' || getComputedStyle(element.offsetParent).position === 'relative')) {
          var data = calculatePosition(element.offsetParent, 'left', 'top', false, elementRect);
          left = data.left;
          top = data.top;
        }

        element.style.top = pos.position.top + pos.offsetY - top + 'px';
        element.style.left = pos.position.left + pos.offsetX - left + 'px';
      }

      function updateElementData(target, edge, pos, fixedParent, elementRect) {
        pos.position = calculatePosition(target, pos.posX, pos.posY, fixedParent, elementRect);
        edge.TL = calculatePosition(target, 'left', 'top', fixedParent, elementRect);
        edge.TR = calculatePosition(target, 'right', 'top', fixedParent, elementRect);
        edge.BR = calculatePosition(target, 'left', 'bottom', fixedParent, elementRect);
        edge.BL = calculatePosition(target, 'right', 'bottom', fixedParent, elementRect);
      }

      function setPosition(eStatus, pos, elementRect) {
        eStatus.TL = {
          top: pos.position.top + pos.offsetY,
          left: pos.position.left + pos.offsetX
        };
        eStatus.TR = {
          top: eStatus.TL.top,
          left: eStatus.TL.left + elementRect.width
        };
        eStatus.BL = {
          top: eStatus.TL.top + elementRect.height,
          left: eStatus.TL.left
        };
        eStatus.BR = {
          top: eStatus.TL.top + elementRect.height,
          left: eStatus.TL.left + elementRect.width
        };
      }

      function leftCollideCheck(left, right) {
        var leftSide = false;
        var rightSide = false;

        if (left - getBodyScrollLeft$1() < ContainerLeft()) {
          leftSide = true;
        }

        if (right > ContainerRight()) {
          rightSide = true;
        }

        return {
          leftSide: leftSide,
          rightSide: rightSide
        };
      }

      function leftFlip(target, edge, tEdge, pos, elementRect, deepCheck) {
        var collideSide = leftCollideCheck(edge.TL.left, edge.TR.left);

        if (tEdge.TL.left - getBodyScrollLeft$1() <= ContainerLeft()) {
          collideSide.leftSide = false;
        }

        if (tEdge.TR.left >= ContainerRight()) {
          collideSide.rightSide = false;
        }

        if (collideSide.leftSide && !collideSide.rightSide || !collideSide.leftSide && collideSide.rightSide) {
          if (pos.posX === 'right') {
            pos.posX = 'left';
          } else {
            pos.posX = 'right';
          }

          pos.offsetX = pos.offsetX + elementRect.width;
          pos.offsetX = -1 * pos.offsetX;
          pos.position = calculatePosition(target, pos.posX, pos.posY, false);
          setPosition(edge, pos, elementRect);

          if (deepCheck) {
            leftFlip(target, edge, tEdge, pos, elementRect, false);
          }
        }
      }

      function topFlip(target, edge, tEdge, pos, elementRect, deepCheck) {
        var collideSide = topCollideCheck(edge.TL.top, edge.BL.top);

        if (tEdge.TL.top - getBodyScrollTop$1() <= ContainerTop()) {
          collideSide.topSide = false;
        }

        if (tEdge.BL.top >= ContainerBottom()) {
          collideSide.bottomSide = false;
        }

        if (collideSide.topSide && !collideSide.bottomSide || !collideSide.topSide && collideSide.bottomSide) {
          if (pos.posY === 'top') {
            pos.posY = 'bottom';
          } else {
            pos.posY = 'top';
          }

          pos.offsetY = pos.offsetY + elementRect.height;
          pos.offsetY = -1 * pos.offsetY;
          pos.position = calculatePosition(target, pos.posX, pos.posY, false, elementRect);
          setPosition(edge, pos, elementRect);

          if (deepCheck) {
            topFlip(target, edge, tEdge, pos, elementRect, false);
          }
        }
      }

      function topCollideCheck(top, bottom) {
        var topSide = false;
        var bottomSide = false;

        if (top - getBodyScrollTop$1() < ContainerTop()) {
          topSide = true;
        }

        if (bottom > ContainerBottom()) {
          bottomSide = true;
        }

        return {
          topSide: topSide,
          bottomSide: bottomSide
        };
      }

      function getTargetContainerWidth() {
        return targetContainer.getBoundingClientRect().width;
      }

      function getTargetContainerHeight() {
        return targetContainer.getBoundingClientRect().height;
      }

      function getTargetContainerLeft() {
        return targetContainer.getBoundingClientRect().left;
      }

      function getTargetContainerTop() {
        return targetContainer.getBoundingClientRect().top;
      }

      function ContainerTop() {
        if (targetContainer) {
          return getTargetContainerTop();
        }

        return 0;
      }

      function ContainerLeft() {
        if (targetContainer) {
          return getTargetContainerLeft();
        }

        return 0;
      }

      function ContainerRight() {
        if (targetContainer) {
          return getBodyScrollLeft$1() + getTargetContainerLeft() + getTargetContainerWidth();
        }

        return getBodyScrollLeft$1() + getViewPortWidth();
      }

      function ContainerBottom() {
        if (targetContainer) {
          return getBodyScrollTop$1() + getTargetContainerTop() + getTargetContainerHeight();
        }

        return getBodyScrollTop$1() + getViewPortHeight();
      }

      function getBodyScrollTop$1() {
        // if(targetContainer)
        //     return targetContainer.scrollTop;
        return parentDocument$1.documentElement.scrollTop || parentDocument$1.body.scrollTop;
      }

      function getBodyScrollLeft$1() {
        // if(targetContainer)
        //     return targetContainer.scrollLeft;
        return parentDocument$1.documentElement.scrollLeft || parentDocument$1.body.scrollLeft;
      }

      function getViewPortHeight() {
        return window.innerHeight;
      }

      function getViewPortWidth() {
        var windowWidth = window.innerWidth;
        var offsetWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(document.documentElement) ? 0 : document.documentElement.offsetWidth;
        return windowWidth - (windowWidth - offsetWidth);
      }

      var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      /**
       * Specifies the offset position values.
       */


      var PositionData = /*#__PURE__*/function (_syncfusion_ej2_base_26) {
        _inherits2(PositionData, _syncfusion_ej2_base_26);

        var _super44 = _createSuper(PositionData);

        function PositionData() {
          _classCallCheck2(this, PositionData);

          return _super44.apply(this, arguments);
        }

        return PositionData;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('left')], PositionData.prototype, "X", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('top')], PositionData.prototype, "Y", void 0); // don't use space in classNames


      var CLASSNAMES = {
        ROOT: 'e-popup',
        RTL: 'e-rtl',
        OPEN: 'e-popup-open',
        CLOSE: 'e-popup-close'
      };
      /**
       * Represents the Popup Component
       * ```html
       * <div id="popup" style="position:absolute;height:100px;width:100px;">
       * <div style="margin:35px 25px;">Popup Content</div></div>
       * ```
       * ```typescript
       * <script>
       *   var popupObj = new Popup();
       *   popupObj.appendTo("#popup");
       * </script>
       * ```
       */

      var Popup = /*#__PURE__*/function (_syncfusion_ej2_base_27) {
        _inherits2(Popup, _syncfusion_ej2_base_27);

        var _super45 = _createSuper(Popup);

        function Popup(element, options) {
          _classCallCheck2(this, Popup);

          return _super45.call(this, options, element);
        }
        /**
         * Called internally if any of the property value changed.
         * @private
         */


        _createClass2(Popup, [{
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i69 = 0, _Object$keys18 = Object.keys(newProp); _i69 < _Object$keys18.length; _i69++) {
              var prop = _Object$keys18[_i69];

              switch (prop) {
                case 'width':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                    'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.width)
                  });
                  break;

                case 'height':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                    'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.height)
                  });
                  break;

                case 'zIndex':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                    'zIndex': newProp.zIndex
                  });
                  break;

                case 'enableRtl':
                  this.setEnableRtl();
                  break;

                case 'position':
                case 'relateTo':
                  this.refreshPosition();
                  break;

                case 'offsetX':
                  var x = newProp.offsetX - oldProp.offsetX;
                  this.element.style.left = (parseInt(this.element.style.left, 10) + x).toString() + 'px';
                  break;

                case 'offsetY':
                  var y = newProp.offsetY - oldProp.offsetY;
                  this.element.style.top = (parseInt(this.element.style.top, 10) + y).toString() + 'px';
                  break;

                case 'content':
                  this.setContent();
                  break;

                case 'actionOnScroll':
                  if (newProp.actionOnScroll !== 'none') {
                    this.wireScrollEvents();
                  } else {
                    this.unwireScrollEvents();
                  }

                  break;
              }
            }
          }
          /**
           * gets the Component module name.
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'popup';
          }
          /**
           * To resolve if any collision occurs.
           */

        }, {
          key: "resolveCollision",
          value: function resolveCollision() {
            this.checkCollision();
          }
          /**
           * gets the persisted state properties of the Component.
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist([]);
          }
          /**
           * To destroy the control.
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.element.classList.remove(CLASSNAMES.ROOT, CLASSNAMES.RTL, CLASSNAMES.OPEN, CLASSNAMES.CLOSE);
            this.unwireEvents();

            _get2(_getPrototypeOf2(Popup.prototype), "destroy", this).call(this);
          }
          /**
           * To Initialize the control rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.element.classList.add(CLASSNAMES.ROOT);
            var styles = {};

            if (this.zIndex !== 1000) {
              styles.zIndex = this.zIndex;
            }

            if (this.width !== 'auto') {
              styles.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width);
            }

            if (this.height !== 'auto') {
              styles.height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height);
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, styles);
            this.fixedParent = false;
            this.setEnableRtl();
            this.setContent();
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(window, 'orientationchange', this.orientationOnChange, this);
            }

            if (this.actionOnScroll !== 'none') {
              this.wireScrollEvents();
            }
          }
        }, {
          key: "wireScrollEvents",
          value: function wireScrollEvents() {
            if (this.getRelateToElement()) {
              var _iterator55 = _createForOfIteratorHelper(this.getScrollableParent(this.getRelateToElement())),
                  _step55;

              try {
                for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
                  var parent = _step55.value;

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(parent, 'scroll', this.scrollRefresh, this);
                }
              } catch (err) {
                _iterator55.e(err);
              } finally {
                _iterator55.f();
              }
            }
          }
        }, {
          key: "unwireEvents",
          value: function unwireEvents() {
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(window, 'orientationchange', this.orientationOnChange);
            }

            if (this.actionOnScroll !== 'none') {
              this.unwireScrollEvents();
            }
          }
        }, {
          key: "unwireScrollEvents",
          value: function unwireScrollEvents() {
            if (this.getRelateToElement()) {
              var _iterator56 = _createForOfIteratorHelper(this.getScrollableParent(this.getRelateToElement())),
                  _step56;

              try {
                for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
                  var parent = _step56.value;

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(parent, 'scroll', this.scrollRefresh);
                }
              } catch (err) {
                _iterator56.e(err);
              } finally {
                _iterator56.f();
              }
            }
          }
        }, {
          key: "getRelateToElement",
          value: function getRelateToElement() {
            var relateToElement = this.relateTo === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.relateTo) ? document.body : this.relateTo;
            this.setProperties({
              relateTo: relateToElement
            }, true);
            return typeof this.relateTo === 'string' ? document.querySelector(this.relateTo) : this.relateTo;
          }
        }, {
          key: "scrollRefresh",
          value: function scrollRefresh(e) {
            if (this.actionOnScroll === 'reposition') {
              if (!(this.element.offsetParent === e.target || this.element.offsetParent && this.element.offsetParent.tagName === 'BODY' && e.target.parentElement == null)) {
                this.refreshPosition();
              }
            } else if (this.actionOnScroll === 'hide') {
              this.hide();
            }

            if (this.actionOnScroll !== 'none') {
              if (this.getRelateToElement()) {
                var targetVisible = this.isElementOnViewport(this.getRelateToElement(), e.target);

                if (!targetVisible && !this.targetInvisibleStatus) {
                  this.trigger('targetExitViewport');
                  this.targetInvisibleStatus = true;
                } else if (targetVisible) {
                  this.targetInvisibleStatus = false;
                }
              }
            }
          }
          /**
           * This method is to get the element visibility on viewport when scroll
           * the page. This method will returns true even though 1 px of element
           * part is in visible.
           */

        }, {
          key: "isElementOnViewport",
          value: function isElementOnViewport(relateToElement, scrollElement) {
            var scrollParents = this.getScrollableParent(relateToElement);

            for (var parent = 0; parent < scrollParents.length; parent++) {
              if (this.isElementVisible(relateToElement, scrollParents[parent])) {
                continue;
              } else {
                return false;
              }
            }

            return true;
          }
        }, {
          key: "isElementVisible",
          value: function isElementVisible(relateToElement, scrollElement) {
            var rect = this.checkGetBoundingClientRect(relateToElement);

            if (!rect.height || !rect.width) {
              return false;
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.checkGetBoundingClientRect(scrollElement))) {
              var parent = scrollElement.getBoundingClientRect();
              return !(rect.bottom < parent.top) && !(rect.bottom > parent.bottom) && !(rect.right > parent.right) && !(rect.left < parent.left);
            } else {
              var win = window;
              var windowView = {
                top: win.scrollY,
                left: win.scrollX,
                right: win.scrollX + win.outerWidth,
                bottom: win.scrollY + win.outerHeight
              };
              var off = calculatePosition(relateToElement);
              var ele = {
                top: off.top,
                left: off.left,
                right: off.left + rect.width,
                bottom: off.top + rect.height
              };
              var elementView = {
                top: windowView.bottom - ele.top,
                left: windowView.right - ele.left,
                bottom: ele.bottom - windowView.top,
                right: ele.right - windowView.left
              };
              return elementView.top > 0 && elementView.left > 0 && elementView.right > 0 && elementView.bottom > 0;
            }
          }
          /**
           * Initialize the event handler
           * @private
           */

        }, {
          key: "preRender",
          value: function preRender() {//There is no event handler
          }
        }, {
          key: "setEnableRtl",
          value: function setEnableRtl() {
            this.reposition();
            this.enableRtl ? this.element.classList.add(CLASSNAMES.RTL) : this.element.classList.remove(CLASSNAMES.RTL);
          }
        }, {
          key: "setContent",
          value: function setContent() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content)) {
              this.element.innerHTML = '';

              if (typeof this.content === 'string') {
                this.element.textContent = this.content;
              } else {
                this.element.appendChild(this.content);
              }
            }
          }
        }, {
          key: "orientationOnChange",
          value: function orientationOnChange() {
            var _this127 = this;

            setTimeout(function () {
              _this127.refreshPosition();
            }, 200);
          }
          /**
           * Based on the `relative` element and `offset` values, `Popup` element position will refreshed.
           */

        }, {
          key: "refreshPosition",
          value: function refreshPosition(target, collision) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target)) {
              this.checkFixedParent(target);
            }

            this.reposition();

            if (!collision) {
              this.checkCollision();
            }
          }
        }, {
          key: "reposition",
          value: function reposition() {
            var pos;
            var position;
            var relateToElement = this.getRelateToElement();

            if (typeof this.position.X === 'number' && typeof this.position.Y === 'number') {
              pos = {
                left: this.position.X,
                top: this.position.Y
              };
            } else if (typeof this.position.X === 'string' && typeof this.position.Y === 'number' || typeof this.position.X === 'number' && typeof this.position.Y === 'string') {
              var display = this.element.style.display;
              var parentDisplay;
              this.element.style.display = 'block';

              if (this.element.classList.contains('e-dlg-modal')) {
                parentDisplay = this.element.parentElement.style.display;
                this.element.parentElement.style.display = 'block';
              }

              position = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);

              if (typeof this.position.X === 'string') {
                pos = {
                  left: position.left,
                  top: this.position.Y
                };
              } else {
                pos = {
                  left: this.position.X,
                  top: position.top
                };
              }

              this.element.style.display = display;

              if (this.element.classList.contains('e-dlg-modal')) {
                this.element.parentElement.style.display = parentDisplay;
              }
            } else if (relateToElement) {
              var _display = this.element.style.display;
              this.element.style.display = 'block';
              pos = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);
              this.element.style.display = _display;
            } else {
              pos = {
                left: 0,
                top: 0
              };
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(pos)) {
              this.element.style.left = pos.left + 'px';
              this.element.style.top = pos.top + 'px';
            }
          }
        }, {
          key: "checkGetBoundingClientRect",
          value: function checkGetBoundingClientRect(ele) {
            var eleRect;

            try {
              eleRect = ele.getBoundingClientRect();
              return eleRect;
            } catch (error) {
              return null;
            }
          }
        }, {
          key: "getAnchorPosition",
          value: function getAnchorPosition(anchorEle, ele, position, offsetX, offsetY) {
            var eleRect = this.checkGetBoundingClientRect(ele);
            var anchorRect = this.checkGetBoundingClientRect(anchorEle);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eleRect) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(anchorRect)) {
              return null;
            }

            var anchor = anchorEle;
            var anchorPos = {
              left: 0,
              top: 0
            };

            if (ele.offsetParent && ele.offsetParent.tagName === 'BODY' && anchorEle.tagName === 'BODY') {
              anchorPos = calculatePosition(anchorEle);
            } else {
              if (ele.classList.contains('e-dlg-modal') && anchor.tagName !== 'BODY') {
                ele = ele.parentElement;
              }

              anchorPos = calculateRelativeBasedPosition(anchor, ele);
            }

            switch (position.X) {
              default:
              case 'left':
                break;

              case 'center':
                if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {
                  anchorPos.left += window.innerWidth / 2 - eleRect.width / 2;
                } else if (this.targetType === 'container') {
                  anchorPos.left += anchorRect.width / 2 - eleRect.width / 2;
                } else {
                  anchorPos.left += anchorRect.width / 2;
                }

                break;

              case 'right':
                if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {
                  anchorPos.left += window.innerWidth - eleRect.width;
                } else if (this.targetType === 'container') {
                  anchorPos.left += anchorRect.width - eleRect.width;
                } else {
                  anchorPos.left += anchorRect.width;
                }

                break;
            }

            switch (position.Y) {
              default:
              case 'top':
                break;

              case 'center':
                if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {
                  anchorPos.top += window.innerHeight / 2 - eleRect.height / 2;
                } else if (this.targetType === 'container') {
                  anchorPos.top += anchorRect.height / 2 - eleRect.height / 2;
                } else {
                  anchorPos.top += anchorRect.height / 2;
                }

                break;

              case 'bottom':
                if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {
                  anchorPos.top += window.innerHeight - eleRect.height;
                } else if (this.targetType === 'container') {
                  anchorPos.top += anchorRect.height - eleRect.height;
                } else {
                  anchorPos.top += anchorRect.height;
                }

                break;
            }

            anchorPos.left += offsetX;
            anchorPos.top += offsetY;
            return anchorPos;
          }
        }, {
          key: "callFlip",
          value: function callFlip(param) {
            var relateToElement = this.getRelateToElement();
            flip(this.element, relateToElement, this.offsetX, this.offsetY, this.position.X, this.position.Y, this.viewPortElement, param, this.fixedParent);
          }
        }, {
          key: "callFit",
          value: function callFit(param) {
            if (isCollide(this.element, this.viewPortElement).length !== 0) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.viewPortElement)) {
                var data = fit(this.element, this.viewPortElement, param);

                if (param.X) {
                  this.element.style.left = data.left + 'px';
                }

                if (param.Y) {
                  this.element.style.top = data.top + 'px';
                }
              } else {
                var _elementRect = this.checkGetBoundingClientRect(this.element);

                var viewPortRect = this.checkGetBoundingClientRect(this.viewPortElement);

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_elementRect) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(viewPortRect)) {
                  return null;
                }

                if (param && param.Y === true) {
                  if (viewPortRect.top > _elementRect.top) {
                    this.element.style.top = '0px';
                  } else if (viewPortRect.bottom < _elementRect.bottom) {
                    this.element.style.top = parseInt(this.element.style.top, 10) - (_elementRect.bottom - viewPortRect.bottom) + 'px';
                  }
                }

                if (param && param.X === true) {
                  if (viewPortRect.right < _elementRect.right) {
                    this.element.style.left = parseInt(this.element.style.left, 10) - (_elementRect.right - viewPortRect.right) + 'px';
                  } else if (viewPortRect.left > _elementRect.left) {
                    this.element.style.left = parseInt(this.element.style.left, 10) + (viewPortRect.left - _elementRect.left) + 'px';
                  }
                }
              }
            }
          }
        }, {
          key: "checkCollision",
          value: function checkCollision() {
            var horz = this.collision.X;
            var vert = this.collision.Y;

            if (horz === 'none' && vert === 'none') {
              return;
            }

            if (horz === 'flip' && vert === 'flip') {
              this.callFlip({
                X: true,
                Y: true
              });
            } else if (horz === 'fit' && vert === 'fit') {
              this.callFit({
                X: true,
                Y: true
              });
            } else {
              if (horz === 'flip') {
                this.callFlip({
                  X: true,
                  Y: false
                });
              } else if (vert === 'flip') {
                this.callFlip({
                  Y: true,
                  X: false
                });
              }

              if (horz === 'fit') {
                this.callFit({
                  X: true,
                  Y: false
                });
              } else if (vert === 'fit') {
                this.callFit({
                  X: false,
                  Y: true
                });
              }
            }
          }
          /**
           * Shows the popup element from screen.
           * @param { AnimationModel | Function } collisionOrAnimationOptions? - To pass animation options or collision function.
           * @param { Function } collision? - To pass the collision function.
           * @param { HTMLElement } relativeElement? - To calculate the zIndex value dynamically.
           */

        }, {
          key: "show",
          value: function show(animationOptions, relativeElement) {
            var _this128 = this;

            this.wireEvents();

            if (this.zIndex === 1000 || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(relativeElement)) {
              var zIndexElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(relativeElement) ? this.element : relativeElement;
              this.zIndex = getZindexPartial(zIndexElement);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                'zIndex': this.zIndex
              });
            }

            animationOptions = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(animationOptions) && typeof animationOptions === 'object' ? animationOptions : this.showAnimation;

            if (this.collision.X !== 'none' || this.collision.Y !== 'none') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLASSNAMES.CLOSE);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLASSNAMES.OPEN);
              this.checkCollision();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLASSNAMES.OPEN);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLASSNAMES.CLOSE);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(animationOptions)) {
              animationOptions.begin = function () {
                if (!_this128.isDestroyed) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this128.element], CLASSNAMES.CLOSE);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this128.element], CLASSNAMES.OPEN);
                }
              };

              animationOptions.end = function () {
                if (!_this128.isDestroyed) {
                  _this128.trigger('open');
                }
              };

              new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](animationOptions).animate(this.element);
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLASSNAMES.CLOSE);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLASSNAMES.OPEN);
              this.trigger('open');
            }
          }
          /**
           * Hides the popup element from screen.
           * @param { AnimationModel } animationOptions? - To give the animation options.
           */

        }, {
          key: "hide",
          value: function hide(animationOptions) {
            var _this129 = this;

            animationOptions = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(animationOptions) && typeof animationOptions === 'object' ? animationOptions : this.hideAnimation;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(animationOptions)) {
              animationOptions.end = function () {
                if (!_this129.isDestroyed) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this129.element], CLASSNAMES.OPEN);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this129.element], CLASSNAMES.CLOSE);

                  _this129.trigger('close');
                }
              };

              new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](animationOptions).animate(this.element);
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], CLASSNAMES.OPEN);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], CLASSNAMES.CLOSE);
              this.trigger('close');
            }

            this.unwireEvents();
          }
          /**
           * Gets scrollable parent elements for the given element.
           * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.
           */

        }, {
          key: "getScrollableParent",
          value: function getScrollableParent(element) {
            this.checkFixedParent(element);
            return _getScrollableParent(element, this.fixedParent);
          }
        }, {
          key: "checkFixedParent",
          value: function checkFixedParent(element) {
            var parent = element.parentElement;

            while (parent && parent.tagName !== 'HTML') {
              var parentStyle = getComputedStyle(parent);

              if (parentStyle.position === 'fixed' && this.element.offsetParent && this.element.offsetParent.tagName === 'BODY') {
                this.element.style.position = 'fixed';
                this.fixedParent = true;
              }

              parent = parent.parentElement;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.offsetParent) && parentStyle.position === 'fixed' && this.element.style.position === 'fixed') {
                this.fixedParent = true;
              }
            }
          }
        }]);

        return Popup;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Popup.prototype, "height", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Popup.prototype, "width", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Popup.prototype, "content", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('container')], Popup.prototype, "targetType", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Popup.prototype, "viewPortElement", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({
        X: 'none',
        Y: 'none'
      })], Popup.prototype, "collision", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Popup.prototype, "relateTo", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, PositionData)], Popup.prototype, "position", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Popup.prototype, "offsetX", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Popup.prototype, "offsetY", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1000)], Popup.prototype, "zIndex", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Popup.prototype, "enableRtl", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('reposition')], Popup.prototype, "actionOnScroll", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Popup.prototype, "showAnimation", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Popup.prototype, "hideAnimation", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Popup.prototype, "open", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Popup.prototype, "close", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Popup.prototype, "targetExitViewport", void 0);

      Popup = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Popup);
      /**
       * Gets scrollable parent elements for the given element.
       * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.
       * @private
       */

      function _getScrollableParent(element, fixedParent) {
        var eleStyle = getComputedStyle(element);
        var scrollParents = [];
        var overflowRegex = /(auto|scroll)/;
        var parent = element.parentElement;

        while (parent && parent.tagName !== 'HTML') {
          var parentStyle = getComputedStyle(parent);

          if (!(eleStyle.position === 'absolute' && parentStyle.position === 'static') && overflowRegex.test(parentStyle.overflow + parentStyle.overflowY + parentStyle.overflowX)) {
            scrollParents.push(parent);
          }

          parent = parent.parentElement;
        }

        if (!fixedParent) {
          scrollParents.push(document);
        }

        return scrollParents;
      }
      /**
       * Gets the maximum z-index of the given element.
       * @param { HTMLElement } element - Specify the element to get the maximum z-index of it.
       * @private
       */


      function getZindexPartial(element) {
        // upto body traversal
        var parent = element.parentElement;
        var parentZindex = [];

        while (parent) {
          if (parent.tagName !== 'BODY') {
            var index = document.defaultView.getComputedStyle(parent, null).getPropertyValue('z-index');
            var position = document.defaultView.getComputedStyle(parent, null).getPropertyValue('position');

            if (index !== 'auto' && position !== 'static') {
              parentZindex.push(index);
            }

            parent = parent.parentElement;
          } else {
            break;
          }
        } //Body direct children element traversal


        var childrenZindex = [];

        for (var i = 0; i < document.body.children.length; i++) {
          if (!element.isEqualNode(document.body.children[i])) {
            var _index7 = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('z-index');

            var _position = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('position');

            if (_index7 !== 'auto' && _position !== 'static') {
              childrenZindex.push(_index7);
            }
          }
        }

        childrenZindex.push('999');
        var siblingsZindex = [];

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element.parentElement) && element.parentElement.tagName !== 'BODY') {
          var childNodes = [].slice.call(element.parentElement.children);

          for (var _i70 = 0; _i70 < childNodes.length; _i70++) {
            var _index8 = document.defaultView.getComputedStyle(childNodes[_i70], null).getPropertyValue('z-index');

            var _position2 = document.defaultView.getComputedStyle(childNodes[_i70], null).getPropertyValue('position');

            if (_index8 !== 'auto' && _position2 !== 'static') {
              siblingsZindex.push(_index8);
            }
          }
        }

        var finalValue = parentZindex.concat(childrenZindex, siblingsZindex);
        var currentZindexValue = Math.max.apply(Math, finalValue) + 1; // Checking the max-zindex value

        return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;
      }
      /**
       * Gets the maximum z-index of the page.
       * @param { HTMLElement } tagName - Specify the tagName to get the maximum z-index of it.
       * @private
       */


      function getMaxZindex() {
        var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['*'];
        var maxZindex = [];

        for (var i = 0; i < tagName.length; i++) {
          var elements = document.getElementsByTagName(tagName[i]);

          for (var _i71 = 0; _i71 < elements.length; _i71++) {
            var index = document.defaultView.getComputedStyle(elements[_i71], null).getPropertyValue('z-index');
            var position = document.defaultView.getComputedStyle(elements[_i71], null).getPropertyValue('position');

            if (index !== 'auto' && position !== 'static') {
              maxZindex.push(index);
            }
          }
        }

        var currentZindexValue = Math.max.apply(Math, maxZindex) + 1;
        return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;
      }
      /**
       * Popup Components
       */

      /**
       * Popup Components
       */

      /**
       * Resize library
       */


      var elementClass = ['north-west', 'north', 'north-east', 'west', 'east', 'south-west', 'south', 'south-east'];
      var targetElement;
      var selectedHandler;
      var originalWidth = 0;
      var originalHeight = 0;
      var originalX = 0;
      var originalY = 0;
      var originalMouseX = 0;
      var originalMouseY = 0;
      var RESIZE_HANDLER = 'e-resize-handle';
      var FOCUSED_HANDLER = 'e-focused-handle';
      var RESTRICT_LEFT = ['e-restrict-left'];
      var RESIZE_WITHIN_VIEWPORT = 'e-resize-viewport';
      var minHeight;
      var maxHeight;
      var minWidth;
      var maxWidth;
      var containerElement;
      var resizeStart = null;
      var resize = null;
      var resizeEnd = null;
      var resizeWestWidth;
      var setLeft = true;
      var previousWidth = 0;
      var setWidth = true; // tslint:disable-next-line

      var proxy;

      function createResize(args) {
        resizeStart = args.resizeBegin;
        resize = args.resizing;
        resizeEnd = args.resizeComplete;
        targetElement = getDOMElement(args.element);
        containerElement = getDOMElement(args.boundary);
        var directions = args.direction.split(' ');

        for (var i = 0; i < directions.length; i++) {
          var resizeHandler = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
            className: 'e-icons ' + RESIZE_HANDLER + ' ' + 'e-' + directions[i]
          });
          targetElement.appendChild(resizeHandler);
        }

        minHeight = args.minHeight;
        minWidth = args.minWidth;
        maxWidth = args.maxWidth;
        maxHeight = args.maxHeight;

        if (args.proxy && args.proxy.element && args.proxy.element.classList.contains('e-dialog')) {
          wireEvents(args.proxy);
        } else {
          wireEvents();
        }
      }

      function getDOMElement(element) {
        var domElement;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
          if (typeof element === 'string') {
            domElement = document.querySelector(element);
          } else {
            domElement = element;
          }
        }

        return domElement;
      } // tslint:disable-next-line


      function wireEvents(args) {
        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args)) {
          args = this;
        }

        var resizers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);

        for (var i = 0; i < resizers.length; i++) {
          selectedHandler = resizers[i];

          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(selectedHandler, 'mousedown', onMouseDown, args);

          var eventName = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' ? 'pointerdown' : 'touchstart';

          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(selectedHandler, eventName, onTouchStart, args);
        }
      }
      /* istanbul ignore next */


      function getEventType(e) {
        return e.indexOf('mouse') > -1 ? 'mouse' : 'touch';
      }
      /* istanbul ignore next */


      function onMouseDown(e) {
        e.preventDefault();
        targetElement = e.target.parentElement;
        calculateValues();
        originalMouseX = e.pageX;
        originalMouseY = e.pageY;
        e.target.classList.add(FOCUSED_HANDLER);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(resizeStart)) {
          proxy = this;

          if (resizeStart(e, proxy) === true) {
            return;
          }
        }

        var target = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? document : containerElement;

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'mousemove', onMouseMove, this);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mouseup', onMouseUp, this);

        for (var i = 0; i < RESTRICT_LEFT.length; i++) {
          if (targetElement.classList.contains(RESTRICT_LEFT[i])) {
            setLeft = false;
          } else {
            setLeft = true;
          }
        }
      }
      /* istanbul ignore next */


      function onMouseUp(e) {
        var touchMoveEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' ? 'pointermove' : 'touchmove';
        var touchEndEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' ? 'pointerup' : 'touchend';
        var target = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? document : containerElement;

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'mousemove', onMouseMove);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, touchMoveEvent, onMouseMove);

        var eventName = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' ? 'pointerdown' : 'touchstart';

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, eventName, onMouseMove);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(document.body.querySelector('.' + FOCUSED_HANDLER))) {
          document.body.querySelector('.' + FOCUSED_HANDLER).classList.remove(FOCUSED_HANDLER);
        }

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(resizeEnd)) {
          proxy = this;
          resizeEnd(e, proxy);
        }

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mouseup', onMouseUp);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, touchEndEvent, onMouseUp);
      }
      /* istanbul ignore next */


      function calculateValues() {
        originalWidth = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('width').replace('px', ''));
        originalHeight = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('height').replace('px', ''));
        originalX = targetElement.getBoundingClientRect().left;
        originalY = targetElement.getBoundingClientRect().top;
      }
      /* istanbul ignore next */


      function onTouchStart(e) {
        targetElement = e.target.parentElement;
        calculateValues();
        var coordinates = e.touches ? e.changedTouches[0] : e;
        originalMouseX = coordinates.pageX;
        originalMouseY = coordinates.pageY;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(resizeStart)) {
          proxy = this;

          if (resizeStart(e, proxy) === true) {
            return;
          }
        }

        var touchMoveEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' ? 'pointermove' : 'touchmove';
        var touchEndEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'msie' ? 'pointerup' : 'touchend';
        var target = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? document : containerElement;

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, touchMoveEvent, onMouseMove, this);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, touchEndEvent, onMouseUp);
      }
      /* istanbul ignore next */


      function onMouseMove(e) {
        if (e.target.classList.contains(RESIZE_HANDLER) && e.target.classList.contains(FOCUSED_HANDLER)) {
          selectedHandler = e.target;
        } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(document.body.querySelector('.' + FOCUSED_HANDLER))) {
          selectedHandler = document.body.querySelector('.' + FOCUSED_HANDLER);
        }

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selectedHandler)) {
          var resizeTowards = '';

          for (var i = 0; i < elementClass.length; i++) {
            if (selectedHandler.classList.contains('e-' + elementClass[i])) {
              resizeTowards = elementClass[i];
            }
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(resize)) {
            proxy = this;
            resize(e, proxy);
          }

          switch (resizeTowards) {
            case 'south':
              resizeSouth(e);
              break;

            case 'north':
              resizeNorth(e);
              break;

            case 'west':
              resizeWest(e);
              break;

            case 'east':
              resizeEast(e);
              break;

            case 'south-east':
              resizeSouth(e);
              resizeEast(e);
              break;

            case 'south-west':
              resizeSouth(e);
              resizeWest(e);
              break;

            case 'north-east':
              resizeNorth(e);
              resizeEast(e);
              break;

            case 'north-west':
              resizeNorth(e);
              resizeWest(e);
              break;

            default:
              break;
          }
        }
      }
      /* istanbul ignore next */


      function getClientRectValues(element) {
        return element.getBoundingClientRect();
      }
      /* istanbul ignore next */
      // tslint:disable-next-line


      function resizeSouth(e) {
        var documentHeight = document.documentElement.clientHeight;
        var calculateValue = false;
        var containerRectValues;
        var coordinates = e.touches ? e.changedTouches[0] : e;
        var currentpageY = coordinates.pageY;
        var targetRectValues = getClientRectValues(targetElement);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
          containerRectValues = getClientRectValues(containerElement);
        }

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
          calculateValue = true;
        } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && (documentHeight - currentpageY >= 0 || targetRectValues.top < 0)) {
          calculateValue = true;
        }

        var calculatedHeight = originalHeight + (currentpageY - originalMouseY);
        calculatedHeight = calculatedHeight > minHeight ? calculatedHeight : minHeight;
        var containerTop = 0;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
          containerTop = containerRectValues.top;
        }

        var borderValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? 0 : containerElement.offsetHeight - containerElement.clientHeight;
        var topWithoutborder = targetRectValues.top - containerTop - borderValue / 2;
        topWithoutborder = topWithoutborder < 0 ? 0 : topWithoutborder;

        if (targetRectValues.top > 0 && topWithoutborder + calculatedHeight > maxHeight) {
          calculateValue = false;

          if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {
            return;
          }

          targetElement.style.height = maxHeight - parseInt(topWithoutborder.toString(), 10) + 'px';
          return;
        }

        var targetTop = 0;

        if (calculateValue) {
          if (targetRectValues.top < 0 && documentHeight + (targetRectValues.height + targetRectValues.top) > 0) {
            targetTop = targetRectValues.top;

            if (calculatedHeight + targetTop <= 30) {
              calculatedHeight = targetRectValues.height - (targetRectValues.height + targetRectValues.top) + 30;
            }
          }

          if (calculatedHeight + targetRectValues.top >= maxHeight) {
            targetElement.style.height = targetRectValues.height + (documentHeight - (targetRectValues.height + targetRectValues.top)) + 'px';
          }

          var calculatedTop = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? targetTop : topWithoutborder;

          if (calculatedHeight >= minHeight && calculatedHeight + calculatedTop <= maxHeight) {
            targetElement.style.height = calculatedHeight + 'px';
          }
        }
      }
      /* istanbul ignore next */
      // tslint:disable-next-line


      function resizeNorth(e) {
        var calculateValue = false;
        var boundaryRectValues;
        var pageY = getEventType(e.type) === 'mouse' ? e.pageY : e.touches[0].pageY;
        var targetRectValues = getClientRectValues(targetElement);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
          boundaryRectValues = getClientRectValues(containerElement);
        }

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && targetRectValues.top - boundaryRectValues.top > 0) {
          calculateValue = true;
        } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && pageY > 0) {
          calculateValue = true;
        }

        var currentHeight = originalHeight - (pageY - originalMouseY);

        if (getClientRectValues(targetElement).bottom + currentHeight > maxHeight) {
          calculateValue = false;
          targetElement.style.height = maxHeight - getClientRectValues(targetElement).bottom + 'px';
        }

        if (calculateValue) {
          if (currentHeight >= minHeight && currentHeight <= maxHeight) {
            var containerTop = 0;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
              containerTop = boundaryRectValues.top;
            }

            var top = originalY - containerTop + (pageY - originalMouseY);
            top = top > 0 ? top : 1;
            targetElement.style.height = currentHeight + 'px';
            targetElement.style.top = top + 'px';
          }
        }
      }
      /* istanbul ignore next */
      // tslint:disable-next-line


      function resizeWest(e) {
        var documentWidth = document.documentElement.clientWidth;
        var calculateValue = false;
        var rectValues;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
          rectValues = getClientRectValues(containerElement);
        }

        var pageX = getEventType(e.type) === 'mouse' ? e.pageX : e.touches[0].pageX;
        var targetRectValues = getClientRectValues(targetElement);
        var borderValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? 0 : containerElement.offsetWidth - containerElement.clientWidth;
        var left = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? 0 : rectValues.left;
        var containerWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) ? 0 : rectValues.width;

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(resizeWestWidth)) {
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
            resizeWestWidth = targetRectValues.left - left - borderValue / 2 + targetRectValues.width;
            resizeWestWidth = resizeWestWidth + (containerWidth - borderValue - resizeWestWidth);
          } else {
            resizeWestWidth = documentWidth;
          }
        }

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && targetRectValues.left - rectValues.left + targetRectValues.width + (rectValues.right - targetRectValues.right) - borderValue <= maxWidth) {
          calculateValue = true;
        } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && pageX >= 0) {
          calculateValue = true;
        }

        var calculatedWidth = originalWidth - (pageX - originalMouseX);

        if (setLeft) {
          calculatedWidth = calculatedWidth > resizeWestWidth ? resizeWestWidth : calculatedWidth;
        }

        if (calculateValue) {
          if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {
            var containerLeft = 0;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
              containerLeft = rectValues.left;
            }

            var _left = originalX - containerLeft + (pageX - originalMouseX);

            _left = _left > 0 ? _left : 1;

            if (calculatedWidth !== previousWidth && setWidth) {
              targetElement.style.width = calculatedWidth + 'px';
            }

            if (setLeft) {
              targetElement.style.left = _left + 'px';

              if (_left === 1) {
                setWidth = false;
              } else {
                setWidth = true;
              }
            }
          }
        }

        previousWidth = calculatedWidth;
      }
      /* istanbul ignore next */
      // tslint:disable-next-line


      function resizeEast(e) {
        var documentWidth = document.documentElement.clientWidth;
        var calculateValue = false;
        var containerRectValues;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
          containerRectValues = getClientRectValues(containerElement);
        }

        var coordinates = e.touches ? e.changedTouches[0] : e;
        var pageX = coordinates.pageX;
        var targetRectValues = getClientRectValues(targetElement);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && (targetRectValues.left - containerRectValues.left + targetRectValues.width < maxWidth || targetRectValues.right - containerRectValues.left > targetRectValues.width)) {
          calculateValue = true;
        } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement) && documentWidth - pageX > 0) {
          calculateValue = true;
        }

        var calculatedWidth = originalWidth + (pageX - originalMouseX);
        var containerLeft = 0;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(containerElement)) {
          containerLeft = containerRectValues.left;
        }

        if (targetRectValues.left - containerLeft + calculatedWidth > maxWidth) {
          calculateValue = false;

          if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {
            return;
          }

          targetElement.style.width = maxWidth - (targetRectValues.left - containerLeft) + 'px';
        }

        if (calculateValue) {
          if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {
            targetElement.style.width = calculatedWidth + 'px';
          }
        }
      }
      /* istanbul ignore next */


      function setMinHeight(minimumHeight) {
        minHeight = minimumHeight;
      }

      function removeResize() {
        var handlers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);

        for (var i = 0; i < handlers.length; i++) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(handlers[i]);
        }
      }

      var __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var ButtonProps = /*#__PURE__*/function (_syncfusion_ej2_base_28) {
        _inherits2(ButtonProps, _syncfusion_ej2_base_28);

        var _super46 = _createSuper(ButtonProps);

        function ButtonProps() {
          _classCallCheck2(this, ButtonProps);

          return _super46.apply(this, arguments);
        }

        return ButtonProps;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], ButtonProps.prototype, "buttonModel", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Button')], ButtonProps.prototype, "type", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ButtonProps.prototype, "click", void 0);
      /**
       * Configures the animation properties for both open and close the dialog.
       */


      var AnimationSettings = /*#__PURE__*/function (_syncfusion_ej2_base_29) {
        _inherits2(AnimationSettings, _syncfusion_ej2_base_29);

        var _super47 = _createSuper(AnimationSettings);

        function AnimationSettings() {
          _classCallCheck2(this, AnimationSettings);

          return _super47.apply(this, arguments);
        }

        return AnimationSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Fade')], AnimationSettings.prototype, "effect", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(400)], AnimationSettings.prototype, "duration", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], AnimationSettings.prototype, "delay", void 0);

      var ROOT = 'e-dialog';
      var RTL = 'e-rtl';
      var DLG_HEADER_CONTENT = 'e-dlg-header-content';
      var DLG_HEADER = 'e-dlg-header';
      var DLG_FOOTER_CONTENT = 'e-footer-content';
      var MODAL_DLG = 'e-dlg-modal';
      var DLG_CONTENT = 'e-dlg-content';
      var DLG_CLOSE_ICON = 'e-icon-dlg-close';
      var DLG_OVERLAY = 'e-dlg-overlay';
      var DLG_TARGET = 'e-dlg-target';
      var DLG_CONTAINER = 'e-dlg-container';
      var SCROLL_DISABLED = 'e-scroll-disabled';
      var DLG_PRIMARY_BUTTON = 'e-primary';
      var ICON = 'e-icons';
      var POPUP_ROOT = 'e-popup';
      var DEVICE = 'e-device';
      var FULLSCREEN = 'e-dlg-fullscreen';
      var DLG_CLOSE_ICON_BTN = 'e-dlg-closeicon-btn';
      var DLG_HIDE = 'e-popup-close';
      var DLG_SHOW = 'e-popup-open';
      var DLG_UTIL_DEFAULT_TITLE = 'Information';
      var DLG_UTIL_ROOT = 'e-scroll-disabled';
      var DLG_UTIL_ALERT = 'e-alert-dialog';
      var DLG_UTIL_CONFIRM = 'e-confirm-dialog';
      var DLG_RESIZABLE = 'e-dlg-resizable';
      var DLG_RESTRICT_LEFT_VALUE = 'e-restrict-left';
      var DLG_RESTRICT_WIDTH_VALUE = 'e-resize-viewport';
      var DLG_REF_ELEMENT = 'e-dlg-ref-element';
      /**
       * Represents the dialog component that displays the information and get input from the user.
       * Two types of dialog components are `Modal and Modeless (non-modal)` depending on its interaction with parent application.
       * ```html
       * <div id="dialog"></div>
       * ```
       * ```typescript
       * <script>
       *   var dialogObj = new Dialog({ header: 'Dialog' });
       *   dialogObj.appendTo("#dialog");
       * </script>
       * ```
       */

      var Dialog = /*#__PURE__*/function (_syncfusion_ej2_base_30) {
        _inherits2(Dialog, _syncfusion_ej2_base_30);

        var _super48 = _createSuper(Dialog);

        /**
         * Constructor for creating the widget
         * @hidden
         */
        function Dialog(options, element) {
          _classCallCheck2(this, Dialog);

          return _super48.call(this, options, element);
        }
        /**
         * Initialize the control rendering
         * @private
         */


        _createClass2(Dialog, [{
          key: "render",
          value: function render() {
            this.initialize();
            this.initRender();
            this.wireEvents();

            if (this.width === '100%') {
              this.element.style.width = '';
            }

            if (this.minHeight !== '') {
              this.element.style.minHeight = this.minHeight.toString();
            }

            if (this.enableResize) {
              this.setResize();

              if (this.animationSettings.effect === 'None') {
                this.getMinHeight();
              }
            }

            this.renderComplete();
          }
          /**
           * Initialize the event handler
           * @private
           */

        }, {
          key: "preRender",
          value: function preRender() {
            var _this130 = this;

            this.headerContent = null;
            this.allowMaxHeight = true;
            this.preventVisibility = true;
            this.clonedEle = this.element.cloneNode(true);

            this.closeIconClickEventHandler = function (event) {
              _this130.hide(event);
            };

            this.dlgOverlayClickEventHandler = function (event) {
              _this130.trigger('overlayClick', event);

              _this130.focusContent();
            };

            var localeText = {
              close: 'Close'
            };
            this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('dialog', localeText, this.locale);
            this.checkPositionData();

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target)) {
              var prevOnChange = this.isProtectedOnChange;
              this.isProtectedOnChange = true;
              this.target = document.body;
              this.isProtectedOnChange = prevOnChange;
            }
          }
        }, {
          key: "isNumberValue",
          value: function isNumberValue(value) {
            var isNumber = /^[-+]?\d*\.?\d+$/.test(value);
            return isNumber;
          }
        }, {
          key: "checkPositionData",
          value: function checkPositionData() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.position)) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.position.X) && typeof this.position.X !== 'number') {
                var isNumber = this.isNumberValue(this.position.X);

                if (isNumber) {
                  var prevOnChange = this.isProtectedOnChange;
                  this.isProtectedOnChange = true;
                  this.position.X = parseFloat(this.position.X);
                  this.isProtectedOnChange = prevOnChange;
                }
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.position.Y) && typeof this.position.Y !== 'number') {
                var _isNumber = this.isNumberValue(this.position.Y);

                if (_isNumber) {
                  var _prevOnChange = this.isProtectedOnChange;
                  this.isProtectedOnChange = true;
                  this.position.Y = parseFloat(this.position.Y);
                  this.isProtectedOnChange = _prevOnChange;
                }
              }
            }
          }
        }, {
          key: "getEle",
          value: function getEle(list, selector) {
            var element = undefined;

            for (var i = 0; i < list.length; i++) {
              if (list[i].classList.contains(selector)) {
                element = list[i];
                break;
              }
            }

            return element;
          }
          /* istanbul ignore next */

        }, {
          key: "getMinHeight",
          value: function getMinHeight() {
            var computedHeaderHeight = '0px';
            var computedFooterHeight = '0px';

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.' + DLG_HEADER_CONTENT))) {
              computedHeaderHeight = getComputedStyle(this.headerContent).height;
            }

            var footerEle = this.getEle(this.element.children, DLG_FOOTER_CONTENT);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(footerEle)) {
              computedFooterHeight = getComputedStyle(footerEle).height;
            }

            var headerHeight = parseInt(computedHeaderHeight.slice(0, computedHeaderHeight.indexOf('p')), 10);
            var footerHeight = parseInt(computedFooterHeight.slice(0, computedFooterHeight.indexOf('p')), 10);
            setMinHeight(headerHeight + 30 + footerHeight);
            return headerHeight + 30 + footerHeight;
          }
        }, {
          key: "onResizeStart",
          value: function onResizeStart(args, dialogObj) {
            dialogObj.trigger('resizeStart', args);
            return args.cancel;
          }
        }, {
          key: "onResizing",
          value: function onResizing(args, dialogObj) {
            dialogObj.trigger('resizing', args);
          }
        }, {
          key: "onResizeComplete",
          value: function onResizeComplete(args, dialogObj) {
            dialogObj.trigger('resizeStop', args);
          }
        }, {
          key: "setResize",
          value: function setResize() {
            if (this.enableResize) {
              if (this.isBlazorServerRender() && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.e-icons.e-resize-handle'))) {
                return;
              }

              this.element.classList.add(DLG_RESIZABLE);
              var computedHeight = getComputedStyle(this.element).minHeight;
              var computedWidth = getComputedStyle(this.element).minWidth;
              var direction = this.enableRtl ? 'south-west' : 'south-east';

              if (this.isModal && this.enableRtl) {
                this.element.classList.add(DLG_RESTRICT_LEFT_VALUE);
              } else if (this.isModal && this.target === document.body) {
                this.element.classList.add(DLG_RESTRICT_WIDTH_VALUE);
              }

              createResize({
                element: this.element,
                direction: direction,
                minHeight: parseInt(computedHeight.slice(0, computedWidth.indexOf('p')), 10),
                maxHeight: this.targetEle.clientHeight,
                minWidth: parseInt(computedWidth.slice(0, computedWidth.indexOf('p')), 10),
                maxWidth: this.targetEle.clientWidth,
                boundary: this.target === document.body ? null : this.targetEle,
                resizeBegin: this.onResizeStart.bind(this),
                resizeComplete: this.onResizeComplete.bind(this),
                resizing: this.onResizing.bind(this),
                proxy: this
              });
            } else {
              removeResize();

              if (this.isModal) {
                this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);
              } else {
                this.element.classList.remove(DLG_RESTRICT_WIDTH_VALUE);
              }

              this.element.classList.remove(DLG_RESIZABLE);
            }
          }
          /* istanbul ignore next */

        }, {
          key: "keyDown",
          value: function keyDown(event) {
            var _this131 = this;

            if (event.keyCode === 9) {
              if (this.isModal) {
                var buttonObj;

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.btnObj)) {
                  buttonObj = this.btnObj[this.btnObj.length - 1];
                }

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.btnObj) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ftrTemplateContent)) {
                  var value = 'input,select,textarea,button,a,[contenteditable="true"],[tabindex]';
                  var items = this.ftrTemplateContent.querySelectorAll(value);
                  buttonObj = {
                    element: items[items.length - 1]
                  };
                }

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(buttonObj) && document.activeElement === buttonObj.element && !event.shiftKey) {
                  event.preventDefault();
                  this.focusableElements(this.element).focus();
                }

                if (document.activeElement === this.focusableElements(this.element) && event.shiftKey) {
                  event.preventDefault();

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(buttonObj)) {
                    buttonObj.element.focus();
                  }
                }
              }
            }

            var element = document.activeElement;
            var isTagName = ['input', 'textarea'].indexOf(element.tagName.toLowerCase()) > -1;
            var isContentEdit = false;

            if (!isTagName) {
              isContentEdit = element.hasAttribute('contenteditable') && element.getAttribute('contenteditable') === 'true';
            }

            if (event.keyCode === 27 && this.closeOnEscape) {
              this.hide(event);
            }

            if (event.keyCode === 13 && !event.ctrlKey && element.tagName.toLowerCase() !== 'textarea' && isTagName && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.primaryButtonEle) || event.keyCode === 13 && event.ctrlKey && (element.tagName.toLowerCase() === 'textarea' || isContentEdit) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.primaryButtonEle)) {
              var buttonIndex;
              var firstPrimary = this.buttons.some(function (data, index) {
                buttonIndex = index;
                var buttonModel = data.buttonModel;
                return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(buttonModel) && buttonModel.isPrimary === true;
              });

              if (firstPrimary && typeof this.buttons[buttonIndex].click === 'function') {
                setTimeout(function () {
                  _this131.buttons[buttonIndex].click.call(_this131, event);
                });
              }
            }
          }
          /**
           * Initialize the control rendering
           * @private
           */

        }, {
          key: "initialize",
          value: function initialize() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target)) {
              this.targetEle = typeof this.target === 'string' ? document.querySelector(this.target) : this.target;
            }

            if (!this.isBlazorServerRender()) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], ROOT);
            }

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], DEVICE);
            }

            if (!this.isBlazorServerRender()) {
              this.setCSSClass();
            }

            this.setMaxHeight();
          }
          /**
           * Initialize the rendering
           * @private
           */

        }, {
          key: "initRender",
          value: function initRender() {
            var _this132 = this;

            this.initialRender = true;

            if (!this.isBlazorServerRender()) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
                role: 'dialog'
              });
            }

            if (this.zIndex === 1000) {
              this.setzIndex(this.element, false);
              this.calculatezIndex = true;
            } else {
              this.calculatezIndex = false;
            }

            if (this.isBlazorServerRender() && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
              this.headerContent = this.element.getElementsByClassName('e-dlg-header-content')[0];
            }

            if (this.isBlazorServerRender() && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.contentEle)) {
              this.contentEle = this.element.querySelector('#' + this.element.id + '_dialog-content');
            }

            if (!this.isBlazorServerRender()) {
              this.setTargetContent();

              if (this.header !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.header)) {
                this.setHeader();
              }

              if (this.showCloseIcon) {
                this.renderCloseIcon();
              }

              this.setContent();

              if (this.footerTemplate !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.footerTemplate)) {
                this.setFooterTemplate();
              } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons[0].buttonModel)) {
                this.setButton();
              }
            }

            if (this.isBlazorServerRender()) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons[0].buttonModel) && this.footerTemplate === '') {
                this.setButton();
              }
            }

            if (this.allowDragging && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
              this.setAllowDragging();
            }

            if (!this.isBlazorServerRender()) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
                'aria-modal': this.isModal ? 'true' : 'false'
              });

              if (this.isModal) {
                this.setIsModal();
              }
            }

            if (this.isBlazorServerRender() && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dlgContainer)) {
              this.dlgContainer = this.element.parentElement;

              for (var i = 0, childNodes = this.dlgContainer.children; i < childNodes.length; i++) {
                if (childNodes[i].classList.contains('e-dlg-overlay')) {
                  this.dlgOverlay = childNodes[i];
                }
              }
            }

            if (this.element.classList.contains(DLG_UTIL_ALERT) !== true && this.element.classList.contains(DLG_UTIL_CONFIRM) !== true && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.parentElement)) {
              var parentEle = this.isModal ? this.dlgContainer.parentElement : this.element.parentElement;
              this.refElement = this.createElement('div', {
                className: DLG_REF_ELEMENT
              });
              parentEle.insertBefore(this.refElement, this.isModal ? this.dlgContainer : this.element);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.targetEle)) {
              this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element);
            }

            this.popupObj = new Popup(this.element, {
              height: this.height,
              width: this.width,
              zIndex: this.zIndex,
              relateTo: this.target,
              actionOnScroll: 'none',
              enableRtl: this.enableRtl,
              open: function open(event) {
                var eventArgs = {
                  container: _this132.isModal ? _this132.dlgContainer : _this132.element,
                  element: _this132.element,
                  target: _this132.target,
                  preventFocus: false
                };

                if (_this132.enableResize) {
                  _this132.resetResizeIcon();
                }

                _this132.trigger('open', eventArgs, function (openEventArgs) {
                  if (!openEventArgs.preventFocus) {
                    _this132.focusContent();
                  }
                });
              },
              close: function close(event) {
                if (_this132.isModal) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this132.dlgOverlay], 'e-fade');
                }

                _this132.unBindEvent(_this132.element);

                if (_this132.isModal) {
                  _this132.dlgContainer.style.display = 'none';
                }

                _this132.trigger('close', _this132.closeArgs);

                var activeEle = document.activeElement;

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeEle) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeEle.blur)) {
                  activeEle.blur();
                }

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this132.storeActiveElement) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this132.storeActiveElement.focus)) {
                  _this132.storeActiveElement.focus();
                }
              }
            });
            this.positionChange();
            this.setEnableRTL();

            if (!this.isBlazorServerRender()) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], DLG_HIDE);

              if (this.isModal) {
                this.setOverlayZindex();
              }
            }

            if (this.visible) {
              this.show();
            } else {
              if (this.isModal) {
                this.dlgOverlay.style.display = 'none';
              }
            }

            this.initialRender = false;
          }
        }, {
          key: "resetResizeIcon",
          value: function resetResizeIcon() {
            var dialogConHeight = this.getMinHeight();

            if (this.targetEle.offsetHeight < dialogConHeight) {
              var className = this.enableRtl ? 'e-south-west' : 'e-south-east';
              var resizeIcon = this.element.querySelector('.' + className);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(resizeIcon)) {
                resizeIcon.style.bottom = '-' + dialogConHeight.toString() + 'px';
              }
            }
          }
        }, {
          key: "setOverlayZindex",
          value: function setOverlayZindex(zIndexValue) {
            var zIndex;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(zIndexValue)) {
              zIndex = parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex;
            } else {
              zIndex = zIndexValue;
            }

            this.dlgOverlay.style.zIndex = (zIndex - 1).toString();
            this.dlgContainer.style.zIndex = zIndex.toString();
          }
        }, {
          key: "positionChange",
          value: function positionChange() {
            if (this.isModal) {
              if (!isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
                this.setPopupPosition();
              } else if (!isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y)) || isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
                this.setPopupPosition();
              } else {
                this.element.style.top = '0px';
                this.element.style.left = '0px';
                this.dlgContainer.classList.add('e-dlg-' + this.position.X + '-' + this.position.Y);
              }
            } else {
              this.setPopupPosition();
            }
          }
        }, {
          key: "setPopupPosition",
          value: function setPopupPosition() {
            this.popupObj.setProperties({
              position: {
                X: this.position.X,
                Y: this.position.Y
              }
            });
          }
        }, {
          key: "setAllowDragging",
          value: function setAllowDragging() {
            var _this133 = this;

            var handleContent = '.' + DLG_HEADER_CONTENT;
            this.dragObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Draggable"](this.element, {
              clone: false,
              abort: '.e-dlg-closeicon-btn',
              handle: handleContent,
              dragStart: function dragStart(event) {
                _this133.trigger('dragStart', event, function (dragEventArgs) {
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                    dragEventArgs.bindEvents(event.dragElement);
                  }
                });
              },
              dragStop: function dragStop(event) {
                if (_this133.isModal) {
                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this133.position)) {
                    _this133.dlgContainer.classList.remove('e-dlg-' + _this133.position.X + '-' + _this133.position.Y);
                  } // Reset the dialog position after drag completion.


                  _this133.element.style.position = 'relative';
                }

                _this133.trigger('dragStop', event);

                _this133.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);
              },
              drag: function drag(event) {
                _this133.trigger('drag', event);
              }
            });

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.targetEle)) {
              this.dragObj.dragArea = this.targetEle;
            }
          }
        }, {
          key: "setButton",
          value: function setButton() {
            if (!this.isBlazorServerRender()) {
              this.buttonContent = [];
              this.btnObj = [];

              for (var i = 0; i < this.buttons.length; i++) {
                var buttonType = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons[i].type) ? this.buttons[i].type.toLowerCase() : 'button';
                var btn = this.createElement('button', {
                  attrs: {
                    type: buttonType
                  }
                });
                this.buttonContent.push(btn.outerHTML);
              }

              this.setFooterTemplate();
            }

            var footerBtn;

            for (var _i72 = 0, childNodes = this.element.children; _i72 < childNodes.length; _i72++) {
              if (childNodes[_i72].classList.contains(DLG_FOOTER_CONTENT)) {
                footerBtn = childNodes[_i72].querySelectorAll('button');
              }
            }

            for (var _i73 = 0; _i73 < this.buttons.length; _i73++) {
              if (!this.isBlazorServerRender()) {
                this.btnObj[_i73] = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"](this.buttons[_i73].buttonModel);
              }

              if (this.isBlazorServerRender()) {
                this.ftrTemplateContent = this.element.querySelector('.' + DLG_FOOTER_CONTENT);
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ftrTemplateContent) && typeof this.buttons[_i73].click === 'function' && footerBtn.length > 0) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(footerBtn[_i73], 'click', this.buttons[_i73].click, this);
              }

              if (!this.isBlazorServerRender() && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ftrTemplateContent)) {
                this.btnObj[_i73].appendTo(this.ftrTemplateContent.children[_i73]);

                this.btnObj[_i73].element.classList.add('e-flat');

                this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];
              }
            }
          }
        }, {
          key: "setContent",
          value: function setContent() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              'aria-describedby': this.element.id + '_dialog-content'
            });
            this.contentEle = this.createElement('div', {
              className: DLG_CONTENT,
              id: this.element.id + '_dialog-content'
            });

            if (this.innerContentElement) {
              this.contentEle.appendChild(this.innerContentElement);
            } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content) && this.content !== '' || !this.initialRender) {
              if (typeof this.content === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                this.contentEle.innerHTML = this.sanitizeHelper(this.content);
              } else if (this.content instanceof HTMLElement) {
                this.contentEle.appendChild(this.content);
              } else {
                this.setTemplate(this.content, this.contentEle);
              }
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
              this.element.insertBefore(this.contentEle, this.element.children[1]);
            } else {
              this.element.insertBefore(this.contentEle, this.element.children[0]);
            }

            if (this.height === 'auto') {
              if (!this.isBlazorServerRender() && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE && this.element.style.width === '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.width)) {
                this.element.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width);
              }

              this.setMaxHeight();
            }
          }
        }, {
          key: "setTemplate",
          value: function setTemplate(template, toElement) {
            var templateFn;
            var templateProps;

            if (toElement.classList.contains(DLG_HEADER)) {
              templateProps = this.element.id + 'header';
            } else if (toElement.classList.contains(DLG_FOOTER_CONTENT)) {
              templateProps = this.element.id + 'footerTemplate';
            } else {
              templateProps = this.element.id + 'content';
            }

            var templateValue;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(template.outerHTML)) {
              toElement.appendChild(template);
            } else if (typeof template !== 'string' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isStringTemplate) {
              templateFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
              templateValue = template;
            } else {
              toElement.innerHTML = this.sanitizeHelper(template);
            }

            var fromElements = [];

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(templateFn)) {
              var isString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isStringTemplate && templateValue.indexOf('<div>Blazor') === 0 ? this.isStringTemplate : true;

              var _iterator57 = _createForOfIteratorHelper(templateFn({}, null, null, templateProps, isString)),
                  _step57;

              try {
                for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {
                  var item = _step57.value;
                  fromElements.push(item);
                }
              } catch (err) {
                _iterator57.e(err);
              } finally {
                _iterator57.f();
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([].slice.call(fromElements), toElement);
            }
          }
          /**
           * @hidden
           */

        }, {
          key: "sanitizeHelper",
          value: function sanitizeHelper(value) {
            if (this.enableHtmlSanitizer) {
              var dialogItem = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].beforeSanitize();

              var beforeEvent = {
                cancel: false,
                helper: null
              };
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(dialogItem, dialogItem, beforeEvent);
              this.trigger('beforeSanitizeHtml', dialogItem);

              if (dialogItem.cancel && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dialogItem.helper)) {
                value = dialogItem.helper(value);
              } else if (!dialogItem.cancel) {
                value = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].serializeValue(dialogItem, value);
              }
            }

            return value;
          }
        }, {
          key: "setMaxHeight",
          value: function setMaxHeight() {
            if (!this.allowMaxHeight) {
              return;
            }

            var display = this.element.style.display;
            this.element.style.display = 'none';
            this.element.style.maxHeight = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target) && this.targetEle.offsetHeight < window.innerHeight ? this.targetEle.offsetHeight - 20 + 'px' : window.innerHeight - 20 + 'px';
            this.element.style.display = display;

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE && this.height === 'auto' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.contentEle) && this.element.offsetHeight < this.contentEle.offsetHeight) {
              this.element.style.height = 'inherit';
            }
          }
        }, {
          key: "setEnableRTL",
          value: function setEnableRTL() {
            if (!this.isBlazorServerRender()) {
              this.enableRtl ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], RTL) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], RTL);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.e-resize-handle'))) {
              removeResize();
              this.setResize();
            }
          }
        }, {
          key: "setTargetContent",
          value: function setTargetContent() {
            var _this134 = this;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content) || this.content === '') {
              var isContent = this.element.innerHTML.replace(/\s|<(\/?|\!?)(!--!--)>/g, '') !== '';

              if (this.element.children.length > 0 || isContent) {
                this.innerContentElement = document.createDocumentFragment();
                [].slice.call(this.element.childNodes).forEach(function (el) {
                  if (el.nodeType !== 8) {
                    _this134.innerContentElement.appendChild(el);
                  }
                });
              }
            }
          }
        }, {
          key: "setHeader",
          value: function setHeader() {
            if (this.headerEle) {
              this.headerEle.innerHTML = '';
            } else {
              this.headerEle = this.createElement('div', {
                id: this.element.id + '_title',
                className: DLG_HEADER
              });
            }

            this.createHeaderContent();
            this.headerContent.appendChild(this.headerEle);
            this.setTemplate(this.header, this.headerEle);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              'aria-labelledby': this.element.id + '_title'
            });
            this.element.insertBefore(this.headerContent, this.element.children[0]);
          }
        }, {
          key: "setFooterTemplate",
          value: function setFooterTemplate() {
            if (this.ftrTemplateContent) {
              this.ftrTemplateContent.innerHTML = '';
            } else {
              this.ftrTemplateContent = this.createElement('div', {
                className: DLG_FOOTER_CONTENT
              });
            }

            if (this.footerTemplate !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.footerTemplate)) {
              this.setTemplate(this.footerTemplate, this.ftrTemplateContent);
            } else {
              this.ftrTemplateContent.innerHTML = this.buttonContent.join('');
            }

            this.element.appendChild(this.ftrTemplateContent);
          }
        }, {
          key: "createHeaderContent",
          value: function createHeaderContent() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
              this.headerContent = this.createElement('div', {
                id: this.element.id + '_dialog-header',
                className: DLG_HEADER_CONTENT
              });
            }
          }
        }, {
          key: "renderCloseIcon",
          value: function renderCloseIcon() {
            this.closeIcon = this.createElement('button', {
              className: DLG_CLOSE_ICON_BTN,
              attrs: {
                type: 'button'
              }
            });
            this.closeIconBtnObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]({
              cssClass: 'e-flat',
              iconCss: DLG_CLOSE_ICON + ' ' + ICON
            });
            this.closeIconTitle();

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.closeIcon], this.headerContent);
            } else {
              this.createHeaderContent();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.closeIcon], this.headerContent);
              this.element.insertBefore(this.headerContent, this.element.children[0]);
            }

            this.closeIconBtnObj.appendTo(this.closeIcon);
          }
        }, {
          key: "closeIconTitle",
          value: function closeIconTitle() {
            this.l10n.setLocale(this.locale);
            var closeIconTitle = this.l10n.getConstant('close');
            this.closeIcon.setAttribute('title', closeIconTitle);
            this.closeIcon.setAttribute('aria-label', closeIconTitle);
          }
        }, {
          key: "setCSSClass",
          value: function setCSSClass(oldCSSClass) {
            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.cssClass.split(' '));
            }

            if (oldCSSClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldCSSClass.split(' '));
            }
          }
        }, {
          key: "setIsModal",
          value: function setIsModal() {
            this.dlgContainer = this.createElement('div', {
              className: DLG_CONTAINER
            });
            this.element.classList.remove(DLG_SHOW);
            this.element.parentNode.insertBefore(this.dlgContainer, this.element);
            this.dlgContainer.appendChild(this.element);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], MODAL_DLG);
            this.dlgOverlay = this.createElement('div', {
              className: DLG_OVERLAY
            });
            this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
            this.dlgContainer.appendChild(this.dlgOverlay);
          }
        }, {
          key: "getValidFocusNode",
          value: function getValidFocusNode(items) {
            var node;

            for (var u = 0; u < items.length; u++) {
              node = items[u];

              if ((node.clientHeight > 0 || node.tagName.toLowerCase() === 'a' && node.hasAttribute('href')) && node.tabIndex > -1 && !node.disabled && !this.disableElement(node, '[disabled],[aria-disabled="true"],[type="hidden"]')) {
                return node;
              }
            }

            return node;
          }
        }, {
          key: "focusableElements",
          value: function focusableElements(content) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(content)) {
              var value = 'input,select,textarea,button,a,[contenteditable="true"],[tabindex]';
              var items = content.querySelectorAll(value);
              return this.getValidFocusNode(items);
            }

            return null;
          }
        }, {
          key: "getAutoFocusNode",
          value: function getAutoFocusNode(container) {
            var node = container.querySelector('.' + DLG_CLOSE_ICON_BTN);
            var value = '[autofocus]';
            var items = container.querySelectorAll(value);
            var validNode = this.getValidFocusNode(items);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(validNode)) {
              node = validNode;
            } else {
              validNode = this.focusableElements(this.contentEle);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(validNode)) {
                return node = validNode;
              } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.primaryButtonEle)) {
                return this.element.querySelector('.' + DLG_PRIMARY_BUTTON);
              }
            }

            return node;
          }
        }, {
          key: "disableElement",
          value: function disableElement(element, t) {
            var elementMatch = element ? element.matches || element.webkitMatchesSelector || element.msMatchesSelector : null;

            if (elementMatch) {
              for (; element; element = element.parentNode) {
                if (element instanceof Element && elementMatch.call(element, t)) {
                  /* istanbul ignore next */
                  return element;
                }
              }
            }

            return null;
          }
        }, {
          key: "focusContent",
          value: function focusContent() {
            var element = this.getAutoFocusNode(this.element);
            var node = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element) ? element : this.element;
            node.focus();
            this.bindEvent(this.element);
          }
        }, {
          key: "bindEvent",
          value: function bindEvent(element) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(element, 'keydown', this.keyDown, this);
          }
        }, {
          key: "unBindEvent",
          value: function unBindEvent(element) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(element, 'keydown', this.keyDown);
          }
        }, {
          key: "updateSanitizeContent",
          value: function updateSanitizeContent() {
            if (!this.isBlazorServerRender()) {
              this.contentEle.innerHTML = this.sanitizeHelper(this.content);
            }
          }
        }, {
          key: "isBlazorServerRender",
          value: function isBlazorServerRender() {
            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered;
          }
          /**
           * Module required function
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'dialog';
          }
          /**
           * Called internally if any of the property value changed
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            if (!this.element.classList.contains(ROOT)) {
              return;
            }

            for (var _i74 = 0, _Object$keys19 = Object.keys(newProp); _i74 < _Object$keys19.length; _i74++) {
              var prop = _Object$keys19[_i74];

              switch (prop) {
                case 'content':
                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content) && this.content !== '') {
                    if (this.isBlazorServerRender()) {
                      this.contentEle = this.element.querySelector('.e-dlg-content');
                    }

                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.contentEle) && this.contentEle.getAttribute('role') !== 'dialog') {
                      if (!this.isBlazorServerRender()) {
                        this.contentEle.innerHTML = '';
                      }

                      typeof this.content === 'string' ? this.isBlazorServerRender() && this.contentEle.innerText === '' ? this.contentEle.insertAdjacentHTML('beforeend', this.sanitizeHelper(this.content)) : this.updateSanitizeContent() : this.contentEle.appendChild(this.content);
                      this.setMaxHeight();
                    } else {
                      if (!this.isBlazorServerRender() || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.e-dlg-content'))) {
                        this.setContent();
                      }
                    }
                  } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.contentEle)) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.contentEle);
                    this.contentEle = null;
                  }

                  break;

                case 'header':
                  if (this.header === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.header)) {
                    if (this.headerEle) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.headerEle);
                      this.headerEle = null;
                    }
                  } else {
                    if (!this.isBlazorServerRender() || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.e-dlg-header-content'))) {
                      this.setHeader();
                    }
                  }

                  break;

                case 'footerTemplate':
                  if (this.footerTemplate === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.footerTemplate)) {
                    if (!this.ftrTemplateContent) {
                      return;
                    }

                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.ftrTemplateContent);
                    this.ftrTemplateContent = null;
                    this.buttons = [{}];
                  } else {
                    if (!this.isBlazorServerRender() || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.querySelector('.e-footer-content'))) {
                      this.setFooterTemplate();
                    }

                    this.buttons = [{}];
                  }

                  break;

                case 'showCloseIcon':
                  if (this.element.getElementsByClassName(DLG_CLOSE_ICON).length > 0) {
                    if (!this.showCloseIcon && (this.header === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.header))) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.headerContent);
                      this.headerContent = null;
                    } else if (!this.showCloseIcon) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.closeIcon);
                    } else {
                      if (this.isBlazorServerRender()) {
                        this.wireEvents();
                      }
                    }
                  } else {
                    if (!this.isBlazorServerRender()) {
                      this.renderCloseIcon();
                    }

                    this.wireEvents();
                  }

                  break;

                case 'locale':
                  if (this.showCloseIcon) {
                    this.closeIconTitle();
                  }

                  break;

                case 'visible':
                  this.visible ? this.show() : this.hide();
                  break;

                case 'isModal':
                  this.updateIsModal();
                  break;

                case 'height':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                    'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.height)
                  });
                  break;

                case 'width':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.element, {
                    'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.width)
                  });
                  break;

                case 'zIndex':
                  this.popupObj.zIndex = this.zIndex;

                  if (this.isModal) {
                    this.setOverlayZindex(this.zIndex);
                  }

                  if (this.element.style.zIndex !== this.zIndex.toString()) {
                    this.calculatezIndex = false;
                  }

                  break;

                case 'cssClass':
                  this.setCSSClass(oldProp.cssClass);
                  break;

                case 'buttons':
                  var buttonCount = this.buttons.length;

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ftrTemplateContent) && !this.isBlazorServerRender()) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.ftrTemplateContent);
                    this.ftrTemplateContent = null;
                  }

                  for (var i = 0; i < buttonCount; i++) {
                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons[i].buttonModel)) {
                      this.footerTemplate = '';
                      this.setButton();
                    }
                  }

                  break;

                case 'allowDragging':
                  if (this.allowDragging && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
                    this.setAllowDragging();
                  } else {
                    this.dragObj.destroy();
                  }

                  break;

                case 'target':
                  this.setTarget(newProp.target);
                  break;

                case 'position':
                  this.checkPositionData();

                  if (this.isModal) {
                    var positionX = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.position.X) ? this.position.X : oldProp.position.X;
                    var positionY = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.position.Y) ? this.position.Y : oldProp.position.Y;

                    if (this.dlgContainer.classList.contains('e-dlg-' + positionX + '-' + positionY)) {
                      this.dlgContainer.classList.remove('e-dlg-' + positionX + '-' + positionY);
                    }
                  }

                  this.positionChange();
                  break;

                case 'enableRtl':
                  this.setEnableRTL();
                  break;

                case 'enableResize':
                  this.setResize();
                  break;
              }
            }
          }
        }, {
          key: "setTarget",
          value: function setTarget(target) {
            this.popupObj.relateTo = target;
            this.target = target;
            this.targetEle = typeof this.target === 'string' ? document.querySelector(this.target) : this.target;

            if (this.dragObj) {
              this.dragObj.dragArea = this.targetEle;
            }

            this.setMaxHeight();

            if (this.isModal) {
              this.updateIsModal();
            }

            if (this.enableResize) {
              this.setResize();
            }
          }
        }, {
          key: "updateIsModal",
          value: function updateIsModal() {
            this.element.setAttribute('aria-modal', this.isModal ? 'true' : 'false');

            if (this.isModal) {
              this.setIsModal();
              this.element.style.top = '0px';
              this.element.style.left = '0px';

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.targetEle)) {
                this.targetEle.appendChild(this.dlgContainer);
              }
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], MODAL_DLG);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([document.body], [DLG_TARGET, SCROLL_DISABLED]);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.dlgOverlay);

              while (this.dlgContainer.firstChild) {
                this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);
              }

              this.dlgContainer.parentElement.removeChild(this.dlgContainer);
            }

            if (this.visible) {
              this.show();
            }

            this.positionChange();

            if (this.isModal && this.dlgOverlay) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);
            }
          }
        }, {
          key: "setzIndex",
          value: function setzIndex(zIndexElement, setPopupZindex) {
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;
            this.zIndex = getZindexPartial(zIndexElement);
            this.isProtectedOnChange = prevOnChange;

            if (setPopupZindex) {
              this.popupObj.zIndex = this.zIndex;
            }
          }
          /**
           * Get the properties to be maintained in the persisted state.
           * @private
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist([]);
          }
          /**
           * To destroy the widget
           * @method destroy
           * @return {void}
           * @memberof dialog
           */

        }, {
          key: "destroy",
          value: function destroy() {
            if (this.isDestroyed) {
              return;
            }

            var classArray = [RTL, MODAL_DLG, DLG_RESIZABLE, DLG_RESTRICT_LEFT_VALUE, FULLSCREEN, DEVICE];
            var attrs = ['role', 'aria-modal', 'aria-labelledby', 'aria-describedby', 'aria-grabbed', 'tabindex', 'style'];
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);

            if (this.element.classList.contains(FULLSCREEN)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([document.body], [DLG_TARGET, SCROLL_DISABLED]);
            }

            if (this.isModal) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.targetEle) ? this.targetEle : document.body], SCROLL_DISABLED);
            }

            this.unWireEvents();

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.btnObj)) {
              for (var i = 0; i < this.btnObj.length; i++) {
                this.btnObj[i].destroy();
              }
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dragObj)) {
              this.dragObj.destroy();
            }

            if (this.popupObj.element.classList.contains(POPUP_ROOT)) {
              this.popupObj.destroy();
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], classArray);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && this.cssClass !== '') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], this.cssClass.split(' '));
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.refElement) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.refElement.parentElement)) {
              this.refElement.parentElement.insertBefore(this.isModal ? this.dlgContainer : this.element, this.refElement);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.refElement);
              this.refElement = undefined;
            }

            if (this.isModal && !this.isBlazorServerRender()) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.dlgOverlay);
              this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.dlgContainer);
            }

            if (!this.isBlazorServerRender()) {
              this.element.innerHTML = this.clonedEle.innerHTML;
            }

            if (this.isBlazorServerRender()) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.children)) {
                for (var _i75 = 0; _i75 <= this.element.children.length; _i75++) {
                  _i75 = _i75 - _i75;
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.element.children[_i75]);
                }
              }
            }

            for (var _i76 = 0; _i76 < attrs.length; _i76++) {
              this.element.removeAttribute(attrs[_i76]);
            }

            if (!this.isBlazorServerRender()) {
              _get2(_getPrototypeOf2(Dialog.prototype), "destroy", this).call(this);
            } else {
              this.isDestroyed = true;
            }
          }
          /**
           * Binding event to the element while widget creation
           * @hidden
           */

        }, {
          key: "wireEvents",
          value: function wireEvents() {
            if (this.isBlazorServerRender() && this.showCloseIcon) {
              this.closeIcon = this.element.getElementsByClassName('e-dlg-closeicon-btn')[0];
            }

            if (this.showCloseIcon) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.closeIcon, 'click', this.closeIconClickEventHandler, this);
            }

            if (this.isModal && this.dlgOverlay) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);
            }
          }
          /**
           * Unbinding event to the element while widget destroy
           * @hidden
           */

        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            if (this.showCloseIcon) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.closeIcon, 'click', this.closeIconClickEventHandler);
            }

            if (this.isModal) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler);
            }

            if (this.buttons.length > 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons[0].buttonModel) && this.footerTemplate === '') {
              for (var i = 0; i < this.buttons.length; i++) {
                if (typeof this.buttons[i].click === 'function') {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.ftrTemplateContent.children[i], 'click', this.buttons[i].click);
                }
              }
            }
          }
          /**
           * Refreshes the dialog's position when the user changes its header and footer height/width dynamically.
           * @return {void}
           */

        }, {
          key: "refreshPosition",
          value: function refreshPosition() {
            this.popupObj.refreshPosition();
          }
          /**
           * Opens the dialog if it is in hidden state.
           * To open the dialog with full screen width, set the parameter to true.
           * @param { boolean } isFullScreen - Enable the fullScreen Dialog.
           * @return {void}
           */

        }, {
          key: "show",
          value: function show(isFullScreen) {
            var _this135 = this;

            if (!this.element.classList.contains(ROOT)) {
              return;
            }

            if (!this.element.classList.contains(DLG_SHOW) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(isFullScreen)) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(isFullScreen)) {
                this.fullScreen(isFullScreen);
              }

              var eventArgs = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() ? {
                cancel: false,
                element: this.element,
                container: this.isModal ? this.dlgContainer : this.element,
                maxHeight: this.element.style.maxHeight
              } : {
                cancel: false,
                element: this.element,
                container: this.isModal ? this.dlgContainer : this.element,
                target: this.target,
                maxHeight: this.element.style.maxHeight
              };
              this.trigger('beforeOpen', eventArgs, function (beforeOpenArgs) {
                if (!beforeOpenArgs.cancel) {
                  if (_this135.element.style.maxHeight !== eventArgs.maxHeight) {
                    _this135.allowMaxHeight = false;
                    _this135.element.style.maxHeight = eventArgs.maxHeight;
                  }

                  _this135.storeActiveElement = document.activeElement;
                  _this135.element.tabIndex = -1;

                  if (_this135.isModal && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this135.dlgOverlay)) {
                    _this135.dlgOverlay.style.display = 'block';
                    _this135.dlgContainer.style.display = 'flex';
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this135.dlgOverlay], 'e-fade');

                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this135.targetEle)) {
                      if (_this135.targetEle === document.body) {
                        _this135.dlgContainer.style.position = 'fixed';
                      } else {
                        _this135.dlgContainer.style.position = 'absolute';
                      }

                      _this135.dlgOverlay.style.position = 'absolute';
                      _this135.element.style.position = 'relative';
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this135.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
                    } else {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([document.body], [DLG_TARGET, SCROLL_DISABLED]);
                    }
                  }

                  var openAnimation = {
                    name: _this135.animationSettings.effect + 'In',
                    duration: _this135.animationSettings.duration,
                    delay: _this135.animationSettings.delay
                  };
                  var zIndexElement = _this135.isModal ? _this135.element.parentElement : _this135.element;

                  if (_this135.calculatezIndex) {
                    _this135.setzIndex(zIndexElement, true);

                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(_this135.element, {
                      'zIndex': _this135.zIndex
                    });

                    if (_this135.isModal) {
                      _this135.setOverlayZindex(_this135.zIndex);
                    }
                  }

                  _this135.animationSettings.effect === 'None' ? _this135.popupObj.show() : _this135.popupObj.show(openAnimation);
                  _this135.dialogOpen = true;
                  var prevOnChange = _this135.isProtectedOnChange;
                  _this135.isProtectedOnChange = true;
                  _this135.visible = true;
                  _this135.preventVisibility = true;
                  _this135.isProtectedOnChange = prevOnChange;
                }
              });
            }
          }
          /**
           * Closes the dialog if it is in visible state.
           * @return {void}
           */

        }, {
          key: "hide",
          value: function hide(event) {
            var _this136 = this;

            if (!this.element.classList.contains(ROOT)) {
              return;
            }

            if (this.preventVisibility) {
              var eventArgs = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() ? {
                cancel: false,
                isInteracted: event ? true : false,
                element: this.element,
                container: this.isModal ? this.dlgContainer : this.element,
                event: event
              } : {
                cancel: false,
                isInteracted: event ? true : false,
                element: this.element,
                target: this.target,
                container: this.isModal ? this.dlgContainer : this.element,
                event: event
              };
              this.closeArgs = eventArgs;
              this.trigger('beforeClose', eventArgs, function (beforeCloseArgs) {
                if (!beforeCloseArgs.cancel) {
                  if (_this136.isModal) {
                    !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this136.targetEle) ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this136.targetEle], [DLG_TARGET, SCROLL_DISABLED]) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([document.body], [DLG_TARGET, SCROLL_DISABLED]);
                  }

                  var closeAnimation = {
                    name: _this136.animationSettings.effect + 'Out',
                    duration: _this136.animationSettings.duration,
                    delay: _this136.animationSettings.delay
                  };
                  _this136.animationSettings.effect === 'None' ? _this136.popupObj.hide() : _this136.popupObj.hide(closeAnimation);
                  _this136.dialogOpen = false;
                  var prevOnChange = _this136.isProtectedOnChange;
                  _this136.isProtectedOnChange = true;
                  _this136.visible = false;
                  _this136.preventVisibility = false;
                  _this136.isProtectedOnChange = prevOnChange;
                }
              });
            }
          }
          /**
           * Specifies to view the Full screen Dialog.
           * @private
           */

        }, {
          key: "fullScreen",
          value: function fullScreen(args) {
            var top = this.element.offsetTop;
            var left = this.element.offsetLeft;

            if (args) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], FULLSCREEN);
              var display = this.element.style.display;
              this.element.style.display = 'none';
              this.element.style.maxHeight = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target) ? this.targetEle.offsetHeight + 'px' : window.innerHeight + 'px';
              this.element.style.display = display;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([document.body], [DLG_TARGET, SCROLL_DISABLED]);

              if (this.allowDragging && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dragObj)) {
                this.dragObj.destroy();
              }
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], FULLSCREEN);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([document.body], [DLG_TARGET, SCROLL_DISABLED]);

              if (this.allowDragging && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.headerContent)) {
                this.setAllowDragging();
              }
            }

            return args;
          }
          /**
           * Returns the dialog button instances.
           * Based on that, you can dynamically change the button states.
           * @param { number } index - Index of the button.
           * @return {Button}
           */

        }, {
          key: "getButtons",
          value: function getButtons(index) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
              return this.btnObj[index];
            }

            return this.btnObj;
          }
        }]);

        return Dialog;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Dialog.prototype, "content", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Dialog.prototype, "enableHtmlSanitizer", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Dialog.prototype, "showCloseIcon", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Dialog.prototype, "isModal", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Dialog.prototype, "header", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Dialog.prototype, "visible", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Dialog.prototype, "enableResize", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Dialog.prototype, "height", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Dialog.prototype, "minHeight", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], Dialog.prototype, "width", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Dialog.prototype, "cssClass", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1000)], Dialog.prototype, "zIndex", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Dialog.prototype, "target", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Dialog.prototype, "footerTemplate", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Dialog.prototype, "allowDragging", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([{}], ButtonProps)], Dialog.prototype, "buttons", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Dialog.prototype, "closeOnEscape", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, AnimationSettings)], Dialog.prototype, "animationSettings", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        X: 'center',
        Y: 'center'
      }, PositionData)], Dialog.prototype, "position", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "created", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "open", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "beforeSanitizeHtml", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "beforeOpen", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "close", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "beforeClose", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "dragStart", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "dragStop", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "drag", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "overlayClick", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "resizeStart", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "resizing", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "resizeStop", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Dialog.prototype, "destroyed", void 0);

      Dialog = __decorate$1([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Dialog);
      /**
       * Base for creating Alert and Confirmation Dialog through util method.
       */

      var DialogUtility;

      (function (DialogUtility) {
        /**
         * An alert dialog box is used to display warning like messages to the users.
         * ```
         * Eg : DialogUtility.alert('Alert message');
         *
         * ```
         */

        /* istanbul ignore next */
        function alert(args) {
          var dialogElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
            'className': DLG_UTIL_ALERT
          });
          document.body.appendChild(dialogElement);
          var alertDialogObj;
          var okButtonModel = [{
            buttonModel: {
              isPrimary: true,
              content: 'OK'
            },
            click: function click() {
              this.hide();
            }
          }];

          if (typeof args === 'string') {
            alertDialogObj = createDialog({
              content: args,
              position: {
                X: 'center',
                Y: 'top'
              },
              isModal: true,
              header: DLG_UTIL_DEFAULT_TITLE,
              buttons: okButtonModel
            }, dialogElement);
          } else {
            alertDialogObj = createDialog(alertOptions(args), dialogElement);
          }

          alertDialogObj.close = function () {
            if (args && args.close) {
              args.close.apply(alertDialogObj);
            }

            alertDialogObj.destroy();

            if (alertDialogObj.element.classList.contains('e-dlg-modal')) {
              alertDialogObj.element.parentElement.remove();
              alertDialogObj.target.classList.remove(DLG_UTIL_ROOT);
            } else {
              alertDialogObj.element.remove();
            }
          };

          return alertDialogObj;
        }

        DialogUtility.alert = alert;
        /**
         * A confirm dialog displays a specified message along with ‘OK’ and ‘Cancel’ button.
         * ```
         * Eg : DialogUtility.confirm('Confirm dialog message');
         *
         * ```
         */

        /* istanbul ignore next */

        function confirm(args) {
          var dialogElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
            'className': DLG_UTIL_CONFIRM
          });
          document.body.appendChild(dialogElement);
          var confirmDialogObj;
          var okCancelButtonModel = [{
            buttonModel: {
              isPrimary: true,
              content: 'OK'
            },
            click: function click() {
              this.hide();
            }
          }, {
            buttonModel: {
              content: 'Cancel'
            },
            click: function click() {
              this.hide();
            }
          }];

          if (typeof args === 'string') {
            confirmDialogObj = createDialog({
              position: {
                X: 'center',
                Y: 'top'
              },
              content: args,
              isModal: true,
              header: DLG_UTIL_DEFAULT_TITLE,
              buttons: okCancelButtonModel
            }, dialogElement);
          } else {
            confirmDialogObj = createDialog(confirmOptions(args), dialogElement);
          }

          confirmDialogObj.close = function () {
            if (args && args.close) {
              args.close.apply(confirmDialogObj);
            }

            confirmDialogObj.destroy();

            if (confirmDialogObj.element.classList.contains('e-dlg-modal')) {
              confirmDialogObj.element.parentElement.remove();
              confirmDialogObj.target.classList.remove(DLG_UTIL_ROOT);
            } else {
              confirmDialogObj.element.remove();
            }
          };

          return confirmDialogObj;
        }

        DialogUtility.confirm = confirm;

        function createDialog(options, element) {
          var dialogObject = new Dialog(options);
          dialogObject.appendTo(element);
          return dialogObject;
        }

        function alertOptions(option) {
          var options = {};
          options.buttons = [];
          options = formOptions(options, option);
          options = setAlertButtonModel(options, option);
          return options;
        }

        function confirmOptions(option) {
          var options = {};
          options.buttons = [];
          options = formOptions(options, option);
          options = setConfirmButtonModel(options, option);
          return options;
        }

        function formOptions(options, option) {
          options.header = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.title) ? option.title : DLG_UTIL_DEFAULT_TITLE;
          options.content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.content) ? option.content : '';
          options.isModal = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.isModal) ? option.isModal : true;
          options.showCloseIcon = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.showCloseIcon) ? option.showCloseIcon : false;
          options.allowDragging = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.isDraggable) ? option.isDraggable : false;
          options.closeOnEscape = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.closeOnEscape) ? option.closeOnEscape : false;
          options.position = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.position) ? option.position : {
            X: 'center',
            Y: 'top'
          };
          options.animationSettings = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.animationSettings) ? option.animationSettings : {
            effect: 'Fade',
            duration: 400,
            delay: 0
          };
          options.cssClass = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.cssClass) ? option.cssClass : '';
          options.zIndex = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.zIndex) ? option.zIndex : 1000;
          options.open = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.open) ? option.open : null;
          return options;
        }

        function setAlertButtonModel(options, option) {
          var alertButtonModel = [{
            buttonModel: {
              isPrimary: true,
              content: 'OK'
            },
            click: function click() {
              this.hide();
            }
          }];

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.okButton)) {
            options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, alertButtonModel[0]);
          } else {
            options.buttons = alertButtonModel;
          }

          return options;
        }

        function setConfirmButtonModel(options, option) {
          var okButtonModel = {
            buttonModel: {
              isPrimary: true,
              content: 'OK'
            },
            click: function click() {
              this.hide();
            }
          };
          var cancelButtonModel = {
            buttonModel: {
              content: 'Cancel'
            },
            click: function click() {
              this.hide();
            }
          };

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.okButton)) {
            options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, okButtonModel);
          } else {
            options.buttons[0] = okButtonModel;
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.cancelButton)) {
            options.buttons[1] = formButtonModel(options.buttons[1], option.cancelButton, cancelButtonModel);
          } else {
            options.buttons[1] = cancelButtonModel;
          }

          return options;
        }

        function formButtonModel(buttonModel, option, buttonPropModel) {
          var buttonProps = buttonPropModel;

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.text)) {
            buttonProps.buttonModel.content = option.text;
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.icon)) {
            buttonProps.buttonModel.iconCss = option.icon;
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.cssClass)) {
            buttonProps.buttonModel.cssClass = option.cssClass;
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(option.click)) {
            buttonProps.click = option.click;
          }

          return buttonProps;
        }
      })(DialogUtility || (DialogUtility = {}));
      /**
       * Dialog Component
       */


      var __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var TOUCHEND_HIDE_DELAY = 1500;
      var TAPHOLD_THRESHOLD = 500;
      var SHOW_POINTER_TIP_GAP = 0;
      var HIDE_POINTER_TIP_GAP = 8;
      var MOUSE_TRAIL_GAP = 2;
      var POINTER_ADJUST = 2;
      var ROOT$1 = 'e-tooltip';
      var RTL$1 = 'e-rtl';
      var DEVICE$1 = 'e-bigger';
      var ICON$1 = 'e-icons';
      var CLOSE = 'e-tooltip-close';
      var TOOLTIP_WRAP = 'e-tooltip-wrap';
      var CONTENT = 'e-tip-content';
      var ARROW_TIP = 'e-arrow-tip';
      var ARROW_TIP_OUTER = 'e-arrow-tip-outer';
      var ARROW_TIP_INNER = 'e-arrow-tip-inner';
      var TIP_BOTTOM = 'e-tip-bottom';
      var TIP_TOP = 'e-tip-top';
      var TIP_LEFT = 'e-tip-left';
      var TIP_RIGHT = 'e-tip-right';
      var POPUP_ROOT$1 = 'e-popup';
      var POPUP_OPEN = 'e-popup-open';
      var POPUP_CLOSE = 'e-popup-close';
      var POPUP_LIB = 'e-lib';
      var HIDE_POPUP = 'e-hidden';

      var Animation$1 = /*#__PURE__*/function (_syncfusion_ej2_base_31) {
        _inherits2(Animation$1, _syncfusion_ej2_base_31);

        var _super49 = _createSuper(Animation$1);

        function Animation$1() {
          _classCallCheck2(this, Animation$1);

          return _super49.apply(this, arguments);
        }

        return Animation$1;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({
        effect: 'FadeIn',
        duration: 150,
        delay: 0
      })], Animation$1.prototype, "open", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({
        effect: 'FadeOut',
        duration: 150,
        delay: 0
      })], Animation$1.prototype, "close", void 0);
      /**
       * Represents the Tooltip component that displays a piece of information about the target element on mouse hover.
       * ```html
       * <div id="tooltip">Show Tooltip</div>
       * ```
       * ```typescript
       * <script>
       *   var tooltipObj = new Tooltip({ content: 'Tooltip text' });
       *   tooltipObj.appendTo("#tooltip");
       * </script>
       * ```
       */


      var Tooltip = /*#__PURE__*/function (_syncfusion_ej2_base_32) {
        _inherits2(Tooltip, _syncfusion_ej2_base_32);

        var _super50 = _createSuper(Tooltip);

        /**
         * Constructor for creating the Tooltip Component
         */
        function Tooltip(options, element) {
          var _this137;

          _classCallCheck2(this, Tooltip);

          _this137 = _super50.call(this, options, element);
          _this137.isBlazorTooltip = false;
          _this137.contentTargetValue = null;
          _this137.contentEvent = null;
          _this137.contentAnimation = null;
          return _this137;
        }

        _createClass2(Tooltip, [{
          key: "initialize",
          value: function initialize() {
            this.formatPosition();

            if (!this.isServerRender()) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], ROOT$1);
            }
          }
        }, {
          key: "isServerRender",
          value: function isServerRender() {
            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered;
          }
        }, {
          key: "formatPosition",
          value: function formatPosition() {
            if (this.position.indexOf('Top') === 0 || this.position.indexOf('Bottom') === 0) {
              var _this$position$split = this.position.split(/(?=[A-Z])/);

              var _this$position$split2 = _slicedToArray(_this$position$split, 2);

              this.tooltipPositionY = _this$position$split2[0];
              this.tooltipPositionX = _this$position$split2[1];
            } else {
              var _this$position$split3 = this.position.split(/(?=[A-Z])/);

              var _this$position$split4 = _slicedToArray(_this$position$split3, 2);

              this.tooltipPositionX = _this$position$split4[0];
              this.tooltipPositionY = _this$position$split4[1];
            }
          }
        }, {
          key: "renderArrow",
          value: function renderArrow() {
            this.setTipClass(this.position);

            if (!this.isServerRender()) {
              var tip = this.createElement('div', {
                className: ARROW_TIP + ' ' + this.tipClass
              });
              tip.appendChild(this.createElement('div', {
                className: ARROW_TIP_OUTER + ' ' + this.tipClass
              }));
              tip.appendChild(this.createElement('div', {
                className: ARROW_TIP_INNER + ' ' + this.tipClass
              }));
              this.tooltipEle.appendChild(tip);
            } else {
              var _tip = this.tooltipEle.querySelector('.' + ARROW_TIP);

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_tip.querySelector('.' + ARROW_TIP_OUTER)], this.tipClass);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_tip.querySelector('.' + ARROW_TIP_INNER)], this.tipClass);
              this.tooltipEle.appendChild(_tip);
            }
          }
        }, {
          key: "setTipClass",
          value: function setTipClass(position) {
            if (position.indexOf('Right') === 0) {
              this.tipClass = TIP_LEFT;
            } else if (position.indexOf('Bottom') === 0) {
              this.tipClass = TIP_TOP;
            } else if (position.indexOf('Left') === 0) {
              this.tipClass = TIP_RIGHT;
            } else {
              this.tipClass = TIP_BOTTOM;
            }
          }
        }, {
          key: "renderPopup",
          value: function renderPopup(target) {
            var elePos = this.mouseTrail ? {
              top: 0,
              left: 0
            } : this.getTooltipPosition(target);
            this.tooltipEle.classList.remove(POPUP_LIB);
            this.popupObj = new Popup(this.tooltipEle, {
              height: this.height,
              width: this.width,
              position: {
                X: elePos.left,
                Y: elePos.top
              },
              enableRtl: this.enableRtl,
              open: this.openPopupHandler.bind(this),
              close: this.closePopupHandler.bind(this)
            });
          }
        }, {
          key: "getTooltipPosition",
          value: function getTooltipPosition(target) {
            this.tooltipEle.style.display = 'block';
            var pos = calculatePosition(target, this.tooltipPositionX, this.tooltipPositionY);
            var offsetPos = this.calculateTooltipOffset(this.position);
            var elePos = this.collisionFlipFit(target, pos.left + offsetPos.left, pos.top + offsetPos.top);
            this.tooltipEle.style.display = '';
            return elePos;
          }
        }, {
          key: "reposition",
          value: function reposition(target) {
            var elePos = this.getTooltipPosition(target);
            this.popupObj.position = {
              X: elePos.left,
              Y: elePos.top
            };
            this.popupObj.dataBind();
          }
        }, {
          key: "openPopupHandler",
          value: function openPopupHandler() {
            if (!this.mouseTrail && this.needTemplateReposition()) {
              this.reposition(this.findTarget());
            }

            this.trigger('afterOpen', this.tooltipEventArgs);
          }
        }, {
          key: "closePopupHandler",
          value: function closePopupHandler() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.element.id + 'content', 'Content');
            this.clear();
            this.trigger('afterClose', this.tooltipEventArgs);
          }
        }, {
          key: "calculateTooltipOffset",
          value: function calculateTooltipOffset(position) {
            var pos = {
              top: 0,
              left: 0
            };
            var tooltipEleWidth = this.tooltipEle.offsetWidth;
            var tooltipEleHeight = this.tooltipEle.offsetHeight;
            var arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);
            var tipWidth = arrowEle ? arrowEle.offsetWidth : 0;
            var tipHeight = arrowEle ? arrowEle.offsetHeight : 0;
            var tipAdjust = this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP;
            var tipHeightAdjust = tipHeight / 2 + POINTER_ADJUST + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight);
            var tipWidthAdjust = tipWidth / 2 + POINTER_ADJUST + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);

            if (this.mouseTrail) {
              tipAdjust += MOUSE_TRAIL_GAP;
            }

            switch (position) {
              case 'RightTop':
                pos.left += tipWidth + tipAdjust;
                pos.top -= tooltipEleHeight - tipHeightAdjust;
                break;

              case 'RightCenter':
                pos.left += tipWidth + tipAdjust;
                pos.top -= tooltipEleHeight / 2;
                break;

              case 'RightBottom':
                pos.left += tipWidth + tipAdjust;
                pos.top -= tipHeightAdjust;
                break;

              case 'BottomRight':
                pos.top += tipHeight + tipAdjust;
                pos.left -= tipWidthAdjust;
                break;

              case 'BottomCenter':
                pos.top += tipHeight + tipAdjust;
                pos.left -= tooltipEleWidth / 2;
                break;

              case 'BottomLeft':
                pos.top += tipHeight + tipAdjust;
                pos.left -= tooltipEleWidth - tipWidthAdjust;
                break;

              case 'LeftBottom':
                pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
                pos.top -= tipHeightAdjust;
                break;

              case 'LeftCenter':
                pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
                pos.top -= tooltipEleHeight / 2;
                break;

              case 'LeftTop':
                pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
                pos.top -= tooltipEleHeight - tipHeightAdjust;
                break;

              case 'TopLeft':
                pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
                pos.left -= tooltipEleWidth - tipWidthAdjust;
                break;

              case 'TopRight':
                pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
                pos.left -= tipWidthAdjust;
                break;

              default:
                pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
                pos.left -= tooltipEleWidth / 2;
                break;
            }

            pos.left += this.offsetX;
            pos.top += this.offsetY;
            return pos;
          }
        }, {
          key: "updateTipPosition",
          value: function updateTipPosition(position) {
            var selEle = this.tooltipEle.querySelectorAll('.' + ARROW_TIP + ',.' + ARROW_TIP_OUTER + ',.' + ARROW_TIP_INNER);
            var removeList = [TIP_BOTTOM, TIP_TOP, TIP_LEFT, TIP_RIGHT];
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(selEle, removeList);
            this.setTipClass(position);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(selEle, this.tipClass);
          }
        }, {
          key: "adjustArrow",
          value: function adjustArrow(target, position, tooltipPositionX, tooltipPositionY) {
            if (this.showTipPointer === false) {
              return;
            }

            this.updateTipPosition(position);
            var leftValue;
            var topValue;
            this.tooltipEle.style.display = 'block';
            var tooltipWidth = this.tooltipEle.clientWidth;
            var tooltipHeight = this.tooltipEle.clientHeight;
            var arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);
            var arrowInnerELe = this.tooltipEle.querySelector('.' + ARROW_TIP_INNER);
            var tipWidth = arrowEle.offsetWidth;
            var tipHeight = arrowEle.offsetHeight;
            this.tooltipEle.style.display = '';

            if (this.tipClass === TIP_BOTTOM || this.tipClass === TIP_TOP) {
              if (this.tipClass === TIP_BOTTOM) {
                topValue = '99.9%'; // Arrow icon aligned -2px height from ArrowOuterTip div

                arrowInnerELe.style.top = '-' + (tipHeight - 2) + 'px';
              } else {
                topValue = -(tipHeight - 1) + 'px'; // Arrow icon aligned -6px height from ArrowOuterTip div

                arrowInnerELe.style.top = '-' + (tipHeight - 6) + 'px';
              }

              if (target) {
                var tipPosExclude = tooltipPositionX !== 'Center' || tooltipWidth > target.offsetWidth || this.mouseTrail;

                if (tipPosExclude && tooltipPositionX === 'Left' || !tipPosExclude && this.tipPointerPosition === 'End') {
                  leftValue = tooltipWidth - tipWidth - POINTER_ADJUST + 'px';
                } else if (tipPosExclude && tooltipPositionX === 'Right' || !tipPosExclude && this.tipPointerPosition === 'Start') {
                  leftValue = POINTER_ADJUST + 'px';
                } else {
                  leftValue = tooltipWidth / 2 - tipWidth / 2 + 'px';
                }
              }
            } else {
              if (this.tipClass === TIP_RIGHT) {
                leftValue = '99.9%'; // Arrow icon aligned -2px left from ArrowOuterTip div

                arrowInnerELe.style.left = '-' + (tipWidth - 2) + 'px';
              } else {
                leftValue = -(tipWidth - 1) + 'px'; // Arrow icon aligned -2px from ArrowOuterTip width

                arrowInnerELe.style.left = -tipWidth + (tipWidth - 2) + 'px';
              }

              var _tipPosExclude = tooltipPositionY !== 'Center' || tooltipHeight > target.offsetHeight || this.mouseTrail;

              if (_tipPosExclude && tooltipPositionY === 'Top' || !_tipPosExclude && this.tipPointerPosition === 'End') {
                topValue = tooltipHeight - tipHeight - POINTER_ADJUST + 'px';
              } else if (_tipPosExclude && tooltipPositionY === 'Bottom' || !_tipPosExclude && this.tipPointerPosition === 'Start') {
                topValue = POINTER_ADJUST + 'px';
              } else {
                topValue = tooltipHeight / 2 - tipHeight / 2 + 'px';
              }
            }

            arrowEle.style.top = topValue;
            arrowEle.style.left = leftValue;
          }
        }, {
          key: "renderContent",
          value: function renderContent(target) {
            var tooltipContent = this.tooltipEle.querySelector('.' + CONTENT);

            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.tooltipEle], this.cssClass.split(' '));
            }

            if (target && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target.getAttribute('title'))) {
              target.setAttribute('data-content', target.getAttribute('title'));
              target.removeAttribute('title');
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.content)) {
              if (this.isBlazorTooltip || !this.isServerRender()) {
                tooltipContent.innerHTML = '';

                if (this.content instanceof HTMLElement) {
                  tooltipContent.appendChild(this.content);
                } else if (typeof this.content === 'string' && this.content.indexOf('<div>Blazor') < 0) {
                  if (this.enableHtmlSanitizer) {
                    this.setProperties({
                      content: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(this.content)
                    }, true);
                  }

                  tooltipContent.innerHTML = this.content;
                } else {
                  var templateFunction = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.content);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(templateFunction({}, null, null, this.element.id + 'content'), tooltipContent);

                  if (typeof this.content === 'string' && this.content.indexOf('<div>Blazor') >= 0) {
                    this.isBlazorTemplate = true;
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.element.id + 'content', 'Content', this);
                  }
                }
              }
            } else {
              if (target && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target.getAttribute('data-content'))) {
                tooltipContent.innerHTML = target.getAttribute('data-content');
              }
            }
          }
        }, {
          key: "renderCloseIcon",
          value: function renderCloseIcon() {
            if (!this.isSticky) {
              return;
            }

            var tipClose = this.createElement('div', {
              className: ICON$1 + ' ' + CLOSE
            });
            this.tooltipEle.appendChild(tipClose);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(tipClose, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.onStickyClose, this);
          }
        }, {
          key: "addDescribedBy",
          value: function addDescribedBy(target, id) {
            var describedby = (target.getAttribute('aria-describedby') || '').split(/\s+/);

            if (describedby.indexOf(id) < 0) {
              describedby.push(id);
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(target, {
              'aria-describedby': describedby.join(' ').trim(),
              'data-tooltip-id': id
            });
          }
        }, {
          key: "removeDescribedBy",
          value: function removeDescribedBy(target) {
            var id = target.getAttribute('data-tooltip-id');
            var describedby = (target.getAttribute('aria-describedby') || '').split(/\s+/);
            var index = describedby.indexOf(id);

            if (index !== -1) {
              describedby.splice(index, 1);
            }

            target.removeAttribute('data-tooltip-id');
            var orgdescribedby = describedby.join(' ').trim();

            if (orgdescribedby) {
              target.setAttribute('aria-describedby', orgdescribedby);
            } else {
              target.removeAttribute('aria-describedby');
            }
          }
        }, {
          key: "tapHoldHandler",
          value: function tapHoldHandler(evt) {
            clearTimeout(this.autoCloseTimer);
            this.targetHover(evt.originalEvent);
          }
        }, {
          key: "touchEndHandler",
          value: function touchEndHandler(e) {
            var _this138 = this;

            if (this.isSticky) {
              return;
            }

            var close = function close() {
              _this138.close();
            };

            this.autoCloseTimer = setTimeout(close, TOUCHEND_HIDE_DELAY);
          }
        }, {
          key: "targetClick",
          value: function targetClick(e) {
            var target;

            if (this.target) {
              target = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, this.target);
            } else {
              target = this.element;
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target)) {
              return;
            }

            if (target.getAttribute('data-tooltip-id') === null) {
              this.targetHover(e);
            } else if (!this.isSticky) {
              this.hideTooltip(this.animation.close, e, target);
            }
          }
        }, {
          key: "targetHover",
          value: function targetHover(e) {
            var target;

            if (this.target) {
              target = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, this.target);
            } else {
              target = this.element;
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target) || target.getAttribute('data-tooltip-id') !== null) {
              return;
            }

            var targetList = [].slice.call(document.querySelectorAll('[data-tooltip-id= ' + this.ctrlId + '_content]'));

            var _iterator58 = _createForOfIteratorHelper(targetList),
                _step58;

            try {
              for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
                var _target2 = _step58.value;
                this.restoreElement(_target2);
              }
            } catch (err) {
              _iterator58.e(err);
            } finally {
              _iterator58.f();
            }

            this.showTooltip(target, this.animation.open, e);
          }
        }, {
          key: "showTooltip",
          value: function showTooltip(target, showAnimation, e) {
            var _this139 = this;

            clearTimeout(this.showTimer);
            clearTimeout(this.hideTimer);
            this.tooltipEventArgs = {
              type: e ? e.type : null,
              cancel: false,
              target: target,
              event: e ? e : null,
              element: this.tooltipEle,
              isInteracted: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)
            };

            var observeCallback = function observeCallback(beforeRenderArgs) {
              _this139.beforeRenderCallback(beforeRenderArgs, target, e, showAnimation);
            };

            this.trigger('beforeRender', this.tooltipEventArgs, observeCallback.bind(this));
          }
        }, {
          key: "beforeRenderCallback",
          value: function beforeRenderCallback(beforeRenderArgs, target, e, showAnimation) {
            var isBlazorTooltipRendered = false;

            if (beforeRenderArgs.cancel) {
              this.isHidden = true;
              this.clear();
            } else {
              this.isHidden = false;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltipEle)) {
                if (this.isServerRender()) {
                  this.contentTargetValue = target;
                  this.contentEvent = e;
                  this.contentAnimation = showAnimation;
                  var args = {
                    'enableTooltip': 'true'
                  }; // tslint:disable

                  this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args); // tslint:enable

                  isBlazorTooltipRendered = true;
                } else {
                  this.ctrlId = this.element.getAttribute('id') ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])(this.element.getAttribute('id')) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('tooltip');
                  this.tooltipEle = this.createElement('div', {
                    className: TOOLTIP_WRAP + ' ' + POPUP_ROOT$1 + ' ' + POPUP_LIB,
                    attrs: {
                      role: 'tooltip',
                      'aria-hidden': 'false',
                      'id': this.ctrlId + '_content'
                    },
                    styles: 'width:' + Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width) + ';height:' + Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height) + ';position:absolute;'
                  });
                  this.beforeRenderBlazor(target, this);
                }

                if (!isBlazorTooltipRendered) {
                  this.afterRenderBlazor(target, e, showAnimation, this);
                }
              } else {
                if (this.isServerRender()) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.tooltipEle], POPUP_OPEN);
                  document.body.appendChild(this.tooltipEle);
                  this.renderCloseIcon();
                  this.renderPopup(target);
                }

                if (target) {
                  this.adjustArrow(target, this.position, this.tooltipPositionX, this.tooltipPositionY);
                  this.addDescribedBy(target, this.ctrlId + '_content');
                  this.renderContent(target);

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"].stop(this.tooltipEle);

                  this.reposition(target);
                  this.afterRenderBlazor(target, e, showAnimation, this);
                }
              }
            }
          }
        }, {
          key: "contentUpdated",
          value: function contentUpdated(args) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltipEle)) {
              if (this.isServerRender()) {
                this.ctrlId = this.element.id;
                this.tooltipEle = document.querySelector('#' + this.ctrlId + '_content');

                if (this.tooltipEle) {
                  this.tooltipEle.setAttribute('style', 'width:' + Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width) + ';height:' + Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height) + ';position:absolute;');
                  this.beforeRenderBlazor(this.contentTargetValue, this);
                  this.afterRenderBlazor(this.contentTargetValue, this.contentEvent, this.contentAnimation, this);
                  this.contentTargetValue = this.contentEvent = this.contentAnimation = null;
                }
              }
            }
          }
        }, {
          key: "beforeRenderBlazor",
          value: function beforeRenderBlazor(target, ctrlObj) {
            if (target) {
              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([ctrlObj.tooltipEle], DEVICE$1);
              }

              if (ctrlObj.width !== 'auto') {
                ctrlObj.tooltipEle.style.maxWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(ctrlObj.width);
              }

              if (!this.isServerRender()) {
                ctrlObj.tooltipEle.appendChild(ctrlObj.createElement('div', {
                  className: CONTENT
                }));
              }

              document.body.appendChild(ctrlObj.tooltipEle);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([ctrlObj.tooltipEle], HIDE_POPUP);
              ctrlObj.addDescribedBy(target, ctrlObj.ctrlId + '_content');
              ctrlObj.renderContent(target);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([ctrlObj.tooltipEle], POPUP_OPEN);

              if (ctrlObj.showTipPointer) {
                ctrlObj.renderArrow();
              }

              ctrlObj.renderCloseIcon();
              ctrlObj.renderPopup(target);
              ctrlObj.adjustArrow(target, ctrlObj.position, ctrlObj.tooltipPositionX, ctrlObj.tooltipPositionY);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"].stop(ctrlObj.tooltipEle);

              ctrlObj.reposition(target);
            }
          }
        }, {
          key: "afterRenderBlazor",
          value: function afterRenderBlazor(target, e, showAnimation, ctrlObj) {
            if (target) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([ctrlObj.tooltipEle], POPUP_OPEN);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([ctrlObj.tooltipEle], POPUP_CLOSE);
              ctrlObj.tooltipEventArgs = {
                type: e ? e.type : null,
                cancel: false,
                target: target,
                event: e ? e : null,
                element: ctrlObj.tooltipEle,
                isInteracted: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)
              };

              if (ctrlObj.needTemplateReposition() && !ctrlObj.mouseTrail) {
                ctrlObj.tooltipEle.style.display = 'none';
              }

              var observeCallback = function observeCallback(observedArgs) {
                ctrlObj.beforeOpenCallback(observedArgs, target, showAnimation, e);
              };

              ctrlObj.trigger('beforeOpen', ctrlObj.tooltipEventArgs, observeCallback.bind(ctrlObj));
            }
          }
        }, {
          key: "beforeOpenCallback",
          value: function beforeOpenCallback(observedArgs, target, showAnimation, e) {
            var _this140 = this;

            if (observedArgs.cancel) {
              this.isHidden = true;
              this.clear();
              this.restoreElement(target);
            } else {
              var openAnimation = {
                name: showAnimation.effect,
                duration: showAnimation.duration,
                delay: showAnimation.delay,
                timingFunction: 'easeOut'
              };

              if (showAnimation.effect === 'None') {
                openAnimation = undefined;
              }

              if (this.openDelay > 0) {
                var show = function show() {
                  if (_this140.popupObj) {
                    _this140.popupObj.show(openAnimation, target);
                  }
                };

                this.showTimer = setTimeout(show, this.openDelay);
              } else {
                if (this.popupObj) {
                  this.popupObj.show(openAnimation, target);
                }
              }
            }

            if (e) {
              this.wireMouseEvents(e, target);
            }
          }
        }, {
          key: "needTemplateReposition",
          value: function needTemplateReposition() {
            // tslint:disable-next-line:no-any
            var tooltip = this;
            return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(tooltip.viewContainerRef) && typeof tooltip.viewContainerRef !== 'string' || this.isServerRender() && this.isBlazorTemplate;
          }
        }, {
          key: "checkCollision",
          value: function checkCollision(target, x, y) {
            var elePos = {
              left: x,
              top: y,
              position: this.position,
              horizontal: this.tooltipPositionX,
              vertical: this.tooltipPositionY
            };
            var affectedPos = isCollide(this.tooltipEle, this.target ? this.element : null, x, y);

            if (affectedPos.length > 0) {
              elePos.horizontal = affectedPos.indexOf('left') >= 0 ? 'Right' : affectedPos.indexOf('right') >= 0 ? 'Left' : this.tooltipPositionX;
              elePos.vertical = affectedPos.indexOf('top') >= 0 ? 'Bottom' : affectedPos.indexOf('bottom') >= 0 ? 'Top' : this.tooltipPositionY;
            }

            return elePos;
          }
        }, {
          key: "collisionFlipFit",
          value: function collisionFlipFit(target, x, y) {
            var elePos = this.checkCollision(target, x, y);
            var newpos = elePos.position;

            if (this.tooltipPositionY !== elePos.vertical) {
              newpos = this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0 ? elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical;
            }

            if (this.tooltipPositionX !== elePos.horizontal) {
              if (newpos.indexOf('Left') === 0) {
                elePos.vertical = newpos === 'LeftTop' || newpos === 'LeftCenter' ? 'Top' : 'Bottom';
                newpos = elePos.vertical + 'Left';
              }

              if (newpos.indexOf('Right') === 0) {
                elePos.vertical = newpos === 'RightTop' || newpos === 'RightCenter' ? 'Top' : 'Bottom';
                newpos = elePos.vertical + 'Right';
              }

              elePos.horizontal = this.tooltipPositionX;
            }

            this.tooltipEventArgs = {
              type: null,
              cancel: false,
              target: target,
              event: null,
              element: this.tooltipEle,
              collidedPosition: newpos
            };
            this.trigger('beforeCollision', this.tooltipEventArgs);

            if (elePos.position !== newpos) {
              var pos = calculatePosition(target, elePos.horizontal, elePos.vertical);
              this.adjustArrow(target, newpos, elePos.horizontal, elePos.vertical);
              var offsetPos = this.calculateTooltipOffset(newpos);
              offsetPos.top -= 'TopBottom'.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1 && 'TopBottom'.indexOf(newpos.split(/(?=[A-Z])/)[0]) !== -1 ? 2 * this.offsetY : 0;
              offsetPos.left -= 'RightLeft'.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1 && 'RightLeft'.indexOf(newpos.split(/(?=[A-Z])/)[0]) !== -1 ? 2 * this.offsetX : 0;
              elePos.position = newpos;
              elePos.left = pos.left + offsetPos.left;
              elePos.top = pos.top + offsetPos.top;
            } else {
              this.adjustArrow(target, newpos, elePos.horizontal, elePos.vertical);
            }

            var eleOffset = {
              left: elePos.left,
              top: elePos.top
            };
            var left = fit(this.tooltipEle, this.target ? this.element : null, {
              X: true,
              Y: false
            }, eleOffset).left;
            this.tooltipEle.style.display = 'block';

            if (this.showTipPointer && (newpos.indexOf('Bottom') === 0 || newpos.indexOf('Top') === 0)) {
              var arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);
              var arrowleft = parseInt(arrowEle.style.left, 10) - (left - elePos.left);

              if (arrowleft < 0) {
                arrowleft = 0;
              } else if (arrowleft + arrowEle.offsetWidth > this.tooltipEle.clientWidth) {
                arrowleft = this.tooltipEle.clientWidth - arrowEle.offsetWidth;
              }

              arrowEle.style.left = arrowleft.toString() + 'px';
            }

            this.tooltipEle.style.display = '';
            eleOffset.left = left;
            return eleOffset;
          }
        }, {
          key: "hideTooltip",
          value: function hideTooltip(hideAnimation, e, targetElement) {
            var _this141 = this;

            var target;

            if (e) {
              target = this.target ? targetElement || e.target : this.element;
            } else {
              target = document.querySelector('[data-tooltip-id= ' + this.ctrlId + '_content]');
            }

            this.tooltipEventArgs = {
              type: e ? e.type : null,
              cancel: false,
              target: target,
              event: e ? e : null,
              element: this.tooltipEle,
              isInteracted: !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)
            }; // this line commented for close the tooltip popup element even the target element destroyed in a page.
            //if (isNullOrUndefined(target)) { return; }

            this.trigger('beforeClose', this.tooltipEventArgs, function (observedArgs) {
              if (!observedArgs.cancel) {
                if (_this141.isServerRender()) {
                  _this141.blazorHide(hideAnimation, target);
                } else {
                  _this141.popupHide(hideAnimation, target);
                }
              } else {
                _this141.isHidden = false;
              }
            });
          }
          /* istanbul ignore next */

        }, {
          key: "blazorHide",
          value: function blazorHide(hideAnimation, target) {
            var proxy = this;

            var hide = function hide() {
              proxy.popupHide(hideAnimation, target);
            };

            if (this.popupObj) {
              this.popupHide(hideAnimation, target);
            } else {
              setTimeout(hide, 200);
            }
          }
        }, {
          key: "popupHide",
          value: function popupHide(hideAnimation, target) {
            var _this142 = this;

            this.clearTemplate();

            if (target) {
              this.restoreElement(target);
            }

            this.isHidden = true;
            var closeAnimation = {
              name: hideAnimation.effect,
              duration: hideAnimation.duration,
              delay: hideAnimation.delay,
              timingFunction: 'easeIn'
            };

            if (hideAnimation.effect === 'None') {
              closeAnimation = undefined;
            }

            if (this.closeDelay > 0) {
              var hide = function hide() {
                if (_this142.popupObj) {
                  _this142.popupObj.hide(closeAnimation);
                }
              };

              this.hideTimer = setTimeout(hide, this.closeDelay);
            } else {
              if (this.popupObj) {
                this.popupObj.hide(closeAnimation);
              }
            }
          }
        }, {
          key: "restoreElement",
          value: function restoreElement(target) {
            this.unwireMouseEvents(target);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target.getAttribute('data-content'))) {
              target.setAttribute('title', target.getAttribute('data-content'));
              target.removeAttribute('data-content');
            }

            this.removeDescribedBy(target);
          }
        }, {
          key: "clear",
          value: function clear() {
            if (this.tooltipEle) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.tooltipEle], POPUP_CLOSE);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.tooltipEle], POPUP_OPEN);
            }

            if (this.isHidden) {
              if (this.popupObj) {
                this.popupObj.destroy();
              }

              if (this.isServerRender() && this.tooltipEle) {
                this.tooltipEle.style.display = 'none';
                var args = {
                  'enableTooltip': 'false'
                }; // tslint:disable

                this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args); // tslint:enable

                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.tooltipEle);
              } else if (this.tooltipEle) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.tooltipEle);
              }

              this.tooltipEle = null;
              this.popupObj = null;
            }
          }
        }, {
          key: "onMouseOut",
          value: function onMouseOut(e) {
            var enteredElement = e.relatedTarget; // don't close the tooltip only if it is tooltip content element

            if (enteredElement && !this.mouseTrail) {
              var checkForTooltipElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(enteredElement, ".".concat(TOOLTIP_WRAP, ".").concat(POPUP_LIB, ".").concat(POPUP_ROOT$1));

              if (checkForTooltipElement) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(checkForTooltipElement, 'mouseleave', this.tooltipElementMouseOut, this);

                this.unwireMouseEvents(e.target);
              } else {
                this.hideTooltip(this.animation.close, e, this.findTarget());

                if (this.closeDelay === 0) {
                  this.clear();
                }
              }
            } else {
              this.hideTooltip(this.animation.close, e, this.findTarget());
              this.clear();
            }
          }
        }, {
          key: "tooltipElementMouseOut",
          value: function tooltipElementMouseOut(e) {
            this.hideTooltip(this.animation.close, e, this.findTarget());

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseleave', this.tooltipElementMouseOut);

            this.clear();
          }
        }, {
          key: "onStickyClose",
          value: function onStickyClose(e) {
            this.close();
          }
        }, {
          key: "onMouseMove",
          value: function onMouseMove(event) {
            var eventPageX = 0;
            var eventPageY = 0;

            if (event.type.indexOf('touch') > -1) {
              event.preventDefault();
              eventPageX = event.touches[0].pageX;
              eventPageY = event.touches[0].pageY;
            } else {
              eventPageX = event.pageX;
              eventPageY = event.pageY;
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"].stop(this.tooltipEle);

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.tooltipEle], POPUP_CLOSE);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.tooltipEle], POPUP_OPEN);
            this.adjustArrow(event.target, this.position, this.tooltipPositionX, this.tooltipPositionY);
            var pos = this.calculateTooltipOffset(this.position);
            var x = eventPageX + pos.left + this.offsetX;
            var y = eventPageY + pos.top + this.offsetY;
            var elePos = this.checkCollision(event.target, x, y);

            if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {
              var newpos = this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0 ? elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;
              elePos.position = newpos;
              this.adjustArrow(event.target, elePos.position, elePos.horizontal, elePos.vertical);
              var colpos = this.calculateTooltipOffset(elePos.position);
              elePos.left = eventPageX + colpos.left - this.offsetX;
              elePos.top = eventPageY + colpos.top - this.offsetY;
            }

            this.tooltipEle.style.left = elePos.left + 'px';
            this.tooltipEle.style.top = elePos.top + 'px';
          }
        }, {
          key: "keyDown",
          value: function keyDown(event) {
            if (this.tooltipEle && event.keyCode === 27) {
              this.close();
            }
          }
        }, {
          key: "touchEnd",
          value: function touchEnd(e) {
            if (this.tooltipEle && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + ROOT$1) === null) {
              this.close();
            }
          }
        }, {
          key: "scrollHandler",
          value: function scrollHandler(e) {
            if (this.tooltipEle) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, ".".concat(TOOLTIP_WRAP, ".").concat(POPUP_LIB, ".").concat(POPUP_ROOT$1))) {
                this.close();
              }
            }
          }
          /**
           * Core method that initializes the control rendering.
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.initialize();
            this.wireEvents(this.opensOn);
            this.renderComplete();
          }
          /**
           * Initializes the values of private members.
           * @private
           */

        }, {
          key: "preRender",
          value: function preRender() {
            this.tipClass = TIP_BOTTOM;
            this.tooltipPositionX = 'Center';
            this.tooltipPositionY = 'Top';
            this.isHidden = true;
          }
          /**
           * Binding events to the Tooltip element.
           * @hidden
           */

        }, {
          key: "wireEvents",
          value: function wireEvents(trigger) {
            var triggerList = this.getTriggerList(trigger);

            var _iterator59 = _createForOfIteratorHelper(triggerList),
                _step59;

            try {
              for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
                var opensOn = _step59.value;

                if (opensOn === 'Custom') {
                  return;
                }

                if (opensOn === 'Focus') {
                  this.wireFocusEvents();
                }

                if (opensOn === 'Click') {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.targetClick, this);
                }

                if (opensOn === 'Hover') {
                  if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                    this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Touch"](this.element, {
                      tapHoldThreshold: TAPHOLD_THRESHOLD,
                      tapHold: this.tapHoldHandler.bind(this)
                    });

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchEndEvent, this.touchEndHandler, this);
                  } else {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseover', this.targetHover, this);

                    if (this.isServerRender() && !this.isSticky) {
                      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseleave', this.onMouseOut, this);
                    }
                  }
                }
              }
            } catch (err) {
              _iterator59.e(err);
            } finally {
              _iterator59.f();
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'touchend', this.touchEnd, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'scroll wheel', this.scrollHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'keydown', this.keyDown, this);
          }
        }, {
          key: "getTriggerList",
          value: function getTriggerList(trigger) {
            if (trigger === 'Auto') {
              trigger = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? 'Hover' : 'Hover Focus';
            }

            return trigger.split(' ');
          }
        }, {
          key: "wireFocusEvents",
          value: function wireFocusEvents() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target)) {
              var targetList = [].slice.call(this.element.querySelectorAll(this.target));

              var _iterator60 = _createForOfIteratorHelper(targetList),
                  _step60;

              try {
                for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {
                  var target = _step60.value;

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'focus', this.targetHover, this);
                }
              } catch (err) {
                _iterator60.e(err);
              } finally {
                _iterator60.f();
              }
            } else {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focus', this.targetHover, this);
            }
          }
        }, {
          key: "wireMouseEvents",
          value: function wireMouseEvents(e, target) {
            if (this.tooltipEle) {
              if (!this.isSticky) {
                if (e.type === 'focus') {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'blur', this.onMouseOut, this);
                }

                if (e.type === 'mouseover') {
                  if (!this.isServerRender()) {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'mouseleave', this.onMouseOut, this);
                  }
                }
              }

              if (this.mouseTrail) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'mousemove touchstart mouseenter', this.onMouseMove, this);
              }
            }
          }
          /**
           * Unbinding events from the element on widget destroy.
           * @hidden
           */

        }, {
          key: "unwireEvents",
          value: function unwireEvents(trigger) {
            var triggerList = this.getTriggerList(trigger);

            var _iterator61 = _createForOfIteratorHelper(triggerList),
                _step61;

            try {
              for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {
                var opensOn = _step61.value;

                if (opensOn === 'Custom') {
                  return;
                }

                if (opensOn === 'Focus') {
                  this.unwireFocusEvents();
                }

                if (opensOn === 'Click') {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.targetClick);
                }

                if (opensOn === 'Hover') {
                  if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                    if (this.touchModule) {
                      this.touchModule.destroy();
                    }

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchEndEvent, this.touchEndHandler);
                  } else {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseover', this.targetHover);

                    if (this.isServerRender() && !this.isSticky) {
                      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseleave', this.onMouseOut);
                    }
                  }
                }
              }
            } catch (err) {
              _iterator61.e(err);
            } finally {
              _iterator61.f();
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'touchend', this.touchEnd);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'scroll wheel', this.scrollHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'keydown', this.keyDown);
          }
        }, {
          key: "unwireFocusEvents",
          value: function unwireFocusEvents() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.target)) {
              var targetList = [].slice.call(this.element.querySelectorAll(this.target));

              var _iterator62 = _createForOfIteratorHelper(targetList),
                  _step62;

              try {
                for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {
                  var target = _step62.value;

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'focus', this.targetHover);
                }
              } catch (err) {
                _iterator62.e(err);
              } finally {
                _iterator62.f();
              }
            } else {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focus', this.targetHover);
            }
          }
        }, {
          key: "unwireMouseEvents",
          value: function unwireMouseEvents(target) {
            if (!this.isSticky) {
              var triggerList = this.getTriggerList(this.opensOn);

              var _iterator63 = _createForOfIteratorHelper(triggerList),
                  _step63;

              try {
                for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {
                  var opensOn = _step63.value;

                  if (opensOn === 'Focus') {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'blur', this.onMouseOut);
                  }

                  if (opensOn === 'Hover' && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                    if (!this.isServerRender()) {
                      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'mouseleave', this.onMouseOut);
                    }
                  }
                }
              } catch (err) {
                _iterator63.e(err);
              } finally {
                _iterator63.f();
              }
            }

            if (this.mouseTrail) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'mousemove touchstart mouseenter', this.onMouseMove);
            }
          }
        }, {
          key: "findTarget",
          value: function findTarget() {
            var target = document.querySelector('[data-tooltip-id= ' + this.ctrlId + '_content]');
            return target;
          }
          /**
           * Core method to return the component name.
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'tooltip';
          }
          /**
           * Returns the properties to be maintained in the persisted state.
           * @private
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist([]);
          }
          /**
           * Called internally, if any of the property value changed.
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var targetElement = this.findTarget();

            for (var _i77 = 0, _Object$keys20 = Object.keys(newProp); _i77 < _Object$keys20.length; _i77++) {
              var prop = _Object$keys20[_i77];

              switch (prop) {
                case 'width':
                  if (this.tooltipEle && targetElement) {
                    this.tooltipEle.style.width = this.tooltipEle.style.maxWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.width);
                    this.reposition(targetElement);
                  }

                  break;

                case 'height':
                  if (this.tooltipEle && targetElement) {
                    this.tooltipEle.style.height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(newProp.height);
                    this.reposition(targetElement);
                  }

                  break;

                case 'content':
                  if (this.tooltipEle) {
                    if (this.isServerRender()) {
                      this.isBlazorTooltip = true;
                    }

                    this.renderContent();
                  } else if (this.isServerRender()) {
                    var args = {
                      'content': newProp.content
                    }; // tslint:disable

                    this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args); // tslint:enable
                  }

                  break;

                case 'opensOn':
                  this.unwireEvents(oldProp.opensOn);
                  this.wireEvents(newProp.opensOn);
                  break;

                case 'position':
                  this.formatPosition();

                  if (this.tooltipEle && targetElement) {
                    var arrowInnerELe = this.tooltipEle.querySelector('.' + ARROW_TIP_INNER);
                    arrowInnerELe.style.top = arrowInnerELe.style.left = null;
                    this.reposition(targetElement);
                  }

                  break;

                case 'tipPointerPosition':
                  if (this.tooltipEle && targetElement) {
                    this.reposition(targetElement);
                  }

                  break;

                case 'offsetX':
                  if (this.tooltipEle) {
                    var x = newProp.offsetX - oldProp.offsetX;
                    this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + x).toString() + 'px';
                  }

                  break;

                case 'offsetY':
                  if (this.tooltipEle) {
                    var y = newProp.offsetY - oldProp.offsetY;
                    this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + y).toString() + 'px';
                  }

                  break;

                case 'cssClass':
                  if (this.tooltipEle) {
                    if (oldProp.cssClass) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.tooltipEle], oldProp.cssClass.split(' '));
                    }

                    if (newProp.cssClass) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.tooltipEle], newProp.cssClass.split(' '));
                    }
                  }

                  break;

                case 'enableRtl':
                  if (this.tooltipEle) {
                    if (this.enableRtl) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.tooltipEle], RTL$1);
                    } else {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.tooltipEle], RTL$1);
                    }
                  }

                  break;
              }
            }
          }
          /**
           * It is used to show the Tooltip on the specified target with specific animation settings.
           * @param element Target element where the Tooltip is to be displayed. (It is an optional parameter)
           * @param animation Sets the specific animation, while showing the Tooltip on the screen. (It is an optional parameter)
           * @return {void}
           */

        }, {
          key: "open",
          value: function open(element, animation) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(animation)) {
              animation = this.animation.open;
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
              element = this.element;
            }

            if (element.style.display === 'none') {
              return;
            }

            this.showTooltip(element, animation);
          }
          /**
           * It is used to hide the Tooltip with specific animation effect.
           * @param animation Sets the specific animation when hiding Tooltip from the screen. (It is an optional parameter)
           * @return {void}
           */

        }, {
          key: "close",
          value: function close(animation) {
            if (!animation) {
              animation = this.animation.close;
            }

            this.hideTooltip(animation);
          }
          /**
           * It is used to refresh the Tooltip content and its position.
           * @param target Target element where the Tooltip content or position needs to be refreshed.
           * @return {void}
           */

        }, {
          key: "refresh",
          value: function refresh(target) {
            if (this.tooltipEle) {
              this.renderContent(target);
            }

            if (this.popupObj && target) {
              this.reposition(target);
            }
          }
          /**
           * It is used to destroy the Tooltip component.
           * @method destroy
           * @return {void}
           * @memberof Tooltip
           */

        }, {
          key: "destroy",
          value: function destroy() {
            if (!this.isServerRender()) {
              _get2(_getPrototypeOf2(Tooltip.prototype), "destroy", this).call(this);

              if (this.tooltipEle) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.tooltipEle);
              }
            }

            if (this.isServerRender() && this.tooltipEle) {
              var placeholder = document.querySelector('#' + this.ctrlId + '_content_placeholder');

              if (placeholder) {
                placeholder.appendChild(this.tooltipEle);
              }
            }

            if (this.popupObj) {
              this.popupObj.destroy();
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], ROOT$1);
            this.unwireEvents(this.opensOn);
            this.unwireMouseEvents(this.element);
            this.tooltipEle = null;
            this.popupObj = null;
          }
        }]);

        return Tooltip;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Tooltip.prototype, "width", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('auto')], Tooltip.prototype, "height", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Tooltip.prototype, "content", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Tooltip.prototype, "target", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('TopCenter')], Tooltip.prototype, "position", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Tooltip.prototype, "offsetX", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Tooltip.prototype, "offsetY", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Tooltip.prototype, "showTipPointer", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Auto')], Tooltip.prototype, "tipPointerPosition", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Auto')], Tooltip.prototype, "opensOn", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tooltip.prototype, "mouseTrail", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tooltip.prototype, "isSticky", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, Animation$1)], Tooltip.prototype, "animation", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Tooltip.prototype, "openDelay", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Tooltip.prototype, "closeDelay", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Tooltip.prototype, "cssClass", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Tooltip.prototype, "enableHtmlSanitizer", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "beforeRender", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "beforeOpen", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "afterOpen", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "beforeClose", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "afterClose", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "beforeCollision", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "created", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Tooltip.prototype, "destroyed", void 0);

      Tooltip = __decorate$2([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Tooltip);
      /**
       * Tooltip modules
       */

      var globalTimeOut = {};
      var spinTemplate = null;
      var spinCSSClass = null;
      var DEFT_MAT_WIDTH = 30;
      var DEFT_FAB_WIDTH = 30;
      var DEFT_BOOT_WIDTH = 30;
      var DEFT_BOOT4_WIDTH = 36;
      var CLS_SHOWSPIN = 'e-spin-show';
      var CLS_HIDESPIN = 'e-spin-hide';
      var CLS_MATERIALSPIN = 'e-spin-material';
      var CLS_FABRICSPIN = 'e-spin-fabric';
      var CLS_BOOTSPIN = 'e-spin-bootstrap';
      var CLS_BOOT4SPIN = 'e-spin-bootstrap4';
      var CLS_HIGHCONTRASTSPIN = 'e-spin-high-contrast';
      var CLS_SPINWRAP = 'e-spinner-pane';
      var CLS_SPININWRAP = 'e-spinner-inner';
      var CLS_SPINCIRCLE = 'e-path-circle';
      var CLS_SPINARC = 'e-path-arc';
      var CLS_SPINLABEL = 'e-spin-label';
      var CLS_SPINTEMPLATE = 'e-spin-template';
      /**
       * Function to change the Spinners in a page globally from application end.
       * ```
       * E.g : blazorSpinner({ action: "Create", options: {target: targetElement}, type: "" });
       * ```
       * @param args
       * @private
       */

      function Spinner(action, options, target, type) {
        switch (action) {
          case 'Create':
            var _element4 = document.querySelector(options.target);

            var args = {
              type: type,
              target: _element4,
              cssClass: options.cssClass,
              label: options.label,
              width: options.width
            };
            createSpinner(args);
            break;

          case 'Show':
            showSpinner(document.querySelector(target));
            break;

          case 'Hide':
            hideSpinner(document.querySelector(target));
            break;

          case 'Set':
            var setArgs = {
              cssClass: options.cssClass,
              type: type
            };
            setSpinner(setArgs);
            break;
        }
      }
      /**
       * Create a spinner for the specified target element.
       * ```
       * E.g : createSpinner({ target: targetElement, width: '34px', label: 'Loading..' });
       * ```
       * @param args
       * @private
       */


      function createSpinner(args, internalCreateElement) {
        if (!args.target) {
          return;
        }

        var radius;
        var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
        var container = create_spinner_container(args.target, makeElement);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.cssClass)) {
          container.wrap.classList.add(args.cssClass);
        }

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.template) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(spinTemplate)) {
          var template = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.template) ? args.template : spinTemplate;
          container.wrap.classList.add(CLS_SPINTEMPLATE);
          replaceContent(container.wrap, template, spinCSSClass);
        } else {
          var theme = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.type) ? args.type : getTheme(container.wrap);
          var width = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.width) ? args.width : undefined;
          radius = calculateRadius(width, theme);
          setTheme(theme, container.wrap, radius, makeElement);

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.label)) {
            createLabel(container.inner_wrap, args.label, makeElement);
          }
        }

        container.wrap.classList.add(CLS_HIDESPIN);
        container = null;
      }

      function createLabel(container, label, makeElement) {
        var labelEle = makeElement('div', {});
        labelEle.classList.add(CLS_SPINLABEL);
        labelEle.textContent = label;
        container.appendChild(labelEle);
        return labelEle;
      }

      function createMaterialSpinner(container, radius, makeElement) {
        var uniqueID = random_generator();
        globalTimeOut[uniqueID] = {
          timeOut: 0,
          type: 'Material',
          radius: radius
        };
        create_material_element(container, uniqueID, makeElement, CLS_MATERIALSPIN);
        mat_calculate_attributes(radius, container, 'Material', CLS_MATERIALSPIN);
      }

      function createBootstrap4Spinner(container, radius, makeElement) {
        var uniqueID = random_generator();
        globalTimeOut[uniqueID] = {
          timeOut: 0,
          type: 'Bootstrap4',
          radius: radius
        };
        create_material_element(container, uniqueID, makeElement, CLS_BOOT4SPIN);
        mat_calculate_attributes(radius, container, 'Bootstrap4', CLS_BOOT4SPIN);
      }

      function startMatAnimate(container, uniqueID, radius) {
        var globalObject = {};
        var timeOutVar = 0;
        globalTimeOut[uniqueID].timeOut = 0;
        globalObject[uniqueID] = globalVariables(uniqueID, radius, 0, 0);
        var spinnerInfo = {
          uniqueID: uniqueID,
          container: container,
          globalInfo: globalObject,
          timeOutVar: timeOutVar
        };
        animateMaterial(spinnerInfo);
      }

      function createFabricSpinner(container, radius, makeElement) {
        var uniqueID = random_generator();
        globalTimeOut[uniqueID] = {
          timeOut: 0,
          type: 'Fabric',
          radius: radius
        };
        create_fabric_element(container, uniqueID, CLS_FABRICSPIN, makeElement);
        fb_calculate_attributes(radius, container, CLS_FABRICSPIN);
      }

      function createHighContrastSpinner(container, radius, makeElement) {
        var uniqueID = random_generator();
        globalTimeOut[uniqueID] = {
          timeOut: 0,
          type: 'HighContrast',
          radius: radius
        };
        create_fabric_element(container, uniqueID, CLS_HIGHCONTRASTSPIN, makeElement);
        fb_calculate_attributes(radius, container, CLS_HIGHCONTRASTSPIN);
      }

      function getTheme(container) {
        var theme = window.getComputedStyle(container, ':after').getPropertyValue('content');
        return theme.replace(/['"]+/g, '');
      }

      function setTheme(theme, container, radius, makeElement) {
        var innerContainer = container.querySelector('.' + CLS_SPININWRAP);
        var svg = innerContainer.querySelector('svg');

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(svg)) {
          innerContainer.removeChild(svg);
        }

        switch (theme) {
          case 'Material':
            createMaterialSpinner(innerContainer, radius, makeElement);
            break;

          case 'Fabric':
            createFabricSpinner(innerContainer, radius, makeElement);
            break;

          case 'Bootstrap':
            createBootstrapSpinner(innerContainer, radius, makeElement);
            break;

          case 'HighContrast':
            createHighContrastSpinner(innerContainer, radius, makeElement);
            break;

          case 'Bootstrap4':
            createBootstrap4Spinner(innerContainer, radius, makeElement);
            break;
        }
      }

      function createBootstrapSpinner(innerContainer, radius, makeElement) {
        var uniqueID = random_generator();
        globalTimeOut[uniqueID] = {
          timeOut: 0,
          type: 'Bootstrap',
          radius: radius
        };
        create_bootstrap_element(innerContainer, uniqueID, makeElement);
        boot_calculate_attributes(innerContainer, radius);
      }

      function create_bootstrap_element(innerContainer, uniqueID, makeElement) {
        var svgBoot = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        var viewBoxValue = 64;
        var trans = 32;
        var defaultRadius = 2;
        svgBoot.setAttribute('id', uniqueID);
        svgBoot.setAttribute('class', CLS_BOOTSPIN);
        svgBoot.setAttribute('viewBox', '0 0 ' + viewBoxValue + ' ' + viewBoxValue);
        innerContainer.insertBefore(svgBoot, innerContainer.firstChild);

        for (var item = 0; item <= 7; item++) {
          var bootCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
          bootCircle.setAttribute('class', CLS_SPINCIRCLE + '_' + item);
          bootCircle.setAttribute('r', defaultRadius + '');
          bootCircle.setAttribute('transform', 'translate(' + trans + ',' + trans + ')');
          svgBoot.appendChild(bootCircle);
        }
      }

      function boot_calculate_attributes(innerContainer, radius) {
        var svg = innerContainer.querySelector('svg.e-spin-bootstrap');
        svg.style.width = svg.style.height = radius + 'px';
        var x = 0;
        var y = 0;
        var rad = 24;
        var startArc = 90;

        for (var item = 0; item <= 7; item++) {
          var start = defineArcPoints(x, y, rad, startArc);
          var circleEle = svg.querySelector('.' + CLS_SPINCIRCLE + '_' + item);
          circleEle.setAttribute('cx', start.x + '');
          circleEle.setAttribute('cy', start.y + '');
          startArc = startArc >= 360 ? 0 : startArc;
          startArc = startArc + 45;
        }
      }

      function generateSeries(begin, stop) {
        var series = [];
        var start = begin;
        var end = stop;
        var increment = false;
        var count = 1;
        formSeries(start);

        function formSeries(i) {
          series.push(i);

          if (i !== end || count === 1) {
            if (i <= start && i > 1 && !increment) {
              i = parseFloat((i - 0.2).toFixed(2));
            } else if (i === 1) {
              i = 7;
              i = parseFloat((i + 0.2).toFixed(2));
              increment = true;
            } else if (i < 8 && increment) {
              i = parseFloat((i + 0.2).toFixed(2));

              if (i === 8) {
                increment = false;
              }
            } else if (i <= 8 && !increment) {
              i = parseFloat((i - 0.2).toFixed(2));
            }

            ++count;
            formSeries(i);
          }
        }

        return series;
      }

      function animateBootstrap(innerContainer) {
        var svg = innerContainer.querySelector('svg.e-spin-bootstrap');
        var id = svg.getAttribute('id');

        for (var i = 1; i <= 8; i++) {
          var circleEle = innerContainer.getElementsByClassName('e-path-circle_' + (i === 8 ? 0 : i))[0];
          rotation(circleEle, i, i, generateSeries(i, i), id);
        }

        function rotation(circle, start, end, series, id) {
          var count = 0;
          boot_animate(start);

          function boot_animate(radius) {
            if (globalTimeOut[id].isAnimate) {
              ++count;
              circle.setAttribute('r', radius + '');

              if (count >= series.length) {
                count = 0;
              }

              globalTimeOut[id].timeOut = setTimeout(boot_animate.bind(null, series[count]), 18);
            }
          }
        }
      }

      function replaceContent(container, template, cssClass) {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cssClass)) {
          container.classList.add(cssClass);
        }

        var inner = container.querySelector('.e-spinner-inner');
        inner.innerHTML = template;
      }

      function calculateRadius(width, theme) {
        var defaultSize;

        switch (theme) {
          case 'Material':
            defaultSize = DEFT_MAT_WIDTH;
            break;

          case 'Fabric':
            defaultSize = DEFT_FAB_WIDTH;
            break;

          case 'Bootstrap4':
            defaultSize = DEFT_BOOT4_WIDTH;
            break;

          default:
            defaultSize = DEFT_BOOT_WIDTH;
        }

        width = width ? parseFloat(width + '') : defaultSize;
        return theme === 'Bootstrap' ? width : width / 2;
      }

      function globalVariables(id, radius, count, previousId) {
        return {
          radius: radius,
          count: count,
          previousId: previousId
        };
      }

      function random_generator() {
        var random = '';
        var combine = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

        for (var i = 0; i < 5; i++) {
          random += combine.charAt(Math.floor(Math.random() * combine.length));
        }

        return random;
      }

      function create_fabric_element(innerCon, uniqueID, themeClass, makeElement) {
        var svgFabric = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svgFabric.setAttribute('id', uniqueID);
        svgFabric.setAttribute('class', themeClass);
        var fabricCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        fabricCirclePath.setAttribute('class', CLS_SPINCIRCLE);
        var fabricCircleArc = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        fabricCircleArc.setAttribute('class', CLS_SPINARC);
        innerCon.insertBefore(svgFabric, innerCon.firstChild);
        svgFabric.appendChild(fabricCirclePath);
        svgFabric.appendChild(fabricCircleArc);
      }

      function create_material_element(innerContainer, uniqueID, makeElement, cls) {
        var svgMaterial = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svgMaterial.setAttribute('class', cls);
        svgMaterial.setAttribute('id', uniqueID);
        var matCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        matCirclePath.setAttribute('class', CLS_SPINCIRCLE);
        innerContainer.insertBefore(svgMaterial, innerContainer.firstChild);
        svgMaterial.appendChild(matCirclePath);
      }

      function create_spinner_container(target, makeElement) {
        var spinnerContainer = makeElement('div', {});
        spinnerContainer.classList.add(CLS_SPINWRAP);
        var spinnerInnerContainer = makeElement('div', {});
        spinnerInnerContainer.classList.add(CLS_SPININWRAP);
        target.appendChild(spinnerContainer);
        spinnerContainer.appendChild(spinnerInnerContainer);
        return {
          wrap: spinnerContainer,
          inner_wrap: spinnerInnerContainer
        };
      }

      function animateMaterial(spinnerInfo) {
        var start = 1;
        var end = 149;
        var duration = 1333;
        var max = 75;
        createCircle(start, end, easeAnimation, duration, spinnerInfo.globalInfo[spinnerInfo.uniqueID].count, max, spinnerInfo);
        spinnerInfo.globalInfo[spinnerInfo.uniqueID].count = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].count % 4;
      }

      function createCircle(start, end, easing, duration, count, max, spinnerInfo) {
        var id = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId;
        var startTime = new Date().getTime();
        var change = end - start;
        var diameter = getSize(spinnerInfo.globalInfo[spinnerInfo.uniqueID].radius * 2 + '');
        var strokeSize = getStrokeSize(diameter);
        var rotate = -90 * (spinnerInfo.globalInfo[spinnerInfo.uniqueID].count || 0);
        mat_animation(spinnerInfo);

        function mat_animation(spinnerInfo) {
          var currentTime = Math.max(0, Math.min(new Date().getTime() - startTime, duration));
          updatePath(easing(currentTime, start, change, duration), spinnerInfo.container);

          if (id === spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId && currentTime < duration) {
            globalTimeOut[spinnerInfo.uniqueID].timeOut = setTimeout(mat_animation.bind(null, spinnerInfo), 1);
          } else {
            animateMaterial(spinnerInfo);
          }
        }

        function updatePath(value, container) {
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(container.querySelector('svg.e-spin-material')) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(container.querySelector('svg.e-spin-material').querySelector('path.e-path-circle'))) {
            var svg = container.querySelector('svg.e-spin-material');
            var path = svg.querySelector('path.e-path-circle');
            path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, value, max) + '');
            path.setAttribute('transform', 'rotate(' + rotate + ' ' + diameter / 2 + ' ' + diameter / 2 + ')');
          }
        }
      }

      function mat_calculate_attributes(radius, container, type, cls) {
        var diameter = radius * 2;
        var svg = container.querySelector('svg.' + cls);
        var path = svg.querySelector('path.e-path-circle');
        var strokeSize = getStrokeSize(diameter);
        var transformOrigin = diameter / 2 + 'px';
        svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);
        svg.style.width = svg.style.height = diameter + 'px';
        svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;
        path.setAttribute('d', drawArc(diameter, strokeSize));

        if (type === 'Material') {
          path.setAttribute('stroke-width', strokeSize + '');
          path.setAttribute('stroke-dasharray', (diameter - strokeSize) * Math.PI * 0.75 + '');
          path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, 1, 75) + '');
        }
      }

      function getSize(value) {
        var parsed = parseFloat(value);
        return parsed;
      }

      function drawArc(diameter, strokeSize) {
        var radius = diameter / 2;
        var offset = strokeSize / 2;
        return 'M' + radius + ',' + offset + 'A' + (radius - offset) + ',' + (radius - offset) + ' 0 1 1 ' + offset + ',' + radius;
      }

      function getStrokeSize(diameter) {
        return 10 / 100 * diameter;
      }

      function getDashOffset(diameter, strokeSize, value, max) {
        return (diameter - strokeSize) * Math.PI * (3 * max / 100 - value / 100);
      }

      function easeAnimation(current, start, change, duration) {
        var timestamp = (current /= duration) * current;
        var timecount = timestamp * current;
        return start + change * (6 * timecount * timestamp + -15 * timestamp * timestamp + 10 * timecount);
      }

      function fb_calculate_attributes(radius, innerConainer, trgClass) {
        var centerX = radius;
        var centerY = radius;
        var diameter = radius * 2;
        var startArc = 315;
        var endArc = 45;
        var svg = innerConainer.querySelector('.' + trgClass);
        var circle = svg.querySelector('.e-path-circle');
        var path = svg.querySelector('.e-path-arc');
        var transformOrigin = diameter / 2 + 'px';
        circle.setAttribute('d', defineCircle(centerX, centerY, radius));
        path.setAttribute('d', defineArc(centerX, centerY, radius, startArc, endArc));
        svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);
        svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;
        svg.style.width = svg.style.height = diameter + 'px';
      }

      function defineArcPoints(centerX, centerY, radius, angle) {
        var radians = (angle - 90) * Math.PI / 180.0;
        return {
          x: centerX + radius * Math.cos(radians),
          y: centerY + radius * Math.sin(radians)
        };
      }

      function defineArc(x, y, radius, startArc, endArc) {
        var start = defineArcPoints(x, y, radius, endArc);
        var end = defineArcPoints(x, y, radius, startArc);
        var d = ['M', start.x, start.y, 'A', radius, radius, 0, 0, 0, end.x, end.y].join(' ');
        return d;
      }

      function defineCircle(x, y, radius) {
        var d = ['M', x, y, 'm', -radius, 0, 'a', radius, radius, 0, 1, 0, radius * 2, 0, 'a', radius, radius, 0, 1, 0, -radius * 2, 0].join(' ');
        return d;
      }
      /**
       * Function to show the Spinner.
       * @param container - Specify the target of the Spinner.
       * @private
       */


      function showSpinner(container) {
        showHideSpinner(container, false);
        container = null;
      }

      function showHideSpinner(container, isHide) {
        var spinnerWrap;

        if (container) {
          spinnerWrap = container.classList.contains(CLS_SPINWRAP) ? container : container.querySelector('.' + CLS_SPINWRAP);
        }

        if (container && spinnerWrap) {
          var inner = spinnerWrap.querySelector('.' + CLS_SPININWRAP);
          var spinCheck;
          spinCheck = isHide ? !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_HIDESPIN) : !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_SHOWSPIN);

          if (spinCheck) {
            var svgEle = spinnerWrap.querySelector('svg');

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(svgEle)) {
              return;
            }

            var id = svgEle.getAttribute('id');
            globalTimeOut[id].isAnimate = !isHide;

            switch (globalTimeOut[id].type) {
              case 'Material':
                isHide ? clearTimeout(globalTimeOut[id].timeOut) : startMatAnimate(inner, id, globalTimeOut[id].radius);
                break;

              case 'Bootstrap':
                isHide ? clearTimeout(globalTimeOut[id].timeOut) : animateBootstrap(inner);
                break;
            }
          }

          isHide ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(spinnerWrap, [CLS_HIDESPIN], [CLS_SHOWSPIN]) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(spinnerWrap, [CLS_SHOWSPIN], [CLS_HIDESPIN]);
          container = null;
        }
      }
      /**
       * Function to hide the Spinner.
       * @param container - Specify the target of the Spinner.
       * @private
       */


      function hideSpinner(container) {
        showHideSpinner(container, true);
        container = null;
      }
      /**
       * Function to change the Spinners in a page globally from application end.
       * ```
       * E.g : setSpinner({ cssClass: 'custom-css'; type: 'Material' });
       * ```
       * @param args
       * @private
       */


      function setSpinner(args, internalCreateElement) {
        var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];

        if (args.template !== undefined) {
          spinTemplate = args.template;

          if (args.template !== undefined) {
            spinCSSClass = args.cssClass;
          }
        }

        var container = document.querySelectorAll('.' + CLS_SPINWRAP);

        for (var index = 0; index < container.length; index++) {
          ensureTemplate(args.template, container[index], args.type, args.cssClass, makeElement);
        }
      }

      function ensureTemplate(template, container, theme, cssClass, makeEle) {
        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(template) && !container.classList.contains(CLS_SPINTEMPLATE)) {
          replaceTheme(container, theme, cssClass, makeEle);

          if (container.classList.contains(CLS_SHOWSPIN)) {
            container.classList.remove(CLS_SHOWSPIN);
            showSpinner(container);
          } else {
            container.classList.remove(CLS_HIDESPIN);
            hideSpinner(container);
          }
        } else {
          spinTemplate = template;

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cssClass)) {
            spinCSSClass = cssClass;
          }
        }
      }

      function replaceTheme(container, theme, cssClass, makeEle) {
        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cssClass)) {
          container.classList.add(cssClass);
        }

        var svgElement = container.querySelector('svg');
        var radius = theme === 'Bootstrap' ? parseFloat(svgElement.style.height) : parseFloat(svgElement.style.height) / 2;
        var classNames = svgElement.getAttribute('class');
        var svgClassList = classNames.split(/\s/);

        if (svgClassList.indexOf('e-spin-material') >= 0) {
          var id = svgElement.getAttribute('id');
          clearTimeout(globalTimeOut[id].timeOut);
        }

        setTheme(theme, container, radius, makeEle);
      }
      /**
       * spinner modules
       */

      /**
       * Popup Components
       */
      //# sourceMappingURL=ej2-popups.es2015.js.map

      /***/

    },

    /***/
    "OyPL":
    /*!*********************************************************************************!*\
      !*** ./node_modules/@syncfusion/ej2-dropdowns/dist/es6/ej2-dropdowns.es2015.js ***!
      \*********************************************************************************/

    /*! exports provided: incrementalSearch, Search, highlightSearch, revertHighlightSearch, FieldSettings, dropDownBaseClasses, DropDownBase, dropDownListClasses, DropDownList, Fields, TreeSettings, DropDownTree, ComboBox, AutoComplete, MultiSelect, CheckBoxSelection, createFloatLabel, updateFloatLabelState, removeFloating, setPlaceHolder, floatLabelFocus, floatLabelBlur, SelectionSettings, ToolbarSettings, ListBox */

    /***/
    function OyPL(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "incrementalSearch", function () {
        return _incrementalSearch;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Search", function () {
        return Search;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "highlightSearch", function () {
        return highlightSearch;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "revertHighlightSearch", function () {
        return revertHighlightSearch;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FieldSettings", function () {
        return FieldSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "dropDownBaseClasses", function () {
        return dropDownBaseClasses;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DropDownBase", function () {
        return DropDownBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "dropDownListClasses", function () {
        return dropDownListClasses;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DropDownList", function () {
        return DropDownList;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Fields", function () {
        return Fields;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeSettings", function () {
        return TreeSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DropDownTree", function () {
        return DropDownTree;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ComboBox", function () {
        return ComboBox;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AutoComplete", function () {
        return AutoComplete;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MultiSelect", function () {
        return MultiSelect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CheckBoxSelection", function () {
        return CheckBoxSelection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createFloatLabel", function () {
        return createFloatLabel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "updateFloatLabelState", function () {
        return updateFloatLabelState;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "removeFloating", function () {
        return removeFloating;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setPlaceHolder", function () {
        return setPlaceHolder;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "floatLabelFocus", function () {
        return floatLabelFocus;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "floatLabelBlur", function () {
        return floatLabelBlur;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectionSettings", function () {
        return SelectionSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ToolbarSettings", function () {
        return ToolbarSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ListBox", function () {
        return ListBox;
      });
      /* harmony import */


      var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @syncfusion/ej2-base */
      "4SUy");
      /* harmony import */


      var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @syncfusion/ej2-data */
      "H552");
      /* harmony import */


      var _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @syncfusion/ej2-lists */
      "72GX");
      /* harmony import */


      var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @syncfusion/ej2-popups */
      "Naoh");
      /* harmony import */


      var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @syncfusion/ej2-inputs */
      "ngVE");
      /* harmony import */


      var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @syncfusion/ej2-buttons */
      "TF3C");
      /* harmony import */


      var _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @syncfusion/ej2-navigations */
      "5YkT");
      /**
       * IncrementalSearch module file
       */


      var queryString = '';
      var prevString = '';
      var matches$1 = [];
      var activeClass = 'e-active';
      var prevElementId = '';
      /**
       * Search and focus the list item based on key code matches with list text content
       * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.
       * @param  { HTMLElement[]] } items - Specifies an array of HTMLElement, from which matches find has done.
       * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen
       * after selected item otherwise it will do from initial.
       * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.
       */

      function _incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId, isBlazor$$1) {
        queryString += String.fromCharCode(keyCode);
        setTimeout(function () {
          queryString = '';
        }, 1000);
        var index;
        queryString = ignoreCase ? queryString.toLowerCase() : queryString;

        if (prevElementId === elementId && prevString === queryString) {
          for (var i = 0; i < matches$1.length; i++) {
            if (matches$1[i].classList.contains(activeClass)) {
              index = i;
              break;
            }
          }

          index = index + 1;
          return matches$1[index];
        } else {
          var listItems = items;
          var strLength = queryString.length;
          var text;
          var item;
          selectedIndex = selectedIndex ? selectedIndex + 1 : 0;
          var _i78 = selectedIndex;
          matches$1 = [];

          do {
            if (_i78 === listItems.length) {
              _i78 = -1;
            }

            _i78 === -1 ? index = 0 : index = _i78;
            item = listItems[index];

            if (isBlazor$$1) {
              text = ignoreCase ? item.textContent.trim().toLowerCase() : item.textContent.trim();
            } else {
              text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;
            }

            if (text.substr(0, strLength) === queryString) {
              matches$1.push(listItems[index]);
            }

            _i78++;
          } while (_i78 !== selectedIndex);

          prevString = queryString;
          prevElementId = elementId;
          return matches$1[0];
        }
      }

      function Search(inputVal, items, searchType, ignoreCase) {
        var listItems = items;
        ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;
        var itemData = {
          item: null,
          index: null
        };

        if (inputVal && inputVal.length) {
          var strLength = inputVal.length;
          var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;

          for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {
            var item = itemsData[i];
            var text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\s+|\s+$/g, '');

            if (searchType === 'Equal' && text === queryStr || searchType === 'StartsWith' && text.substr(0, strLength) === queryStr) {
              itemData.item = item;
              itemData.index = i;
              return {
                item: item,
                index: i
              };
            }
          }

          return itemData;
        }

        return itemData;
      }
      /**
       * Function helps to find which highlightSearch is to call based on your data.
       * @param  {HTMLElement} element - Specifies an li element.
       * @param  {string} query - Specifies the string to be highlighted.
       * @param  {boolean} ignoreCase - Specifies the ignoreCase option.
       * @param  {HightLightType} type - Specifies the type of highlight.
       */


      function highlightSearch(element, query, ignoreCase, type, isBlazor$$1) {
        if (query === '') {
          return;
        } else {
          var ignoreRegex = ignoreCase ? 'gim' : 'gm';
          query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
          var replaceQuery = type === 'StartsWith' ? '^(' + query + ')' : type === 'EndsWith' ? '(' + query + ')$' : '(' + query + ')';
          findTextNode(element, new RegExp(replaceQuery, ignoreRegex), isBlazor$$1);
        }
      }

      function findTextNode(element, pattern, isBlazor$$1) {
        for (var index = 0; element.childNodes && index < element.childNodes.length; index++) {
          if (element.childNodes[index].nodeType === 3 && element.childNodes[index].textContent.trim() !== '') {
            element = isBlazor$$1 && element.classList.contains('e-highlight') ? element.parentElement : element;

            if (isBlazor$$1 && element.getAttribute('data-value')) {
              element.innerHTML = element.getAttribute('data-value').replace(pattern, '<span class="e-highlight">$1</span>');
            } else {
              element.innerHTML = element.innerHTML.replace(pattern, '<span class="e-highlight">$1</span>');
            }

            break;
          } else {
            findTextNode(element.childNodes[index], pattern, isBlazor$$1);
          }
        }
      }
      /**
       * Function helps to remove highlighted element based on your data.
       * @param  {HTMLElement} content - Specifies an content element.
       */


      function revertHighlightSearch(content) {
        var contentElement = content.querySelectorAll('.e-highlight');

        for (var i = contentElement.length - 1; i >= 0; i--) {
          var parent = contentElement[i].parentNode;
          var text = document.createTextNode(contentElement[i].textContent);
          parent.replaceChild(text, contentElement[i]);
        }
      }
      /**
       * Common source
       */


      var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var FieldSettings = /*#__PURE__*/function (_syncfusion_ej2_base_33) {
        _inherits2(FieldSettings, _syncfusion_ej2_base_33);

        var _super51 = _createSuper(FieldSettings);

        function FieldSettings() {
          _classCallCheck2(this, FieldSettings);

          return _super51.apply(this, arguments);
        }

        return FieldSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], FieldSettings.prototype, "text", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], FieldSettings.prototype, "value", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], FieldSettings.prototype, "iconCss", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], FieldSettings.prototype, "groupBy", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], FieldSettings.prototype, "htmlAttributes", void 0);

      var dropDownBaseClasses = {
        root: 'e-dropdownbase',
        rtl: 'e-rtl',
        content: 'e-content',
        selected: 'e-active',
        hover: 'e-hover',
        noData: 'e-nodata',
        fixedHead: 'e-fixed-head',
        focus: 'e-item-focus',
        li: 'e-list-item',
        group: 'e-list-group-item',
        disabled: 'e-disabled',
        grouping: 'e-dd-group'
      };
      var ITEMTEMPLATE_PROPERTY = 'ItemTemplate';
      var VALUETEMPLATE_PROPERTY = 'ValueTemplate';
      var GROUPTEMPLATE_PROPERTY = 'GroupTemplate';
      var HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';
      var FOOTERTEMPLATE_PROPERTY = 'FooterTemplate';
      var NORECORDSTEMPLATE_PROPERTY = 'NoRecordsTemplate';
      var ACTIONFAILURETEMPLATE_PROPERTY = 'ActionFailureTemplate';
      /**
       * DropDownBase component will generate the list items based on given data and act as base class to drop-down related components
       */

      var DropDownBase = /*#__PURE__*/function (_syncfusion_ej2_base_34) {
        _inherits2(DropDownBase, _syncfusion_ej2_base_34);

        var _super52 = _createSuper(DropDownBase);

        /**
         * * Constructor for DropDownBase class
         */
        function DropDownBase(options, element) {
          _classCallCheck2(this, DropDownBase);

          return _super52.call(this, options, element);
        }

        _createClass2(DropDownBase, [{
          key: "getPropObject",
          value: function getPropObject(prop, newProp, oldProp) {
            var newProperty = new Object();
            var oldProperty = new Object(); // tslint:disable-next-line:no-function-constructor-with-string-args

            var propName = function propName(prop) {
              return prop;
            };

            newProperty[propName(prop)] = newProp[propName(prop)];
            oldProperty[propName(prop)] = oldProp[propName(prop)];
            var data = new Object();
            data.newProperty = newProperty;
            data.oldProperty = oldProperty;
            return data;
          }
        }, {
          key: "getValueByText",
          value: function getValueByText(text, ignoreCase, ignoreAccent) {
            var value = null;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listData)) {
              if (ignoreCase) {
                value = this.checkValueCase(text, true, ignoreAccent);
              } else {
                value = this.checkValueCase(text, false, ignoreAccent);
              }
            }

            return value;
          }
        }, {
          key: "checkValueCase",
          value: function checkValueCase(text, ignoreCase, ignoreAccent, isTextByValue) {
            var _this143 = this;

            var value = null;

            if (isTextByValue) {
              value = text;
            }

            var dataSource = this.listData;
            var fields = this.fields;
            var type = this.typeOfData(dataSource)["typeof"];

            if (type === 'string' || type === 'number' || type === 'boolean') {
              var _iterator64 = _createForOfIteratorHelper(dataSource),
                  _step64;

              try {
                for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {
                  var item = _step64.value;

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
                    if (ignoreAccent) {
                      value = this.checkingAccent(String(item), text, ignoreCase);
                    } else {
                      if (ignoreCase) {
                        if (this.checkIgnoreCase(String(item), text)) {
                          value = this.getItemValue(String(item), text, ignoreCase);
                        }
                      } else {
                        if (this.checkNonIgnoreCase(String(item), text)) {
                          value = this.getItemValue(String(item), text, ignoreCase, isTextByValue);
                        }
                      }
                    }
                  }
                }
              } catch (err) {
                _iterator64.e(err);
              } finally {
                _iterator64.f();
              }
            } else {
              if (ignoreCase) {
                dataSource.filter(function (item) {
                  var itemValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.value, item);

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(itemValue) && _this143.checkIgnoreCase(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.text, item).toString(), text)) {
                    value = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.value, item);
                  }
                });
              } else {
                if (isTextByValue) {
                  dataSource.filter(function (item) {
                    var itemValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.value, item);

                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(itemValue) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) && itemValue.toString() === value.toString()) {
                      value = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.text, item);
                    }
                  });
                } else {
                  dataSource.filter(function (item) {
                    if (_this143.checkNonIgnoreCase(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.text, item), text)) {
                      value = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.value, item);
                    }
                  });
                }
              }
            }

            return value;
          }
        }, {
          key: "checkingAccent",
          value: function checkingAccent(item, text, ignoreCase) {
            var dataItem = _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].ignoreDiacritics(String(item));

            var textItem = _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].ignoreDiacritics(text.toString());

            var value = null;

            if (ignoreCase) {
              if (this.checkIgnoreCase(dataItem, textItem)) {
                value = this.getItemValue(String(item), text, ignoreCase);
              }
            } else {
              if (this.checkNonIgnoreCase(String(item), text)) {
                value = this.getItemValue(String(item), text, ignoreCase);
              }
            }

            return value;
          }
        }, {
          key: "checkIgnoreCase",
          value: function checkIgnoreCase(item, text) {
            return String(item).toLowerCase() === text.toString().toLowerCase() ? true : false;
          }
        }, {
          key: "checkNonIgnoreCase",
          value: function checkNonIgnoreCase(item, text) {
            return String(item) === text.toString() ? true : false;
          }
        }, {
          key: "getItemValue",
          value: function getItemValue(dataItem, typedText, ignoreCase, isTextByValue) {
            var value = null;
            var dataSource = this.listData;
            var type = this.typeOfData(dataSource)["typeof"];

            if (isTextByValue) {
              value = dataItem.toString();
            } else {
              if (ignoreCase) {
                value = type === 'string' ? String(dataItem) : this.getFormattedValue(String(dataItem));
              } else {
                value = type === 'string' ? typedText : this.getFormattedValue(typedText);
              }
            }

            return value;
          }
        }, {
          key: "templateCompiler",
          value: function templateCompiler(baseTemplate) {
            var checkTemplate = false;

            if (baseTemplate) {
              try {
                checkTemplate = document.querySelectorAll(baseTemplate).length ? true : false;
              } catch (exception) {
                checkTemplate = false;
              }
            }

            return checkTemplate;
          }
        }, {
          key: "l10nUpdate",
          value: function l10nUpdate(actionFailure) {
            var ele = this.getModuleName() === 'listbox' ? this.ulElement : this.list;

            if (this.noRecordsTemplate !== 'No records found' || this.actionFailureTemplate !== 'Request failed') {
              this.DropDownBaseresetBlazorTemplates(false, false, true, true);
              var template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;
              var compiledString;
              var templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;
              ele.innerHTML = '';
              var tempaltecheck = this.templateCompiler(template);

              if (tempaltecheck) {
                compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(template).innerHTML.trim());
              } else {
                compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
              }

              var _iterator65 = _createForOfIteratorHelper(compiledString({}, null, null, templateId, this.isStringTemplate)),
                  _step65;

              try {
                for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {
                  var item = _step65.value;
                  ele.appendChild(item);
                }
              } catch (err) {
                _iterator65.e(err);
              } finally {
                _iterator65.f();
              }

              this.DropDownBaseupdateBlazorTemplates(false, false, !actionFailure, actionFailure, false, false, false, false);
            } else {
              var l10nLocale = {
                noRecordsTemplate: 'No records found',
                actionFailureTemplate: 'Request failed'
              };
              var componentLocale = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"](this.getLocaleName(), {}, this.locale);

              if (componentLocale.getConstant('actionFailureTemplate') !== '') {
                this.l10n = componentLocale;
              } else {
                this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"](this.getModuleName() === 'listbox' ? 'listbox' : 'dropdowns', l10nLocale, this.locale);
              }

              var content = actionFailure ? this.l10n.getConstant('actionFailureTemplate') : this.l10n.getConstant('noRecordsTemplate');

              if (this.getModuleName() === 'listbox') {
                var liElem = this.createElement('li');
                liElem.textContent = content;
                ele.appendChild(liElem);
                liElem.classList.add('e-list-nrt');
              } else {
                ele.innerHTML = content;
              }
            }
          }
        }, {
          key: "getLocaleName",
          value: function getLocaleName() {
            return 'drop-down-base';
          }
        }, {
          key: "getTextByValue",
          value: function getTextByValue(value) {
            var text;
            text = this.checkValueCase(value, false, false, true);
            return text;
          }
        }, {
          key: "getFormattedValue",
          value: function getFormattedValue(value) {
            if (this.listData && this.listData.length) {
              var item = this.typeOfData(this.listData);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) || value === 'null') {
                return null;
              }

              if (typeof Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.value ? this.fields.value : 'value', item.item) === 'number' || item["typeof"] === 'number') {
                return parseFloat(value);
              }

              if (typeof Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.value ? this.fields.value : 'value', item.item) === 'boolean' || item["typeof"] === 'boolean') {
                return value === 'true';
              }
            }

            return value;
          }
          /**
           * Sets RTL to dropdownbase wrapper
           */

        }, {
          key: "setEnableRtl",
          value: function setEnableRtl() {
            if (this.list) {
              this.enableRtlElements.push(this.list);
            }

            this.enableRtl ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(this.enableRtlElements, dropDownBaseClasses.rtl) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(this.enableRtlElements, dropDownBaseClasses.rtl);
          }
        }, {
          key: "initialize",

          /**
           * Initialize the Component.
           */
          value: function initialize() {
            this.bindEvent = true;
            this.actionFailureTemplateId = "".concat(this.element.id).concat(ACTIONFAILURETEMPLATE_PROPERTY);

            if (this.element.tagName === 'UL') {
              var jsonElement = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].createJsonFromElement(this.element);

              this.setProperties({
                fields: {
                  text: 'text',
                  value: 'text'
                }
              }, true);
              this.resetList(jsonElement, this.fields);
            } else if (this.element.tagName === 'SELECT') {
              var dataSource = this.dataSource instanceof Array ? this.dataSource.length > 0 ? true : false : !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dataSource) ? true : false;

              if (!dataSource) {
                this.renderItemsBySelect();
              }
            } else {
              this.setListData(this.dataSource, this.fields, this.query);
            }
          }
        }, {
          key: "DropDownBaseupdateBlazorTemplates",
          value: function DropDownBaseupdateBlazorTemplates(item, group, noRecord, action, value, header, footer, isEmpty) {
            if (!this.isStringTemplate) {
              if (this.itemTemplate && item) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.itemTemplateId, ITEMTEMPLATE_PROPERTY, this, isEmpty);
              }

              if (this.groupTemplate && group) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.groupTemplateId, GROUPTEMPLATE_PROPERTY, this, isEmpty);
              }

              if (this.noRecordsTemplate && noRecord) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.noRecordsTemplateId, NORECORDSTEMPLATE_PROPERTY, this, isEmpty);
              }

              if (this.actionFailureTemplate && action) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE_PROPERTY, this, isEmpty);
              }

              if (value) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.valueTemplateId, VALUETEMPLATE_PROPERTY, this, isEmpty);
              }

              if (header) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.headerTemplateId, HEADERTEMPLATE_PROPERTY, this);
              }

              if (footer) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.footerTemplateId, FOOTERTEMPLATE_PROPERTY, this);
              }
            }
          }
        }, {
          key: "DropDownBaseresetBlazorTemplates",
          value: function DropDownBaseresetBlazorTemplates(item, group, noRecord, action, value, header, footer) {
            if (!this.isStringTemplate) {
              if (this.itemTemplate && item) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.itemTemplateId, ITEMTEMPLATE_PROPERTY);
              }

              if (this.groupTemplate && group) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.groupTemplateId, GROUPTEMPLATE_PROPERTY);
              }

              if (this.noRecordsTemplate && noRecord) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.noRecordsTemplateId, NORECORDSTEMPLATE_PROPERTY);
              }

              if (this.actionFailureTemplate && action) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE_PROPERTY);
              }

              if (value) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.valueTemplateId, VALUETEMPLATE_PROPERTY);
              }

              if (header) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.headerTemplateId, HEADERTEMPLATE_PROPERTY);
              }

              if (footer) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.footerTemplateId, FOOTERTEMPLATE_PROPERTY);
              }
            }
          }
          /**
           * Get the properties to be maintained in persisted state.
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist([]);
          }
        }, {
          key: "setEnabled",

          /**
           * Sets the enabled state to DropDownBase.
           */
          value: function setEnabled() {
            this.element.setAttribute('aria-disabled', this.enabled ? 'false' : 'true');
          }
        }, {
          key: "updateDataAttribute",

          /**
           * Sets the enabled state to DropDownBase.
           */
          value: function updateDataAttribute(value) {
            var invalidAttr = ['class', 'style', 'id', 'type'];
            var attr = {};

            for (var a = 0; a < this.element.attributes.length; a++) {
              if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.getModuleName() === 'dropdownlist' && this.element.attributes[a].name === 'readonly')) {
                attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
              }
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(attr, value, attr);
            this.setProperties({
              htmlAttributes: attr
            }, true);
          }
        }, {
          key: "renderItemsBySelect",
          value: function renderItemsBySelect() {
            var element = this.element;
            var fields = {
              value: 'value',
              text: 'text'
            };
            var jsonElement = [];
            var group = element.querySelectorAll('select>optgroup');
            var option = element.querySelectorAll('select>option');
            this.getJSONfromOption(jsonElement, option, fields);

            if (group.length) {
              for (var i = 0; i < group.length; i++) {
                var item = group[i];
                var optionGroup = {};
                optionGroup[fields.text] = item.label;
                optionGroup.isHeader = true;
                var child = item.querySelectorAll('option');
                jsonElement.push(optionGroup);
                this.getJSONfromOption(jsonElement, child, fields);
              }

              var items = element.querySelectorAll('select>option');
            }

            this.fields.text = fields.text;
            this.fields.value = fields.value;
            this.resetList(jsonElement, fields);
          }
        }, {
          key: "getJSONfromOption",
          value: function getJSONfromOption(items, options, fields) {
            var _iterator66 = _createForOfIteratorHelper(options),
                _step66;

            try {
              for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {
                var option = _step66.value;
                var json = {};
                json[fields.text] = option.innerText;
                json[fields.value] = option.getAttribute(fields.value) ? option.getAttribute(fields.value) : option.innerText;
                items.push(json);
              }
            } catch (err) {
              _iterator66.e(err);
            } finally {
              _iterator66.f();
            }
          }
          /**
           * Execute before render the list items
           * @private
           */

        }, {
          key: "preRender",
          value: function preRender() {
            // there is no event handler
            this.scrollTimer = -1;
            this.enableRtlElements = [];
            this.isRequested = false;
            this.isDataFetched = false;
            this.itemTemplateId = "".concat(this.element.id).concat(ITEMTEMPLATE_PROPERTY);
            this.valueTemplateId = "".concat(this.element.id).concat(VALUETEMPLATE_PROPERTY);
            this.groupTemplateId = "".concat(this.element.id).concat(GROUPTEMPLATE_PROPERTY);
            this.headerTemplateId = "".concat(this.element.id).concat(HEADERTEMPLATE_PROPERTY);
            this.footerTemplateId = "".concat(this.element.id).concat(FOOTERTEMPLATE_PROPERTY);
            this.noRecordsTemplateId = "".concat(this.element.id).concat(NORECORDSTEMPLATE_PROPERTY);
          }
          /**
           * Creates the list items of DropDownBase component.
           */

        }, {
          key: "setListData",
          value: function setListData(dataSource, fields, query) {
            var _this144 = this;

            fields = fields ? fields : this.fields;
            var ulElement;
            this.isActive = true;
            var eventArgs = {
              cancel: false,
              data: dataSource,
              query: query
            };
            this.trigger('actionBegin', eventArgs, function (eventArgs) {
              if (!eventArgs.cancel) {
                _this144.showSpinner();

                if (dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
                  _this144.isRequested = true;

                  if (_this144.isDataFetched) {
                    _this144.emptyDataRequest(fields);

                    return;
                  }

                  eventArgs.data.executeQuery(_this144.getQuery(eventArgs.query)).then(function (e) {
                    _this144.trigger('actionComplete', e, function (e) {
                      if (!e.cancel) {
                        var listItems = e.result;

                        if (listItems.length === 0) {
                          _this144.isDataFetched = true;
                        }

                        ulElement = _this144.renderItems(listItems, fields);

                        _this144.onActionComplete(ulElement, listItems, e);

                        if (_this144.groupTemplate) {
                          _this144.renderGroupTemplate(ulElement);
                        }

                        _this144.isRequested = false;

                        _this144.bindChildItems(listItems, ulElement, fields, e);
                      }
                    });
                  })["catch"](function (e) {
                    _this144.isRequested = false;

                    _this144.onActionFailure(e);

                    _this144.hideSpinner();
                  });
                } else {
                  var dataManager = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](eventArgs.data);

                  var listItems = _this144.getQuery(eventArgs.query).executeLocal(dataManager);

                  var localDataArgs = {
                    cancel: false,
                    result: listItems
                  };

                  _this144.trigger('actionComplete', localDataArgs, function (localDataArgs) {
                    if (!localDataArgs.cancel) {
                      ulElement = _this144.renderItems(localDataArgs.result, fields);

                      _this144.onActionComplete(ulElement, localDataArgs.result);

                      if (_this144.groupTemplate) {
                        _this144.renderGroupTemplate(ulElement);
                      }

                      _this144.bindChildItems(localDataArgs.result, ulElement, fields);
                    }
                  });
                }
              }
            });
          }
        }, {
          key: "bindChildItems",
          value: function bindChildItems(listItems, ulElement, fields, e) {
            var _this145 = this;

            if (listItems.length >= 100 && this.getModuleName() === 'autocomplete') {
              setTimeout(function () {
                var childNode = _this145.remainingItems(_this145.sortedData, fields);

                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(childNode, ulElement);

                _this145.DropDownBaseupdateBlazorTemplates(true, false, false, false);

                _this145.liCollections = _this145.list.querySelectorAll('.' + dropDownBaseClasses.li);

                _this145.updateListValues();

                _this145.raiseDataBound(listItems, e);
              }, 0);
            } else {
              this.raiseDataBound(listItems, e);
            }
          }
        }, {
          key: "updateListValues",
          value: function updateListValues() {// Used this method in component side.
          }
        }, {
          key: "findListElement",
          value: function findListElement(list, findNode, attribute, value) {
            var liElement = null;

            if (list) {
              var listArr = [].slice.call(list.querySelectorAll(findNode));

              for (var index = 0; index < listArr.length; index++) {
                if (listArr[index].getAttribute(attribute) === value + '') {
                  liElement = listArr[index];
                  break;
                }
              }
            }

            return liElement;
          }
        }, {
          key: "raiseDataBound",
          value: function raiseDataBound(listItems, e) {
            this.hideSpinner();
            var dataBoundEventArgs = {
              items: listItems,
              e: e
            };
            this.trigger('dataBound', dataBoundEventArgs);
          }
        }, {
          key: "remainingItems",
          value: function remainingItems(dataSource, fields) {
            var spliceData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](dataSource).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().skip(100));

            if (this.itemTemplate) {
              var listElements = this.templateListItem(spliceData, fields);
              return [].slice.call(listElements.childNodes);
            }

            var type = this.typeOfData(spliceData)["typeof"];

            if (type === 'string' || type === 'number' || type === 'boolean') {
              return _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].createListItemFromArray(this.createElement, spliceData, true, this.listOption(spliceData, fields));
            }

            return _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].createListItemFromJson(this.createElement, spliceData, this.listOption(spliceData, fields), 1, true);
          }
        }, {
          key: "emptyDataRequest",
          value: function emptyDataRequest(fields) {
            var listItems = [];
            this.onActionComplete(this.renderItems(listItems, fields), listItems);
            this.isRequested = false;
            this.hideSpinner();
          }
        }, {
          key: "showSpinner",
          value: function showSpinner() {// Used this method in component side.
          }
        }, {
          key: "hideSpinner",
          value: function hideSpinner() {// Used this method in component side.
          }
        }, {
          key: "onActionFailure",
          value: function onActionFailure(e) {
            this.liCollections = [];
            this.trigger('actionFailure', e);
            this.l10nUpdate(true);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.list], dropDownBaseClasses.noData);
          }
        }, {
          key: "onActionComplete",
          value: function onActionComplete(ulElement, list, e) {
            this.listData = list;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && this.getModuleName() === 'listbox') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.list.querySelector('.e-list-parent'));
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.list.querySelector('.e-hidden-select'));
            } else {
              this.list.innerHTML = '';
            }

            this.fixedHeaderElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fixedHeaderElement) ? this.fixedHeaderElement : null;
            this.list.appendChild(ulElement);
            this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);
            this.ulElement = this.list.querySelector('ul');
            this.postRender(this.list, list, this.bindEvent);
          }
        }, {
          key: "postRender",
          value: function postRender(listElement, list, bindEvent) {
            var focusItem = listElement.querySelector('.' + dropDownBaseClasses.li);
            var selectedItem = listElement.querySelector('.' + dropDownBaseClasses.selected);

            if (focusItem && !selectedItem) {
              focusItem.classList.add(dropDownBaseClasses.focus);
            }

            if (list.length <= 0) {
              this.l10nUpdate();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([listElement], dropDownBaseClasses.noData);
            } else {
              listElement.classList.remove(dropDownBaseClasses.noData);
            }
          }
          /**
           * Get the query to do the data operation before list item generation.
           */

        }, {
          key: "getQuery",
          value: function getQuery(query) {
            return query ? query : this.query ? this.query : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();
          }
          /**
           * To render the template content for group header element.
           */

        }, {
          key: "renderGroupTemplate",
          value: function renderGroupTemplate(listEle) {
            if (this.fields.groupBy !== null && this.dataSource || this.element.querySelector('.' + dropDownBaseClasses.group)) {
              var dataSource = this.dataSource;
              var option = {
                groupTemplateID: this.groupTemplateId,
                isStringTemplate: this.isStringTemplate
              };
              var headerItems = listEle.querySelectorAll('.' + dropDownBaseClasses.group);
              var groupcheck = this.templateCompiler(this.groupTemplate);

              if (groupcheck) {
                var groupValue = document.querySelector(this.groupTemplate).innerHTML.trim();

                var tempHeaders = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].renderGroupTemplate(groupValue, dataSource, this.fields.properties, headerItems, option);
              } else {
                var _tempHeaders = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].renderGroupTemplate(this.groupTemplate, dataSource, this.fields.properties, headerItems, option);
              }

              this.DropDownBaseupdateBlazorTemplates(false, true, false, false, false, false, false, false);
            }
          }
          /**
           * To create the ul li list items
           */

        }, {
          key: "createListItems",
          value: function createListItems(dataSource, fields) {
            if (dataSource && fields.groupBy || this.element.querySelector('optgroup')) {
              if (fields.groupBy) {
                if (this.sortOrder !== 'None') {
                  dataSource = this.getSortedDataSource(dataSource);
                }

                dataSource = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].groupDataSource(dataSource, fields.properties, this.sortOrder);
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.list], dropDownBaseClasses.grouping);
            } else {
              dataSource = this.getSortedDataSource(dataSource);
            }

            var options = this.listOption(dataSource, fields);
            var spliceData = dataSource.length > 100 ? new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](dataSource).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().take(100)) : dataSource;
            this.sortedData = dataSource;
            return _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].createList(this.createElement, this.getModuleName() === 'autocomplete' ? spliceData : dataSource, options, true);
          }
        }, {
          key: "listOption",
          value: function listOption(dataSource, fields) {
            var iconCss = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fields.iconCss) ? false : true;
            var fieldValues = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fields.properties) ? fields.properties : fields;
            var options = fields.text !== null || fields.value !== null ? {
              fields: fieldValues,
              showIcon: iconCss,
              ariaAttributes: {
                groupItemRole: 'presentation'
              }
            } : {
              fields: {
                value: 'text'
              }
            };
            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, options, fields, true);
          }
        }, {
          key: "setFloatingHeader",
          value: function setFloatingHeader(e) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fixedHeaderElement)) {
              this.fixedHeaderElement = this.createElement('div', {
                className: dropDownBaseClasses.fixedHead
              });

              if (!this.list.querySelector('li').classList.contains(dropDownBaseClasses.group)) {
                this.fixedHeaderElement.style.display = 'none';
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.fixedHeaderElement], this.list);
              this.setFixedHeader();
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fixedHeaderElement) && this.fixedHeaderElement.style.zIndex === '0') {
              this.setFixedHeader();
            }

            this.scrollStop(e);
          }
        }, {
          key: "scrollStop",
          value: function scrollStop(e) {
            var target = e.target;
            var liHeight = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue('height'), 10);
            var topIndex = Math.round(target.scrollTop / liHeight);
            var liCollections = this.list.querySelectorAll('li');

            for (var i = topIndex; i > -1; i--) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liCollections[i]) && liCollections[i].classList.contains(dropDownBaseClasses.group)) {
                var currentLi = liCollections[i];
                this.fixedHeaderElement.innerHTML = currentLi.innerHTML;
                this.fixedHeaderElement.style.top = e.target.scrollTop + 'px';
                this.fixedHeaderElement.style.display = 'block';
                break;
              } else {
                this.fixedHeaderElement.style.display = 'none';
                this.fixedHeaderElement.style.top = 'none';
              }
            }
          }
          /**
           * To render the list items
           */

        }, {
          key: "renderItems",
          value: function renderItems(listData, fields) {
            var ulElement;

            if (this.itemTemplate && listData) {
              var dataSource = listData;

              if (dataSource && fields.groupBy) {
                if (this.sortOrder !== 'None') {
                  dataSource = this.getSortedDataSource(dataSource);
                }

                dataSource = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].groupDataSource(dataSource, fields.properties, this.sortOrder);
              } else {
                dataSource = this.getSortedDataSource(dataSource);
              }

              this.sortedData = dataSource;
              var spliceData = dataSource.length > 100 ? new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"](dataSource).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]().take(100)) : dataSource;
              ulElement = this.templateListItem(this.getModuleName() === 'autocomplete' ? spliceData : dataSource, fields);
              var isTempEmpty = this.getModuleName() === 'listbox' ? true : false;
              this.DropDownBaseupdateBlazorTemplates(true, false, false, false, false, false, false, isTempEmpty);
            } else {
              ulElement = this.createListItems(listData, fields);
            }

            return ulElement;
          }
        }, {
          key: "templateListItem",
          value: function templateListItem(dataSource, fields) {
            this.DropDownBaseresetBlazorTemplates(true, false, false, false);
            var option = this.listOption(dataSource, fields);
            option.templateID = this.itemTemplateId;
            option.isStringTemplate = this.isStringTemplate;
            var itemcheck = this.templateCompiler(this.itemTemplate);

            if (itemcheck) {
              var itemValue = document.querySelector(this.itemTemplate).innerHTML.trim();
              return _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].renderContentTemplate(this.createElement, itemValue, dataSource, fields.properties, option);
            } else {
              return _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].renderContentTemplate(this.createElement, this.itemTemplate, dataSource, fields.properties, option);
            }
          }
        }, {
          key: "typeOfData",
          value: function typeOfData(items) {
            var item = {
              "typeof": null,
              item: null
            };

            for (var i = 0; !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(items) && i < items.length; i++) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(items[i])) {
                var listDataType = typeof items[i] === 'string' || typeof items[i] === 'number' || typeof items[i] === 'boolean';
                var isNullData = listDataType ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(items[i]) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.value ? this.fields.value : 'value', items[i]));

                if (!isNullData) {
                  return item = {
                    "typeof": typeof items[i],
                    item: items[i]
                  };
                }
              }
            }

            return item;
          }
        }, {
          key: "setFixedHeader",
          value: function setFixedHeader() {
            this.list.parentElement.style.display = 'block';
            var borderWidth = 0;

            if (this.list && this.list.parentElement) {
              borderWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-width'), 10);
            }

            var liWidth = this.liCollections[0].offsetWidth - borderWidth;
            this.fixedHeaderElement.style.width = liWidth.toString() + 'px';
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.fixedHeaderElement, {
              zIndex: 10
            });
            var firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group);
            this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
          }
        }, {
          key: "getSortedDataSource",
          value: function getSortedDataSource(dataSource) {
            if (dataSource && this.sortOrder !== 'None') {
              var textField = this.fields.text ? this.fields.text : 'text';
              dataSource = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].getDataSource(dataSource, _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].addSorting(this.sortOrder, textField));
            }

            return dataSource;
          }
          /**
           * Return the index of item which matched with given value in data source
           */

        }, {
          key: "getIndexByValue",
          value: function getIndexByValue(value) {
            var index;
            var listItems = this.getItems();

            for (var i = 0; i < listItems.length; i++) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) && listItems[i].getAttribute('data-value') === value.toString()) {
                index = i;
                break;
              }
            }

            return index;
          }
        }, {
          key: "dispatchEvent",

          /**
           * To dispatch the event manually
           */
          value: function dispatchEvent(element, type) {
            var evt = document.createEvent('HTMLEvents');
            evt.initEvent(type, false, true);
            element.dispatchEvent(evt);
          }
          /**
           * To set the current fields
           */

        }, {
          key: "setFields",
          value: function setFields() {
            if (this.fields.value && !this.fields.text) {
              this.fields.text = this.fields.value;
            } else if (!this.fields.value && this.fields.text) {
              this.fields.value = this.fields.text;
            } else if (!this.fields.value && !this.fields.text) {
              this.fields.value = this.fields.text = 'text';
            }
          }
          /**
           * reset the items list.
           */

        }, {
          key: "resetList",
          value: function resetList(dataSource, fields, query) {
            if (this.list) {
              if (this.element.tagName === 'SELECT' && this.element.options.length > 0 || this.element.tagName === 'UL' && this.element.childNodes.length > 0) {
                var data = dataSource instanceof Array ? dataSource.length > 0 : !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataSource);

                if (!data && this.selectData && this.selectData.length > 0) {
                  dataSource = this.selectData;
                }
              }

              this.setListData(dataSource, fields, query);
            }
          }
        }, {
          key: "updateSelectElementData",
          value: function updateSelectElementData(isFiltering) {
            if (isFiltering && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectData) && this.listData && this.listData.length > 0) {
              this.selectData = this.listData;
            }
          }
        }, {
          key: "updateSelection",
          value: function updateSelection() {// This is for after added the item, need to update the selected index values.
          }
        }, {
          key: "renderList",
          value: function renderList() {
            // This is for render the list items.
            this.render();
          }
        }, {
          key: "updateDataSource",
          value: function updateDataSource(props) {
            this.resetList(this.dataSource);
          }
        }, {
          key: "setUpdateInitial",
          value: function setUpdateInitial(props, newProp) {
            this.isDataFetched = false;
            var updateData = {};

            for (var j = 0; props.length > j; j++) {
              if (newProp[props[j]] && props[j] === 'fields') {
                this.setFields();
              } else if (newProp[props[j]]) {
                updateData[props[j]] = newProp[props[j]];
              }
            }

            if (Object.keys(updateData).length > 0) {
              if (Object.keys(updateData).indexOf('dataSource') === -1) {
                updateData.dataSource = this.dataSource;
              }

              this.updateDataSource(updateData);
            }
          }
          /**
           * When property value changes happened, then onPropertyChanged method will execute the respective changes in this component.
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            if (this.getModuleName() === 'dropdownbase') {
              this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);
            }

            this.setUpdateInitial(['sortOrder', 'itemTemplate'], newProp);

            for (var _i79 = 0, _Object$keys21 = Object.keys(newProp); _i79 < _Object$keys21.length; _i79++) {
              var prop = _Object$keys21[_i79];

              switch (prop) {
                case 'query':
                case 'sortOrder':
                case 'dataSource':
                case 'itemTemplate':
                  break;

                case 'enableRtl':
                  this.setEnableRtl();
                  break;

                case 'enabled':
                  this.setEnabled();
                  break;

                case 'groupTemplate':
                  this.renderGroupTemplate(this.list);

                  if (this.ulElement && this.fixedHeaderElement) {
                    var firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group);
                    this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
                  }

                  break;

                case 'locale':
                  if (this.list && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.liCollections) && this.liCollections.length === 0) {
                    this.l10nUpdate();
                  }

                  break;

                case 'zIndex':
                  this.setProperties({
                    zIndex: newProp.zIndex
                  }, true);
                  this.setZIndex();
                  break;
              }
            }
          }
        }, {
          key: "render",

          /**
           * Build and render the component
           * @private
           */
          value: function render(isEmptyData) {
            this.list = this.createElement('div', {
              className: dropDownBaseClasses.content,
              attrs: {
                'tabindex': '0'
              }
            });
            this.list.classList.add(dropDownBaseClasses.root);
            this.setFields();
            var rippleModel = {
              duration: 300,
              selector: '.' + dropDownBaseClasses.li
            };
            this.rippleFun = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.list, rippleModel);
            var group = this.element.querySelector('select>optgroup');

            if ((this.fields.groupBy || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(group)) && !this.isGroupChecking) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.list, 'scroll', this.setFloatingHeader, this);
            }

            if (this.getModuleName() === 'dropdownbase') {
              if (this.element.getAttribute('tabindex')) {
                this.list.setAttribute('tabindex', this.element.getAttribute('tabindex'));
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], dropDownBaseClasses.root);
              this.element.style.display = 'none';
              var wrapperElement = this.createElement('div');
              this.element.parentElement.insertBefore(wrapperElement, this.element);
              wrapperElement.appendChild(this.element);
              wrapperElement.appendChild(this.list);
            }

            this.setEnableRtl();
            this.setEnabled();

            if (!isEmptyData) {
              this.initialize();
            }
          }
        }, {
          key: "getModuleName",

          /**
           * Return the module name of this component.
           * @private
           */
          value: function getModuleName() {
            return 'dropdownbase';
          }
        }, {
          key: "getItems",

          /**
           * Gets all the list items bound on this component.
           * @returns Element[].
           */
          value: function getItems() {
            return this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li);
          }
        }, {
          key: "addItem",

          /**
           * Adds a new item to the popup list. By default, new item appends to the list as the last item,
           * but you can insert based on the index parameter.
           * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
           * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.
           * @return {void}.
           * @deprecated
           */
          value: function addItem(items, itemIndex) {
            if (!this.list || this.list.textContent === this.noRecordsTemplate && this.getModuleName() !== 'listbox') {
              this.renderList();
            }

            if (this.sortOrder !== 'None' && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(itemIndex)) {
              var newList = [].slice.call(this.listData);
              newList.push(items);
              newList = this.getSortedDataSource(newList);

              if (this.fields.groupBy) {
                newList = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].groupDataSource(newList, this.fields.properties, this.sortOrder);
                itemIndex = newList.indexOf(items);
              } else {
                itemIndex = newList.indexOf(items);
              }
            }

            this.DropDownBaseresetBlazorTemplates(true, false, false, false);
            var itemsCount = this.getItems().length;
            var selectedItemValue = this.list.querySelector('.' + dropDownBaseClasses.selected);
            items = items instanceof Array ? items : [items];
            var index;
            index = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1 ? itemsCount : itemIndex;
            var fields = this.fields;

            if (items && fields.groupBy) {
              items = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["ListBase"].groupDataSource(items, fields.properties);
            }

            var liCollections = [];

            for (var i = 0; i < items.length; i++) {
              var item = items[i];
              var isHeader = item.isHeader;
              var li = this.createElement('li', {
                className: isHeader ? dropDownBaseClasses.group : dropDownBaseClasses.li,
                id: 'option-add-' + i
              });
              var itemText = item instanceof Object ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.text, item) : item;

              if (isHeader) {
                li.innerText = itemText;
              }

              if (this.itemTemplate && !isHeader) {
                var compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.itemTemplate);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(compiledString(item, null, null, this.itemTemplateId, this.isStringTemplate), li);
                this.DropDownBaseupdateBlazorTemplates(true, false, false, false);
              } else if (!isHeader) {
                li.appendChild(document.createTextNode(itemText));
              }

              li.setAttribute('data-value', item instanceof Object ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.value, item) : item);
              li.setAttribute('role', 'option');
              this.notify('addItem', {
                module: 'CheckBoxSelection',
                item: li
              });
              liCollections.push(li);
              this.listData.push(item);
              this.updateActionCompleteData(li, item, index); //Listbox event

              this.trigger('beforeItemRender', {
                element: li,
                item: item
              });
            }

            if (itemsCount === 0 && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list.querySelector('ul'))) {
              this.list.innerHTML = '';
              this.list.classList.remove(dropDownBaseClasses.noData);
              this.list.appendChild(this.ulElement);
              this.liCollections = liCollections;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(liCollections, this.ulElement);
              this.updateAddItemList(this.list, itemsCount);
            } else {
              if (this.getModuleName() === 'listbox' && itemsCount === 0) {
                this.ulElement.innerHTML = '';
              }

              var attr = [];

              for (var _i80 = 0; _i80 < items.length; _i80++) {
                var listGroupItem = this.ulElement.querySelectorAll('.e-list-group-item');

                for (var j = 0; j < listGroupItem.length; j++) {
                  attr[j] = listGroupItem[j].innerText;
                }

                if (attr.indexOf(liCollections[_i80].innerText) > -1 && fields.groupBy) {
                  for (var _j2 = 0; _j2 < listGroupItem.length; _j2++) {
                    if (attr[_j2] === liCollections[_i80].innerText) {
                      if (this.sortOrder === 'None') {
                        this.ulElement.insertBefore(liCollections[_i80 + 1], listGroupItem[_j2 + 1]);
                      } else {
                        this.ulElement.insertBefore(liCollections[_i80 + 1], this.ulElement.childNodes[itemIndex]);
                      }

                      _i80 = _i80 + 1;
                      break;
                    }
                  }
                } else {
                  if (this.liCollections[index]) {
                    this.liCollections[index].parentNode.insertBefore(liCollections[_i80], this.liCollections[index]);
                  } else {
                    this.ulElement.appendChild(liCollections[_i80]);
                  }
                }

                var tempLi = [].slice.call(this.liCollections);
                tempLi.splice(index, 0, liCollections[_i80]);
                this.liCollections = tempLi;
                index += 1;

                if (this.getModuleName() === 'multiselect') {
                  this.updateDataList();
                }
              }
            }

            if (selectedItemValue || itemIndex === 0) {
              this.updateSelection();
            }
          }
        }, {
          key: "validationAttribute",
          value: function validationAttribute(target, hidden) {
            var name = target.getAttribute('name') ? target.getAttribute('name') : target.getAttribute('id');
            hidden.setAttribute('name', name);
            target.removeAttribute('name');
            var attributes$$1 = ['required', 'aria-required', 'form'];

            for (var i = 0; i < attributes$$1.length; i++) {
              if (!target.getAttribute(attributes$$1[i])) {
                continue;
              }

              var attr = target.getAttribute(attributes$$1[i]);
              hidden.setAttribute(attributes$$1[i], attr);
              target.removeAttribute(attributes$$1[i]);
            }
          }
        }, {
          key: "setZIndex",
          value: function setZIndex() {// this is for component wise
          }
        }, {
          key: "updateActionCompleteData",
          value: function updateActionCompleteData(li, item, index) {// this is for ComboBox custom value
          }
        }, {
          key: "updateAddItemList",
          value: function updateAddItemList(list, itemCount) {// this is for multiselect add item
          }
        }, {
          key: "updateDataList",
          value: function updateDataList() {// this is for multiselect update list items
          }
          /**
           * Gets the data Object that matches the given value.
           * @param { string | number } value - Specifies the value of the list item.
           * @returns Object.
           * @blazorType object
           */

        }, {
          key: "getDataByValue",
          value: function getDataByValue(value) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listData)) {
              var type = this.typeOfData(this.listData)["typeof"];

              if (type === 'string' || type === 'number' || type === 'boolean') {
                var _iterator67 = _createForOfIteratorHelper(this.listData),
                    _step67;

                try {
                  for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {
                    var item = _step67.value;

                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item) && item === value) {
                      return item;
                    }
                  }
                } catch (err) {
                  _iterator67.e(err);
                } finally {
                  _iterator67.f();
                }
              } else {
                var _iterator68 = _createForOfIteratorHelper(this.listData),
                    _step68;

                try {
                  for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {
                    var _item2 = _step68.value;

                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_item2) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.value ? this.fields.value : 'value', _item2) === value) {
                      return _item2;
                    }
                  }
                } catch (err) {
                  _iterator68.e(err);
                } finally {
                  _iterator68.f();
                }
              }
            }

            return null;
          }
          /**
           * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.
           * @method destroy
           * @return {void}.
           */

        }, {
          key: "destroy",
          value: function destroy() {
            if (document.body.contains(this.list)) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.list, 'scroll', this.setFloatingHeader);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.rippleFun)) {
                this.rippleFun();
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.list);
            }

            _get2(_getPrototypeOf2(DropDownBase.prototype), "destroy", this).call(this);
          }
        }]);

        return DropDownBase;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        text: null,
        value: null,
        iconCss: null,
        groupBy: null
      }, FieldSettings)], DropDownBase.prototype, "fields", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownBase.prototype, "enablePersistence", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownBase.prototype, "itemTemplate", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownBase.prototype, "groupTemplate", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('No records found')], DropDownBase.prototype, "noRecordsTemplate", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Request failed')], DropDownBase.prototype, "actionFailureTemplate", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('None')], DropDownBase.prototype, "sortOrder", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], DropDownBase.prototype, "enabled", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], DropDownBase.prototype, "dataSource", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownBase.prototype, "query", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('StartsWith')], DropDownBase.prototype, "filterType", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], DropDownBase.prototype, "ignoreCase", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1000)], DropDownBase.prototype, "zIndex", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownBase.prototype, "ignoreAccent", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], DropDownBase.prototype, "locale", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownBase.prototype, "actionBegin", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownBase.prototype, "actionComplete", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownBase.prototype, "actionFailure", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownBase.prototype, "select", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownBase.prototype, "dataBound", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownBase.prototype, "created", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownBase.prototype, "destroyed", void 0);

      DropDownBase = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], DropDownBase);
      /**
       * export all modules from current location
       */

      var __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      }; /// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>

      /* tslint:disable */
      // don't use space in classnames 


      var dropDownListClasses = {
        root: 'e-dropdownlist',
        hover: dropDownBaseClasses.hover,
        selected: dropDownBaseClasses.selected,
        rtl: dropDownBaseClasses.rtl,
        li: dropDownBaseClasses.li,
        disable: dropDownBaseClasses.disabled,
        base: dropDownBaseClasses.root,
        focus: dropDownBaseClasses.focus,
        input: 'e-input-group',
        inputFocus: 'e-input-focus',
        icon: 'e-input-group-icon e-ddl-icon',
        iconAnimation: 'e-icon-anim',
        value: 'e-input-value',
        device: 'e-ddl-device',
        backIcon: 'e-input-group-icon e-back-icon e-icons',
        filterBarClearIcon: 'e-input-group-icon e-clear-icon e-icons',
        filterInput: 'e-input-filter',
        filterParent: 'e-filter-parent',
        mobileFilter: 'e-ddl-device-filter',
        footer: 'e-ddl-footer',
        header: 'e-ddl-header',
        clearIcon: 'e-clear-icon',
        clearIconHide: 'e-clear-icon-hide',
        popupFullScreen: 'e-popup-full-page',
        disableIcon: 'e-ddl-disable-icon',
        hiddenElement: 'e-ddl-hidden'
      };
      var inputObject = {
        container: null,
        buttons: []
      };
      /**
       * The DropDownList component contains a list of predefined values from which you can
       * choose a single value.
       * ```html
       * <input type="text" tabindex="1" id="list"> </input>
       * ```
       * ```typescript
       *   let dropDownListObj:DropDownList = new DropDownList();
       *   dropDownListObj.appendTo("#list");
       * ```
       */

      var DropDownList = /*#__PURE__*/function (_DropDownBase) {
        _inherits2(DropDownList, _DropDownBase);

        var _super53 = _createSuper(DropDownList);

        /**
         * * Constructor for creating the DropDownList component.
         */
        function DropDownList(options, element) {
          var _this146;

          _classCallCheck2(this, DropDownList);

          _this146 = _super53.call(this, options, element);
          _this146.previousValue = null;
          return _this146;
        }

        _createClass2(DropDownList, [{
          key: "preRender",

          /**
           * Initialize the event handler.
           * @private
           */
          value: function preRender() {
            var checkBlazor = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered;
            this.isServerBlazor = checkBlazor ? true : false;

            if (this.isServerBlazor) {
              this.initializeData();
            } else {
              this.element.style.opacity = '0';
              this.initializeData();

              _get2(_getPrototypeOf2(DropDownList.prototype), "preRender", this).call(this);
            }

            this.activeIndex = this.index;
            this.queryString = '';
          }
        }, {
          key: "initializeData",
          value: function initializeData() {
            this.isPopupOpen = false;
            this.isDocumentClick = false;
            this.isInteracted = false;
            this.isFilterFocus = false;
            this.beforePopupOpen = false;
            this.initial = true;
            this.initRemoteRender = false;
            this.isNotSearchList = false;
            this.isTyped = false;
            this.isSelected = false;
            this.preventFocus = false;
            this.preventAutoFill = false;
            this.isValidKey = false;
            this.typedString = '';
            this.isEscapeKey = false;
            this.isPreventBlur = false;
            this.isTabKey = false;
            this.actionCompleteData = {
              isUpdated: false
            };
            this.prevSelectPoints = {};
            this.isSelectCustom = false;
            this.isDropDownClick = false;
            this.preventAltUp = false;
            this.isCustomFilter = false;
            this.isSecondClick = false;
            this.keyConfigure = {
              tab: 'tab',
              enter: '13',
              escape: '27',
              end: '35',
              home: '36',
              down: '40',
              up: '38',
              pageUp: '33',
              pageDown: '34',
              open: 'alt+40',
              close: 'shift+tab',
              hide: 'alt+38',
              space: '32'
            };
          }
        }, {
          key: "setZIndex",
          value: function setZIndex() {
            if (this.popupObj) {
              this.popupObj.setProperties({
                'zIndex': this.zIndex
              });
            }
          }
        }, {
          key: "renderList",
          value: function renderList(isEmptyData) {
            if (!this.isServerBlazor) {
              _get2(_getPrototypeOf2(DropDownList.prototype), "render", this).call(this, isEmptyData);

              this.wireListEvents();
            } else {
              // tslint:disable-next-line
              this.interopAdaptor.invokeMethodAsync('OnServerRenderList', this.beforePopupOpen, false);
            }
          }
        }, {
          key: "floatLabelChange",
          value: function floatLabelChange() {
            if (this.getModuleName() === 'dropdownlist' && this.floatLabelType === 'Auto') {
              var floatElement = this.inputWrapper.container.querySelector('.e-float-text');

              if (this.inputElement.value !== '' || this.isInteracted) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(floatElement, ['e-label-top'], ['e-label-bottom']);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(floatElement, ['e-label-bottom'], ['e-label-top']);
              }
            }
          }
        }, {
          key: "resetHandler",
          value: function resetHandler(e) {
            e.preventDefault();
            this.clearAll(e);
          }
        }, {
          key: "resetFocusElement",
          value: function resetFocusElement() {
            this.removeHover();
            this.removeSelection();
            this.removeFocus();
            this.list.scrollTop = 0;

            if (this.getModuleName() !== 'autocomplete' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ulElement)) {
              var li = this.ulElement.querySelector('.' + dropDownListClasses.li);

              if (li) {
                li.classList.add(dropDownListClasses.focus);
              }
            }
          }
        }, {
          key: "clearAll",
          value: function clearAll(e, properties) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(properties) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(properties) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(properties.dataSource) || !(properties.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) && properties.dataSource.length === 0)) {
              this.isActive = true;
              this.resetSelection(properties);
            }

            var dataItem = this.getItemData();

            if (this.previousValue === dataItem.value) {
              return;
            }

            this.onChangeEvent(e);
          }
        }, {
          key: "resetSelection",
          value: function resetSelection(properties) {
            if (this.list) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(properties) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(properties.dataSource) || !(properties.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) && properties.dataSource.length === 0)) {
                this.selectedLI = null;
                this.actionCompleteData.isUpdated = false;
                this.actionCompleteData.ulElement = null;
                this.actionCompleteData.list = null;
                this.resetList(properties.dataSource);
              } else {
                if (this.allowFiltering && this.getModuleName() !== 'autocomplete' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.actionCompleteData.ulElement) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.actionCompleteData.list)) {
                  var actionList = this.actionCompleteData.ulElement.querySelector('li');
                  var ulElement = this.ulElement && this.ulElement.querySelector('li');

                  if (this.element.tagName === 'EJS-COMBOBOX' && actionList && ulElement && actionList.childElementCount > 0 && ulElement.childElementCount > 0 && actionList.textContent !== ulElement.textContent && this.itemTemplate) {
                    this.cloneElements();
                  }

                  this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(true), this.actionCompleteData.list);
                }

                this.resetFocusElement();
              }
            }

            if (!this.isServerBlazor) {
              this.hiddenElement.innerHTML = '';
            }

            this.inputElement.value = '';
            this.value = null;
            this.itemData = null;
            this.text = null;
            this.index = null;
            this.activeIndex = null;
            this.item = null;
            this.queryString = '';

            if (this.valueTempElement) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.valueTempElement);
              this.inputElement.style.display = 'block';
              this.valueTempElement = null;
            }

            this.setSelection(null, null);
            this.isSelectCustom = false;
            this.updateIconState();
            this.cloneElements();
          }
        }, {
          key: "setHTMLAttributes",
          value: function setHTMLAttributes() {
            if (Object.keys(this.htmlAttributes).length) {
              for (var _i81 = 0, _Object$keys22 = Object.keys(this.htmlAttributes); _i81 < _Object$keys22.length; _i81++) {
                var htmlAttr = _Object$keys22[_i81];

                if (htmlAttr === 'class') {
                  var updatedClassValue = this.htmlAttributes[htmlAttr].replace(/\s+/g, ' ').trim();

                  if (updatedClassValue !== '') {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper.container], updatedClassValue.split(' '));
                  }
                } else if (htmlAttr === 'disabled' && this.htmlAttributes[htmlAttr] === 'disabled') {
                  this.enabled = false;
                  this.setEnable();
                } else if (htmlAttr === 'readonly' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes[htmlAttr])) {
                  this.readonly = true;
                  this.dataBind();
                } else if (htmlAttr === 'style') {
                  this.inputWrapper.container.setAttribute('style', this.htmlAttributes[htmlAttr]);
                } else {
                  var defaultAttr = ['title', 'id', 'placeholder', 'aria-placeholder', 'role', 'autocorrect', 'autocomplete', 'autocapitalize', 'spellcheck', 'minlength', 'maxlength'];
                  var validateAttr = ['name', 'required'];

                  if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {
                    defaultAttr.push('tabindex');
                  }

                  if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {
                    this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                  } else if (defaultAttr.indexOf(htmlAttr) > -1) {
                    htmlAttr === 'placeholder' ? _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setPlaceholder(this.htmlAttributes[htmlAttr], this.inputElement) : this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                  } else {
                    this.inputWrapper.container.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                  }
                }
              }
            }

            if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {
              this.inputWrapper.container.removeAttribute('tabindex');
            }
          }
        }, {
          key: "getAriaAttributes",
          value: function getAriaAttributes() {
            return {
              'aria-disabled': 'false',
              'aria-owns': this.element.id + '_options',
              'role': 'listbox',
              'aria-haspopup': 'true',
              'aria-expanded': 'false',
              'aria-activedescendant': 'null',
              'aria-live': 'polite',
              'aria-labelledby': this.hiddenElement.id
            };
          }
        }, {
          key: "setEnableRtl",
          value: function setEnableRtl() {
            _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setEnableRtl(this.enableRtl, [this.inputElement.parentElement]);

            if (this.popupObj) {
              this.popupObj.enableRtl = this.enableRtl;
              this.popupObj.dataBind();
            }
          }
        }, {
          key: "setEnable",
          value: function setEnable() {
            _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setEnabled(this.enabled, this.inputElement);

            if (this.enabled) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper.container], dropDownListClasses.disable);
              this.inputElement.setAttribute('aria-disabled', 'false');
              this.targetElement().setAttribute('tabindex', this.tabIndex);
            } else {
              this.hidePopup();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper.container], dropDownListClasses.disable);
              this.inputElement.setAttribute('aria-disabled', 'true');
              this.targetElement().tabIndex = -1;
            }
          }
          /**
           * Get the properties to be maintained in the persisted state.
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist(['value']);
          }
        }, {
          key: "getLocaleName",
          value: function getLocaleName() {
            return 'drop-down-list';
          }
        }, {
          key: "preventTabIndex",
          value: function preventTabIndex(element) {
            if (this.getModuleName() === 'dropdownlist') {
              element.tabIndex = -1;
            }
          }
        }, {
          key: "targetElement",
          value: function targetElement() {
            return this.inputWrapper.container;
          }
        }, {
          key: "getNgDirective",
          value: function getNgDirective() {
            return 'EJS-DROPDOWNLIST';
          }
        }, {
          key: "getElementByText",
          value: function getElementByText(text) {
            return this.getElementByValue(this.getValueByText(text));
          }
        }, {
          key: "getElementByValue",
          value: function getElementByValue(value) {
            var item;
            var listItems = this.getItems();

            var _iterator69 = _createForOfIteratorHelper(listItems),
                _step69;

            try {
              for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {
                var liItem = _step69.value;

                if (this.getFormattedValue(liItem.getAttribute('data-value')) === value) {
                  item = liItem;
                  break;
                }
              }
            } catch (err) {
              _iterator69.e(err);
            } finally {
              _iterator69.f();
            }

            return item;
          }
        }, {
          key: "initValue",
          value: function initValue() {
            this.renderList();

            if (this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
              this.initRemoteRender = true;
            } else {
              this.updateValues();
            }
          }
        }, {
          key: "updateValues",
          value: function updateValues() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
              this.setSelection(this.getElementByValue(this.value), null);
            } else if (this.text && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
              var element = this.getElementByText(this.text);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element)) {
                this.setProperties({
                  text: null
                });
                return;
              } else {
                this.setSelection(element, null);
              }
            } else {
              this.setSelection(this.liCollections[this.activeIndex], null);
            }

            this.setHiddenValue();

            _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
          }
        }, {
          key: "onBlur",
          value: function onBlur(e) {
            if (!this.enabled) {
              return;
            }

            var target = e.relatedTarget;
            var currentTarget = e.target;
            var isPreventBlur = this.isPreventBlur;
            this.isPreventBlur = false; //IE 11 - issue

            if (isPreventBlur && !this.isDocumentClick && this.isPopupOpen && (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(currentTarget) || !this.isFilterLayout() && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target))) {
              if (this.getModuleName() === 'dropdownlist' && this.allowFiltering && this.isPopupOpen) {
                this.filterInput.focus();
              } else {
                this.targetElement().focus();
              }

              return;
            }

            if (this.isDocumentClick || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popupObj) && document.body.contains(this.popupObj.element) && this.popupObj.element.classList.contains(dropDownListClasses.mobileFilter)) {
              if (!this.beforePopupOpen) {
                this.isDocumentClick = false;
              }

              return;
            }

            if (this.getModuleName() === 'dropdownlist' && !this.isFilterFocus && target !== this.inputElement && (document.activeElement !== target || document.activeElement === target && currentTarget.classList.contains(dropDownListClasses.inputFocus)) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target) && this.getModuleName() === 'dropdownlist' && this.allowFiltering && currentTarget !== this.inputWrapper.container || this.getModuleName() !== 'dropdownlist' && !this.inputWrapper.container.contains(target) || this.isTabKey) {
              this.isDocumentClick = this.isPopupOpen ? true : false;
              this.focusOutAction(e);
              this.isTabKey = false;
            }

            if (this.isRequested && !this.isPopupOpen && !this.isPreventBlur) {
              this.isActive = false;
              this.beforePopupOpen = false;
            }
          }
        }, {
          key: "focusOutAction",
          value: function focusOutAction(e) {
            this.isInteracted = false;
            this.focusOut(e);
            this.onFocusOut();
          }
        }, {
          key: "onFocusOut",
          value: function onFocusOut() {
            if (!this.enabled) {
              return;
            }

            if (this.isSelected) {
              this.isSelectCustom = false;
              this.onChangeEvent(null);
            }

            this.floatLabelChange();
            this.dispatchEvent(this.hiddenElement, 'change');

            if (this.getModuleName() === 'dropdownlist' && this.element.tagName !== 'INPUT') {
              this.dispatchEvent(this.inputElement, 'blur');
            }

            if (this.inputWrapper.clearButton) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
            }

            this.trigger('blur');
          }
        }, {
          key: "onFocus",
          value: function onFocus(e) {
            if (!this.isInteracted) {
              this.isInteracted = true;
              var args = {
                isInteracted: e ? true : false,
                event: e
              };
              this.trigger('focus', args);
            }

            this.updateIconState();
          }
        }, {
          key: "resetValueHandler",
          value: function resetValueHandler(e) {
            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.inputElement, 'form');

            if (formElement && e.target === formElement) {
              var val = this.element.tagName === this.getNgDirective() ? null : this.inputElement.getAttribute('value');
              this.text = val;
            }
          }
        }, {
          key: "wireEvent",
          value: function wireEvent() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper.container, 'mousedown', this.dropDownClick, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper.container, 'focus', this.focusIn, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper.container, 'keypress', this.onSearch, this);

            this.bindCommonEvent();
          }
        }, {
          key: "bindCommonEvent",
          value: function bindCommonEvent() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.targetElement(), 'blur', this.onBlur, this);

            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.inputElement, 'form');

            if (formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(formElement, 'reset', this.resetValueHandler, this);
            }

            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.targetElement(), {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigure,
                eventName: 'keydown'
              });
            } else {
              this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.targetElement(), {
                keyAction: this.mobileKeyActionHandler.bind(this),
                keyConfigs: this.keyConfigure,
                eventName: 'keydown'
              });
            }

            this.bindClearEvent();
          }
        }, {
          key: "bindClearEvent",
          value: function bindClearEvent() {
            if (this.showClearButton) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper.clearButton, 'mousedown', this.resetHandler, this);
            }
          }
        }, {
          key: "unBindCommonEvent",
          value: function unBindCommonEvent() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.targetElement(), 'blur', this.onBlur);

            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.inputElement, 'form');

            if (formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(formElement, 'reset', this.resetValueHandler);
            }

            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              this.keyboardModule.destroy();
            }

            if (this.showClearButton) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputWrapper.clearButton, 'mousedown', this.resetHandler);
            }
          }
        }, {
          key: "updateIconState",
          value: function updateIconState() {
            if (this.showClearButton) {
              if (this.inputElement.value !== '' && !this.readonly) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
              }
            }
          }
          /**
           * Event binding for list
           */

        }, {
          key: "wireListEvents",
          value: function wireListEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.list, 'click', this.onMouseClick, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.list, 'mouseover', this.onMouseOver, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.list, 'mouseout', this.onMouseLeave, this);
          }
        }, {
          key: "onSearch",
          value: function onSearch(e) {
            if (e.charCode !== 32 && e.charCode !== 13) {
              if (this.list === undefined) {
                if (!this.isServerBlazor) {
                  this.renderList();
                } else {
                  this.isServerIncrementalSearch = true; // tslint:disable-next-line

                  this.interopAdaptor.invokeMethodAsync('OnServerRenderList', true, false);
                }
              }

              this.searchKeyEvent = e;
              this.onServerIncrementalSearch(e);
            }
          }
        }, {
          key: "onServerIncrementalSearch",
          value: function onServerIncrementalSearch(e) {
            if (!this.isRequested && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list.querySelector('li')) && this.enabled && !this.readonly) {
              this.incrementalSearch(e);
            }
          }
        }, {
          key: "onMouseClick",
          value: function onMouseClick(e) {
            var target = e.target;
            var classList$$1 = target.classList;
            var li = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + dropDownBaseClasses.li);

            if (!this.isValidLI(li)) {
              return;
            }

            this.setSelection(li, e);

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.isFilterLayout()) {
              history.back();
            } else {
              var delay = 100;
              this.closePopup(delay);
            }
          }
        }, {
          key: "onMouseOver",
          value: function onMouseOver(e) {
            var currentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + dropDownBaseClasses.li);
            this.setHover(currentLi);
          }
        }, {
          key: "setHover",
          value: function setHover(li) {
            if (this.enabled && this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {
              this.removeHover();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([li], dropDownBaseClasses.hover);
            }
          }
        }, {
          key: "onMouseLeave",
          value: function onMouseLeave(e) {
            this.removeHover();
          }
        }, {
          key: "removeHover",
          value: function removeHover() {
            if (this.list) {
              var hoveredItem = this.isServerBlazor && this.popupObj && this.popupObj.element ? this.popupObj.element.querySelectorAll('.' + dropDownBaseClasses.hover) : this.list.querySelectorAll('.' + dropDownBaseClasses.hover);

              if (hoveredItem && hoveredItem.length) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(hoveredItem, dropDownBaseClasses.hover);
              }
            }
          }
        }, {
          key: "isValidLI",
          value: function isValidLI(li) {
            return li && li.hasAttribute('role') && li.getAttribute('role') === 'option';
          }
        }, {
          key: "incrementalSearch",
          value: function incrementalSearch(e) {
            if (this.liCollections.length > 0) {
              var li = _incrementalSearch(e.charCode, this.liCollections, this.activeIndex, true, this.element.id, this.isServerBlazor);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
                this.setSelection(li, e);
                this.setScrollPosition();
              }
            }
          }
        }, {
          key: "hideSpinner",

          /**
           * Hides the spinner loader.
           * @returns void.
           */
          value: function hideSpinner() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.spinnerElement)) {
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["hideSpinner"])(this.spinnerElement);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.spinnerElement], dropDownListClasses.disableIcon);
              this.spinnerElement.innerHTML = '';
              this.spinnerElement = null;
            }
          }
          /**
           * Shows the spinner loader.
           * @returns void.
           */

        }, {
          key: "showSpinner",
          value: function showSpinner() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.spinnerElement)) {
              this.spinnerElement = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.filterInputObj) && this.filterInputObj.buttons[1] || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.filterInputObj) && this.filterInputObj.buttons[0] || this.inputWrapper.buttons[0];
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.spinnerElement], dropDownListClasses.disableIcon);
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["createSpinner"])({
                target: this.spinnerElement,
                width: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? '16px' : '14px'
              }, this.createElement);
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["showSpinner"])(this.spinnerElement);
            }
          }
        }, {
          key: "keyActionHandler",
          value: function keyActionHandler(e) {
            if (!this.enabled) {
              return;
            }

            var preventAction = e.action === 'pageUp' || e.action === 'pageDown';
            var preventHomeEnd = this.getModuleName() !== 'dropdownlist' && (e.action === 'home' || e.action === 'end');
            this.isEscapeKey = e.action === 'escape';
            this.isTabKey = !this.isPopupOpen && e.action === 'tab';
            var isNavAction = e.action === 'down' || e.action === 'up' || e.action === 'home' || e.action === 'end';
            var isNavigation = e.action === 'down' || e.action === 'up' || e.action === 'pageUp' || e.action === 'pageDown' || e.action === 'home' || e.action === 'end';

            if ((this.isEditTextBox() || preventAction || preventHomeEnd) && !this.isPopupOpen) {
              return;
            }

            if (!this.readonly) {
              var isTabAction = e.action === 'tab' || e.action === 'close';

              if (this.list === undefined && !this.isRequested && !isTabAction && e.action !== 'escape') {
                this.searchKeyEvent = e;
                this.renderList();
              }

              if (!(this.isServerBlazor && (e.action === 'open' || e.action === 'space')) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.liCollections) && isNavigation && this.liCollections.length === 0 || this.isRequested) {
                if (!(this.isServerBlazor && isNavAction)) {
                  return;
                }
              }

              if (isTabAction && this.getModuleName() !== 'autocomplete' && this.isPopupOpen || e.action === 'escape') {
                e.preventDefault();
              }

              this.isSelected = e.action === 'escape' ? false : this.isSelected;
              this.isTyped = isNavigation || e.action === 'escape' ? false : this.isTyped;

              switch (e.action) {
                case 'down':
                case 'up':
                  this.updateUpDownAction(e);
                  break;

                case 'pageUp':
                  this.pageUpSelection(this.activeIndex - this.getPageCount(), e);
                  e.preventDefault();
                  break;

                case 'pageDown':
                  this.pageDownSelection(this.activeIndex + this.getPageCount(), e);
                  e.preventDefault();
                  break;

                case 'home':
                  this.updateHomeEndAction(e);
                  break;

                case 'end':
                  this.updateHomeEndAction(e);
                  break;

                case 'space':
                  if (this.getModuleName() === 'dropdownlist') {
                    if (!this.beforePopupOpen) {
                      this.showPopup();
                    }
                  }

                  break;

                case 'open':
                  this.showPopup();
                  break;

                case 'hide':
                  this.preventAltUp = this.isPopupOpen;
                  this.hidePopup(e);
                  this.focusDropDown(e);
                  break;

                case 'enter':
                  this.selectCurrentItem(e);
                  break;

                case 'tab':
                  this.selectCurrentValueOnTab(e);
                  break;

                case 'escape':
                case 'close':
                  if (this.isPopupOpen) {
                    this.hidePopup(e);
                    this.focusDropDown(e);
                  }

                  break;
              }
            }
          }
        }, {
          key: "updateUpDownAction",
          value: function updateUpDownAction(e) {
            if (this.isServerBlazor && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list)) {
              this.isServerNavigation = true; // tslint:disable-next-line

              this.interopAdaptor.invokeMethodAsync('OnServerRenderList', true, false);
            } else {
              this.isServerNavigation = false;
              var focusEle = this.list.querySelector('.' + dropDownListClasses.focus);

              if (this.isSelectFocusItem(focusEle)) {
                this.setSelection(focusEle, e);
              } else {
                var nextItem;
                var index = e.action === 'down' ? this.activeIndex + 1 : this.activeIndex - 1;
                var startIndex = 0;

                if (this.getModuleName() === 'autocomplete') {
                  startIndex = e.action === 'down' && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.activeIndex) ? 0 : this.liCollections.length - 1;
                  index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;
                }

                nextItem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(nextItem)) {
                  this.setSelection(nextItem, e);
                }
              }

              e.preventDefault();
            }
          }
        }, {
          key: "updateHomeEndAction",
          value: function updateHomeEndAction(e) {
            if (this.getModuleName() === 'dropdownlist') {
              if (this.isServerBlazor && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list)) {
                this.isServerNavigation = true; // tslint:disable-next-line

                this.interopAdaptor.invokeMethodAsync('OnServerRenderList', true, false);
              } else {
                this.isServerNavigation = false;
                var findLi = 0;

                if (e.action === 'home') {
                  findLi = 0;
                } else {
                  findLi = this.getItems().length - 1;
                }

                e.preventDefault();

                if (this.activeIndex === findLi) {
                  return;
                }

                this.setSelection(this.liCollections[findLi], e);
              }
            }
          }
        }, {
          key: "selectCurrentValueOnTab",
          value: function selectCurrentValueOnTab(e) {
            if (this.getModuleName() === 'autocomplete') {
              this.selectCurrentItem(e);
            } else {
              if (this.isPopupOpen) {
                this.hidePopup(e);
                this.focusDropDown(e);
              }
            }
          }
        }, {
          key: "mobileKeyActionHandler",
          value: function mobileKeyActionHandler(e) {
            if (!this.enabled) {
              return;
            }

            if (this.isEditTextBox() && !this.isPopupOpen) {
              return;
            }

            if (!this.readonly) {
              if (this.list === undefined && !this.isRequested) {
                this.searchKeyEvent = e;
                this.renderList();
              }

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.liCollections) && this.liCollections.length === 0 || this.isRequested) {
                return;
              }

              if (e.action === 'enter') {
                this.selectCurrentItem(e);
              }
            }
          }
        }, {
          key: "selectCurrentItem",
          value: function selectCurrentItem(e) {
            if (this.isPopupOpen) {
              var li = this.list.querySelector('.' + dropDownListClasses.focus);

              if (li) {
                this.setSelection(li, e);
                this.isTyped = false;
              }

              if (this.isSelected) {
                this.isSelectCustom = false;
                this.onChangeEvent(e);
              }

              this.hidePopup();
              this.focusDropDown(e);
            } else {
              this.showPopup();
            }
          }
        }, {
          key: "isSelectFocusItem",
          value: function isSelectFocusItem(element) {
            return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element);
          }
        }, {
          key: "getPageCount",
          value: function getPageCount() {
            var liHeight = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue('height');
            return Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));
          }
        }, {
          key: "pageUpSelection",
          value: function pageUpSelection(steps, event) {
            var previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];
            this.setSelection(previousItem, event);
          }
        }, {
          key: "pageDownSelection",
          value: function pageDownSelection(steps, event) {
            var list = this.getItems();
            var previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];
            this.setSelection(previousItem, event);
          }
        }, {
          key: "unWireEvent",
          value: function unWireEvent() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputWrapper.container, 'mousedown', this.dropDownClick);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputWrapper.container, 'keypress', this.onSearch);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputWrapper.container, 'focus', this.focusIn);

            this.unBindCommonEvent();
          }
          /**
           * Event un binding for list items.
           */

        }, {
          key: "unWireListEvents",
          value: function unWireListEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.list, 'click', this.onMouseClick);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.list, 'mouseover', this.onMouseOver);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.list, 'mouseout', this.onMouseLeave);
          }
        }, {
          key: "checkSelector",
          value: function checkSelector(id) {
            return '#' + id.replace(/(:|\.|\[|\]|,|=|@|\\|\/|#)/g, '\\$1');
          }
        }, {
          key: "onDocumentClick",
          value: function onDocumentClick(e) {
            var target = e.target;

            if (!(!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popupObj) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, this.checkSelector(this.popupObj.element.id))) && !this.inputWrapper.container.contains(e.target)) {
              if (this.inputWrapper.container.classList.contains(dropDownListClasses.inputFocus) || this.isPopupOpen) {
                this.isDocumentClick = true;
                var isActive = this.isRequested;
                this.isInteracted = false;
                this.hidePopup(e);

                if (!isActive) {
                  this.onFocusOut();
                  this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);
                }
              }
            } else if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && !(this.getModuleName() === 'combobox' && !this.allowFiltering && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && target === this.inputWrapper.buttons[0])) {
              this.isPreventBlur = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'edge') && (document.activeElement === this.targetElement() || document.activeElement === this.filterInput);
              e.preventDefault();
            }
          }
        }, {
          key: "activeStateChange",
          value: function activeStateChange() {
            if (this.isDocumentClick) {
              this.hidePopup();
              this.onFocusOut();
              this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);
            }
          }
        }, {
          key: "focusDropDown",
          value: function focusDropDown(e) {
            if (!this.initial && this.isFilterLayout()) {
              this.focusIn(e);
            }
          }
        }, {
          key: "dropDownClick",
          value: function dropDownClick(e) {
            if (e.which === 3 || e.button === 2) {
              return;
            }

            if (this.targetElement().classList.contains(dropDownListClasses.disable) || this.inputWrapper.clearButton === e.target) {
              return;
            }

            var target = e.target;

            if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && this.getModuleName() !== 'combobox') {
              e.preventDefault();
            }

            if (!this.readonly) {
              if (this.isPopupOpen) {
                this.hidePopup();

                if (this.isFilterLayout()) {
                  this.focusDropDown(e);
                }
              } else {
                this.focusIn(e);
                this.floatLabelChange();
                this.queryString = this.inputElement.value.trim() === '' ? null : this.inputElement.value;
                this.isDropDownClick = true;
                this.showPopup();
              }

              var proxy = this;
              var duration = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() ? 1000 : this.element.tagName === this.getNgDirective() && this.itemTemplate ? 500 : 100;

              if (!this.isSecondClick) {
                setTimeout(function () {
                  proxy.cloneElements();
                  proxy.isSecondClick = true;
                }, duration);
              }
            } else {
              this.focusIn(e);
            }
          }
        }, {
          key: "cloneElements",
          value: function cloneElements() {
            if (this.list) {
              var ulElement = this.list.querySelector('ul');

              if (ulElement) {
                ulElement = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
                this.actionCompleteData.ulElement = ulElement;
              }
            }
          }
        }, {
          key: "updateSelectedItem",
          value: function updateSelectedItem(li, e, preventSelect, isSelection) {
            var _this147 = this;

            this.removeSelection();
            li.classList.add(dropDownBaseClasses.selected);
            this.removeHover();
            var value = this.getFormattedValue(li.getAttribute('data-value'));
            var selectedData = this.getDataByValue(value);

            if (!this.initial && !preventSelect && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)) {
              var items = this.detachChanges(selectedData);
              this.isSelected = true;
              var eventArgs = {
                e: e,
                item: li,
                itemData: items,
                isInteracted: e ? true : false,
                cancel: false
              };
              this.trigger('select', eventArgs, function (eventArgs) {
                if (eventArgs.cancel) {
                  li.classList.remove(dropDownBaseClasses.selected);
                } else {
                  _this147.selectEventCallback(li, e, preventSelect, selectedData, value);

                  if (_this147.isServerBlazor) {
                    // tslint:disable-next-line
                    _this147.interopAdaptor.invokeMethodAsync('OnServerItemData', _this147.itemData);
                  }

                  if (isSelection) {
                    _this147.setSelectOptions(li, e);
                  }
                }
              });
            } else {
              this.selectEventCallback(li, e, preventSelect, selectedData, value);

              if (this.isServerBlazor) {
                // tslint:disable-next-line
                this.interopAdaptor.invokeMethodAsync('OnServerItemData', this.itemData);
              }

              if (isSelection) {
                this.setSelectOptions(li, e);
              }
            }
          }
        }, {
          key: "selectEventCallback",
          value: function selectEventCallback(li, e, preventSelect, selectedData, value) {
            this.previousItemData = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.itemData) ? this.itemData : null;
            this.item = li;
            this.itemData = selectedData;
            var focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);

            if (focusedItem) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([focusedItem], dropDownBaseClasses.focus);
            }

            li.setAttribute('aria-selected', 'true');
            this.activeIndex = this.getIndexByValue(value);
          }
        }, {
          key: "activeItem",
          value: function activeItem(li) {
            if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.selected)) {
              this.removeSelection();
              li.classList.add(dropDownBaseClasses.selected);
              this.removeHover();
              li.setAttribute('aria-selected', 'true');
            }
          }
        }, {
          key: "setValue",
          value: function setValue(e) {
            var dataItem = this.getItemData();

            if (dataItem.value === null) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && dataItem.text !== null || dataItem.text !== '') {
                _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);
              } else {
                _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(null, this.inputElement, this.floatLabelType, this.showClearButton);
              }
            } else {
              _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);
            }

            if (this.isServerBlazor) {
              // tslint:disable-next-line
              this.interopAdaptor.invokeMethodAsync('OnServerValueTemplate', dataItem);
            }

            if (this.valueTemplate && this.itemData !== null && !this.isServerBlazor) {
              this.DropDownBaseresetBlazorTemplates(false, false, false, false, true);
              this.setValueTemplate();
            } else if (this.inputElement.previousSibling === this.valueTempElement) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.valueTempElement);
              this.inputElement.style.display = 'block';
            }

            if (this.previousValue === dataItem.value) {
              this.isSelected = false;
              return true;
            } else {
              this.isSelected = !this.initial ? true : false;
              this.isSelectCustom = false;

              if (this.getModuleName() === 'dropdownlist') {
                this.updateIconState();
              }

              return false;
            }
          }
        }, {
          key: "setSelection",
          value: function setSelection(li, e) {
            if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || this.isPopupOpen && this.isSelected && li.classList.contains(dropDownBaseClasses.selected))) {
              this.updateSelectedItem(li, e, false, true);
            } else {
              this.setSelectOptions(li, e);
            }
          }
        }, {
          key: "setSelectOptions",
          value: function setSelectOptions(li, e) {
            if (this.list) {
              this.removeHover();
            }

            this.previousSelectedLI = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectedLI) ? this.selectedLI : null;
            this.selectedLI = li;

            if (this.setValue(e)) {
              return;
            }

            if (this.isPopupOpen) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.targetElement(), {
                'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null
              });

              if (this.isFilterLayout() && this.filterInput) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.filterInput, {
                  'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null
                });
              }
            }

            if (!this.isPopupOpen && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li) || this.isPopupOpen && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) && (e.type !== 'keydown' || e.type === 'keydown' && e.action === 'enter')) {
              this.isSelectCustom = false;
              this.onChangeEvent(e);
            }

            if (this.isPopupOpen && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectedLI) && this.itemData !== null && (!e || e.type !== 'click')) {
              this.setScrollPosition(e);
            }

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name !== 'mozilla') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.inputElement, {
                'aria-label': this.inputElement.value
              });
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.targetElement(), {
                'aria-describedby': this.inputElement.id
              });
              this.targetElement().removeAttribute('aria-live');
            }
          }
        }, {
          key: "dropdownCompiler",
          value: function dropdownCompiler(dropdownTemplate) {
            var checkTemplate = false;

            if (dropdownTemplate) {
              try {
                checkTemplate = document.querySelectorAll(dropdownTemplate).length ? true : false;
              } catch (exception) {
                checkTemplate = false;
              }
            }

            return checkTemplate;
          }
        }, {
          key: "setValueTemplate",
          value: function setValueTemplate() {
            var compiledString;

            if (!this.valueTempElement) {
              this.valueTempElement = this.createElement('span', {
                className: dropDownListClasses.value
              });
              this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement);
              this.inputElement.style.display = 'none';
            }

            this.valueTempElement.innerHTML = '';
            var templateData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() ? JSON.parse(JSON.stringify(this.itemData)) : this.itemData;
            var valuecheck = this.dropdownCompiler(this.valueTemplate);

            if (valuecheck) {
              compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(this.valueTemplate).innerHTML.trim());
            } else {
              compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.valueTemplate);
            }

            var _iterator70 = _createForOfIteratorHelper(compiledString(templateData, null, null, this.valueTemplateId, this.isStringTemplate)),
                _step70;

            try {
              for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {
                var item = _step70.value;
                this.valueTempElement.appendChild(item);
              }
            } catch (err) {
              _iterator70.e(err);
            } finally {
              _iterator70.f();
            }

            this.DropDownBaseupdateBlazorTemplates(false, false, false, false, true, true, true);
          }
        }, {
          key: "removeSelection",
          value: function removeSelection() {
            if (this.list) {
              var selectedItems = this.list.querySelectorAll('.' + dropDownBaseClasses.selected);

              if (selectedItems.length) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(selectedItems, dropDownBaseClasses.selected);
                selectedItems[0].removeAttribute('aria-selected');
              }
            }
          }
        }, {
          key: "getItemData",
          value: function getItemData() {
            var fields = this.fields;
            var dataItem = null;
            dataItem = this.itemData;
            var dataValue;
            var dataText;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataItem)) {
              dataValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.value, dataItem);
              dataText = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.text, dataItem);
            }

            var value = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataItem) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(dataValue) ? dataValue : dataItem;
            var text = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataItem) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(dataValue) ? dataText : dataItem;
            return {
              value: value,
              text: text
            };
          }
          /**
           * To trigger the change event for list.
           */

        }, {
          key: "onChangeEvent",
          value: function onChangeEvent(eve) {
            var dataItem = this.getItemData();
            var index = this.isSelectCustom ? null : this.activeIndex;
            this.setProperties({
              'index': index,
              'text': dataItem.text,
              'value': dataItem.value
            }, true);
            this.detachChangeEvent(eve);
          }
        }, {
          key: "detachChanges",
          value: function detachChanges(value) {
            var items;

            if (typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number') {
              items = Object.defineProperties({}, {
                value: {
                  value: value,
                  enumerable: true
                },
                text: {
                  value: value,
                  enumerable: true
                }
              });
            } else {
              items = value;
            }

            return items;
          }
        }, {
          key: "detachChangeEvent",
          value: function detachChangeEvent(eve) {
            this.isSelected = false;
            this.previousValue = this.value;
            this.activeIndex = this.index;
            this.typedString = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.text) ? this.text : '';

            if (!this.initial) {
              var items = this.detachChanges(this.itemData);
              var preItems;

              if (typeof this.previousItemData === 'string' || typeof this.previousItemData === 'boolean' || typeof this.previousItemData === 'number') {
                preItems = Object.defineProperties({}, {
                  value: {
                    value: this.previousItemData,
                    enumerable: true
                  },
                  text: {
                    value: this.previousItemData,
                    enumerable: true
                  }
                });
              } else {
                preItems = this.previousItemData;
              }

              this.setHiddenValue();
              var eventArgs = {
                e: eve,
                item: this.item,
                itemData: items,
                previousItem: this.previousSelectedLI,
                previousItemData: preItems,
                isInteracted: eve ? true : false,
                value: this.value,
                element: this.element
              };
              this.trigger('change', eventArgs);

              if (this.isServerBlazor && this.enablePersistence) {
                // tslint:disable-next-line
                this.interopAdaptor.invokeMethodAsync('ServerChange');
              }
            }

            if ((Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) || this.value === '') && this.floatLabelType !== 'Always') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper.container], 'e-valid-input');
            }
          }
        }, {
          key: "setHiddenValue",
          value: function setHiddenValue() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
              if (this.isServerBlazor && this.hiddenElement.querySelector('option')) {
                var selectedElement = this.hiddenElement.querySelector('option');
                selectedElement.textContent = this.text;
                selectedElement.setAttribute('value', this.value.toString());
              } else if (!this.isServerBlazor) {
                this.hiddenElement.innerHTML = '<option selected>' + this.text + '</option>';

                var _selectedElement = this.hiddenElement.querySelector('option');

                _selectedElement.setAttribute('value', this.value.toString());
              }
            } else if (!this.isServerBlazor) {
              this.hiddenElement.innerHTML = '';
            }
          }
          /**
           * Filter bar implementation
           */

        }, {
          key: "onFilterUp",
          value: function onFilterUp(e) {
            if (!(e.ctrlKey && e.keyCode === 86) && (this.isValidKey || e.keyCode === 40 || e.keyCode === 38)) {
              this.isValidKey = false;

              switch (e.keyCode) {
                case 38: //up arrow 

                case 40:
                  //down arrow 
                  if (this.getModuleName() === 'autocomplete' && !this.isPopupOpen && !this.preventAltUp && !this.isRequested) {
                    this.preventAutoFill = true;
                    this.searchLists(e);
                  } else {
                    this.preventAutoFill = false;
                  }

                  this.preventAltUp = false;
                  e.preventDefault();
                  break;

                case 46: //delete

                case 8:
                  //backspace
                  this.typedString = this.filterInput.value;

                  if (!this.isPopupOpen && this.typedString !== '' || this.isPopupOpen && this.queryString.length > 0) {
                    this.preventAutoFill = true;
                    this.searchLists(e);
                  } else if (this.typedString === '' && this.queryString === '' && this.getModuleName() !== 'autocomplete') {
                    this.preventAutoFill = true;
                    this.searchLists(e);
                  } else if (this.typedString === '') {
                    if (this.list) {
                      this.resetFocusElement();
                    }

                    this.activeIndex = null;

                    if (this.getModuleName() === 'autocomplete') {
                      this.hidePopup();
                    }
                  }

                  e.preventDefault();
                  break;

                default:
                  this.typedString = this.filterInput.value;
                  this.preventAutoFill = false;
                  this.searchLists(e);
                  break;
              }
            } else {
              this.isValidKey = false;
            }
          }
        }, {
          key: "onFilterDown",
          value: function onFilterDown(e) {
            switch (e.keyCode) {
              case 13:
                //enter
                break;

              case 40: //down arrow

              case 38:
                //up arrow 
                this.queryString = this.filterInput.value;
                e.preventDefault();
                break;

              case 9:
                //tab 
                if (this.isPopupOpen && this.getModuleName() !== 'autocomplete') {
                  e.preventDefault();
                }

                break;

              default:
                this.prevSelectPoints = this.getSelectionPoints();
                this.queryString = this.filterInput.value;
                break;
            }
          }
        }, {
          key: "removeFillSelection",
          value: function removeFillSelection() {
            if (this.isInteracted) {
              var selection = this.getSelectionPoints();
              this.inputElement.setSelectionRange(selection.end, selection.end);
            }
          }
        }, {
          key: "getQuery",
          value: function getQuery(query) {
            var filterQuery;

            if (!this.isCustomFilter && this.allowFiltering && this.filterInput) {
              filterQuery = query ? query.clone() : this.query ? this.query.clone() : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();
              var filterType = this.typedString === '' ? 'contains' : this.filterType;
              var dataType = this.typeOfData(this.dataSource)["typeof"];

              if (!(this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) && dataType === 'string' || dataType === 'number') {
                filterQuery.where('', filterType, this.typedString, this.ignoreCase, this.ignoreAccent);
              } else {
                var fields = this.fields.text ? this.fields.text : '';
                filterQuery.where(fields, filterType, this.typedString, this.ignoreCase, this.ignoreAccent);
              }
            } else {
              filterQuery = query ? query : this.query ? this.query : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();
            }

            return filterQuery;
          }
        }, {
          key: "getSelectionPoints",
          value: function getSelectionPoints() {
            var input = this.inputElement;
            return {
              start: Math.abs(input.selectionStart),
              end: Math.abs(input.selectionEnd)
            };
          }
        }, {
          key: "searchLists",
          value: function searchLists(e) {
            var _this148 = this;

            this.isTyped = true;
            this.activeIndex = null;

            if (this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon)) {
              var clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);
              clearElement.style.visibility = this.filterInput.value === '' ? 'hidden' : 'visible';
            }

            this.isDataFetched = false;

            if (this.isFiltering()) {
              if (this.isServerBlazor) {
                this.beforePopupOpen = this.getModuleName() === 'combobox' && this.isFiltering() && !this.beforePopupOpen ? !this.beforePopupOpen : this.beforePopupOpen;

                if (this.filterInput.value === '' && this.getModuleName() !== 'dropdownlist') {
                  // tslint:disable-next-line
                  this.interopAdaptor.invokeMethodAsync('OnServerRenderList', this.beforePopupOpen, false);
                } else {
                  // tslint:disable-next-line
                  this.interopAdaptor.invokeMethodAsync('OnServerFilter', this.filterInput.value);
                }
              } else {
                var eventArgs = {
                  preventDefaultAction: false,
                  text: this.filterInput.value,
                  updateData: function updateData(dataSource, query, fields) {
                    if (eventArgs.cancel) {
                      return;
                    }

                    _this148.isCustomFilter = true;

                    _this148.filteringAction(dataSource, query, fields);
                  },
                  baseEventArgs: e,
                  cancel: false
                };
                this.trigger('filtering', eventArgs, function (eventArgs) {
                  if (!eventArgs.cancel && !_this148.isCustomFilter && !eventArgs.preventDefaultAction) {
                    _this148.filteringAction(_this148.dataSource, null, _this148.fields);
                  }
                });
              }
            }
          }
          /**
           * To filter the data from given data source by using query
           * @param  {Object[] | DataManager } dataSource - Set the data source to filter.
           * @param  {Query} query - Specify the query to filter the data.
           * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
           * @return {void}.
           * @deprecated
           */

        }, {
          key: "filter",
          value: function filter(dataSource, query, fields) {
            this.isCustomFilter = true;
            this.filteringAction(dataSource, query, fields);
          }
        }, {
          key: "filteringAction",
          value: function filteringAction(dataSource, query, fields) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.filterInput)) {
              this.beforePopupOpen = true;

              if (this.filterInput.value.trim() === '' && !this.itemTemplate) {
                this.actionCompleteData.isUpdated = false;
                this.isTyped = false;

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.actionCompleteData.ulElement) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.actionCompleteData.list)) {
                  this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list);
                }

                this.isTyped = true;

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.itemData) && this.getModuleName() === 'dropdownlist') {
                  this.focusIndexItem();
                  this.setScrollPosition();
                }

                this.isNotSearchList = true;
              } else {
                this.isNotSearchList = false;
                query = this.filterInput.value.trim() === '' ? null : query;
                this.resetList(dataSource, fields, query);
              }
            }
          }
        }, {
          key: "setSearchBox",
          value: function setSearchBox(popupElement) {
            if (this.isFiltering()) {
              var parentElement = popupElement.querySelector('.' + dropDownListClasses.filterParent) ? popupElement.querySelector('.' + dropDownListClasses.filterParent) : this.createElement('span', {
                className: dropDownListClasses.filterParent
              });

              if (this.isServerBlazor) {
                parentElement.innerHTML = '';
              }

              this.filterInput = this.createElement('input', {
                attrs: {
                  type: 'text'
                },
                className: dropDownListClasses.filterInput
              });
              this.element.parentNode.insertBefore(this.filterInput, this.element);
              var backIcon = false;

              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                backIcon = true;
              }

              this.filterInputObj = _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].createInput({
                element: this.filterInput,
                buttons: backIcon ? [dropDownListClasses.backIcon, dropDownListClasses.filterBarClearIcon] : [dropDownListClasses.filterBarClearIcon],
                properties: {
                  placeholder: this.filterBarPlaceholder
                }
              }, this.createElement);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass)) {
                if (this.cssClass.split(' ').indexOf('e-outline') !== -1) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.filterInputObj.container], 'e-outline');
                } else if (this.cssClass.split(' ').indexOf('e-filled') !== -1) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.filterInputObj.container], 'e-filled');
                }
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([this.filterInputObj.container], parentElement);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([parentElement], popupElement);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.filterInput, {
                'aria-disabled': 'false',
                'aria-owns': this.element.id + '_options',
                'role': 'listbox',
                'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null,
                'autocomplete': 'off',
                'autocorrect': 'off',
                'autocapitalize': 'off',
                'spellcheck': 'false'
              });
              this.clearIconElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);

              if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.clearIconElement) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.clearIconElement, 'click', this.clearText, this);

                this.clearIconElement.style.visibility = 'hidden';
              }

              if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                this.searchKeyModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.filterInput, {
                  keyAction: this.keyActionHandler.bind(this),
                  keyConfigs: this.keyConfigure,
                  eventName: 'keydown'
                });
              } else {
                this.searchKeyModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.filterInput, {
                  keyAction: this.mobileKeyActionHandler.bind(this),
                  keyConfigs: this.keyConfigure,
                  eventName: 'keydown'
                });
              }

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.filterInput, 'input', this.onInput, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.filterInput, 'keyup', this.onFilterUp, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.filterInput, 'keydown', this.onFilterDown, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.filterInput, 'blur', this.onBlur, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.filterInput, 'paste', this.pasteHandler, this);

              return this.filterInputObj;
            } else {
              return inputObject;
            }
          }
        }, {
          key: "onInput",
          value: function onInput(e) {
            this.isValidKey = true; // For filtering works in mobile firefox.

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'mozilla') {
              this.typedString = this.filterInput.value;
              this.preventAutoFill = true;
              this.searchLists(e);
            }
          }
        }, {
          key: "pasteHandler",
          value: function pasteHandler(e) {
            var _this149 = this;

            setTimeout(function () {
              _this149.typedString = _this149.filterInput.value;

              _this149.searchLists(e);
            });
          }
        }, {
          key: "onActionFailure",
          value: function onActionFailure(e) {
            _get2(_getPrototypeOf2(DropDownList.prototype), "onActionFailure", this).call(this, e);

            if (this.beforePopupOpen) {
              this.renderPopup();
            }
          }
        }, {
          key: "onActionComplete",
          value: function onActionComplete(ulElement, list, e, isUpdated) {
            var _this150 = this;

            if (this.isNotSearchList) {
              this.isNotSearchList = false;
              return;
            }

            if (this.isActive) {
              var selectedItem = this.selectedLI ? this.selectedLI.cloneNode(true) : null;

              _get2(_getPrototypeOf2(DropDownList.prototype), "onActionComplete", this).call(this, ulElement, list, e);

              this.updateSelectElementData(this.allowFiltering);

              if (this.isRequested && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.searchKeyEvent) && this.searchKeyEvent.type === 'keydown') {
                this.isRequested = false;
                this.keyActionHandler(this.searchKeyEvent);
                this.searchKeyEvent = null;
              }

              if (this.isRequested && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.searchKeyEvent)) {
                this.incrementalSearch(this.searchKeyEvent);
                this.searchKeyEvent = null;
              }

              this.list.scrollTop = 0;

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ulElement)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(ulElement, {
                  'id': this.element.id + '_options',
                  'role': 'listbox',
                  'aria-hidden': 'false'
                });
              }

              if (this.initRemoteRender) {
                this.initial = true;
                this.activeIndex = this.index;
                this.updateValues();
                this.initRemoteRender = false;
                this.initial = false;

                if (this.value && this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
                  var checkField = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.value) ? this.fields.text : this.fields.value;
                  var checkVal = list.some(function (x) {
                    return x[checkField] === _this150.value;
                  });

                  if (!checkVal) {
                    this.dataSource.executeQuery(this.getQuery(this.query).where(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Predicate"](checkField, 'equal', this.value))).then(function (e) {
                      if (e.result.length > 0) {
                        _this150.addItem(e.result, list.length);

                        _this150.updateValues();
                      }
                    });
                  }
                }
              }

              if (this.getModuleName() !== 'autocomplete' && this.isFiltering() && !this.isTyped) {
                if (!this.actionCompleteData.isUpdated || !this.isCustomFilter && !this.isFilterFocus && (this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dataSource) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dataSource.length) && this.dataSource.length !== 0)) {
                  this.actionCompleteData = {
                    ulElement: ulElement.cloneNode(true),
                    list: list,
                    isUpdated: true
                  };
                }

                this.addNewItem(list, selectedItem);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.itemData)) {
                  this.focusIndexItem();
                }
              }

              if (this.beforePopupOpen) {
                this.renderPopup();
              }
            }
          }
        }, {
          key: "addNewItem",
          value: function addNewItem(listData, newElement) {
            var _this151 = this;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.itemData) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newElement)) {
              var value = this.getItemData().value;
              var isExist = listData.some(function (data) {
                return (typeof data === 'string' || typeof data === 'number') && data === value || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(_this151.fields.value, data) === value;
              });

              if (!isExist) {
                this.addItem(this.itemData);
              }
            }
          }
        }, {
          key: "updateActionCompleteData",
          value: function updateActionCompleteData(li, item, index) {
            if (this.getModuleName() !== 'autocomplete' && this.actionCompleteData.ulElement) {
              this.actionCompleteData.ulElement.insertBefore(li.cloneNode(true), this.actionCompleteData.ulElement.childNodes[index]);

              if (this.isFiltering() && this.actionCompleteData.list.indexOf(item) < 0) {
                this.actionCompleteData.list.push(item);
              }
            }
          }
        }, {
          key: "focusIndexItem",
          value: function focusIndexItem() {
            var value = this.getItemData().value;
            this.activeIndex = this.getIndexByValue(value);
            var element = this.findListElement(this.list, 'li', 'data-value', value);
            this.selectedLI = element;
            this.activeItem(element);
            this.removeFocus();
          }
        }, {
          key: "updateSelection",
          value: function updateSelection() {
            var selectedItem = this.list.querySelector('.' + dropDownBaseClasses.selected);

            if (selectedItem) {
              this.setProperties({
                'index': this.getIndexByValue(selectedItem.getAttribute('data-value'))
              });
              this.activeIndex = this.index;
            } else {
              this.removeFocus();
              this.list.querySelector('.' + dropDownBaseClasses.li).classList.add(dropDownListClasses.focus);
            }
          }
        }, {
          key: "removeFocus",
          value: function removeFocus() {
            var highlightedItem = this.list.querySelectorAll('.' + dropDownListClasses.focus);

            if (highlightedItem && highlightedItem.length) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(highlightedItem, dropDownListClasses.focus);
            }
          }
        }, {
          key: "renderPopup",
          value: function renderPopup() {
            var _this152 = this;

            if (this.popupObj && document.body.contains(this.popupObj.element)) {
              this.refreshPopup();
              return;
            }

            var args = {
              cancel: false
            };
            this.trigger('beforeOpen', args, function (args) {
              if (!args.cancel) {
                var popupEle = _this152.serverPopupEle ? _this152.serverPopupEle : _this152.createElement('div', {
                  id: _this152.element.id + '_popup',
                  className: 'e-ddl e-popup ' + (_this152.cssClass != null ? _this152.cssClass : '')
                });

                var searchBox = _this152.setSearchBox(popupEle);

                _this152.listHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(_this152.popupHeight);

                if (_this152.headerTemplate && !_this152.isServerBlazor) {
                  _this152.setHeaderTemplate(popupEle);
                }

                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([_this152.list], popupEle);

                if (_this152.footerTemplate && !_this152.isServerBlazor) {
                  _this152.setFooterTemplate(popupEle);
                }

                if (_this152.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-footer')) {
                  popupEle.appendChild(popupEle.querySelector('.e-ddl-footer'));
                }

                document.body.appendChild(popupEle);

                _this152.updateServerPopup(popupEle);

                popupEle.style.visibility = 'hidden';

                if (_this152.popupHeight !== 'auto') {
                  _this152.searchBoxHeight = 0;

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(searchBox.container)) {
                    _this152.searchBoxHeight = searchBox.container.parentElement.getBoundingClientRect().height;
                    _this152.listHeight = (parseInt(_this152.listHeight, 10) - _this152.searchBoxHeight).toString() + 'px';
                  }

                  if (_this152.headerTemplate || _this152.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-header')) {
                    _this152.header = _this152.header ? _this152.header : popupEle.querySelector('.e-ddl-header');
                    var height = Math.round(_this152.header.getBoundingClientRect().height);
                    _this152.listHeight = (parseInt(_this152.listHeight, 10) - (height + _this152.searchBoxHeight)).toString() + 'px';
                  }

                  if (_this152.footerTemplate || _this152.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-footer')) {
                    _this152.footer = _this152.footer ? _this152.footer : popupEle.querySelector('.e-ddl-footer');

                    var _height = Math.round(_this152.footer.getBoundingClientRect().height);

                    _this152.listHeight = (parseInt(_this152.listHeight, 10) - (_height + _this152.searchBoxHeight)).toString() + 'px';
                  }

                  _this152.list.style.maxHeight = (parseInt(_this152.listHeight, 10) - 2).toString() + 'px'; // due to box-sizing property

                  popupEle.style.maxHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(_this152.popupHeight);
                } else {
                  popupEle.style.height = 'auto';
                }

                var offsetValue = 0;
                var left;

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this152.selectedLI) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this152.activeIndex) && _this152.activeIndex >= 0) {
                  _this152.setScrollPosition();
                } else {
                  _this152.list.scrollTop = 0;
                }

                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !_this152.allowFiltering && (_this152.getModuleName() === 'dropdownlist' || _this152.isDropDownClick && _this152.getModuleName() === 'combobox')) {
                  offsetValue = _this152.getOffsetValue(popupEle);
                  var firstItem = _this152.isEmptyList() ? _this152.list : _this152.liCollections[0];
                  left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(_this152.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(_this152.inputElement.parentElement).borderLeftWidth, 10));
                }

                _this152.getFocusElement();

                _this152.createPopup(popupEle, offsetValue, left);

                _this152.checkCollision(popupEle);

                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                  _this152.popupObj.element.classList.add(dropDownListClasses.device);

                  if (_this152.getModuleName() === 'dropdownlist' || _this152.getModuleName() === 'combobox' && !_this152.allowFiltering && _this152.isDropDownClick) {
                    _this152.popupObj.collision = {
                      X: 'fit',
                      Y: 'fit'
                    };
                  }

                  if (_this152.isFilterLayout()) {
                    _this152.popupObj.element.classList.add(dropDownListClasses.mobileFilter);

                    _this152.popupObj.position = {
                      X: 0,
                      Y: 0
                    };

                    _this152.popupObj.dataBind();

                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(_this152.popupObj.element, {
                      style: 'left:0px;right:0px;top:0px;bottom:0px;'
                    });
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([document.body, _this152.popupObj.element], dropDownListClasses.popupFullScreen);

                    _this152.setSearchBoxPosition();

                    _this152.backIconElement = searchBox.container.querySelector('.e-back-icon');
                    _this152.clearIconElement = searchBox.container.querySelector('.' + dropDownListClasses.clearIcon);

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(_this152.backIconElement, 'click', _this152.clickOnBackIcon, _this152);

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(_this152.clearIconElement, 'click', _this152.clearText, _this152);
                  }
                }

                popupEle.style.visibility = 'visible';
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([popupEle], 'e-popup-close');

                var scrollParentElements = _this152.popupObj.getScrollableParent(_this152.inputWrapper.container);

                var _iterator71 = _createForOfIteratorHelper(scrollParentElements),
                    _step71;

                try {
                  for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {
                    var element = _step71.value;

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(element, 'scroll', _this152.scrollHandler, _this152);
                  }
                } catch (err) {
                  _iterator71.e(err);
                } finally {
                  _iterator71.f();
                }

                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _this152.isFilterLayout()) {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(_this152.list, 'scroll', _this152.listScroll, _this152);
                }

                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(_this152.targetElement(), {
                  'aria-expanded': 'true'
                });
                var inputParent = _this152.isFiltering() ? _this152.filterInput.parentElement : _this152.inputWrapper.container;
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([inputParent], [dropDownListClasses.inputFocus]);
                var animModel = {
                  name: 'FadeIn',
                  duration: 100
                };
                _this152.beforePopupOpen = true;
                var popupInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && _this152.isServerRendered ? null : _this152.popupObj;
                var eventArgs = {
                  popup: popupInstance,
                  cancel: false,
                  animation: animModel
                };

                _this152.trigger('open', eventArgs, function (eventArgs) {
                  if (!eventArgs.cancel) {
                    _this152.serverBlazorUpdateSelection();

                    _this152.bindServerScrollEvent();

                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this152.inputWrapper.container], [dropDownListClasses.iconAnimation]);

                    _this152.popupObj.show(new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](eventArgs.animation), _this152.zIndex === 1000 ? _this152.element : null);
                  } else {
                    _this152.beforePopupOpen = false;

                    _this152.destroyPopup();
                  }
                });
              } else {
                _this152.beforePopupOpen = false;
              }
            });
          }
        }, {
          key: "checkCollision",
          value: function checkCollision(popupEle) {
            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !(this.getModuleName() === 'dropdownlist' || this.isDropDownClick)) {
              var collision = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["isCollide"])(popupEle);

              if (collision.length > 0) {
                popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + 'px';
              }

              this.popupObj.resolveCollision();
            }
          }
        }, {
          key: "serverBlazorUpdateSelection",
          value: function serverBlazorUpdateSelection() {
            if (this.isServerBlazor && (this.value !== null || this.index !== null || this.text !== null) || this.getModuleName() !== 'dropdownlist' && !this.isTyped) {
              if (this.getModuleName() === 'dropdownlist') {
                this.removeSelection();
                this.removeFocus();
                this.removeHover();
                this.updateValues();
              }

              if (this.getModuleName() === 'combobox' && this.ulElement && this.findListElement(this.ulElement, 'li', 'data-value', this.value) && !this.isTyped) {
                this.updateValues();
              }

              if (this.isServerBlazor && this.getModuleName() !== 'dropdownlist' && (this.text === '' || this.text === null) && this.ulElement) {
                if (!this.ulElement.querySelector('li').classList.contains(dropDownBaseClasses.hover)) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.ulElement.querySelector('li')], dropDownBaseClasses.hover);
                }
              }
            }
          }
        }, {
          key: "bindServerScrollEvent",
          value: function bindServerScrollEvent() {
            if (this.isServerBlazor && this.list) {
              if (this.fields.groupBy && !this.isGroupChecking) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.list, 'scroll', this.setFloatingHeader);

                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.list, 'scroll', this.setFloatingHeader, this);
              }
            }
          }
        }, {
          key: "updateServerPopup",
          value: function updateServerPopup(popupEle) {
            if (this.isServerBlazor) {
              if (popupEle && popupEle.querySelector('li')) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([popupEle.querySelector('.e-content')], ['e-nodata']);
              }

              this.initial = false;
              popupEle.removeAttribute('style');
            }
          }
        }, {
          key: "getOffsetValue",
          value: function getOffsetValue(popupEle) {
            var popupStyles = getComputedStyle(popupEle);
            var borderTop = parseInt(popupStyles.borderTopWidth, 10);
            var borderBottom = parseInt(popupStyles.borderBottomWidth, 10);
            return this.setPopupPosition(borderTop + borderBottom);
          }
        }, {
          key: "createPopup",
          value: function createPopup(element, offsetValue, left) {
            var _this153 = this;

            this.popupObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["Popup"](element, {
              width: this.setWidth(),
              targetType: 'relative',
              relateTo: this.inputWrapper.container,
              collision: {
                X: 'flip',
                Y: 'flip'
              },
              offsetY: offsetValue,
              enableRtl: this.enableRtl,
              offsetX: left,
              position: {
                X: 'left',
                Y: 'bottom'
              },
              zIndex: this.zIndex,
              close: function close() {
                if (!_this153.isDocumentClick) {
                  _this153.focusDropDown();
                }

                var isResetItem = _this153.getModuleName() === 'autocomplete' ? true : false;

                _this153.DropDownBaseresetBlazorTemplates(isResetItem, isResetItem, true, true, false, true, true);

                _this153.isNotSearchList = false;
                _this153.isDocumentClick = false;

                _this153.destroyPopup();

                var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(_this153.inputElement, 'form');

                if (_this153.isFiltering() && formElement && _this153.actionCompleteData.list && _this153.actionCompleteData.list[0]) {
                  _this153.isActive = true;

                  _this153.onActionComplete(_this153.actionCompleteData.ulElement, _this153.actionCompleteData.list, null, true);
                }
              },
              open: function open() {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousedown', _this153.onDocumentClick, _this153);

                _this153.isPopupOpen = true;

                var actionList = _this153.actionCompleteData && _this153.actionCompleteData.ulElement && _this153.actionCompleteData.ulElement.querySelector('li');

                var ulElement = _this153.list.querySelector('ul li');

                if (_this153.isFiltering() && _this153.itemTemplate && _this153.element.tagName === _this153.getNgDirective() && actionList && ulElement && actionList.textContent !== ulElement.textContent) {
                  _this153.cloneElements();
                }

                if (_this153.isFilterLayout()) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this153.inputWrapper.container], [dropDownListClasses.inputFocus]);
                  _this153.isFilterFocus = true;

                  _this153.filterInput.focus();

                  if (_this153.inputWrapper.clearButton) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this153.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
                  }
                }

                _this153.activeStateChange();
              },
              targetExitViewport: function targetExitViewport() {
                if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                  _this153.hidePopup();
                }
              }
            });
          }
        }, {
          key: "isEmptyList",
          value: function isEmptyList() {
            return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.liCollections) && this.liCollections.length === 0;
          }
        }, {
          key: "getFocusElement",
          value: function getFocusElement() {// combo-box used this method
          }
        }, {
          key: "isFilterLayout",
          value: function isFilterLayout() {
            return this.getModuleName() === 'dropdownlist' && this.allowFiltering;
          }
        }, {
          key: "scrollHandler",
          value: function scrollHandler() {
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && (this.getModuleName() === 'dropdownlist' && !this.isFilterLayout() || this.getModuleName() === 'combobox' && !this.allowFiltering && this.isDropDownClick)) {
              this.hidePopup();
            }
          }
        }, {
          key: "setSearchBoxPosition",
          value: function setSearchBoxPosition() {
            var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
            this.popupObj.element.style.maxHeight = '100%';
            this.popupObj.element.style.width = '100%';
            this.list.style.maxHeight = window.innerHeight - searchBoxHeight + 'px';
            this.list.style.height = window.innerHeight - searchBoxHeight + 'px';
            var clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.filterInput);
            clearElement.parentElement.insertBefore(this.filterInput, clearElement);
          }
        }, {
          key: "setPopupPosition",
          value: function setPopupPosition(border) {
            var offsetValue;
            var popupOffset = border;
            var selectedLI = this.list.querySelector('.' + dropDownListClasses.focus) || this.selectedLI;
            var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
            var lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1];
            var liHeight = firstItem.getBoundingClientRect().height;
            var listHeight = this.list.offsetHeight / 2;
            var height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;
            var lastItemOffsetValue = lastItem.offsetTop;

            if (lastItemOffsetValue - listHeight < height && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.liCollections) && this.liCollections.length > 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selectedLI)) {
              var count = this.list.offsetHeight / liHeight;
              var paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);
              offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom;
              this.list.scrollTop = selectedLI.offsetTop;
            } else if (height > listHeight) {
              offsetValue = listHeight - liHeight / 2;
              this.list.scrollTop = height - listHeight + liHeight / 2;
            } else {
              offsetValue = height;
            }

            var inputHeight = this.inputWrapper.container.offsetHeight;
            offsetValue = offsetValue + liHeight + popupOffset - (liHeight - inputHeight) / 2;
            return -offsetValue;
          }
        }, {
          key: "setWidth",
          value: function setWidth() {
            var width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.popupWidth);

            if (width.indexOf('%') > -1) {
              var inputWidth = this.inputWrapper.container.offsetWidth * parseFloat(width) / 100;
              width = inputWidth.toString() + 'px';
            }

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !this.allowFiltering && (this.getModuleName() === 'dropdownlist' || this.isDropDownClick && this.getModuleName() === 'combobox')) {
              var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
              width = parseInt(width, 10) + (parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) * 2 + 'px';
            }

            return width;
          }
        }, {
          key: "scrollBottom",
          value: function scrollBottom(isInitial) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectedLI)) {
              var currentOffset = this.list.offsetHeight;
              var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
              var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
              nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset;
              var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
              boxRange = this.fields.groupBy && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;

              if (this.activeIndex === 0) {
                this.list.scrollTop = 0;
              } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
                this.list.scrollTop = nextOffset;
              }
            }
          }
        }, {
          key: "scrollTop",
          value: function scrollTop() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectedLI)) {
              var nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;
              var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
              nextOffset = this.fields.groupBy && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
              var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;

              if (this.activeIndex === 0) {
                this.list.scrollTop = 0;
              } else if (nextOffset < 0) {
                this.list.scrollTop = this.list.scrollTop + nextOffset;
              } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
                this.list.scrollTop = this.selectedLI.offsetTop - (this.fields.groupBy && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);
              }
            }
          }
        }, {
          key: "isEditTextBox",
          value: function isEditTextBox() {
            return false;
          }
        }, {
          key: "isFiltering",
          value: function isFiltering() {
            return this.allowFiltering;
          }
        }, {
          key: "isPopupButton",
          value: function isPopupButton() {
            return true;
          }
        }, {
          key: "setScrollPosition",
          value: function setScrollPosition(e) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e)) {
              switch (e.action) {
                case 'pageDown':
                case 'down':
                case 'end':
                  this.scrollBottom();
                  break;

                default:
                  this.scrollTop();
                  break;
              }
            } else {
              this.scrollBottom(true);
            }
          }
        }, {
          key: "clearText",
          value: function clearText() {
            this.filterInput.value = '';
            this.searchLists(null);
          }
        }, {
          key: "listScroll",
          value: function listScroll() {
            this.filterInput.blur();
          }
        }, {
          key: "setEleWidth",
          value: function setEleWidth(width) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(width)) {
              if (typeof width === 'number') {
                this.inputWrapper.container.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
              } else if (typeof width === 'string') {
                this.inputWrapper.container.style.width = width.match(/px|%|em/) ? width : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
              }
            }
          }
        }, {
          key: "closePopup",
          value: function closePopup(delay) {
            var _this154 = this;

            this.isTyped = false;

            if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {
              return;
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousedown', this.onDocumentClick);

            this.isActive = false;
            this.filterInputObj = null;
            this.isDropDownClick = false;
            this.preventAutoFill = false;
            var scrollableParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);

            var _iterator72 = _createForOfIteratorHelper(scrollableParentElements),
                _step72;

            try {
              for (_iterator72.s(); !(_step72 = _iterator72.n()).done;) {
                var element = _step72.value;

                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(element, 'scroll', this.scrollHandler);
              }
            } catch (err) {
              _iterator72.e(err);
            } finally {
              _iterator72.f();
            }

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.isFilterLayout()) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.list, 'scroll', this.listScroll);
            }

            if (this.isFilterLayout()) {
              if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                this.searchKeyModule.destroy();

                if (this.clearIconElement) {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.clearIconElement, 'click', this.clearText);
                }
              }

              if (this.backIconElement) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.backIconElement, 'click', this.clickOnBackIcon);

                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.clearIconElement, 'click', this.clearText);
              }

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.filterInput, 'input', this.onInput);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.filterInput, 'keyup', this.onFilterUp);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.filterInput, 'keydown', this.onFilterDown);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.filterInput, 'blur', this.onBlur);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.filterInput, 'paste', this.pasteHandler);

              this.filterInput = null;
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.targetElement(), {
              'aria-expanded': 'false',
              'aria-activedescendant': null
            });
            this.inputWrapper.container.classList.remove(dropDownListClasses.iconAnimation);

            if (this.isFiltering()) {
              this.actionCompleteData.isUpdated = false;
            }

            this.beforePopupOpen = false;
            var animModel = {
              name: 'FadeOut',
              duration: 100,
              delay: delay ? delay : 0
            };
            var popupInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered ? null : this.popupObj;
            var eventArgs = {
              popup: popupInstance,
              cancel: false,
              animation: animModel
            };
            this.trigger('close', eventArgs, function (eventArgs) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this154.popupObj) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this154.popupObj.element.querySelector('.e-fixed-head'))) {
                var fixedHeader = _this154.popupObj.element.querySelector('.e-fixed-head');

                fixedHeader.parentNode.removeChild(fixedHeader);
                _this154.fixedHeaderElement = null;
              }

              if (!eventArgs.cancel) {
                if (_this154.getModuleName() === 'autocomplete' && !_this154.isServerBlazor) {
                  _this154.rippleFun();
                }

                if (_this154.isPopupOpen) {
                  _this154.popupObj.hide(new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](eventArgs.animation));
                } else {
                  _this154.destroyPopup();
                }
              }
            });
          }
        }, {
          key: "destroyPopup",
          value: function destroyPopup() {
            var popupHolderEle = document.querySelector('#' + this.element.id + '_popup_holder');

            if (this.isServerBlazor && this.serverPopupEle && popupHolderEle) {
              popupHolderEle.appendChild(this.serverPopupEle); // tslint:disable-next-line

              this.interopAdaptor.invokeMethodAsync('OnServerClosePopup');
            }

            this.isPopupOpen = false;
            this.isFilterFocus = false;
            this.popupObj.destroy();
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.popupObj.element);
          }
        }, {
          key: "clickOnBackIcon",
          value: function clickOnBackIcon() {
            this.hidePopup();
            this.focusIn();
          }
          /**
           * To Initialize the control rendering
           * @private
           */
          // tslint:disable-next-line

        }, {
          key: "render",
          value: function render() {
            if (this.isServerBlazor) {
              this.inputElement = this.element;
              this.inputWrapper = {
                container: this.element.parentElement
              };
              this.hiddenElement = this.inputWrapper.container.querySelector('select');
              this.inputWrapper.buttons = [this.inputWrapper.container.querySelector('.e-input-group-icon.e-ddl-icon')];

              if (this.showClearButton) {
                this.inputWrapper.clearButton = this.inputWrapper.container.querySelector('.e-clear-icon');

                _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);
              }

              if (this.floatLabelType === 'Auto') {
                _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].wireFloatingEvents(this.element);
              }

              _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].bindInitialEvent({
                element: this.element,
                buttons: null,
                customTag: null,
                floatLabelType: this.floatLabelType,
                properties: this.properties
              });

              this.setFields();
              this.wireEvent();
              this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';

              if (!this.enabled) {
                this.targetElement().tabIndex = -1;
              }

              if (this.element.hasAttribute('autofocus')) {
                this.focusIn();
              }

              this.initial = false;
            } else {
              if (this.element.tagName === 'INPUT') {
                this.inputElement = this.element;

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.inputElement.getAttribute('role'))) {
                  this.inputElement.setAttribute('role', 'textbox');
                }

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.inputElement.getAttribute('type'))) {
                  this.inputElement.setAttribute('type', 'text');
                }
              } else {
                this.inputElement = this.createElement('input', {
                  attrs: {
                    role: 'textbox',
                    type: 'text'
                  }
                });

                if (this.element.tagName !== this.getNgDirective()) {
                  this.element.style.display = 'none';
                }

                this.element.parentElement.insertBefore(this.inputElement, this.element);
                this.preventTabIndex(this.inputElement);
              }

              var updatedCssClassValues = this.cssClass;

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && this.cssClass !== '') {
                updatedCssClassValues = this.cssClass.replace(/\s+/g, ' ').trim();
              }

              this.inputWrapper = _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].createInput({
                element: this.inputElement,
                buttons: this.isPopupButton() ? [dropDownListClasses.icon] : null,
                floatLabelType: this.floatLabelType,
                properties: {
                  readonly: this.getModuleName() === 'dropdownlist' ? true : this.readonly,
                  placeholder: this.placeholder,
                  cssClass: updatedCssClassValues,
                  enabled: this.enabled,
                  enableRtl: this.enableRtl,
                  showClearButton: this.showClearButton
                }
              }, this.createElement);

              if (this.element.tagName === this.getNgDirective()) {
                this.element.appendChild(this.inputWrapper.container);
              } else {
                this.inputElement.parentElement.insertBefore(this.element, this.inputElement);
              }

              this.hiddenElement = this.createElement('select', {
                attrs: {
                  'aria-hidden': 'true',
                  'tabindex': '-1',
                  'class': dropDownListClasses.hiddenElement
                }
              });
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.hiddenElement], this.inputWrapper.container);
              this.validationAttribute(this.element, this.hiddenElement);
              this.setFields();
              this.inputWrapper.container.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.width);
              this.inputWrapper.container.classList.add('e-ddl');
              this.wireEvent();
              this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';
              this.element.removeAttribute('tabindex');
              var id = this.element.getAttribute('id') ? this.element.getAttribute('id') : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('ej2_dropdownlist');
              this.element.id = id;
              this.hiddenElement.id = id + '_hidden';
              this.targetElement().setAttribute('tabindex', this.tabIndex);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.targetElement(), this.getAriaAttributes());
              this.updateDataAttribute(this.htmlAttributes);
              this.setHTMLAttributes();

              if (this.value !== null || this.activeIndex !== null || this.text !== null) {
                this.initValue();
              } else if (this.element.tagName === 'SELECT' && this.element.options[0]) {
                var selectElement = this.element;
                this.value = selectElement.options[selectElement.selectedIndex].value;
                this.text = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) ? null : selectElement.options[selectElement.selectedIndex].textContent;
                this.initValue();
              }

              this.preventTabIndex(this.element);

              if (!this.enabled) {
                this.targetElement().tabIndex = -1;
              }

              this.initial = false;
              this.element.style.opacity = '';

              this.inputElement.onselect = function (e) {
                e.stopImmediatePropagation();
              };

              this.inputElement.onchange = function (e) {
                e.stopImmediatePropagation();
              };

              if (this.element.hasAttribute('autofocus')) {
                this.focusIn();
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.text)) {
                this.inputElement.setAttribute('value', this.text);
              }
            }

            this.renderComplete();
          }
        }, {
          key: "setFooterTemplate",
          value: function setFooterTemplate(popupEle) {
            var compiledString;

            if (this.footer) {
              this.footer.innerHTML = '';
            } else {
              this.footer = this.createElement('div');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.footer], dropDownListClasses.footer);
            }

            var footercheck = this.dropdownCompiler(this.footerTemplate);

            if (footercheck) {
              compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(this.footerTemplate).innerHTML.trim());
            } else {
              compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.footerTemplate);
            }

            var _iterator73 = _createForOfIteratorHelper(compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate)),
                _step73;

            try {
              for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {
                var item = _step73.value;
                this.footer.appendChild(item);
              }
            } catch (err) {
              _iterator73.e(err);
            } finally {
              _iterator73.f();
            }

            this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, false, true);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([this.footer], popupEle);
          }
        }, {
          key: "setHeaderTemplate",
          value: function setHeaderTemplate(popupEle) {
            var compiledString;

            if (this.header) {
              this.header.innerHTML = '';
            } else {
              this.header = this.createElement('div');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.header], dropDownListClasses.header);
            }

            var headercheck = this.dropdownCompiler(this.headerTemplate);

            if (headercheck) {
              compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(this.headerTemplate).innerHTML.trim());
            } else {
              compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.headerTemplate);
            }

            var _iterator74 = _createForOfIteratorHelper(compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate)),
                _step74;

            try {
              for (_iterator74.s(); !(_step74 = _iterator74.n()).done;) {
                var item = _step74.value;
                this.header.appendChild(item);
              }
            } catch (err) {
              _iterator74.e(err);
            } finally {
              _iterator74.f();
            }

            this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, true, false);
            var contentEle = popupEle.querySelector('div.e-content');
            popupEle.insertBefore(this.header, contentEle);
          }
        }, {
          key: "setOldText",
          value: function setOldText(text) {
            this.text = text;
          }
        }, {
          key: "setOldValue",
          value: function setOldValue(value) {
            this.value = value;
          }
        }, {
          key: "refreshPopup",
          value: function refreshPopup() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popupObj) && document.body.contains(this.popupObj.element) && (this.allowFiltering && !(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.isFilterLayout()) || this.getModuleName() === 'autocomplete')) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.popupObj.element], 'e-popup-close');
              this.popupObj.refreshPosition(this.inputWrapper.container);
              this.popupObj.resolveCollision();
            }
          }
        }, {
          key: "checkDatasource",
          value: function checkDatasource(newProp) {
            if (newProp.dataSource && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object.keys(newProp.dataSource)) && this.itemTemplate && this.allowFiltering) {
              this.list = null;
              this.actionCompleteData = {
                ulElement: null,
                list: null,
                isUpdated: false
              };
            }

            var isChangeValue = Object.keys(newProp).indexOf('value') !== -1 && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.value);
            var isChangeText = Object.keys(newProp).indexOf('text') !== -1 && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.text);

            if (this.getModuleName() !== 'autocomplete' && this.allowFiltering && (isChangeValue || isChangeText)) {
              this.itemData = null;
            }
          }
        }, {
          key: "updateDataSource",
          value: function updateDataSource(props) {
            if (this.inputElement.value !== '' || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(props) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(props.dataSource) || !(props.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) && props.dataSource.length === 0)) {
              this.clearAll(null, props);
            }

            if (!(!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(props) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(props.dataSource) || !(props.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) && props.dataSource.length === 0)) || !(props.dataSource === [])) {
              this.resetList(this.dataSource);
            }

            if (!this.isCustomFilter && !this.isFilterFocus && document.activeElement !== this.filterInput) {
              this.checkCustomValue();
            }
          }
        }, {
          key: "checkCustomValue",
          value: function checkCustomValue() {
            this.itemData = this.getDataByValue(this.value);
            var dataItem = this.getItemData();
            this.setProperties({
              'value': dataItem.value,
              'text': dataItem.text
            });
          }
        }, {
          key: "updateInputFields",
          value: function updateInputFields() {
            if (this.getModuleName() === 'dropdownlist') {
              _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
            }
          }
          /**
           * Dynamically change the value of properties.
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            if (this.getModuleName() === 'dropdownlist') {
              if (!this.isServerBlazor) {
                this.checkDatasource(newProp);
                this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);
              }
            }

            for (var _i82 = 0, _Object$keys23 = Object.keys(newProp); _i82 < _Object$keys23.length; _i82++) {
              var prop = _Object$keys23[_i82];

              switch (prop) {
                case 'query':
                case 'dataSource':
                  break;

                case 'htmlAttributes':
                  this.setHTMLAttributes();
                  break;

                case 'width':
                  this.setEleWidth(newProp.width);
                  break;

                case 'placeholder':
                  _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setPlaceholder(newProp.placeholder, this.inputElement);

                  break;

                case 'filterBarPlaceholder':
                  if (this.filterInput) {
                    _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);
                  }

                  break;

                case 'readonly':
                  if (this.getModuleName() !== 'dropdownlist') {
                    _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setReadonly(newProp.readonly, this.inputElement);
                  }

                  break;

                case 'cssClass':
                  this.setCssClass(newProp.cssClass, oldProp.cssClass);
                  break;

                case 'enableRtl':
                  this.setEnableRtl();
                  break;

                case 'enabled':
                  this.setEnable();
                  break;

                case 'text':
                  if (newProp.text === null) {
                    this.clearAll();
                    break;
                  }

                  if (!this.list) {
                    if (this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
                      this.initRemoteRender = true;
                    }

                    this.renderList();
                  }

                  if (!this.initRemoteRender) {
                    var li = this.getElementByText(newProp.text);

                    if (!this.checkValidLi(li)) {
                      if (this.liCollections && this.liCollections.length === 100 && this.getModuleName() === 'autocomplete' && this.listData.length > 100) {
                        this.setSelectionData(newProp.text, oldProp.text, 'text');
                      } else if (!this.isServerBlazor) {
                        this.setOldText(oldProp.text);
                      }
                    }

                    this.updateInputFields();
                  }

                  break;

                case 'value':
                  if (newProp.value === null) {
                    this.clearAll();
                    break;
                  }

                  this.notify('beforeValueChange', {
                    newProp: newProp
                  }); // gird component value type change

                  if (!this.list) {
                    if (this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
                      this.initRemoteRender = true;
                    }

                    this.renderList();
                  }

                  if (!this.initRemoteRender) {
                    var item = this.getElementByValue(newProp.value);

                    if (!this.checkValidLi(item)) {
                      if (this.liCollections && this.liCollections.length === 100 && this.getModuleName() === 'autocomplete' && this.listData.length > 100) {
                        this.setSelectionData(newProp.value, oldProp.value, 'value');
                      } else if (!this.isServerBlazor) {
                        this.setOldValue(oldProp.value);
                      }
                    }

                    this.updateInputFields();
                  }

                  break;

                case 'index':
                  if (newProp.index === null) {
                    this.clearAll();
                    break;
                  }

                  if (!this.list) {
                    if (this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
                      this.initRemoteRender = true;
                    }

                    this.renderList();
                  }

                  if (!this.initRemoteRender && this.liCollections) {
                    var element = this.liCollections[newProp.index];

                    if (!this.checkValidLi(element)) {
                      if (this.liCollections && this.liCollections.length === 100 && this.getModuleName() === 'autocomplete' && this.listData.length > 100) {
                        this.setSelectionData(newProp.index, oldProp.index, 'index');
                      } else if (!this.isServerBlazor) {
                        this.index = oldProp.index;
                      }
                    }

                    this.updateInputFields();
                  }

                  break;

                case 'footerTemplate':
                  if (this.popupObj) {
                    this.setFooterTemplate(this.popupObj.element);
                  }

                  break;

                case 'headerTemplate':
                  if (this.popupObj) {
                    this.setHeaderTemplate(this.popupObj.element);
                  }

                  break;

                case 'valueTemplate':
                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.itemData) && this.valueTemplate != null) {
                    this.setValueTemplate();
                  }

                  break;

                case 'allowFiltering':
                  if (this.allowFiltering) {
                    this.actionCompleteData = {
                      ulElement: this.ulElement,
                      list: this.listData,
                      isUpdated: true
                    };
                    this.updateSelectElementData(this.allowFiltering);
                  }

                  break;

                case 'floatLabelType':
                  _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].removeFloating(this.inputWrapper);

                  _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].addFloating(this.inputElement, newProp.floatLabelType, this.placeholder, this.createElement);

                  break;

                case 'showClearButton':
                  _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setClearButton(newProp.showClearButton, this.inputElement, this.inputWrapper, null, this.createElement);

                  this.bindClearEvent();
                  break;

                default:
                  var ddlProps = void 0;
                  ddlProps = this.getPropObject(prop, newProp, oldProp);

                  _get2(_getPrototypeOf2(DropDownList.prototype), "onPropertyChanged", this).call(this, ddlProps.newProperty, ddlProps.oldProperty);

                  break;
              }
            }
          }
        }, {
          key: "checkValidLi",
          value: function checkValidLi(element) {
            if (this.isValidLI(element)) {
              this.setSelection(element, null);
              return true;
            }

            return false;
          }
        }, {
          key: "setSelectionData",
          value: function setSelectionData(newProp, oldProp, prop) {
            var _this155 = this;

            var li;

            this.updateListValues = function () {
              if (prop === 'text') {
                li = _this155.getElementByText(newProp);

                if (!_this155.checkValidLi(li)) {
                  _this155.setOldText(oldProp);
                }
              } else if (prop === 'value') {
                li = _this155.getElementByValue(newProp);

                if (!_this155.checkValidLi(li)) {
                  _this155.setOldValue(oldProp);
                }
              } else if (prop === 'index') {
                li = _this155.liCollections[newProp];

                if (!_this155.checkValidLi(li)) {
                  _this155.index = oldProp;
                }
              }
            };
          }
        }, {
          key: "setCssClass",
          value: function setCssClass(newClass, oldClass) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldClass)) {
              oldClass = oldClass.replace(/\s+/g, ' ').trim();
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newClass)) {
              newClass = newClass.replace(/\s+/g, ' ').trim();
            }

            _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setCssClass(newClass, [this.inputWrapper.container], oldClass);

            if (this.popupObj) {
              _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setCssClass(newClass, [this.popupObj.element], oldClass);
            }
          }
          /**
           * Return the module name.
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'dropdownlist';
          }
          /**
           * Opens the popup that displays the list of items.
           * @returns void.
           */

        }, {
          key: "showPopup",
          value: function showPopup() {
            if (!this.enabled) {
              return;
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.itemTemplate) {
              this.DropDownBaseupdateBlazorTemplates(true, false, false, false);
            }

            if (this.beforePopupOpen) {
              this.refreshPopup();
              return;
            }

            this.beforePopupOpen = true;

            if (this.isFiltering() && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0]) {
              this.isActive = true;
              this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);
            } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(this.list) && (this.list.classList.contains(dropDownBaseClasses.noData) || this.list.querySelectorAll('.' + dropDownBaseClasses.li).length <= 0)) {
              this.renderList();
            } else if (this.isFiltering() && this.isServerBlazor) {
              this.renderList();
            }

            if (!this.isServerBlazor) {
              this.invokeRenderPopup();
            }

            var popupHolderEle = !this.isFiltering() || document.querySelector('#' + this.element.id + '_popup_holder');
            var isDropdownComp = this.getModuleName() === 'dropdownlist' || !this.isFiltering();

            if (this.isServerBlazor && popupHolderEle && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list) && isDropdownComp) {
              this.invokeRenderPopup();
            }
          }
        }, {
          key: "invokeRenderPopup",
          value: function invokeRenderPopup() {
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.isFilterLayout()) {
              var proxy = this;

              window.onpopstate = function () {
                proxy.hidePopup();
              };

              history.pushState({}, '');
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list.children[0]) || this.list.classList.contains(dropDownBaseClasses.noData)) {
              this.renderPopup();
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.targetElement(), {
              'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null
            });
          }
        }, {
          key: "clientRenderPopup",
          value: function clientRenderPopup(data, popupEle) {
            if (popupEle) {
              this.serverPopupEle = popupEle;
              this.list = popupEle.querySelector('.e-dropdownbase.e-content') ? popupEle.querySelector('.e-dropdownbase.e-content') : this.list;
              this.ulElement = this.list.querySelector('ul');

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ulElement) && !this.list.classList.contains(dropDownBaseClasses.noData)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.list], [dropDownBaseClasses.noData]);
              }

              this.liCollections = this.ulElement ? this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li) : [];
              this.listData = data;

              if (this.getModuleName() === 'autocomplete' && this.liCollections.length > 0) {
                this.renderHightSearch();
              }

              this.initRemoteRender = false;

              if (!this.isPopupOpen) {
                this.serverBlazorUpdateSelection();
              }

              this.unWireListEvents();
              this.wireListEvents();

              if (this.isServerIncrementalSearch && this.searchKeyEvent) {
                this.isServerIncrementalSearch = false;
                this.initial = false;
                this.onServerIncrementalSearch(this.searchKeyEvent);
              }

              if (this.isServerNavigation && this.searchKeyEvent) {
                if (this.searchKeyEvent.action === 'down' || this.searchKeyEvent.action === 'up') {
                  this.isServerNavigation = false;
                  this.updateUpDownAction(this.searchKeyEvent);
                } else if (this.searchKeyEvent.action === 'home' || this.searchKeyEvent.action === 'end') {
                  this.isServerNavigation = false;
                  this.updateHomeEndAction(this.searchKeyEvent);
                }
              }

              if (this.beforePopupOpen) {
                this.invokeRenderPopup();
              }

              if (this.getModuleName() !== 'dropdownlist') {
                this.onActionComplete(this.ulElement, this.listData);
              }
            } else if (data != null && this.listData !== data) {
              this.listData = data;
              this.initRemoteRender = false;
            }
          }
        }, {
          key: "renderHightSearch",
          value: function renderHightSearch() {// update high light search 
          }
        }, {
          key: "updateclientItemData",
          value: function updateclientItemData(data) {
            this.listData = data;
          }
        }, {
          key: "initValueItemData",
          value: function initValueItemData(selectData) {
            this.itemData = selectData;
            this.previousValue = this.value;
            this.initial = false;
          }
        }, {
          key: "serverUpdateListElement",
          value: function serverUpdateListElement(data, popupEle) {
            this.listData = data;

            if (this.ulElement) {
              this.liCollections = this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li);
            }
          }
          /**
           * Hides the popup if it is in an open state.
           * @returns void.
           */

        }, {
          key: "hidePopup",
          value: function hidePopup(e) {
            var isHeader = this.headerTemplate ? true : false;
            var isFooter = this.headerTemplate ? true : false;
            this.DropDownBaseresetBlazorTemplates(false, false, false, false, false, isHeader, isFooter);

            if (this.isEscapeKey && this.getModuleName() === 'dropdownlist') {
              _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);

              this.isEscapeKey = false;

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.index)) {
                var element = this.findListElement(this.ulElement, 'li', 'data-value', this.value);
                this.selectedLI = this.liCollections[this.index] || element;

                if (this.selectedLI) {
                  this.updateSelectedItem(this.selectedLI, null, true);

                  if (this.valueTemplate && this.itemData !== null) {
                    this.setValueTemplate();
                  }
                }
              } else {
                this.resetSelection();
              }
            }

            this.closePopup();
            var dataItem = this.getItemData();
            var isSelectVal = this.isServerBlazor ? !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) : !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectedLI);

            if (this.inputElement.value.trim() === '' && !this.isInteracted && (this.isSelectCustom || isSelectVal && this.inputElement.value !== dataItem.text)) {
              this.isSelectCustom = false;
              this.clearAll(e);
            }
          }
          /**
           * Sets the focus on the component for interaction.
           * @returns void.
           */

        }, {
          key: "focusIn",
          value: function focusIn(e) {
            if (!this.enabled) {
              return;
            }

            if (this.targetElement().classList.contains(dropDownListClasses.disable)) {
              return;
            }

            var isFocused = false;

            if (this.preventFocus && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              this.inputWrapper.container.tabIndex = 1;
              this.inputWrapper.container.focus();
              this.preventFocus = false;
              isFocused = true;
            }

            if (!isFocused) {
              this.targetElement().focus();
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper.container], [dropDownListClasses.inputFocus]);
            this.onFocus(e);
          }
          /**
           * Moves the focus from the component if the component is already focused.
           * @returns void.
           */

        }, {
          key: "focusOut",
          value: function focusOut(e) {
            if (!this.enabled) {
              return;
            }

            this.isTyped = true;
            this.hidePopup(e);
            this.targetElement().blur();
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper.container], [dropDownListClasses.inputFocus]);
          }
          /**
           * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
           * @method destroy
           * @return {void}.
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.isActive = false;

            if (!this.isServerBlazor || this.popupObj && document.body.contains(this.popupObj.element)) {
              this.hidePopup();
            }

            this.unWireEvent();

            if (this.list) {
              this.unWireListEvents();

              if (this.isServerBlazor) {
                if (this.fields.groupBy && !this.isGroupChecking) {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.list, 'scroll', this.setFloatingHeader);
                }
              }
            }

            if (!this.isServerBlazor) {
              if (this.element && !this.element.classList.contains('e-' + this.getModuleName())) {
                return;
              }

              var attrArray = ['readonly', 'aria-disabled', 'aria-placeholder', 'placeholder', 'aria-owns', 'aria-labelledby', 'aria-haspopup', 'aria-expanded', 'aria-activedescendant', 'autocomplete', 'aria-readonly', 'autocorrect', 'autocapitalize', 'spellcheck', 'aria-autocomplete', 'aria-live', 'aria-describedby', 'aria-label'];

              for (var i = 0; i < attrArray.length; i++) {
                this.inputElement.removeAttribute(attrArray[i]);
              }

              this.inputElement.setAttribute('tabindex', this.tabIndex);
              this.inputElement.classList.remove('e-input');

              _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue('', this.inputElement, this.floatLabelType, this.showClearButton);

              this.element.style.display = 'block';

              if (this.inputWrapper.container.parentElement.tagName === this.getNgDirective()) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.inputWrapper.container);
              } else {
                this.inputWrapper.container.parentElement.insertBefore(this.element, this.inputWrapper.container);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.inputWrapper.container);
              }

              _get2(_getPrototypeOf2(DropDownList.prototype), "destroy", this).call(this);
            }
          }
        }, {
          key: "getItems",

          /**
           * Gets all the list items bound on this component.
           * @returns Element[].
           */
          value: function getItems() {
            if (!this.list) {
              if (this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
                this.initRemoteRender = true;
              }

              this.renderList();
            }

            return this.ulElement ? _get2(_getPrototypeOf2(DropDownList.prototype), "getItems", this).call(this) : [];
          }
          /**
           * Gets the data Object that matches the given value.
           * @param { string | number } value - Specifies the value of the list item.
           * @returns Object.
           * @blazorType object
           */

        }, {
          key: "getDataByValue",
          value: function getDataByValue(value) {
            return _get2(_getPrototypeOf2(DropDownList.prototype), "getDataByValue", this).call(this, value);
          }
          /**
           * Allows you to clear the selected values from the component.
           * @returns void.
           */

        }, {
          key: "clear",
          value: function clear() {
            this.value = null;
          }
        }]);

        return DropDownList;
      }(DropDownBase);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownList.prototype, "cssClass", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], DropDownList.prototype, "width", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('300px')], DropDownList.prototype, "popupHeight", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], DropDownList.prototype, "popupWidth", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownList.prototype, "placeholder", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownList.prototype, "filterBarPlaceholder", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], DropDownList.prototype, "htmlAttributes", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownList.prototype, "query", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownList.prototype, "valueTemplate", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownList.prototype, "headerTemplate", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownList.prototype, "footerTemplate", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownList.prototype, "allowFiltering", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownList.prototype, "readonly", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownList.prototype, "text", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownList.prototype, "value", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownList.prototype, "index", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Never')], DropDownList.prototype, "floatLabelType", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownList.prototype, "showClearButton", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownList.prototype, "filtering", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownList.prototype, "change", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownList.prototype, "beforeOpen", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownList.prototype, "open", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownList.prototype, "close", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownList.prototype, "blur", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownList.prototype, "focus", void 0);

      DropDownList = __decorate$1([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], DropDownList);
      /**
       * export all modules from current location
       */

      var __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var RTL = 'e-rtl';
      var DROPDOWNTREE = 'e-ddt';
      var HIDDENELEMENT = 'e-ddt-hidden';
      var DROPDOWNICON = 'e-input-group-icon e-ddt-icon e-icons';
      var SHOW_CHIP = 'e-show-chip';
      var SHOW_CLEAR = 'e-show-clear';
      var SHOW_DD_ICON = 'e-show-dd-icon';
      var CHIP_INPUT = 'e-chip-input';
      var INPUTFOCUS = 'e-input-focus';
      var INPUTGROUP = 'e-input-group';
      var ICONANIMATION = 'e-icon-anim';
      var CLOSEICON_CLASS = 'e-clear-icon e-icons';
      var CHIP_WRAPPER = 'e-chips-wrapper';
      var CHIP_COLLECTION = 'e-chips-collection';
      var CHIP = 'e-chips';
      var CHIP_CONTENT = 'e-chipcontent';
      var CHIP_CLOSE = 'e-chips-close';
      var HIDEICON = 'e-icon-hide';
      var POPUP_CLASS = 'e-ddt e-popup';
      var PARENTITEM = 'e-list-parent';
      var CONTENT = 'e-popup-content';
      var DROPDOWN = 'e-dropdown';
      var DISABLED = 'e-disabled';
      var ICONS = 'e-icons';
      var CHECKALLPARENT = 'e-selectall-parent';
      var CHECKALLHIDE = 'e-hide-selectall';
      var BIGGER = 'e-bigger';
      var SMALL = 'e-small';
      var ALLTEXT = 'e-all-text';
      var CHECKBOXFRAME = 'e-frame';
      var CHECK = 'e-check';
      var CHECKBOXWRAP = 'e-checkbox-wrapper';
      var FILTERWRAP = 'e-filter-wrap';
      var DDTICON = 'e-ddt-icon';
      var FOOTER = 'e-ddt-footer';
      var HEADER = 'e-ddt-header';
      var NODATACONTAINER = 'e-ddt-nodata';
      var NODATA = 'e-no-data';
      var HEADERTEMPLATE = 'HeaderTemplate';
      var FOOTERTEMPLATE = 'FooterTemplate';
      var NORECORDSTEMPLATE = 'NoRecordsTemplate';
      var ACTIONFAILURETEMPLATE = 'ActionFailureTemplate';
      var REMAIN_WRAPPER = 'e-remain';
      var OVERFLOW_VIEW = 'e-overflow';
      var SHOW_TEXT = 'e-show-text';
      var TOTAL_COUNT_WRAPPER = 'e-total-count';
      var REMAIN_COUNT = 'e-wrap-count';

      var Fields = /*#__PURE__*/function (_syncfusion_ej2_base_35) {
        _inherits2(Fields, _syncfusion_ej2_base_35);

        var _super54 = _createSuper(Fields);

        function Fields() {
          _classCallCheck2(this, Fields);

          return _super54.apply(this, arguments);
        }

        return Fields;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('child')], Fields.prototype, "child", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], Fields.prototype, "dataSource", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('expanded')], Fields.prototype, "expanded", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('hasChildren')], Fields.prototype, "hasChildren", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('htmlAttributes')], Fields.prototype, "htmlAttributes", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('iconCss')], Fields.prototype, "iconCss", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('imageUrl')], Fields.prototype, "imageUrl", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('parentValue')], Fields.prototype, "parentValue", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Fields.prototype, "query", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('selected')], Fields.prototype, "selected", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Fields.prototype, "tableName", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('text')], Fields.prototype, "text", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('tooltip')], Fields.prototype, "tooltip", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('value')], Fields.prototype, "value", void 0);

      var TreeSettings = /*#__PURE__*/function (_syncfusion_ej2_base_36) {
        _inherits2(TreeSettings, _syncfusion_ej2_base_36);

        var _super55 = _createSuper(TreeSettings);

        function TreeSettings() {
          _classCallCheck2(this, TreeSettings);

          return _super55.apply(this, arguments);
        }

        return TreeSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeSettings.prototype, "autoCheck", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Auto')], TreeSettings.prototype, "expandOn", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TreeSettings.prototype, "loadOnDemand", void 0);
      /**
       * The Dropdown Tree control allows you to select single or multiple values from hierarchical data in a tree-like structure.
       * It has several out-of-the-box features, such as data binding, check boxes, templates, filter,
       * UI customization, accessibility, and preselected values.
       * ```html
       *  <input type="text" id="tree"></input>
       * ```
       * ```typescript
       *  let ddtObj: DropDownTree = new DropDownTree();
       *  ddtObj.appendTo("#tree");
       * ```
       */


      var DropDownTree = /*#__PURE__*/function (_syncfusion_ej2_base_37) {
        _inherits2(DropDownTree, _syncfusion_ej2_base_37);

        var _super56 = _createSuper(DropDownTree);

        function DropDownTree(options, element) {
          var _this156;

          _classCallCheck2(this, DropDownTree);

          _this156 = _super56.call(this, options, element);
          _this156.filterTimer = null;
          _this156.isFilteredData = false;
          _this156.isFilterRestore = false;
          _this156.selectedData = [];
          _this156.filterDelayTime = 300;
          return _this156;
        }
        /**
         * Get the properties to be maintained in the persisted state.
         * @returns string
         * @hidden
         */


        _createClass2(DropDownTree, [{
          key: "getPersistData",
          value: function getPersistData() {
            var keyEntity = ['value'];
            return this.addOnPersist(keyEntity);
          }
        }, {
          key: "getLocaleName",
          value: function getLocaleName() {
            return 'drop-down-tree';
          }
          /**
           * Initialize the event handler.
           * @private
           */

        }, {
          key: "preRender",
          value: function preRender() {
            this.inputFocus = false;
            this.isPopupOpen = false;
            this.isFirstRender = true;
            this.isInitialized = false;
            this.currentText = null;
            this.currentValue = null;
            this.oldValue = null;
            this.removeValue = false;
            this.selectedText = [];
            this.treeItems = [];
            this.dataValue = null;
            this.isNodeSelected = false;
            this.isDynamicChange = false;
            this.clearIconWidth = 0;
            this.isBlazorPlatForm = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])();
            this.headerTemplateId = "".concat(this.element.id).concat(HEADERTEMPLATE);
            this.footerTemplateId = "".concat(this.element.id).concat(FOOTERTEMPLATE);
            this.actionFailureTemplateId = "".concat(this.element.id).concat(ACTIONFAILURETEMPLATE);
            this.noRecordsTemplateId = "".concat(this.element.id).concat(NORECORDSTEMPLATE);
            this.keyConfigs = {
              escape: 'escape',
              altUp: 'alt+uparrow',
              altDown: 'alt+downarrow',
              tab: 'tab',
              shiftTab: 'shift+tab',
              end: 'end',
              enter: 'enter',
              home: 'home',
              moveDown: 'downarrow',
              moveLeft: 'leftarrow',
              moveRight: 'rightarrow',
              moveUp: 'uparrow',
              ctrlDown: 'ctrl+downarrow',
              ctrlUp: 'ctrl+uparrow',
              ctrlEnter: 'ctrl+enter',
              ctrlHome: 'ctrl+home',
              ctrlEnd: 'ctrl+end',
              shiftDown: 'shift+downarrow',
              shiftUp: 'shift+uparrow',
              shiftEnter: 'shift+enter',
              shiftHome: 'shift+home',
              shiftEnd: 'shift+end',
              csDown: 'ctrl+shift+downarrow',
              csUp: 'ctrl+shift+uparrow',
              csEnter: 'ctrl+shift+enter',
              csHome: 'ctrl+shift+home',
              csEnd: 'ctrl+shift+end',
              space: 'space',
              ctrlA: 'ctrl+A'
            };
          }
          /**
           * To Initialize the control rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.ensureAutoCheck();

            if (this.element.tagName === 'INPUT') {
              this.inputEle = this.element;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.inputEle.getAttribute('role'))) {
                this.inputEle.setAttribute('role', 'textbox');
              }

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.inputEle.getAttribute('type'))) {
                this.inputEle.setAttribute('type', 'text');
              }
            } else {
              this.inputEle = this.createElement('input', {
                attrs: {
                  role: 'textbox',
                  type: 'text'
                }
              });
              this.element.parentElement.insertBefore(this.inputEle, this.element);
            }

            this.inputObj = _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].createInput({
              element: this.inputEle,
              floatLabelType: this.floatLabelType,
              buttons: this.showDropDownIcon ? [DROPDOWNICON] : null,
              properties: {
                readonly: true,
                placeholder: this.placeholder,
                enabled: this.enabled,
                cssClass: this.cssClass,
                enableRtl: this.enableRtl
              }
            }, this.createElement);
            this.inputWrapper = this.inputObj.container;

            if (!this.inputWrapper.classList.contains(INPUTGROUP)) {
              this.inputWrapper.classList.add(INPUTGROUP);
            }

            if (this.showDropDownIcon) {
              this.inputWrapper.classList.add(SHOW_DD_ICON);
            }

            if (this.element.tagName === this.getDirective()) {
              this.element.appendChild(this.inputWrapper);
            }

            this.createHiddenElement();
            this.createClearIcon();
            this.inputWrapper.classList.add(DROPDOWNTREE);
            this.setElementWidth(this.width);
            this.setAttributes();
            this.updateDataAttribute();
            this.setHTMLAttributes();
            this.popupDiv = this.createElement('div', {
              className: CONTENT,
              attrs: {
                'tabindex': '0'
              }
            });
            this.popupDiv.classList.add(DROPDOWN);
            this.tree = this.createElement('div', {
              id: this.element.id + '_tree'
            });
            this.popupDiv.appendChild(this.tree);
            document.body.appendChild(this.popupDiv);
            this.wireTreeEvents();
            this.popupDiv.style.display = 'none';
            this.renderTree();
            this.isRemoteData = this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"];

            if (this.allowMultiSelection || this.showCheckBox) {
              if (this.mode !== 'Delimiter') {
                this.createChip();
              }

              if (!this.wrapText) {
                this.overFlowWrapper = this.createElement('span', {
                  className: OVERFLOW_VIEW + ' ' + HIDEICON
                });
                this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);

                if (this.mode !== 'Box') {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overFlowWrapper], SHOW_TEXT);
                }
              }
            }

            if (!this.isRemoteData) {
              this.setTreeValue();
              this.setTreeText();
              this.updateHiddenValue();
              this.setSelectedValue();

              if (!this.wrapText) {
                this.updateView();
              }
            }

            this.wireEvents();
            var firstUl = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PARENTITEM, this.treeObj.element);

            if (firstUl && firstUl.getAttribute('aria-multiselectable')) {
              firstUl.removeAttribute('aria-multiselectable');
            }

            this.oldValue = this.value;
            this.isInitialized = true;
            this.renderComplete();
          }
        }, {
          key: "ensureAutoCheck",
          value: function ensureAutoCheck() {
            if (this.allowFiltering && this.treeSettings.autoCheck) {
              this.setProperties({
                treeSettings: {
                  autoCheck: false
                }
              }, true);
            }
          }
        }, {
          key: "hideCheckAll",
          value: function hideCheckAll(flag) {
            var checkAllEle = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popupEle) ? this.popupEle.querySelector('.' + CHECKALLPARENT) : null;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(checkAllEle)) {
              if (flag && !checkAllEle.classList.contains(CHECKALLHIDE)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([checkAllEle], CHECKALLHIDE);
              } else if (!flag && checkAllEle.classList.contains(CHECKALLHIDE)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([checkAllEle], CHECKALLHIDE);
              }
            }
          }
        }, {
          key: "renderFilter",
          value: function renderFilter() {
            this.filterContainer = this.createElement('div', {
              id: this.element.id + '_filter_wrap',
              className: FILTERWRAP
            });
            var filterInput = this.createElement('input', {
              id: this.element.id + '_filter',
              attrs: {
                autocomplete: 'off',
                'aria-label': this.filterBarPlaceholder
              }
            });
            this.filterContainer.appendChild(filterInput);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.filterContainer], this.popupEle);
            this.filterObj = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["TextBox"]({
              value: '',
              showClearButton: true,
              placeholder: this.filterBarPlaceholder,
              input: this.filterChangeHandler.bind(this)
            });
            this.filterObj.appendTo('#' + this.element.id + '_filter');
          }
        }, {
          key: "filterChangeHandler",
          value: function filterChangeHandler(args) {
            var _this157 = this;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.value)) {
              window.clearTimeout(this.filterTimer);
              this.filterTimer = window.setTimeout(function () {
                _this157.filterHandler(args.value, args.event);
              }, this.filterDelayTime);
            }
          }
        }, {
          key: "filterHandler",
          value: function filterHandler(value, event) {
            var _this158 = this;

            if (!this.isFilteredData) {
              this.treeData = this.treeObj.getTreeData();
            }

            var filterFields = this.cloneFields(this.fields);
            var args = {
              cancel: false,
              preventDefaultAction: false,
              event: event,
              text: value,
              fields: filterFields
            };
            this.trigger('filtering', args, function (args) {
              if (!args.cancel) {
                var flag = false;
                var fields;
                _this158.isFilteredData = true;

                if (value === '') {
                  _this158.isFilteredData = false;
                  _this158.isFilterRestore = true;
                  fields = _this158.cloneFields(_this158.fields);
                } else if (args.preventDefaultAction) {
                  fields = args.fields;
                } else {
                  if (_this158.treeDataType === 1) {
                    fields = _this158.selfReferencefilter(value, args.fields);
                  } else {
                    if (_this158.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
                      flag = true;
                    } else {
                      fields = _this158.nestedFilter(value, args.fields);
                    }
                  }
                }

                _this158.hideCheckAll(_this158.isFilteredData);

                if (flag) {
                  return;
                }

                _this158.treeObj.fields = _this158.getTreeFields(fields);

                _this158.treeObj.dataBind();
              }
            });
          }
        }, {
          key: "nestedFilter",
          value: function nestedFilter(value, filteredFields) {
            var matchedDataSource = [];

            for (var i = 0; i < this.treeData.length; i++) {
              var filteredChild = this.nestedChildFilter(value, this.treeData[i]);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(filteredChild)) {
                matchedDataSource.push(filteredChild);
              }
            }

            filteredFields.dataSource = matchedDataSource;
            return filteredFields;
          }
        }, {
          key: "nestedChildFilter",
          value: function nestedChildFilter(value, node) {
            var children = node[this.fields.child];

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(children)) {
              return this.isMatchedNode(value, node) ? node : null;
            } else {
              var matchedChildren = [];

              for (var i = 0; i < children.length; i++) {
                var filteredChild = this.nestedChildFilter(value, children[i]);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(filteredChild)) {
                  matchedChildren.push(filteredChild);
                }
              }

              if (matchedChildren.length !== 0) {
                node[this.fields.child] = matchedChildren;
                return node;
              } else {
                node[this.fields.child] = null;
                return this.isMatchedNode(value, node) ? node : null;
              }
            }
          }
        }, {
          key: "selfReferencefilter",
          value: function selfReferencefilter(value, filteredFields) {
            var matchedData = [];
            var matchedDataSource = [];

            for (var i = 0; i < this.treeData.length; i++) {
              if (this.isMatchedNode(value, this.treeData[i])) {
                matchedData.push(this.treeData[i]);
              }
            }

            for (var _i83 = 0; _i83 < matchedData.length; _i83++) {
              if (matchedDataSource.indexOf(matchedData[_i83]) === -1) {
                matchedDataSource.push(matchedData[_i83]);
                var parentId = matchedData[_i83][this.fields.parentValue];

                while (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parentId)) {
                  var parent = null;

                  for (var j = 0; j < this.treeData.length; j++) {
                    var _value = this.treeData[j][this.fields.value];

                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_value) && _value === parentId) {
                      parent = this.treeData[j];
                      break;
                    }
                  }

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parent) && matchedDataSource.indexOf(parent) === -1) {
                    matchedDataSource.push(parent);
                    parentId = parent[this.fields.parentValue];
                  } else {
                    break;
                  }
                }
              }
            }

            filteredFields.dataSource = matchedDataSource;
            return filteredFields;
          }
        }, {
          key: "isMatchedNode",
          value: function isMatchedNode(value, node) {
            var checkValue = node[this.fields.text];

            if (this.ignoreCase) {
              checkValue = checkValue.toLowerCase();
              value = value.toLowerCase();
            }

            if (this.ignoreAccent) {
              checkValue = _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].ignoreDiacritics(checkValue);
              value = _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataUtil"].ignoreDiacritics(value);
            }

            if (this.filterType === 'StartsWith') {
              return checkValue.slice(0, value.length) === value;
            } else if (this.filterType === 'EndsWith') {
              return checkValue.slice(-value.length) === value;
            } else {
              return checkValue.indexOf(value) !== -1;
            }
          }
          /* To wire events for the dropdown tree */

        }, {
          key: "wireEvents",
          value: function wireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper, 'mouseup', this.dropDownClick, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper, 'focus', this.focusIn, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper, 'blur', this.focusOut, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper, 'mousemove', this.mouseIn, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper, 'mouseout', this.onMouseLeave, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.overAllClear, 'mousedown', this.clearAll, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(window, 'resize', this.windowResize, this);

            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.inputWrapper, 'form');

            if (formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(formElement, 'reset', this.resetValueHandler, this);
            }

            this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.inputWrapper, {
              keyAction: this.keyActionHandler.bind(this),
              keyConfigs: this.keyConfigs,
              eventName: 'keydown'
            });
          }
        }, {
          key: "wireTreeEvents",
          value: function wireTreeEvents() {
            this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.tree, {
              keyAction: this.treeAction.bind(this),
              keyConfigs: this.keyConfigs,
              eventName: 'keydown'
            });
          }
        }, {
          key: "wireCheckAllWrapperEvents",
          value: function wireCheckAllWrapperEvents() {
            this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.checkAllParent, {
              keyAction: this.checkAllAction.bind(this),
              keyConfigs: this.keyConfigs,
              eventName: 'keydown'
            });
          }
          /* To unwire events for the dropdown tree */

        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputWrapper, 'mouseup', this.dropDownClick);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputWrapper, 'focus', this.focusIn);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputWrapper, 'blur', this.focusOut);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputWrapper, 'mousemove', this.mouseIn);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputWrapper, 'mouseout', this.onMouseLeave);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.overAllClear, 'mousedown', this.clearAll);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(window, 'resize', this.windowResize);

            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.inputWrapper, 'form');

            if (formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(formElement, 'reset', this.resetValueHandler);
            }
          }
          /* Trigger when the dropdown is clicked */

        }, {
          key: "dropDownClick",
          value: function dropDownClick(e) {
            if (!this.enabled || this.readonly) {
              return;
            }

            if (this.isClearButtonClick) {
              this.isClearButtonClick = false;
              return;
            }

            if (!this.wrapText && e.target.classList.contains(CHIP_CLOSE)) {
              this.removeChip(e);
            }

            if (this.isPopupOpen) {
              this.hidePopup();
            } else {
              this.focusIn(e);
              this.renderPopup();
            }

            this.showOverAllClear();
          }
        }, {
          key: "mouseIn",
          value: function mouseIn() {
            if (this.enabled || !this.readonly) {
              this.showOverAllClear();
            }
          }
        }, {
          key: "onMouseLeave",
          value: function onMouseLeave() {
            if (!this.inputFocus) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overAllClear], HIDEICON);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], SHOW_CLEAR);
            }
          }
        }, {
          key: "getDirective",
          value: function getDirective() {
            return 'EJS-DROPDOWNTREE';
          }
        }, {
          key: "focusOut",
          value: function focusOut(e) {
            if (!this.enabled || this.readonly || !this.inputFocus) {
              return;
            }

            if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'edge') && e.target === this.inputWrapper) {
              return;
            }

            var target = e.relatedTarget;

            if (target !== this.inputEle && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target) && (e.target !== this.inputWrapper || !this.isPopupOpen)) {
              this.onFocusOut(e);
            }
          }
        }, {
          key: "onFocusOut",
          value: function onFocusOut(event) {
            this.inputFocus = false;

            if (this.isPopupOpen) {
              this.hidePopup();
            }

            if (this.isClearButtonClick) {
              this.isClearButtonClick = false;
            }

            if (this.showClearButton) {
              this.clearIconWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-clear-icon', this.inputWrapper).offsetWidth;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overAllClear], HIDEICON);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], SHOW_CLEAR);
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], [INPUTFOCUS]);

            if (this.allowMultiSelection || this.showCheckBox) {
              var isValue = this.value ? this.value.length ? true : false : false;

              if (this.mode !== 'Delimiter') {
                if (this.chipWrapper && this.mode === 'Default') {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.chipWrapper], HIDEICON);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], SHOW_CHIP);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputEle], CHIP_INPUT);
                }
              }

              if (!this.wrapText && isValue) {
                this.updateView();
              }
            }

            if (this.changeOnBlur) {
              this.triggerChangeEvent(event);
            }

            this.removeValue = false;
            this.oldValue = this.value;
            this.trigger('blur');
          }
        }, {
          key: "updateView",
          value: function updateView() {
            if (!this.showCheckBox && !this.allowMultiSelection) {
              return;
            }

            if (this.mode !== 'Box') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper, this.overFlowWrapper], SHOW_TEXT);
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper], SHOW_CHIP);
            }

            if (this.value && this.value.length !== 0) {
              if (this.inputWrapper.contains(this.chipWrapper)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.chipWrapper], HIDEICON);
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputEle], CHIP_INPUT);
              this.updateOverFlowView();
              this.ensurePlaceHolder();
            }
          }
        }, {
          key: "triggerChangeEvent",
          value: function triggerChangeEvent(event) {
            var isEqual = this.compareValues(this.oldValue, this.value);

            if ((!isEqual || this.isChipDelete) && !this.removeValue) {
              var eventArgs = {
                e: event,
                oldValue: this.oldValue,
                value: this.value,
                isInteracted: event ? true : false,
                element: this.element
              };
              this.trigger('change', eventArgs);
            }
          }
        }, {
          key: "compareValues",
          value: function compareValues(oldValue, newValue) {
            if (oldValue === null || oldValue.length === 0) {
              var isValid = oldValue === null ? newValue === oldValue ? true : false : oldValue.length === 0 ? newValue === oldValue : false;
              return isValid;
            } else if (oldValue.length !== newValue.length) {
              return false;
            }

            for (var i = 0; i < oldValue.length; i++) {
              if (oldValue[i] !== newValue[i]) {
                return false;
              }
            }

            return true;
          }
        }, {
          key: "focusIn",
          value: function focusIn(e) {
            if (!this.enabled || this.readonly || this.inputFocus) {
              return;
            }

            this.showOverAllClear();
            this.inputFocus = true;
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper], [INPUTFOCUS]);

            if (this.allowMultiSelection || this.showCheckBox) {
              if (this.mode !== 'Delimiter' && this.inputFocus) {
                if (this.chipWrapper && this.value && this.value.length !== 0) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.chipWrapper], HIDEICON);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputEle], CHIP_INPUT);
                }

                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper], SHOW_CHIP);

                if (this.popupObj) {
                  this.popupObj.refreshPosition();
                }
              }

              if (!this.wrapText) {
                if (this.inputWrapper.contains(this.overFlowWrapper)) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overFlowWrapper], HIDEICON);
                }

                if (this.mode === 'Delimiter') {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], SHOW_CHIP);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputEle], CHIP_INPUT);
                } else {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper], SHOW_CHIP);
                }

                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], SHOW_TEXT);
                this.ensurePlaceHolder();
              }
            }

            var args = {
              isInteracted: e ? true : false,
              event: e
            };
            this.trigger('focus', args);
          }
        }, {
          key: "treeAction",
          value: function treeAction(e) {
            var _this159 = this;

            var eventArgs = {
              cancel: false,
              event: e
            };
            this.trigger('keyPress', eventArgs, function (observedArgs) {
              if (!observedArgs.cancel) {
                switch (e.action) {
                  case 'escape':
                  case 'altUp':
                    _this159.inputWrapper.focus();

                    e.preventDefault();

                    if (_this159.isPopupOpen) {
                      _this159.hidePopup();
                    }

                    break;

                  case 'tab':
                  case 'shiftTab':
                    if (_this159.isPopupOpen) {
                      _this159.hidePopup();
                    }

                    break;

                  case 'enter':
                  case 'ctrlEnter':
                  case 'shiftEnter':
                  case 'csEnter':
                    if (!_this159.showCheckBox) {
                      _this159.isValueChange = true;
                      _this159.keyEventArgs = e;
                    }

                    break;

                  case 'space':
                    _this159.isValueChange = true;
                    _this159.keyEventArgs = e;
                    break;

                  case 'ctrlA':
                    if (_this159.allowMultiSelection) {
                      _this159.selectAll(true);
                    }

                    break;

                  case 'moveRight':
                  case 'moveLeft':
                  case 'shiftDown':
                  case 'moveDown':
                  case 'ctrlDown':
                  case 'csDown':
                  case 'shiftUp':
                  case 'moveUp':
                  case 'ctrlUp':
                  case 'csUp':
                  case 'home':
                  case 'shiftHome':
                  case 'ctrlHome':
                  case 'csHome':
                  case 'end':
                  case 'shiftEnd':
                  case 'ctrlEnd':
                  case 'csEnd':
                }
              } else {
                e.stopImmediatePropagation();
              }
            });
          }
        }, {
          key: "keyActionHandler",
          value: function keyActionHandler(e) {
            var _this160 = this;

            var eventArgs = {
              cancel: false,
              event: e
            };
            this.trigger('keyPress', eventArgs, function (observedArgs) {
              if (!observedArgs.cancel) {
                switch (e.action) {
                  case 'escape':
                  case 'altUp':
                  case 'shiftTab':
                  case 'tab':
                    if (_this160.isPopupOpen) {
                      _this160.hidePopup();
                    }

                    break;

                  case 'altDown':
                    if (!_this160.isPopupOpen) {
                      _this160.showPopup();

                      e.preventDefault();
                    }

                    break;

                  case 'moveDown':
                    if (_this160.showSelectAll && _this160.showCheckBox) {
                      _this160.checkAllParent.focus();
                    }

                    break;
                }
              }
            });
          }
        }, {
          key: "checkAllAction",
          value: function checkAllAction(e) {
            var _this161 = this;

            var eventArgs = {
              cancel: false,
              event: e
            };
            this.trigger('keyPress', eventArgs, function (observedArgs) {
              if (!observedArgs.cancel) {
                switch (e.action) {
                  case 'space':
                    _this161.clickHandler(e);

                    break;

                  case 'moveDown':
                    _this161.treeObj.element.focus();

                }
              }
            });
          }
        }, {
          key: "windowResize",
          value: function windowResize() {
            if (this.popupObj) {
              this.popupObj.setProperties({
                width: this.setWidth()
              });
              this.popupObj.refreshPosition();
            }
          }
        }, {
          key: "resetValueHandler",
          value: function resetValueHandler(e) {
            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.inputWrapper, 'form');

            if (formElement && e.target === formElement) {
              this.resetValue(true);
            }
          }
        }, {
          key: "getAriaAttributes",
          value: function getAriaAttributes() {
            var disable = this.enabled ? 'false' : 'true';
            return {
              'aria-disabled': disable,
              'aria-owns': this.element.id + '_options',
              'role': 'listbox',
              'aria-haspopup': 'true',
              'aria-expanded': 'false',
              'aria-activedescendant': 'null',
              'aria-labelledby': this.hiddenElement.id
            };
          }
        }, {
          key: "updateOverFlowView",
          value: function updateOverFlowView() {
            this.overFlowWrapper.classList.remove(TOTAL_COUNT_WRAPPER);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.overFlowWrapper], HIDEICON);

            if (this.value && this.value.length) {
              var data = '';
              var overAllContainer;
              var temp;
              var tempData;
              var tempIndex = 1;
              var wrapperleng;
              var remaining;
              var downIconWidth = 0;
              this.overFlowWrapper.innerHTML = '';
              var l10nLocale = {
                overflowCountTemplate: '+${count} more..',
                totalCountTemplate: '${count} selected'
              };
              this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"](this.getLocaleName(), l10nLocale, this.locale);
              var remainContent = this.l10n.getConstant('overflowCountTemplate');
              var remainElement = this.createElement('span', {
                className: REMAIN_WRAPPER
              });
              var compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(remainContent);
              var totalCompiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.l10n.getConstant('totalCountTemplate'));
              remainElement.appendChild(compiledString({
                'count': this.value.length
              }, null, null, null, !this.isStringTemplate)[0]);
              this.overFlowWrapper.appendChild(remainElement);
              var remainSize = remainElement.offsetWidth;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(remainElement);

              if (this.showDropDownIcon) {
                downIconWidth = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + DDTICON, this.inputWrapper).offsetWidth;
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
                if (this.mode !== 'Box') {
                  for (var index = 0; !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value[index]); index++) {
                    data += index === 0 ? '' : this.delimiterChar + ' ';
                    temp = this.getOverflowVal(index);
                    data += temp;
                    temp = this.overFlowWrapper.innerHTML;
                    this.overFlowWrapper.innerHTML = data;
                    wrapperleng = this.overFlowWrapper.offsetWidth;
                    overAllContainer = this.inputWrapper.offsetWidth;

                    if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {
                      if (tempData !== undefined && tempData !== '') {
                        temp = tempData;
                        index = tempIndex + 1;
                      }

                      this.overFlowWrapper.innerHTML = temp;
                      remaining = this.value.length - index;
                      wrapperleng = this.overFlowWrapper.offsetWidth;

                      while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== '') {
                        var textArr = this.overFlowWrapper.innerHTML.split(this.delimiterChar);
                        textArr.pop();
                        this.overFlowWrapper.innerHTML = textArr.join(this.delimiterChar);
                        remaining++;
                        wrapperleng = this.overFlowWrapper.offsetWidth;
                      }

                      break;
                    } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
                      tempData = data;
                      tempIndex = index;
                    } else if (index === 0) {
                      tempData = '';
                      tempIndex = -1;
                    }
                  }
                } else {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.chipWrapper], HIDEICON);
                  var ele = this.chipWrapper.cloneNode(true);
                  var chips = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CHIP, ele);

                  for (var i = 0; i < chips.length; i++) {
                    temp = this.overFlowWrapper.innerHTML;
                    this.overFlowWrapper.appendChild(chips[i]);
                    data = this.overFlowWrapper.innerHTML;
                    wrapperleng = this.overFlowWrapper.offsetWidth;
                    overAllContainer = this.inputWrapper.offsetWidth;

                    if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {
                      if (tempData !== undefined && tempData !== '') {
                        temp = tempData;
                        i = tempIndex + 1;
                      }

                      this.overFlowWrapper.innerHTML = temp;
                      remaining = this.value.length - i;
                      wrapperleng = this.overFlowWrapper.offsetWidth;

                      while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== '') {
                        this.overFlowWrapper.removeChild(this.overFlowWrapper.lastChild);
                        remaining++;
                        wrapperleng = this.overFlowWrapper.offsetWidth;
                      }

                      break;
                    } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
                      tempData = data;
                      tempIndex = i;
                    } else if (i === 0) {
                      tempData = '';
                      tempIndex = -1;
                    }
                  }
                }
              }

              if (remaining > 0) {
                var totalWidth = overAllContainer - (downIconWidth + this.clearIconWidth);
                this.overFlowWrapper.appendChild(this.updateRemainTemplate(remainElement, remaining, compiledString, totalCompiledString, totalWidth));
              }

              if (this.mode === 'Box' && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([remainElement], REMAIN_COUNT);
              }
            } else {
              this.overFlowWrapper.innerHTML = '';
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overFlowWrapper], HIDEICON);
            }

            this.updateDelimMode();
          }
        }, {
          key: "updateRemainTemplate",
          value: function updateRemainTemplate(remainElement, remaining, compiledString, totalCompiledString, totalWidth) {
            if (this.overFlowWrapper.firstChild && this.overFlowWrapper.firstChild.nodeType === 3 && this.overFlowWrapper.firstChild.nodeValue === '') {
              this.overFlowWrapper.removeChild(this.overFlowWrapper.firstChild);
            }

            remainElement.innerHTML = '';
            remainElement.appendChild(this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === 'Box') ? compiledString({
              'count': remaining
            }, null, null, null, !this.isStringTemplate)[0] : totalCompiledString({
              'count': remaining
            }, null, null, null, !this.isStringTemplate)[0]);

            if (this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === 'Box')) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.overFlowWrapper], REMAIN_COUNT);
            }

            return remainElement;
          }
        }, {
          key: "getOverflowVal",
          value: function getOverflowVal(index) {
            var temp;
            var selectedData = this.getSelectedData(this.value[index]);
            temp = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.treeSettings.loadOnDemand ? this.fields.text : 'text', selectedData);
            return temp;
          }
        }, {
          key: "updateDelimMode",
          value: function updateDelimMode() {
            if (this.mode !== 'Box') {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + REMAIN_WRAPPER, this.overFlowWrapper) && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overFlowWrapper], REMAIN_COUNT);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overFlowWrapper], SHOW_TEXT);
              } else {
                this.overFlowWrapper.classList.remove(REMAIN_COUNT);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.overFlowWrapper], REMAIN_COUNT);
              }
            } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + REMAIN_WRAPPER, this.overFlowWrapper)) {
              this.overFlowWrapper.classList.remove(REMAIN_COUNT);
            }
          }
        }, {
          key: "createHiddenElement",
          value: function createHiddenElement() {
            if (this.allowMultiSelection || this.showCheckBox) {
              this.hiddenElement = this.createElement('select', {
                attrs: {
                  'aria-hidden': 'true',
                  'class': HIDDENELEMENT,
                  'tabindex': '-1',
                  'multiple': ''
                }
              });
            } else {
              this.hiddenElement = this.createElement('select', {
                attrs: {
                  'aria-hidden': 'true',
                  'tabindex': '-1',
                  'class': HIDDENELEMENT
                }
              });
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.hiddenElement], this.inputWrapper);
            this.validationAttribute();
          }
        }, {
          key: "createClearIcon",
          value: function createClearIcon() {
            this.overAllClear = this.createElement('span', {
              className: CLOSEICON_CLASS
            });
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overAllClear], HIDEICON);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], SHOW_CLEAR);

            if (this.showClearButton) {
              this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);
            }
          }
        }, {
          key: "validationAttribute",
          value: function validationAttribute() {
            var name = this.inputEle.getAttribute('name') ? this.inputEle.getAttribute('name') : this.inputEle.getAttribute('id');
            this.hiddenElement.setAttribute('name', name);
            this.inputEle.removeAttribute('name');
            var attributes$$1 = ['required', 'aria-required', 'form'];

            for (var i = 0; i < attributes$$1.length; i++) {
              var attr = this.inputEle.getAttribute(attributes$$1[i]);

              if (attr) {
                this.hiddenElement.setAttribute(attributes$$1[i], attr);
                this.inputEle.removeAttribute(attributes$$1[i]);
              }
            }
          }
        }, {
          key: "createChip",
          value: function createChip() {
            if (!this.inputWrapper.contains(this.chipWrapper)) {
              this.chipWrapper = this.createElement('span', {
                className: CHIP_WRAPPER
              });
              this.chipCollection = this.createElement('span', {
                className: CHIP_COLLECTION
              });
              this.chipWrapper.appendChild(this.chipCollection);
              this.inputWrapper.insertBefore(this.chipWrapper, this.hiddenElement);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper], SHOW_CHIP);
              var isValid = this.getValidMode();

              if (isValid && this.value !== null) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputEle], CHIP_INPUT);
              } else if (this.value === null) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.chipWrapper], HIDEICON);
              }
            }
          }
        }, {
          key: "getValidMode",
          value: function getValidMode() {
            if (this.allowMultiSelection || this.showCheckBox) {
              return this.mode === 'Box' ? true : this.mode === 'Default' && this.inputFocus ? true : false;
            } else {
              return false;
            }
          }
        }, {
          key: "createSelectAllWrapper",
          value: function createSelectAllWrapper() {
            this.checkAllParent = this.createElement('div', {
              className: CHECKALLPARENT,
              attrs: {
                'tabindex': '0'
              }
            });
            this.selectAllSpan = this.createElement('span', {
              className: ALLTEXT
            });
            this.selectAllSpan.textContent = '';
            var ele = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, '.' + BIGGER);
            var touchClass = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele) ? '' : SMALL;
            this.checkBoxElement = Object(_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__["createCheckBox"])(this.createElement, true, {
              cssClass: touchClass
            });
            this.checkBoxElement.setAttribute('role', 'checkbox');
            this.checkAllParent.appendChild(this.checkBoxElement);
            this.checkAllParent.appendChild(this.selectAllSpan);
            this.setLocale();

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.checkAllParent, 'mouseup', this.clickHandler, this);

            this.wireCheckAllWrapperEvents();
          }
        }, {
          key: "clickHandler",
          value: function clickHandler(e) {
            var target;

            if (e.currentTarget && e.currentTarget.classList.contains(CHECKALLPARENT)) {
              target = e.currentTarget.firstElementChild.lastElementChild;
            } else {
              target = e.target;
            }

            this.checkWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + CHECKBOXWRAP);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.checkWrapper)) {
              var checkElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXFRAME, this.checkWrapper);
              this.changeState(this.checkWrapper, checkElement.classList.contains(CHECK) ? 'uncheck' : 'check', e);
            }

            e.preventDefault();
          }
        }, {
          key: "changeState",
          value: function changeState(wrapper, state, e) {
            var ariaState;
            var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];

            if (state === 'check' && !frameSpan.classList.contains(CHECK)) {
              frameSpan.classList.add(CHECK);
              ariaState = 'true';

              if (!this.isReverseUpdate) {
                this.treeObj.checkAll();

                if (!this.changeOnBlur) {
                  this.triggerChangeEvent(e);
                }
              }

              this.setLocale(true);
            } else if (state === 'uncheck' && frameSpan.classList.contains(CHECK)) {
              frameSpan.classList.remove(CHECK);
              ariaState = 'false';

              if (!this.isReverseUpdate) {
                this.treeObj.uncheckAll();

                if (!this.changeOnBlur) {
                  this.triggerChangeEvent(e);
                }
              }

              this.setLocale(false);
            }

            this.setMultiSelect();
            this.ensurePlaceHolder();
            ariaState = state === 'check' ? 'true' : 'false';

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ariaState)) {
              wrapper.setAttribute('aria-checked', ariaState);
            }
          }
        }, {
          key: "setLocale",
          value: function setLocale(unSelect) {
            if (!this.selectAllSpan) {
              return;
            }

            if (this.selectAllText !== 'Select All' || this.unSelectAllText !== 'Unselect All') {
              var template = unSelect ? this.unSelectAllText : this.selectAllText;
              var compiledString;
              this.selectAllSpan.textContent = '';
              compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);

              var _iterator75 = _createForOfIteratorHelper(compiledString({}, null, null, null, !this.isStringTemplate)),
                  _step75;

              try {
                for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {
                  var item = _step75.value;
                  this.selectAllSpan.textContent = item.textContent;
                }
              } catch (err) {
                _iterator75.e(err);
              } finally {
                _iterator75.f();
              }
            } else {
              this.selectAllSpan.textContent = unSelect ? this.unSelectAllText : this.selectAllText;
            }
          }
        }, {
          key: "setAttributes",
          value: function setAttributes() {
            this.element.removeAttribute('tabindex');
            var id = this.element.getAttribute('id');
            this.hiddenElement.id = id + '_hidden';
            this.inputWrapper.setAttribute('tabindex', '0');
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.inputWrapper, this.getAriaAttributes());
          }
        }, {
          key: "setHTMLAttributes",
          value: function setHTMLAttributes() {
            if (Object.keys(this.htmlAttributes).length) {
              for (var _i84 = 0, _Object$keys24 = Object.keys(this.htmlAttributes); _i84 < _Object$keys24.length; _i84++) {
                var htmlAttr = _Object$keys24[_i84];

                if (htmlAttr === 'class') {
                  this.inputWrapper.classList.add(this.htmlAttributes[htmlAttr]);
                } else if (htmlAttr === 'disabled' && this.htmlAttributes[htmlAttr] === 'disabled') {
                  this.setProperties({
                    enabled: false
                  }, true);
                  this.setEnable();
                } else if (htmlAttr === 'readonly' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes[htmlAttr])) {
                  this.setProperties({
                    readonly: true
                  }, true);
                  this.dataBind();
                } else if (htmlAttr === 'style') {
                  this.inputWrapper.setAttribute('style', this.htmlAttributes[htmlAttr]);
                } else {
                  var defaultAttr = ['title', 'id', 'placeholder', 'aria-placeholder', 'role', 'autocorrect', 'autocomplete', 'autocapitalize', 'spellcheck', 'minlength', 'maxlength'];
                  var validateAttr = ['name', 'required'];

                  if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {
                    this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                  } else if (defaultAttr.indexOf(htmlAttr) > -1) {
                    htmlAttr === 'placeholder' ? _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setPlaceholder(this.htmlAttributes[htmlAttr], this.inputEle) : this.inputEle.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                  } else {
                    this.inputWrapper.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                  }
                }
              }
            }
          }
        }, {
          key: "updateDataAttribute",
          value: function updateDataAttribute() {
            var value = this.htmlAttributes;
            var invalidAttr = ['class', 'style', 'id', 'type'];
            var attr = {};

            for (var a = 0; a < this.element.attributes.length; a++) {
              if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.element.attributes[a].name === 'readonly')) {
                attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
              }
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(attr, value, attr);
            this.setProperties({
              htmlAttributes: attr
            }, true);
          }
        }, {
          key: "showOverAllClear",
          value: function showOverAllClear() {
            if (!this.enabled || this.readonly) {
              return;
            }

            if (this.overAllClear) {
              var isValue = this.value ? this.value.length ? true : false : false;

              if (isValue && this.showClearButton) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.overAllClear], HIDEICON);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper], SHOW_CLEAR);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overAllClear], HIDEICON);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], SHOW_CLEAR);
              }
            }
          }
        }, {
          key: "setTreeValue",
          value: function setTreeValue() {
            if (this.value !== null && this.value.length !== 0) {
              var data;

              if (this.showCheckBox || this.allowMultiSelection) {
                for (var i = 0; i < this.value.length; i++) {
                  data = this.treeObj.getTreeData(this.value[i])[0];

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data)) {
                    this.value.splice(this.value.indexOf(this.value[i]), 1);
                  }
                }

                if (this.value.length !== 0) {
                  this.setValidValue();
                }
              } else {
                data = this.treeObj.getTreeData(this.value[0])[0];

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data)) {
                  this.setProperties({
                    text: data[this.fields.text]
                  }, true);
                  this.setValidValue();
                } else {
                  this.setProperties({
                    value: this.currentValue
                  }, true);
                }
              }
            }
          }
        }, {
          key: "setTreeText",
          value: function setTreeText() {
            if (this.value !== null && !this.isInitialized) {
              return;
            }

            if (this.text !== null) {
              var data;
              var valArr = [];

              if (this.showCheckBox || this.allowMultiSelection) {
                var textArr = this.text.split(this.delimiterChar);

                for (var i = 0; i < textArr.length; i++) {
                  data = this.getItems(textArr[i]);

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data)) {
                    valArr.push(data[this.fields.value].toString());
                  }
                }

                if (valArr.length !== 0) {
                  this.oldValue = this.value;
                  this.setProperties({
                    value: valArr
                  }, true);
                  this.setValidValue();
                } else {
                  this.setProperties({
                    text: this.currentText
                  }, true);
                }
              } else {
                data = this.getItems(this.text);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data)) {
                  this.oldValue = this.value;
                  this.setProperties({
                    value: [data[this.fields.value].toString()]
                  }, true);
                  this.setValidValue();
                } else {
                  this.setProperties({
                    text: this.currentText
                  }, true);
                }
              }
            }
          }
        }, {
          key: "setSelectedValue",
          value: function setSelectedValue() {
            if (this.value != null) {
              return;
            }

            if (!this.isInitialized) {
              this.oldValue = this.value;

              if (this.treeObj.selectedNodes.length > 0 && !this.showCheckBox) {
                this.setProperties({
                  value: this.treeObj.selectedNodes
                }, true);

                if (this.allowMultiSelection) {
                  this.updateMode();
                }
              } else if (this.showCheckBox && this.treeObj.checkedNodes) {
                if (this.treeObj.checkedNodes.length > 0) {
                  this.setProperties({
                    value: this.treeObj.checkedNodes
                  }, true);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('selectedNodes', [], this.treeObj);
                  this.treeObj.dataBind();
                  this.updateMode();
                }
              }

              this.updateSelectedValues();
              this.currentText = this.text;
              this.currentValue = this.value;
            }
          }
        }, {
          key: "setValidValue",
          value: function setValidValue() {
            if (!this.showCheckBox && !this.allowMultiSelection) {
              _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(this.text, this.inputEle, this.floatLabelType);

              var id = this.value[0].toString();

              if (this.treeObj.selectedNodes[0] !== id) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('selectedNodes', [id], this.treeObj);
              }
            } else {
              if (this.showCheckBox) {
                this.treeObj.checkedNodes = this.value.slice();
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('selectedNodes', [], this.treeObj);
                this.treeObj.dataBind();
                this.setMultiSelect();
              } else {
                this.treeObj.selectedNodes = this.value.slice();
                this.selectedText = [];
                this.updateSelectedValues();
              }

              this.treeObj.dataBind();
            }

            this.currentText = this.text;
            this.currentValue = this.value;

            if (this.isInitialized) {
              this.triggerChangeEvent();
            }
          }
        }, {
          key: "getItems",
          value: function getItems(givenText) {
            var data;

            if (this.treeDataType === 1) {
              for (var i = 0; i < this.treeItems.length; i++) {
                var text = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.text, this.treeItems[i]);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.treeItems[i]) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(text) && text === givenText) {
                  data = this.treeItems[i];
                  break;
                }
              }
            } else {
              data = this.getNestedItems(this.treeItems, this.fields, givenText);
            }

            return data;
          }
        }, {
          key: "getNestedItems",
          value: function getNestedItems(data, field, givenText) {
            var newData;

            for (var i = 0, objlen = data.length; i < objlen; i++) {
              var dataId = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.text, data[i]);

              if (data[i] && dataId && dataId.toString() === givenText) {
                return data[i];
              } else if (typeof field.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(field.child, data[i]))) {
                var childData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(field.child, data[i]);
                newData = this.getNestedItems(childData, this.getChildType(field), givenText);

                if (newData !== undefined) {
                  break;
                }
              } else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('child', data[i]))) {
                var child = 'child';
                newData = this.getNestedItems(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(child, data[i]), this.getChildType(field), givenText);

                if (newData !== undefined) {
                  break;
                }
              }
            }

            return newData;
          }
        }, {
          key: "getChildType",
          value: function getChildType(mapper) {
            return typeof mapper.child === 'string' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper.child) ? mapper : mapper.child;
          }
          /* To render the treeview */

        }, {
          key: "renderTree",
          value: function renderTree() {
            this.treeObj = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_6__["TreeView"]({
              fields: this.getTreeFields(this.fields),
              enableRtl: this.enableRtl,
              nodeSelected: this.onNodeSelected.bind(this),
              nodeChecked: this.onNodeChecked.bind(this),
              nodeChecking: this.beforeCheck.bind(this),
              actionFailure: this.onActionFailure.bind(this),
              nodeClicked: this.onNodeClicked.bind(this),
              dataBound: this.OnDataBound.bind(this),
              allowMultiSelection: this.allowMultiSelection,
              showCheckBox: this.showCheckBox,
              autoCheck: this.treeSettings.autoCheck,
              sortOrder: this.sortOrder,
              expandOn: this.treeSettings.expandOn,
              loadOnDemand: this.treeSettings.loadOnDemand,
              nodeSelecting: this.onBeforeSelect.bind(this),
              nodeTemplate: this.itemTemplate
            });
            this.treeObj.appendTo('#' + this.tree.id);
          }
          /* To render the popup element */

        }, {
          key: "renderPopup",
          value: function renderPopup() {
            var _this162 = this;

            if (this.isFilteredData) {
              this.filterObj.value = '';
              this.treeObj.fields = this.getTreeFields(this.fields);
              this.isFilterRestore = true;
              this.isFilteredData = false;
              this.hideCheckAll(false);
            }

            var isCancelled = false;
            var args = {
              cancel: false
            };
            this.trigger('beforeOpen', args, function (args) {
              if (!args.cancel) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this162.inputWrapper], [ICONANIMATION]);

                if (_this162.isFirstRender) {
                  _this162.popupEle = _this162.createElement('div', {
                    id: _this162.element.id + '_popup',
                    className: POPUP_CLASS + ' ' + (_this162.cssClass != null ? _this162.cssClass : '')
                  });
                  document.body.appendChild(_this162.popupEle);

                  _this162.createPopup(_this162.popupEle);
                } else {
                  _this162.popupEle = _this162.popupObj.element;
                }
              } else {
                isCancelled = true;
              }

              if (_this162.isFirstRender && !isCancelled) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([_this162.popupDiv], _this162.popupEle);
                _this162.popupDiv.style.display = 'block';

                if (_this162.allowFiltering) {
                  _this162.renderFilter();
                }

                if (_this162.showCheckBox && _this162.showSelectAll && !_this162.popupDiv.classList.contains(NODATA)) {
                  _this162.createSelectAllWrapper();

                  _this162.popupEle.insertBefore(_this162.checkAllParent, _this162.popupDiv);
                }

                if (_this162.headerTemplate) {
                  _this162.setHeaderTemplate();
                }

                if (_this162.footerTemplate) {
                  _this162.setFooterTemplate();
                }

                _this162.isFirstRender = false;
              }

              if (!isCancelled) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(_this162.inputWrapper, {
                  'aria-expanded': 'true'
                });

                _this162.popupObj.show(null, _this162.zIndex === 1000 ? _this162.inputEle : null);

                _this162.popupEle.style.display = 'block';

                _this162.updatePopupHeight();

                _this162.popupObj.refreshPosition();

                if (!(_this162.showCheckBox && _this162.showSelectAll) && !_this162.popupDiv.classList.contains(NODATA) && _this162.treeItems.length > 0) {
                  _this162.treeObj.element.focus();
                }

                if (_this162.checkSelectAll && _this162.checkBoxElement) {
                  var wrap = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(_this162.checkBoxElement, '.' + CHECKBOXWRAP);

                  _this162.changeState(wrap, 'check');

                  _this162.checkSelectAll = false;
                }

                if (_this162.allowFiltering) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([_this162.inputWrapper], [INPUTFOCUS]);

                  _this162.filterObj.element.focus();
                }

                var eventArgs = {
                  popup: _this162.popupObj
                };

                _this162.trigger('open', eventArgs);
              }
            });
          }
        }, {
          key: "updatePopupHeight",
          value: function updatePopupHeight() {
            if (this.isFirstRender) {
              return;
            }

            var popupHeight = this.getHeight();
            this.popupEle.style.maxHeight = popupHeight;

            if (this.allowFiltering) {
              var height = Math.round(this.filterContainer.getBoundingClientRect().height);
              popupHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(parseInt(popupHeight, 10) - height + 'px');
            }

            if (this.headerTemplate) {
              var _height2 = Math.round(this.header.getBoundingClientRect().height);

              popupHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(parseInt(popupHeight, 10) - _height2 + 'px');
            }

            if (this.showCheckBox && this.showSelectAll) {
              var _height3 = Math.round(this.checkAllParent.getBoundingClientRect().height);

              popupHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(parseInt(popupHeight, 10) - _height3 + 'px');
            }

            if (this.footerTemplate) {
              var _height4 = Math.round(this.footer.getBoundingClientRect().height);

              popupHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(parseInt(popupHeight, 10) - _height4 + 'px');
            }

            var border = parseInt(window.getComputedStyle(this.popupEle).borderTopWidth, 10);
            border = border + parseInt(window.getComputedStyle(this.popupEle).borderBottomWidth, 10);
            popupHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(parseInt(popupHeight, 10) - border + 'px');
            this.popupDiv.style.maxHeight = popupHeight;
          }
        }, {
          key: "createPopup",
          value: function createPopup(element) {
            var _this163 = this;

            if (this.isFirstRender) {
              this.popupObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["Popup"](element, {
                width: this.setWidth(),
                targetType: 'relative',
                collision: {
                  X: 'flip',
                  Y: 'flip'
                },
                relateTo: this.inputWrapper,
                zIndex: this.zIndex,
                enableRtl: this.enableRtl,
                position: {
                  X: 'left',
                  Y: 'bottom'
                },
                close: function close() {
                  _this163.isPopupOpen = false;
                },
                open: function open() {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousedown', _this163.onDocumentClick, _this163);

                  _this163.isPopupOpen = true;
                },
                targetExitViewport: function targetExitViewport() {
                  if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                    _this163.hidePopup();
                  }
                }
              });
            }
          }
          /* To calculate the width when change via set model */

        }, {
          key: "setElementWidth",
          value: function setElementWidth(inputWidth) {
            var ddElement = this.inputWrapper;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(inputWidth)) {
              if (typeof inputWidth === 'number') {
                ddElement.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(inputWidth);
              } else if (typeof inputWidth === 'string') {
                ddElement.style.width = inputWidth.match(/px|%|em/) ? inputWidth : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(inputWidth);
              }
            }
          }
          /* To calculate the width of the popup */

        }, {
          key: "setWidth",
          value: function setWidth() {
            var width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.popupWidth);

            if (width.indexOf('%') > -1) {
              var inputWidth = this.inputWrapper.offsetWidth * parseFloat(width) / 100;
              width = inputWidth.toString() + 'px';
            } else if (typeof this.popupWidth === 'string') {
              width = this.popupWidth.match(/px|em/) ? this.popupWidth : width;
            }

            return width;
          }
          /* To calculate the height of the popup */

        }, {
          key: "getHeight",
          value: function getHeight() {
            var height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.popupHeight);

            if (height.indexOf('%') > -1) {
              // Will set the height of the popup according to the view port height
              var viewPortHeight = document.documentElement.clientHeight * parseFloat(height) / 100;
              height = viewPortHeight.toString() + 'px';
            } else if (typeof this.popupHeight === 'string') {
              height = this.popupHeight.match(/px|em/) ? this.popupHeight : height;
            }

            return height;
          }
        }, {
          key: "onDocumentClick",
          value: function onDocumentClick(e) {
            var target = e.target;
            var isTree = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + PARENTITEM);
            var isFilter = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + FILTERWRAP);
            var isScroller = target.classList.contains(DROPDOWN) ? true : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["matches"])(target, '.e-ddt .e-popup') || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["matches"])(target, '.e-ddt .e-treeview');

            if (this.isPopupOpen && (this.inputWrapper.contains(target) || isTree || isFilter || isScroller) || (this.allowMultiSelection || this.showCheckBox) && (this.isPopupOpen && target.classList.contains(CHIP_CLOSE) || this.isPopupOpen && (target.classList.contains(CHECKALLPARENT) || target.classList.contains(ALLTEXT) || target.classList.contains(CHECKBOXFRAME)))) {
              this.isDocumentClick = false;
              e.preventDefault();
            } else if (!this.inputWrapper.contains(target) && this.inputFocus) {
              this.focusOut(e);
            }
          }
        }, {
          key: "onActionFailure",
          value: function onActionFailure(e) {
            this.trigger('actionFailure', e);
            this.l10nUpdate(true);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.popupDiv], NODATA);
          }
        }, {
          key: "OnDataBound",
          value: function OnDataBound(args) {
            this.treeItems = args.data;

            if (this.treeItems.length <= 0) {
              this.l10nUpdate();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.popupDiv], NODATA);
              this.hideCheckAll(true);
            } else if (this.popupDiv.classList.contains(NODATA) && this.treeItems.length >= 1) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.popupDiv], NODATA);
              this.hideCheckAll(false);
            }

            this.treeDataType = this.getTreeDataType(this.treeItems, this.fields);

            if (this.isFirstRender && this.isRemoteData) {
              this.setTreeValue();
              this.setTreeText();
              this.updateHiddenValue();
              this.setSelectedValue();

              if (!this.wrapText) {
                this.updateView();
              }

              this.treeObj.element.focus();
            }

            var eventArgs = {
              data: args.data
            };
            this.trigger('dataBound', eventArgs);

            if (this.isFilteredData) {
              this.treeObj.expandAll();
            }

            if (this.isFilterRestore) {
              this.restoreFilterSelection();
              this.isFilterRestore = false;
            }
          }
        }, {
          key: "restoreFilterSelection",
          value: function restoreFilterSelection() {
            if (this.showCheckBox) {
              this.treeObj.checkedNodes = this.value ? this.value : [];
            } else {
              this.treeObj.selectedNodes = this.value ? this.value : [];
            }
          }
          /* To set cssclass for the dropdowntree */

        }, {
          key: "setCssClass",
          value: function setCssClass(newClass, oldClass) {
            var elements = this.popupObj ? [this.inputWrapper, this.popupObj.element] : [this.inputWrapper];

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldClass) && oldClass !== '') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(elements, oldClass.split(' '));
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newClass) && newClass !== '') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(elements, newClass.split(' '));
            }
          }
        }, {
          key: "setEnableRTL",
          value: function setEnableRTL(state) {
            if (state) {
              this.inputWrapper.classList.add(RTL);
            } else {
              this.inputWrapper.classList.remove(RTL);
            }

            if (this.popupObj) {
              this.popupObj.enableRtl = state;
              this.popupObj.dataBind();
            }

            if (this.treeObj) {
              this.treeObj.enableRtl = state;
              this.treeObj.dataBind();
            }
          }
          /* To set enable property */

        }, {
          key: "setEnable",
          value: function setEnable() {
            _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setEnabled(this.enabled, this.inputEle);

            if (this.enabled) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], DISABLED);
              this.inputEle.setAttribute('aria-disabled', 'false');
              this.inputWrapper.setAttribute('aria-disabled', 'false');
            } else {
              if (this.isPopupOpen) {
                this.hidePopup();
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper], DISABLED);

              if (this.inputWrapper && this.inputWrapper.classList.contains(INPUTFOCUS)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], [INPUTFOCUS]);
              }

              this.inputEle.setAttribute('aria-disabled', 'true');
              this.inputWrapper.setAttribute('aria-disabled', 'true');
            }
          }
        }, {
          key: "cloneFields",
          value: function cloneFields(fields) {
            var clonedField = {
              dataSource: fields.dataSource,
              value: fields.value,
              text: fields.text,
              parentValue: fields.parentValue,
              child: this.cloneChildField(fields.child),
              hasChildren: fields.hasChildren,
              expanded: fields.expanded,
              iconCss: fields.iconCss,
              imageUrl: fields.imageUrl,
              htmlAttributes: fields.htmlAttributes,
              query: fields.query,
              selected: fields.selected,
              tableName: fields.tableName,
              tooltip: fields.tooltip
            };
            return clonedField;
          }
        }, {
          key: "cloneChildField",
          value: function cloneChildField(fields) {
            if (typeof fields === 'string') {
              return fields;
            } else {
              var clonedField = {
                dataSource: fields.dataSource,
                value: fields.value,
                text: fields.text,
                parentValue: fields.parentValue,
                child: fields.child ? this.cloneChildField(fields.child) : null,
                hasChildren: fields.hasChildren,
                expanded: fields.expanded,
                iconCss: fields.iconCss,
                imageUrl: fields.imageUrl,
                htmlAttributes: fields.htmlAttributes,
                query: fields.query,
                selected: fields.selected,
                tableName: fields.tableName,
                tooltip: fields.tooltip
              };
              return clonedField;
            }
          }
        }, {
          key: "getTreeFields",
          value: function getTreeFields(fields) {
            var treeFields = {
              dataSource: fields.dataSource,
              id: fields.value,
              text: fields.text,
              parentID: fields.parentValue,
              child: this.getTreeChildren(fields.child),
              hasChildren: fields.hasChildren,
              expanded: fields.expanded,
              iconCss: fields.iconCss,
              imageUrl: fields.imageUrl,
              isChecked: fields.selected,
              htmlAttributes: fields.htmlAttributes,
              query: fields.query,
              selected: fields.selected,
              tableName: fields.tableName,
              tooltip: fields.tooltip
            };
            return treeFields;
          }
        }, {
          key: "getTreeChildren",
          value: function getTreeChildren(mapper) {
            if (typeof mapper === 'string') {
              return mapper;
            } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(mapper)) {
              var childFields;
              mapper = this.getActualProperties(mapper);
              childFields = mapper;

              if (mapper.value) {
                childFields.id = mapper.value;
              }

              if (mapper.parentValue) {
                childFields.parentID = mapper.parentValue;
              }

              if (mapper.child) {
                childFields.child = this.getTreeChildren(mapper.child);
              }

              if (mapper.selected && this.showCheckBox) {
                childFields.isChecked = mapper.selected;
              }

              return childFields;
            }

            return null;
          }
        }, {
          key: "getTreeDataType",
          value: function getTreeDataType(ds, field) {
            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) {
              for (var i = 0; i < ds.length; i++) {
                if (typeof field.child === 'string' && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(field.child, ds[i]))) {
                  return 1;
                }
              }

              return 2;
            }

            for (var _i85 = 0, len = ds.length; _i85 < len; _i85++) {
              if (typeof field.child === 'string' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(field.child, ds[_i85]))) {
                return 2;
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(field.parentValue, ds[_i85])) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(field.hasChildren, ds[_i85]))) {
                return 1;
              }
            }

            return 1;
          }
          /* Triggers when the tree fields is changed dynamically */

        }, {
          key: "setFields",
          value: function setFields() {
            this.resetValue();
            this.treeObj.fields = this.getTreeFields(this.fields);
            this.treeObj.dataBind();
          }
        }, {
          key: "getEventArgs",
          value: function getEventArgs(args) {
            var checkData = args.data;
            var selectData = args.nodeData;
            var state;

            if (this.showCheckBox) {
              if (args.action === 'check') {
                state = 'select';
              } else if (args.action === 'uncheck') {
                state = 'un-select';
              }
            }

            var eventArgs = {
              action: this.showCheckBox ? state : args.action,
              isInteracted: args.isInteracted,
              item: args.node,
              itemData: this.showCheckBox ? checkData[0] : selectData
            };
            return eventArgs;
          }
        }, {
          key: "onBeforeSelect",
          value: function onBeforeSelect(args) {
            if (args.isInteracted) {
              this.oldValue = this.value ? this.value.slice() : this.value;

              if (this.value === null) {
                this.setProperties({
                  value: []
                }, true);
              }
            }
          }
        }, {
          key: "updateHiddenValue",
          value: function updateHiddenValue() {
            if (this.allowMultiSelection || this.showCheckBox) {
              return;
            }

            if (this.value && this.value.length) {
              this.hiddenElement.innerHTML = '<option selected value ="' + this.value[0] + '">' + this.text + '</option>';
            } else {
              this.hiddenElement.innerHTML = '';
            }
          }
          /* Triggers when the tree node is selected */

        }, {
          key: "onNodeSelected",
          value: function onNodeSelected(args) {
            if (this.showCheckBox) {
              return;
            }

            var selectedText;

            if (args.isInteracted) {
              var id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('id', args.nodeData).toString();

              if (!this.allowMultiSelection) {
                this.hiddenElement.innerHTML = '';
                this.setProperties({
                  value: [id]
                }, true);

                if (this.itemTemplate) {
                  selectedText = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('text', this.treeObj.getNode(id));
                } else {
                  selectedText = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('text', args.nodeData).toString();
                }

                _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(selectedText, this.inputEle, this.floatLabelType);

                this.setProperties({
                  text: selectedText
                }, true);
                this.currentText = this.text;
                this.currentValue = this.value;
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.inputWrapper, {
                  'aria-describedby': this.element.id
                });
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.inputWrapper, {
                  'aria-activedescendant': id.toString()
                });
                this.updateHiddenValue();
                this.showOverAllClear();
                this.hidePopup();
                this.isNodeSelected = true;
              } else if (this.allowMultiSelection) {
                this.setMultiSelect();
              }
            }

            var eventArgs = this.getEventArgs(args);
            this.trigger('select', eventArgs);

            if (this.isValueChange && !this.changeOnBlur) {
              this.triggerChangeEvent(this.keyEventArgs);
              this.isValueChange = false;
            }
          }
        }, {
          key: "onNodeClicked",
          value: function onNodeClicked(args) {
            if (!this.changeOnBlur && this.isNodeSelected) {
              this.triggerChangeEvent(args.event);
              this.isNodeSelected = false;
            }

            var target = args.event.target;

            if ((target.classList.contains('e-fullrow') || target.classList.contains('e-list-text')) && this.showCheckBox) {
              var getNodeDetails = this.treeObj.getNode(args.node);

              if (getNodeDetails.isChecked === 'true') {
                this.treeObj.uncheckAll([args.node]);
              } else {
                this.treeObj.checkAll([args.node]);
              }

              this.setMultiSelect();
              this.ensurePlaceHolder();
            }

            if (!this.changeOnBlur && (this.allowMultiSelection || this.showCheckBox)) {
              this.triggerChangeEvent(args.event);
            }
          }
        }, {
          key: "onNodeChecked",
          value: function onNodeChecked(args) {
            var eventArgs = this.getEventArgs(args);
            this.trigger('select', eventArgs);

            if (this.isFilteredData && args.action === 'uncheck') {
              var id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('id', args.data[0]).toString();
              this.removeSelectedData(id, true);
            }

            if (!this.isChipDelete && args.isInteracted) {
              this.setMultiSelect();
              this.ensurePlaceHolder();
            }

            if (this.showSelectAll && this.checkBoxElement) {
              var nodes = this.treeObj.element.querySelectorAll('li');
              var checkedNodes = this.treeObj.element.querySelectorAll('li .e-checkbox-wrapper[aria-checked=true]');
              var wrap = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.checkBoxElement, '.' + CHECKBOXWRAP);

              if (wrap && args.action === 'uncheck') {
                this.isReverseUpdate = true;
                this.changeState(wrap, 'uncheck');
                this.isReverseUpdate = false;
              } else if (wrap && args.action === 'check' && checkedNodes.length === nodes.length) {
                this.isReverseUpdate = true;
                this.changeState(wrap, 'check');
                this.isReverseUpdate = false;
              }
            }
          }
        }, {
          key: "beforeCheck",
          value: function beforeCheck(args) {
            if (args.isInteracted) {
              this.oldValue = this.value ? this.value.slice() : this.value;
            }
          }
        }, {
          key: "updateClearButton",
          value: function updateClearButton(state) {
            if (state) {
              if (!this.inputWrapper.contains(this.overAllClear)) {
                this.inputEle.parentElement.insertBefore(this.overAllClear, this.inputEle.nextSibling);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.overAllClear], HIDEICON);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper], SHOW_CLEAR);
              }
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overAllClear], HIDEICON);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], SHOW_CLEAR);
            }

            if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {
              var chipClose = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + CHIP_CLOSE, this.chipWrapper);

              for (var i = 0; i < chipClose.length; i++) {
                if (!state) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([chipClose[i]], HIDEICON);
                } else {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([chipClose[i]], HIDEICON);
                }
              }
            }
          }
        }, {
          key: "updateDropDownIconState",
          value: function updateDropDownIconState(state) {
            var spinIcon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + DDTICON, this.inputWrapper);

            if (state) {
              if (!spinIcon) {
                _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].appendSpan(DROPDOWNICON, this.inputWrapper, this.createElement);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([spinIcon], HIDEICON);
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper], SHOW_DD_ICON);
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([spinIcon], HIDEICON);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], SHOW_DD_ICON);
            }
          }
        }, {
          key: "updateMode",
          value: function updateMode() {
            if (this.mode !== 'Delimiter') {
              if (!this.inputWrapper.contains(this.chipWrapper)) {
                this.createChip();
              }

              var isValid = this.getValidMode();

              if (this.chipWrapper.classList.contains(HIDEICON) && isValid) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.chipWrapper], HIDEICON);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper], SHOW_CHIP);
              } else if (!isValid) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.chipWrapper], HIDEICON);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], SHOW_CHIP);
              }

              var isValue = this.value !== null ? this.value.length !== 0 ? true : false : false;

              if (isValid && isValue) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputEle], CHIP_INPUT);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputEle], CHIP_INPUT);
              }
            } else if (this.inputEle.classList.contains(CHIP_INPUT)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputEle], CHIP_INPUT);

              if (this.chipWrapper) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.chipWrapper], HIDEICON);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], SHOW_CHIP);
              }
            }
          }
        }, {
          key: "ensurePlaceHolder",
          value: function ensurePlaceHolder() {
            if (this.value && this.value.length === 0) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputEle], CHIP_INPUT);

              if (this.chipWrapper) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.chipWrapper], HIDEICON);
              }
            }
          }
        }, {
          key: "ensureClearIconPosition",
          value: function ensureClearIconPosition(floatLabelType) {
            if (floatLabelType !== 'Never') {
              this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);
            }
          }
        }, {
          key: "setMultiSelectValue",
          value: function setMultiSelectValue(newValues) {
            if (!this.isFilteredData) {
              this.setProperties({
                value: newValues
              }, true);

              if (newValues && newValues.length !== 0 && !this.showCheckBox) {
                this.treeObj.selectedNodes = this.value.slice();
                this.treeObj.dataBind();
              }
            } else {
              var selectedValues = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) ? [] : this.value;

              for (var i = 0; i < newValues.length; i++) {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) || this.value.indexOf(newValues[i]) === -1) {
                  selectedValues.push(newValues[i]);
                }
              }

              this.setProperties({
                value: selectedValues
              }, true);
            }
          }
        }, {
          key: "setMultiSelect",
          value: function setMultiSelect() {
            if (this.showCheckBox && !this.isDynamicChange) {
              this.setMultiSelectValue(this.treeObj.checkedNodes);
            } else {
              var ddtValue = this.allowMultiSelection ? this.showCheckBox ? this.treeObj.checkedNodes : this.treeObj.selectedNodes : this.value ? this.showCheckBox ? this.value : [this.value[0]] : null;
              this.setMultiSelectValue(ddtValue);

              if (this.showCheckBox && this.value !== null) {
                this.treeObj.checkedNodes = this.value;
                this.treeObj.dataBind();
              }
            }

            this.selectedText = [];
            var checkSelection = this.allowMultiSelection ? true : this.showCheckBox ? true : false;

            if (this.inputWrapper.contains(this.chipWrapper) && !checkSelection) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputEle], CHIP_INPUT);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.chipWrapper);
            }

            var isValid = this.getValidMode();

            if (isValid && this.value !== null) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputEle], CHIP_INPUT);

              if (this.chipWrapper) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.chipWrapper], HIDEICON);
              }
            }

            var isValue = this.value ? this.value.length ? true : false : false;

            if (this.chipWrapper && this.mode === 'Box' && !isValue) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.chipWrapper], HIDEICON);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputEle], CHIP_INPUT);
            }

            this.updateSelectedValues();
          }
        }, {
          key: "getSelectedData",
          value: function getSelectedData(value) {
            var data = null;

            if (this.isFilteredData) {
              for (var i = 0; i < this.selectedData.length; i++) {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.treeSettings.loadOnDemand ? this.fields.value : 'id', this.selectedData[i]).toString() === value) {
                  data = this.selectedData[i];
                  break;
                }
              }
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data)) {
              if (this.treeSettings.loadOnDemand) {
                data = this.treeObj.getTreeData(value)[0];
              } else {
                data = this.treeObj.getNode(value);
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data)) {
                this.selectedData.push(data);
              }
            }

            return data;
          }
        }, {
          key: "removeSelectedData",
          value: function removeSelectedData(value, muteOnChange) {
            var selectedValues = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) ? [] : this.value.slice();
            selectedValues.splice(selectedValues.indexOf(value), 1);
            this.setProperties({
              value: selectedValues
            }, muteOnChange);

            for (var i = 0; i < this.selectedData.length; i++) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.treeSettings.loadOnDemand ? this.fields.value : 'id', this.selectedData[i]).toString() === value) {
                this.selectedData.splice(i, 1);
                break;
              }
            }
          }
        }, {
          key: "updateSelectedValues",
          value: function updateSelectedValues() {
            this.dataValue = '';
            var temp;
            var text;
            var textValue = '';
            var selectedData;
            this.hiddenElement.innerHTML = '';

            if ((!this.isChipDelete || this.treeSettings.autoCheck) && this.inputWrapper.contains(this.chipWrapper)) {
              this.chipCollection.innerHTML = '';
            }

            if (!this.isFilteredData) {
              this.selectedData = [];
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
              for (var i = 0, len = this.value.length; i < len; i++) {
                selectedData = this.getSelectedData(this.value[i]);
                text = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.treeSettings.loadOnDemand ? this.fields.text : 'text', selectedData);
                this.selectedText.push(text);
                temp = this.selectedText[this.selectedText.length - 1];

                if (this.selectedText.length > 1) {
                  this.dataValue += this.delimiterChar + ' ' + temp;
                  textValue += ',' + temp;
                  this.setProperties({
                    text: textValue
                  }, true);
                } else {
                  this.dataValue += temp;
                  textValue += temp;
                }

                if (this.mode !== 'Delimiter' && (!this.isChipDelete || this.treeSettings.autoCheck) && (this.allowMultiSelection || this.showCheckBox)) {
                  this.setChipValues(temp, this.value[i]);
                }

                this.hiddenElement.innerHTML += '<option selected value ="' + this.value[i] + '">' + this.selectedText[this.selectedText.length - 1] + '</option>';
              }
            }

            var isValid = this.getValidMode();

            if (this.mode !== 'Box' && (this.allowMultiSelection || this.showCheckBox) && !isValid) {
              if (this.chipWrapper) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.chipWrapper], HIDEICON);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], SHOW_CHIP);
              }
            }

            _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(this.dataValue, this.inputEle, this.floatLabelType);

            if (textValue === '') {
              this.setProperties({
                text: null
              }, true);
            } else {
              this.setProperties({
                text: textValue
              }, true);
            }

            if (this.showClearButton && this.inputFocus) {
              this.showOverAllClear();
            }

            if ((this.allowMultiSelection || this.showCheckBox) && this.popupObj) {
              this.popupObj.refreshPosition();
            }

            this.currentText = this.text;
            this.currentValue = this.value;
          }
        }, {
          key: "setChipValues",
          value: function setChipValues(text, value) {
            if (!this.inputWrapper.contains(this.chipWrapper)) {
              this.createChip();
            }

            var chip = this.createElement('span', {
              className: CHIP,
              attrs: {
                'data-value': value
              }
            });
            var chipContent = this.createElement('span', {
              className: CHIP_CONTENT
            });
            var chipClose = this.createElement('span', {
              className: CHIP_CLOSE + ' ' + ICONS
            });
            chipContent.innerHTML = text;
            chip.appendChild(chipContent);
            this.chipCollection.appendChild(chip);

            if (this.showClearButton) {
              chip.appendChild(chipClose);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(chipClose, 'mousedown', this.removeChip, this);
            }
          }
        }, {
          key: "setSelectAllWrapper",
          value: function setSelectAllWrapper(state) {
            if (this.isFirstRender) {
              return;
            }

            if (state && !this.popupEle.contains(this.checkAllParent) && this.showCheckBox) {
              this.createSelectAllWrapper();
              this.popupEle.insertBefore(this.checkAllParent, this.popupDiv);
            } else if (this.popupEle.contains(this.checkAllParent)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.checkAllParent);
              this.checkAllParent = null;
            }
          }
        }, {
          key: "setHeaderTemplate",
          value: function setHeaderTemplate() {
            var compiledString;

            if (this.header) {
              this.header.innerHTML = '';
            } else {
              this.header = this.createElement('div');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.header], HEADER);
            }

            compiledString = this.templateComplier(this.headerTemplate);

            var _iterator76 = _createForOfIteratorHelper(compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate)),
                _step76;

            try {
              for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {
                var item = _step76.value;
                this.header.appendChild(item);
              }
            } catch (err) {
              _iterator76.e(err);
            } finally {
              _iterator76.f();
            }

            this.ddtupdateBlazorTemplates(false, false, true, false);
            this.popupEle.insertBefore(this.header, this.checkAllParent ? this.checkAllParent : this.popupDiv);
          }
        }, {
          key: "templateComplier",
          value: function templateComplier(template) {
            if (template) {
              try {
                if (document.querySelectorAll(template).length) {
                  return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(template).innerHTML.trim());
                }
              } catch (e) {
                return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
              }
            }

            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);
          }
        }, {
          key: "setFooterTemplate",
          value: function setFooterTemplate() {
            var compiledString;

            if (this.footer) {
              this.footer.innerHTML = '';
            } else {
              this.footer = this.createElement('div');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.footer], FOOTER);
            }

            compiledString = this.templateComplier(this.footerTemplate);

            var _iterator77 = _createForOfIteratorHelper(compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate)),
                _step77;

            try {
              for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {
                var item = _step77.value;
                this.footer.appendChild(item);
              }
            } catch (err) {
              _iterator77.e(err);
            } finally {
              _iterator77.f();
            }

            this.ddtupdateBlazorTemplates(false, false, false, true);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([this.footer], this.popupEle);
          }
        }, {
          key: "clearAll",
          value: function clearAll(e) {
            if (!this.enabled || this.readonly) {
              return;
            }

            this.resetValue();
            this.showOverAllClear();

            if (this.allowMultiSelection || this.showCheckBox) {
              if (this.popupObj) {
                this.popupObj.refreshPosition();
              }

              if (!this.wrapText) {
                this.updateOverflowWrapper(true);
              }
            }

            if (e) {
              this.isClearButtonClick = true;
            }

            if (!this.changeOnBlur) {
              this.triggerChangeEvent(e);
            }
          }
        }, {
          key: "removeChip",
          value: function removeChip(e) {
            if (!this.enabled || this.readonly) {
              return;
            }

            var element = e.target.parentElement;
            var value = element.getAttribute('data-value');

            if (this.chipCollection) {
              if (element) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(element);
              }
            }

            this.isChipDelete = true;
            this.isClearButtonClick = true;
            this.removeSelectedData(value, true);
            this.selectedText = [];

            if (this.allowMultiSelection) {
              this.treeObj.selectedNodes = this.value.slice();
              this.updateSelectedValues();
            }

            if (this.showCheckBox) {
              this.treeObj.uncheckAll([value]);
              this.clearCheckAll();
              this.setMultiSelect();
            }

            this.triggerChangeEvent(e);
            this.isChipDelete = false;
            this.ensurePlaceHolder();
          }
        }, {
          key: "resetValue",
          value: function resetValue(isDynamicChange) {
            _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(null, this.inputEle, this.floatLabelType);

            this.oldValue = this.value;
            this.dataValue = null;
            this.setProperties({
              value: []
            }, true);
            this.setProperties({
              text: null
            }, true);
            this.selectedData = [];
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('selectedNodes', [], this.treeObj);
            this.hiddenElement.innerHTML = '';

            if (this.showCheckBox) {
              this.treeObj.uncheckAll();
              this.setMultiSelect();
              this.clearCheckAll();
            }

            if (this.oldValue === null && !isDynamicChange) {
              this.removeValue = true;
            } else if (isDynamicChange) {
              this.triggerChangeEvent();
            }

            if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {
              this.chipCollection.innerHTML = '';
              this.ensurePlaceHolder();
            }
          }
        }, {
          key: "clearCheckAll",
          value: function clearCheckAll() {
            if (this.showSelectAll && this.value.length === 0) {
              this.setLocale(false);
            }
          }
        }, {
          key: "selectAllItems",
          value: function selectAllItems(state) {
            if (this.showCheckBox) {
              state ? this.treeObj.checkAll() : this.treeObj.uncheckAll();
              this.checkSelectAll = true;
            } else if (this.allowMultiSelection) {
              if (!state) {
                this.treeObj.selectedNodes = [];
              } else {
                var li = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('li', this.treeObj.element);
                var id;
                var arr = [];

                for (var i = 0; i < li.length; i++) {
                  id = li[i].getAttribute('data-uid').toString();
                  arr.push(id);
                }

                this.treeObj.selectedNodes = arr;
              }
            }

            this.updateMode();
            this.setMultiSelect();

            if (!this.wrapText) {
              state ? this.updateView() : this.updateOverflowWrapper(true);
            }
          }
        }, {
          key: "updateTreeSettings",
          value: function updateTreeSettings(prop) {
            var value = Object.keys(prop.treeSettings)[0];

            if (value === 'autoCheck') {
              this.ensureAutoCheck();
              this.treeObj.autoCheck = this.treeSettings.autoCheck;
            } else if (value === 'loadOnDemand') {
              this.treeObj.loadOnDemand = this.treeSettings.loadOnDemand;
            } else if (value === 'expandOn') {
              this.treeObj.expandOn = this.treeSettings.expandOn;
              this.treeObj.dataBind();
              return;
            }

            this.treeObj.dataBind();
            this.setMultiSelect();
          }
        }, {
          key: "updateCheckBoxState",
          value: function updateCheckBoxState(checkBox) {
            if (!this.wrapText) {
              this.updateOverflowWrapper(false);
            }

            this.treeObj.showCheckBox = checkBox;
            this.treeObj.dataBind();
            this.isDynamicChange = true;
            this.setSelectAllWrapper(this.showSelectAll);

            if (this.showSelectAll) {
              this.setLocale();
            }

            if (this.showCheckBox) {
              this.updateMode();
            }

            this.setMultiSelect();
            this.isDynamicChange = false;
          }
        }, {
          key: "updateTemplate",
          value: function updateTemplate() {
            if (this.popupObj) {
              this.popupObj.destroy();

              if (this.isPopupOpen) {
                this.hidePopup();
                this.isFirstRender = true;
                this.renderPopup();
              } else {
                this.isFirstRender = true;
              }
            }
          }
        }, {
          key: "l10nUpdate",
          value: function l10nUpdate(actionFailure) {
            if (this.noRecord) {
              this.noRecord.innerHTML = '';
            } else {
              this.noRecord = this.createElement('div');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.noRecord], NODATACONTAINER);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.noRecord], this.popupDiv);
            }

            if (this.noRecordsTemplate !== 'No Records Found' || this.actionFailureTemplate !== 'The Request Failed') {
              var template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;
              var compiledString;
              var templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;
              compiledString = this.templateComplier(template);

              var _iterator78 = _createForOfIteratorHelper(compiledString({}, null, null, templateId, this.isStringTemplate)),
                  _step78;

              try {
                for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {
                  var item = _step78.value;
                  this.noRecord.appendChild(item);
                }
              } catch (err) {
                _iterator78.e(err);
              } finally {
                _iterator78.f();
              }

              this.ddtupdateBlazorTemplates(!actionFailure, actionFailure);
            } else {
              var l10nLocale = {
                noRecordsTemplate: 'No Records Found',
                actionFailureTemplate: 'The Request Failed'
              };
              this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"](this.getLocaleName(), l10nLocale, this.locale);
              this.noRecord.innerHTML = actionFailure ? this.l10n.getConstant('actionFailureTemplate') : this.l10n.getConstant('noRecordsTemplate');
            }
          }
        }, {
          key: "ddtupdateBlazorTemplates",
          value: function ddtupdateBlazorTemplates(noRecord, action, header, footer, isEmpty) {
            if (!this.isStringTemplate) {
              if (this.noRecordsTemplate && noRecord) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.noRecordsTemplateId, NORECORDSTEMPLATE, this, isEmpty);
              }

              if (this.actionFailureTemplate && action) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE, this, isEmpty);
              }

              if (header) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.headerTemplateId, HEADERTEMPLATE, this);
              }

              if (footer) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.footerTemplateId, FOOTERTEMPLATE, this);
              }
            }
          }
        }, {
          key: "ddtresetBlazorTemplates",
          value: function ddtresetBlazorTemplates(noRecord, action, header, footer) {
            if (!this.isStringTemplate) {
              if (this.noRecordsTemplate && noRecord) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.noRecordsTemplateId, NORECORDSTEMPLATE);
              }

              if (this.actionFailureTemplate && action) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE);
              }

              if (header) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.headerTemplateId, HEADERTEMPLATE);
              }

              if (footer) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.footerTemplateId, FOOTERTEMPLATE);
              }
            }
          }
        }, {
          key: "updateRecordTemplate",
          value: function updateRecordTemplate(action) {
            if (this.treeItems && this.treeItems.length <= 0) {
              this.l10nUpdate(action);
              this.updateTemplate();
            }
          }
        }, {
          key: "updateOverflowWrapper",
          value: function updateOverflowWrapper(state) {
            if (!state) {
              if (!this.inputWrapper.contains(this.overFlowWrapper)) {
                this.overFlowWrapper = this.createElement('span', {
                  className: OVERFLOW_VIEW + ' ' + HIDEICON
                });
                this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);
              }
            } else if (this.inputWrapper.contains(this.overFlowWrapper) && state) {
              this.overFlowWrapper.innerHTML = '';
            }
          }
        }, {
          key: "updateMultiSelection",
          value: function updateMultiSelection(state) {
            if (!this.wrapText) {
              this.updateOverflowWrapper(false);
            }

            this.treeObj.allowMultiSelection = state;
            this.treeObj.dataBind();
            this.updateOption();

            if (this.allowMultiSelection) {
              this.updateMode();
            }

            this.setMultiSelect();
          }
        }, {
          key: "updateAllowFiltering",
          value: function updateAllowFiltering(state) {
            if (!this.isFirstRender) {
              if (state) {
                this.renderFilter();
              } else {
                this.destroyFilter();
              }
            }

            this.ensureAutoCheck();
          }
        }, {
          key: "updateFilterPlaceHolder",
          value: function updateFilterPlaceHolder() {
            if (this.filterObj) {
              this.filterObj.placeholder = this.filterBarPlaceholder;
              this.filterObj.element.setAttribute('aria-label', this.filterBarPlaceholder);
            }
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) || value.length === 0) {
              this.resetValue(true);
            } else {
              this.setTreeValue();

              if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
                this.updateOverflowWrapper(false);
                this.updateView();
              }
            }

            this.updateHiddenValue();
          }
        }, {
          key: "updateText",
          value: function updateText(text) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(text)) {
              this.resetValue();
            } else {
              this.setTreeText();

              if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
                this.updateOverflowWrapper(false);
                this.updateView();
              }
            }

            this.updateHiddenValue();
          }
        }, {
          key: "updateModelMode",
          value: function updateModelMode() {
            var validMode = this.allowMultiSelection ? true : this.showCheckBox ? true : false;

            if (!validMode) {
              return;
            }

            if (!this.wrapText) {
              var overFlow = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + OVERFLOW_VIEW, this.inputWrapper);

              if (overFlow) {
                overFlow.innerHTML = '';
              }
            }

            this.updateMode();
            this.setMultiSelect();

            if (!this.wrapText && this.value && this.value.length !== 0) {
              this.updateOverFlowView();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputEle], CHIP_INPUT);

              if (this.mode === 'Box') {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);
              }
            }
          }
        }, {
          key: "updateOption",
          value: function updateOption() {
            if (!this.hiddenElement.hasAttribute('multiple') && (this.allowMultiSelection || this.showCheckBox)) {
              this.hiddenElement.setAttribute('multiple', '');
            } else if (this.hiddenElement.hasAttribute('multiple') && !this.allowMultiSelection && !this.showCheckBox) {
              this.hiddenElement.removeAttribute('multiple');
            }
          }
          /**
           * Dynamically change the value of properties.
           * @private
           */
          // tslint:disable-next-line:max-func-body-length

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i86 = 0, _Object$keys25 = Object.keys(newProp); _i86 < _Object$keys25.length; _i86++) {
              var prop = _Object$keys25[_i86];

              switch (prop) {
                case 'width':
                  this.setElementWidth(newProp.width);

                  if (this.popupObj) {
                    this.popupObj.element.style.width = this.setWidth();
                  }

                  break;

                case 'placeholder':
                  _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setPlaceholder(newProp.placeholder, this.inputEle);

                  break;

                case 'cssClass':
                  this.setCssClass(newProp.cssClass, oldProp.cssClass);
                  break;

                case 'enableRtl':
                  this.setEnableRTL(this.enableRtl);
                  break;

                case 'fields':
                  this.setFields();
                  break;

                case 'readonly':
                  _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setReadonly(newProp.readonly, this.inputEle);

                  break;

                case 'enabled':
                  this.setEnable();
                  break;

                case 'floatLabelType':
                  _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].removeFloating(this.inputObj);

                  _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].addFloating(this.inputEle, newProp.floatLabelType, this.placeholder, this.createElement);

                  this.ensureClearIconPosition(newProp.floatLabelType);
                  break;

                case 'showClearButton':
                  this.updateClearButton(newProp.showClearButton);
                  break;

                case 'allowFiltering':
                  this.updateAllowFiltering(newProp.allowFiltering);
                  break;

                case 'filterBarPlaceholder':
                  this.updateFilterPlaceHolder();
                  break;

                case 'value':
                  this.updateValue(newProp.value);
                  break;

                case 'text':
                  this.updateText(newProp.text);
                  break;

                case 'allowMultiSelection':
                  this.updateMultiSelection(newProp.allowMultiSelection);
                  break;

                case 'mode':
                  this.updateModelMode();
                  break;

                case 'delimiterChar':
                  if (this.mode === 'Box') {
                    return;
                  }

                  if (this.showCheckBox || this.allowMultiSelection) {
                    this.setMultiSelect();
                  }

                  break;

                case 'selectAllText':
                  if (this.showCheckBox && this.showSelectAll) {
                    this.setLocale();
                  }

                  break;

                case 'unSelectAllText':
                  if (this.showCheckBox && this.showSelectAll) {
                    this.setLocale(false);
                  }

                  break;

                case 'showSelectAll':
                  if (this.showCheckBox) {
                    this.setSelectAllWrapper(newProp.showSelectAll);
                    this.updatePopupHeight();
                  }

                  break;

                case 'showCheckBox':
                  this.updateCheckBoxState(newProp.showCheckBox);
                  this.updatePopupHeight();
                  this.updateOption();
                  break;

                case 'treeSettings':
                  this.updateTreeSettings(newProp);
                  break;

                case 'sortOrder':
                  this.treeObj.sortOrder = newProp.sortOrder;
                  this.treeObj.dataBind();
                  break;

                case 'showDropDownIcon':
                  this.updateDropDownIconState(newProp.showDropDownIcon);
                  break;

                case 'popupWidth':
                  if (this.popupObj) {
                    this.popupObj.element.style.width = this.setWidth();
                  }

                  break;

                case 'popupHeight':
                  if (this.popupObj) {
                    this.updatePopupHeight();
                  }

                  break;

                case 'zIndex':
                  if (this.popupObj) {
                    this.popupObj.zIndex = newProp.zIndex;
                    this.popupObj.dataBind();
                  }

                  break;

                case 'headerTemplate':
                  this.updateTemplate();
                  break;

                case 'footerTemplate':
                  this.updateTemplate();
                  break;

                case 'itemTemplate':
                  this.treeObj.nodeTemplate = newProp.itemTemplate;
                  this.treeObj.dataBind();
                  break;

                case 'noRecordsTemplate':
                  this.updateRecordTemplate();
                  break;

                case 'actionFailureTemplate':
                  this.updateRecordTemplate(true);
                  break;

                case 'htmlAttributes':
                  this.setHTMLAttributes();
                  break;

                case 'wrapText':
                  this.updateOverflowWrapper(this.wrapText);

                  if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
                    this.updateView();
                  } else {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overFlowWrapper], HIDEICON);

                    if (this.chipWrapper && this.mode === 'Box') {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.chipWrapper], HIDEICON);
                    } else {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper], SHOW_CHIP);
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputEle], CHIP_INPUT);
                    }

                    this.ensurePlaceHolder();
                  }

                  break;
              }
            }
          }
          /**
           * Allows you to clear the selected values from the Dropdown Tree component.
           * @method clear
           * @return {void}.
           */

        }, {
          key: "clear",
          value: function clear() {
            this.clearAll();

            if (this.inputFocus) {
              this.onFocusOut();
            } else {
              if (this.changeOnBlur) {
                this.triggerChangeEvent();
              }

              this.removeValue = false;
            }
          }
          /**
           * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.
           * @method destroy
           * @return {void}.
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.ddtresetBlazorTemplates(true, true, true, true);
            this.unWireEvents();
            this.setCssClass(null, this.cssClass);
            this.resetValue();
            this.treeObj.destroy();
            this.destroyFilter();

            if (this.popupObj) {
              this.popupObj.destroy();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.popupObj.element);
            }

            if (this.element.tagName !== this.getDirective()) {
              this.inputWrapper.parentElement.insertBefore(this.element, this.inputWrapper);
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.inputWrapper);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.popupDiv);
            this.element.classList.remove('e-input');

            _get2(_getPrototypeOf2(DropDownTree.prototype), "destroy", this).call(this);
          }
        }, {
          key: "destroyFilter",
          value: function destroyFilter() {
            if (this.filterObj) {
              this.filterObj.destroy();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.filterObj.element);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.filterContainer);
              this.filterObj = null;
            }
          }
          /**
           * Ensures visibility of the Dropdown Tree item by using item value or item element.
           * If many Dropdown Tree items are present, and we are in need to find a particular item, then the `ensureVisible` property
           * helps you to bring the item to visibility by expanding the Dropdown Tree and scrolling to the specific item.
           * @param  {string | Element} item - Specifies the value of Dropdown Tree item/ Dropdown Tree item element.
           */

        }, {
          key: "ensureVisible",
          value: function ensureVisible(item) {
            this.treeObj.ensureVisible(item);
          }
          /**
           * To get the updated data of source of the Dropdown Tree.
           * @param  {string | Element} item - Specifies the value of Dropdown Tree item/ Dropdown Tree item element.
           * @returns { { [key: string]: Object }[] }.
           */

        }, {
          key: "getData",
          value: function getData(item) {
            return this.treeObj.getTreeData(item);
          }
          /**
           * Close the Dropdown tree pop-up.
           * @returns void.
           */

        }, {
          key: "hidePopup",
          value: function hidePopup() {
            var eventArgs = {
              popup: this.popupObj
            };
            this.inputWrapper.classList.remove(ICONANIMATION);

            if (this.popupEle) {
              this.popupEle.style.display = 'none';
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.inputWrapper, {
              'aria-expanded': 'false'
            });

            if (this.popupObj && this.isPopupOpen) {
              this.popupObj.hide();

              if (this.inputFocus) {
                this.inputWrapper.focus();

                if (this.allowFiltering) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper], [INPUTFOCUS]);
                }
              }

              this.trigger('close', eventArgs);
            }
          }
          /**
           * Based on the state parameter, entire list item will be selected or deselected.
           * parameter
           * `true`   - Selects entire Dropdown Tree items.
           * `false`  - Unselects entire Dropdown Tree items.
           * @returns void
           */

        }, {
          key: "selectAll",
          value: function selectAll(state) {
            this.selectAllItems(state);
          }
          /**
           * Opens the popup that displays the Dropdown Tree items.
           * @returns void.
           */

        }, {
          key: "showPopup",
          value: function showPopup() {
            if (!this.enabled || this.readonly || this.isPopupOpen) {
              return;
            }

            this.renderPopup();
            this.focusIn();
          }
          /**
           * Return the module name.
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'dropdowntree';
          }
        }]);

        return DropDownTree;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('The Request Failed')], DropDownTree.prototype, "actionFailureTemplate", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownTree.prototype, "allowFiltering", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownTree.prototype, "allowMultiSelection", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], DropDownTree.prototype, "changeOnBlur", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], DropDownTree.prototype, "cssClass", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(',')], DropDownTree.prototype, "delimiterChar", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], DropDownTree.prototype, "enabled", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, Fields)], DropDownTree.prototype, "fields", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownTree.prototype, "filterBarPlaceholder", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('StartsWith')], DropDownTree.prototype, "filterType", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Never')], DropDownTree.prototype, "floatLabelType", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownTree.prototype, "footerTemplate", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownTree.prototype, "ignoreAccent", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], DropDownTree.prototype, "ignoreCase", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownTree.prototype, "headerTemplate", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], DropDownTree.prototype, "htmlAttributes", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownTree.prototype, "itemTemplate", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Default')], DropDownTree.prototype, "mode", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('No Records Found')], DropDownTree.prototype, "noRecordsTemplate", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownTree.prototype, "placeholder", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('300px')], DropDownTree.prototype, "popupHeight", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], DropDownTree.prototype, "popupWidth", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownTree.prototype, "readonly", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownTree.prototype, "showSelectAll", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Select All')], DropDownTree.prototype, "selectAllText", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownTree.prototype, "showCheckBox", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], DropDownTree.prototype, "showClearButton", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], DropDownTree.prototype, "showDropDownIcon", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('None')], DropDownTree.prototype, "sortOrder", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownTree.prototype, "text", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, TreeSettings)], DropDownTree.prototype, "treeSettings", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Unselect All')], DropDownTree.prototype, "unSelectAllText", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], DropDownTree.prototype, "value", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], DropDownTree.prototype, "width", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1000)], DropDownTree.prototype, "zIndex", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownTree.prototype, "wrapText", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownTree.prototype, "actionFailure", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownTree.prototype, "beforeOpen", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownTree.prototype, "change", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownTree.prototype, "close", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownTree.prototype, "blur", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownTree.prototype, "created", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownTree.prototype, "dataBound", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownTree.prototype, "destroyed", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownTree.prototype, "filtering", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownTree.prototype, "focus", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownTree.prototype, "keyPress", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownTree.prototype, "open", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownTree.prototype, "select", void 0);

      DropDownTree = __decorate$2([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], DropDownTree);
      /**
       * export all modules from current location
       */

      var __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      }; /// <reference path='../drop-down-list/drop-down-list-model.d.ts'/>

      /* tslint:disable */

      /* tslint:enable */


      var SPINNER_CLASS = 'e-atc-spinner-icon';
      dropDownListClasses.root = 'e-combobox';
      var inputObject$1 = {
        container: null,
        buttons: []
      };
      /**
       * The ComboBox component allows the user to type a value or choose an option from the list of predefined options.
       * ```html
       * <select id="list">
       *      <option value='1'>Badminton</option>
       *      <option value='2'>Basketball</option>
       *      <option value='3'>Cricket</option>
       *      <option value='4'>Football</option>
       *      <option value='5'>Tennis</option>
       * </select>
       * ```
       * ```typescript
       *   let games:ComboBox = new ComboBox();
       *   games.appendTo("#list");
       * ```
       */

      var ComboBox = /*#__PURE__*/function (_DropDownList) {
        _inherits2(ComboBox, _DropDownList);

        var _super57 = _createSuper(ComboBox);

        /**
         * *Constructor for creating the component
         */
        function ComboBox(options, element) {
          _classCallCheck2(this, ComboBox);

          return _super57.call(this, options, element);
        }

        _createClass2(ComboBox, [{
          key: "preRender",

          /**
           * Initialize the event handler
           * @private
           */
          value: function preRender() {
            _get2(_getPrototypeOf2(ComboBox.prototype), "preRender", this).call(this);
          }
        }, {
          key: "getLocaleName",
          value: function getLocaleName() {
            return 'combo-box';
          }
        }, {
          key: "wireEvent",
          value: function wireEvent() {
            if (this.getModuleName() === 'combobox') {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper.container, 'blur', this.onBlur, this);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.inputWrapper.buttons[0])) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick, this);
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'focus', this.targetFocus, this);

            if (!this.readonly) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'input', this.onInput, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'keyup', this.onFilterUp, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'keydown', this.onFilterDown, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'paste', this.pasteHandler, this);
            }

            this.bindCommonEvent();
          }
        }, {
          key: "preventBlur",
          value: function preventBlur(e) {
            if (!this.allowFiltering && document.activeElement !== this.inputElement && !document.activeElement.classList.contains(dropDownListClasses.input) && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice || !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              e.preventDefault();
            }
          }
        }, {
          key: "onBlur",
          value: function onBlur(e) {
            var inputValue = this.inputElement.value === '' ? null : this.inputElement.value;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listData) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(inputValue) && inputValue !== this.text) {
              this.customValue(e);
            }

            _get2(_getPrototypeOf2(ComboBox.prototype), "onBlur", this).call(this, e);
          }
        }, {
          key: "targetElement",
          value: function targetElement() {
            return this.inputElement;
          }
        }, {
          key: "setOldText",
          value: function setOldText(text) {
            _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);

            this.customValue();
            this.removeSelection();
          }
        }, {
          key: "setOldValue",
          value: function setOldValue(value) {
            if (this.allowCustom) {
              this.valueMuteChange(this.value);
            } else {
              this.valueMuteChange(null);
            }

            this.removeSelection();
            this.setHiddenValue();
          }
        }, {
          key: "valueMuteChange",
          value: function valueMuteChange(value) {
            var inputValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) ? null : value.toString();

            _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);

            this.setProperties({
              value: value,
              text: value,
              index: null
            }, true);
            this.activeIndex = this.index;
            var fields = this.fields;
            var dataItem = {};
            dataItem[fields.text] = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) ? null : value.toString();
            dataItem[fields.value] = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) ? null : value.toString();
            this.itemData = dataItem;
            this.item = null;

            if (this.previousValue !== this.value) {
              this.detachChangeEvent(null);
            }
          }
        }, {
          key: "updateValues",
          value: function updateValues() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
              var li = this.getElementByValue(this.value);

              if (li) {
                this.setSelection(li, null);
              } else if (this.allowCustom) {
                this.valueMuteChange(this.value);
              } else {
                this.valueMuteChange(null);
              }
            } else if (this.text && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
              var _li2 = this.getElementByText(this.text);

              if (_li2) {
                this.setSelection(_li2, null);
              } else {
                _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);

                this.customValue();
              }
            } else {
              this.setSelection(this.liCollections[this.activeIndex], null);
            }

            this.setHiddenValue();

            _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
          }
        }, {
          key: "updateIconState",
          value: function updateIconState() {
            if (this.showClearButton) {
              if (this.inputElement.value !== '' && !this.readonly) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
              }
            }
          }
        }, {
          key: "getAriaAttributes",
          value: function getAriaAttributes() {
            var ariaAttributes = {
              'aria-owns': this.element.id + '_options',
              'role': 'combobox',
              'aria-autocomplete': 'both',
              'aria-labelledby': this.hiddenElement.id,
              'aria-hasPopup': 'true',
              'aria-expanded': 'false',
              'aria-readonly': this.readonly.toString(),
              'autocomplete': 'off',
              'autocorrect': 'off',
              'autocapitalize': 'off',
              'spellcheck': 'false'
            };
            return ariaAttributes;
          }
        }, {
          key: "searchLists",
          value: function searchLists(e) {
            this.isTyped = true;

            if (this.isFiltering()) {
              _get2(_getPrototypeOf2(ComboBox.prototype), "searchLists", this).call(this, e);

              if (this.ulElement && this.filterInput.value.trim() === '') {
                this.setHoverList(this.ulElement.querySelector('.' + dropDownListClasses.li));
              }
            } else {
              if (this.ulElement && this.inputElement.value === '' && this.preventAutoFill) {
                this.setHoverList(this.ulElement.querySelector('.' + dropDownListClasses.li));
              }

              this.incrementalSearch(e);
            }
          }
        }, {
          key: "getNgDirective",
          value: function getNgDirective() {
            return 'EJS-COMBOBOX';
          }
        }, {
          key: "setSearchBox",
          value: function setSearchBox() {
            this.filterInput = this.inputElement;
            return this.isFiltering() ? this.inputWrapper : inputObject$1;
          }
        }, {
          key: "onActionComplete",
          value: function onActionComplete(ulElement, list, e, isUpdated) {
            if (!this.isServerBlazor) {
              _get2(_getPrototypeOf2(ComboBox.prototype), "onActionComplete", this).call(this, ulElement, list, e);
            }

            if (this.isSelectCustom) {
              this.removeSelection();
            }

            if (!this.preventAutoFill && this.getModuleName() === 'combobox' && this.isTyped) {
              this.inlineSearch();
            }
          }
        }, {
          key: "getFocusElement",
          value: function getFocusElement() {
            var dataItem = this.isSelectCustom ? {
              text: ''
            } : this.getItemData();
            var selected = this.list.querySelector('.' + dropDownListClasses.selected);
            var isSelected = dataItem.text === this.inputElement.value && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selected);

            if (isSelected) {
              return selected;
            }

            if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !this.isDropDownClick || !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.liCollections) && this.liCollections.length > 0) {
              var inputValue = this.inputElement.value;
              var activeItem = Search(inputValue, this.liCollections, 'StartsWith', true);
              var activeElement = activeItem.item;

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeElement)) {
                var count = this.getIndexByValue(activeElement.getAttribute('data-value')) - 1;
                var height = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue('height'), 10);

                if (!isNaN(height) && this.getModuleName() !== 'autocomplete') {
                  this.removeFocus();
                  var fixedHead = this.fields.groupBy ? this.liCollections[0].offsetHeight : 0;
                  this.list.scrollTop = count * height + fixedHead;
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([activeElement], dropDownListClasses.focus);
                }
              } else {
                if (this.isSelectCustom && this.inputElement.value.trim() !== '') {
                  this.removeFocus();
                  this.list.scrollTop = 0;
                }
              }

              return activeElement;
            } else {
              return null;
            }
          }
        }, {
          key: "setValue",
          value: function setValue(e) {
            if (e && e.type === 'keydown' && e.action === 'enter') {
              this.removeFillSelection();
            }

            if (this.autofill && this.getModuleName() === 'combobox' && e && e.type === 'keydown' && e.action !== 'enter') {
              this.preventAutoFill = false;
              this.inlineSearch(e);
              return false;
            } else {
              return _get2(_getPrototypeOf2(ComboBox.prototype), "setValue", this).call(this, e);
            }
          }
        }, {
          key: "checkCustomValue",
          value: function checkCustomValue() {
            this.itemData = this.getDataByValue(this.value);
            var dataItem = this.getItemData();

            if (!(this.allowCustom && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataItem.value) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(dataItem.text))) {
              this.setProperties({
                'value': dataItem.value,
                'text': dataItem.text
              }, true);
            }
          }
          /**
           * Shows the spinner loader.
           * @returns void.
           * @deprecated
           */

        }, {
          key: "showSpinner",
          value: function showSpinner() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.spinnerElement)) {
              this.spinnerElement = this.getModuleName() === 'autocomplete' ? this.inputWrapper.buttons[0] || this.inputWrapper.clearButton || _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].appendSpan('e-input-group-icon ' + SPINNER_CLASS, this.inputWrapper.container, this.createElement) : this.inputWrapper.buttons[0] || this.inputWrapper.clearButton;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.spinnerElement], dropDownListClasses.disableIcon);
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["createSpinner"])({
                target: this.spinnerElement,
                width: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? '16px' : '14px'
              }, this.createElement);
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["showSpinner"])(this.spinnerElement);
            }
          }
          /**
           * Hides the spinner loader.
           * @returns void.
           * @deprecated
           */

        }, {
          key: "hideSpinner",
          value: function hideSpinner() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.spinnerElement)) {
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["hideSpinner"])(this.spinnerElement);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.spinnerElement], dropDownListClasses.disableIcon);

              if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.spinnerElement);
              } else {
                this.spinnerElement.innerHTML = '';
              }

              this.spinnerElement = null;
            }
          }
        }, {
          key: "setAutoFill",
          value: function setAutoFill(activeElement, isHover) {
            if (!isHover) {
              this.setHoverList(activeElement);
            }

            if (this.autofill && !this.preventAutoFill) {
              var currentValue = this.getTextByValue(activeElement.getAttribute('data-value')).toString();
              var currentFillValue = this.getFormattedValue(activeElement.getAttribute('data-value'));

              if (this.getModuleName() === 'combobox') {
                if (!this.isSelected && this.previousValue !== currentFillValue) {
                  this.updateSelectedItem(activeElement, null);
                  this.isSelected = true;
                  this.previousValue = this.getFormattedValue(activeElement.getAttribute('data-value'));
                } else {
                  this.updateSelectedItem(activeElement, null, true);
                }
              }

              if (!this.isAndroidAutoFill(currentValue)) {
                this.setAutoFillSelection(currentValue);
              }
            }
          }
        }, {
          key: "isAndroidAutoFill",
          value: function isAndroidAutoFill(value) {
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isAndroid) {
              var currentPoints = this.getSelectionPoints();
              var prevEnd = this.prevSelectPoints.end;
              var curEnd = currentPoints.end;
              var prevStart = this.prevSelectPoints.start;
              var curStart = currentPoints.start;

              if (prevEnd !== 0 && (prevEnd === value.length && prevStart === value.length || prevStart > curStart && prevEnd > curEnd || prevEnd === curEnd && prevStart === curStart)) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }
        }, {
          key: "clearAll",
          value: function clearAll(e, property) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(property) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(property) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(property.dataSource)) {
              _get2(_getPrototypeOf2(ComboBox.prototype), "clearAll", this).call(this, e);

              if (this.isServerBlazor && this.isFiltering() && this.isPopupOpen && e) {
                // tslint:disable-next-line
                this.interopAdaptor.invokeMethodAsync('OnServerRenderList', this.beforePopupOpen, true);
              }
            }
          }
        }, {
          key: "isSelectFocusItem",
          value: function isSelectFocusItem(element) {
            return !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element);
          }
        }, {
          key: "inlineSearch",
          value: function inlineSearch(e) {
            var isKeyNavigate = e && (e.action === 'down' || e.action === 'up' || e.action === 'home' || e.action === 'end' || e.action === 'pageUp' || e.action === 'pageDown');
            var activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(activeElement)) {
              if (!isKeyNavigate) {
                var value = this.getFormattedValue(activeElement.getAttribute('data-value'));
                this.activeIndex = this.getIndexByValue(value);
                this.activeIndex = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.activeIndex) ? this.activeIndex : null;
              }

              this.preventAutoFill = this.inputElement.value === '' ? false : this.preventAutoFill;
              this.setAutoFill(activeElement, isKeyNavigate);
            } else if (this.inputElement.value === '') {
              this.activeIndex = null;
              this.list.scrollTop = 0;
              var focusItem = this.list.querySelector('.' + dropDownListClasses.li);
              this.setHoverList(focusItem);
            } else {
              this.activeIndex = null;
              this.removeSelection();

              if (this.liCollections && this.liCollections.length < 0) {
                this.removeFocus();
              }
            }
          }
        }, {
          key: "incrementalSearch",
          value: function incrementalSearch(e) {
            this.showPopup();

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listData)) {
              this.inlineSearch(e);
              e.preventDefault();
            }
          }
        }, {
          key: "setAutoFillSelection",
          value: function setAutoFillSelection(currentValue) {
            var selection = this.getSelectionPoints();
            var value = this.inputElement.value.substr(0, selection.start);

            if (value && value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase()) {
              var inputValue = value + currentValue.substr(value.length, currentValue.length);

              _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);

              this.inputElement.setSelectionRange(selection.start, this.inputElement.value.length);
            } else {
              _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(currentValue, this.inputElement, this.floatLabelType, this.showClearButton);

              this.inputElement.setSelectionRange(0, this.inputElement.value.length);
            }
          }
        }, {
          key: "getValueByText",
          value: function getValueByText(text) {
            return _get2(_getPrototypeOf2(ComboBox.prototype), "getValueByText", this).call(this, text, true, this.ignoreAccent);
          }
        }, {
          key: "unWireEvent",
          value: function unWireEvent() {
            if (this.getModuleName() === 'combobox') {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputWrapper.container, 'blur', this.onBlur);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.inputWrapper.buttons[0])) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick);
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'focus', this.targetFocus);

            if (!this.readonly) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'input', this.onInput);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'keyup', this.onFilterUp);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'keydown', this.onFilterDown);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'paste', this.pasteHandler);
            }

            this.unBindCommonEvent();
          }
        }, {
          key: "setSelection",
          value: function setSelection(li, e) {
            _get2(_getPrototypeOf2(ComboBox.prototype), "setSelection", this).call(this, li, e);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li) && !this.autofill && !this.isDropDownClick) {
              this.removeFocus();
            }
          }
        }, {
          key: "selectCurrentItem",
          value: function selectCurrentItem(e) {
            var li;

            if (this.isPopupOpen) {
              if (this.isSelected) {
                li = this.list.querySelector('.' + dropDownListClasses.selected);
              } else {
                li = this.list.querySelector('.' + dropDownListClasses.focus);
              }

              if (li) {
                this.setSelection(li, e);
                this.isTyped = false;
              }

              if (this.isSelected) {
                this.isSelectCustom = false;
                this.onChangeEvent(e);
              }
            }

            if (e.action === 'enter' && this.inputElement.value.trim() === '') {
              this.clearAll(e);
            } else if (this.isTyped && !this.isSelected && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
              this.customValue(e);
            }

            this.hidePopup();
          }
        }, {
          key: "setHoverList",
          value: function setHoverList(li) {
            this.removeSelection();

            if (this.isValidLI(li) && !li.classList.contains(dropDownListClasses.selected)) {
              this.removeFocus();
              li.classList.add(dropDownListClasses.focus);
            }
          }
        }, {
          key: "targetFocus",
          value: function targetFocus(e) {
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !this.allowFiltering) {
              this.preventFocus = false;
            }

            this.onFocus(e);
          }
        }, {
          key: "dropDownClick",
          value: function dropDownClick(e) {
            e.preventDefault();

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !this.allowFiltering) {
              this.preventFocus = true;
            }

            _get2(_getPrototypeOf2(ComboBox.prototype), "dropDownClick", this).call(this, e);
          }
        }, {
          key: "customValue",
          value: function customValue(e) {
            var _this164 = this;

            var value = this.getValueByText(this.inputElement.value);

            if (!this.allowCustom && this.inputElement.value !== '') {
              var previousValue = this.previousValue;
              var currentValue = this.value;
              this.setProperties({
                value: value
              });

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
                _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue('', this.inputElement, this.floatLabelType, this.showClearButton);
              }

              if (this.autofill && previousValue === this.value && currentValue !== this.value) {
                this.onChangeEvent(null);
              }
            } else if (this.inputElement.value.trim() !== '') {
              var _previousValue = this.value;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value)) {
                var _value2 = this.inputElement.value === '' ? null : this.inputElement.value;

                var eventArgs;
                eventArgs = {
                  text: _value2,
                  item: {}
                };

                if (!this.initial) {
                  this.trigger('customValueSpecifier', eventArgs, function (eventArgs) {
                    _this164.updateCustomValueCallback(_value2, eventArgs, _previousValue, e);
                  });
                } else {
                  this.updateCustomValueCallback(_value2, eventArgs, _previousValue);
                }
              } else {
                this.isSelectCustom = false;
                this.setProperties({
                  value: value
                });

                if (_previousValue !== this.value) {
                  this.onChangeEvent(e);
                }
              }
            } else if (this.allowCustom) {
              this.isSelectCustom = true;
            }
          }
        }, {
          key: "updateCustomValueCallback",
          value: function updateCustomValueCallback(value, eventArgs, previousValue, e) {
            var fields = this.fields;
            var item = eventArgs.item;
            var dataItem = {};

            if (item && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.text, item) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.value, item)) {
              dataItem = item;
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(fields.text, value, dataItem);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(fields.value, value, dataItem);
            }

            this.itemData = dataItem;
            var changeData = {
              text: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.text, this.itemData),
              value: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.value, this.itemData),
              index: null
            };
            this.setProperties(changeData, true);
            this.setSelection(null, null);
            this.isSelectCustom = true;

            if (previousValue !== this.value) {
              this.onChangeEvent(e);
            }
          }
          /**
           * Dynamically change the value of properties.
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            if (this.getModuleName() === 'combobox') {
              this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);
            }

            for (var _i87 = 0, _Object$keys26 = Object.keys(newProp); _i87 < _Object$keys26.length; _i87++) {
              var prop = _Object$keys26[_i87];

              switch (prop) {
                case 'readonly':
                  _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setReadonly(this.readonly, this.inputElement);

                  if (this.readonly) {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'input', this.onInput);

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'keyup', this.onFilterUp);

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'keydown', this.onFilterDown);
                  } else {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'input', this.onInput, this);

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'keyup', this.onFilterUp, this);

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'keydown', this.onFilterDown, this);
                  }

                  break;

                case 'allowFiltering':
                  this.setSearchBox();

                  if (this.isFiltering() && this.getModuleName() === 'combobox' && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list)) {
                    _get2(_getPrototypeOf2(ComboBox.prototype), "renderList", this).call(this);
                  }

                  break;

                case 'allowCustom':
                  break;

                default:
                  var comboProps = void 0;
                  comboProps = this.getPropObject(prop, newProp, oldProp);

                  _get2(_getPrototypeOf2(ComboBox.prototype), "onPropertyChanged", this).call(this, comboProps.newProperty, comboProps.oldProperty);

                  break;
              }
            }
          }
          /**
           * To initialize the control rendering.
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            _get2(_getPrototypeOf2(ComboBox.prototype), "render", this).call(this);

            this.setSearchBox();

            if (this.isFiltering() && this.getModuleName() === 'combobox' && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list)) {
              _get2(_getPrototypeOf2(ComboBox.prototype), "renderList", this).call(this);
            }

            this.renderComplete();
          }
        }, {
          key: "getModuleName",

          /**
           * Return the module name of this component.
           * @private
           */
          value: function getModuleName() {
            return 'combobox';
          }
          /**
           * Adds a new item to the combobox popup list. By default, new item appends to the list as the last item,
           * but you can insert based on the index parameter.
           * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
           * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.
           * @return {void}.
           * @deprecated
           */

        }, {
          key: "addItem",
          value: function addItem(items, itemIndex) {
            _get2(_getPrototypeOf2(ComboBox.prototype), "addItem", this).call(this, items, itemIndex);
          }
          /**
           * To filter the data from given data source by using query
           * @param  {Object[] | DataManager } dataSource - Set the data source to filter.
           * @param  {Query} query - Specify the query to filter the data.
           * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
           * @return {void}.
           * @deprecated
           */

        }, {
          key: "filter",
          value: function filter(dataSource, query, fields) {
            _get2(_getPrototypeOf2(ComboBox.prototype), "filter", this).call(this, dataSource, query, fields);
          }
          /**
           * Opens the popup that displays the list of items.
           * @returns void.
           * @deprecated
           */

        }, {
          key: "showPopup",
          value: function showPopup() {
            _get2(_getPrototypeOf2(ComboBox.prototype), "showPopup", this).call(this);
          }
          /**
           * Hides the popup if it is in open state.
           * @returns void.
           * @deprecated
           */

        }, {
          key: "hidePopup",
          value: function hidePopup(e) {
            var inputValue = this.inputElement.value === '' ? null : this.inputElement.value;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listData)) {
              var isEscape = this.isEscapeKey;

              if (this.isEscapeKey) {
                _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setValue(this.typedString, this.inputElement, this.floatLabelType, this.showClearButton);

                this.isEscapeKey = false;
              }

              if (this.autofill) {
                this.removeFillSelection();
              }

              var dataItem = this.isSelectCustom ? {
                text: ''
              } : this.getItemData();
              var selected = this.list.querySelector('.' + dropDownListClasses.selected);

              if (dataItem.text === this.inputElement.value && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selected)) {
                if (this.isSelected) {
                  this.onChangeEvent(e);
                  this.isSelectCustom = false;
                }

                _get2(_getPrototypeOf2(ComboBox.prototype), "hidePopup", this).call(this, e);

                return;
              }

              if (this.getModuleName() === 'combobox' && this.inputElement.value.trim() !== '') {
                var searchItem = Search(this.inputElement.value, this.liCollections, 'Equal', true);
                this.selectedLI = searchItem.item;

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(searchItem.index)) {
                  searchItem.index = Search(this.inputElement.value, this.liCollections, 'StartsWith', true).index;
                }

                this.activeIndex = searchItem.index;

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectedLI)) {
                  this.updateSelectedItem(this.selectedLI, null, true);
                } else if (isEscape) {
                  this.isSelectCustom = true;
                  this.removeSelection();
                }
              }

              if (!this.isEscapeKey && this.isTyped && !this.isInteracted) {
                this.customValue(e);
              }
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listData) && this.allowCustom && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(inputValue) && inputValue !== this.value) {
              this.customValue();
            }

            _get2(_getPrototypeOf2(ComboBox.prototype), "hidePopup", this).call(this, e);
          }
          /**
           * Sets the focus to the component for interaction.
           * @returns void.
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            if (!this.enabled) {
              return;
            }

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && !this.allowFiltering) {
              this.preventFocus = true;
            }

            _get2(_getPrototypeOf2(ComboBox.prototype), "focusIn", this).call(this);
          }
          /**
           * Allows you to clear the selected values from the component.
           * @returns void.
           * @deprecated
           */

        }, {
          key: "clear",
          value: function clear() {
            this.value = null;
          }
          /**
           * Moves the focus from the component if the component is already focused.
           * @returns void.
           * @deprecated
           */

        }, {
          key: "focusOut",
          value: function focusOut(e) {
            _get2(_getPrototypeOf2(ComboBox.prototype), "focusOut", this).call(this, e);
          }
          /**
           * Gets all the list items bound on this component.
           * @returns Element[].
           * @deprecated
           */

        }, {
          key: "getItems",
          value: function getItems() {
            return _get2(_getPrototypeOf2(ComboBox.prototype), "getItems", this).call(this);
          }
          /**
           * Gets the data Object that matches the given value.
           * @param { string | number } value - Specifies the value of the list item.
           * @returns Object.
           * @blazorType object
           * @deprecated
           */

        }, {
          key: "getDataByValue",
          value: function getDataByValue(value) {
            return _get2(_getPrototypeOf2(ComboBox.prototype), "getDataByValue", this).call(this, value);
          }
        }, {
          key: "renderHightSearch",
          value: function renderHightSearch() {// update high light search 
          }
        }]);

        return ComboBox;
      }(DropDownList);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ComboBox.prototype, "autofill", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], ComboBox.prototype, "allowCustom", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], ComboBox.prototype, "htmlAttributes", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ComboBox.prototype, "allowFiltering", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ComboBox.prototype, "query", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ComboBox.prototype, "index", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], ComboBox.prototype, "showClearButton", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ComboBox.prototype, "enableRtl", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ComboBox.prototype, "customValueSpecifier", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ComboBox.prototype, "filtering", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ComboBox.prototype, "valueTemplate", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Never')], ComboBox.prototype, "floatLabelType", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ComboBox.prototype, "filterBarPlaceholder", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ComboBox.prototype, "cssClass", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ComboBox.prototype, "headerTemplate", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ComboBox.prototype, "footerTemplate", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ComboBox.prototype, "placeholder", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], ComboBox.prototype, "width", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('300px')], ComboBox.prototype, "popupHeight", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], ComboBox.prototype, "popupWidth", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ComboBox.prototype, "readonly", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ComboBox.prototype, "text", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ComboBox.prototype, "value", void 0);

      ComboBox = __decorate$3([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], ComboBox);
      /**
       * export all modules from current location
       */

      var __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      }; /// <reference path='../combo-box/combo-box-model.d.ts'/>

      /* tslint:disable */

      /* tslint:enable */


      dropDownListClasses.root = 'e-autocomplete';
      dropDownListClasses.icon = 'e-input-group-icon e-ddl-icon e-search-icon';
      /**
       * The AutoComplete component provides the matched suggestion list when type into the input,
       * from which the user can select one.
       * ```html
       * <input id="list" type="text"/>
       * ```
       * ```typescript
       *   let atcObj:AutoComplete = new AutoComplete();
       *   atcObj.appendTo("#list");
       * ```
       */

      var AutoComplete = /*#__PURE__*/function (_ComboBox) {
        _inherits2(AutoComplete, _ComboBox);

        var _super58 = _createSuper(AutoComplete);

        /**
         * * Constructor for creating the widget
         */
        function AutoComplete(options, element) {
          var _this165;

          _classCallCheck2(this, AutoComplete);

          _this165 = _super58.call(this, options, element);
          _this165.isFiltered = false;
          return _this165;
        }

        _createClass2(AutoComplete, [{
          key: "preRender",

          /**
           * Initialize the event handler
           * @private
           */
          value: function preRender() {
            _get2(_getPrototypeOf2(AutoComplete.prototype), "preRender", this).call(this);
          }
        }, {
          key: "getLocaleName",
          value: function getLocaleName() {
            return 'auto-complete';
          }
        }, {
          key: "getNgDirective",
          value: function getNgDirective() {
            return 'EJS-AUTOCOMPLETE';
          }
        }, {
          key: "getQuery",
          value: function getQuery(query) {
            var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();
            var filterType = this.queryString === '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) ? 'equal' : this.filterType;
            var queryString = this.queryString === '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) ? this.value : this.queryString;

            if (this.isFiltered) {
              return filterQuery;
            }

            if (this.queryString !== null && this.queryString !== '') {
              var dataType = this.typeOfData(this.dataSource)["typeof"];

              if (!(this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) && dataType === 'string' || dataType === 'number') {
                filterQuery.where('', filterType, queryString, this.ignoreCase, this.ignoreAccent);
              } else {
                var mapping = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.value) ? this.fields.value : '';
                filterQuery.where(mapping, filterType, queryString, this.ignoreCase, this.ignoreAccent);
              }
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.suggestionCount)) {
              // Since defualt value of suggestioncount is 20, checked the condition
              if (this.suggestionCount !== 20) {
                for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
                  if (filterQuery.queries[queryElements].fn === 'onTake') {
                    filterQuery.queries.splice(queryElements, 1);
                  }
                }
              }

              filterQuery.take(this.suggestionCount);
            }

            return filterQuery;
          }
        }, {
          key: "searchLists",
          value: function searchLists(e) {
            var _this166 = this;

            this.isTyped = true;
            this.isDataFetched = this.isSelectCustom = false;

            if (this.isServerBlazor) {
              this.beforePopupOpen = this.isFiltering() && !this.beforePopupOpen ? !this.beforePopupOpen : this.beforePopupOpen;
              this.queryString = this.filterInput.value;

              if (this.queryString !== '' && this.queryString.length >= this.minLength) {
                // tslint:disable-next-line
                this.interopAdaptor.invokeMethodAsync('OnServerFilter', this.filterInput.value);
              } else {
                this.hidePopup();
              }
            } else {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list)) {
                _get2(_getPrototypeOf2(AutoComplete.prototype), "renderList", this).call(this, true);
              }

              this.queryString = this.filterInput.value;

              if (e.keyCode === 40 || e.keyCode === 38) {
                this.queryString = this.queryString === '' ? null : this.queryString;
                this.beforePopupOpen = true;
                this.resetList(this.dataSource, this.fields);
                return;
              }

              this.isSelected = false;
              this.activeIndex = null;
              var eventArgs = {
                preventDefaultAction: false,
                text: this.filterInput.value,
                updateData: function updateData(dataSource, query, fields) {
                  if (eventArgs.cancel) {
                    return;
                  }

                  _this166.isFiltered = true;

                  _this166.filterAction(dataSource, query, fields);
                },
                cancel: false
              };
              this.trigger('filtering', eventArgs, function (eventArgs) {
                if (!eventArgs.cancel && !_this166.isFiltered && !eventArgs.preventDefaultAction) {
                  _this166.filterAction(_this166.dataSource, null, _this166.fields);
                }
              });
            }
          }
          /**
           * To filter the data from given data source by using query
           * @param  {Object[] | DataManager } dataSource - Set the data source to filter.
           * @param  {Query} query - Specify the query to filter the data.
           * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
           * @return {void}.
           * @deprecated
           */

        }, {
          key: "filter",
          value: function filter(dataSource, query, fields) {
            this.isFiltered = true;
            this.filterAction(dataSource, query, fields);
          }
        }, {
          key: "filterAction",
          value: function filterAction(dataSource, query, fields) {
            this.beforePopupOpen = true;

            if (this.queryString !== '' && this.queryString.length >= this.minLength) {
              this.resetList(dataSource, fields, query);
            } else {
              this.hidePopup();
            }
          }
        }, {
          key: "clearAll",
          value: function clearAll(e, property) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(property) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(property) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(property.dataSource)) {
              _get2(_getPrototypeOf2(AutoComplete.prototype), "clearAll", this).call(this, e);
            }

            if (this.beforePopupOpen) {
              this.hidePopup();
            }
          }
        }, {
          key: "onActionComplete",
          value: function onActionComplete(ulElement, list, e, isUpdated) {
            this.fixedHeaderElement = null;

            _get2(_getPrototypeOf2(AutoComplete.prototype), "onActionComplete", this).call(this, ulElement, list, e);

            var item = this.list.querySelector('.' + dropDownListClasses.li);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([item], dropDownListClasses.focus);
            }

            this.postBackAction();
          }
        }, {
          key: "postBackAction",
          value: function postBackAction() {
            if (this.autofill && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.liCollections[0])) {
              var items = [this.liCollections[0]];
              var searchItem = Search(this.inputElement.value, items, 'StartsWith', this.ignoreCase);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(searchItem.item)) {
                _get2(_getPrototypeOf2(AutoComplete.prototype), "setAutoFill", this).call(this, this.liCollections[0], true);
              }
            }
          }
        }, {
          key: "setSelection",
          value: function setSelection(li, e) {
            if (!this.isValidLI(li)) {
              return;
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) && e.type === 'keydown' && e.action !== 'enter' && e.action !== 'tab' && this.isValidLI(li)) {
              var value = this.getFormattedValue(li.getAttribute('data-value'));
              this.activeIndex = this.getIndexByValue(value);

              if (this.isServerBlazor) {
                this.removeHover();
              }

              this.setHoverList(li);
              this.selectedLI = li;
              this.setScrollPosition(e);

              if (this.autofill && this.isPopupOpen) {
                this.preventAutoFill = false;

                _get2(_getPrototypeOf2(AutoComplete.prototype), "setAutoFill", this).call(this, li);
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.inputElement, {
                'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null
              });
            } else {
              _get2(_getPrototypeOf2(AutoComplete.prototype), "setSelection", this).call(this, li, e);
            }
          }
        }, {
          key: "listOption",
          value: function listOption(dataSource, fieldsSettings) {
            var _this167 = this;

            var fields = _get2(_getPrototypeOf2(AutoComplete.prototype), "listOption", this).call(this, dataSource, fieldsSettings);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fields.itemCreated)) {
              fields.itemCreated = function (e) {
                if (_this167.highlight) {
                  if (_this167.element.tagName === _this167.getNgDirective() && _this167.itemTemplate) {
                    setTimeout(function () {
                      highlightSearch(e.item, _this167.queryString, _this167.ignoreCase, _this167.filterType);
                    }, 0);
                  } else {
                    highlightSearch(e.item, _this167.queryString, _this167.ignoreCase, _this167.filterType);
                  }
                }
              };
            } else {
              var itemCreated = fields.itemCreated;

              fields.itemCreated = function (e) {
                if (_this167.highlight) {
                  highlightSearch(e.item, _this167.queryString, _this167.ignoreCase, _this167.filterType);
                }

                itemCreated.apply(_this167, [e]);
              };
            }

            return fields;
          }
        }, {
          key: "isFiltering",
          value: function isFiltering() {
            return true;
          }
        }, {
          key: "renderPopup",
          value: function renderPopup() {
            this.list.scrollTop = 0;

            _get2(_getPrototypeOf2(AutoComplete.prototype), "renderPopup", this).call(this);
          }
        }, {
          key: "isEditTextBox",
          value: function isEditTextBox() {
            return true && this.inputElement.value.trim() !== '';
          }
        }, {
          key: "isPopupButton",
          value: function isPopupButton() {
            return this.showPopupButton;
          }
        }, {
          key: "isSelectFocusItem",
          value: function isSelectFocusItem(element) {
            return false;
          }
          /**
           * Search the entered text and show it in the suggestion list if available.
           * @returns void.
           * @deprecated
           */

        }, {
          key: "showPopup",
          value: function showPopup() {
            if (!this.enabled) {
              return;
            }

            if (this.beforePopupOpen && !this.isServerBlazor) {
              this.refreshPopup();
              return;
            }

            this.beforePopupOpen = true;
            this.preventAutoFill = true;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list) || this.isServerBlazor) {
              this.renderList();
            } else {
              this.resetList(this.dataSource, this.fields);
            }
          }
          /**
           * Hides the popup if it is in open state.
           * @returns void.
           */

        }, {
          key: "hidePopup",
          value: function hidePopup() {
            this.DropDownBaseresetBlazorTemplates(true, false, false, false);

            _get2(_getPrototypeOf2(AutoComplete.prototype), "hidePopup", this).call(this);

            this.activeIndex = -1;
          }
          /**
           * Dynamically change the value of properties.
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            if (this.getModuleName() === 'autocomplete') {
              this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);
            }

            for (var _i88 = 0, _Object$keys27 = Object.keys(newProp); _i88 < _Object$keys27.length; _i88++) {
              var prop = _Object$keys27[_i88];

              switch (prop) {
                case 'showPopupButton':
                  if (this.showPopupButton) {
                    if (!this.isServerBlazor) {
                      var button = _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].appendSpan(dropDownListClasses.icon, this.inputWrapper.container, this.createElement);

                      this.inputWrapper.buttons[0] = button;
                    } else if (this.inputWrapper && this.inputWrapper.container) {
                      var _button = this.inputWrapper.container.querySelector('.e-input-group-icon.e-ddl-icon');

                      this.inputWrapper.buttons[0] = _button;
                    }

                    if (this.inputWrapper && this.inputWrapper.buttons && this.inputWrapper.buttons[0]) {
                      _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper.buttons[0], 'click', this.dropDownClick, this);
                    }
                  } else if (!this.isServerBlazor) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.inputWrapper.buttons[0]);
                    this.inputWrapper.buttons[0] = null;
                  }

                  break;

                default:
                  var atcProps = void 0;
                  atcProps = this.getPropObject(prop, newProp, oldProp);

                  _get2(_getPrototypeOf2(AutoComplete.prototype), "onPropertyChanged", this).call(this, atcProps.newProperty, atcProps.oldProperty);

                  break;
              }
            }
          }
        }, {
          key: "renderHightSearch",
          value: function renderHightSearch() {
            if (this.highlight) {
              for (var i = 0; i < this.liCollections.length; i++) {
                var isHighlight = this.ulElement.querySelector('.e-active');

                if (!isHighlight) {
                  revertHighlightSearch(this.liCollections[i]);
                  highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType, this.isServerBlazor);
                }
              }
            }
          }
          /**
           * Return the module name of this component.
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'autocomplete';
          }
          /**
           * To initialize the control rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            _get2(_getPrototypeOf2(AutoComplete.prototype), "render", this).call(this);
          }
        }]);

        return AutoComplete;
      }(ComboBox);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        value: null,
        iconCss: null,
        groupBy: null
      }, FieldSettings)], AutoComplete.prototype, "fields", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], AutoComplete.prototype, "ignoreCase", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], AutoComplete.prototype, "showPopupButton", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], AutoComplete.prototype, "highlight", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(20)], AutoComplete.prototype, "suggestionCount", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], AutoComplete.prototype, "htmlAttributes", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], AutoComplete.prototype, "query", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1)], AutoComplete.prototype, "minLength", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Contains')], AutoComplete.prototype, "filterType", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], AutoComplete.prototype, "filtering", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], AutoComplete.prototype, "index", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Never')], AutoComplete.prototype, "floatLabelType", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], AutoComplete.prototype, "valueTemplate", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], AutoComplete.prototype, "filterBarPlaceholder", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], AutoComplete.prototype, "allowFiltering", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], AutoComplete.prototype, "text", void 0);

      AutoComplete = __decorate$4([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], AutoComplete);
      /**
       * export all modules from current location
       */

      /**
       * FloatLable Moduel
       * Specifies whether to display the floating label above the input element.
       */

      var FLOATLINE = 'e-float-line';
      var FLOATTEXT = 'e-float-text';
      var LABELTOP = 'e-label-top';
      var LABELBOTTOM = 'e-label-bottom';
      /**
       * Function to create Float Label element.
       * @param overAllWrapper - overall wrapper of multiselect.
       * @param element - the given html element.
       * @param inputElement - specify the input wrapper.
       * @param value - Value of the MultiSelect.
       * @param floatLabelType - Specify the FloatLabel Type.
       * @param placeholder - Specify the PlaceHolder text.
       */

      function createFloatLabel(overAllWrapper, searchWrapper, element, inputElement, value, floatLabelType, placeholder) {
        var floatLinelement;
        var floatLabelElement;
        floatLinelement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('span', {
          className: FLOATLINE
        });
        floatLabelElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])('label', {
          className: FLOATTEXT
        });

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element.id) && element.id !== '') {
          floatLabelElement.id = 'label_' + element.id.replace(/ /g, '_');
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
            'aria-labelledby': floatLabelElement.id
          });
        }

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(inputElement.placeholder) && inputElement.placeholder !== '') {
          floatLabelElement.innerText = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(inputElement.placeholder);
          inputElement.removeAttribute('placeholder');
        }

        floatLabelElement.innerText = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(placeholder);
        searchWrapper.appendChild(floatLinelement);
        searchWrapper.appendChild(floatLabelElement);
        overAllWrapper.classList.add('e-float-input');
        updateFloatLabelState(value, floatLabelElement);

        if (floatLabelType === 'Always') {
          if (floatLabelElement.classList.contains(LABELBOTTOM)) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([floatLabelElement], LABELBOTTOM);
          }

          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([floatLabelElement], LABELTOP);
        }
      }
      /**
       * Function to update status of the Float Label element.
       * @param value - Value of the MultiSelect.
       * @param label - float label element.
       */


      function updateFloatLabelState(value, label) {
        if (value && value.length > 0) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], LABELTOP);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([label], LABELBOTTOM);
        } else {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([label], LABELTOP);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], LABELBOTTOM);
        }
      }
      /**
       * Function to remove Float Label element.
       * @param overAllWrapper - overall wrapper of multiselect.
       * @param componentWrapper - wrapper element of multiselect.
       * @param searchWrapper - search wrapper of multiselect.
       * @param inputElement - specify the input wrapper.
       * @param value - Value of the MultiSelect.
       * @param floatLabelType - Specify the FloatLabel Type.
       * @param placeholder - Specify the PlaceHolder text.
       */


      function removeFloating(overAllWrapper, componentWrapper, searchWrapper, inputElement, value, floatLabelType, placeholder) {
        var placeholderElement = componentWrapper.querySelector('.' + FLOATTEXT);
        var floatLine = componentWrapper.querySelector('.' + FLOATLINE);
        var placeholderText;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(placeholderElement)) {
          placeholderText = placeholderElement.innerText;
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(searchWrapper.querySelector('.' + FLOATTEXT));
          setPlaceHolder(value, inputElement, placeholderText);

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(floatLine)) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(searchWrapper.querySelector('.' + FLOATLINE));
          }
        } else {
          placeholderText = placeholder !== null ? placeholder : '';
          setPlaceHolder(value, inputElement, placeholderText);
        }

        overAllWrapper.classList.remove('e-float-input');
      }
      /**
       * Function to set the placeholder to the element.
       * @param value - Value of the MultiSelect.
       * @param inputElement - specify the input wrapper.
       * @param placeholder - Specify the PlaceHolder text.
       */


      function setPlaceHolder(value, inputElement, placeholder) {
        if (value && value.length) {
          inputElement.placeholder = '';
        } else {
          inputElement.placeholder = placeholder;
        }
      }
      /**
       * Function for focusing the Float Element.
       * @param overAllWrapper - overall wrapper of multiselect.
       * @param componentWrapper - wrapper element of multiselect.
       */


      function floatLabelFocus(overAllWrapper, componentWrapper) {
        overAllWrapper.classList.add('e-input-focus');
        var label = componentWrapper.querySelector('.' + FLOATTEXT);

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(label)) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], LABELTOP);

          if (label.classList.contains(LABELBOTTOM)) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([label], LABELBOTTOM);
          }
        }
      }
      /**
       * Function to focus the Float Label element.
       * @param overAllWrapper - overall wrapper of multiselect.
       * @param componentWrapper - wrapper element of multiselect.
       * @param value - Value of the MultiSelect.
       * @param floatLabelType - Specify the FloatLabel Type.
       * @param placeholder - Specify the PlaceHolder text.
       */


      function floatLabelBlur(overAllWrapper, componentWrapper, value, floatLabelType, placeholder) {
        overAllWrapper.classList.remove('e-input-focus');
        var label = componentWrapper.querySelector('.' + FLOATTEXT);

        if (value && value.length <= 0 && floatLabelType === 'Auto' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(label)) {
          if (label.classList.contains(LABELTOP)) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([label], LABELTOP);
          }

          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], LABELBOTTOM);
        }
      }

      var __decorate$5 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      }; /// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>

      /* tslint:disable */

      /* tslint:enable */


      var FOCUS = 'e-input-focus';
      var DISABLED$1 = 'e-disabled';
      var OVER_ALL_WRAPPER = 'e-multiselect e-input-group e-control-wrapper';
      var ELEMENT_WRAPPER = 'e-multi-select-wrapper';
      var ELEMENT_MOBILE_WRAPPER = 'e-mob-wrapper';
      var HIDE_LIST = 'e-hide-listitem';
      var DELIMITER_VIEW = 'e-delim-view';
      var CHIP_WRAPPER$1 = 'e-chips-collection';
      var CHIP$1 = 'e-chips';
      var CHIP_CONTENT$1 = 'e-chipcontent';
      var CHIP_CLOSE$1 = 'e-chips-close';
      var CHIP_SELECTED = 'e-chip-selected';
      var SEARCHBOX_WRAPPER = 'e-searcher';
      var DELIMITER_VIEW_WRAPPER = 'e-delimiter';
      var ZERO_SIZE = 'e-zero-size';
      var REMAIN_WRAPPER$1 = 'e-remain';
      var CLOSEICON_CLASS$1 = 'e-chips-close e-close-hooker';
      var DELIMITER_WRAPPER = 'e-delim-values';
      var POPUP_WRAPPER = 'e-ddl e-popup e-multi-select-list-wrapper';
      var INPUT_ELEMENT = 'e-dropdownbase';
      var RTL_CLASS = 'e-rtl';
      var CLOSE_ICON_HIDE = 'e-close-icon-hide';
      var MOBILE_CHIP = 'e-mob-chip';
      var FOOTER$1 = 'e-ddl-footer';
      var HEADER$1 = 'e-ddl-header';
      var DISABLE_ICON = 'e-ddl-disable-icon';
      var SPINNER_CLASS$1 = 'e-ms-spinner-icon';
      var HIDDEN_ELEMENT = 'e-multi-hidden';
      var _destroy = 'destroy';
      var dropdownIcon = 'e-input-group-icon e-ddl-icon';
      var iconAnimation = 'e-icon-anim';
      var TOTAL_COUNT_WRAPPER$1 = 'e-delim-total';
      var BOX_ELEMENT = 'e-multiselect-box';
      var FILTERPARENT = 'e-filter-parent';
      var CUSTOM_WIDTH = 'e-search-custom-width';
      /**
       * The Multiselect allows the user to pick a more than one value from list of predefined values.
       * ```html
       * <select id="list">
       *      <option value='1'>Badminton</option>
       *      <option value='2'>Basketball</option>
       *      <option value='3'>Cricket</option>
       *      <option value='4'>Football</option>
       *      <option value='5'>Tennis</option>
       * </select>
       * ```
       * ```typescript
       * <script>
       *   var multiselectObj = new Multiselect();
       *   multiselectObj.appendTo("#list");
       * </script>
       * ```
       */

      var MultiSelect = /*#__PURE__*/function (_DropDownBase2) {
        _inherits2(MultiSelect, _DropDownBase2);

        var _super59 = _createSuper(MultiSelect);

        /**
         * Constructor for creating the DropDownList widget.
         */
        function MultiSelect(option, element) {
          var _this168;

          _classCallCheck2(this, MultiSelect);

          _this168 = _super59.call(this, option, element);
          _this168.isValidKey = false;
          _this168.selectAllEventData = [];
          _this168.selectAllEventEle = [];
          _this168.isDynamicDataChange = false;
          _this168.scrollFocusStatus = false;
          _this168.keyDownStatus = false;
          return _this168;
        }

        _createClass2(MultiSelect, [{
          key: "enableRTL",
          value: function enableRTL(state) {
            if (state) {
              this.overAllWrapper.classList.add(RTL_CLASS);
            } else {
              this.overAllWrapper.classList.remove(RTL_CLASS);
            }

            if (this.popupObj) {
              this.popupObj.enableRtl = state;
              this.popupObj.dataBind();
            }
          }
        }, {
          key: "requiredModules",
          value: function requiredModules() {
            var modules = [];

            if (this.mode === 'CheckBox') {
              this.isGroupChecking = this.enableGroupCheckBox;

              if (this.enableGroupCheckBox) {
                var prevOnChange = this.isProtectedOnChange;
                this.isProtectedOnChange = true;
                this.enableSelectionOrder = false;
                this.isProtectedOnChange = prevOnChange;
              }

              this.allowCustomValue = false;
              this.hideSelectedItem = false;
              this.closePopupOnSelect = false;
              modules.push({
                member: 'CheckBoxSelection',
                args: [this]
              });
            }

            return modules;
          }
        }, {
          key: "updateHTMLAttribute",
          value: function updateHTMLAttribute() {
            if (Object.keys(this.htmlAttributes).length) {
              for (var _i89 = 0, _Object$keys28 = Object.keys(this.htmlAttributes); _i89 < _Object$keys28.length; _i89++) {
                var htmlAttr = _Object$keys28[_i89];

                switch (htmlAttr) {
                  case 'class':
                    var updatedClassValue = this.htmlAttributes[htmlAttr].replace(/\s+/g, ' ').trim();

                    if (updatedClassValue !== '') {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overAllWrapper], updatedClassValue.split(' '));
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.popupWrapper], updatedClassValue.split(' '));
                    }

                    break;

                  case 'disabled':
                    this.enable(false);
                    break;

                  case 'placeholder':
                    if (!this.placeholder) {
                      this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                      this.setProperties({
                        placeholder: this.inputElement.placeholder
                      }, true);
                      this.refreshPlaceHolder();
                    }

                    break;

                  default:
                    var defaultAttr = ['id'];
                    var validateAttr = ['name', 'required', 'aria-required', 'form'];
                    var containerAttr = ['title', 'role', 'style', 'class'];

                    if (defaultAttr.indexOf(htmlAttr) > -1) {
                      this.element.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                    } else if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {
                      this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                    } else if (containerAttr.indexOf(htmlAttr) > -1) {
                      this.overAllWrapper.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                    } else {
                      this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                    }

                    break;
                }
              }
            }
          }
        }, {
          key: "updateReadonly",
          value: function updateReadonly(state) {
            if (state || this.mode === 'CheckBox') {
              this.inputElement.setAttribute('readonly', 'true');
            } else {
              this.inputElement.removeAttribute('readonly');
            }
          }
        }, {
          key: "updateClearButton",
          value: function updateClearButton(state) {
            if (state) {
              if (this.overAllClear.parentNode) {
                this.overAllClear.style.display = '';
              } else {
                this.componentWrapper.appendChild(this.overAllClear);
              }

              this.componentWrapper.classList.remove(CLOSE_ICON_HIDE);
            } else {
              this.overAllClear.style.display = 'none';
              this.componentWrapper.classList.add(CLOSE_ICON_HIDE);
            }
          }
        }, {
          key: "updateCssClass",
          value: function updateCssClass() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && this.cssClass !== '') {
              var updatedCssClassValues = this.cssClass;
              updatedCssClassValues = this.cssClass.replace(/\s+/g, ' ').trim();

              if (updatedCssClassValues !== '') {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overAllWrapper], updatedCssClassValues.split(' '));
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.popupWrapper], updatedCssClassValues.split(' '));
              }
            }
          }
        }, {
          key: "updateOldPropCssClass",
          value: function updateOldPropCssClass(oldClass) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldClass) && oldClass !== '') {
              oldClass = oldClass.replace(/\s+/g, ' ').trim();

              if (oldClass !== '') {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.overAllWrapper], oldClass.split(' '));
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.popupWrapper], oldClass.split(' '));
              }
            }
          }
        }, {
          key: "onPopupShown",
          value: function onPopupShown() {
            var _this169 = this;

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.mode === 'CheckBox' && this.allowFiltering) {
              var proxy = this;

              window.onpopstate = function () {
                proxy.hidePopup();
                proxy.inputElement.focus();
              };

              history.pushState({}, '');
            }

            var animModel = {
              name: 'FadeIn',
              duration: 100
            };
            var eventArgs = {
              popup: this.popupObj,
              cancel: false,
              animation: animModel
            };
            this.trigger('open', eventArgs, function (eventArgs) {
              if (!eventArgs.cancel) {
                _this169.focusAtFirstListItem();

                document.body.appendChild(_this169.popupObj.element);

                if (_this169.mode === 'CheckBox' && _this169.enableGroupCheckBox && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this169.fields.groupBy)) {
                  _this169.updateListItems(_this169.list.querySelectorAll('li.e-list-item'), _this169.mainList.querySelectorAll('li.e-list-item'));
                }

                if (_this169.mode === 'CheckBox' || _this169.showDropDownIcon) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this169.overAllWrapper], [iconAnimation]);
                }

                _this169.refreshPopup();

                _this169.popupObj.show(eventArgs.animation, _this169.zIndex === 1000 ? _this169.element : null);

                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(_this169.inputElement, {
                  'aria-expanded': 'true'
                });

                if (_this169.isFirstClick) {
                  _this169.loadTemplate();
                }
              }
            });
          }
        }, {
          key: "updateListItems",
          value: function updateListItems(listItems, mainListItems) {
            for (var i = 0; i < listItems.length; i++) {
              this.findGroupStart(listItems[i]);
              this.findGroupStart(mainListItems[i]);
            }

            this.deselectHeader();
          }
        }, {
          key: "loadTemplate",
          value: function loadTemplate() {
            this.refreshListItems(null);

            if (this.mode === 'CheckBox') {
              this.removeFocus();
            }

            this.notify('reOrder', {
              module: 'CheckBoxSelection',
              enable: this.mode === 'CheckBox',
              e: this
            });
          }
        }, {
          key: "setScrollPosition",
          value: function setScrollPosition() {
            if ((!this.hideSelectedItem && this.mode !== 'CheckBox' || this.mode === 'CheckBox' && !this.enableSelectionOrder) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) && this.value.length > 0) {
              var valueEle = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, 'li', 'data-value', this.value[this.value.length - 1]);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(valueEle)) {
                this.scrollBottom(valueEle);
              }
            }
          }
        }, {
          key: "focusAtFirstListItem",
          value: function focusAtFirstListItem() {
            if (this.ulElement && this.ulElement.querySelector('li.' + dropDownBaseClasses.li)) {
              var element;

              if (this.mode === 'CheckBox') {
                this.removeFocus();
                return;
              } else {
                element = this.ulElement.querySelector('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')');
              }

              if (element !== null) {
                this.removeFocus();
                this.addListFocus(element);
              }
            }
          }
        }, {
          key: "focusAtLastListItem",
          value: function focusAtLastListItem(data) {
            var activeElement;

            if (data) {
              activeElement = Search(data, this.liCollections, 'StartsWith', this.ignoreCase);
            } else {
              if (this.value && this.value.length) {
                Search(this.value[this.value.length - 1], this.liCollections, 'StartsWith', this.ignoreCase);
              } else {
                activeElement = null;
              }
            }

            if (activeElement && activeElement.item !== null) {
              this.addListFocus(activeElement.item);
              this.scrollBottom(activeElement.item, activeElement.index);
            }
          }
        }, {
          key: "getAriaAttributes",
          value: function getAriaAttributes() {
            var ariaAttributes = {
              'aria-disabled': 'false',
              'aria-owns': this.element.id + '_options',
              'role': 'listbox',
              'aria-multiselectable': 'true',
              'aria-activedescendant': 'null',
              'aria-haspopup': 'true',
              'aria-expanded': 'false'
            };
            return ariaAttributes;
          }
        }, {
          key: "updateListARIA",
          value: function updateListARIA() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.ulElement, {
              'id': this.element.id + '_options',
              'role': 'listbox',
              'aria-hidden': 'false'
            });
            var disableStatus = this.inputElement.disabled ? true : false;
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.inputElement, this.getAriaAttributes());

            if (disableStatus) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.inputElement, {
                'aria-disabled': 'true'
              });
            }

            this.ensureAriaDisabled(disableStatus ? 'true' : 'false');
          }
        }, {
          key: "ensureAriaDisabled",
          value: function ensureAriaDisabled(status) {
            if (this.htmlAttributes && this.htmlAttributes['aria-disabled']) {
              var attr = this.htmlAttributes;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(attr, {
                'aria-disabled': status
              }, attr);
              this.setProperties({
                htmlAttributes: attr
              }, true);
            }
          }
        }, {
          key: "removelastSelection",
          value: function removelastSelection(e) {
            var elements;
            elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP$1);
            var value = elements[elements.length - 1].getAttribute('data-value');

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
              this.tempValues = this.value.slice();
            }

            this.removeValue(value, e);
            this.removeChipSelection();
            this.updateDelimeter(this.delimiterChar, e);
            this.makeTextBoxEmpty();

            if (this.mainList && this.listData) {
              this.refreshSelection();
            }

            this.checkPlaceholderSize();
          }
        }, {
          key: "onActionFailure",
          value: function onActionFailure(e) {
            _get2(_getPrototypeOf2(MultiSelect.prototype), "onActionFailure", this).call(this, e);

            this.renderPopup();
            this.onPopupShown();
          }
        }, {
          key: "targetElement",
          value: function targetElement() {
            this.targetInputElement = this.inputElement;

            if (this.mode === 'CheckBox' && this.allowFiltering) {
              this.notify('targetElement', {
                module: 'CheckBoxSelection',
                enable: this.mode === 'CheckBox'
              });
            }

            return this.targetInputElement.value;
          }
        }, {
          key: "getForQuery",
          value: function getForQuery(valuecheck) {
            var predicate;
            var field = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.value) ? this.fields.text : this.fields.value;

            for (var i = 0; i < valuecheck.length; i++) {
              if (i === 0) {
                predicate = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Predicate"](field, 'equal', valuecheck[i]);
              } else {
                predicate = predicate.or(field, 'equal', valuecheck[i]);
              }
            }

            return this.getQuery(this.query).where(predicate);
          }
        }, {
          key: "onActionComplete",
          value: function onActionComplete(ulElement, list, e, isUpdated) {
            _get2(_getPrototypeOf2(MultiSelect.prototype), "onActionComplete", this).call(this, ulElement, list, e);

            this.updateSelectElementData(this.allowFiltering);
            var proxy = this;
            var valuecheck = [];

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && this.isDynamicDataChange && this.value !== null && this.value.length > 0) {
              var items = [];

              for (var k = 0; k < this.value.length; k++) {
                var itemsData = this.getDataByValue(this.value[k]);

                if (itemsData) {
                  // tslint:disable-next-line
                  items.push(itemsData[this.fields.value]); // remove the condition for hybrid
                }
              }

              if (items.length === 0) {
                this.setProperties({
                  'value': null
                });
              }
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) && !this.allowCustomValue) {
              for (var i = 0; i < this.value.length; i++) {
                var checkEle = this.findListElement(this.allowFiltering && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.mainList) ? this.mainList : ulElement, 'li', 'data-value', proxy.value[i]);

                if (!checkEle) {
                  valuecheck.push(proxy.value[i]);
                }
              }
            }

            if (valuecheck.length > 0 && this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
              this.dataSource.executeQuery(this.getForQuery(valuecheck)).then(function (e) {
                proxy.addItem(e.result, list.length);
                proxy.updateActionList(ulElement, list, e);
              });
            } else {
              this.updateActionList(ulElement, list, e);
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && this.allowFiltering && this.mode === 'CheckBox') {
              this.removeFocus();
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && this.isDynamicDataChange && this.value && this.value.length > 0) {
              this.updateVal(this.value, null, 'value');
              this.addValidInputClass();
              this.isDynamicDataChange = false;
            }

            if (this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"] && this.mode === 'CheckBox' && this.allowFiltering && !(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
              this.removeFocus();
            }
          }
        }, {
          key: "updateActionList",
          value: function updateActionList(ulElement, list, e, isUpdated) {
            if (this.mode === 'CheckBox' && this.showSelectAll) {
              this.notify('selectAll', {
                module: 'CheckBoxSelection',
                enable: this.mode === 'CheckBox'
              });
            }

            if (!this.mainList && !this.mainData) {
              this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
              this.mainData = list;
              this.mainListCollection = this.liCollections;
            } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.mainData) && this.mainData.length === 0) {
              this.mainData = list;
            }

            if ((this.remoteCustomValue || list.length <= 0) && this.allowCustomValue && this.inputFocus && this.allowFiltering && this.inputElement.value && this.inputElement.value !== '') {
              this.checkForCustomValue(this.tempQuery, this.fields);
              return;
            }

            if (this.value && this.value.length && (this.mode !== 'CheckBox' && this.inputElement.value !== '' || this.mode === 'CheckBox')) {
              this.refreshSelection();
            }

            this.updateListARIA();
            this.unwireListEvents();
            this.wireListEvents();

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.setInitialValue)) {
              this.setInitialValue();
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.selectAllAction)) {
              this.selectAllAction();
            }

            if (this.setDynValue) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.text) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) || this.value.length === 0)) {
                this.initialTextUpdate();
              }

              this.initialValueUpdate();
              this.initialUpdate();
              this.refreshPlaceHolder();

              if (this.mode !== 'CheckBox' && this.changeOnBlur) {
                this.updateValueState(null, this.value, null);
              }
            }

            this.renderPopup();

            if (this.beforePopupOpen) {
              this.beforePopupOpen = false;
              this.onPopupShown();
            }
          }
        }, {
          key: "refreshSelection",
          value: function refreshSelection() {
            var value;
            var element;
            var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
              for (var index = 0; !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value[index]); index++) {
                value = this.value[index];
                element = this.findListElement(this.list, 'li', 'data-value', value);

                if (element) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], className);

                  if (this.hideSelectedItem && element.previousSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group) && (!element.nextElementSibling || element.nextElementSibling.classList.contains(dropDownBaseClasses.group))) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element.previousElementSibling], className);
                  }

                  if (this.hideSelectedItem && this.fields.groupBy && !element.previousElementSibling.classList.contains(HIDE_LIST)) {
                    this.hideGroupItem(value);
                  }

                  if (this.hideSelectedItem && element.classList.contains(dropDownBaseClasses.focus)) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([element], dropDownBaseClasses.focus);
                    var listEle = element.parentElement.querySelectorAll('.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')');

                    if (listEle.length > 0) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([listEle[0]], dropDownBaseClasses.focus);
                    } else {
                      this.ulElement = this.ulElement.cloneNode ? this.ulElement.cloneNode(true) : this.ulElement;
                      this.l10nUpdate();
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.list], dropDownBaseClasses.noData);
                    }
                  }

                  element.setAttribute('aria-selected', 'true');

                  if (this.mode === 'CheckBox' && element.classList.contains('e-active')) {
                    var ariaValue = element.firstElementChild.getAttribute('aria-checked');

                    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ariaValue) || ariaValue === 'false') {
                      var args = {
                        module: 'CheckBoxSelection',
                        enable: this.mode === 'CheckBox',
                        li: element,
                        e: null
                      };
                      this.notify('updatelist', args);
                    }
                  }
                }
              }
            }

            this.checkSelectAll();
            this.checkMaxSelection();
          }
        }, {
          key: "hideGroupItem",
          value: function hideGroupItem(value) {
            var element;
            var element1;
            var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
            element1 = element = this.findListElement(this.ulElement, 'li', 'data-value', value);
            var i = 0;
            var j = 0;
            var temp = true;
            var temp1 = true;

            do {
              if (element && element.previousElementSibling && !element.previousElementSibling.classList.contains(HIDE_LIST) && element.previousElementSibling.classList.contains(dropDownBaseClasses.li)) {
                temp = false;
              }

              if (!temp || !element || element.previousElementSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group)) {
                i = 10;
              } else {
                element = element.previousElementSibling;
              }

              if (element1 && element1.nextElementSibling && !element1.nextElementSibling.classList.contains(HIDE_LIST) && element1.nextElementSibling.classList.contains(dropDownBaseClasses.li)) {
                temp1 = false;
              }

              if (!temp1 || !element1 || element1.nextElementSibling && element1.nextElementSibling.classList.contains(dropDownBaseClasses.group)) {
                j = 10;
              } else {
                element1 = element1.nextElementSibling;
              }
            } while (i < 10 || j < 10);

            if (temp && temp1 && !element.previousElementSibling.classList.contains(HIDE_LIST)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element.previousElementSibling], className);
            } else if (temp && temp1 && element.previousElementSibling.classList.contains(HIDE_LIST)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([element.previousElementSibling], className);
            }
          }
        }, {
          key: "checkSelectAll",
          value: function checkSelectAll() {
            var groupItemLength = this.list.querySelectorAll('li.e-list-group-item.e-active').length;
            var listItem = this.list.querySelectorAll('li.e-list-item');
            var searchCount = this.list.querySelectorAll('li.' + dropDownBaseClasses.li).length;
            var searchActiveCount = this.list.querySelectorAll('li.' + dropDownBaseClasses.selected).length;

            if (this.enableGroupCheckBox && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.groupBy)) {
              searchActiveCount = searchActiveCount - groupItemLength;
            }

            if ((searchCount === searchActiveCount || searchActiveCount === this.maximumSelectionLength) && this.mode === 'CheckBox' && this.showSelectAll) {
              this.notify('checkSelectAll', {
                module: 'CheckBoxSelection',
                enable: this.mode === 'CheckBox',
                value: 'check'
              });
            } else if (searchCount !== searchActiveCount && this.mode === 'CheckBox' && this.showSelectAll) {
              this.notify('checkSelectAll', {
                module: 'CheckBoxSelection',
                enable: this.mode === 'CheckBox',
                value: 'uncheck'
              });
            }

            if (this.enableGroupCheckBox && this.fields.groupBy && !this.enableSelectionOrder) {
              for (var i = 0; i < listItem.length; i++) {
                this.findGroupStart(listItem[i]);
              }

              this.deselectHeader();
            }
          }
        }, {
          key: "openClick",
          value: function openClick(e) {
            if (!this.openOnClick && this.mode !== 'CheckBox') {
              if (this.targetElement() !== '') {
                this.showPopup();
              } else {
                this.hidePopup();
              }
            } else if (!this.openOnClick && this.mode === 'CheckBox' && !this.isPopupOpen()) {
              this.showPopup();
            }
          }
        }, {
          key: "KeyUp",
          value: function KeyUp(e) {
            if (this.mode === 'CheckBox' && !this.openOnClick) {
              var _char5 = String.fromCharCode(e.keyCode);

              var isWordCharacter = _char5.match(/\w/);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(isWordCharacter)) {
                this.isValidKey = true;
              }
            }

            this.isValidKey = this.isPopupOpen() && e.keyCode === 8 || this.isValidKey;
            this.isValidKey = e.ctrlKey && e.keyCode === 86 ? false : this.isValidKey;

            if (this.isValidKey) {
              this.isValidKey = false;
              this.expandTextbox();
              this.showOverAllClear();

              switch (e.keyCode) {
                default:
                  // For filtering works in mobile firefox
                  this.search(e);
              }
            }
          }
          /**
           * To filter the multiselect data from given data source by using query
           * @param  {Object[] | DataManager } dataSource - Set the data source to filter.
           * @param  {Query} query - Specify the query to filter the data.
           * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
           * @return {void}.
           */

        }, {
          key: "filter",
          value: function filter(dataSource, query, fields) {
            this.isFiltered = true;
            this.remoteFilterAction = true;
            this.dataUpdater(dataSource, query, fields);
          }
        }, {
          key: "getQuery",
          value: function getQuery(query) {
            var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();

            if (this.filterAction) {
              if (this.targetElement() !== null) {
                var dataType = this.typeOfData(this.dataSource)["typeof"];

                if (!(this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) && dataType === 'string' || dataType === 'number') {
                  filterQuery.where('', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);
                } else {
                  var fields = this.fields;
                  filterQuery.where(!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fields.text) ? fields.text : '', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);
                }
              }

              return filterQuery;
            } else {
              return query ? query : this.query ? this.query : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();
            }
          }
        }, {
          key: "dataUpdater",
          value: function dataUpdater(dataSource, query, fields) {
            this.isDataFetched = false;

            if (this.targetElement().trim() === '') {
              var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;

              if (this.backCommand) {
                this.remoteCustomValue = false;
                this.onActionComplete(list, this.mainData);

                if (this.value && this.value.length) {
                  this.refreshSelection();
                }

                if (this.keyCode !== 8) {
                  this.focusAtFirstListItem();
                }

                this.notify('reOrder', {
                  module: 'CheckBoxSelection',
                  enable: this.mode === 'CheckBox',
                  e: this
                });
              }
            } else {
              this.resetList(dataSource, fields, query);

              if (this.allowCustomValue) {
                if (!(dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"])) {
                  this.checkForCustomValue(query, fields);
                } else {
                  this.remoteCustomValue = true;
                  this.tempQuery = query;
                }
              }
            }

            this.refreshPopup();

            if (this.mode === 'CheckBox') {
              this.removeFocus();
            }
          }
        }, {
          key: "checkForCustomValue",
          value: function checkForCustomValue(query, fields) {
            var dataChecks = !this.getValueByText(this.inputElement.value, this.ignoreCase);

            if (this.allowCustomValue && dataChecks) {
              var value = this.inputElement.value;
              var field = fields ? fields : this.fields;
              var customData = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.mainData) && this.mainData.length > 0 ? this.mainData[0] : this.mainData;

              if (typeof customData !== 'string') {
                var dataItem = {};
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(field.text, value, dataItem);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(field.value, value, dataItem);
                var tempData = JSON.parse(JSON.stringify(this.listData));
                tempData.splice(0, 0, dataItem);
                this.resetList(tempData, field, query);
              } else {
                var _tempData = [this.inputElement.value];
                this.resetList(_tempData, field);
              }
            }

            if (this.value && this.value.length) {
              this.refreshSelection();
            }
          }
        }, {
          key: "getNgDirective",
          value: function getNgDirective() {
            return 'EJS-MULTISELECT';
          }
        }, {
          key: "wrapperClick",
          value: function wrapperClick(e) {
            this.setDynValue = false;

            if (!this.enabled) {
              return;
            }

            if (e.target === this.overAllClear) {
              e.preventDefault();
              return;
            }

            if (!this.inputFocus) {
              this.inputElement.focus();
            }

            if (!this.readonly) {
              if (e.target && e.target.classList.toString().indexOf(CHIP_CLOSE$1) !== -1) {
                if (this.isPopupOpen()) {
                  this.refreshPopup();
                }

                return;
              }

              if (!this.isPopupOpen() && (this.openOnClick || this.showDropDownIcon && e.target && e.target.className === dropdownIcon)) {
                this.showPopup();
              } else {
                this.hidePopup();

                if (this.mode === 'CheckBox') {
                  this.showOverAllClear();
                  this.inputFocus = true;

                  if (!this.overAllWrapper.classList.contains(FOCUS)) {
                    this.overAllWrapper.classList.add(FOCUS);
                  }
                }
              }
            }

            if (!(this.targetElement() && this.targetElement() !== '')) {
              e.preventDefault();
            }
          }
        }, {
          key: "enable",
          value: function enable(state) {
            if (state) {
              this.overAllWrapper.classList.remove(DISABLED$1);
              this.inputElement.removeAttribute('disabled');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.inputElement, {
                'aria-disabled': 'false'
              });
              this.ensureAriaDisabled('false');
            } else {
              this.overAllWrapper.classList.add(DISABLED$1);
              this.inputElement.setAttribute('disabled', 'true');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.inputElement, {
                'aria-disabled': 'true'
              });
              this.ensureAriaDisabled('true');
            }

            if (this.enabled !== state) {
              this.enabled = state;
            }

            this.hidePopup();
          }
        }, {
          key: "onBlur",
          value: function onBlur(eve, isDocClickFromCheck) {
            var target;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eve)) {
              target = eve.relatedTarget;
            }

            if (this.popupObj && document.body.contains(this.popupObj.element) && this.popupObj.element.contains(target)) {
              if (this.mode !== 'CheckBox') {
                this.inputElement.focus();
              } else if (this.floatLabelType === 'Auto' && (this.overAllWrapper.classList.contains('e-outline') || this.overAllWrapper.classList.contains('e-filled'))) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overAllWrapper], 'e-valid-input');
              }

              return;
            }

            if (this.floatLabelType === 'Auto' && this.overAllWrapper.classList.contains('e-outline') && this.mode === 'CheckBox' && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) || this.value.length === 0)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.overAllWrapper], 'e-valid-input');
            }

            if (this.mode === 'CheckBox' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eve) && !isDocClickFromCheck) {
              this.inputFocus = false;
              this.overAllWrapper.classList.remove(FOCUS);
              return;
            }

            if (this.scrollFocusStatus) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eve)) {
                eve.preventDefault();
              }

              this.inputElement.focus();
              this.scrollFocusStatus = false;
              return;
            }

            this.inputFocus = false;
            this.overAllWrapper.classList.remove(FOCUS);
            this.refreshListItems(null);

            if (this.mode !== 'Box' && this.mode !== 'CheckBox') {
              this.updateDelimView();
            }

            if (this.changeOnBlur) {
              this.updateValueState(eve, this.value, this.tempValues);
              this.dispatchEvent(this.hiddenElement, 'change');
            }

            this.overAllClear.style.display = 'none';

            if (this.isPopupOpen()) {
              this.DropDownBaseresetBlazorTemplates(false, false, true, true, false, true, true);
              this.hidePopup();
            }

            this.makeTextBoxEmpty();
            this.trigger('blur');
            this.focused = true;

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {
              this.removeChipFocus();
            }

            this.removeChipSelection();
            this.refreshInputHight();
            floatLabelBlur(this.overAllWrapper, this.componentWrapper, this.value, this.floatLabelType, this.placeholder);
            this.refreshPlaceHolder();

            if ((this.allowFiltering || this.enableSelectionOrder === true && this.mode === 'CheckBox') && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.mainList)) {
              this.ulElement = this.mainList;
            }

            this.checkPlaceholderSize();
          }
        }, {
          key: "checkPlaceholderSize",
          value: function checkPlaceholderSize() {
            if (this.showDropDownIcon) {
              var downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);
              this.setPlaceholderSize(downIconWidth);
            } else {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dropIcon)) {
                this.setPlaceholderSize(this.showDropDownIcon ? this.dropIcon.offsetWidth : 0);
              }
            }
          }
        }, {
          key: "setPlaceholderSize",
          value: function setPlaceholderSize(downIconWidth) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) || this.value.length === 0) {
              if (this.dropIcon.offsetWidth !== 0) {
                this.searchWrapper.style.width = 'calc(100% - ' + (downIconWidth + 10) + 'px';
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.searchWrapper], CUSTOM_WIDTH);
              }
            } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
              this.searchWrapper.removeAttribute('style');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.searchWrapper], CUSTOM_WIDTH);
            }
          }
        }, {
          key: "refreshInputHight",
          value: function refreshInputHight() {
            if ((!this.value || !this.value.length) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.text) || this.text === '')) {
              this.searchWrapper.classList.remove(ZERO_SIZE);
            } else {
              this.searchWrapper.classList.add(ZERO_SIZE);
            }
          }
        }, {
          key: "validateValues",
          value: function validateValues(newValue, oldValue) {
            return JSON.stringify(newValue.slice().sort()) !== JSON.stringify(oldValue.slice().sort());
          }
        }, {
          key: "updateValueState",
          value: function updateValueState(event, newVal, oldVal) {
            var newValue = newVal ? newVal : [];
            var oldValue = oldVal ? oldVal : [];

            if (this.initStatus && this.validateValues(newValue, oldValue)) {
              var eventArgs = {
                e: event,
                oldValue: oldVal,
                value: newVal,
                isInteracted: event ? true : false,
                element: this.element
              };
              this.trigger('change', eventArgs);
              this.updateTempValue();

              if (!this.changeOnBlur) {
                this.dispatchEvent(this.hiddenElement, 'change');
              }
            }
          }
        }, {
          key: "updateTempValue",
          value: function updateTempValue() {
            if (!this.value) {
              this.tempValues = this.value;
            } else {
              this.tempValues = this.value.slice();
            }
          }
        }, {
          key: "getPagingCount",
          value: function getPagingCount() {
            var height = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue('height');
            return Math.round(this.list.offsetHeight / parseInt(height, 10));
          }
        }, {
          key: "pageUpSelection",
          value: function pageUpSelection(steps) {
            var collection = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');
            var previousItem;
            previousItem = steps >= 0 ? collection[steps + 1] : collection[0];
            this.addListFocus(previousItem);
            this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));
          }
        }, {
          key: "pageDownSelection",
          value: function pageDownSelection(steps) {
            var list = this.getItems();
            var collection = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');
            var previousItem;
            previousItem = steps <= collection.length ? collection[steps - 1] : collection[collection.length - 1];
            this.addListFocus(previousItem);
            this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));
          }
        }, {
          key: "getItems",
          value: function getItems() {
            if (!this.list) {
              _get2(_getPrototypeOf2(MultiSelect.prototype), "render", this).call(this);
            }

            return this.ulElement && this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li).length > 0 ? this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')') : [];
          }
        }, {
          key: "focusInHandler",
          value: function focusInHandler(e) {
            if (this.enabled) {
              this.showOverAllClear();
              this.inputFocus = true;

              if (this.value && this.value.length) {
                if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {
                  this.chipCollectionWrapper.style.display = '';
                } else {
                  this.showDelimWrapper();
                }

                if (this.mode !== 'CheckBox') {
                  this.viewWrapper.style.display = 'none';
                }
              }

              if (this.mode !== 'CheckBox') {
                this.searchWrapper.classList.remove(ZERO_SIZE);
              }

              this.checkPlaceholderSize();

              if (this.focused) {
                var args = {
                  isInteracted: e ? true : false,
                  event: e
                };
                this.trigger('focus', args);
                this.focused = false;
              }

              if (!this.overAllWrapper.classList.contains(FOCUS)) {
                this.overAllWrapper.classList.add(FOCUS);
              }

              floatLabelFocus(this.overAllWrapper, this.componentWrapper);

              if (this.isPopupOpen()) {
                this.refreshPopup();
              }

              return true;
            } else {
              return false;
            }
          }
        }, {
          key: "showDelimWrapper",
          value: function showDelimWrapper() {
            if (this.mode === 'CheckBox') {
              this.viewWrapper.style.display = '';
            } else {
              this.delimiterWrapper.style.display = '';
            }

            this.componentWrapper.classList.add(DELIMITER_VIEW_WRAPPER);
          }
        }, {
          key: "hideDelimWrapper",
          value: function hideDelimWrapper() {
            this.delimiterWrapper.style.display = 'none';
            this.componentWrapper.classList.remove(DELIMITER_VIEW_WRAPPER);
          }
        }, {
          key: "expandTextbox",
          value: function expandTextbox() {
            var size = 5;

            if (this.placeholder) {
              size = size > this.inputElement.placeholder.length ? size : this.inputElement.placeholder.length;
            }

            if (this.inputElement.value.length > size) {
              this.inputElement.size = this.inputElement.value.length;
            } else {
              this.inputElement.size = size;
            }
          }
        }, {
          key: "isPopupOpen",
          value: function isPopupOpen() {
            return this.popupWrapper !== null && this.popupWrapper.parentElement !== null;
          }
        }, {
          key: "refreshPopup",
          value: function refreshPopup() {
            if (this.popupObj && this.mobFilter) {
              this.popupObj.setProperties({
                width: this.calcPopupWidth()
              });
              this.popupObj.refreshPosition(this.overAllWrapper);
              this.popupObj.resolveCollision();
            }
          }
        }, {
          key: "checkTextLength",
          value: function checkTextLength() {
            return this.targetElement().length < 1;
          }
        }, {
          key: "popupKeyActions",
          value: function popupKeyActions(e) {
            switch (e.keyCode) {
              case 38:
                this.hidePopup();

                if (this.mode === 'CheckBox') {
                  this.inputElement.focus();
                }

                e.preventDefault();
                break;

              case 40:
                if (!this.isPopupOpen()) {
                  this.showPopup();
                  e.preventDefault();
                }

                break;
            }
          }
        }, {
          key: "updateAriaAttribute",
          value: function updateAriaAttribute() {
            var focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(focusedItem)) {
              this.inputElement.setAttribute('aria-activedescendant', focusedItem.id);
            }
          }
        }, {
          key: "homeNavigation",
          value: function homeNavigation(isHome) {
            this.removeFocus();
            var scrollEle = this.ulElement.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');

            if (scrollEle.length > 0) {
              var element = scrollEle[isHome ? 0 : scrollEle.length - 1];
              element.classList.add(dropDownBaseClasses.focus);
              this.scrollBottom(element);
            }
          }
        }, {
          key: "onKeyDown",
          value: function onKeyDown(e) {
            if (this.readonly || !this.enabled && this.mode !== 'CheckBox') {
              return;
            }

            this.keyDownStatus = true;

            if (e.keyCode > 111 && e.keyCode < 124) {
              return;
            }

            if (e.altKey) {
              this.popupKeyActions(e);
              return;
            } else if (this.isPopupOpen()) {
              var focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);
              var activeIndex;

              switch (e.keyCode) {
                case 36:
                case 35:
                  this.homeNavigation(e.keyCode === 36 ? true : false);
                  break;

                case 33:
                  e.preventDefault();

                  if (focusedItem) {
                    this.getIndexByValue(focusedItem.getAttribute('data-value'));
                    this.pageUpSelection(activeIndex - this.getPagingCount());
                    this.updateAriaAttribute();
                  }

                  return;

                case 34:
                  e.preventDefault();

                  if (focusedItem) {
                    this.getIndexByValue(focusedItem.getAttribute('data-value'));
                    this.pageDownSelection(activeIndex + this.getPagingCount());
                    this.updateAriaAttribute();
                  }

                  return;

                case 38:
                  this.arrowUp(e);
                  break;

                case 40:
                  this.arrowDown(e);
                  break;

                case 27:
                  e.preventDefault();
                  this.hidePopup();

                  if (this.mode === 'CheckBox') {
                    this.inputElement.focus();
                  }

                  return;

                case 13:
                  e.preventDefault();

                  if (this.mode !== 'CheckBox') {
                    this.selectByKey(e);
                  }

                  this.checkPlaceholderSize();
                  return;

                case 32:
                  this.spaceKeySelection(e);
                  return;

                case 9:
                  e.preventDefault();
                  this.hidePopup();
                  this.inputElement.focus();
                  this.overAllWrapper.classList.add(FOCUS);
              }
            } else {
              switch (e.keyCode) {
                case 13:
                case 9:
                case 16:
                case 17:
                case 20:
                  return;

                case 40:
                  if (this.openOnClick) {
                    this.showPopup();
                  }

                  break;

                case 27:
                  e.preventDefault();
                  this.escapeAction();
                  return;
              }
            }

            if (this.checkTextLength()) {
              this.keyNavigation(e);
            }

            if (this.mode === 'CheckBox' && this.enableSelectionOrder) {
              this.checkBackCommand(e);
            }

            this.expandTextbox();
            this.refreshPopup();
          }
        }, {
          key: "arrowDown",
          value: function arrowDown(e) {
            e.preventDefault();
            this.moveByList(1);
            this.keyAction = true;

            if (document.activeElement.classList.contains('e-input-filter') || this.mode === 'CheckBox' && !this.allowFiltering && document.activeElement !== this.list) {
              this.list.focus();

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.list, 'keydown', this.onKeyDown, this);
            }

            this.updateAriaAttribute();
          }
        }, {
          key: "arrowUp",
          value: function arrowUp(e) {
            e.preventDefault();
            this.keyAction = true;
            var list = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');

            if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.groupBy)) {
              list = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ',li.' + dropDownBaseClasses.group + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');
            }

            var focuseElem = this.list.querySelector('li.' + dropDownBaseClasses.focus);
            var index = Array.prototype.slice.call(list).indexOf(focuseElem);

            if (index <= 0 && this.mode === 'CheckBox' && this.allowFiltering) {
              this.keyAction = false;
              this.notify('inputFocus', {
                module: 'CheckBoxSelection',
                enable: this.mode === 'CheckBox',
                value: 'focus'
              });
            } else {
              this.list.focus();
            }

            this.moveByList(-1);
            this.updateAriaAttribute();
          }
        }, {
          key: "spaceKeySelection",
          value: function spaceKeySelection(e) {
            if (this.mode === 'CheckBox') {
              if (!document.activeElement.classList.contains('e-input-filter')) {
                e.preventDefault();
                this.keyAction = true;
                this.list.focus();
              }

              this.selectByKey(e);
            }

            this.checkPlaceholderSize();
          }
        }, {
          key: "checkBackCommand",
          value: function checkBackCommand(e) {
            if (e.keyCode === 8 && this.targetElement() === '') {
              this.backCommand = false;
            } else {
              this.backCommand = true;
            }
          }
        }, {
          key: "keyNavigation",
          value: function keyNavigation(e) {
            if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox' && this.value && this.value.length) {
              switch (e.keyCode) {
                case 37:
                  //left arrow   
                  e.preventDefault();
                  this.moveBy(-1, e);
                  break;

                case 39:
                  //right arrow  
                  e.preventDefault();
                  this.moveBy(1, e);
                  break;

                case 8:
                  this.removelastSelection(e);
                  break;

                case 46:
                  //del
                  this.removeSelectedChip(e);
                  break;
              }
            } else if (e.keyCode === 8 && this.mode === 'Delimiter') {
              if (this.value && this.value.length) {
                e.preventDefault();
                var temp = this.value[this.value.length - 1];
                this.removeValue(temp, e);
                this.updateDelimeter(this.delimiterChar, e);
                this.focusAtLastListItem(temp);
              }
            }
          }
        }, {
          key: "selectByKey",
          value: function selectByKey(e) {
            this.removeChipSelection();
            this.selectListByKey(e);

            if (this.hideSelectedItem) {
              this.focusAtFirstListItem();
            }
          }
        }, {
          key: "escapeAction",
          value: function escapeAction() {
            var temp = this.tempValues ? this.tempValues.slice() : [];

            if (this.value && this.validateValues(this.value, temp)) {
              if (this.mode !== 'CheckBox') {
                this.value = temp;
                this.initialValueUpdate();
              }

              if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {
                this.chipCollectionWrapper.style.display = '';
              } else {
                this.showDelimWrapper();
              }

              this.refreshPlaceHolder();

              if (this.value.length) {
                this.showOverAllClear();
              } else {
                this.hideOverAllClear();
              }
            }

            this.makeTextBoxEmpty();
          }
        }, {
          key: "scrollBottom",
          value: function scrollBottom(selectedLI, activeIndex) {
            var currentOffset = this.list.offsetHeight;
            var nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
            var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
            var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
            boxRange = this.fields.groupBy && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;

            if (activeIndex === 0) {
              this.list.scrollTop = 0;
            } else if (nextBottom > currentOffset) {
              this.list.scrollTop = nextOffset;
            } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
              this.list.scrollTop = nextOffset;
            }
          }
        }, {
          key: "scrollTop",
          value: function scrollTop(selectedLI, activeIndex) {
            var nextOffset = selectedLI.offsetTop - this.list.scrollTop;
            var nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
            nextOffset = this.fields.groupBy && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
            var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;

            if (activeIndex === 0) {
              this.list.scrollTop = 0;
            } else if (nextOffset < 0) {
              this.list.scrollTop = this.list.scrollTop + nextOffset;
            } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
              this.list.scrollTop = selectedLI.offsetTop - (this.fields.groupBy && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);
            }
          }
        }, {
          key: "selectListByKey",
          value: function selectListByKey(e) {
            var li = this.list.querySelector('li.' + dropDownBaseClasses.focus);
            var limit = this.value && this.value.length ? this.value.length : 0;
            var target;

            if (li !== null) {
              if (li.classList.contains('e-active')) {
                limit = limit - 1;
              }

              if (this.isValidLI(li) && limit < this.maximumSelectionLength) {
                this.updateListSelection(li, e);
                this.addListFocus(li);

                if (this.mode === 'CheckBox') {
                  this.updateDelimView();
                  this.updateDelimeter(this.delimiterChar, e);
                  this.refreshInputHight();
                  this.checkPlaceholderSize();

                  if (this.enableGroupCheckBox && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.groupBy)) {
                    target = li.firstElementChild.lastElementChild;
                    this.findGroupStart(target);
                    this.deselectHeader();
                  }
                } else {
                  this.updateDelimeter(this.delimiterChar, e);
                }

                this.makeTextBoxEmpty();

                if (this.mode !== 'CheckBox') {
                  this.refreshListItems(li.textContent);
                }

                if (!this.changeOnBlur) {
                  this.updateValueState(e, this.value, this.tempValues);
                }

                this.refreshPopup();
              } else {
                if (!this.isValidLI(li) && limit < this.maximumSelectionLength) {
                  target = li.firstElementChild.lastElementChild;
                  target.classList.contains('e-check') ? this.selectAllItem(false, e, li) : this.selectAllItem(true, e, li);
                }
              }

              this.refreshSelection();

              if (this.closePopupOnSelect) {
                this.hidePopup();
              }
            }

            this.refreshPlaceHolder();
          }
        }, {
          key: "refreshListItems",
          value: function refreshListItems(data) {
            if ((this.allowFiltering || this.mode === 'CheckBox' && this.enableSelectionOrder === true || this.allowCustomValue) && this.mainList && this.listData) {
              var list;
              list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
              this.onActionComplete(list, this.mainData);
              this.focusAtLastListItem(data);

              if (this.value && this.value.length) {
                this.refreshSelection();
              }
            }
          }
        }, {
          key: "removeSelectedChip",
          value: function removeSelectedChip(e) {
            var selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);
            var temp;

            if (selectedElem !== null) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
                this.tempValues = this.value.slice();
              }

              temp = selectedElem.nextElementSibling;

              if (temp !== null) {
                this.removeChipSelection();
                this.addChipSelection(temp, e);
              }

              this.removeValue(selectedElem.getAttribute('data-value'), e);
              this.makeTextBoxEmpty();
            }

            if (this.closePopupOnSelect) {
              this.hidePopup();
            }

            this.checkPlaceholderSize();
          }
        }, {
          key: "moveByTop",
          value: function moveByTop(state) {
            var elements = this.list.querySelectorAll('li.' + dropDownBaseClasses.li);
            var index;

            if (elements.length > 1) {
              this.removeFocus();
              index = state ? 0 : elements.length - 1;
              this.addListFocus(elements[index]);
              this.scrollBottom(elements[index], index);
            }

            this.updateAriaAttribute();
          }
        }, {
          key: "moveByList",
          value: function moveByList(position) {
            if (this.list) {
              var elements = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');

              if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.groupBy)) {
                elements = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ',li.' + dropDownBaseClasses.group + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');
              }

              var selectedElem = this.list.querySelector('li.' + dropDownBaseClasses.focus);
              var temp = -1;

              if (elements.length) {
                for (var index = 0; index < elements.length; index++) {
                  if (elements[index] === selectedElem) {
                    temp = index;
                    break;
                  }
                }

                if (position > 0) {
                  if (temp < elements.length - 1) {
                    this.removeFocus();
                    this.addListFocus(elements[++temp]);
                    this.updateCheck(elements[temp]);
                    this.scrollBottom(elements[temp], temp);
                  }
                } else {
                  if (temp > 0) {
                    this.removeFocus();
                    this.addListFocus(elements[--temp]);
                    this.updateCheck(elements[temp]);
                    this.scrollTop(elements[temp], temp);
                  }
                }
              }
            }
          }
        }, {
          key: "updateCheck",
          value: function updateCheck(element) {
            if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.groupBy)) {
              var checkElement = element.firstElementChild.lastElementChild;

              if (checkElement.classList.contains('e-check')) {
                element.classList.add('e-active');
              } else {
                element.classList.remove('e-active');
              }
            }
          }
        }, {
          key: "moveBy",
          value: function moveBy(position, e) {
            var elements;
            var selectedElem;
            var temp;
            elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP$1);
            selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);

            if (selectedElem === null) {
              if (position < 0) {
                this.addChipSelection(elements[elements.length - 1], e);
              }
            } else {
              if (position < 0) {
                temp = selectedElem.previousElementSibling;

                if (temp !== null) {
                  this.removeChipSelection();
                  this.addChipSelection(temp, e);
                }
              } else {
                temp = selectedElem.nextElementSibling;
                this.removeChipSelection();

                if (temp !== null) {
                  this.addChipSelection(temp, e);
                }
              }
            }
          }
        }, {
          key: "chipClick",
          value: function chipClick(e) {
            if (this.enabled) {
              var elem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + CHIP$1);
              this.removeChipSelection();
              this.addChipSelection(elem, e);
            }
          }
        }, {
          key: "removeChipSelection",
          value: function removeChipSelection() {
            if (this.chipCollectionWrapper) {
              this.removeChipFocus();
            }
          }
        }, {
          key: "addChipSelection",
          value: function addChipSelection(element, e) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], CHIP_SELECTED);
            this.trigger('chipSelection', e);
          }
        }, {
          key: "onChipRemove",
          value: function onChipRemove(e) {
            if (e.which === 3 || e.button === 2) {
              return;
            }

            if (this.enabled && !this.readonly) {
              var element = e.target.parentElement;
              var customVal = element.getAttribute('data-value');
              var value = this.getFormattedValue(customVal);

              if (this.allowCustomValue && (customVal !== 'false' && value === false || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) && value.toString() === 'NaN')) {
                value = customVal;
              }

              if (this.isPopupOpen() && this.mode !== 'CheckBox') {
                this.hidePopup();
              }

              if (!this.inputFocus) {
                this.inputElement.focus();
              }

              this.removeValue(value, e);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.findListElement(this.list, 'li', 'data-value', value)) && this.mainList && this.listData) {
                var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
                this.onActionComplete(list, this.mainData);
              }

              this.updateDelimeter(this.delimiterChar, e);

              if (this.placeholder && this.floatLabelType === 'Never') {
                this.makeTextBoxEmpty();
                this.checkPlaceholderSize();
              } else {
                this.inputElement.value = '';
              }

              e.preventDefault();
            }
          }
        }, {
          key: "makeTextBoxEmpty",
          value: function makeTextBoxEmpty() {
            this.inputElement.value = '';
            this.refreshPlaceHolder();
          }
        }, {
          key: "refreshPlaceHolder",
          value: function refreshPlaceHolder() {
            if (this.placeholder && this.floatLabelType === 'Never') {
              if (this.value && this.value.length || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.text) && this.text !== '') {
                this.inputElement.placeholder = '';
              } else {
                this.inputElement.placeholder = this.placeholder;
              }
            } else {
              this.setFloatLabelType();
            }

            this.expandTextbox();
          }
        }, {
          key: "removeValue",
          value: function removeValue(value, eve, length, isClearAll) {
            var _this170 = this;

            var index = this.value.indexOf(this.getFormattedValue(value));

            if (index === -1 && this.allowCustomValue && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value)) {
              index = this.value.indexOf(value.toString());
            }

            var targetEle = eve && eve.target;
            isClearAll = isClearAll || targetEle && targetEle.classList.contains('e-close-hooker') ? true : null;
            var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;

            if (index !== -1) {
              var element = this.findListElement(this.list, 'li', 'data-value', value);
              var val = this.getDataByValue(value);
              var eventArgs = {
                e: eve,
                item: element,
                itemData: val,
                isInteracted: eve ? true : false,
                cancel: false
              };
              this.trigger('removing', eventArgs, function (eventArgs) {
                if (eventArgs.cancel) {
                  _this170.removeIndex++;
                } else {
                  var removeVal = _this170.value.slice(0);

                  removeVal.splice(index, 1);

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && _this170.isServerRendered) {
                    var removedValues = [].concat([], removeVal);

                    _this170.setProperties({
                      value: removedValues.length === 0 ? null : removedValues
                    }, true);
                  } else {
                    _this170.setProperties({
                      value: [].concat([], removeVal)
                    }, true);
                  }

                  if (element !== null) {
                    var hideElement = _this170.findListElement(_this170.mainList, 'li', 'data-value', value);

                    element.setAttribute('aria-selected', 'false');
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([element], className);

                    if (hideElement) {
                      hideElement.setAttribute('aria-selected', 'false');
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([element, hideElement], className);
                    }

                    _this170.notify('activeList', {
                      module: 'CheckBoxSelection',
                      enable: _this170.mode === 'CheckBox',
                      li: element,
                      e: _this170,
                      index: index
                    });

                    _this170.notify('updatelist', {
                      module: 'CheckBoxSelection',
                      enable: _this170.mode === 'CheckBox',
                      li: element,
                      e: eve
                    });

                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(_this170.inputElement, {
                      'aria-activedescendant': element.id
                    });

                    if (_this170.value && _this170.value.length !== _this170.mainData.length && _this170.mode === 'CheckBox' && _this170.showSelectAll) {
                      _this170.notify('checkSelectAll', {
                        module: 'CheckBoxSelection',
                        enable: _this170.mode === 'CheckBox',
                        value: 'uncheck'
                      });
                    }
                  }

                  if (_this170.hideSelectedItem && _this170.fields.groupBy) {
                    _this170.hideGroupItem(value);
                  }

                  _this170.updateMainList(true, value);

                  _this170.removeChip(value);

                  _this170.updateChipStatus();

                  var limit = _this170.value && _this170.value.length ? _this170.value.length : 0;

                  if (limit < _this170.maximumSelectionLength) {
                    var collection = _this170.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.e-active)');

                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(collection, 'e-disable');
                  }

                  _this170.trigger('removed', eventArgs);

                  var _targetEle = eve && eve.currentTarget;

                  var isSelectAll = _targetEle && _targetEle.classList.contains('e-selectall-parent') ? true : null;

                  if (!_this170.changeOnBlur && !isClearAll && eve && length && !isSelectAll) {
                    _this170.updateValueState(eve, _this170.value, _this170.tempValues);
                  }

                  if (length) {
                    _this170.selectAllEventData.push(val);

                    _this170.selectAllEventEle.push(element);
                  }

                  if (length === 1) {
                    if (!_this170.changeOnBlur) {
                      _this170.updateValueState(eve, _this170.value, _this170.tempValues);
                    }

                    var args = {
                      event: eve,
                      items: _this170.selectAllEventEle,
                      itemData: _this170.selectAllEventData,
                      isInteracted: eve ? true : false,
                      isChecked: false
                    };

                    _this170.trigger('selectedAll', args);

                    _this170.selectAllEventData = [];
                    _this170.selectAllEventEle = [];
                  }

                  if (isClearAll && (length === 1 || length === null)) {
                    _this170.clearAllCallback(eve, isClearAll);
                  }

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && _this170.isServerRendered && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this170.value) || _this170.value.length === 0)) {
                    _this170.updatedataValueItems(eve);
                  }
                }
              });
            }
          }
        }, {
          key: "updateMainList",
          value: function updateMainList(state, value) {
            if (this.allowFiltering || this.mode === 'CheckBox') {
              var element2 = this.findListElement(this.mainList, 'li', 'data-value', value);

              if (element2) {
                if (state) {
                  element2.setAttribute('aria-selected', 'false');
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);

                  if (this.mode === 'CheckBox') {
                    element2.firstElementChild.setAttribute('aria-checked', 'false');
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([element2.firstElementChild.lastElementChild], 'e-check');
                  }
                } else {
                  element2.setAttribute('aria-selected', 'true');
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);

                  if (this.mode === 'CheckBox') {
                    element2.firstElementChild.setAttribute('aria-checked', 'true');
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element2.firstElementChild.lastElementChild], 'e-check');
                  }
                }
              }
            }
          }
        }, {
          key: "removeChip",
          value: function removeChip(value) {
            if (this.chipCollectionWrapper) {
              var element = this.findListElement(this.chipCollectionWrapper, 'span', 'data-value', value);

              if (element) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(element);
              }
            }
          }
        }, {
          key: "setWidth",
          value: function setWidth(width) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(width)) {
              if (typeof width === 'number') {
                this.overAllWrapper.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
              } else if (typeof width === 'string') {
                this.overAllWrapper.style.width = width.match(/px|%|em/) ? width : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
              }
            }
          }
        }, {
          key: "updateChipStatus",
          value: function updateChipStatus() {
            if (this.value && this.value.length) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.chipCollectionWrapper)) {
                this.chipCollectionWrapper.style.display = '';
              }

              if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {
                this.showDelimWrapper();
              }

              this.showOverAllClear();
            } else {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.chipCollectionWrapper)) {
                this.chipCollectionWrapper.style.display = 'none';
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.delimiterWrapper)) {
                this.delimiterWrapper.style.display = 'none';
              }

              this.hideOverAllClear();
            }
          }
        }, {
          key: "addValue",
          value: function addValue(value, text, eve) {
            if (!this.value) {
              this.value = [];
            }

            if (this.value.indexOf(value) < 0) {
              this.setProperties({
                value: [].concat([], this.value, [value])
              }, true);
            }

            var element = this.findListElement(this.list, 'li', 'data-value', value);
            this.removeFocus();

            if (element) {
              this.addListFocus(element);
              this.addListSelection(element);
            }

            if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {
              this.addChip(text, value, eve);
            }

            if (this.hideSelectedItem && this.fields.groupBy) {
              this.hideGroupItem(value);
            }

            this.updateChipStatus();
            this.checkMaxSelection();
          }
        }, {
          key: "checkMaxSelection",
          value: function checkMaxSelection() {
            var limit = this.value && this.value.length ? this.value.length : 0;

            if (limit === this.maximumSelectionLength) {
              var collection = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.e-active)');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(collection, 'e-disable');
            }
          }
        }, {
          key: "dispatchSelect",
          value: function dispatchSelect(value, eve, element, isNotTrigger, length) {
            var _this171 = this;

            if (this.initStatus && !isNotTrigger) {
              var val = this.getDataByValue(value);
              var eventArgs = {
                e: eve,
                item: element,
                itemData: val,
                isInteracted: eve ? true : false,
                cancel: false
              };
              this.trigger('select', eventArgs, function (eventArgs) {
                if (!eventArgs.cancel) {
                  if (length) {
                    _this171.selectAllEventData.push(val);

                    _this171.selectAllEventEle.push(element);
                  }

                  if (length === 1) {
                    var args = {
                      event: eve,
                      items: _this171.selectAllEventEle,
                      itemData: _this171.selectAllEventData,
                      isInteracted: eve ? true : false,
                      isChecked: true
                    };

                    _this171.trigger('selectedAll', args);

                    _this171.selectAllEventData = [];
                  }

                  _this171.updateListSelectEventCallback(value, element, eve);
                }
              });
            }
          }
        }, {
          key: "addChip",
          value: function addChip(text, value, e) {
            if (this.chipCollectionWrapper) {
              this.getChip(text, value, e);
            }
          }
        }, {
          key: "removeChipFocus",
          value: function removeChipFocus() {
            var elements;
            var closeElements;
            elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP$1);
            closeElements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP_CLOSE$1.split(' ')[0]);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(elements, CHIP_SELECTED);

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              for (var index = 0; index < closeElements.length; index++) {
                closeElements[index].style.display = 'none';
              }
            }
          }
        }, {
          key: "onMobileChipInteraction",
          value: function onMobileChipInteraction(e) {
            var chipElem = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + CHIP$1);
            var chipClose = chipElem.querySelector('span.' + CHIP_CLOSE$1.split(' ')[0]);

            if (this.enabled && !this.readonly) {
              if (!chipElem.classList.contains(CHIP_SELECTED)) {
                this.removeChipFocus();
                chipClose.style.display = '';
                chipElem.classList.add(CHIP_SELECTED);
              }

              this.refreshPopup();
              e.preventDefault();
            }
          }
        }, {
          key: "multiCompiler",
          value: function multiCompiler(multiselectTemplate) {
            var checkTemplate = false;

            if (multiselectTemplate) {
              try {
                checkTemplate = document.querySelectorAll(multiselectTemplate).length ? true : false;
              } catch (exception) {
                checkTemplate = false;
              }
            }

            return checkTemplate;
          }
        }, {
          key: "getChip",
          value: function getChip(data, value, e) {
            var _this172 = this;

            var itemData = {
              text: value,
              value: value
            };
            var chip = this.createElement('span', {
              className: CHIP$1,
              attrs: {
                'data-value': value,
                'title': data
              }
            });
            var compiledString;
            var chipContent = this.createElement('span', {
              className: CHIP_CONTENT$1
            });
            var chipClose = this.createElement('span', {
              className: CHIP_CLOSE$1
            });

            if (this.mainData) {
              itemData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered ? JSON.parse(JSON.stringify(this.getDataByValue(value))) : this.getDataByValue(value);
            }

            if (this.valueTemplate && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(itemData)) {
              var valuecheck = this.multiCompiler(this.valueTemplate);

              if (valuecheck) {
                compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(this.valueTemplate).innerHTML.trim());
              } else {
                compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.valueTemplate);
              }

              var _iterator79 = _createForOfIteratorHelper(compiledString(itemData, null, null, this.valueTemplateId, this.isStringTemplate)),
                  _step79;

              try {
                for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {
                  var item = _step79.value;
                  chipContent.appendChild(item);
                }
              } catch (err) {
                _iterator79.e(err);
              } finally {
                _iterator79.f();
              }

              this.DropDownBaseupdateBlazorTemplates(false, false, false, false, true, false, false, false);
            } else if (this.enableHtmlSanitizer) {
              chipContent.innerText = data;
            } else {
              chipContent.innerHTML = data;
            }

            chip.appendChild(chipContent);
            var eventArgs = {
              isInteracted: e ? true : false,
              itemData: itemData,
              e: e,
              setClass: function setClass(classes) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([chip], classes);
              },
              cancel: false
            };
            this.trigger('tagging', eventArgs, function (eventArgs) {
              if (!eventArgs.cancel) {
                if (eventArgs.setClass && typeof eventArgs.setClass === 'string' && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && _this172.isServerRendered) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([chip], eventArgs.setClass);
                }

                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                  chip.classList.add(MOBILE_CHIP);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([chipClose], chip);
                  chipClose.style.display = 'none';

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(chip, 'click', _this172.onMobileChipInteraction, _this172);
                } else {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(chip, 'mousedown', _this172.chipClick, _this172);

                  if (_this172.showClearButton) {
                    chip.appendChild(chipClose);
                  }
                }

                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(chipClose, 'mousedown', _this172.onChipRemove, _this172);

                _this172.chipCollectionWrapper.appendChild(chip);

                if (!_this172.changeOnBlur && e) {
                  _this172.updateValueState(e, _this172.value, _this172.tempValues);
                }
              }
            });
          }
        }, {
          key: "calcPopupWidth",
          value: function calcPopupWidth() {
            var width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.popupWidth);

            if (width.indexOf('%') > -1) {
              var inputWidth = this.componentWrapper.offsetWidth * parseFloat(width) / 100;
              width = inputWidth.toString() + 'px';
            }

            return width;
          }
        }, {
          key: "mouseIn",
          value: function mouseIn() {
            if (this.enabled && !this.readonly) {
              this.showOverAllClear();
            }
          }
        }, {
          key: "mouseOut",
          value: function mouseOut() {
            if (!this.inputFocus) {
              this.overAllClear.style.display = 'none';
            }
          }
        }, {
          key: "listOption",
          value: function listOption(dataSource, fields) {
            var iconCss = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fields.iconCss) ? false : true;
            var fieldProperty = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fields.properties) ? fields : fields.properties;
            this.listCurrentOptions = fields.text !== null || fields.value !== null ? {
              fields: fieldProperty,
              showIcon: iconCss,
              ariaAttributes: {
                groupItemRole: 'presentation'
              }
            } : {
              fields: {
                value: 'text'
              }
            };
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(this.listCurrentOptions, this.listCurrentOptions, fields, true);

            if (this.mode === 'CheckBox') {
              this.notify('listoption', {
                module: 'CheckBoxSelection',
                enable: this.mode === 'CheckBox',
                dataSource: dataSource,
                fieldProperty: fieldProperty
              });
            }

            return this.listCurrentOptions;
          }
        }, {
          key: "renderPopup",
          value: function renderPopup() {
            var _this173 = this;

            if (!this.list) {
              _get2(_getPrototypeOf2(MultiSelect.prototype), "render", this).call(this);
            }

            if (!this.popupObj) {
              var args = {
                cancel: false
              };
              this.trigger('beforeOpen', args, function (args) {
                if (!args.cancel) {
                  document.body.appendChild(_this173.popupWrapper);

                  var checkboxFilter = _this173.popupWrapper.querySelector('.' + FILTERPARENT);

                  if (_this173.mode === 'CheckBox' && !_this173.allowFiltering && checkboxFilter && _this173.filterParent) {
                    checkboxFilter.remove();
                    _this173.filterParent = null;
                  }

                  var overAllHeight = parseInt(_this173.popupHeight, 10);
                  _this173.popupWrapper.style.visibility = 'hidden';

                  if (_this173.headerTemplate) {
                    _this173.setHeaderTemplate();

                    overAllHeight -= _this173.header.offsetHeight;
                  }

                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([_this173.list], _this173.popupWrapper);

                  if (_this173.footerTemplate) {
                    _this173.setFooterTemplate();

                    overAllHeight -= _this173.footer.offsetHeight;
                  }

                  if (_this173.mode === 'CheckBox' && _this173.showSelectAll) {
                    _this173.notify('selectAll', {
                      module: 'CheckBoxSelection',
                      enable: _this173.mode === 'CheckBox'
                    });

                    overAllHeight -= _this173.selectAllHeight;
                  } else if (_this173.mode === 'CheckBox' && !_this173.showSelectAll && (!_this173.headerTemplate || !_this173.footerTemplate)) {
                    _this173.notify('selectAll', {
                      module: 'CheckBoxSelection',
                      enable: _this173.mode === 'CheckBox'
                    });

                    overAllHeight = parseInt(_this173.popupHeight, 10);
                  } else if (_this173.mode === 'CheckBox' && !_this173.showSelectAll) {
                    _this173.notify('selectAll', {
                      module: 'CheckBoxSelection',
                      enable: _this173.mode === 'CheckBox'
                    });

                    overAllHeight = parseInt(_this173.popupHeight, 10);

                    if (_this173.headerTemplate && _this173.header) {
                      overAllHeight -= _this173.header.offsetHeight;
                    }

                    if (_this173.footerTemplate && _this173.footer) {
                      overAllHeight -= _this173.footer.offsetHeight;
                    }
                  }

                  if (_this173.mode === 'CheckBox') {
                    var _args = {
                      module: 'CheckBoxSelection',
                      enable: _this173.mode === 'CheckBox',
                      popupElement: _this173.popupWrapper
                    };

                    if (_this173.allowFiltering) {
                      _this173.notify('searchBox', _args);

                      overAllHeight -= _this173.searchBoxHeight;
                    }

                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this173.popupWrapper], 'e-checkbox');
                  }

                  if (_this173.popupHeight !== 'auto') {
                    _this173.list.style.maxHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(overAllHeight);
                    _this173.popupWrapper.style.maxHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(_this173.popupHeight);
                  } else {
                    _this173.list.style.maxHeight = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(_this173.popupHeight);
                  }

                  _this173.popupObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["Popup"](_this173.popupWrapper, {
                    width: _this173.calcPopupWidth(),
                    targetType: 'relative',
                    position: {
                      X: 'left',
                      Y: 'bottom'
                    },
                    relateTo: _this173.overAllWrapper,
                    collision: {
                      X: 'flip',
                      Y: 'flip'
                    },
                    offsetY: 1,
                    enableRtl: _this173.enableRtl,
                    zIndex: _this173.zIndex,
                    close: function close() {
                      if (_this173.popupObj.element.parentElement) {
                        _this173.popupObj.unwireScrollEvents();

                        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(_this173.popupObj.element);
                      }
                    },
                    open: function open() {
                      _this173.popupObj.resolveCollision();

                      if (!_this173.isFirstClick) {
                        var ulElement = _this173.list.querySelector('ul');

                        if (ulElement) {
                          if (_this173.itemTemplate && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && _this173.isServerRendered) {
                            setTimeout(function () {
                              _this173.mainList = _this173.ulElement;
                            }, 0);
                          } else if (!(_this173.mode !== 'CheckBox' && (_this173.allowFiltering || _this173.allowCustomValue) && _this173.targetElement().trim() !== '')) {
                            _this173.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
                          }
                        }

                        _this173.isFirstClick = true;
                      }

                      _this173.popupObj.wireScrollEvents();

                      if (!(_this173.mode !== 'CheckBox' && (_this173.allowFiltering || _this173.allowCustomValue) && _this173.targetElement().trim() !== '')) {
                        _this173.loadTemplate();
                      }

                      _this173.setScrollPosition();

                      if (_this173.allowFiltering) {
                        _this173.notify('inputFocus', {
                          module: 'CheckBoxSelection',
                          enable: _this173.mode === 'CheckBox',
                          value: 'focus'
                        });
                      }
                    },
                    targetExitViewport: function targetExitViewport() {
                      if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                        _this173.hidePopup();
                      }
                    }
                  });

                  if (_this173.mode === 'CheckBox' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _this173.allowFiltering) {
                    _this173.notify('deviceSearchBox', {
                      module: 'CheckBoxSelection',
                      enable: _this173.mode === 'CheckBox'
                    });
                  }

                  _this173.popupObj.close();

                  _this173.popupWrapper.style.visibility = '';
                }
              });
            }
          }
        }, {
          key: "setHeaderTemplate",
          value: function setHeaderTemplate() {
            var compiledString;

            if (this.header) {
              this.header.remove();
            }

            this.header = this.createElement('div');
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.header], HEADER$1);
            var headercheck = this.multiCompiler(this.headerTemplate);

            if (headercheck) {
              compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(this.headerTemplate).innerHTML.trim());
            } else {
              compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.headerTemplate);
            }

            var elements = compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate);

            for (var temp = 0; temp < elements.length; temp++) {
              this.header.appendChild(elements[temp]);
            }

            this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, true, false);

            if (this.mode === 'CheckBox' && this.showSelectAll) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.header], this.popupWrapper);
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([this.header], this.popupWrapper);
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.header, 'mousedown', this.onListMouseDown, this);
          }
        }, {
          key: "setFooterTemplate",
          value: function setFooterTemplate() {
            var compiledString;

            if (this.footer) {
              this.footer.remove();
            }

            this.footer = this.createElement('div');
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.footer], FOOTER$1);
            var footercheck = this.multiCompiler(this.footerTemplate);

            if (footercheck) {
              compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(this.footerTemplate).innerHTML.trim());
            } else {
              compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(this.footerTemplate);
            }

            var elements = compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate);

            for (var temp = 0; temp < elements.length; temp++) {
              this.footer.appendChild(elements[temp]);
            }

            this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, false, true);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([this.footer], this.popupWrapper);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.footer, 'mousedown', this.onListMouseDown, this);
          }
        }, {
          key: "ClearAll",
          value: function ClearAll(e) {
            if (this.enabled && !this.readonly) {
              var temp;

              if (this.value && this.value.length > 0) {
                var liElement = this.list && this.list.querySelectorAll('li.e-list-item');

                if (liElement && liElement.length > 0) {
                  this.selectAllItems(false, e);
                } else {
                  this.removeIndex = 0;

                  for (temp = this.value[this.removeIndex]; this.removeIndex < this.value.length; temp = this.value[this.removeIndex]) {
                    this.removeValue(temp, e, null, true);

                    if (this.value === null && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                      break;
                    }
                  }
                }
              } else {
                this.clearAllCallback(e);
              }
            }
          }
        }, {
          key: "clearAllCallback",
          value: function clearAllCallback(e, isClearAll) {
            var tempValues = this.value ? this.value.slice() : [];

            if (this.mainList && this.listData && (this.allowFiltering && this.mode !== 'CheckBox' || this.allowCustomValue)) {
              var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
              this.onActionComplete(list, this.mainData);
            }

            this.focusAtFirstListItem();
            this.updateDelimeter(this.delimiterChar, e);

            if (this.mode !== 'Box' && (!this.inputFocus || this.mode === 'CheckBox')) {
              this.updateDelimView();
            }

            this.makeTextBoxEmpty();
            this.checkPlaceholderSize();

            if (this.isPopupOpen()) {
              this.refreshPopup();
            }

            if (!this.inputFocus) {
              if (this.changeOnBlur) {
                this.updateValueState(e, this.value, tempValues);
              }

              if (this.mode !== 'CheckBox') {
                this.inputElement.focus();
              }
            }

            if (this.mode === 'CheckBox') {
              this.refreshPlaceHolder();
              this.refreshInputHight();

              if (this.changeOnBlur && isClearAll && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) || this.value.length === 0)) {
                this.updateValueState(e, this.value, this.tempValues);
              }
            }

            if (!this.changeOnBlur && isClearAll && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) || this.value.length === 0)) {
              this.updateValueState(e, this.value, this.tempValues);
            }

            if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.groupBy)) {
              this.updateListItems(this.list.querySelectorAll('li.e-list-item'), this.mainList.querySelectorAll('li.e-list-item'));
            }

            e.preventDefault();
          }
        }, {
          key: "windowResize",
          value: function windowResize() {
            this.refreshPopup();

            if ((!this.inputFocus || this.mode === 'CheckBox') && this.viewWrapper && this.viewWrapper.parentElement) {
              this.updateDelimView();
            }
          }
        }, {
          key: "resetValueHandler",
          value: function resetValueHandler(e) {
            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.inputElement, 'form');

            if (formElement && e.target === formElement) {
              var textVal = this.element.tagName === this.getNgDirective() ? null : this.element.getAttribute('data-initial-value');
              this.text = textVal;
            }
          }
        }, {
          key: "wireEvent",
          value: function wireEvent() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.componentWrapper, 'mousedown', this.wrapperClick, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(window, 'resize', this.windowResize, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'focus', this.focusInHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'keydown', this.onKeyDown, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'keyup', this.KeyUp, this);

            if (this.mode !== 'CheckBox') {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'input', this.onInput, this);
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'blur', this.onBlur, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.componentWrapper, 'mousemove', this.mouseIn, this);

            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.inputElement, 'form');

            if (formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(formElement, 'reset', this.resetValueHandler, this);
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.componentWrapper, 'mouseout', this.mouseOut, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.overAllClear, 'mouseup', this.ClearAll, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputElement, 'paste', this.pasteHandler, this);
          }
        }, {
          key: "onInput",
          value: function onInput(e) {
            if (this.keyDownStatus) {
              this.isValidKey = true;
            } else {
              this.isValidKey = false;
            }

            this.keyDownStatus = false; // For Filtering works in mobile firefox

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'mozilla') {
              this.search(e);
            }
          }
        }, {
          key: "pasteHandler",
          value: function pasteHandler(event) {
            var _this174 = this;

            setTimeout(function () {
              _this174.search(event);
            });
          }
        }, {
          key: "search",
          value: function search(e) {
            var _this175 = this;

            if (!this.isPopupOpen() && this.openOnClick) {
              this.showPopup();
            }

            this.openClick(e);

            if (this.checkTextLength() && !this.allowFiltering && e.keyCode !== 8) {
              this.focusAtFirstListItem();
            } else {
              var text = this.targetElement();
              this.keyCode = e.keyCode;

              if (this.allowFiltering) {
                var eventArgs = {
                  preventDefaultAction: false,
                  text: this.targetElement(),
                  updateData: function updateData(dataSource, query, fields) {
                    if (eventArgs.cancel) {
                      return;
                    }

                    _this175.isFiltered = true;
                    _this175.remoteFilterAction = true;

                    _this175.dataUpdater(dataSource, query, fields);
                  },
                  event: e,
                  cancel: false
                };
                this.trigger('filtering', eventArgs, function (eventArgs) {
                  if (!eventArgs.cancel) {
                    if (!_this175.isFiltered && !eventArgs.preventDefaultAction) {
                      _this175.filterAction = true;

                      _this175.dataUpdater(_this175.dataSource, null, _this175.fields);
                    }
                  }
                });
              } else if (this.allowCustomValue) {
                var query = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();
                query = text !== '' ? query.where(this.fields.text, 'startswith', text, this.ignoreCase, this.ignoreAccent) : query;
                this.dataUpdater(this.mainData, query, this.fields);
              } else {
                var liCollections;
                liCollections = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.e-hide-listitem)');
                var activeElement = Search(this.targetElement(), liCollections, 'StartsWith', this.ignoreCase);

                if (activeElement && activeElement.item !== null) {
                  this.addListFocus(activeElement.item);
                  this.list.scrollTop = activeElement.item.offsetHeight * activeElement.index;
                } else if (this.targetElement() !== '') {
                  this.removeFocus();
                } else {
                  this.focusAtFirstListItem();
                }
              }
            }
          }
        }, {
          key: "preRender",
          value: function preRender() {
            if (this.allowFiltering === null) {
              this.allowFiltering = this.mode === 'CheckBox' ? true : false;
            }

            this.initializeData();
            this.updateDataAttribute(this.htmlAttributes);

            _get2(_getPrototypeOf2(MultiSelect.prototype), "preRender", this).call(this);
          }
        }, {
          key: "getLocaleName",
          value: function getLocaleName() {
            return 'multi-select';
          }
        }, {
          key: "initializeData",
          value: function initializeData() {
            this.mainListCollection = [];
            this.beforePopupOpen = false;
            this.filterAction = false;
            this.remoteFilterAction = false;
            this.isFirstClick = false;
            this.mobFilter = true;
            this.isFiltered = false;
            this.focused = true;
            this.initial = true;
            this.backCommand = true;
          }
        }, {
          key: "updateData",
          value: function updateData(delimiterChar, e) {
            var data = '';
            var delim = this.mode === 'Delimiter' || this.mode === 'CheckBox';
            var text = [];
            var temp;
            var tempData = this.listData;
            this.listData = this.mainData;
            this.hiddenElement.innerHTML = '';

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
              for (var index = 0; !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value[index]); index++) {
                if (this.listData) {
                  temp = this.getTextByValue(this.value[index]);
                } else {
                  temp = this.value[index];
                }

                data += temp + delimiterChar + ' ';
                text.push(temp);
                this.hiddenElement.innerHTML += '<option selected value ="' + this.value[index] + '">' + index + '</option>';
              }
            }

            this.setProperties({
              text: text.toString()
            }, true);

            if (delim) {
              this.updateWrapperText(this.delimiterWrapper, data);
              this.delimiterWrapper.setAttribute('id', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('delim_val'));
              this.inputElement.setAttribute('aria-describedby', this.delimiterWrapper.id);
            }

            var targetEle = e && e.target;
            var isClearAll = targetEle && targetEle.classList.contains('e-close-hooker') ? true : null;

            if (!this.changeOnBlur && e && !isClearAll || this.isSelectAll) {
              this.isSelectAll = false;
              this.updateValueState(e, this.value, this.tempValues);
            }

            this.listData = tempData;
            this.addValidInputClass();
          }
        }, {
          key: "initialTextUpdate",
          value: function initialTextUpdate() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.text)) {
              var textArr = this.text.split(this.delimiterChar);
              var textVal = [];

              for (var index = 0; textArr.length > index; index++) {
                var val = this.getValueByText(textArr[index]);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(val)) {
                  textVal.push(val);
                } else if (this.allowCustomValue) {
                  textVal.push(textArr[index]);
                }
              }

              if (textVal && textVal.length) {
                this.setProperties({
                  value: textVal
                }, true);
              }
            } else {
              this.setProperties({
                value: null
              }, true);
            }
          }
        }, {
          key: "renderList",
          value: function renderList(isEmptyData) {
            if (!isEmptyData && this.allowCustomValue && this.list && (this.list.textContent === this.noRecordsTemplate || this.list.querySelector('.e-ul') && this.list.querySelector('.e-ul').childElementCount === 0)) {
              isEmptyData = true;
            }

            _get2(_getPrototypeOf2(MultiSelect.prototype), "render", this).call(this, isEmptyData);

            this.unwireListEvents();
            this.wireListEvents();
          }
        }, {
          key: "initialValueUpdate",
          value: function initialValueUpdate() {
            if (this.list) {
              var text;
              var element;
              var value;

              if (this.chipCollectionWrapper) {
                this.chipCollectionWrapper.innerHTML = '';
              }

              this.removeListSelection();

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
                for (var index = 0; !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value[index]); index++) {
                  value = this.value[index];
                  element = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, 'li', 'data-value', value);
                  text = this.getTextByValue(value);

                  if (element && element.getAttribute('aria-selected') !== 'true' || element && element.getAttribute('aria-selected') === 'true' && this.hideSelectedItem && (this.mode === 'Box' || this.mode === 'Default')) {
                    this.addChip(text, value);
                    this.addListSelection(element);
                  } else if (value && this.allowCustomValue) {
                    var indexItem = this.listData.length;
                    var newValue = {};
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(this.fields.text, value, newValue);
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(this.fields.value, value, newValue);
                    var noDataEle = this.popupWrapper.querySelector('.' + dropDownBaseClasses.noData);
                    this.addItem(newValue, indexItem);

                    if (this.popupWrapper.contains(noDataEle)) {
                      this.list.setAttribute('style', noDataEle.getAttribute('style'));
                      this.popupWrapper.replaceChild(this.list, noDataEle);
                      this.wireListEvents();
                    }

                    this.addChip(text, value);
                    this.addListSelection(element);
                  }
                }
              }

              if (this.mode === 'CheckBox') {
                this.updateDelimView();

                if (this.changeOnBlur) {
                  this.updateValueState(null, this.value, this.tempValues);
                }

                this.updateDelimeter(this.delimiterChar);
                this.refreshInputHight();
              } else {
                this.updateDelimeter(this.delimiterChar);
              }

              if (this.mode === 'CheckBox' && this.showSelectAll && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) || !this.value.length)) {
                this.notify('checkSelectAll', {
                  module: 'CheckBoxSelection',
                  enable: this.mode === 'CheckBox',
                  value: 'uncheck'
                });
              }

              if (this.mode === 'Box') {
                this.chipCollectionWrapper.style.display = '';
              } else if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {
                this.showDelimWrapper();
              }
            }
          }
        }, {
          key: "updateActionCompleteData",
          value: function updateActionCompleteData(li, item) {
            if (this.value && this.value.indexOf(li.getAttribute('data-value')) > -1) {
              this.mainList = this.ulElement;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([li], HIDE_LIST);
            }
          }
        }, {
          key: "updateAddItemList",
          value: function updateAddItemList(list, itemCount) {
            if (this.popupObj && this.popupObj.element && this.popupObj.element.querySelector('.' + dropDownBaseClasses.noData) && list) {
              this.list = list;
              this.mainList = this.ulElement = list.querySelector('ul');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.popupWrapper.querySelector('.e-content'));
              this.popupObj = null;
              this.renderPopup();
            }
          }
        }, {
          key: "updateDataList",
          value: function updateDataList() {
            if (this.mainList && this.ulElement && this.mainList.childElementCount < this.ulElement.childElementCount) {
              this.mainList = this.ulElement.cloneNode ? this.ulElement.cloneNode(true) : this.ulElement;
            }
          }
        }, {
          key: "isValidLI",
          value: function isValidLI(li) {
            return li && !li.classList.contains(dropDownBaseClasses.disabled) && !li.classList.contains(dropDownBaseClasses.group) && li.classList.contains(dropDownBaseClasses.li);
          }
        }, {
          key: "updateListSelection",
          value: function updateListSelection(li, e, length) {
            var customVal = li.getAttribute('data-value');
            var value = this.getFormattedValue(customVal);

            if (this.allowCustomValue && (customVal !== 'false' && value === false || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(value) && value.toString() === 'NaN')) {
              value = customVal;
            }

            var text = this.getTextByValue(value);
            this.removeHover();

            if (!this.value || this.value.indexOf(value) === -1) {
              this.dispatchSelect(value, e, li, li.getAttribute('aria-selected') === 'true', length);
            } else {
              this.removeValue(value, e, length);
            }
          }
        }, {
          key: "updateListSelectEventCallback",
          value: function updateListSelectEventCallback(value, li, e) {
            var _this176 = this;

            var text = this.getTextByValue(value);

            if ((this.allowCustomValue || this.allowFiltering) && !this.findListElement(this.mainList, 'li', 'data-value', value)) {
              var temp = li.cloneNode(true);
              var data = this.getDataByValue(value);
              var eventArgs = {
                newData: data,
                cancel: false
              };
              this.trigger('customValueSelection', eventArgs, function (eventArgs) {
                if (!eventArgs.cancel) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([temp], _this176.mainList);

                  _this176.mainData.push(data);

                  _this176.remoteCustomValue = false;

                  _this176.addValue(value, text, e);
                }
              });
            } else {
              this.remoteCustomValue = false;
              this.addValue(value, text, e);
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && this.value && this.list && this.value.length === this.list.querySelectorAll('li.e-list-item').length || this.value.length === this.maximumSelectionLength) {
              this.updatedataValueItems(e);
              this.checkPlaceholderSize();
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              this.checkPlaceholderSize();
              this.makeTextBoxEmpty();
            }
          }
        }, {
          key: "removeListSelection",
          value: function removeListSelection() {
            var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
            var selectedItems = this.list.querySelectorAll('.' + className);
            var temp = selectedItems.length;

            if (selectedItems && selectedItems.length) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(selectedItems, className);

              while (temp > 0) {
                selectedItems[temp - 1].setAttribute('aria-selected', 'false');
                temp--;
              }
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.mainList)) {
              var selectItems = this.mainList.querySelectorAll('.' + className);
              var temp1 = selectItems.length;

              if (selectItems && selectItems.length) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(selectItems, className);

                while (temp1 > 0) {
                  selectItems[temp1 - 1].setAttribute('aria-selected', 'false');

                  if (this.mode === 'CheckBox') {
                    if (selectedItems && selectedItems.length > temp1 - 1) {
                      selectedItems[temp1 - 1].firstElementChild.setAttribute('aria-checked', 'false');
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([selectedItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');
                    }

                    selectItems[temp1 - 1].firstElementChild.setAttribute('aria-checked', 'false');
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([selectItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');
                  }

                  temp1--;
                }
              }
            }
          }
        }, {
          key: "removeHover",
          value: function removeHover() {
            var hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.hover);

            if (hoveredItem && hoveredItem.length) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(hoveredItem, dropDownBaseClasses.hover);
            }
          }
        }, {
          key: "removeFocus",
          value: function removeFocus() {
            if (this.list && this.mainList) {
              var hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.focus);
              var mainlist = this.mainList.querySelectorAll('.' + dropDownBaseClasses.focus);

              if (hoveredItem && hoveredItem.length) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(hoveredItem, dropDownBaseClasses.focus);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(mainlist, dropDownBaseClasses.focus);
              }
            }
          }
        }, {
          key: "addListHover",
          value: function addListHover(li) {
            if (this.enabled && this.isValidLI(li)) {
              this.removeHover();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([li], dropDownBaseClasses.hover);
            } else {
              if (li !== null && li.classList.contains('e-list-group-item') && this.enableGroupCheckBox && this.mode === 'CheckBox' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.groupBy)) {
                this.removeHover();
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([li], dropDownBaseClasses.hover);
              }
            }
          }
        }, {
          key: "addListFocus",
          value: function addListFocus(element) {
            if (this.enabled && this.isValidLI(element)) {
              this.removeFocus();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], dropDownBaseClasses.focus);
            } else {
              if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.groupBy)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], dropDownBaseClasses.focus);
              }
            }
          }
        }, {
          key: "addListSelection",
          value: function addListSelection(element) {
            var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;

            if (this.isValidLI(element) && !element.classList.contains(dropDownBaseClasses.hover)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([element], className);
              this.updateMainList(false, element.getAttribute('data-value'));
              element.setAttribute('aria-selected', 'true');

              if (this.mode === 'CheckBox') {
                var ariaCheck = element.firstElementChild.getAttribute('aria-checked');

                if (ariaCheck === 'false' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ariaCheck)) {
                  this.notify('updatelist', {
                    module: 'CheckBoxSelection',
                    enable: this.mode === 'CheckBox',
                    li: element,
                    e: this
                  });
                }
              }

              this.notify('activeList', {
                module: 'CheckBoxSelection',
                enable: this.mode === 'CheckBox',
                li: element,
                e: this
              });

              if (this.chipCollectionWrapper !== null) {
                this.removeChipSelection();
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.inputElement, {
                'aria-activedescendant': element.id
              });
            }
          }
        }, {
          key: "updateDelimeter",
          value: function updateDelimeter(delimChar, e) {
            this.updateData(delimChar, e);
          }
        }, {
          key: "onMouseClick",
          value: function onMouseClick(e) {
            this.scrollFocusStatus = false;
            var target = e.target;
            var li = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + dropDownBaseClasses.li);
            var headerLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + dropDownBaseClasses.group);

            if (headerLi && this.enableGroupCheckBox && this.mode === 'CheckBox' && this.fields.groupBy) {
              target = target.classList.contains('e-list-group-item') ? target.firstElementChild.lastElementChild : e.target;

              if (target.classList.contains('e-check')) {
                this.selectAllItem(false, e);
                target.classList.remove('e-check');
                target.classList.remove('e-stop');
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + 'e-list-group-item').classList.remove('e-active');
                target.setAttribute('aria-selected', 'false');
              } else {
                this.selectAllItem(true, e);
                target.classList.remove('e-stop');
                target.classList.add('e-check');
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + 'e-list-group-item').classList.add('e-active');
                target.setAttribute('aria-selected', 'true');
              }

              this.refreshSelection();
              this.checkSelectAll();
            } else {
              if (this.isValidLI(li)) {
                var limit = this.value && this.value.length ? this.value.length : 0;

                if (li.classList.contains('e-active')) {
                  limit = limit - 1;
                }

                if (limit < this.maximumSelectionLength) {
                  this.updateListSelection(li, e);
                  this.checkPlaceholderSize();
                  this.addListFocus(li);

                  if ((this.allowCustomValue || this.allowFiltering) && this.mainList && this.listData) {
                    if (this.mode !== 'CheckBox') {
                      this.focusAtLastListItem(li.getAttribute('data-value'));
                    }

                    this.refreshSelection();
                  } else {
                    this.makeTextBoxEmpty();
                  }
                }

                if (this.mode === 'CheckBox') {
                  this.updateDelimView();
                  this.updateDelimeter(this.delimiterChar, e);
                  this.refreshInputHight();
                } else {
                  this.updateDelimeter(this.delimiterChar, e);
                }

                this.checkSelectAll();
                this.refreshPopup();

                if (this.hideSelectedItem) {
                  this.focusAtFirstListItem();
                }

                if (this.closePopupOnSelect) {
                  this.hidePopup();
                } else {
                  e.preventDefault();
                }

                this.makeTextBoxEmpty();
                this.findGroupStart(target);
              } else {
                e.preventDefault();
              }

              if (this.mode !== 'CheckBox') {
                this.refreshListItems(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li) ? null : li.textContent);
              }

              this.refreshPlaceHolder();
              this.deselectHeader();
            }
          }
        }, {
          key: "findGroupStart",
          value: function findGroupStart(target) {
            if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.groupBy)) {
              var count = 0;
              var liChecked = 0;
              var liUnchecked = 0;
              var groupValues;

              if (this.itemTemplate && !target.getElementsByClassName('e-frame').length) {
                while (!target.getElementsByClassName('e-frame').length) {
                  target = target.parentElement;
                }
              }

              if (target.classList.contains('e-frame')) {
                target = target.parentElement.parentElement;
              }

              groupValues = this.findGroupAttrtibutes(target, liChecked, liUnchecked, count, 0);
              groupValues = this.findGroupAttrtibutes(target, groupValues[0], groupValues[1], groupValues[2], 1);

              while (!target.classList.contains('e-list-group-item')) {
                if (target.classList.contains('e-list-icon')) {
                  target = target.parentElement;
                }

                target = target.previousElementSibling;

                if (target == null) {
                  break;
                }
              }

              this.updateCheckBox(target, groupValues[0], groupValues[1], groupValues[2]);
            }
          }
        }, {
          key: "findGroupAttrtibutes",
          value: function findGroupAttrtibutes(listElement, checked, unChecked, count, position) {
            while (!listElement.classList.contains('e-list-group-item')) {
              if (listElement.classList.contains('e-list-icon')) {
                listElement = listElement.parentElement;
              }

              if (listElement.getElementsByClassName('e-frame')[0].classList.contains('e-check') && listElement.classList.contains('e-list-item')) {
                checked++;
              } else if (listElement.classList.contains('e-list-item')) {
                unChecked++;
              }

              count++;
              listElement = position ? listElement.nextElementSibling : listElement.previousElementSibling;

              if (listElement == null) {
                break;
              }
            }

            return [checked, unChecked, count];
          }
        }, {
          key: "updateCheckBox",
          value: function updateCheckBox(groupHeader, checked, unChecked, count) {
            if (groupHeader === null) {
              return;
            }

            var checkBoxElement = groupHeader.getElementsByClassName('e-frame')[0];

            if (count === checked) {
              checkBoxElement.classList.remove('e-stop');
              checkBoxElement.classList.add('e-check');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');
              groupHeader.setAttribute('aria-selected', 'true');
            } else if (count === unChecked) {
              checkBoxElement.classList.remove('e-check');
              checkBoxElement.classList.remove('e-stop');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(checkBoxElement, '.' + 'e-list-group-item').classList.remove('e-active');
              groupHeader.setAttribute('aria-selected', 'false');
            } else if (this.maximumSelectionLength === checked - 1) {
              checkBoxElement.classList.remove('e-stop');
              groupHeader.setAttribute('aria-selected', 'true');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');
              checkBoxElement.classList.add('e-check');
            } else {
              checkBoxElement.classList.remove('e-check');
              checkBoxElement.classList.add('e-stop');
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');
              groupHeader.setAttribute('aria-selected', 'false');
            }
          }
        }, {
          key: "deselectHeader",
          value: function deselectHeader() {
            var limit = this.value && this.value.length ? this.value.length : 0;
            var collection = this.list.querySelectorAll('li.e-list-group-item:not(.e-active)');

            if (limit < this.maximumSelectionLength) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(collection, 'e-disable');
            }

            if (limit === this.maximumSelectionLength) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(collection, 'e-disable');
            }
          }
        }, {
          key: "onMouseOver",
          value: function onMouseOver(e) {
            var currentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + dropDownBaseClasses.li);

            if (currentLi === null && this.mode === 'CheckBox' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.groupBy) && this.enableGroupCheckBox) {
              currentLi = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + dropDownBaseClasses.group);
            }

            this.addListHover(currentLi);
          }
        }, {
          key: "onMouseLeave",
          value: function onMouseLeave(e) {
            this.removeHover();
          }
        }, {
          key: "onListMouseDown",
          value: function onListMouseDown(e) {
            e.preventDefault();
            this.scrollFocusStatus = true;
          }
        }, {
          key: "onDocumentClick",
          value: function onDocumentClick(e) {
            if (this.mode !== 'CheckBox') {
              var target = e.target;

              if (!(!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popupObj) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '#' + this.popupObj.element.id)) && !this.overAllWrapper.contains(e.target)) {
                this.scrollFocusStatus = false;
              } else {
                this.scrollFocusStatus = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'edge') && document.activeElement === this.inputElement;
              }
            }
          }
        }, {
          key: "wireListEvents",
          value: function wireListEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousedown', this.onDocumentClick, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.list, 'mousedown', this.onListMouseDown, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.list, 'mouseup', this.onMouseClick, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.list, 'mouseover', this.onMouseOver, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.list, 'mouseout', this.onMouseLeave, this);
          }
        }, {
          key: "unwireListEvents",
          value: function unwireListEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousedown', this.onDocumentClick);

            if (this.list) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.list, 'mousedown', this.onListMouseDown);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.list, 'mouseup', this.onMouseClick);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.list, 'mouseover', this.onMouseOver);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.list, 'mouseout', this.onMouseLeave);
            }
          }
        }, {
          key: "hideOverAllClear",
          value: function hideOverAllClear() {
            if (!this.value || !this.value.length || this.inputElement.value === '') {
              this.overAllClear.style.display = 'none';
            }
          }
        }, {
          key: "showOverAllClear",
          value: function showOverAllClear() {
            if ((this.value && this.value.length || this.inputElement.value !== '') && this.showClearButton && this.readonly !== true) {
              this.overAllClear.style.display = '';
            } else {
              this.overAllClear.style.display = 'none';
            }
          }
          /**
           * Sets the focus to widget for interaction.
           * @returns void
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            if (document.activeElement !== this.inputElement && this.enabled) {
              this.inputElement.focus();
            }
          }
          /**
           * Remove the focus from widget, if the widget is in focus state.
           * @returns void
           */

        }, {
          key: "focusOut",
          value: function focusOut() {
            if (document.activeElement === this.inputElement && this.enabled) {
              this.inputElement.blur();
            }
          }
          /**
           * Shows the spinner loader.
           * @returns void.
           */

        }, {
          key: "showSpinner",
          value: function showSpinner() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.spinnerElement)) {
              if (this.overAllClear.style.display !== 'none') {
                this.spinnerElement = this.overAllClear;
              } else {
                this.spinnerElement = this.createElement('span', {
                  className: CLOSEICON_CLASS$1 + ' ' + SPINNER_CLASS$1
                });
                this.componentWrapper.appendChild(this.spinnerElement);
              }

              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["createSpinner"])({
                target: this.spinnerElement,
                width: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice ? '16px' : '14px'
              }, this.createElement);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.spinnerElement], DISABLE_ICON);
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["showSpinner"])(this.spinnerElement);
            }
          }
          /**
           * Hides the spinner loader.
           * @returns void.
           */

        }, {
          key: "hideSpinner",
          value: function hideSpinner() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.spinnerElement)) {
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["hideSpinner"])(this.spinnerElement);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.spinnerElement], DISABLE_ICON);

              if (this.spinnerElement.classList.contains(SPINNER_CLASS$1)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.spinnerElement);
              } else {
                this.spinnerElement.innerHTML = '';
              }

              this.spinnerElement = null;
            }
          }
        }, {
          key: "updateWrapperText",
          value: function updateWrapperText(wrapperType, wrapperData) {
            if (this.valueTemplate || !this.enableHtmlSanitizer) {
              wrapperType.innerHTML = wrapperData;
            } else {
              wrapperType.innerText = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(wrapperData);
            }
          }
        }, {
          key: "updateDelimView",
          value: function updateDelimView() {
            if (this.delimiterWrapper) {
              this.hideDelimWrapper();
            }

            if (this.chipCollectionWrapper) {
              this.chipCollectionWrapper.style.display = 'none';
            }

            this.viewWrapper.style.display = '';
            this.viewWrapper.style.width = '';
            this.viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER$1);

            if (this.value && this.value.length) {
              var data = '';
              var temp;
              var tempData;
              var tempIndex = 1;
              var wrapperleng;
              var remaining;
              var downIconWidth = 0;
              var overAllContainer;
              this.updateWrapperText(this.viewWrapper, data);
              var l10nLocale = {
                noRecordsTemplate: 'No records found',
                actionFailureTemplate: 'Request failed',
                overflowCountTemplate: '+${count} more..',
                totalCountTemplate: '${count} selected'
              };
              var l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"](this.getLocaleName(), {}, this.locale);

              if (l10n.getConstant('actionFailureTemplate') === '') {
                l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('dropdowns', l10nLocale, this.locale);
              }

              var remainContent = l10n.getConstant('overflowCountTemplate');
              var raminElement = this.createElement('span', {
                className: REMAIN_WRAPPER$1
              });
              var compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(remainContent);
              var totalCompiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(l10n.getConstant('totalCountTemplate'));
              raminElement.appendChild(compiledString({
                'count': this.value.length
              }, null, null, null, !this.isStringTemplate)[0]);
              this.viewWrapper.appendChild(raminElement);
              var remainSize = raminElement.offsetWidth;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(raminElement);

              if (this.showDropDownIcon) {
                downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
                for (var index = 0; !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value[index]); index++) {
                  data += index === 0 ? '' : this.delimiterChar + ' ';
                  temp = this.getOverflowVal(index);
                  data += temp;
                  temp = this.viewWrapper.innerHTML;
                  this.updateWrapperText(this.viewWrapper, data);
                  wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
                  overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);

                  if (wrapperleng + downIconWidth > overAllContainer) {
                    if (tempData !== undefined && tempData !== '') {
                      temp = tempData;
                      index = tempIndex + 1;
                    }

                    this.updateWrapperText(this.viewWrapper, temp);
                    remaining = this.value.length - index;
                    wrapperleng = this.viewWrapper.offsetWidth;

                    while (wrapperleng + remainSize + downIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.innerHTML !== '') {
                      var textArr = this.viewWrapper.innerHTML.split(this.delimiterChar);
                      textArr.pop();
                      this.viewWrapper.innerHTML = textArr.join(this.delimiterChar);

                      if (this.viewWrapper.innerHTML === '') {
                        remaining++;
                      }

                      wrapperleng = this.viewWrapper.offsetWidth;
                    }

                    break;
                  } else if (wrapperleng + remainSize + downIconWidth <= overAllContainer) {
                    tempData = data;
                    tempIndex = index;
                  } else if (index === 0) {
                    tempData = '';
                    tempIndex = -1;
                  }
                }
              }

              if (remaining > 0) {
                var totalWidth = overAllContainer - downIconWidth;
                this.viewWrapper.appendChild(this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, compiledString, totalCompiledString, totalWidth));
                this.updateRemainWidth(this.viewWrapper, totalWidth);
                this.updateRemainingText(raminElement, downIconWidth, remaining, compiledString, totalCompiledString);
              }
            } else {
              this.viewWrapper.innerHTML = '';
              this.viewWrapper.style.display = 'none';
            }
          }
        }, {
          key: "updateRemainWidth",
          value: function updateRemainWidth(viewWrapper, totalWidth) {
            if (viewWrapper.classList.contains(TOTAL_COUNT_WRAPPER$1) && totalWidth < viewWrapper.offsetWidth + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10) + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10)) {
              viewWrapper.style.width = totalWidth + 'px';
            }
          }
        }, {
          key: "updateRemainTemplate",
          value: function updateRemainTemplate(raminElement, viewWrapper, remaining, compiledString, totalCompiledString, totalWidth) {
            if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 && viewWrapper.firstChild.nodeValue === '') {
              viewWrapper.removeChild(viewWrapper.firstChild);
            }

            raminElement.innerHTML = '';
            raminElement.appendChild(viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 ? compiledString({
              'count': remaining
            }, null, null, null, !this.isStringTemplate)[0] : totalCompiledString({
              'count': remaining
            }, null, null, null, !this.isStringTemplate)[0]);

            if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) {
              viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER$1);
            } else {
              viewWrapper.classList.add(TOTAL_COUNT_WRAPPER$1);
              this.updateRemainWidth(viewWrapper, totalWidth);
            }

            return raminElement;
          }
        }, {
          key: "updateRemainingText",
          value: function updateRemainingText(raminElement, downIconWidth, remaining, compiledString, totalCompiledString) {
            var overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);
            var wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);

            if (wrapperleng + downIconWidth >= overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {
              while (wrapperleng + downIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {
                var textArr = this.viewWrapper.firstChild.nodeValue.split(this.delimiterChar);
                textArr.pop();
                this.viewWrapper.firstChild.nodeValue = textArr.join(this.delimiterChar);

                if (this.viewWrapper.firstChild.nodeValue === '') {
                  this.viewWrapper.removeChild(this.viewWrapper.firstChild);
                }

                remaining++;
                wrapperleng = this.viewWrapper.offsetWidth;
              }

              var totalWidth = overAllContainer - downIconWidth;
              this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, compiledString, totalCompiledString, totalWidth);
            }
          }
        }, {
          key: "getOverflowVal",
          value: function getOverflowVal(index) {
            var temp;

            if (this.mainData && this.mainData.length) {
              if (this.mode === 'CheckBox') {
                var newTemp = this.listData;
                this.listData = this.mainData;
                temp = this.getTextByValue(this.value[index]);
                this.listData = newTemp;
              } else {
                temp = this.getTextByValue(this.value[index]);
              }
            } else {
              temp = this.value[index];
            }

            return temp;
          }
        }, {
          key: "unWireEvent",
          value: function unWireEvent() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.componentWrapper, 'mousedown', this.wrapperClick);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(window, 'resize', this.windowResize);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'focus', this.focusInHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'keydown', this.onKeyDown);

            if (this.mode !== 'CheckBox') {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'input', this.onInput);
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'keyup', this.KeyUp);

            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.inputElement, 'form');

            if (formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(formElement, 'reset', this.resetValueHandler);
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'blur', this.onBlur);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.componentWrapper, 'mousemove', this.mouseIn);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.componentWrapper, 'mouseout', this.mouseOut);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.overAllClear, 'mousedown', this.ClearAll);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.inputElement, 'paste', this.pasteHandler);
          }
        }, {
          key: "selectAllItem",
          value: function selectAllItem(state, event, list) {
            var li;
            li = this.list.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide)');

            if (this.value && this.value.length && this.isPopupOpen() && event && event.target && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(event.target, '.e-close-hooker') && this.allowFiltering) {
              li = this.mainList.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide)');
            }

            if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.fields.groupBy)) {
              var target = event ? event.target : null;
              target = event && event.keyCode === 32 ? list : target;
              target = target && target.classList.contains('e-frame') ? target.parentElement.parentElement : target;

              if (target && target.classList.contains('e-list-group-item')) {
                var listElement = target.nextElementSibling;

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(listElement)) {
                  return;
                }

                while (listElement.classList.contains('e-list-item')) {
                  if (state) {
                    if (!listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {
                      var selectionLimit = this.value && this.value.length ? this.value.length : 0;

                      if (listElement.classList.contains('e-active')) {
                        selectionLimit -= 1;
                      }

                      if (selectionLimit < this.maximumSelectionLength) {
                        this.updateListSelection(listElement, event);
                      }
                    }
                  } else {
                    if (listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {
                      this.updateListSelection(listElement, event);
                    }
                  }

                  listElement = listElement.nextElementSibling;

                  if (listElement == null) {
                    break;
                  }
                }

                if (target.classList.contains('e-list-group-item')) {
                  var focusedElement = this.list.getElementsByClassName('e-item-focus')[0];

                  if (focusedElement) {
                    focusedElement.classList.remove('e-item-focus');
                  }

                  state ? target.classList.add('e-active') : target.classList.remove('e-active');
                  target.classList.add('e-item-focus');
                }

                this.textboxValueUpdate();
                this.checkPlaceholderSize();

                if (!this.changeOnBlur && event) {
                  this.updateValueState(event, this.value, this.tempValues);
                }
              } else {
                this.updateValue(event, li, state);
              }
            } else {
              this.updateValue(event, li, state);
            }
          }
        }, {
          key: "updateValue",
          value: function updateValue(event, li, state) {
            var _this177 = this;

            var length = li.length;

            if (li && li.length) {
              var index = 0;
              var count = 0;

              if (this.enableGroupCheckBox) {
                count = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : li.length;
              } else {
                count = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : this.maximumSelectionLength;
              }

              while (index < length && index <= 50 && index < count) {
                this.updateListSelection(li[index], event, length - index);
                this.findGroupStart(li[index]);
                index++;
              }

              if (length > 50) {
                setTimeout(function () {
                  while (index < length && index < count) {
                    _this177.updateListSelection(li[index], event, length - index);

                    _this177.findGroupStart(li[index]);

                    index++;
                  }

                  if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && _this177.isServerRendered)) {
                    _this177.updatedataValueItems(event);
                  }
                }, 0);
              }
            }

            if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
              this.updatedataValueItems(event);
              this.checkPlaceholderSize();
            }
          }
        }, {
          key: "updatedataValueItems",
          value: function updatedataValueItems(event) {
            this.deselectHeader();
            this.textboxValueUpdate(event);
          }
        }, {
          key: "textboxValueUpdate",
          value: function textboxValueUpdate(event) {
            if (this.mode !== 'Box' && !this.isPopupOpen()) {
              this.updateDelimView();
            } else {
              this.searchWrapper.classList.remove(ZERO_SIZE);
            }

            if (this.mode === 'CheckBox') {
              this.updateDelimView();
              this.updateDelimeter(this.delimiterChar, event);
              this.refreshInputHight();
            } else {
              this.updateDelimeter(this.delimiterChar, event);
            }

            this.refreshPlaceHolder();
          }
        }, {
          key: "setZIndex",
          value: function setZIndex() {
            if (this.popupObj) {
              this.popupObj.setProperties({
                'zIndex': this.zIndex
              });
            }
          }
        }, {
          key: "updateDataSource",
          value: function updateDataSource(prop) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list)) {
              this.renderPopup();
            } else {
              this.resetList(this.dataSource);
            }

            if (this.value && this.value.length && !(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
              this.setProperties({
                'value': this.value
              });
              this.refreshSelection();
            }
          }
        }, {
          key: "onLoadSelect",
          value: function onLoadSelect() {
            this.setDynValue = true;
            this.renderPopup();
          }
        }, {
          key: "selectAllItems",
          value: function selectAllItems(state, event) {
            var _this178 = this;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.list)) {
              this.selectAllAction = function () {
                if (_this178.mode === 'CheckBox' && _this178.showSelectAll) {
                  var args = {
                    module: 'CheckBoxSelection',
                    enable: _this178.mode === 'CheckBox',
                    value: state ? 'check' : 'uncheck'
                  };

                  _this178.notify('checkSelectAll', args);
                }

                _this178.selectAllItem(state, event);

                _this178.selectAllAction = null;
              };

              _get2(_getPrototypeOf2(MultiSelect.prototype), "render", this).call(this);
            } else {
              this.selectAllAction = null;

              if (this.mode === 'CheckBox' && this.showSelectAll) {
                var args = {
                  value: state ? 'check' : 'uncheck',
                  enable: this.mode === 'CheckBox',
                  module: 'CheckBoxSelection'
                };
                this.notify('checkSelectAll', args);
              }

              this.selectAllItem(state, event);
            }
          }
          /**
           * Get the properties to be maintained in the persisted state.
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist(['value']);
          }
        }, {
          key: "onPropertyChanged",

          /**
           * Dynamically change the value of properties.
           * @private
           */
          value: function onPropertyChanged(newProp, oldProp) {
            if (newProp.dataSource && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object.keys(newProp.dataSource)) || newProp.query && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(Object.keys(newProp.query))) {
              this.mainList = null;
              this.mainData = null;
              this.isFirstClick = false;
              this.isDynamicDataChange = true;
            }

            if (this.getModuleName() === 'multiselect') {
              this.filterAction = false;
              this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);
            }

            for (var _i90 = 0, _Object$keys29 = Object.keys(newProp); _i90 < _Object$keys29.length; _i90++) {
              var prop = _Object$keys29[_i90];

              switch (prop) {
                case 'query':
                case 'dataSource':
                  if (this.mode === 'CheckBox' && this.showSelectAll) {
                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.popupObj)) {
                      this.popupObj.destroy();
                      this.popupObj = null;
                    }

                    this.renderPopup();
                  }

                  break;

                case 'htmlAttributes':
                  this.updateHTMLAttribute();
                  break;

                case 'showClearButton':
                  this.updateClearButton(newProp.showClearButton);
                  break;

                case 'text':
                  this.updateVal(this.value, this.value, 'text');
                  break;

                case 'value':
                  this.updateVal(this.value, oldProp.value, 'value');
                  this.addValidInputClass();
                  break;

                case 'width':
                  this.setWidth(newProp.width);
                  this.popupObj.setProperties({
                    width: this.calcPopupWidth()
                  });
                  break;

                case 'placeholder':
                  this.refreshPlaceHolder();
                  break;

                case 'filterBarPlaceholder':
                  if (this.allowFiltering) {
                    this.notify('filterBarPlaceholder', {
                      filterBarPlaceholder: newProp.filterBarPlaceholder
                    });
                  }

                  break;

                case 'delimiterChar':
                  if (this.mode !== 'Box') {
                    this.updateDelimView();
                  }

                  this.updateData(newProp.delimiterChar);
                  break;

                case 'cssClass':
                  this.updateOldPropCssClass(oldProp.cssClass);
                  this.updateCssClass();
                  break;

                case 'enableRtl':
                  this.enableRTL(newProp.enableRtl);

                  _get2(_getPrototypeOf2(MultiSelect.prototype), "onPropertyChanged", this).call(this, newProp, oldProp);

                  break;

                case 'readonly':
                  this.updateReadonly(newProp.readonly);
                  this.hidePopup();
                  break;

                case 'enabled':
                  this.hidePopup();
                  this.enable(newProp.enabled);
                  break;

                case 'showSelectAll':
                  if (this.popupObj) {
                    this.popupObj.destroy();
                    this.popupObj = null;
                  }

                  this.renderPopup();
                  break;

                case 'showDropDownIcon':
                  this.dropDownIcon();
                  break;

                case 'floatLabelType':
                  this.setFloatLabelType();
                  this.addValidInputClass();
                  break;

                case 'enableSelectionOrder':
                  break;

                case 'selectAllText':
                  this.notify('selectAllText', false);
                  break;

                case 'popupHeight':
                case 'headerTemplate':
                case 'footerTemplate':
                  this.reInitializePoup();
                  break;

                case 'allowFiltering':
                  if (this.mode === 'CheckBox' && this.popupObj) {
                    this.reInitializePoup();
                  }

                  this.updateSelectElementData(this.allowFiltering);
                  break;

                default:
                  var msProps = void 0;
                  msProps = this.getPropObject(prop, newProp, oldProp);

                  _get2(_getPrototypeOf2(MultiSelect.prototype), "onPropertyChanged", this).call(this, msProps.newProperty, msProps.oldProperty);

                  break;
              }
            }
          }
        }, {
          key: "reInitializePoup",
          value: function reInitializePoup() {
            if (this.popupObj) {
              this.popupObj.destroy();
              this.popupObj = null;
            }

            this.renderPopup();
          }
        }, {
          key: "updateVal",
          value: function updateVal(newProp, oldProp, prop) {
            if (!this.list) {
              this.onLoadSelect();
            } else if (!this.inputFocus) {
              if (prop === 'text') {
                this.initialTextUpdate();
                newProp = this.value;
              }

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) || this.value.length === 0) {
                this.tempValues = oldProp;
              }

              this.initialValueUpdate();

              if (this.mode !== 'Box') {
                this.updateDelimView();
              }

              this.refreshInputHight();
              this.refreshPlaceHolder();

              if (this.mode !== 'CheckBox' && this.changeOnBlur) {
                this.updateValueState(null, newProp, oldProp);
              }

              this.checkPlaceholderSize();
            }

            if (!this.changeOnBlur) {
              this.updateValueState(null, newProp, oldProp);
            }
          }
          /**
           * Adds a new item to the multiselect popup list. By default, new item appends to the list as the last item,
           * but you can insert based on the index parameter.
           * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
           * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.
           * @return {void}.
           */

        }, {
          key: "addItem",
          value: function addItem(items, itemIndex) {
            _get2(_getPrototypeOf2(MultiSelect.prototype), "addItem", this).call(this, items, itemIndex);
          }
          /**
           * Hides the popup, if the popup in a open state.
           * @returns void
           */

        }, {
          key: "hidePopup",
          value: function hidePopup() {
            var _this179 = this;

            var delay = 100;

            if (this.isPopupOpen()) {
              var animModel = {
                name: 'FadeOut',
                duration: 100,
                delay: delay ? delay : 0
              };
              var eventArgs = {
                popup: this.popupObj,
                cancel: false,
                animation: animModel
              };
              this.trigger('close', eventArgs, function (eventArgs) {
                if (!eventArgs.cancel) {
                  _this179.beforePopupOpen = false;

                  _this179.overAllWrapper.classList.remove(iconAnimation);

                  _this179.popupObj.hide(new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"](eventArgs.animation));

                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(_this179.inputElement, {
                    'aria-expanded': 'false'
                  });

                  if (_this179.allowFiltering) {
                    _this179.notify('inputFocus', {
                      module: 'CheckBoxSelection',
                      enable: _this179.mode === 'CheckBox',
                      value: 'clear'
                    });
                  }

                  _this179.popupObj.hide();

                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([document.body, _this179.popupObj.element], 'e-popup-full-page');

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(_this179.list, 'keydown', _this179.onKeyDown);
                }
              });
            }
          }
          /**
           * Shows the popup, if the popup in a closed state.
           * @returns void
           */

        }, {
          key: "showPopup",
          value: function showPopup() {
            if (!this.enabled) {
              return;
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && this.itemTemplate) {
              this.DropDownBaseupdateBlazorTemplates(true, false, false, false, false, false, false, false);

              if (this.mode !== 'CheckBox' && this.list) {
                this.refreshSelection();
              }
            }

            if (!this.ulElement) {
              this.beforePopupOpen = true;

              _get2(_getPrototypeOf2(MultiSelect.prototype), "render", this).call(this);

              if (this.mode === 'CheckBox' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.allowFiltering) {
                this.notify('popupFullScreen', {
                  module: 'CheckBoxSelection',
                  enable: this.mode === 'CheckBox'
                });
              }

              return;
            }

            if (this.mode === 'CheckBox' && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.allowFiltering) {
              this.notify('popupFullScreen', {
                module: 'CheckBoxSelection',
                enable: this.mode === 'CheckBox'
              });
            }

            var mainLiLength = this.ulElement.querySelectorAll('li.' + 'e-list-item').length;
            var liLength = this.ulElement.querySelectorAll('li.' + dropDownBaseClasses.li + '.' + HIDE_LIST).length;

            if (mainLiLength > 0 && mainLiLength === liLength && liLength === this.mainData.length) {
              this.beforePopupOpen = false;
              return;
            }

            this.onPopupShown();
          }
          /**
           * Based on the state parameter, entire list item will be selected/deselected.
           * parameter
           * `true`   - Selects entire list items.
           * `false`  - Un Selects entire list items.
           * @returns void
           */

        }, {
          key: "selectAll",
          value: function selectAll(state) {
            this.isSelectAll = true;
            this.selectAllItems(state);
          }
        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'multiselect';
          }
        }, {
          key: "clear",

          /**
           * Allows you to clear the selected values from the Multiselect component.
           * @returns void
           */
          value: function clear() {
            this.selectAll(false);
            this.setProperties({
              value: null
            }, true);
          }
          /**
           * To Initialize the control rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.setDynValue = this.initStatus = false;
            this.isSelectAll = false;
            this.searchWrapper = this.createElement('span', {
              className: SEARCHBOX_WRAPPER + ' ' + (this.mode === 'Box' ? BOX_ELEMENT : '')
            });
            this.viewWrapper = this.createElement('span', {
              className: DELIMITER_VIEW + ' ' + DELIMITER_WRAPPER,
              styles: 'display:none;'
            });
            this.overAllClear = this.createElement('span', {
              className: CLOSEICON_CLASS$1,
              styles: 'display:none;'
            });
            this.componentWrapper = this.createElement('div', {
              className: ELEMENT_WRAPPER
            });
            this.overAllWrapper = this.createElement('div', {
              className: OVER_ALL_WRAPPER
            });

            if (this.mode === 'CheckBox') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overAllWrapper], 'e-checkbox');
            }

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              this.componentWrapper.classList.add(ELEMENT_MOBILE_WRAPPER);
            }

            this.setWidth(this.width);
            this.overAllWrapper.appendChild(this.componentWrapper);
            this.popupWrapper = this.createElement('div', {
              id: this.element.id + '_popup',
              className: POPUP_WRAPPER
            });

            if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {
              this.delimiterWrapper = this.createElement('span', {
                className: DELIMITER_WRAPPER,
                styles: 'display:none'
              });
              this.componentWrapper.appendChild(this.delimiterWrapper);
            } else {
              this.chipCollectionWrapper = this.createElement('span', {
                className: CHIP_WRAPPER$1,
                styles: 'display:none'
              });

              if (this.mode === 'Default') {
                this.chipCollectionWrapper.setAttribute('id', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('chip_default'));
              } else if (this.mode === 'Box') {
                this.chipCollectionWrapper.setAttribute('id', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('chip_box'));
              }

              this.componentWrapper.appendChild(this.chipCollectionWrapper);
            }

            if (this.mode !== 'Box') {
              this.componentWrapper.appendChild(this.viewWrapper);
            }

            this.componentWrapper.appendChild(this.searchWrapper);

            if (this.showClearButton && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              this.componentWrapper.appendChild(this.overAllClear);
            } else {
              this.componentWrapper.classList.add(CLOSE_ICON_HIDE);
            }

            this.dropDownIcon();
            this.inputElement = this.createElement('input', {
              className: INPUT_ELEMENT,
              attrs: {
                spellcheck: 'false',
                type: 'text',
                autocomplete: 'off',
                tabindex: '0'
              }
            });

            if (this.mode === 'Default' || this.mode === 'Box') {
              this.inputElement.setAttribute('aria-describedby', this.chipCollectionWrapper.id);
            }

            if (this.element.tagName !== this.getNgDirective()) {
              this.element.style.display = 'none';
            }

            if (this.element.tagName === this.getNgDirective()) {
              this.element.appendChild(this.overAllWrapper);
              this.searchWrapper.appendChild(this.inputElement);
            } else {
              this.element.parentElement.insertBefore(this.overAllWrapper, this.element);
              this.searchWrapper.appendChild(this.inputElement);
              this.searchWrapper.appendChild(this.element);
              this.element.removeAttribute('tabindex');
            }

            if (this.floatLabelType !== 'Never') {
              createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);
            } else if (this.floatLabelType === 'Never') {
              this.refreshPlaceHolder();
            }

            this.addValidInputClass();
            this.element.style.opacity = '';
            var id = this.element.getAttribute('id') ? this.element.getAttribute('id') : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('ej2_dropdownlist');
            this.element.id = id;
            this.hiddenElement = this.createElement('select', {
              attrs: {
                'aria-hidden': 'true',
                'class': HIDDEN_ELEMENT,
                'tabindex': '-1',
                'multiple': ''
              }
            });
            this.componentWrapper.appendChild(this.hiddenElement);
            this.validationAttribute(this.element, this.hiddenElement);

            if (this.mode !== 'CheckBox') {
              this.hideOverAllClear();
            }

            this.wireEvent();
            this.enable(this.enabled);
            this.enableRTL(this.enableRtl);
            this.checkInitialValue();
            this.renderComplete();
          }
        }, {
          key: "checkInitialValue",
          value: function checkInitialValue() {
            var _this180 = this;

            var isData = this.dataSource instanceof Array ? this.dataSource.length > 0 : !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dataSource);

            if (!(this.value && this.value.length) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.text) && !isData && this.element.tagName === 'SELECT' && this.element.options.length > 0) {
              var optionsElement = this.element.options;
              var valueCol = [];
              var textCol = '';

              for (var index = 0, optionsLen = optionsElement.length; index < optionsLen; index++) {
                var opt = optionsElement[index];

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(opt.getAttribute('selected'))) {
                  opt.getAttribute('value') ? valueCol.push(opt.getAttribute('value')) : textCol += opt.text + this.delimiterChar;
                }
              }

              if (valueCol.length > 0) {
                this.setProperties({
                  value: valueCol
                }, true);
              } else if (textCol !== '') {
                this.setProperties({
                  text: textCol
                }, true);
              }

              if (valueCol.length > 0 || textCol !== '') {
                this.refreshInputHight();
                this.refreshPlaceHolder();
              }
            }

            if (this.value && this.value.length || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.text)) {
              this.renderPopup();
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.text) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) || this.value.length === 0)) {
              this.initialTextUpdate();
            }

            if (this.value && this.value.length) {
              if (!(this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"])) {
                this.initialValueUpdate();
                this.initialUpdate();
              } else {
                this.setInitialValue = function () {
                  _this180.initStatus = false;

                  _this180.initialValueUpdate();

                  _this180.initialUpdate();

                  _this180.setInitialValue = null;
                  _this180.initStatus = true;
                };
              }

              this.updateTempValue();
            } else {
              this.initialUpdate();
            }

            this.initStatus = true;
            this.checkAutoFocus();

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.text)) {
              this.element.setAttribute('data-initial-value', this.text);
            }
          }
        }, {
          key: "checkAutoFocus",
          value: function checkAutoFocus() {
            if (this.element.hasAttribute('autofocus')) {
              this.inputElement.focus();
            }
          }
        }, {
          key: "setFloatLabelType",
          value: function setFloatLabelType() {
            removeFloating(this.overAllWrapper, this.componentWrapper, this.searchWrapper, this.inputElement, this.value, this.floatLabelType, this.placeholder);

            if (this.floatLabelType !== 'Never') {
              createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);
            }
          }
        }, {
          key: "addValidInputClass",
          value: function addValidInputClass() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) && this.value.length || this.floatLabelType === 'Always') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.overAllWrapper], 'e-valid-input');
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.overAllWrapper], 'e-valid-input');
            }
          }
        }, {
          key: "dropDownIcon",
          value: function dropDownIcon() {
            if (this.showDropDownIcon) {
              this.dropIcon = this.createElement('span', {
                className: dropdownIcon
              });
              this.componentWrapper.appendChild(this.dropIcon);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.componentWrapper], ['e-down-icon']);
            } else {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.dropIcon)) {
                this.dropIcon.parentElement.removeChild(this.dropIcon);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.componentWrapper], ['e-down-icon']);
              }
            }
          }
        }, {
          key: "initialUpdate",
          value: function initialUpdate() {
            if (this.mode !== 'Box') {
              this.updateDelimView();
            }

            this.updateCssClass();
            this.updateHTMLAttribute();
            this.updateReadonly(this.readonly);
            this.refreshInputHight();
            this.checkPlaceholderSize();
          }
          /**
           * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
           * @method destroy
           * @return {void}
           */

        }, {
          key: "destroy",
          value: function destroy() {
            if (this.popupObj) {
              this.popupObj.hide();
            }

            this.notify(_destroy, {});
            this.unwireListEvents();
            this.unWireEvent();
            this.list = null;
            this.popupObj = null;
            this.mainList = null;
            this.mainData = null;
            this.filterParent = null;
            this.ulElement = null;

            _get2(_getPrototypeOf2(MultiSelect.prototype), "destroy", this).call(this);

            var temp = ['readonly', 'aria-disabled', 'aria-placeholder', 'placeholder'];
            var length = temp.length;

            while (length > 0) {
              this.inputElement.removeAttribute(temp[length - 1]);
              length--;
            }

            this.element.removeAttribute('data-initial-value');
            this.element.style.display = 'block';

            if (this.overAllWrapper.parentElement) {
              if (this.overAllWrapper.parentElement.tagName === this.getNgDirective()) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.overAllWrapper);
              } else {
                this.overAllWrapper.parentElement.insertBefore(this.element, this.overAllWrapper);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.overAllWrapper);
              }
            }
          }
        }]);

        return MultiSelect;
      }(DropDownBase);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        text: null,
        value: null,
        iconCss: null,
        groupBy: null
      }, FieldSettings)], MultiSelect.prototype, "fields", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MultiSelect.prototype, "enablePersistence", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MultiSelect.prototype, "groupTemplate", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('No records found')], MultiSelect.prototype, "noRecordsTemplate", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Request failed')], MultiSelect.prototype, "actionFailureTemplate", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('None')], MultiSelect.prototype, "sortOrder", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], MultiSelect.prototype, "enabled", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MultiSelect.prototype, "enableHtmlSanitizer", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], MultiSelect.prototype, "dataSource", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MultiSelect.prototype, "query", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('StartsWith')], MultiSelect.prototype, "filterType", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1000)], MultiSelect.prototype, "zIndex", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MultiSelect.prototype, "ignoreAccent", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], MultiSelect.prototype, "locale", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MultiSelect.prototype, "enableGroupCheckBox", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MultiSelect.prototype, "cssClass", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], MultiSelect.prototype, "width", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('300px')], MultiSelect.prototype, "popupHeight", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('100%')], MultiSelect.prototype, "popupWidth", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MultiSelect.prototype, "placeholder", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MultiSelect.prototype, "filterBarPlaceholder", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], MultiSelect.prototype, "htmlAttributes", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MultiSelect.prototype, "valueTemplate", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MultiSelect.prototype, "headerTemplate", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MultiSelect.prototype, "footerTemplate", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MultiSelect.prototype, "itemTemplate", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MultiSelect.prototype, "allowFiltering", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], MultiSelect.prototype, "changeOnBlur", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MultiSelect.prototype, "allowCustomValue", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], MultiSelect.prototype, "showClearButton", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1000)], MultiSelect.prototype, "maximumSelectionLength", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MultiSelect.prototype, "readonly", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MultiSelect.prototype, "text", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MultiSelect.prototype, "value", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], MultiSelect.prototype, "hideSelectedItem", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], MultiSelect.prototype, "closePopupOnSelect", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Default')], MultiSelect.prototype, "mode", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(',')], MultiSelect.prototype, "delimiterChar", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], MultiSelect.prototype, "ignoreCase", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MultiSelect.prototype, "showDropDownIcon", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Never')], MultiSelect.prototype, "floatLabelType", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MultiSelect.prototype, "showSelectAll", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Select All')], MultiSelect.prototype, "selectAllText", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Unselect All')], MultiSelect.prototype, "unSelectAllText", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], MultiSelect.prototype, "enableSelectionOrder", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], MultiSelect.prototype, "openOnClick", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MultiSelect.prototype, "change", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MultiSelect.prototype, "removing", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MultiSelect.prototype, "removed", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MultiSelect.prototype, "selectedAll", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MultiSelect.prototype, "beforeOpen", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MultiSelect.prototype, "open", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MultiSelect.prototype, "close", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MultiSelect.prototype, "blur", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MultiSelect.prototype, "focus", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MultiSelect.prototype, "chipSelection", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MultiSelect.prototype, "filtering", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MultiSelect.prototype, "tagging", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MultiSelect.prototype, "customValueSelection", void 0);

      MultiSelect = __decorate$5([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], MultiSelect);
      var ICON = 'e-icons';
      var CHECKBOXFRAME$1 = 'e-frame';
      var CHECK$1 = 'e-check';
      var CHECKBOXWRAP$1 = 'e-checkbox-wrapper';
      var INDETERMINATE = 'e-stop';
      var checkAllParent = 'e-selectall-parent';
      var searchBackIcon = 'e-input-group-icon e-back-icon e-icons';
      var filterBarClearIcon = 'e-input-group-icon e-clear-icon e-icons';
      var filterInput = 'e-input-filter';
      var filterParent = 'e-filter-parent';
      var mobileFilter = 'e-ddl-device-filter';
      var clearIcon = 'e-clear-icon';
      var popupFullScreen = 'e-popup-full-page';
      var device = 'e-ddl-device';
      var FOCUS$1 = 'e-input-focus';
      /**
       * The Multiselect enable CheckBoxSelection call this inject module.
       */

      var CheckBoxSelection = /*#__PURE__*/function () {
        function CheckBoxSelection(parent) {
          _classCallCheck2(this, CheckBoxSelection);

          this.activeLi = [];
          this.activeEle = [];
          this.parent = parent;
          this.removeEventListener();
          this.addEventListener();
        }

        _createClass2(CheckBoxSelection, [{
          key: "getModuleName",
          value: function getModuleName() {
            return 'CheckBoxSelection';
          }
        }, {
          key: "addEventListener",
          value: function addEventListener() {
            if (this.parent.isDestroyed) {
              return;
            }

            this.parent.on('updatelist', this.listSelection, this);
            this.parent.on('listoption', this.listOption, this);
            this.parent.on('selectAll', this.setSelectAll, this);
            this.parent.on('checkSelectAll', this.checkSelectAll, this);
            this.parent.on('searchBox', this.setSearchBox, this);
            this.parent.on('blur', this.onBlur, this);
            this.parent.on('targetElement', this.targetElement, this);
            this.parent.on('deviceSearchBox', this.setDeviceSearchBox, this);
            this.parent.on('inputFocus', this.getFocus, this);
            this.parent.on('reOrder', this.setReorder, this);
            this.parent.on('activeList', this.getActiveList, this);
            this.parent.on('selectAllText', this.setLocale, this);
            this.parent.on('filterBarPlaceholder', this.setPlaceholder, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousedown', this.onDocumentClick, this);

            this.parent.on('addItem', this.checboxCreate, this);
            this.parent.on('popupFullScreen', this.setPopupFullScreen, this);
          }
        }, {
          key: "removeEventListener",
          value: function removeEventListener() {
            if (this.parent.isDestroyed) {
              return;
            }

            this.parent.off('updatelist', this.listSelection);
            this.parent.off('listoption', this.listOption);
            this.parent.off('selectAll', this.setSelectAll);
            this.parent.off('checkSelectAll', this.checkSelectAll);
            this.parent.off('searchBox', this.setSearchBox);
            this.parent.off('blur', this.onBlur);
            this.parent.off('targetElement', this.targetElement);
            this.parent.off('deviceSearchBox', this.setDeviceSearchBox);
            this.parent.off('inputFocus', this.getFocus);
            this.parent.off('reOrder', this.setReorder);
            this.parent.off('activeList', this.getActiveList);
            this.parent.off('selectAllText', this.setLocale);
            this.parent.off('filterBarPlaceholder', this.setPlaceholder);
            this.parent.off('addItem', this.checboxCreate);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousedown', this.onDocumentClick);

            this.parent.off('popupFullScreen', this.setPopupFullScreen);
          }
        }, {
          key: "listOption",
          value: function listOption(args) {
            var _this181 = this;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.parent.listCurrentOptions.itemCreated)) {
              this.parent.listCurrentOptions.itemCreated = function (e) {
                _this181.checboxCreate(e);
              };
            } else {
              var itemCreated = this.parent.listCurrentOptions.itemCreated;

              this.parent.listCurrentOptions.itemCreated = function (e) {
                _this181.checboxCreate(e);

                itemCreated.apply(_this181, [e]);
              };
            }
          }
        }, {
          key: "setPlaceholder",
          value: function setPlaceholder(props) {
            _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setPlaceholder(props.filterBarPlaceholder, this.filterInput);
          }
        }, {
          key: "checboxCreate",
          value: function checboxCreate(e) {
            var item;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e.item)) {
              item = e.item;
            } else {
              item = e;
            }

            if (this.parent.enableGroupCheckBox || item.className !== 'e-list-group-item ' && item.className !== 'e-list-group-item') {
              var checkboxEle = Object(_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__["createCheckBox"])(this.parent.createElement, true);
              var icon = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('div.' + ICON, item);
              var id = item.getAttribute('data-uid');
              item.insertBefore(checkboxEle, item.childNodes[Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(icon) ? 0 : 1]);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXFRAME$1, checkboxEle);
              var frame = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXFRAME$1, checkboxEle);

              if (this.parent.enableGroupCheckBox) {
                this.parent.popupWrapper.classList.add('e-multiselect-group');
              }

              return item;
            } else {
              return item;
            }
          }
        }, {
          key: "setSelectAll",
          value: function setSelectAll() {
            if (this.parent.showSelectAll) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.checkAllParent)) {
                this.checkAllParent = this.parent.createElement('div', {
                  className: checkAllParent
                });
                this.selectAllSpan = this.parent.createElement('span', {
                  className: 'e-all-text'
                });
                this.selectAllSpan.textContent = '';
                this.checkAllParent.appendChild(this.selectAllSpan);
                this.setLocale();
                this.checboxCreate(this.checkAllParent);

                if (this.parent.headerTemplate) {
                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.parent.filterParent)) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([this.checkAllParent], this.parent.filterParent);
                  } else {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([this.checkAllParent], this.parent.popupWrapper);
                  }
                }

                if (!this.parent.headerTemplate) {
                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.parent.filterParent)) {
                    this.parent.filterParent.parentNode.insertBefore(this.checkAllParent, this.parent.filterParent.nextSibling);
                  } else {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.checkAllParent], this.parent.popupWrapper);
                  }
                }

                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.checkAllParent, 'mousedown', this.clickHandler, this);
              }

              if (this.parent.list.classList.contains('e-nodata') || this.parent.listData && this.parent.listData.length <= 1) {
                this.checkAllParent.style.display = 'none';
              } else {
                this.checkAllParent.style.display = 'block';
              }

              this.parent.selectAllHeight = this.checkAllParent.getBoundingClientRect().height;
            } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.checkAllParent)) {
              this.checkAllParent.parentElement.removeChild(this.checkAllParent);
              this.checkAllParent = null;
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.removeEventListener();
          }
        }, {
          key: "listSelection",
          value: function listSelection(args) {
            var target;
            var isBlazorListbox = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && args.module && args.module === 'listbox';

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.e)) {
              var frameElm = args.li.querySelector('.e-checkbox-wrapper .e-frame');
              target = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.e.target) ? args.e.target.classList.contains('e-frame') && (!this.parent.showSelectAll || this.checkAllParent && !this.checkAllParent.contains(args.e.target)) ? args.e.target : isBlazorListbox ? frameElm : args.li.querySelector('.e-checkbox-wrapper').childNodes[1] : isBlazorListbox ? frameElm : args.li.querySelector('.e-checkbox-wrapper').childNodes[1];
            } else {
              var checkboxWrapper = args.li.querySelector('.e-checkbox-wrapper');
              target = checkboxWrapper ? isBlazorListbox ? checkboxWrapper.querySelector('.e-frame') : checkboxWrapper.childNodes[1] : args.li.lastElementChild.childNodes[1];
            }

            if (this.parent.itemTemplate || this.parent.enableGroupCheckBox) {
              target = args.li.firstElementChild.childNodes[1];
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(target)) {
              this.checkWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + CHECKBOXWRAP$1);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.checkWrapper)) {
              var checkElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXFRAME$1, this.checkWrapper);
              var selectAll$$1 = false;
              this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK$1), args.li, args.e, selectAll$$1);
            }
          }
        }, {
          key: "validateCheckNode",
          value: function validateCheckNode(checkWrap, isCheck, li, e, selectAll$$1) {
            this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true, selectAll$$1);
          }
        }, {
          key: "clickHandler",
          value: function clickHandler(e) {
            var target;

            if (e.currentTarget.classList.contains(this.checkAllParent.className)) {
              target = e.currentTarget.firstElementChild.lastElementChild;
            } else {
              target = e.currentTarget;
            }

            this.checkWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + CHECKBOXWRAP$1);
            var selectAll$$1 = true;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.checkWrapper)) {
              var checkElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CHECKBOXFRAME$1, this.checkWrapper);
              this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK$1), null, e, selectAll$$1);
            }

            e.preventDefault();
          }
        }, {
          key: "changeState",
          value: function changeState(wrapper, state, e, isPrevent, selectAll$$1) {
            var ariaState;
            var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME$1)[0];

            if (state === 'check' && !frameSpan.classList.contains(CHECK$1)) {
              frameSpan.classList.remove(INDETERMINATE);
              frameSpan.classList.add(CHECK$1);
              ariaState = 'true';

              if (selectAll$$1) {
                this.parent.selectAllItems(true, e);
                this.setLocale(true);
              }
            } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK$1) || frameSpan.classList.contains(INDETERMINATE))) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([frameSpan], [CHECK$1, INDETERMINATE]);
              ariaState = 'false';

              if (selectAll$$1) {
                this.parent.selectAllItems(false, e);
                this.setLocale();
              }
            } else if (state === 'indeterminate' && !frameSpan.classList.contains(INDETERMINATE)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([frameSpan], [CHECK$1]);
              frameSpan.classList.add(INDETERMINATE);
              ariaState = 'false';

              if (selectAll$$1) {
                this.parent.selectAllItems(false, e);
                this.setLocale();
              }
            }

            ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ariaState)) {
              wrapper.setAttribute('aria-checked', ariaState);
            }
          }
        }, {
          key: "setSearchBox",
          value: function setSearchBox(args) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.parent.filterParent)) {
              this.parent.filterParent = this.parent.createElement('span', {
                className: filterParent
              });
              this.filterInput = this.parent.createElement('input', {
                attrs: {
                  type: 'text'
                },
                className: filterInput
              });
              this.parent.element.parentNode.insertBefore(this.filterInput, this.parent.element);
              var backIcon = false;

              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                backIcon = true;
                this.parent.mobFilter = false;
              }

              this.filterInputObj = _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].createInput({
                element: this.filterInput,
                buttons: backIcon ? [searchBackIcon, filterBarClearIcon] : [filterBarClearIcon],
                properties: {
                  placeholder: this.parent.filterBarPlaceholder
                }
              }, this.parent.createElement);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.parent.cssClass)) {
                if (this.parent.cssClass.split(' ').indexOf('e-outline') !== -1) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.filterInputObj.container], 'e-outline');
                } else if (this.parent.cssClass.split(' ').indexOf('e-filled') !== -1) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.filterInputObj.container], 'e-filled');
                }
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([this.filterInputObj.container], this.parent.filterParent);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.parent.filterParent], args.popupElement);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.filterInput, {
                'aria-disabled': 'false',
                'aria-owns': this.parent.element.id + '_options',
                'role': 'listbox',
                'aria-activedescendant': null,
                'autocomplete': 'off',
                'autocorrect': 'off',
                'autocapitalize': 'off',
                'spellcheck': 'false'
              });
              this.clearIconElement = this.filterInput.parentElement.querySelector('.' + clearIcon);

              if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.clearIconElement) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.clearIconElement, 'mousedown', this.clearText, this);

                this.clearIconElement.style.visibility = 'hidden';
              }

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.filterInput, 'input', this.parent.onInput, this.parent);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.filterInput, 'keyup', this.parent.KeyUp, this.parent);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.filterInput, 'keydown', this.parent.onKeyDown, this.parent);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.filterInput, 'blur', this.onBlur, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.filterInput, 'paste', this.parent.pasteHandler, this.parent);

              this.parent.searchBoxHeight = this.filterInputObj.container.parentElement.getBoundingClientRect().height;
              return this.filterInputObj;
            }
          }
        }, {
          key: "clickOnBackIcon",
          value: function clickOnBackIcon(e) {
            this.parent.hidePopup();
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([document.body, this.parent.popupObj.element], popupFullScreen);
            this.parent.inputElement.focus();
          }
        }, {
          key: "clearText",
          value: function clearText(e) {
            this.parent.targetInputElement.value = '';
            this.parent.refreshPopup();
            this.parent.refreshListItems(null);
            this.clearIconElement.style.visibility = 'hidden';
            this.filterInput.focus();
            this.setReorder(e);
            e.preventDefault();
          }
        }, {
          key: "setDeviceSearchBox",
          value: function setDeviceSearchBox() {
            this.parent.popupObj.element.classList.add(device);
            this.parent.popupObj.element.classList.add(mobileFilter);
            this.parent.popupObj.position = {
              X: 0,
              Y: 0
            };
            this.parent.popupObj.dataBind();
            this.setSearchBoxPosition();
            this.backIconElement = this.filterInputObj.container.querySelector('.e-back-icon');
            this.clearIconElement = this.filterInputObj.container.querySelector('.' + clearIcon);
            this.clearIconElement.style.visibility = 'hidden';

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.backIconElement, 'click', this.clickOnBackIcon, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.clearIconElement, 'click', this.clearText, this);
          }
        }, {
          key: "setSearchBoxPosition",
          value: function setSearchBoxPosition() {
            var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
            var selectAllHeight = 0;

            if (this.checkAllParent) {
              selectAllHeight = this.checkAllParent.getBoundingClientRect().height;
            }

            this.parent.popupObj.element.style.maxHeight = '100%';
            this.parent.popupObj.element.style.width = '100%';
            this.parent.list.style.maxHeight = window.innerHeight - searchBoxHeight - selectAllHeight + 'px';
            this.parent.list.style.height = window.innerHeight - searchBoxHeight - selectAllHeight + 'px';
            var clearElement = this.filterInput.parentElement.querySelector('.' + clearIcon);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.filterInput);
            clearElement.parentElement.insertBefore(this.filterInput, clearElement);
          }
        }, {
          key: "setPopupFullScreen",
          value: function setPopupFullScreen() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.parent.popupObj.element, {
              style: 'left:0px;right:0px;top:0px;bottom:0px;'
            });
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([document.body, this.parent.popupObj.element], popupFullScreen);
            this.parent.popupObj.element.style.maxHeight = '100%';
            this.parent.popupObj.element.style.width = '100%';
          }
        }, {
          key: "targetElement",
          value: function targetElement() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.clearIconElement)) {
              this.parent.targetInputElement = this.filterInput;
              this.clearIconElement.style.visibility = this.parent.targetInputElement.value === '' ? 'hidden' : 'visible';
            }

            return this.parent.targetInputElement.value;
          }
        }, {
          key: "onBlur",
          value: function onBlur(e) {
            if (!this.parent.element.classList.contains('e-listbox')) {
              var target;

              if (this.parent.keyAction) {
                return;
              }

              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE) {
                target = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) && e.target;
              }

              if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE) {
                target = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) && e.relatedTarget;
              }

              if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && this.parent.popupObj.element.contains(target) && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE && this.filterInput) {
                this.filterInput.focus();
                return;
              }

              if (this.parent.scrollFocusStatus && this.filterInput) {
                e.preventDefault();
                this.filterInput.focus();
                this.parent.scrollFocusStatus = false;
                return;
              }

              if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains('e-popup-close')) {
                this.parent.inputFocus = false;
                this.parent.updateValueState(e, this.parent.value, this.parent.tempValues);
                this.parent.dispatchEvent(this.parent.hiddenElement, 'change');
              }

              if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains('e-popup-close')) {
                this.parent.inputFocus = false;
                this.parent.overAllWrapper.classList.remove(FOCUS$1);
                this.parent.trigger('blur');
                this.parent.focused = true;
              }

              if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains('e-popup-close') && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                this.parent.hidePopup();
              }
            }
          }
        }, {
          key: "onDocumentClick",
          value: function onDocumentClick(e) {
            if (this.parent.getLocaleName() !== 'listbox') {
              var target = e.target;

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.parent.popupObj) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '#' + this.parent.popupObj.element.id)) {
                if (!(this.filterInput && this.filterInput.value !== '')) {
                  e.preventDefault();
                }
              }

              if (!(!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.parent.popupObj) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '#' + this.parent.popupObj.element.id)) && !this.parent.overAllWrapper.contains(e.target)) {
                if (this.parent.overAllWrapper.classList.contains(dropDownBaseClasses.focus) || this.parent.isPopupOpen()) {
                  this.parent.inputFocus = false;
                  this.parent.scrollFocusStatus = false;
                  this.parent.hidePopup();
                  this.parent.onBlur(e, true);
                  this.parent.focused = true;
                }
              } else {
                this.parent.scrollFocusStatus = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'edge') && document.activeElement === this.filterInput;
              }

              if (!this.parent.overAllWrapper.contains(e.target) && this.parent.overAllWrapper.classList.contains('e-input-focus') && !this.parent.isPopupOpen()) {
                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE) {
                  this.parent.onBlur();
                } else {
                  this.parent.onBlur(e);
                }
              }

              if (this.filterInput === target) {
                this.filterInput.focus();
              }
            }
          }
        }, {
          key: "getFocus",
          value: function getFocus(e) {
            this.parent.overAllWrapper.classList.remove(FOCUS$1);

            if (this.parent.keyAction && e.value !== 'clear') {
              this.parent.keyAction = false;
              return;
            }

            if (e.value === 'focus') {
              this.filterInput.focus();
              this.parent.removeFocus();

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.parent.list, 'keydown', this.parent.onKeyDown);
            }

            if (e.value === 'clear') {
              this.filterInput.value = '';
              this.clearIconElement.style.visibility = 'hidden';
            }
          }
        }, {
          key: "checkSelectAll",
          value: function checkSelectAll(e) {
            if (e.value === 'check' && this.checkAllParent.getAttribute('aria-checked') !== 'true') {
              this.changeState(this.checkAllParent, e.value, null, null, false);
              this.setLocale(true);
            }

            if (e.value === 'uncheck') {
              this.changeState(this.checkAllParent, e.value, null, null, false);
              this.setLocale();
            }

            if (e.value === 'indeterminate') {
              this.changeState(this.checkAllParent, e.value, null, null, false);
              this.setLocale();
            }
          }
        }, {
          key: "setLocale",
          value: function setLocale(unSelect) {
            if (this.parent.selectAllText !== 'Select All' || this.parent.unSelectAllText !== 'Unselect All') {
              var template = unSelect ? this.parent.unSelectAllText : this.parent.selectAllText;
              var compiledString;
              this.selectAllSpan.textContent = '';
              compiledString = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(template);

              var _iterator80 = _createForOfIteratorHelper(compiledString({}, null, null, null, !this.parent.isStringTemplate)),
                  _step80;

              try {
                for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {
                  var item = _step80.value;
                  this.selectAllSpan.textContent = item.textContent;
                }
              } catch (err) {
                _iterator80.e(err);
              } finally {
                _iterator80.f();
              }
            } else {
              var l10nLocale = {
                selectAllText: 'Select All',
                unSelectAllText: 'Unselect All'
              };
              var l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"](this.parent.getLocaleName(), {}, this.parent.locale);

              if (l10n.getConstant('selectAllText') === '') {
                l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('dropdowns', l10nLocale, this.parent.locale);
              }

              this.selectAllSpan.textContent = unSelect ? l10n.getConstant('unSelectAllText') : l10n.getConstant('selectAllText');
            }
          }
        }, {
          key: "getActiveList",
          value: function getActiveList(args) {
            if (args.li.classList.contains('e-active')) {
              this.activeLi.push(args.li.cloneNode(true));
            } else {
              this.activeLi.splice(args.index, 1);
            }
          }
        }, {
          key: "setReorder",
          value: function setReorder(args) {
            if (this.parent.enableSelectionOrder && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.parent.value)) {
              var activeLiCount = this.parent.ulElement.querySelectorAll('li.e-active').length;
              var remLi;
              var ulEle = this.parent.createElement('ul', {
                className: 'e-list-parent e-ul e-reorder'
              });
              var removeEle = this.parent.createElement('div');

              if (activeLiCount > 0) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(this.parent.ulElement.querySelectorAll('li.e-active'), ulEle);
                remLi = this.parent.ulElement.querySelectorAll('li.e-active');
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(remLi, 'e-reorder-hide');
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([ulEle], this.parent.list);
              }

              this.parent.focusAtFirstListItem();
            }
          }
        }]);

        return CheckBoxSelection;
      }();
      /**
       * export all modules from current location
       */


      var __decorate$6 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var ListBox_1; /// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>

      var ITEMTEMPLATE_PROPERTY$1 = 'ItemTemplate';
      /**
       * Defines the Selection settings of List Box.
       */

      var SelectionSettings = /*#__PURE__*/function (_syncfusion_ej2_base_38) {
        _inherits2(SelectionSettings, _syncfusion_ej2_base_38);

        var _super60 = _createSuper(SelectionSettings);

        function SelectionSettings() {
          _classCallCheck2(this, SelectionSettings);

          return _super60.apply(this, arguments);
        }

        return SelectionSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Multiple')], SelectionSettings.prototype, "mode", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], SelectionSettings.prototype, "showCheckbox", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], SelectionSettings.prototype, "showSelectAll", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], SelectionSettings.prototype, "checkboxPosition", void 0);
      /**
       * Defines the toolbar settings of List Box.
       */


      var ToolbarSettings = /*#__PURE__*/function (_syncfusion_ej2_base_39) {
        _inherits2(ToolbarSettings, _syncfusion_ej2_base_39);

        var _super61 = _createSuper(ToolbarSettings);

        function ToolbarSettings() {
          _classCallCheck2(this, ToolbarSettings);

          return _super61.apply(this, arguments);
        }

        return ToolbarSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], ToolbarSettings.prototype, "items", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Right')], ToolbarSettings.prototype, "position", void 0);
      /**
       * The ListBox is a graphical user interface component used to display a list of items.
       * Users can select one or more items in the list using a checkbox or by keyboard selection.
       * It supports sorting, grouping, reordering and drag and drop of items.
       * ```html
       * <select id="listbox">
       *      <option value='1'>Badminton</option>
       *      <option value='2'>Basketball</option>
       *      <option value='3'>Cricket</option>
       *      <option value='4'>Football</option>
       *      <option value='5'>Tennis</option>
       * </select>
       * ```
       * ```typescript
       * <script>
       *   var listObj = new ListBox();
       *   listObj.appendTo("#listbox");
       * </script>
       * ```
       */


      var ListBox = ListBox_1 = /*#__PURE__*/function (_DropDownBase3) {
        _inherits2(ListBox, _DropDownBase3);

        var _super62 = _createSuper(ListBox);

        /**
         * Constructor for creating the ListBox component.
         */
        function ListBox(options, element) {
          var _this182;

          _classCallCheck2(this, ListBox);

          _this182 = _super62.call(this, options, element);
          _this182.isValidKey = false;
          _this182.keyDownStatus = false;
          return _this182;
        }
        /**
         * Adds a new item to the popup list. By default, new item appends to the list as the last item,
         * but you can insert based on the index parameter.
         * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
         * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.
         * @return {void}.
         * @private
         */


        _createClass2(ListBox, [{
          key: "addItem",
          value: function addItem(items, itemIndex) {
            _get2(_getPrototypeOf2(ListBox.prototype), "addItem", this).call(this, items, itemIndex);
          }
        }, {
          key: "render",

          /**
           * Build and render the component
           * @private
           */
          value: function render() {
            this.inputString = '';
            this.initLoad = true;
            this.isCustomFiltering = false;
            this.initialSelectedOptions = this.value;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              this.list = this.element.parentElement;
              this.liCollections = this.list.querySelectorAll('.' + _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].li);
              this.mainList = this.ulElement = this.list.querySelector('ul');
              this.setSelection(this.value);

              if (this.allowFiltering) {
                this.setFiltering();
              }

              this.initToolbarAndStyles();
              this.updateSelectionSettings();
              this.wireEvents();
              this.initDraggable();
              this.initLoad = false;
            } else {
              _get2(_getPrototypeOf2(ListBox.prototype), "render", this).call(this);
            }

            this.renderComplete();
          }
        }, {
          key: "updateBlazorListData",
          value: function updateBlazorListData(data, isDataSource, select$$1) {
            if (isDataSource) {
              this.liCollections = this.list.querySelectorAll('.' + _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].li);
              this.mainList = this.ulElement = this.list.querySelector('ul');

              if (this.allowDragAndDrop && !this.ulElement.classList.contains('e-sortable')) {
                this.initDraggable();
              }

              if (select$$1) {
                this.selectItems(this.listData, false);
              }
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data)) {
              this.sortedData = this.jsonData = this.listData = data;
            }
          }
        }, {
          key: "initWrapper",
          value: function initWrapper() {
            var hiddenSelect = this.createElement('select', {
              className: 'e-hidden-select',
              attrs: {
                'multiple': ''
              }
            });
            this.list.classList.add('e-listbox-wrapper');

            if (this.itemTemplate) {
              this.list.classList.add('e-list-template');
            }

            this.list.classList.add('e-wrapper');

            if (this.element.tagName === 'EJS-LISTBOX') {
              this.element.setAttribute('tabindex', '0');

              if (this.initLoad) {
                this.element.appendChild(this.list);
              }
            } else {
              if (this.initLoad) {
                this.element.parentElement.insertBefore(this.list, this.element);
              }

              this.list.insertBefore(this.element, this.list.firstChild);
              this.element.style.display = 'none';
            }

            this.list.insertBefore(hiddenSelect, this.list.firstChild);

            if (this.list.getElementsByClassName('e-list-item')[0]) {
              this.list.getElementsByClassName('e-list-item')[0].classList.remove(dropDownBaseClasses.focus);
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.list], [dropDownBaseClasses.content, dropDownBaseClasses.root]);
            this.validationAttribute(this.element, hiddenSelect);
            this.list.setAttribute('role', 'listbox');
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.list, {
              'role': 'listbox',
              'aria-multiselectable': this.selectionSettings.mode === 'Multiple' ? 'true' : 'false'
            });
            this.updateSelectionSettings();
          }
        }, {
          key: "updateSelectionSettings",
          value: function updateSelectionSettings() {
            if (this.selectionSettings.showCheckbox && this.selectionSettings.showSelectAll && this.liCollections.length) {
              var l10nSelect = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"](this.getModuleName(), {
                selectAllText: 'Select All',
                unSelectAllText: 'Unselect All'
              }, this.locale);
              this.showSelectAll = true;
              this.selectAllText = l10nSelect.getConstant('selectAllText');
              this.unSelectAllText = l10nSelect.getConstant('unSelectAllText');
              this.popupWrapper = this.list;
              this.checkBoxSelectionModule.checkAllParent = null;
              this.notify('selectAll', {});
            }
          }
        }, {
          key: "initDraggable",
          value: function initDraggable() {
            var _this183 = this;

            if (this.ulElement) {
              this.ulElement.id = this.element.id + '_parent';
            }

            if (this.allowDragAndDrop) {
              new _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["Sortable"](this.ulElement, {
                scope: this.scope,
                itemClass: 'e-list-item',
                dragStart: this.triggerDragStart.bind(this),
                drag: this.triggerDrag.bind(this),
                beforeDrop: this.beforeDragEnd.bind(this),
                drop: this.dragEnd.bind(this),
                placeHolder: function placeHolder() {
                  return _this183.createElement('span', {
                    className: 'e-placeholder'
                  });
                },
                helper: function helper(e) {
                  var wrapper = _this183.list.cloneNode();

                  var ele = e.sender.cloneNode(true);
                  wrapper.appendChild(ele);

                  var refEle = _this183.getItems()[0];

                  wrapper.style.width = refEle.offsetWidth + 'px';
                  wrapper.style.height = refEle.offsetHeight + 'px';

                  if ((_this183.value && _this183.value.length) > 1 && _this183.isSelected(ele)) {
                    ele.appendChild(_this183.createElement('span', {
                      className: 'e-list-badge',
                      innerHTML: _this183.value.length + ''
                    }));
                  }

                  wrapper.style.zIndex = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["getZindexPartial"])(_this183.element) + '';
                  return wrapper;
                }
              });
            }
          }
        }, {
          key: "updateActionCompleteData",
          value: function updateActionCompleteData(li, item) {
            this.jsonData.push(item);
          }
        }, {
          key: "initToolbar",
          value: function initToolbar() {
            var scope;
            var pos = this.toolbarSettings.position;
            var prevScope = this.element.getAttribute('data-value');

            if (this.toolbarSettings.items.length) {
              var toolElem = this.createElement('div', {
                className: 'e-listbox-tool',
                attrs: {
                  'role': 'toolbar'
                }
              });
              var wrapper = this.createElement('div', {
                className: 'e-listboxtool-wrapper e-' + pos.toLowerCase()
              });
              this.list.parentElement.insertBefore(wrapper, this.list);
              wrapper.appendChild(pos === 'Right' ? this.list : toolElem);
              wrapper.appendChild(pos === 'Right' ? toolElem : this.list);
              this.createButtons(toolElem);

              if (!this.element.id) {
                this.element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('e-' + this.getModuleName());
              }

              if (this.scope) {
                document.querySelector(this.scope).setAttribute('data-value', this.element.id);
              } else {
                this.updateToolBarState();
              }
            }

            scope = this.element.getAttribute('data-value');

            if (prevScope && scope && prevScope !== scope) {
              this.tBListBox = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(document.getElementById(prevScope), this.getModuleName());
              this.tBListBox.updateToolBarState();
            } else if (scope) {
              this.tBListBox = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(document.getElementById(scope), this.getModuleName());
              this.tBListBox.updateToolBarState();
            }
          }
        }, {
          key: "createButtons",
          value: function createButtons(toolElem) {
            var _this184 = this;

            var btn;
            var ele;
            var title;
            var l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"](this.getModuleName(), {
              moveUp: 'Move Up',
              moveDown: 'Move Down',
              moveTo: 'Move To',
              moveFrom: 'Move From',
              moveAllTo: 'Move All To',
              moveAllFrom: 'Move All From'
            }, this.locale);
            this.toolbarSettings.items.forEach(function (value) {
              title = l10n.getConstant(value);
              ele = _this184.createElement('button', {
                attrs: {
                  'type': 'button',
                  'data-value': value,
                  'title': title,
                  'aria-label': title
                }
              });
              toolElem.appendChild(ele);
              btn = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__["Button"]({
                iconCss: 'e-icons e-' + value.toLowerCase()
              }, ele);
              btn.createElement = _this184.createElement;
            });
          }
        }, {
          key: "validationAttribute",
          value: function validationAttribute(input, hiddenSelect) {
            _get2(_getPrototypeOf2(ListBox.prototype), "validationAttribute", this).call(this, input, hiddenSelect);

            hiddenSelect.required = input.required;
            input.required = false;
          }
        }, {
          key: "setHeight",
          value: function setHeight() {
            var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
            ele.style.height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height);

            if (this.allowFiltering && this.height.toString().indexOf('%') < 0) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.list], 'e-filter-list');
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.list], 'e-filter-list');
            }
          }
        }, {
          key: "setCssClass",
          value: function setCssClass() {
            var wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;

            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrap], this.cssClass.split(' '));
            }

            if (this.enableRtl) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrap], 'e-rtl');
            }
          }
        }, {
          key: "setEnable",
          value: function setEnable() {
            var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;

            if (this.enabled) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([ele], _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].disabled);
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([ele], _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].disabled);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && this.toolbarSettings.items.length) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.list], _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].disabled);
              }
            }
          }
        }, {
          key: "showSpinner",
          value: function showSpinner() {
            if (!this.spinner) {
              this.spinner = this.createElement('div', {
                className: 'e-listbox-wrapper'
              });
            }

            this.spinner.style.height = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.height);
            this.element.parentElement.insertBefore(this.spinner, this.element.nextSibling);
            Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["createSpinner"])({
              target: this.spinner
            }, this.createElement);
            Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["showSpinner"])(this.spinner);
          }
        }, {
          key: "hideSpinner",
          value: function hideSpinner() {
            if (this.spinner.querySelector('.e-spinner-pane')) {
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__["hideSpinner"])(this.spinner);
            }

            if (this.spinner.parentElement) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.spinner);
            }
          }
        }, {
          key: "onInput",
          value: function onInput() {
            if (this.keyDownStatus) {
              this.isValidKey = true;
            } else {
              this.isValidKey = false;
            }

            this.keyDownStatus = false;
            this.refreshClearIcon();
          }
        }, {
          key: "clearText",
          value: function clearText() {
            this.filterInput.value = '';
            this.refreshClearIcon();
            var event = document.createEvent('KeyboardEvent');
            this.isValidKey = true;
            this.KeyUp(event);
          }
        }, {
          key: "refreshClearIcon",
          value: function refreshClearIcon() {
            if (this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon)) {
              var clearElement = this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon);
              clearElement.style.visibility = this.filterInput.value === '' ? 'hidden' : 'visible';
            }
          }
        }, {
          key: "onActionComplete",
          value: function onActionComplete(ulElement, list, e) {
            var searchEle;

            if (this.allowFiltering && this.list.getElementsByClassName('e-filter-parent')[0]) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                searchEle = this.list.getElementsByClassName('e-filter-parent')[0];
              } else {
                searchEle = this.list.getElementsByClassName('e-filter-parent')[0].cloneNode(true);
              }
            }

            _get2(_getPrototypeOf2(ListBox.prototype), "onActionComplete", this).call(this, ulElement, list, e);

            if (this.allowFiltering && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(searchEle)) {
              this.list.insertBefore(searchEle, this.list.firstElementChild);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered) {
                this.filterParent = this.list.getElementsByClassName('e-filter-parent')[0];
                this.filterWireEvents(searchEle);
              }
            }

            this.initWrapper();
            this.setSelection();
            this.initDraggable();
            this.mainList = this.ulElement;

            if (this.initLoad) {
              this.jsonData = [];
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(this.jsonData, list, []);
              this.initToolbarAndStyles();
              this.wireEvents();

              if (this.showCheckbox) {
                this.setCheckboxPosition();
              }

              if (this.allowFiltering) {
                this.setFiltering();
              }
            } else {
              if (this.allowFiltering) {
                var filterElem = this.list.getElementsByClassName('e-input-filter')[0];
                var txtLength = this.filterInput.value.length;
                filterElem.selectionStart = txtLength;
                filterElem.selectionEnd = txtLength;
                filterElem.focus();
              }
            }

            this.initLoad = false;
          }
        }, {
          key: "initToolbarAndStyles",
          value: function initToolbarAndStyles() {
            this.initToolbar();
            this.setCssClass();
            this.setEnable();
            this.setHeight();
          }
        }, {
          key: "triggerDragStart",
          value: function triggerDragStart(args) {
            var _this185 = this;

            var badge;
            args = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(this.getDragArgs(args), {
              dragSelected: true
            });

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIos) {
              this.list.style.overflow = 'hidden';
            }

            this.trigger('dragStart', args, function (dragEventArgs) {
              _this185.allowDragAll = dragEventArgs.dragSelected;

              if (!_this185.allowDragAll) {
                badge = _this185.ulElement.getElementsByClassName('e-list-badge')[0];

                if (badge) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(badge);
                }
              }

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                args.bindEvents(args.dragElement);
              }
            });
          }
        }, {
          key: "triggerDrag",
          value: function triggerDrag(args) {
            this.trigger('drag', this.getDragArgs(args));
            var listObj = this.getComponent(args.target);

            if (listObj && listObj.listData.length === 0) {
              var noRecElem = listObj.ulElement.getElementsByClassName('e-list-nrt')[0];

              if (noRecElem) {
                listObj.ulElement.removeChild(noRecElem);
              }
            }
          }
        }, {
          key: "beforeDragEnd",
          value: function beforeDragEnd(args) {
            var dragValue = args.droppedElement.getAttribute('data-value');

            if (this.value.indexOf(dragValue) > -1) {
              args.items = this.getDataByValues(this.value);
            } else {
              args.items = this.getDataByValues([dragValue]);
            }

            this.trigger('beforeDrop', args);
          } // tslint:disable-next-line:max-func-body-length

        }, {
          key: "dragEnd",
          value: function dragEnd(args) {
            var _this186 = this;

            var listData;
            var liColl;
            var jsonData;
            var droppedData;
            var selectedOptions;
            var sortedData;
            var dropValue = this.getFormattedValue(args.droppedElement.getAttribute('data-value'));
            var listObj = this.getComponent(args.droppedElement);
            var getArgs = this.getDragArgs({
              target: args.droppedElement
            }, true);
            var sourceArgs = {
              previousData: this.dataSource
            };
            var destArgs = {
              previousData: listObj.dataSource
            };
            var dragArgs = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, getArgs, {
              target: args.target,
              source: {
                previousData: this.dataSource
              }
            });

            if (listObj !== this) {
              var sourceArgs1 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(sourceArgs, {
                currentData: this.listData
              });
              dragArgs = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(dragArgs, {
                source: sourceArgs1,
                destination: destArgs
              });
            }

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIos) {
              this.list.style.overflow = '';
            }

            if (listObj === this) {
              var ul = this.ulElement;
              listData = [].slice.call(this.listData);
              liColl = [].slice.call(this.liCollections);
              jsonData = [].slice.call(this.jsonData);
              sortedData = [].slice.call(this.sortedData);
              var toSortIdx = args.currentIndex;
              var toIdx = args.currentIndex = this.getCurIdx(this, args.currentIndex);
              var rIdx = listData.indexOf(this.getDataByValue(dropValue));
              var jsonIdx = jsonData.indexOf(this.getDataByValue(dropValue));
              var sIdx = sortedData.indexOf(this.getDataByValue(dropValue));
              listData.splice(toIdx, 0, listData.splice(rIdx, 1)[0]);
              sortedData.splice(toSortIdx, 0, sortedData.splice(sIdx, 1)[0]);
              jsonData.splice(toIdx, 0, jsonData.splice(jsonIdx, 1)[0]);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                liColl.splice(toIdx, 0, liColl.splice(rIdx, 1)[0]);
              }

              if (this.allowDragAll) {
                selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 ? this.value : [dropValue];
                selectedOptions.forEach(function (value) {
                  if (value !== dropValue) {
                    var idx = listData.indexOf(_this186.getDataByValue(value));

                    var _jsonIdx = jsonData.indexOf(_this186.getDataByValue(value));

                    var _sIdx = sortedData.indexOf(_this186.getDataByValue(value));

                    if (idx > toIdx) {
                      toIdx++;
                    }

                    jsonData.splice(toIdx, 0, jsonData.splice(_jsonIdx, 1)[0]);
                    listData.splice(toIdx, 0, listData.splice(idx, 1)[0]);
                    sortedData.splice(toSortIdx, 0, sortedData.splice(_sIdx, 1)[0]);

                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                      liColl.splice(toIdx, 0, liColl.splice(idx, 1)[0]);
                      ul.insertBefore(_this186.getItems()[_this186.getIndexByValue(value)], ul.getElementsByClassName('e-placeholder')[0]);
                    }
                  } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                    var lists = [].slice.call(_this186.ulElement.getElementsByClassName(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].li));

                    var refChild = _this186.ulElement.removeChild(lists[args.currentIndex]);

                    lists.splice(args.currentIndex, 1);

                    _this186.ulElement.insertBefore(refChild, lists[args.previousIndex]);
                  }
                });
              }

              this.listData = listData;
              this.jsonData = jsonData;
              this.sortedData = sortedData;
              this.liCollections = liColl;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                var value = this.value; // tslint:disable-next-line:no-any

                this.interopAdaptor.invokeMethodAsync('UpdateListData', this.listData).then(function () {
                  _this186.updateBlazorListData(null, true);

                  _this186.selectItems(_this186.listData, false);

                  _this186.selectItems(value);
                });
              }
            } else {
              var li;
              var fLiColl = [].slice.call(this.liCollections);
              var currIdx = args.currentIndex = this.getCurIdx(listObj, args.currentIndex);
              var _ul3 = listObj.ulElement;
              listData = [].slice.call(listObj.listData);
              liColl = [].slice.call(listObj.liCollections);
              jsonData = [].slice.call(listObj.jsonData);
              sortedData = [].slice.call(listObj.sortedData);
              selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 && this.allowDragAll ? this.value : [dropValue];
              var fListData = [].slice.call(this.listData);
              var fSortData = [].slice.call(this.sortedData);
              selectedOptions.forEach(function (value, index) {
                droppedData = _this186.getDataByValue(value);

                var srcIdx = _this186.listData.indexOf(droppedData);

                var jsonSrcIdx = _this186.jsonData.indexOf(droppedData);

                var sortIdx = _this186.sortedData.indexOf(droppedData);

                fListData.splice(srcIdx, 1);

                _this186.jsonData.splice(jsonSrcIdx, 1);

                fSortData.splice(sortIdx, 1);
                _this186.listData = fListData;
                _this186.sortedData = fSortData;
                var destIdx = value === dropValue ? args.currentIndex : currIdx;
                listData.splice(destIdx, 0, droppedData);
                jsonData.splice(destIdx, 0, droppedData);
                sortedData.splice(destIdx, 0, droppedData);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                  liColl.splice(destIdx, 0, fLiColl.splice(srcIdx, 1)[0]);
                }

                if (!value) {
                  var liCollElem = _this186.getItems();

                  for (var i = 0; i < liCollElem.length; i++) {
                    if (liCollElem[i].getAttribute('data-value') === null && liCollElem[i].classList.contains('e-list-item')) {
                      li = liCollElem[i];
                      break;
                    }
                  }
                } else {
                  li = _this186.getItems()[_this186.getIndexByValue(value)];
                }

                if (!li) {
                  li = args.helper;
                }

                _this186.removeSelected(_this186, value === dropValue ? [args.droppedElement] : [li]);

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                  if (index === 0) {
                    _this186.ulElement.insertBefore(_ul3.getElementsByClassName(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].li)[args.currentIndex], _this186.ulElement.getElementsByClassName(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].li)[args.previousIndex]);
                  }
                } else {
                  _ul3.insertBefore(li, _ul3.getElementsByClassName('e-placeholder')[0]);
                }

                currIdx++;
              });

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                // tslint:disable
                this.interopAdaptor.invokeMethodAsync('UpdateListData', this.listData).then(function () {
                  _this186.updateSelectedOptions();

                  if (_this186.fields.groupBy) {
                    _this186.setSelection();
                  }

                  _this186.updateBlazorListData(null, true, _this186.value == null || !_this186.value.length);
                });
                listObj.interopAdaptor.invokeMethodAsync('UpdateListData', listData).then(function () {
                  if (listObj.sortOrder !== 'None' || _this186.selectionSettings.showCheckbox !== listObj.selectionSettings.showCheckbox || listObj.fields.groupBy) {
                    listObj.setSelection();
                  }

                  listObj.updateBlazorListData(null, true, listObj.value == null || !listObj.value.length);
                }); // tslint:enable
              } else {
                if (this.fields.groupBy) {
                  this.ulElement.innerHTML = this.renderItems(this.listData, this.fields).innerHTML;
                  this.setSelection();
                }

                if (listObj.sortOrder !== 'None' || this.selectionSettings.showCheckbox !== listObj.selectionSettings.showCheckbox || listObj.fields.groupBy) {
                  var sortabale = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(_ul3, 'sortable');
                  _ul3.innerHTML = listObj.renderItems(listData, listObj.fields).innerHTML;

                  if (sortabale.placeHolderElement) {
                    _ul3.appendChild(sortabale.placeHolderElement);
                  }

                  _ul3.appendChild(args.helper);

                  listObj.setSelection();
                }

                this.liCollections = fLiColl;
                listObj.liCollections = liColl;
              }

              listObj.jsonData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])([], [], jsonData, false);
              listObj.listData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])([], [], listData, false);
              listObj.sortedData = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])([], [], sortedData, false);

              if (this.listData.length === 0) {
                this.l10nUpdate();
              }
            }

            if (this === listObj) {
              var _sourceArgs = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(sourceArgs, {
                currentData: listData
              });

              dragArgs = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(dragArgs, {
                source: _sourceArgs
              });
            } else {
              var dragArgs1 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(destArgs, {
                currentData: listData
              });
              dragArgs = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(dragArgs, {
                destination: dragArgs1
              });
            }

            this.trigger('drop', dragArgs);
          }
        }, {
          key: "removeSelected",
          value: function removeSelected(listObj, elems) {
            if (listObj.selectionSettings.showCheckbox) {
              elems.forEach(function (ele) {
                ele.getElementsByClassName('e-frame')[0].classList.remove('e-check');
              });
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(elems, _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected);
            }
          }
        }, {
          key: "getCurIdx",
          value: function getCurIdx(listObj, idx) {
            if (listObj.fields.groupBy) {
              idx -= [].slice.call(listObj.ulElement.children).slice(0, idx).filter(function (ele) {
                return ele.classList.contains(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].group);
              }).length;
            }

            return idx;
          }
        }, {
          key: "getComponent",
          value: function getComponent(li) {
            var listObj;
            var ele = this.element.tagName === 'EJS-LISTBOX' ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(li, '.e-listbox') : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(li, '.e-listbox-wrapper') && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(li, '.e-listbox-wrapper').querySelector('.e-listbox');

            if (ele) {
              listObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(ele, this.getModuleName());
            }

            return listObj;
          }
        }, {
          key: "listOption",
          value: function listOption(dataSource, fields) {
            this.listCurrentOptions = _get2(_getPrototypeOf2(ListBox.prototype), "listOption", this).call(this, dataSource, fields);
            this.listCurrentOptions = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, this.listCurrentOptions, {
              itemCreated: this.triggerBeforeItemRender.bind(this)
            }, true);
            this.notify('listoption', {
              module: 'CheckBoxSelection'
            });
            return this.listCurrentOptions;
          }
        }, {
          key: "triggerBeforeItemRender",
          value: function triggerBeforeItemRender(e) {
            e.item.setAttribute('tabindex', '-1');
            this.trigger('beforeItemRender', {
              element: e.item,
              item: e.curData
            });
          }
        }, {
          key: "requiredModules",
          value: function requiredModules() {
            var modules = [];

            if (this.selectionSettings.showCheckbox) {
              modules.push({
                member: 'CheckBoxSelection',
                args: [this]
              });
            }

            return modules;
          }
          /**
           * This method is used to enable or disable the items in the ListBox based on the items and enable argument.
           * @param items Text items that needs to be enabled/disabled.
           * @param enable Set `true`/`false` to enable/disable the list items.
           * @param isValue - Set `true` if `items` parameter is a array of unique values.
           * @returns void
           */

        }, {
          key: "enableItems",
          value: function enableItems(items) {
            var _this187 = this;

            var enable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var isValue = arguments.length > 2 ? arguments[2] : undefined;
            var li;
            items.forEach(function (item) {
              var text;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && typeof item === 'object') {
                text = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(isValue ? _this187.fields.value : _this187.fields.text, item);

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(text)) {
                  return;
                }
              } else {
                text = item;
              }

              li = _this187.findListElement(_this187.list, 'li', 'data-value', isValue ? text : _this187.getValueByText(text));

              if (!li) {
                return;
              }

              if (enable) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([li], _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].disabled);
                li.removeAttribute('aria-disabled');
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([li], _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].disabled);
                li.setAttribute('aria-disabled', 'true');
              }
            });
          }
          /**
           * Based on the state parameter, specified list item will be selected/deselected.
           * @param items Array of text value of the item.
           * @param state Set `true`/`false` to select/un select the list items.
           * @param isValue - Set `true` if `items` parameter is a array of unique values.
           * @returns void
           */

        }, {
          key: "selectItems",
          value: function selectItems(items) {
            var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var isValue = arguments.length > 2 ? arguments[2] : undefined;
            this.setSelection(items, state, !isValue);
            this.updateSelectedOptions();
          }
          /**
           * Based on the state parameter, entire list item will be selected/deselected.
           * @param state Set `true`/`false` to select/un select the entire list items.
           * @returns void
           */

        }, {
          key: "selectAll",
          value: function selectAll() {
            var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            this.selectAllItems(state);
          }
          /**
           * Adds a new item to the list. By default, new item appends to the list as the last item,
           * but you can insert based on the index parameter.
           * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
           * @param { number } itemIndex - Specifies the index to place the newly added item in the list.
           * @returns {void}.
           */

        }, {
          key: "addItems",
          value: function addItems(items, itemIndex) {
            _get2(_getPrototypeOf2(ListBox.prototype), "addItem", this).call(this, items, itemIndex);
          }
          /**
           * Removes a item from the list. By default, removed the last item in the list,
           * but you can remove based on the index parameter.
           * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
           * @param { number } itemIndex - Specifies the index to remove the item from the list.
           * @returns {void}.
           */

        }, {
          key: "removeItems",
          value: function removeItems(items, itemIndex) {
            this.removeItem(items, itemIndex);
          }
          /**
           * Removes a item from the list. By default, removed the last item in the list,
           * but you can remove based on the index parameter.
           * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
           * @param { number } itemIndex - Specifies the index to remove the item from the list.
           * @returns {void}.
           */

        }, {
          key: "removeItem",
          value: function removeItem(items, itemIndex) {
            var liCollections = [];
            var liElement = this.list.querySelectorAll('.' + dropDownBaseClasses.li);

            if (items) {
              items = items instanceof Array ? items : [items];
              var fields = this.fields;
              var dataValue;
              var objValue;
              var dupData = [];
              var itemIdx;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(dupData, [], this.listData);
              var removeIdxes = [];
              var removeLiIdxes = [];

              for (var j = 0; j < items.length; j++) {
                if (items[j] instanceof Object) {
                  dataValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.value, items[j]);
                } else {
                  dataValue = items[j].toString();
                }

                for (var i = 0, len = dupData.length; i < len; i++) {
                  if (dupData[i] instanceof Object) {
                    objValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(fields.value, dupData[i]);
                  } else {
                    objValue = dupData[i].toString();
                  }

                  if (objValue === dataValue) {
                    itemIdx = this.getIndexByValue(dataValue);
                    liCollections.push(liElement[itemIdx]);
                    removeIdxes.push(i);
                    removeLiIdxes.push(itemIdx);
                  }
                }
              }

              for (var k = removeIdxes.length - 1; k > 0; k--) {
                this.listData.splice(removeIdxes[k], 1);
              }

              for (var _k3 = removeLiIdxes.length - 1; _k3 > 0; _k3--) {
                this.liCollections.splice(removeLiIdxes[_k3], 1);
              }
            } else {
              itemIndex = itemIndex ? itemIndex : 0;
              liCollections.push(liElement[itemIndex]);
              this.listData.splice(itemIndex, 1);
              this.updateLiCollection(itemIndex);
            }

            for (var _i91 = 0; _i91 < liCollections.length; _i91++) {
              this.ulElement.removeChild(liCollections[_i91]);
            }

            if (this.listData.length === 0) {
              this.l10nUpdate();
            }
          }
          /**
           * Gets the array of data Object that matches the given array of values.
           * @param  { string[] | number[] | boolean[] } value - Specifies the array value of the list item.
           * @returns object[].
           */

        }, {
          key: "getDataByValues",
          value: function getDataByValues(value) {
            var data = [];

            for (var i = 0; i < value.length; i++) {
              data.push(this.getDataByValue(value[i]));
            }

            return data;
          }
          /**
           * Moves the given value(s) / selected value(s) upwards.
           * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).
           * @returns {void}
           */

        }, {
          key: "moveUp",
          value: function moveUp(value) {
            var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
            this.moveUpDown(true, false, elem);
          }
          /**
           * Moves the given value(s) / selected value(s) downwards.
           * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).
           * @returns {void}
           */

        }, {
          key: "moveDown",
          value: function moveDown(value) {
            var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
            this.moveUpDown(false, false, elem);
          }
          /**
           * Moves the given value(s) / selected value(s) to the given / default scoped ListBox.
           * @param  { string[] | number[] | boolean[] } value - Specifies the value or array value of the list item.
           * @returns {void}
           */

        }, {
          key: "moveTo",
          value: function moveTo(value, index, targetId) {
            var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
            var tlistbox = targetId ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(targetId, ListBox_1) : this.getScopedListBox();
            this.moveData(this, tlistbox, false, elem, index);
          }
          /**
           * Moves all the values from one ListBox to the scoped ListBox.
           * @param  { string } targetId - Specifies the scoped ListBox ID.
           * @param  { string } index - Specifies the index to where the items moved.
           * @returns {void}
           */

        }, {
          key: "moveAllTo",
          value: function moveAllTo(targetId, index) {
            var tlistbox = targetId ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(targetId, ListBox_1) : this.getScopedListBox();
            this.moveAllData(this, tlistbox, false, index);
          }
          /**
           * Returns the updated dataSource in ListBox
           * @returns {{ [key: string]: Object }[] | string[] | boolean[] | number[]}
           */

        }, {
          key: "getDataList",
          value: function getDataList() {
            return this.jsonData;
          }
          /**
           * Returns the sorted Data in ListBox
           * @returns {{ [key: string]: Object }[] | string[] | boolean[] | number[]}
           */

        }, {
          key: "getSortedList",
          value: function getSortedList() {
            var sortData;
            var tempData;
            sortData = tempData = this.sortedData;

            if (this.fields.groupBy) {
              sortData = [];

              for (var i = 0; i < tempData.length; i++) {
                if (tempData[i].isHeader) {
                  continue;
                }

                sortData.push(tempData[i]);
              }
            }

            return sortData;
          }
        }, {
          key: "getElemByValue",
          value: function getElemByValue(value) {
            var elem = [];

            for (var i = 0; i < value.length; i++) {
              elem.push(this.ulElement.querySelector('[data-value ="' + value[i] + '"]'));
            }

            return elem;
          }
        }, {
          key: "updateLiCollection",
          value: function updateLiCollection(index) {
            var tempLi = [].slice.call(this.liCollections);
            tempLi.splice(index, 1);
            this.liCollections = tempLi;
          }
        }, {
          key: "selectAllItems",
          value: function selectAllItems(state, event) {
            var _this188 = this;

            [].slice.call(this.getItems()).forEach(function (li) {
              if (!li.classList.contains(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].disabled)) {
                if (_this188.selectionSettings.showCheckbox) {
                  var ele = li.getElementsByClassName('e-check')[0];

                  if (!ele && state || ele && !state) {
                    _this188.notify('updatelist', {
                      li: li,
                      module: 'listbox'
                    });

                    if (_this188.maximumSelectionLength >= _this188.list.querySelectorAll('.e-list-item span.e-check').length) {
                      _this188.checkMaxSelection();
                    }
                  }
                } else {
                  if (state) {
                    li.classList.add(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected);
                  } else {
                    li.classList.remove(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected);
                  }
                }
              }
            });
            this.updateSelectedOptions();

            if (this.allowFiltering && this.selectionSettings.showCheckbox) {
              var liEle = this.list.getElementsByTagName('li');
              var index = 0;

              if (state) {
                var _loop15 = function _loop15() {
                  var dataValue1 = _this188.getFormattedValue(liEle[index].getAttribute('data-value'));

                  if (!_this188.value.some(function (e) {
                    return e === dataValue1;
                  })) {
                    _this188.value.push(_this188.getFormattedValue(liEle[index].getAttribute('data-value')));
                  }
                };

                for (index = 0; index < liEle.length; index++) {
                  _loop15();
                }
              } else {
                var _loop16 = function _loop16() {
                  var dataValue2 = _this188.getFormattedValue(liEle[index].getAttribute('data-value'));

                  _this188.value = _this188.value.filter(function (e) {
                    return e !== dataValue2;
                  });
                };

                for (index = 0; index < liEle.length; index++) {
                  _loop16();
                }
              }

              if (document.querySelectorAll('ul').length < 2) {
                this.updateMainList();
              }
            }

            this.triggerChange(this.getSelectedItems(), event);
          }
        }, {
          key: "updateMainList",
          value: function updateMainList() {
            var mainList = this.mainList.querySelectorAll('.e-list-item');
            var ulList = this.ulElement.querySelectorAll('.e-list-item');
            var mainCount = mainList.length;
            var ulEleCount = ulList.length;

            if (this.selectionSettings.showCheckbox || document.querySelectorAll('ul').length > 1 || mainCount !== ulEleCount) {
              var listindex = 0;
              var valueindex = 0;
              var count = 0;

              for (listindex; listindex < mainCount;) {
                if (this.value) {
                  for (valueindex; valueindex < this.value.length; valueindex++) {
                    if (mainList[listindex].getAttribute('data-value') === this.value[valueindex]) {
                      count++;
                    }
                  }
                }

                if (!count && this.selectionSettings.showCheckbox) {
                  mainList[listindex].getElementsByClassName('e-frame')[0].classList.remove('e-check');
                }

                if (document.querySelectorAll('ul').length > 1 && count && mainCount !== ulEleCount) {
                  this.mainList.removeChild(this.mainList.getElementsByTagName('li')[listindex]);
                  listindex = 0;
                } else {
                  listindex++;
                }

                count = 0;
                valueindex = 0;
              }
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            var form = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');
            var wrapper = this.element.tagName === 'EJS-LISTBOX' ? this.element : this.list;

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.list, 'click', this.clickHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(wrapper, 'keydown', this.keyDownHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(wrapper, 'focusout', this.focusOutHandler, this);

            this.wireToolbarEvent();

            if (this.selectionSettings.showCheckbox) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousedown', this.checkBoxSelectionModule.onDocumentClick);
            }

            if (this.fields.groupBy || this.element.querySelector('select>optgroup')) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.list, 'scroll', this.setFloatingHeader);
            }

            if (form) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(form, 'reset', this.formResetHandler, this);
            }
          }
        }, {
          key: "wireToolbarEvent",
          value: function wireToolbarEvent() {
            if (this.toolbarSettings.items.length) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.getToolElem(), 'click', this.toolbarClickHandler, this);
            }
          }
        }, {
          key: "unwireEvents",
          value: function unwireEvents() {
            var form = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');
            var wrapper = this.element.tagName === 'EJS-LISTBOX' ? this.element : this.list;

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.list, 'click', this.clickHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(wrapper, 'keydown', this.keyDownHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(wrapper, 'focusout', this.focusOutHandler);

            if (this.allowFiltering && this.clearFilterIconElem) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.clearFilterIconElem, 'click', this.clearText);
            }

            if (this.toolbarSettings.items.length) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.getToolElem(), 'click', this.toolbarClickHandler);
            }

            if (form) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(form, 'reset', this.formResetHandler);
            }
          }
        }, {
          key: "clickHandler",
          value: function clickHandler(e) {
            this.selectHandler(e);
          }
        }, {
          key: "checkSelectAll",
          value: function checkSelectAll() {
            var searchCount = 0;
            var liItems = this.list.querySelectorAll('li.' + dropDownBaseClasses.li);

            for (var i = 0; i < liItems.length; i++) {
              if (!liItems[i].classList.contains('e-disabled')) {
                searchCount++;
              }
            }

            var len = this.getSelectedItems().length;

            if (this.showSelectAll && searchCount) {
              this.notify('checkSelectAll', {
                module: 'CheckBoxSelection',
                value: searchCount === len ? 'check' : len === 0 ? 'uncheck' : 'indeterminate'
              });
            }
          }
        }, {
          key: "getQuery",
          value: function getQuery(query) {
            var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();

            if (this.allowFiltering) {
              var filterType = this.inputString === '' ? 'contains' : this.filterType;
              var dataType = this.typeOfData(this.dataSource)["typeof"];

              if (!(this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["DataManager"]) && dataType === 'string' || dataType === 'number') {
                filterQuery.where('', filterType, this.inputString, this.ignoreCase, this.ignoreAccent);
              } else {
                var fields = this.fields.text ? this.fields.text : '';
                filterQuery.where(fields, filterType, this.inputString, this.ignoreCase, this.ignoreAccent);
              }
            } else {
              filterQuery = query ? query : this.query ? this.query : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"]();
            }

            return filterQuery;
          }
        }, {
          key: "setFiltering",
          value: function setFiltering() {
            var filterInputObj;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.filterParent)) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                this.filterParent = this.list.querySelector('.e-filter-parent');
                this.filterInput = this.list.querySelector('.e-input-filter');
              } else {
                this.filterParent = this.createElement('span', {
                  className: listBoxClasses.filterParent
                });
                this.filterInput = this.createElement('input', {
                  attrs: {
                    type: 'text'
                  },
                  className: listBoxClasses.filterInput
                });
                this.element.parentNode.insertBefore(this.filterInput, this.element);

                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {}

                filterInputObj = _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].createInput({
                  element: this.filterInput,
                  buttons: [listBoxClasses.filterBarClearIcon],
                  properties: {
                    placeholder: this.filterBarPlaceholder
                  }
                }, this.createElement);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])([filterInputObj.container], this.filterParent);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["prepend"])([this.filterParent], this.list);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.filterInput, {
                  'aria-disabled': 'false',
                  'aria-owns': this.element.id + '_options',
                  'role': 'listbox',
                  'aria-activedescendant': null,
                  'autocomplete': 'off',
                  'autocorrect': 'off',
                  'autocapitalize': 'off',
                  'spellcheck': 'false'
                });
              }

              if (this.height.toString().indexOf('%') < 0) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.list], 'e-filter-list');
              }

              this.inputString = this.filterInput.value;
              this.filterWireEvents();
              return filterInputObj;
            }
          }
        }, {
          key: "filterWireEvents",
          value: function filterWireEvents(filterElem) {
            if (filterElem) {
              this.filterInput = filterElem.querySelector('.e-input-filter');
            }

            this.clearFilterIconElem = this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon);

            if (this.clearFilterIconElem) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.clearFilterIconElem, 'click', this.clearText, this);

              if (!filterElem) {
                this.clearFilterIconElem.style.visibility = 'hidden';
              }
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.filterInput, 'input', this.onInput, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.filterInput, 'keyup', this.KeyUp, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.filterInput, 'keydown', this.onKeyDown, this);
          }
        }, {
          key: "selectHandler",
          value: function selectHandler(e, isKey) {
            var isSelect = true;
            var currSelIdx;
            var li = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + 'e-list-item');
            var selectedLi = [li];

            if (li) {
              currSelIdx = [].slice.call(li.parentElement.children).indexOf(li);

              if (!this.selectionSettings.showCheckbox) {
                if ((e.ctrlKey || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) && this.isSelected(li)) {
                  li.classList.remove(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected);
                  li.removeAttribute('aria-selected');
                  isSelect = false;
                } else if (!(this.selectionSettings.mode === 'Multiple' && (e.ctrlKey || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice))) {
                  this.getSelectedItems().forEach(function (ele) {
                    ele.removeAttribute('aria-selected');
                  });
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(this.getSelectedItems(), _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected);
                }
              } else {
                isSelect = !li.getElementsByClassName('e-frame')[0].classList.contains('e-check');
              }

              if (e.shiftKey && !this.selectionSettings.showCheckbox && this.selectionSettings.mode !== 'Single') {
                selectedLi = [].slice.call(li.parentElement.children).slice(Math.min(currSelIdx, this.prevSelIdx), Math.max(currSelIdx, this.prevSelIdx) + 1).filter(function (ele) {
                  return ele.classList.contains('e-list-item');
                });
              } else {
                this.prevSelIdx = [].slice.call(li.parentElement.children).indexOf(li);
              }

              if (isSelect) {
                if (!this.selectionSettings.showCheckbox) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(selectedLi, _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected);
                }

                selectedLi.forEach(function (ele) {
                  ele.setAttribute('aria-selected', 'true');
                });
                this.list.setAttribute('aria-activedescendant', li.id);
              }

              if (!isKey && (this.maximumSelectionLength > (this.value && this.value.length) || !isSelect) && (this.maximumSelectionLength >= (this.value && this.value.length) || !isSelect) && !(this.maximumSelectionLength < (this.value && this.value.length))) {
                this.notify('updatelist', {
                  li: li,
                  e: e,
                  module: 'listbox'
                });
              }

              if (this.allowFiltering && !isKey) {
                var liDataValue = this.getFormattedValue(li.getAttribute('data-value'));

                if (!isSelect) {
                  this.value = this.value.filter(function (value1) {
                    return value1 !== liDataValue;
                  });
                } else {
                  var values = [];
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(values, this.value);
                  values.push(liDataValue);
                  this.value = values;
                }

                if (document.querySelectorAll('ul').length < 2) {
                  this.updateMainList();
                }
              }

              this.updateSelectedOptions();
              this.triggerChange(this.getSelectedItems(), e);
              this.checkMaxSelection();
            }
          }
        }, {
          key: "triggerChange",
          value: function triggerChange(selectedLis, event) {
            this.trigger('change', {
              elements: selectedLis,
              items: this.getDataByElements(selectedLis),
              value: this.value,
              event: event
            });
          }
        }, {
          key: "getDataByElems",
          value: function getDataByElems(elems) {
            var data = [];

            for (var i = 0, len = elems.length; i < len; i++) {
              data.push(this.getDataByValue(this.getFormattedValue(elems[i].getAttribute('data-value'))));
            }

            return data;
          }
        }, {
          key: "getDataByElements",
          value: function getDataByElements(elems) {
            var data = [];
            var value;
            var sIdx = 0;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listData)) {
              var type = this.typeOfData(this.listData)["typeof"];

              if (type === 'string' || type === 'number' || type === 'boolean') {
                var _iterator81 = _createForOfIteratorHelper(this.listData),
                    _step81;

                try {
                  for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {
                    var item = _step81.value;

                    for (var i = sIdx, len = elems.length; i < len; i++) {
                      value = this.getFormattedValue(elems[i].getAttribute('data-value'));

                      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(item) && item === value) {
                        sIdx = i;
                        data.push(item);
                        break;
                      }
                    }

                    if (elems.length === data.length) {
                      break;
                    }
                  }
                } catch (err) {
                  _iterator81.e(err);
                } finally {
                  _iterator81.f();
                }
              } else {
                var _iterator82 = _createForOfIteratorHelper(this.listData),
                    _step82;

                try {
                  for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {
                    var _item3 = _step82.value;

                    for (var _i92 = sIdx, _len8 = elems.length; _i92 < _len8; _i92++) {
                      value = this.getFormattedValue(elems[_i92].getAttribute('data-value'));

                      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_item3) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(this.fields.value ? this.fields.value : 'value', _item3) === value) {
                        sIdx = _i92;
                        data.push(_item3);
                        break;
                      }
                    }

                    if (elems.length === data.length) {
                      break;
                    }
                  }
                } catch (err) {
                  _iterator82.e(err);
                } finally {
                  _iterator82.f();
                }
              }

              return data;
            }

            return null;
          }
        }, {
          key: "checkMaxSelection",
          value: function checkMaxSelection() {
            var limit = this.list.querySelectorAll('.e-list-item span.e-check').length;

            if (this.selectionSettings.showCheckbox) {
              var index = 0;
              var liCollElem;
              liCollElem = this.list.getElementsByClassName('e-list-item');

              for (index; index < liCollElem.length; index++) {
                if (!liCollElem[index].querySelector('.e-frame.e-check')) {
                  if (limit === this.maximumSelectionLength) {
                    liCollElem[index].classList.add('e-disable');
                  } else if (liCollElem[index].classList.contains('e-disable')) {
                    liCollElem[index].classList.remove('e-disable');
                  }
                }
              }
            }
          }
        }, {
          key: "toolbarClickHandler",
          value: function toolbarClickHandler(e) {
            var btn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, 'button');

            if (btn) {
              this.toolbarAction = btn.getAttribute('data-value');

              if (btn.disabled) {
                return;
              }

              switch (this.toolbarAction) {
                case 'moveUp':
                  this.moveUpDown(true);
                  break;

                case 'moveDown':
                  this.moveUpDown();
                  break;

                case 'moveTo':
                  this.moveItemTo();
                  break;

                case 'moveFrom':
                  this.moveItemFrom();
                  break;

                case 'moveAllTo':
                  this.moveAllItemTo();
                  break;

                case 'moveAllFrom':
                  this.moveAllItemFrom();
                  break;
              }
            }
          }
        }, {
          key: "moveUpDown",
          value: function moveUpDown(isUp, isKey, value) {
            var _this189 = this;

            var elems = this.getSelectedItems();
            var tempItems;

            if (value) {
              elems = value;
            }

            if ((isUp && this.isSelected(this.ulElement.firstElementChild) || !isUp && this.isSelected(this.ulElement.lastElementChild)) && !value) {
              return;
            }

            tempItems = this.getDataByElems(elems);
            var localDataArgs = {
              cancel: false,
              items: tempItems,
              eventName: this.toolbarAction
            };
            this.trigger('actionBegin', localDataArgs);

            if (localDataArgs.cancel) {
              return;
            }

            (isUp ? elems : elems.reverse()).forEach(function (ele) {
              var jsonToIdx = Array.prototype.indexOf.call(_this189.ulElement.querySelectorAll('.e-list-item'), ele);
              var idx = Array.prototype.indexOf.call(_this189.ulElement.children, ele);
              Object(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["moveTo"])(_this189.ulElement, _this189.ulElement, [idx], isUp ? idx - 1 : idx + 2);

              _this189.changeData(idx, isUp ? idx - 1 : idx + 1, isUp ? jsonToIdx - 1 : jsonToIdx + 1, ele);
            });
            this.trigger('actionComplete', {
              items: tempItems,
              eventName: this.toolbarAction
            });
            elems[0].focus();

            if (!isKey && this.toolbarSettings.items.length) {
              this.getToolElem().querySelector('[data-value=' + (isUp ? 'moveUp' : 'moveDown') + ']').focus();
            }

            this.updateToolBarState();
          }
        }, {
          key: "moveItemTo",
          value: function moveItemTo() {
            this.moveData(this, this.getScopedListBox());
          }
        }, {
          key: "moveItemFrom",
          value: function moveItemFrom() {
            this.moveData(this.getScopedListBox(), this);
          }
          /**
           * Called internally if any of the property value changed.
           * @returns void
           * @private
           */
          // tslint:disable-next-line:max-func-body-length

        }, {
          key: "moveData",
          value: function moveData(fListBox, tListBox, isKey, value, index) {
            var _this190 = this;

            var idx = [];
            var dataIdx = [];
            var jsonIdx = [];
            var sortIdx = [];
            var listData = [].slice.call(fListBox.listData);
            var tListData = [].slice.call(tListBox.listData);
            var sortData = [].slice.call(fListBox.sortedData);
            var tSortData = [].slice.call(tListBox.sortedData);
            var fliCollections = [].slice.call(fListBox.liCollections);
            var dataLiIdx = [];
            var tliCollections = [].slice.call(tListBox.liCollections);
            var tempItems = [];
            var data = [];
            var elems = fListBox.getSelectedItems();

            if (value) {
              elems = value;
            }

            var isRefresh = tListBox.sortOrder !== 'None' || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy;
            fListBox.value = [];

            if (elems.length) {
              this.removeSelected(fListBox, elems);
              elems.forEach(function (ele, i) {
                idx.push(Array.prototype.indexOf.call(fListBox.ulElement.children, ele)); // update sortable elem
                // To update lb view data

                dataLiIdx.push(Array.prototype.indexOf.call(fListBox.ulElement.querySelectorAll('.e-list-item'), ele)); // To update lb listdata data

                dataIdx.push(Array.prototype.indexOf.call(fListBox.listData, fListBox.getDataByElems([ele])[0])); // To update lb sorted data

                sortIdx.push(Array.prototype.indexOf.call(fListBox.sortedData, fListBox.getDataByElems([ele])[0])); // To update lb original data

                jsonIdx.push(Array.prototype.indexOf.call(fListBox.jsonData, fListBox.getDataByElems([ele])[0]));
              });

              if (this.sortOrder !== 'None') {
                sortIdx.forEach(function (i) {
                  tempItems.push(fListBox.sortedData[i]);
                });
              } else {
                jsonIdx.forEach(function (i) {
                  tempItems.push(fListBox.jsonData[i]);
                });
              }

              var localDataArgs = {
                cancel: false,
                items: tempItems,
                eventName: this.toolbarAction
              };
              fListBox.trigger('actionBegin', localDataArgs);

              if (localDataArgs.cancel) {
                return;
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                var rLiCollection = [];
                dataLiIdx.sort(function (n1, n2) {
                  return n1 - n2;
                }).reverse().forEach(function (i) {
                  rLiCollection.push(fliCollections.splice(i, 1)[0]);
                });
                fListBox.liCollections = fliCollections;

                if (index) {
                  var toColl = tliCollections.splice(0, index);
                  tListBox.liCollections = toColl.concat(rLiCollection.reverse()).concat(tliCollections);
                } else {
                  tListBox.liCollections = tliCollections.concat(rLiCollection.reverse());
                }

                if (tListBox.listData.length === 0) {
                  var noRecElem = tListBox.ulElement.getElementsByClassName('e-list-nrt')[0];

                  if (noRecElem) {
                    tListBox.ulElement.removeChild(noRecElem);
                  }
                }
              }

              dataIdx.sort(function (n1, n2) {
                return n2 - n1;
              }).forEach(function (i) {
                listData.splice(i, 1)[0];
              });
              sortIdx.sort(function (n1, n2) {
                return n2 - n1;
              }).forEach(function (i) {
                sortData.splice(i, 1)[0];
              });
              jsonIdx.slice().reverse().forEach(function (i) {
                data.push(fListBox.jsonData.splice(i, 1)[0]);
              });

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                if (isRefresh) {
                  if (fListBox.fields.groupBy) {
                    fListBox.ulElement.innerHTML = fListBox.renderItems(listData, fListBox.fields).innerHTML;
                  } else {
                    elems.forEach(function (ele) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
                    });
                  }
                } else {
                  Object(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["moveTo"])(fListBox.ulElement, tListBox.ulElement, idx, index);
                  fListBox.trigger('actionComplete', {
                    items: tempItems,
                    eventName: this.toolbarAction
                  });
                }

                if (tListBox.mainList.childElementCount !== tListBox.jsonData.length) {
                  tListBox.mainList = tListBox.ulElement;
                }

                fListBox.updateMainList();
              }

              var tJsonData = [].slice.call(tListBox.jsonData);
              tSortData = [].slice.call(tListBox.sortedData);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                this.selectNextList(elems, dataLiIdx, dataIdx, fListBox);
              }

              if (isKey) {
                this.list.focus();
              }

              fListBox.listData = listData;
              fListBox.sortedData = sortData;
              index = index ? index : tListData.length;

              for (var i = tempItems.length - 1; i >= 0; i--) {
                tListData.splice(index, 0, tempItems[i]);
                tJsonData.splice(index, 0, tempItems[i]);
                tSortData.splice(index, 0, tempItems[i]);
              }

              tListBox.listData = tListData;
              tListBox.jsonData = tJsonData;
              tListBox.sortedData = tSortData;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                // tslint:disable
                fListBox.interopAdaptor.invokeMethodAsync('UpdateListData', fListBox.listData).then(function () {
                  fListBox.updateBlazorListData(null, true);

                  _this190.selectNextList(elems, dataLiIdx, dataIdx, fListBox);

                  fListBox.updateSelectedOptions();
                });
                tListBox.interopAdaptor.invokeMethodAsync('UpdateListData', tListBox.listData).then(function () {
                  if (isRefresh) {
                    tListBox.setSelection();
                  }

                  tListBox.updateBlazorListData(null, true);
                  fListBox.trigger('actionComplete', {
                    items: tempItems,
                    eventName: _this190.toolbarAction
                  });
                }); // tslint:enable
              } else {
                if (isRefresh) {
                  tListBox.ulElement.innerHTML = tListBox.renderItems(tListData, tListBox.fields).innerHTML;
                  tListBox.setSelection();
                }

                fListBox.updateSelectedOptions();
              }

              if (fListBox.listData.length === 0) {
                // tslint:disable-next-line
                fListBox.l10nUpdate();
              }
            }

            if (fListBox.value.length === 1 && fListBox.getSelectedItems().length) {
              fListBox.value[0] = fListBox.getFormattedValue(fListBox.getSelectedItems()[0].getAttribute('data-value'));
            }
          }
        }, {
          key: "selectNextList",
          value: function selectNextList(elems, dataLiIdx, dataIdx, inst) {
            var childCnt = inst.ulElement.querySelectorAll('.e-list-item').length;
            var ele;
            var liIdx;
            var validIdx = -1;

            if (elems.length === 1 && childCnt && !inst.selectionSettings.showCheckbox) {
              liIdx = childCnt <= dataLiIdx[0] ? childCnt - 1 : dataLiIdx[0];
              ele = inst.ulElement.querySelectorAll('.e-list-item')[liIdx];
              validIdx = inst.getValidIndex(ele, liIdx, childCnt === dataIdx[0] ? 38 : 40);

              if (validIdx > -1) {
                inst.ulElement.querySelectorAll('.e-list-item')[validIdx].classList.add(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected);
              }
            }
          }
        }, {
          key: "moveAllItemTo",
          value: function moveAllItemTo() {
            this.moveAllData(this, this.getScopedListBox());
          }
        }, {
          key: "moveAllItemFrom",
          value: function moveAllItemFrom() {
            this.moveAllData(this.getScopedListBox(), this);
          }
        }, {
          key: "moveAllData",
          value: function moveAllData(fListBox, tListBox, isKey, index) {
            var _this191 = this;

            var listData = [].slice.call(tListBox.listData);
            var jsonData = [].slice.call(tListBox.jsonData);
            var isRefresh = tListBox.sortOrder !== 'None' || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy;
            this.removeSelected(fListBox, fListBox.getSelectedItems());
            var tempItems = [].slice.call(fListBox.jsonData);
            var localDataArgs = {
              cancel: false,
              items: tempItems,
              eventName: this.toolbarAction
            };
            fListBox.trigger('actionBegin', localDataArgs);

            if (localDataArgs.cancel) {
              return;
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              if (tListBox.listData.length === 0) {
                var noRecElem = tListBox.ulElement.getElementsByClassName('e-list-nrt')[0];

                if (noRecElem) {
                  tListBox.ulElement.removeChild(noRecElem);
                }
              }

              if (isRefresh) {
                var _noRecElem = fListBox.ulElement.getElementsByClassName('e-list-nrt')[0];

                if (_noRecElem) {
                  fListBox.ulElement.removeChild(_noRecElem);
                }
              } else {
                Object(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["moveTo"])(fListBox.ulElement, tListBox.ulElement, Array.apply(null, {
                  length: fListBox.ulElement.childElementCount
                }).map(Number.call, Number), index);
                this.trigger('actionComplete', {
                  items: tempItems,
                  eventName: this.toolbarAction
                });
              }
            }

            if (isKey) {
              this.list.focus();
            }

            index = index ? index : listData.length;

            for (var i = 0; i < fListBox.listData.length; i++) {
              listData.splice(index + i, 0, fListBox.listData[i]);
            }

            for (var _i93 = 0; _i93 < fListBox.jsonData.length; _i93++) {
              jsonData.splice(index + _i93, 0, fListBox.jsonData[_i93]);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              var fliCollections = [].slice.call(fListBox.liCollections);
              var tliCollections = [].slice.call(tListBox.liCollections);
              fListBox.liCollections = [];

              if (index) {
                var toColl = tliCollections.splice(0, index);
                tListBox.liCollections = toColl.concat(fliCollections).concat(tliCollections);
              } else {
                tListBox.liCollections = tliCollections.concat(fliCollections);
              }
            }

            fListBox.value = [];
            listData = listData.filter(function (data) {
              return data.isHeader !== true;
            });
            tListBox.listData = listData;
            tListBox.jsonData = jsonData;
            fListBox.listData = fListBox.sortedData = fListBox.jsonData = [];

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              if (!isRefresh) {
                tListBox.sortedData = listData;
              } // tslint:disable


              fListBox.interopAdaptor.invokeMethodAsync('UpdateListData', fListBox.listData).then(function () {
                fListBox.updateBlazorListData(null, true);
                fListBox.updateSelectedOptions();
              });
              tListBox.interopAdaptor.invokeMethodAsync('UpdateListData', tListBox.listData).then(function () {
                tListBox.updateBlazorListData(null, true);
                fListBox.updateSelectedOptions();
                fListBox.trigger('actionComplete', {
                  items: tempItems,
                  eventName: _this191.toolbarAction
                });
              }); // tslint:enable
            } else {
              if (isRefresh) {
                tListBox.ulElement.innerHTML = tListBox.renderItems(listData, tListBox.fields).innerHTML;
                this.trigger('actionComplete', {
                  items: tempItems,
                  eventName: this.toolbarAction
                });
              } else {
                tListBox.sortedData = listData;
              }

              fListBox.updateSelectedOptions();
            }

            if (fListBox.listData.length === 0) {
              // tslint:disable-next-line
              fListBox.l10nUpdate();
            }
          }
        }, {
          key: "changeData",
          value: function changeData(fromIdx, toIdx, jsonToIdx, ele) {
            var listData = [].slice.call(this.listData);
            var jsonData = [].slice.call(this.jsonData);
            var sortData = [].slice.call(this.sortedData);
            var jsonIdx = Array.prototype.indexOf.call(this.jsonData, this.getDataByElems([ele])[0]);
            var sortIdx = Array.prototype.indexOf.call(this.sortedData, this.getDataByElems([ele])[0]);
            var liColl = [].slice.call(this.liCollections);
            listData.splice(toIdx, 0, listData.splice(fromIdx, 1)[0]);
            jsonData.splice(jsonToIdx, 0, jsonData.splice(jsonIdx, 1)[0]);
            sortData.splice(toIdx, 0, sortData.splice(sortIdx, 1)[0]);
            liColl.splice(toIdx, 0, liColl.splice(fromIdx, 1)[0]);
            this.listData = listData;
            this.jsonData = jsonData;
            this.liCollections = liColl;
            this.sortedData = sortData;
          }
        }, {
          key: "getSelectedItems",
          value: function getSelectedItems() {
            var ele = [];

            if (this.selectionSettings.showCheckbox) {
              [].slice.call(this.ulElement.getElementsByClassName('e-check')).forEach(function (cbox) {
                ele.push(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(cbox, '.' + 'e-list-item'));
              });
            } else {
              ele = [].slice.call(this.ulElement.getElementsByClassName(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected));
            }

            return ele;
          }
        }, {
          key: "getScopedListBox",
          value: function getScopedListBox() {
            var _this192 = this;

            var listObj;

            if (this.scope) {
              [].slice.call(document.querySelectorAll(this.scope)).forEach(function (ele) {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(ele, _this192.getModuleName())) {
                  listObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(ele, _this192.getModuleName());
                }
              });
            }

            return listObj;
          }
        }, {
          key: "getDragArgs",
          value: function getDragArgs(args, isDragEnd) {
            var elems = this.getSelectedItems();

            if (elems.length) {
              elems.pop();

              if (isDragEnd) {
                elems.push(args.target);
              }
            } else {
              elems = [args.target];
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              return {
                elements: elems,
                items: this.getDataByElems(elems),
                bindEvents: args.bindEvents,
                dragElement: args.dragElement
              };
            } else {
              return {
                elements: elems,
                items: this.getDataByElems(elems)
              };
            }
          }
        }, {
          key: "onKeyDown",
          value: function onKeyDown(e) {
            this.keyDownHandler(e);
            event.stopPropagation();
          }
        }, {
          key: "keyDownHandler",
          value: function keyDownHandler(e) {
            if ([32, 35, 36, 37, 38, 39, 40, 65].indexOf(e.keyCode) > -1 && !this.allowFiltering) {
              e.preventDefault();

              if (e.keyCode === 32 && this.ulElement.children.length) {
                this.selectHandler({
                  target: this.ulElement.getElementsByClassName('e-focused')[0],
                  ctrlKey: e.ctrlKey,
                  shiftKey: e.shiftKey
                });
              } else if (e.keyCode === 65 && e.ctrlKey) {
                this.selectAll();
              } else if ((e.keyCode === 38 || e.keyCode === 40) && e.ctrlKey && e.shiftKey) {
                this.moveUpDown(e.keyCode === 38 ? true : false, true);
              } else if ((this.toolbarSettings.items.length || this.tBListBox) && (e.keyCode === 39 || e.keyCode === 37) && e.ctrlKey) {
                var listObj = this.tBListBox || this.getScopedListBox();

                if (e.keyCode === 39) {
                  e.shiftKey ? this.moveAllData(this, listObj, true) : this.moveData(this, listObj, true);
                } else {
                  e.shiftKey ? this.moveAllData(listObj, this, true) : this.moveData(listObj, this, true);
                }
              } else if (e.keyCode !== 37 && e.keyCode !== 39) {
                this.upDownKeyHandler(e);
              }
            } else if (this.allowFiltering) {
              if (e.keyCode === 40 || e.keyCode === 38) {
                this.upDownKeyHandler(e);
              }
            }
          }
        }, {
          key: "upDownKeyHandler",
          value: function upDownKeyHandler(e) {
            var ul = this.ulElement;
            var defaultIdx = e.keyCode === 40 || e.keyCode === 36 ? 0 : ul.childElementCount - 1;
            var fliIdx = defaultIdx;
            var fli = ul.getElementsByClassName('e-focused')[0] || ul.getElementsByClassName(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected)[0];

            if (fli) {
              if (e.keyCode !== 35 && e.keyCode !== 36) {
                fliIdx = Array.prototype.indexOf.call(ul.children, fli);
                e.keyCode === 40 ? fliIdx++ : fliIdx--;

                if (fliIdx < 0 || fliIdx > ul.childElementCount - 1) {
                  return;
                }
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([fli], 'e-focused');
            }

            var cli = ul.children[fliIdx];

            if (cli) {
              fliIdx = this.getValidIndex(cli, fliIdx, e.keyCode);

              if (fliIdx === -1) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([fli], 'e-focused');
                return;
              }

              ul.children[fliIdx].focus();
              ul.children[fliIdx].classList.add('e-focused');

              if (!e.ctrlKey) {
                this.selectHandler({
                  target: ul.children[fliIdx],
                  ctrlKey: e.ctrlKey,
                  shiftKey: e.shiftKey
                }, true);
              }
            }
          }
        }, {
          key: "KeyUp",
          value: function KeyUp(e) {
            var _this193 = this;

            var _char6 = String.fromCharCode(e.keyCode);

            var isWordCharacter = _char6.match(/\w/);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(isWordCharacter)) {
              this.isValidKey = true;
            }

            this.isValidKey = e.keyCode === 8 || this.isValidKey;

            if (this.isValidKey) {
              this.isValidKey = false;

              switch (e.keyCode) {
                default:
                  var text = this.targetElement();
                  var keyCode = e.keyCode;

                  if (this.allowFiltering) {
                    var eventArgsData = {
                      preventDefaultAction: false,
                      text: this.targetElement(),
                      updateData: function updateData(dataSource, query, fields) {
                        if (eventArgsData.cancel) {
                          return;
                        }

                        _this193.isFiltered = true;
                        _this193.remoteFilterAction = true;

                        _this193.dataUpdater(dataSource, query, fields);
                      },
                      event: e,
                      cancel: false
                    };
                    this.trigger('filtering', eventArgsData, function (args) {
                      _this193.isDataFetched = false;

                      if (eventArgsData.cancel || _this193.filterInput.value !== '' && _this193.isFiltered) {
                        return;
                      }

                      if (!eventArgsData.cancel && !_this193.isCustomFiltering && !eventArgsData.preventDefaultAction) {
                        _this193.inputString = _this193.filterInput.value;

                        _this193.filteringAction(_this193.jsonData, new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"](), _this193.fields);
                      }

                      if (!_this193.isFiltered && !_this193.isCustomFiltering && !eventArgsData.preventDefaultAction) {
                        _this193.dataUpdater(_this193.jsonData, new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__["Query"](), _this193.fields);
                      }
                    });
                  }

              }
            }
          }
          /**
           * To filter the data from given data source by using query
           * @param  {Object[] | DataManager } dataSource - Set the data source to filter.
           * @param  {Query} query - Specify the query to filter the data.
           * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
           * @return {void}.
           */

        }, {
          key: "filter",
          value: function filter(dataSource, query, fields) {
            this.isCustomFiltering = true;
            this.filteringAction(dataSource, query, fields);
          }
        }, {
          key: "filteringAction",
          value: function filteringAction(dataSource, query, fields) {
            this.resetList(dataSource, fields, query);
          }
        }, {
          key: "targetElement",
          value: function targetElement() {
            this.targetInputElement = this.list.getElementsByClassName('e-input-filter')[0];
            return this.targetInputElement.value;
          }
        }, {
          key: "dataUpdater",
          value: function dataUpdater(dataSource, query, fields) {
            this.isDataFetched = false;
            var backCommand = true;

            if (this.targetElement().trim() === '') {
              var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;

              if (backCommand) {
                this.remoteCustomValue = false;
                this.onActionComplete(list, this.jsonData);
                this.notify('reOrder', {
                  module: 'CheckBoxSelection',
                  enable: this.selectionSettings.showCheckbox,
                  e: this
                });
              }
            } else {
              this.resetList(dataSource, fields, query);
            }
          }
        }, {
          key: "focusOutHandler",
          value: function focusOutHandler() {
            var ele = this.list.getElementsByClassName('e-focused')[0];

            if (ele) {
              ele.classList.remove('e-focused');
            }

            if (this.allowFiltering) {
              this.refreshClearIcon();
            }
          }
        }, {
          key: "getValidIndex",
          value: function getValidIndex(cli, index, keyCode) {
            var cul = this.ulElement;

            if (cli.classList.contains('e-disabled') || cli.classList.contains(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].group)) {
              keyCode === 40 || keyCode === 36 ? index++ : index--;
            }

            if (index < 0 || index === cul.childElementCount) {
              return -1;
            }

            cli = cul.querySelectorAll('.e-list-item')[index];

            if (cli.classList.contains('e-disabled') || cli.classList.contains(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].group)) {
              index = this.getValidIndex(cli, index, keyCode);
            }

            return index;
          }
        }, {
          key: "updateSelectedOptions",
          value: function updateSelectedOptions() {
            var _this194 = this;

            var selectedOptions = [];
            var values = [];
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(values, this.value);
            this.getSelectedItems().forEach(function (ele) {
              if (!ele.classList.contains('e-grabbed')) {
                selectedOptions.push(_this194.getFormattedValue(ele.getAttribute('data-value')));
              }
            });

            if (this.mainList.childElementCount === this.ulElement.childElementCount) {
              if (this.allowFiltering && this.selectionSettings.showCheckbox) {
                for (var i = 0; i < selectedOptions.length; i++) {
                  if (values.indexOf(selectedOptions[i]) > -1) {
                    continue;
                  } else {
                    values.push(selectedOptions[i]);
                  }
                }

                this.setProperties({
                  value: values
                }, true);
              } else {
                this.setProperties({
                  value: selectedOptions
                }, true);
              }
            }

            this.updateSelectTag();
            this.updateToolBarState();

            if (this.tBListBox) {
              this.tBListBox.updateToolBarState();
            }
          }
        }, {
          key: "clearSelection",
          value: function clearSelection() {
            var _this195 = this;

            var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;

            if (this.selectionSettings.showCheckbox) {
              var dvalue;
              this.getSelectedItems().forEach(function (li) {
                dvalue = _this195.getFormattedValue(li.getAttribute('data-value'));

                if (values.indexOf(dvalue) < 0) {
                  li.getElementsByClassName('e-check')[0].classList.remove('e-check');
                  li.getElementsByClassName('e-checkbox-wrapper')[0].removeAttribute('aria-checked');
                  li.removeAttribute('aria-selected');
                }
              });
            }
          }
        }, {
          key: "setSelection",
          value: function setSelection() {
            var _this196 = this;

            var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;
            var isSelect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var isText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var li;
            var liselect;

            if (values) {
              values.forEach(function (value) {
                var text;

                if (isText) {
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && typeof value === 'object') {
                    text = value[_this196.fields.text || 'text'];

                    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(text)) {
                      return;
                    }

                    text = _this196.getValueByText(text);
                  } else {
                    text = _this196.getValueByText(value);
                  }
                } else {
                  text = value;
                }

                li = _this196.list.querySelector('[data-value="' + text + '"]');

                if (li) {
                  if (_this196.selectionSettings.showCheckbox) {
                    liselect = li.getElementsByClassName('e-frame')[0].classList.contains('e-check');
                  } else {
                    liselect = li.classList.contains('e-selected');
                  }

                  if (!isSelect && liselect || isSelect && !liselect && li) {
                    if (_this196.selectionSettings.showCheckbox) {
                      _this196.notify('updatelist', {
                        li: li,
                        module: 'listbox'
                      });
                    } else {
                      if (isSelect) {
                        li.classList.add(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected);
                        li.setAttribute('aria-selected', 'true');
                      } else {
                        li.classList.remove(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected);
                        li.removeAttribute('aria-selected');
                      }
                    }
                  }
                }
              });
            }

            this.updateSelectTag();
          }
        }, {
          key: "updateSelectTag",
          value: function updateSelectTag() {
            var ele = this.getSelectTag();
            var innerHTML = '';
            ele.innerHTML = '';

            if (this.value) {
              for (var i = 0, len = this.value.length; i < len; i++) {
                innerHTML += '<option selected value="' + this.value[i] + '"></option>';
              }

              ele.innerHTML += innerHTML;
            }

            this.checkSelectAll();
          }
        }, {
          key: "checkDisabledState",
          value: function checkDisabledState(inst) {
            return (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() ? inst.ulElement.querySelectorAll('.' + _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].li).length : inst.ulElement.childElementCount) === 0;
          }
        }, {
          key: "updateToolBarState",
          value: function updateToolBarState() {
            var _this197 = this;

            if (this.toolbarSettings.items.length) {
              var listObj = this.getScopedListBox();
              var wrap = this.list.parentElement.getElementsByClassName('e-listbox-tool')[0];
              this.toolbarSettings.items.forEach(function (value) {
                var btn = wrap.querySelector('[data-value="' + value + '"]');

                switch (value) {
                  case 'moveAllTo':
                    btn.disabled = _this197.checkDisabledState(_this197);
                    break;

                  case 'moveAllFrom':
                    btn.disabled = _this197.checkDisabledState(listObj);
                    break;

                  case 'moveFrom':
                    btn.disabled = listObj.value && listObj.value.length ? false : true;
                    break;

                  case 'moveUp':
                    btn.disabled = _this197.value && _this197.value.length && !_this197.isSelected(_this197.ulElement.children[0]) ? false : true;
                    break;

                  case 'moveDown':
                    btn.disabled = _this197.value && _this197.value.length && !_this197.isSelected(_this197.ulElement.children[_this197.ulElement.childElementCount - 1]) ? false : true;
                    break;

                  default:
                    btn.disabled = _this197.value && _this197.value.length ? false : true;
                    break;
                }
              });
            }
          }
        }, {
          key: "setCheckboxPosition",
          value: function setCheckboxPosition() {
            var listWrap = this.list;

            if (!this.initLoad && this.selectionSettings.checkboxPosition === 'Left') {
              listWrap.classList.remove('e-right');
            }

            if (this.selectionSettings.checkboxPosition === 'Right') {
              listWrap.classList.add('e-right');
            }
          }
        }, {
          key: "showCheckbox",
          value: function showCheckbox(_showCheckbox) {
            var index = 0;
            var liColl = this.list.lastElementChild.querySelectorAll('li');
            var liCollLen = this.list.lastElementChild.getElementsByClassName('e-list-item').length;

            if (_showCheckbox) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                this.ulElement = this.renderItems(this.listData, this.fields);
                this.mainList = this.ulElement;
                this.list.removeChild(this.list.getElementsByTagName('ul')[0]);
                this.list.appendChild(this.ulElement);
              }

              if (this.selectionSettings.showSelectAll && !this.list.getElementsByClassName('e-selectall-parent')[0]) {
                var l10nShow = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"](this.getModuleName(), {
                  selectAllText: 'Select All',
                  unSelectAllText: 'Unselect All'
                }, this.locale);
                this.showSelectAll = true;
                this.selectAllText = l10nShow.getConstant('selectAllText');
                this.unSelectAllText = l10nShow.getConstant('unSelectAllText');
                this.popupWrapper = this.list;
                this.checkBoxSelectionModule.checkAllParent = null;
                this.notify('selectAll', {});
                this.checkSelectAll();
              }
            } else {
              if (this.list.getElementsByClassName('e-selectall-parent')[0]) {
                this.list.removeChild(this.list.getElementsByClassName('e-selectall-parent')[0]);
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                for (index; index < liCollLen; index++) {
                  if (liColl[index].classList.contains('e-list-item')) {
                    liColl[index].removeChild(liColl[index].getElementsByClassName('e-checkbox-wrapper')[0]);
                  }

                  if (liColl[index].hasAttribute('aria-selected')) {
                    liColl[index].removeAttribute('aria-selected');
                  }
                }

                this.mainList = this.ulElement;
              }
            }

            this.value = [];
          }
        }, {
          key: "isSelected",
          value: function isSelected(ele) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ele)) {
              return ele.classList.contains(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected) || ele.querySelector('.e-check') !== null;
            } else {
              return false;
            }
          }
        }, {
          key: "getSelectTag",
          value: function getSelectTag() {
            return this.list.getElementsByClassName('e-hidden-select')[0];
          }
        }, {
          key: "getToolElem",
          value: function getToolElem() {
            return this.list.parentElement.getElementsByClassName('e-listbox-tool')[0];
          }
        }, {
          key: "formResetHandler",
          value: function formResetHandler() {
            this.value = this.initialSelectedOptions;
          }
          /**
           * Return the module name.
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'listbox';
          }
          /**
           * Get the properties to be maintained in the persisted state.
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist(['value']);
          }
        }, {
          key: "getLocaleName",
          value: function getLocaleName() {
            return 'listbox';
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this.itemTemplate) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])("".concat(this.element.id).concat(ITEMTEMPLATE_PROPERTY$1), ITEMTEMPLATE_PROPERTY$1);
            }

            this.unwireEvents();

            if (this.element.tagName === 'EJS-LISTBOX') {
              this.element.innerHTML = '';
            } else {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered) {
                this.element.style.display = 'inline-block';

                if (this.toolbarSettings.items.length) {
                  this.list.parentElement.parentElement.insertBefore(this.list, this.list.parentElement);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.list.nextElementSibling);
                }

                this.list.parentElement.insertBefore(this.element, this.list);
              }
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered) {
              _get2(_getPrototypeOf2(ListBox.prototype), "destroy", this).call(this);
            }
          }
          /**
           * Called internally if any of the property value changed.
           * @returns void
           * @private
           */
          // tslint:disable-next-line:max-func-body-length

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;

            _get2(_getPrototypeOf2(ListBox.prototype), "onPropertyChanged", this).call(this, newProp, oldProp);

            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);

            for (var _i94 = 0, _Object$keys30 = Object.keys(newProp); _i94 < _Object$keys30.length; _i94++) {
              var prop = _Object$keys30[_i94];

              switch (prop) {
                case 'cssClass':
                  if (oldProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([wrap], oldProp.cssClass.split(' '));
                  }

                  if (newProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrap], newProp.cssClass.split(' '));
                  }

                  break;

                case 'enableRtl':
                  if (newProp.enableRtl) {
                    wrap.classList.add('e-rtl');
                  } else {
                    wrap.classList.remove('e-rtl');
                  }

                  break;

                case 'value':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(this.list.querySelectorAll('.' + _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected), _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__["cssClass"].selected);
                  this.clearSelection(this.value);
                  this.setSelection();
                  break;

                case 'height':
                  this.setHeight();
                  break;

                case 'enabled':
                  this.setEnable();
                  break;

                case 'allowDragAndDrop':
                  if (newProp.allowDragAndDrop) {
                    this.initDraggable();
                  } else {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(this.ulElement, 'sortable').destroy();
                  }

                  break;

                case 'allowFiltering':
                  if (this.allowFiltering) {
                    this.setFiltering();
                  } else {
                    this.list.removeChild(this.list.getElementsByClassName('e-filter-parent')[0]);
                    this.filterParent = null;
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.list], 'e-filter-list');
                  }

                  break;

                case 'filterBarPlaceholder':
                  if (this.allowFiltering) {
                    if (this.filterInput) {
                      _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__["Input"].setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);
                    }
                  }

                  break;

                case 'scope':
                  if (this.allowDragAndDrop) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(this.ulElement, 'sortable').scope = newProp.scope;
                  }

                  if (this.toolbarSettings.items.length) {
                    if (oldProp.scope) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(document.querySelector(oldProp.scope), this.getModuleName()).tBListBox = null;
                    }

                    if (newProp.scope) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getComponent"])(document.querySelector(newProp.scope), this.getModuleName()).tBListBox = this;
                    }
                  }

                  break;

                case 'toolbarSettings':
                  var ele = void 0;
                  var pos = newProp.toolbarSettings.position;
                  var toolElem = this.getToolElem();

                  if (pos) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([wrap], ['e-right', 'e-left']);
                    wrap.classList.add('e-' + pos.toLowerCase());

                    if (pos === 'Left') {
                      wrap.insertBefore(toolElem, this.list);
                    } else {
                      wrap.appendChild(toolElem);
                    }
                  }

                  if (newProp.toolbarSettings.items) {
                    if (oldProp.toolbarSettings.items.length) {
                      ele = this.list.parentElement;
                      ele.parentElement.insertBefore(this.list, ele);
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
                    }

                    this.initToolbarAndStyles();
                    this.wireToolbarEvent();
                  }

                  break;

                case 'selectionSettings':
                  var showSelectAll = newProp.selectionSettings.showSelectAll;
                  var showCheckbox = newProp.selectionSettings.showCheckbox;

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(showSelectAll)) {
                    this.showSelectAll = showSelectAll;

                    if (this.showSelectAll) {
                      var l10nSel = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"](this.getModuleName(), {
                        selectAllText: 'Select All',
                        unSelectAllText: 'Unselect All'
                      }, this.locale);
                      this.checkBoxSelectionModule.checkAllParent = null;
                      this.showSelectAll = true;
                      this.selectAllText = l10nSel.getConstant('selectAllText');
                      this.unSelectAllText = l10nSel.getConstant('selectAllText');
                      this.popupWrapper = this.list;
                    }

                    this.notify('selectAll', {});
                    this.checkSelectAll();
                  }

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(showCheckbox)) {
                    this.showCheckbox(showCheckbox);
                  }

                  if (this.selectionSettings.showCheckbox) {
                    this.setCheckboxPosition();
                  }

                  break;

                case 'dataSource':
                  this.jsonData = [].slice.call(this.dataSource);
                  break;
              }
            }
          }
        }]);

        return ListBox;
      }(DropDownBase);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ListBox.prototype, "cssClass", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], ListBox.prototype, "value", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ListBox.prototype, "height", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ListBox.prototype, "allowDragAndDrop", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1000)], ListBox.prototype, "maximumSelectionLength", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ListBox.prototype, "allowFiltering", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ListBox.prototype, "scope", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], ListBox.prototype, "ignoreCase", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ListBox.prototype, "filterBarPlaceholder", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListBox.prototype, "beforeItemRender", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListBox.prototype, "filtering", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListBox.prototype, "select", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListBox.prototype, "change", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListBox.prototype, "beforeDrop", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListBox.prototype, "dragStart", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListBox.prototype, "drag", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListBox.prototype, "drop", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ListBox.prototype, "dataBound", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ListBox.prototype, "groupTemplate", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('No records found')], ListBox.prototype, "noRecordsTemplate", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Request failed')], ListBox.prototype, "actionFailureTemplate", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1000)], ListBox.prototype, "zIndex", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ListBox.prototype, "ignoreAccent", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, ToolbarSettings)], ListBox.prototype, "toolbarSettings", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, SelectionSettings)], ListBox.prototype, "selectionSettings", void 0);

      ListBox = ListBox_1 = __decorate$6([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], ListBox);
      var listBoxClasses = {
        backIcon: 'e-input-group-icon e-back-icon e-icons',
        filterBarClearIcon: 'e-input-group-icon e-clear-icon e-icons',
        filterInput: 'e-input-filter',
        filterParent: 'e-filter-parent',
        clearIcon: 'e-clear-icon'
      };
      /**
       * export all modules from current location
       */

      /**
       * export all modules from current location
       */
      //# sourceMappingURL=ej2-dropdowns.es2015.js.map

      /***/
    },

    /***/
    "PSD3":
    /*!**********************************************************!*\
      !*** ./node_modules/sweetalert2/dist/sweetalert2.all.js ***!
      \**********************************************************/

    /*! no static exports found */

    /***/
    function PSD3(module, exports, __webpack_require__) {
      /*!
      * sweetalert2 v8.17.1
      * Released under the MIT License.
      */
      (function (global, factory) {
        true ? module.exports = factory() : undefined;
      })(this, function () {
        'use strict';

        function _typeof(obj) {
          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _extends() {
          _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];

              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }

            return target;
          };

          return _extends.apply(this, arguments);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true
            }
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
          };
          return _getPrototypeOf(o);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
          };

          return _setPrototypeOf(o, p);
        }

        function isNativeReflectConstruct() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;

          try {
            Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
            return true;
          } catch (e) {
            return false;
          }
        }

        function _construct(Parent, args, Class) {
          if (isNativeReflectConstruct()) {
            _construct = Reflect.construct;
          } else {
            _construct = function _construct(Parent, args, Class) {
              var a = [null];
              a.push.apply(a, args);
              var Constructor = Function.bind.apply(Parent, a);
              var instance = new Constructor();
              if (Class) _setPrototypeOf(instance, Class.prototype);
              return instance;
            };
          }

          return _construct.apply(null, arguments);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return self;
        }

        function _possibleConstructorReturn(self, call) {
          if (call && (typeof call === "object" || typeof call === "function")) {
            return call;
          }

          return _assertThisInitialized(self);
        }

        function _superPropBase(object, property) {
          while (!Object.prototype.hasOwnProperty.call(object, property)) {
            object = _getPrototypeOf(object);
            if (object === null) break;
          }

          return object;
        }

        function _get(target, property, receiver) {
          if (typeof Reflect !== "undefined" && Reflect.get) {
            _get = Reflect.get;
          } else {
            _get = function _get(target, property, receiver) {
              var base = _superPropBase(target, property);

              if (!base) return;
              var desc = Object.getOwnPropertyDescriptor(base, property);

              if (desc.get) {
                return desc.get.call(receiver);
              }

              return desc.value;
            };
          }

          return _get(target, property, receiver || target);
        }

        var consolePrefix = 'SweetAlert2:';
        /**
         * Filter the unique values into a new array
         * @param arr
         */

        var uniqueArray = function uniqueArray(arr) {
          var result = [];

          for (var i = 0; i < arr.length; i++) {
            if (result.indexOf(arr[i]) === -1) {
              result.push(arr[i]);
            }
          }

          return result;
        };
        /**
         * Returns the array ob object values (Object.values isn't supported in IE11)
         * @param obj
         */


        var objectValues = function objectValues(obj) {
          return Object.keys(obj).map(function (key) {
            return obj[key];
          });
        };
        /**
         * Convert NodeList to Array
         * @param nodeList
         */


        var toArray = function toArray(nodeList) {
          return Array.prototype.slice.call(nodeList);
        };
        /**
         * Standardise console warnings
         * @param message
         */


        var warn = function warn(message) {
          console.warn("".concat(consolePrefix, " ").concat(message));
        };
        /**
         * Standardise console errors
         * @param message
         */


        var error = function error(message) {
          console.error("".concat(consolePrefix, " ").concat(message));
        };
        /**
         * Private global state for `warnOnce`
         * @type {Array}
         * @private
         */


        var previousWarnOnceMessages = [];
        /**
         * Show a console warning, but only if it hasn't already been shown
         * @param message
         */

        var warnOnce = function warnOnce(message) {
          if (!(previousWarnOnceMessages.indexOf(message) !== -1)) {
            previousWarnOnceMessages.push(message);
            warn(message);
          }
        };
        /**
         * Show a one-time console warning about deprecated params/methods
         */


        var warnAboutDepreation = function warnAboutDepreation(deprecatedParam, useInstead) {
          warnOnce("\"".concat(deprecatedParam, "\" is deprecated and will be removed in the next major release. Please use \"").concat(useInstead, "\" instead."));
        };
        /**
         * If `arg` is a function, call it (with no arguments or context) and return the result.
         * Otherwise, just pass the value through
         * @param arg
         */


        var callIfFunction = function callIfFunction(arg) {
          return typeof arg === 'function' ? arg() : arg;
        };

        var isPromise = function isPromise(arg) {
          return arg && Promise.resolve(arg) === arg;
        };

        var DismissReason = Object.freeze({
          cancel: 'cancel',
          backdrop: 'backdrop',
          close: 'close',
          esc: 'esc',
          timer: 'timer'
        });

        var argsToParams = function argsToParams(args) {
          var params = {};

          switch (_typeof(args[0])) {
            case 'object':
              _extends(params, args[0]);

              break;

            default:
              ['title', 'html', 'type'].forEach(function (name, index) {
                switch (_typeof(args[index])) {
                  case 'string':
                    params[name] = args[index];
                    break;

                  case 'undefined':
                    break;

                  default:
                    error("Unexpected type of ".concat(name, "! Expected \"string\", got ").concat(_typeof(args[index])));
                }
              });
          }

          return params;
        };

        var swalPrefix = 'swal2-';

        var prefix = function prefix(items) {
          var result = {};

          for (var i in items) {
            result[items[i]] = swalPrefix + items[i];
          }

          return result;
        };

        var swalClasses = prefix(['container', 'shown', 'height-auto', 'iosfix', 'popup', 'modal', 'no-backdrop', 'toast', 'toast-shown', 'toast-column', 'fade', 'show', 'hide', 'noanimation', 'close', 'title', 'header', 'content', 'actions', 'confirm', 'cancel', 'footer', 'icon', 'image', 'input', 'file', 'range', 'select', 'radio', 'checkbox', 'label', 'textarea', 'inputerror', 'validation-message', 'progress-steps', 'active-progress-step', 'progress-step', 'progress-step-line', 'loading', 'styled', 'top', 'top-start', 'top-end', 'top-left', 'top-right', 'center', 'center-start', 'center-end', 'center-left', 'center-right', 'bottom', 'bottom-start', 'bottom-end', 'bottom-left', 'bottom-right', 'grow-row', 'grow-column', 'grow-fullscreen', 'rtl']);
        var iconTypes = prefix(['success', 'warning', 'info', 'question', 'error']);
        var states = {
          previousBodyPadding: null
        };

        var hasClass = function hasClass(elem, className) {
          return elem.classList.contains(className);
        };

        var applyCustomClass = function applyCustomClass(elem, customClass, className) {
          // Clean up previous custom classes
          toArray(elem.classList).forEach(function (className) {
            if (!(objectValues(swalClasses).indexOf(className) !== -1) && !(objectValues(iconTypes).indexOf(className) !== -1)) {
              elem.classList.remove(className);
            }
          });

          if (customClass && customClass[className]) {
            addClass(elem, customClass[className]);
          }
        };

        function getInput(content, inputType) {
          if (!inputType) {
            return null;
          }

          switch (inputType) {
            case 'select':
            case 'textarea':
            case 'file':
              return getChildByClass(content, swalClasses[inputType]);

            case 'checkbox':
              return content.querySelector(".".concat(swalClasses.checkbox, " input"));

            case 'radio':
              return content.querySelector(".".concat(swalClasses.radio, " input:checked")) || content.querySelector(".".concat(swalClasses.radio, " input:first-child"));

            case 'range':
              return content.querySelector(".".concat(swalClasses.range, " input"));

            default:
              return getChildByClass(content, swalClasses.input);
          }
        }

        var focusInput = function focusInput(input) {
          input.focus(); // place cursor at end of text in text input

          if (input.type !== 'file') {
            // http://stackoverflow.com/a/2345915
            var val = input.value;
            input.value = '';
            input.value = val;
          }
        };

        var toggleClass = function toggleClass(target, classList, condition) {
          if (!target || !classList) {
            return;
          }

          if (typeof classList === 'string') {
            classList = classList.split(/\s+/).filter(Boolean);
          }

          classList.forEach(function (className) {
            if (target.forEach) {
              target.forEach(function (elem) {
                condition ? elem.classList.add(className) : elem.classList.remove(className);
              });
            } else {
              condition ? target.classList.add(className) : target.classList.remove(className);
            }
          });
        };

        var addClass = function addClass(target, classList) {
          toggleClass(target, classList, true);
        };

        var removeClass = function removeClass(target, classList) {
          toggleClass(target, classList, false);
        };

        var getChildByClass = function getChildByClass(elem, className) {
          for (var i = 0; i < elem.childNodes.length; i++) {
            if (hasClass(elem.childNodes[i], className)) {
              return elem.childNodes[i];
            }
          }
        };

        var applyNumericalStyle = function applyNumericalStyle(elem, property, value) {
          if (value || parseInt(value) === 0) {
            elem.style[property] = typeof value === 'number' ? value + 'px' : value;
          } else {
            elem.style.removeProperty(property);
          }
        };

        var show = function show(elem) {
          var display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flex';
          elem.style.opacity = '';
          elem.style.display = display;
        };

        var hide = function hide(elem) {
          elem.style.opacity = '';
          elem.style.display = 'none';
        };

        var toggle = function toggle(elem, condition, display) {
          condition ? show(elem, display) : hide(elem);
        }; // borrowed from jquery $(elem).is(':visible') implementation


        var isVisible = function isVisible(elem) {
          return !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));
        };

        var isScrollable = function isScrollable(elem) {
          return !!(elem.scrollHeight > elem.clientHeight);
        }; // borrowed from https://stackoverflow.com/a/46352119


        var hasCssAnimation = function hasCssAnimation(elem) {
          var style = window.getComputedStyle(elem);
          var animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');
          var transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');
          return animDuration > 0 || transDuration > 0;
        };

        var contains = function contains(haystack, needle) {
          if (typeof haystack.contains === 'function') {
            return haystack.contains(needle);
          }
        };

        var getContainer = function getContainer() {
          return document.body.querySelector('.' + swalClasses.container);
        };

        var elementBySelector = function elementBySelector(selectorString) {
          var container = getContainer();
          return container ? container.querySelector(selectorString) : null;
        };

        var elementByClass = function elementByClass(className) {
          return elementBySelector('.' + className);
        };

        var getPopup = function getPopup() {
          return elementByClass(swalClasses.popup);
        };

        var getIcons = function getIcons() {
          var popup = getPopup();
          return toArray(popup.querySelectorAll('.' + swalClasses.icon));
        };

        var getIcon = function getIcon() {
          var visibleIcon = getIcons().filter(function (icon) {
            return isVisible(icon);
          });
          return visibleIcon.length ? visibleIcon[0] : null;
        };

        var getTitle = function getTitle() {
          return elementByClass(swalClasses.title);
        };

        var getContent = function getContent() {
          return elementByClass(swalClasses.content);
        };

        var getImage = function getImage() {
          return elementByClass(swalClasses.image);
        };

        var getProgressSteps = function getProgressSteps() {
          return elementByClass(swalClasses['progress-steps']);
        };

        var getValidationMessage = function getValidationMessage() {
          return elementByClass(swalClasses['validation-message']);
        };

        var getConfirmButton = function getConfirmButton() {
          return elementBySelector('.' + swalClasses.actions + ' .' + swalClasses.confirm);
        };

        var getCancelButton = function getCancelButton() {
          return elementBySelector('.' + swalClasses.actions + ' .' + swalClasses.cancel);
        };

        var getActions = function getActions() {
          return elementByClass(swalClasses.actions);
        };

        var getHeader = function getHeader() {
          return elementByClass(swalClasses.header);
        };

        var getFooter = function getFooter() {
          return elementByClass(swalClasses.footer);
        };

        var getCloseButton = function getCloseButton() {
          return elementByClass(swalClasses.close);
        }; // https://github.com/jkup/focusable/blob/master/index.js


        var focusable = "\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex=\"0\"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n";

        var getFocusableElements = function getFocusableElements() {
          var focusableElementsWithTabindex = toArray(getPopup().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')) // sort according to tabindex
          .sort(function (a, b) {
            a = parseInt(a.getAttribute('tabindex'));
            b = parseInt(b.getAttribute('tabindex'));

            if (a > b) {
              return 1;
            } else if (a < b) {
              return -1;
            }

            return 0;
          });
          var otherFocusableElements = toArray(getPopup().querySelectorAll(focusable)).filter(function (el) {
            return el.getAttribute('tabindex') !== '-1';
          });
          return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter(function (el) {
            return isVisible(el);
          });
        };

        var isModal = function isModal() {
          return !isToast() && !document.body.classList.contains(swalClasses['no-backdrop']);
        };

        var isToast = function isToast() {
          return document.body.classList.contains(swalClasses['toast-shown']);
        };

        var isLoading = function isLoading() {
          return getPopup().hasAttribute('data-loading');
        }; // Detect Node env


        var isNodeEnv = function isNodeEnv() {
          return typeof window === 'undefined' || typeof document === 'undefined';
        };

        var sweetHTML = "\n <div aria-labelledby=\"".concat(swalClasses.title, "\" aria-describedby=\"").concat(swalClasses.content, "\" class=\"").concat(swalClasses.popup, "\" tabindex=\"-1\">\n   <div class=\"").concat(swalClasses.header, "\">\n     <ul class=\"").concat(swalClasses['progress-steps'], "\"></ul>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.error, "\">\n       <span class=\"swal2-x-mark\"><span class=\"swal2-x-mark-line-left\"></span><span class=\"swal2-x-mark-line-right\"></span></span>\n     </div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.question, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.warning, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.info, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.success, "\">\n       <div class=\"swal2-success-circular-line-left\"></div>\n       <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\n       <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\n       <div class=\"swal2-success-circular-line-right\"></div>\n     </div>\n     <img class=\"").concat(swalClasses.image, "\" />\n     <h2 class=\"").concat(swalClasses.title, "\" id=\"").concat(swalClasses.title, "\"></h2>\n     <button type=\"button\" class=\"").concat(swalClasses.close, "\"></button>\n   </div>\n   <div class=\"").concat(swalClasses.content, "\">\n     <div id=\"").concat(swalClasses.content, "\"></div>\n     <input class=\"").concat(swalClasses.input, "\" />\n     <input type=\"file\" class=\"").concat(swalClasses.file, "\" />\n     <div class=\"").concat(swalClasses.range, "\">\n       <input type=\"range\" />\n       <output></output>\n     </div>\n     <select class=\"").concat(swalClasses.select, "\"></select>\n     <div class=\"").concat(swalClasses.radio, "\"></div>\n     <label for=\"").concat(swalClasses.checkbox, "\" class=\"").concat(swalClasses.checkbox, "\">\n       <input type=\"checkbox\" />\n       <span class=\"").concat(swalClasses.label, "\"></span>\n     </label>\n     <textarea class=\"").concat(swalClasses.textarea, "\"></textarea>\n     <div class=\"").concat(swalClasses['validation-message'], "\" id=\"").concat(swalClasses['validation-message'], "\"></div>\n   </div>\n   <div class=\"").concat(swalClasses.actions, "\">\n     <button type=\"button\" class=\"").concat(swalClasses.confirm, "\">OK</button>\n     <button type=\"button\" class=\"").concat(swalClasses.cancel, "\">Cancel</button>\n   </div>\n   <div class=\"").concat(swalClasses.footer, "\">\n   </div>\n </div>\n").replace(/(^|\n)\s*/g, '');

        var resetOldContainer = function resetOldContainer() {
          var oldContainer = getContainer();

          if (!oldContainer) {
            return;
          }

          oldContainer.parentNode.removeChild(oldContainer);
          removeClass([document.documentElement, document.body], [swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['has-column']]);
        };

        var oldInputVal; // IE11 workaround, see #1109 for details

        var resetValidationMessage = function resetValidationMessage(e) {
          if (Swal.isVisible() && oldInputVal !== e.target.value) {
            Swal.resetValidationMessage();
          }

          oldInputVal = e.target.value;
        };

        var addInputChangeListeners = function addInputChangeListeners() {
          var content = getContent();
          var input = getChildByClass(content, swalClasses.input);
          var file = getChildByClass(content, swalClasses.file);
          var range = content.querySelector(".".concat(swalClasses.range, " input"));
          var rangeOutput = content.querySelector(".".concat(swalClasses.range, " output"));
          var select = getChildByClass(content, swalClasses.select);
          var checkbox = content.querySelector(".".concat(swalClasses.checkbox, " input"));
          var textarea = getChildByClass(content, swalClasses.textarea);
          input.oninput = resetValidationMessage;
          file.onchange = resetValidationMessage;
          select.onchange = resetValidationMessage;
          checkbox.onchange = resetValidationMessage;
          textarea.oninput = resetValidationMessage;

          range.oninput = function (e) {
            resetValidationMessage(e);
            rangeOutput.value = range.value;
          };

          range.onchange = function (e) {
            resetValidationMessage(e);
            range.nextSibling.value = range.value;
          };
        };

        var getTarget = function getTarget(target) {
          return typeof target === 'string' ? document.querySelector(target) : target;
        };

        var setupAccessibility = function setupAccessibility(params) {
          var popup = getPopup();
          popup.setAttribute('role', params.toast ? 'alert' : 'dialog');
          popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');

          if (!params.toast) {
            popup.setAttribute('aria-modal', 'true');
          }
        };

        var setupRTL = function setupRTL(targetElement) {
          if (window.getComputedStyle(targetElement).direction === 'rtl') {
            addClass(getContainer(), swalClasses.rtl);
          }
        };
        /*
         * Add modal + backdrop to DOM
         */


        var init = function init(params) {
          // Clean up the old popup container if it exists
          resetOldContainer();
          /* istanbul ignore if */

          if (isNodeEnv()) {
            error('SweetAlert2 requires document to initialize');
            return;
          }

          var container = document.createElement('div');
          container.className = swalClasses.container;
          container.innerHTML = sweetHTML;
          var targetElement = getTarget(params.target);
          targetElement.appendChild(container);
          setupAccessibility(params);
          setupRTL(targetElement);
          addInputChangeListeners();
        };

        var parseHtmlToContainer = function parseHtmlToContainer(param, target) {
          // DOM element
          if (param instanceof HTMLElement) {
            target.appendChild(param); // JQuery element(s)
          } else if (_typeof(param) === 'object') {
            handleJqueryElem(target, param); // Plain string
          } else if (param) {
            target.innerHTML = param;
          }
        };

        var handleJqueryElem = function handleJqueryElem(target, elem) {
          target.innerHTML = '';

          if (0 in elem) {
            for (var i = 0; (i in elem); i++) {
              target.appendChild(elem[i].cloneNode(true));
            }
          } else {
            target.appendChild(elem.cloneNode(true));
          }
        };

        var animationEndEvent = function () {
          // Prevent run in Node env

          /* istanbul ignore if */
          if (isNodeEnv()) {
            return false;
          }

          var testEl = document.createElement('div');
          var transEndEventNames = {
            WebkitAnimation: 'webkitAnimationEnd',
            OAnimation: 'oAnimationEnd oanimationend',
            animation: 'animationend'
          };

          for (var i in transEndEventNames) {
            if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== 'undefined') {
              return transEndEventNames[i];
            }
          }

          return false;
        }(); // Measure width of scrollbar
        // https://github.com/twbs/bootstrap/blob/master/js/modal.js#L279-L286


        var measureScrollbar = function measureScrollbar() {
          var supportsTouch = 'ontouchstart' in window || navigator.msMaxTouchPoints;

          if (supportsTouch) {
            return 0;
          }

          var scrollDiv = document.createElement('div');
          scrollDiv.style.width = '50px';
          scrollDiv.style.height = '50px';
          scrollDiv.style.overflow = 'scroll';
          document.body.appendChild(scrollDiv);
          var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
          document.body.removeChild(scrollDiv);
          return scrollbarWidth;
        };

        var renderActions = function renderActions(instance, params) {
          var actions = getActions();
          var confirmButton = getConfirmButton();
          var cancelButton = getCancelButton(); // Actions (buttons) wrapper

          if (!params.showConfirmButton && !params.showCancelButton) {
            hide(actions);
          } // Custom class


          applyCustomClass(actions, params.customClass, 'actions'); // Render confirm button

          renderButton(confirmButton, 'confirm', params); // render Cancel Button

          renderButton(cancelButton, 'cancel', params);

          if (params.buttonsStyling) {
            handleButtonsStyling(confirmButton, cancelButton, params);
          } else {
            removeClass([confirmButton, cancelButton], swalClasses.styled);
            confirmButton.style.backgroundColor = confirmButton.style.borderLeftColor = confirmButton.style.borderRightColor = '';
            cancelButton.style.backgroundColor = cancelButton.style.borderLeftColor = cancelButton.style.borderRightColor = '';
          }

          if (params.reverseButtons) {
            confirmButton.parentNode.insertBefore(cancelButton, confirmButton);
          }
        };

        function handleButtonsStyling(confirmButton, cancelButton, params) {
          addClass([confirmButton, cancelButton], swalClasses.styled); // Buttons background colors

          if (params.confirmButtonColor) {
            confirmButton.style.backgroundColor = params.confirmButtonColor;
          }

          if (params.cancelButtonColor) {
            cancelButton.style.backgroundColor = params.cancelButtonColor;
          } // Loading state


          var confirmButtonBackgroundColor = window.getComputedStyle(confirmButton).getPropertyValue('background-color');
          confirmButton.style.borderLeftColor = confirmButtonBackgroundColor;
          confirmButton.style.borderRightColor = confirmButtonBackgroundColor;
        }

        function renderButton(button, buttonType, params) {
          toggle(button, params['showC' + buttonType.substring(1) + 'Button'], 'inline-block');
          button.innerHTML = params[buttonType + 'ButtonText']; // Set caption text

          button.setAttribute('aria-label', params[buttonType + 'ButtonAriaLabel']); // ARIA label
          // Add buttons custom classes

          button.className = swalClasses[buttonType];
          applyCustomClass(button, params.customClass, buttonType + 'Button');
          addClass(button, params[buttonType + 'ButtonClass']);
        }

        function handleBackdropParam(container, backdrop) {
          if (typeof backdrop === 'string') {
            container.style.background = backdrop;
          } else if (!backdrop) {
            addClass([document.documentElement, document.body], swalClasses['no-backdrop']);
          }
        }

        function handlePositionParam(container, position) {
          if (position in swalClasses) {
            addClass(container, swalClasses[position]);
          } else {
            warn('The "position" parameter is not valid, defaulting to "center"');
            addClass(container, swalClasses.center);
          }
        }

        function handleGrowParam(container, grow) {
          if (grow && typeof grow === 'string') {
            var growClass = 'grow-' + grow;

            if (growClass in swalClasses) {
              addClass(container, swalClasses[growClass]);
            }
          }
        }

        var renderContainer = function renderContainer(instance, params) {
          var container = getContainer();

          if (!container) {
            return;
          }

          handleBackdropParam(container, params.backdrop);

          if (!params.backdrop && params.allowOutsideClick) {
            warn('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`');
          }

          handlePositionParam(container, params.position);
          handleGrowParam(container, params.grow); // Custom class

          applyCustomClass(container, params.customClass, 'container');

          if (params.customContainerClass) {
            // @deprecated
            addClass(container, params.customContainerClass);
          }
        };
        /**
         * This module containts `WeakMap`s for each effectively-"private  property" that a `Swal` has.
         * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
         * This is the approach that Babel will probably take to implement private methods/fields
         *   https://github.com/tc39/proposal-private-methods
         *   https://github.com/babel/babel/pull/7555
         * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
         *   then we can use that language feature.
         */


        var privateProps = {
          promise: new WeakMap(),
          innerParams: new WeakMap(),
          domCache: new WeakMap()
        };
        var inputTypes = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea'];

        var renderInput = function renderInput(instance, params) {
          var content = getContent();
          var innerParams = privateProps.innerParams.get(instance);
          var rerender = !innerParams || params.input !== innerParams.input;
          inputTypes.forEach(function (inputType) {
            var inputClass = swalClasses[inputType];
            var inputContainer = getChildByClass(content, inputClass); // set attributes

            setAttributes(inputType, params.inputAttributes); // set class

            setClass(inputContainer, inputClass, params);

            if (rerender) {
              hide(inputContainer);
            }
          });

          if (params.input && rerender) {
            showInput(params);
          }
        };

        var showInput = function showInput(params) {
          if (!renderInputType[params.input]) {
            return error("Unexpected type of input! Expected \"text\", \"email\", \"password\", \"number\", \"tel\", \"select\", \"radio\", \"checkbox\", \"textarea\", \"file\" or \"url\", got \"".concat(params.input, "\""));
          }

          var input = renderInputType[params.input](params);
          show(input); // input autofocus

          setTimeout(function () {
            focusInput(input);
          });
        };

        var removeAttributes = function removeAttributes(input) {
          for (var i = 0; i < input.attributes.length; i++) {
            var attrName = input.attributes[i].name;

            if (!(['type', 'value', 'style'].indexOf(attrName) !== -1)) {
              input.removeAttribute(attrName);
            }
          }
        };

        var setAttributes = function setAttributes(inputType, inputAttributes) {
          var input = getInput(getContent(), inputType);

          if (!input) {
            return;
          }

          removeAttributes(input);

          for (var attr in inputAttributes) {
            // Do not set a placeholder for <input type="range">
            // it'll crash Edge, #1298
            if (inputType === 'range' && attr === 'placeholder') {
              continue;
            }

            input.setAttribute(attr, inputAttributes[attr]);
          }
        };

        var setClass = function setClass(inputContainer, inputClass, params) {
          inputContainer.className = inputClass;

          if (params.inputClass) {
            addClass(inputContainer, params.inputClass);
          }

          if (params.customClass) {
            addClass(inputContainer, params.customClass.input);
          }
        };

        var setInputPlaceholder = function setInputPlaceholder(input, params) {
          if (!input.placeholder || params.inputPlaceholder) {
            input.placeholder = params.inputPlaceholder;
          }
        };

        var renderInputType = {};

        renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = function (params) {
          var input = getChildByClass(getContent(), swalClasses.input);

          if (typeof params.inputValue === 'string' || typeof params.inputValue === 'number') {
            input.value = params.inputValue;
          } else if (!isPromise(params.inputValue)) {
            warn("Unexpected type of inputValue! Expected \"string\", \"number\" or \"Promise\", got \"".concat(_typeof(params.inputValue), "\""));
          }

          setInputPlaceholder(input, params);
          input.type = params.input;
          return input;
        };

        renderInputType.file = function (params) {
          var input = getChildByClass(getContent(), swalClasses.file);
          setInputPlaceholder(input, params);
          input.type = params.input;
          return input;
        };

        renderInputType.range = function (params) {
          var range = getChildByClass(getContent(), swalClasses.range);
          var rangeInput = range.querySelector('input');
          var rangeOutput = range.querySelector('output');
          rangeInput.value = params.inputValue;
          rangeInput.type = params.input;
          rangeOutput.value = params.inputValue;
          return range;
        };

        renderInputType.select = function (params) {
          var select = getChildByClass(getContent(), swalClasses.select);
          select.innerHTML = '';

          if (params.inputPlaceholder) {
            var placeholder = document.createElement('option');
            placeholder.innerHTML = params.inputPlaceholder;
            placeholder.value = '';
            placeholder.disabled = true;
            placeholder.selected = true;
            select.appendChild(placeholder);
          }

          return select;
        };

        renderInputType.radio = function () {
          var radio = getChildByClass(getContent(), swalClasses.radio);
          radio.innerHTML = '';
          return radio;
        };

        renderInputType.checkbox = function (params) {
          var checkbox = getChildByClass(getContent(), swalClasses.checkbox);
          var checkboxInput = getInput(getContent(), 'checkbox');
          checkboxInput.type = 'checkbox';
          checkboxInput.value = 1;
          checkboxInput.id = swalClasses.checkbox;
          checkboxInput.checked = Boolean(params.inputValue);
          var label = checkbox.querySelector('span');
          label.innerHTML = params.inputPlaceholder;
          return checkbox;
        };

        renderInputType.textarea = function (params) {
          var textarea = getChildByClass(getContent(), swalClasses.textarea);
          textarea.value = params.inputValue;
          setInputPlaceholder(textarea, params);

          if ('MutationObserver' in window) {
            // #1699
            var initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);
            var popupPadding = parseInt(window.getComputedStyle(getPopup()).paddingLeft) + parseInt(window.getComputedStyle(getPopup()).paddingRight);

            var outputsize = function outputsize() {
              var contentWidth = textarea.offsetWidth + popupPadding;

              if (contentWidth > initialPopupWidth) {
                getPopup().style.width = contentWidth + 'px';
              } else {
                getPopup().style.width = null;
              }
            };

            new MutationObserver(outputsize).observe(textarea, {
              attributes: true,
              attributeFilter: ['style']
            });
          }

          return textarea;
        };

        var renderContent = function renderContent(instance, params) {
          var content = getContent().querySelector('#' + swalClasses.content); // Content as HTML

          if (params.html) {
            parseHtmlToContainer(params.html, content);
            show(content, 'block'); // Content as plain text
          } else if (params.text) {
            content.textContent = params.text;
            show(content, 'block'); // No content
          } else {
            hide(content);
          }

          renderInput(instance, params); // Custom class

          applyCustomClass(getContent(), params.customClass, 'content');
        };

        var renderFooter = function renderFooter(instance, params) {
          var footer = getFooter();
          toggle(footer, params.footer);

          if (params.footer) {
            parseHtmlToContainer(params.footer, footer);
          } // Custom class


          applyCustomClass(footer, params.customClass, 'footer');
        };

        var renderCloseButton = function renderCloseButton(instance, params) {
          var closeButton = getCloseButton();
          closeButton.innerHTML = params.closeButtonHtml; // Custom class

          applyCustomClass(closeButton, params.customClass, 'closeButton');
          toggle(closeButton, params.showCloseButton);
          closeButton.setAttribute('aria-label', params.closeButtonAriaLabel);
        };

        var renderIcon = function renderIcon(instance, params) {
          var innerParams = privateProps.innerParams.get(instance); // if the icon with the given type already rendered,
          // apply the custom class without re-rendering the icon

          if (innerParams && params.type === innerParams.type && getIcon()) {
            applyCustomClass(getIcon(), params.customClass, 'icon');
            return;
          }

          hideAllIcons();

          if (!params.type) {
            return;
          }

          adjustSuccessIconBackgoundColor();

          if (Object.keys(iconTypes).indexOf(params.type) !== -1) {
            var icon = elementBySelector(".".concat(swalClasses.icon, ".").concat(iconTypes[params.type]));
            show(icon); // Custom class

            applyCustomClass(icon, params.customClass, 'icon'); // Animate icon

            toggleClass(icon, "swal2-animate-".concat(params.type, "-icon"), params.animation);
          } else {
            error("Unknown type! Expected \"success\", \"error\", \"warning\", \"info\" or \"question\", got \"".concat(params.type, "\""));
          }
        };

        var hideAllIcons = function hideAllIcons() {
          var icons = getIcons();

          for (var i = 0; i < icons.length; i++) {
            hide(icons[i]);
          }
        }; // Adjust success icon background color to match the popup background color


        var adjustSuccessIconBackgoundColor = function adjustSuccessIconBackgoundColor() {
          var popup = getPopup();
          var popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');
          var successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');

          for (var i = 0; i < successIconParts.length; i++) {
            successIconParts[i].style.backgroundColor = popupBackgroundColor;
          }
        };

        var renderImage = function renderImage(instance, params) {
          var image = getImage();

          if (!params.imageUrl) {
            return hide(image);
          }

          show(image); // Src, alt

          image.setAttribute('src', params.imageUrl);
          image.setAttribute('alt', params.imageAlt); // Width, height

          applyNumericalStyle(image, 'width', params.imageWidth);
          applyNumericalStyle(image, 'height', params.imageHeight); // Class

          image.className = swalClasses.image;
          applyCustomClass(image, params.customClass, 'image');

          if (params.imageClass) {
            addClass(image, params.imageClass);
          }
        };

        var createStepElement = function createStepElement(step) {
          var stepEl = document.createElement('li');
          addClass(stepEl, swalClasses['progress-step']);
          stepEl.innerHTML = step;
          return stepEl;
        };

        var createLineElement = function createLineElement(params) {
          var lineEl = document.createElement('li');
          addClass(lineEl, swalClasses['progress-step-line']);

          if (params.progressStepsDistance) {
            lineEl.style.width = params.progressStepsDistance;
          }

          return lineEl;
        };

        var renderProgressSteps = function renderProgressSteps(instance, params) {
          var progressStepsContainer = getProgressSteps();

          if (!params.progressSteps || params.progressSteps.length === 0) {
            return hide(progressStepsContainer);
          }

          show(progressStepsContainer);
          progressStepsContainer.innerHTML = '';
          var currentProgressStep = parseInt(params.currentProgressStep === null ? Swal.getQueueStep() : params.currentProgressStep);

          if (currentProgressStep >= params.progressSteps.length) {
            warn('Invalid currentProgressStep parameter, it should be less than progressSteps.length ' + '(currentProgressStep like JS arrays starts from 0)');
          }

          params.progressSteps.forEach(function (step, index) {
            var stepEl = createStepElement(step);
            progressStepsContainer.appendChild(stepEl);

            if (index === currentProgressStep) {
              addClass(stepEl, swalClasses['active-progress-step']);
            }

            if (index !== params.progressSteps.length - 1) {
              var lineEl = createLineElement(step);
              progressStepsContainer.appendChild(lineEl);
            }
          });
        };

        var renderTitle = function renderTitle(instance, params) {
          var title = getTitle();
          toggle(title, params.title || params.titleText);

          if (params.title) {
            parseHtmlToContainer(params.title, title);
          }

          if (params.titleText) {
            title.innerText = params.titleText;
          } // Custom class


          applyCustomClass(title, params.customClass, 'title');
        };

        var renderHeader = function renderHeader(instance, params) {
          var header = getHeader(); // Custom class

          applyCustomClass(header, params.customClass, 'header'); // Progress steps

          renderProgressSteps(instance, params); // Icon

          renderIcon(instance, params); // Image

          renderImage(instance, params); // Title

          renderTitle(instance, params); // Close button

          renderCloseButton(instance, params);
        };

        var renderPopup = function renderPopup(instance, params) {
          var popup = getPopup(); // Width

          applyNumericalStyle(popup, 'width', params.width); // Padding

          applyNumericalStyle(popup, 'padding', params.padding); // Background

          if (params.background) {
            popup.style.background = params.background;
          } // Default Class


          popup.className = swalClasses.popup;

          if (params.toast) {
            addClass([document.documentElement, document.body], swalClasses['toast-shown']);
            addClass(popup, swalClasses.toast);
          } else {
            addClass(popup, swalClasses.modal);
          } // Custom class


          applyCustomClass(popup, params.customClass, 'popup');

          if (typeof params.customClass === 'string') {
            addClass(popup, params.customClass);
          } // CSS animation


          toggleClass(popup, swalClasses.noanimation, !params.animation);
        };

        var render = function render(instance, params) {
          renderPopup(instance, params);
          renderContainer(instance, params);
          renderHeader(instance, params);
          renderContent(instance, params);
          renderActions(instance, params);
          renderFooter(instance, params);

          if (typeof params.onRender === 'function') {
            params.onRender(getPopup());
          }
        };
        /*
         * Global function to determine if SweetAlert2 popup is shown
         */


        var isVisible$1 = function isVisible$$1() {
          return isVisible(getPopup());
        };
        /*
         * Global function to click 'Confirm' button
         */


        var clickConfirm = function clickConfirm() {
          return getConfirmButton() && getConfirmButton().click();
        };
        /*
         * Global function to click 'Cancel' button
         */


        var clickCancel = function clickCancel() {
          return getCancelButton() && getCancelButton().click();
        };

        function fire() {
          var Swal = this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _construct(Swal, args);
        }
        /**
         * Returns an extended version of `Swal` containing `params` as defaults.
         * Useful for reusing Swal configuration.
         *
         * For example:
         *
         * Before:
         * const textPromptOptions = { input: 'text', showCancelButton: true }
         * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })
         * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })
         *
         * After:
         * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })
         * const {value: firstName} = await TextPrompt('What is your first name?')
         * const {value: lastName} = await TextPrompt('What is your last name?')
         *
         * @param mixinParams
         */


        function mixin(mixinParams) {
          var MixinSwal = /*#__PURE__*/function (_this) {
            _inherits(MixinSwal, _this);

            function MixinSwal() {
              _classCallCheck(this, MixinSwal);

              return _possibleConstructorReturn(this, _getPrototypeOf(MixinSwal).apply(this, arguments));
            }

            _createClass(MixinSwal, [{
              key: "_main",
              value: function _main(params) {
                return _get(_getPrototypeOf(MixinSwal.prototype), "_main", this).call(this, _extends({}, mixinParams, params));
              }
            }]);

            return MixinSwal;
          }(this);

          return MixinSwal;
        } // private global state for the queue feature


        var currentSteps = [];
        /*
         * Global function for chaining sweetAlert popups
         */

        var queue = function queue(steps) {
          var Swal = this;
          currentSteps = steps;

          var resetAndResolve = function resetAndResolve(resolve, value) {
            currentSteps = [];
            document.body.removeAttribute('data-swal2-queue-step');
            resolve(value);
          };

          var queueResult = [];
          return new Promise(function (resolve) {
            (function step(i, callback) {
              if (i < currentSteps.length) {
                document.body.setAttribute('data-swal2-queue-step', i);
                Swal.fire(currentSteps[i]).then(function (result) {
                  if (typeof result.value !== 'undefined') {
                    queueResult.push(result.value);
                    step(i + 1, callback);
                  } else {
                    resetAndResolve(resolve, {
                      dismiss: result.dismiss
                    });
                  }
                });
              } else {
                resetAndResolve(resolve, {
                  value: queueResult
                });
              }
            })(0);
          });
        };
        /*
         * Global function for getting the index of current popup in queue
         */


        var getQueueStep = function getQueueStep() {
          return document.body.getAttribute('data-swal2-queue-step');
        };
        /*
         * Global function for inserting a popup to the queue
         */


        var insertQueueStep = function insertQueueStep(step, index) {
          if (index && index < currentSteps.length) {
            return currentSteps.splice(index, 0, step);
          }

          return currentSteps.push(step);
        };
        /*
         * Global function for deleting a popup from the queue
         */


        var deleteQueueStep = function deleteQueueStep(index) {
          if (typeof currentSteps[index] !== 'undefined') {
            currentSteps.splice(index, 1);
          }
        };
        /**
         * Show spinner instead of Confirm button and disable Cancel button
         */


        var showLoading = function showLoading() {
          var popup = getPopup();

          if (!popup) {
            Swal.fire('');
          }

          popup = getPopup();
          var actions = getActions();
          var confirmButton = getConfirmButton();
          var cancelButton = getCancelButton();
          show(actions);
          show(confirmButton);
          addClass([popup, actions], swalClasses.loading);
          confirmButton.disabled = true;
          cancelButton.disabled = true;
          popup.setAttribute('data-loading', true);
          popup.setAttribute('aria-busy', true);
          popup.focus();
        };

        var RESTORE_FOCUS_TIMEOUT = 100;
        var globalState = {};

        var focusPreviousActiveElement = function focusPreviousActiveElement() {
          if (globalState.previousActiveElement && globalState.previousActiveElement.focus) {
            globalState.previousActiveElement.focus();
            globalState.previousActiveElement = null;
          } else if (document.body) {
            document.body.focus();
          }
        }; // Restore previous active (focused) element


        var restoreActiveElement = function restoreActiveElement() {
          return new Promise(function (resolve) {
            var x = window.scrollX;
            var y = window.scrollY;
            globalState.restoreFocusTimeout = setTimeout(function () {
              focusPreviousActiveElement();
              resolve();
            }, RESTORE_FOCUS_TIMEOUT); // issues/900

            if (typeof x !== 'undefined' && typeof y !== 'undefined') {
              // IE doesn't have scrollX/scrollY support
              window.scrollTo(x, y);
            }
          });
        };
        /**
         * If `timer` parameter is set, returns number of milliseconds of timer remained.
         * Otherwise, returns undefined.
         */


        var getTimerLeft = function getTimerLeft() {
          return globalState.timeout && globalState.timeout.getTimerLeft();
        };
        /**
         * Stop timer. Returns number of milliseconds of timer remained.
         * If `timer` parameter isn't set, returns undefined.
         */


        var stopTimer = function stopTimer() {
          return globalState.timeout && globalState.timeout.stop();
        };
        /**
         * Resume timer. Returns number of milliseconds of timer remained.
         * If `timer` parameter isn't set, returns undefined.
         */


        var resumeTimer = function resumeTimer() {
          return globalState.timeout && globalState.timeout.start();
        };
        /**
         * Resume timer. Returns number of milliseconds of timer remained.
         * If `timer` parameter isn't set, returns undefined.
         */


        var toggleTimer = function toggleTimer() {
          var timer = globalState.timeout;
          return timer && (timer.running ? timer.stop() : timer.start());
        };
        /**
         * Increase timer. Returns number of milliseconds of an updated timer.
         * If `timer` parameter isn't set, returns undefined.
         */


        var increaseTimer = function increaseTimer(n) {
          return globalState.timeout && globalState.timeout.increase(n);
        };
        /**
         * Check if timer is running. Returns true if timer is running
         * or false if timer is paused or stopped.
         * If `timer` parameter isn't set, returns undefined
         */


        var isTimerRunning = function isTimerRunning() {
          return globalState.timeout && globalState.timeout.isRunning();
        };

        var defaultParams = {
          title: '',
          titleText: '',
          text: '',
          html: '',
          footer: '',
          type: null,
          toast: false,
          customClass: '',
          customContainerClass: '',
          target: 'body',
          backdrop: true,
          animation: true,
          heightAuto: true,
          allowOutsideClick: true,
          allowEscapeKey: true,
          allowEnterKey: true,
          stopKeydownPropagation: true,
          keydownListenerCapture: false,
          showConfirmButton: true,
          showCancelButton: false,
          preConfirm: null,
          confirmButtonText: 'OK',
          confirmButtonAriaLabel: '',
          confirmButtonColor: null,
          confirmButtonClass: '',
          cancelButtonText: 'Cancel',
          cancelButtonAriaLabel: '',
          cancelButtonColor: null,
          cancelButtonClass: '',
          buttonsStyling: true,
          reverseButtons: false,
          focusConfirm: true,
          focusCancel: false,
          showCloseButton: false,
          closeButtonHtml: '&times;',
          closeButtonAriaLabel: 'Close this dialog',
          showLoaderOnConfirm: false,
          imageUrl: null,
          imageWidth: null,
          imageHeight: null,
          imageAlt: '',
          imageClass: '',
          timer: null,
          width: null,
          padding: null,
          background: null,
          input: null,
          inputPlaceholder: '',
          inputValue: '',
          inputOptions: {},
          inputAutoTrim: true,
          inputClass: '',
          inputAttributes: {},
          inputValidator: null,
          validationMessage: null,
          grow: false,
          position: 'center',
          progressSteps: [],
          currentProgressStep: null,
          progressStepsDistance: null,
          onBeforeOpen: null,
          onOpen: null,
          onRender: null,
          onClose: null,
          onAfterClose: null,
          scrollbarPadding: true
        };
        var updatableParams = ['title', 'titleText', 'text', 'html', 'type', 'customClass', 'showConfirmButton', 'showCancelButton', 'confirmButtonText', 'confirmButtonAriaLabel', 'confirmButtonColor', 'confirmButtonClass', 'cancelButtonText', 'cancelButtonAriaLabel', 'cancelButtonColor', 'cancelButtonClass', 'buttonsStyling', 'reverseButtons', 'imageUrl', 'imageWidth', 'imageHeigth', 'imageAlt', 'imageClass', 'progressSteps', 'currentProgressStep'];
        var deprecatedParams = {
          customContainerClass: 'customClass',
          confirmButtonClass: 'customClass',
          cancelButtonClass: 'customClass',
          imageClass: 'customClass',
          inputClass: 'customClass'
        };
        var toastIncompatibleParams = ['allowOutsideClick', 'allowEnterKey', 'backdrop', 'focusConfirm', 'focusCancel', 'heightAuto', 'keydownListenerCapture'];
        /**
         * Is valid parameter
         * @param {String} paramName
         */

        var isValidParameter = function isValidParameter(paramName) {
          return Object.prototype.hasOwnProperty.call(defaultParams, paramName);
        };
        /**
         * Is valid parameter for Swal.update() method
         * @param {String} paramName
         */


        var isUpdatableParameter = function isUpdatableParameter(paramName) {
          return updatableParams.indexOf(paramName) !== -1;
        };
        /**
         * Is deprecated parameter
         * @param {String} paramName
         */


        var isDeprecatedParameter = function isDeprecatedParameter(paramName) {
          return deprecatedParams[paramName];
        };

        var checkIfParamIsValid = function checkIfParamIsValid(param) {
          if (!isValidParameter(param)) {
            warn("Unknown parameter \"".concat(param, "\""));
          }
        };

        var checkIfToastParamIsValid = function checkIfToastParamIsValid(param) {
          if (toastIncompatibleParams.indexOf(param) !== -1) {
            warn("The parameter \"".concat(param, "\" is incompatible with toasts"));
          }
        };

        var checkIfParamIsDeprecated = function checkIfParamIsDeprecated(param) {
          if (isDeprecatedParameter(param)) {
            warnAboutDepreation(param, isDeprecatedParameter(param));
          }
        };
        /**
         * Show relevant warnings for given params
         *
         * @param params
         */


        var showWarningsForParams = function showWarningsForParams(params) {
          for (var param in params) {
            checkIfParamIsValid(param);

            if (params.toast) {
              checkIfToastParamIsValid(param);
            }

            checkIfParamIsDeprecated();
          }
        };

        var staticMethods = Object.freeze({
          isValidParameter: isValidParameter,
          isUpdatableParameter: isUpdatableParameter,
          isDeprecatedParameter: isDeprecatedParameter,
          argsToParams: argsToParams,
          isVisible: isVisible$1,
          clickConfirm: clickConfirm,
          clickCancel: clickCancel,
          getContainer: getContainer,
          getPopup: getPopup,
          getTitle: getTitle,
          getContent: getContent,
          getImage: getImage,
          getIcon: getIcon,
          getIcons: getIcons,
          getCloseButton: getCloseButton,
          getActions: getActions,
          getConfirmButton: getConfirmButton,
          getCancelButton: getCancelButton,
          getHeader: getHeader,
          getFooter: getFooter,
          getFocusableElements: getFocusableElements,
          getValidationMessage: getValidationMessage,
          isLoading: isLoading,
          fire: fire,
          mixin: mixin,
          queue: queue,
          getQueueStep: getQueueStep,
          insertQueueStep: insertQueueStep,
          deleteQueueStep: deleteQueueStep,
          showLoading: showLoading,
          enableLoading: showLoading,
          getTimerLeft: getTimerLeft,
          stopTimer: stopTimer,
          resumeTimer: resumeTimer,
          toggleTimer: toggleTimer,
          increaseTimer: increaseTimer,
          isTimerRunning: isTimerRunning
        });
        /**
         * Enables buttons and hide loader.
         */

        function hideLoading() {
          var innerParams = privateProps.innerParams.get(this);
          var domCache = privateProps.domCache.get(this);

          if (!innerParams.showConfirmButton) {
            hide(domCache.confirmButton);

            if (!innerParams.showCancelButton) {
              hide(domCache.actions);
            }
          }

          removeClass([domCache.popup, domCache.actions], swalClasses.loading);
          domCache.popup.removeAttribute('aria-busy');
          domCache.popup.removeAttribute('data-loading');
          domCache.confirmButton.disabled = false;
          domCache.cancelButton.disabled = false;
        }

        function getInput$1(instance) {
          var innerParams = privateProps.innerParams.get(instance || this);
          var domCache = privateProps.domCache.get(instance || this);

          if (!domCache) {
            return null;
          }

          return getInput(domCache.content, innerParams.input);
        }

        var fixScrollbar = function fixScrollbar() {
          // for queues, do not do this more than once
          if (states.previousBodyPadding !== null) {
            return;
          } // if the body has overflow


          if (document.body.scrollHeight > window.innerHeight) {
            // add padding so the content doesn't shift after removal of scrollbar
            states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'));
            document.body.style.paddingRight = states.previousBodyPadding + measureScrollbar() + 'px';
          }
        };

        var undoScrollbar = function undoScrollbar() {
          if (states.previousBodyPadding !== null) {
            document.body.style.paddingRight = states.previousBodyPadding + 'px';
            states.previousBodyPadding = null;
          }
        };
        /* istanbul ignore next */


        var iOSfix = function iOSfix() {
          var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

          if (iOS && !hasClass(document.body, swalClasses.iosfix)) {
            var offset = document.body.scrollTop;
            document.body.style.top = offset * -1 + 'px';
            addClass(document.body, swalClasses.iosfix);
            lockBodyScroll();
          }
        };

        var lockBodyScroll = function lockBodyScroll() {
          // #1246
          var container = getContainer();
          var preventTouchMove;

          container.ontouchstart = function (e) {
            preventTouchMove = e.target === container || !isScrollable(container) && e.target.tagName !== 'INPUT' // #1603
            ;
          };

          container.ontouchmove = function (e) {
            if (preventTouchMove) {
              e.preventDefault();
              e.stopPropagation();
            }
          };
        };
        /* istanbul ignore next */


        var undoIOSfix = function undoIOSfix() {
          if (hasClass(document.body, swalClasses.iosfix)) {
            var offset = parseInt(document.body.style.top, 10);
            removeClass(document.body, swalClasses.iosfix);
            document.body.style.top = '';
            document.body.scrollTop = offset * -1;
          }
        };

        var isIE11 = function isIE11() {
          return !!window.MSInputMethodContext && !!document.documentMode;
        }; // Fix IE11 centering sweetalert2/issues/933

        /* istanbul ignore next */


        var fixVerticalPositionIE = function fixVerticalPositionIE() {
          var container = getContainer();
          var popup = getPopup();
          container.style.removeProperty('align-items');

          if (popup.offsetTop < 0) {
            container.style.alignItems = 'flex-start';
          }
        };
        /* istanbul ignore next */


        var IEfix = function IEfix() {
          if (typeof window !== 'undefined' && isIE11()) {
            fixVerticalPositionIE();
            window.addEventListener('resize', fixVerticalPositionIE);
          }
        };
        /* istanbul ignore next */


        var undoIEfix = function undoIEfix() {
          if (typeof window !== 'undefined' && isIE11()) {
            window.removeEventListener('resize', fixVerticalPositionIE);
          }
        }; // Adding aria-hidden="true" to elements outside of the active modal dialog ensures that
        // elements not within the active modal dialog will not be surfaced if a user opens a screen
        // reader’s list of elements (headings, form controls, landmarks, etc.) in the document.


        var setAriaHidden = function setAriaHidden() {
          var bodyChildren = toArray(document.body.children);
          bodyChildren.forEach(function (el) {
            if (el === getContainer() || contains(el, getContainer())) {
              return;
            }

            if (el.hasAttribute('aria-hidden')) {
              el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden'));
            }

            el.setAttribute('aria-hidden', 'true');
          });
        };

        var unsetAriaHidden = function unsetAriaHidden() {
          var bodyChildren = toArray(document.body.children);
          bodyChildren.forEach(function (el) {
            if (el.hasAttribute('data-previous-aria-hidden')) {
              el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden'));
              el.removeAttribute('data-previous-aria-hidden');
            } else {
              el.removeAttribute('aria-hidden');
            }
          });
        };
        /**
         * This module containts `WeakMap`s for each effectively-"private  property" that a `Swal` has.
         * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
         * This is the approach that Babel will probably take to implement private methods/fields
         *   https://github.com/tc39/proposal-private-methods
         *   https://github.com/babel/babel/pull/7555
         * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
         *   then we can use that language feature.
         */


        var privateMethods = {
          swalPromiseResolve: new WeakMap()
        };
        /*
         * Instance method to close sweetAlert
         */

        function removePopupAndResetState(instance, container, isToast, onAfterClose) {
          if (isToast) {
            triggerOnAfterCloseAndDispose(instance, onAfterClose);
          } else {
            restoreActiveElement().then(function () {
              return triggerOnAfterCloseAndDispose(instance, onAfterClose);
            });
            globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {
              capture: globalState.keydownListenerCapture
            });
            globalState.keydownHandlerAdded = false;
          }

          if (container.parentNode) {
            container.parentNode.removeChild(container);
          }

          if (isModal()) {
            undoScrollbar();
            undoIOSfix();
            undoIEfix();
            unsetAriaHidden();
          }

          removeBodyClasses();
        }

        function removeBodyClasses() {
          removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses['height-auto'], swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['toast-column']]);
        }

        function disposeSwal(instance) {
          // Unset this.params so GC will dispose it (#1569)
          delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)

          delete globalState.keydownHandler;
          delete globalState.keydownTarget; // Unset WeakMaps so GC will be able to dispose them (#1569)

          unsetWeakMaps(privateProps);
          unsetWeakMaps(privateMethods);
        }

        function close(resolveValue) {
          var popup = getPopup();

          if (!popup || hasClass(popup, swalClasses.hide)) {
            return;
          }

          var innerParams = privateProps.innerParams.get(this);

          if (!innerParams) {
            return;
          }

          var swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);
          removeClass(popup, swalClasses.show);
          addClass(popup, swalClasses.hide);
          handlePopupAnimation(this, popup, innerParams); // Resolve Swal promise

          swalPromiseResolve(resolveValue || {});
        }

        var handlePopupAnimation = function handlePopupAnimation(instance, popup, innerParams) {
          var container = getContainer(); // If animation is supported, animate

          var animationIsSupported = animationEndEvent && hasCssAnimation(popup);
          var onClose = innerParams.onClose,
              onAfterClose = innerParams.onAfterClose;

          if (onClose !== null && typeof onClose === 'function') {
            onClose(popup);
          }

          if (animationIsSupported) {
            animatePopup(instance, popup, container, onAfterClose);
          } else {
            // Otherwise, remove immediately
            removePopupAndResetState(instance, container, isToast(), onAfterClose);
          }
        };

        var animatePopup = function animatePopup(instance, popup, container, onAfterClose) {
          globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, isToast(), onAfterClose);
          popup.addEventListener(animationEndEvent, function (e) {
            if (e.target === popup) {
              globalState.swalCloseEventFinishedCallback();
              delete globalState.swalCloseEventFinishedCallback;
            }
          });
        };

        var unsetWeakMaps = function unsetWeakMaps(obj) {
          for (var i in obj) {
            obj[i] = new WeakMap();
          }
        };

        var triggerOnAfterCloseAndDispose = function triggerOnAfterCloseAndDispose(instance, onAfterClose) {
          setTimeout(function () {
            if (onAfterClose !== null && typeof onAfterClose === 'function') {
              onAfterClose();
            }

            if (!getPopup()) {
              disposeSwal(instance);
            }
          });
        };

        function setButtonsDisabled(instance, buttons, disabled) {
          var domCache = privateProps.domCache.get(instance);
          buttons.forEach(function (button) {
            domCache[button].disabled = disabled;
          });
        }

        function setInputDisabled(input, disabled) {
          if (!input) {
            return false;
          }

          if (input.type === 'radio') {
            var radiosContainer = input.parentNode.parentNode;
            var radios = radiosContainer.querySelectorAll('input');

            for (var i = 0; i < radios.length; i++) {
              radios[i].disabled = disabled;
            }
          } else {
            input.disabled = disabled;
          }
        }

        function enableButtons() {
          setButtonsDisabled(this, ['confirmButton', 'cancelButton'], false);
        }

        function disableButtons() {
          setButtonsDisabled(this, ['confirmButton', 'cancelButton'], true);
        } // @deprecated


        function enableConfirmButton() {
          warnAboutDepreation('Swal.enableConfirmButton()', "Swal.getConfirmButton().removeAttribute('disabled')");
          setButtonsDisabled(this, ['confirmButton'], false);
        } // @deprecated


        function disableConfirmButton() {
          warnAboutDepreation('Swal.disableConfirmButton()', "Swal.getConfirmButton().setAttribute('disabled', '')");
          setButtonsDisabled(this, ['confirmButton'], true);
        }

        function enableInput() {
          return setInputDisabled(this.getInput(), false);
        }

        function disableInput() {
          return setInputDisabled(this.getInput(), true);
        }

        function showValidationMessage(error) {
          var domCache = privateProps.domCache.get(this);
          domCache.validationMessage.innerHTML = error;
          var popupComputedStyle = window.getComputedStyle(domCache.popup);
          domCache.validationMessage.style.marginLeft = "-".concat(popupComputedStyle.getPropertyValue('padding-left'));
          domCache.validationMessage.style.marginRight = "-".concat(popupComputedStyle.getPropertyValue('padding-right'));
          show(domCache.validationMessage);
          var input = this.getInput();

          if (input) {
            input.setAttribute('aria-invalid', true);
            input.setAttribute('aria-describedBy', swalClasses['validation-message']);
            focusInput(input);
            addClass(input, swalClasses.inputerror);
          }
        } // Hide block with validation message


        function resetValidationMessage$1() {
          var domCache = privateProps.domCache.get(this);

          if (domCache.validationMessage) {
            hide(domCache.validationMessage);
          }

          var input = this.getInput();

          if (input) {
            input.removeAttribute('aria-invalid');
            input.removeAttribute('aria-describedBy');
            removeClass(input, swalClasses.inputerror);
          }
        }

        function getProgressSteps$1() {
          warnAboutDepreation('Swal.getProgressSteps()', "const swalInstance = Swal.fire({progressSteps: ['1', '2', '3']}); const progressSteps = swalInstance.params.progressSteps");
          var innerParams = privateProps.innerParams.get(this);
          return innerParams.progressSteps;
        }

        function setProgressSteps(progressSteps) {
          warnAboutDepreation('Swal.setProgressSteps()', 'Swal.update()');
          var innerParams = privateProps.innerParams.get(this);

          var updatedParams = _extends({}, innerParams, {
            progressSteps: progressSteps
          });

          renderProgressSteps(this, updatedParams);
          privateProps.innerParams.set(this, updatedParams);
        }

        function showProgressSteps() {
          var domCache = privateProps.domCache.get(this);
          show(domCache.progressSteps);
        }

        function hideProgressSteps() {
          var domCache = privateProps.domCache.get(this);
          hide(domCache.progressSteps);
        }

        var Timer = /*#__PURE__*/function () {
          function Timer(callback, delay) {
            _classCallCheck(this, Timer);

            this.callback = callback;
            this.remaining = delay;
            this.running = false;
            this.start();
          }

          _createClass(Timer, [{
            key: "start",
            value: function start() {
              if (!this.running) {
                this.running = true;
                this.started = new Date();
                this.id = setTimeout(this.callback, this.remaining);
              }

              return this.remaining;
            }
          }, {
            key: "stop",
            value: function stop() {
              if (this.running) {
                this.running = false;
                clearTimeout(this.id);
                this.remaining -= new Date() - this.started;
              }

              return this.remaining;
            }
          }, {
            key: "increase",
            value: function increase(n) {
              var running = this.running;

              if (running) {
                this.stop();
              }

              this.remaining += n;

              if (running) {
                this.start();
              }

              return this.remaining;
            }
          }, {
            key: "getTimerLeft",
            value: function getTimerLeft() {
              if (this.running) {
                this.stop();
                this.start();
              }

              return this.remaining;
            }
          }, {
            key: "isRunning",
            value: function isRunning() {
              return this.running;
            }
          }]);

          return Timer;
        }();

        var defaultInputValidators = {
          email: function email(string, validationMessage) {
            return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid email address');
          },
          url: function url(string, validationMessage) {
            // taken from https://stackoverflow.com/a/3809435 with a small change from #1306
            return /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid URL');
          }
        };

        function setDefaultInputValidators(params) {
          // Use default `inputValidator` for supported input types if not provided
          if (!params.inputValidator) {
            Object.keys(defaultInputValidators).forEach(function (key) {
              if (params.input === key) {
                params.inputValidator = defaultInputValidators[key];
              }
            });
          }
        }

        function validateCustomTargetElement(params) {
          // Determine if the custom target element is valid
          if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {
            warn('Target parameter is not valid, defaulting to "body"');
            params.target = 'body';
          }
        }
        /**
         * Set type, text and actions on popup
         *
         * @param params
         * @returns {boolean}
         */


        function setParameters(params) {
          setDefaultInputValidators(params); // showLoaderOnConfirm && preConfirm

          if (params.showLoaderOnConfirm && !params.preConfirm) {
            warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\n' + 'https://sweetalert2.github.io/#ajax-request');
          } // params.animation will be actually used in renderPopup.js
          // but in case when params.animation is a function, we need to call that function
          // before popup (re)initialization, so it'll be possible to check Swal.isVisible()
          // inside the params.animation function


          params.animation = callIfFunction(params.animation);
          validateCustomTargetElement(params); // Replace newlines with <br> in title

          if (typeof params.title === 'string') {
            params.title = params.title.split('\n').join('<br />');
          }

          init(params);
        }

        function swalOpenAnimationFinished(popup, container) {
          popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);
          container.style.overflowY = 'auto';
        }
        /**
         * Open popup, add necessary classes and styles, fix scrollbar
         *
         * @param {Array} params
         */


        var openPopup = function openPopup(params) {
          var container = getContainer();
          var popup = getPopup();

          if (typeof params.onBeforeOpen === 'function') {
            params.onBeforeOpen(popup);
          }

          addClasses(container, popup, params); // scrolling is 'hidden' until animation is done, after that 'auto'

          setScrollingVisibility(container, popup);

          if (isModal()) {
            fixScrollContainer(container, params.scrollbarPadding);
          }

          if (!isToast() && !globalState.previousActiveElement) {
            globalState.previousActiveElement = document.activeElement;
          }

          if (typeof params.onOpen === 'function') {
            setTimeout(function () {
              return params.onOpen(popup);
            });
          }
        };

        var setScrollingVisibility = function setScrollingVisibility(container, popup) {
          if (animationEndEvent && hasCssAnimation(popup)) {
            container.style.overflowY = 'hidden';
            popup.addEventListener(animationEndEvent, swalOpenAnimationFinished.bind(null, popup, container));
          } else {
            container.style.overflowY = 'auto';
          }
        };

        var fixScrollContainer = function fixScrollContainer(container, scrollbarPadding) {
          iOSfix();
          IEfix();
          setAriaHidden();

          if (scrollbarPadding) {
            fixScrollbar();
          } // sweetalert2/issues/1247


          setTimeout(function () {
            container.scrollTop = 0;
          });
        };

        var addClasses = function addClasses(container, popup, params) {
          if (params.animation) {
            addClass(popup, swalClasses.show);
            addClass(container, swalClasses.fade);
          }

          show(popup);
          addClass([document.documentElement, document.body, container], swalClasses.shown);

          if (params.heightAuto && params.backdrop && !params.toast) {
            addClass([document.documentElement, document.body], swalClasses['height-auto']);
          }
        };

        var handleInputOptionsAndValue = function handleInputOptionsAndValue(instance, params) {
          if (params.input === 'select' || params.input === 'radio') {
            handleInputOptions(instance, params);
          } else if (['text', 'email', 'number', 'tel', 'textarea'].indexOf(params.input) !== -1 && isPromise(params.inputValue)) {
            handleInputValue(instance, params);
          }
        };

        var handleInputOptions = function handleInputOptions(instance, params) {
          var content = getContent();

          var processInputOptions = function processInputOptions(inputOptions) {
            return populateInputOptions[params.input](content, formatInputOptions(inputOptions), params);
          };

          if (isPromise(params.inputOptions)) {
            showLoading();
            params.inputOptions.then(function (inputOptions) {
              instance.hideLoading();
              processInputOptions(inputOptions);
            });
          } else if (_typeof(params.inputOptions) === 'object') {
            processInputOptions(params.inputOptions);
          } else {
            error("Unexpected type of inputOptions! Expected object, Map or Promise, got ".concat(_typeof(params.inputOptions)));
          }
        };

        var handleInputValue = function handleInputValue(instance, params) {
          var input = instance.getInput();
          hide(input);
          params.inputValue.then(function (inputValue) {
            input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : inputValue + '';
            show(input);
            input.focus();
            instance.hideLoading();
          })["catch"](function (err) {
            error('Error in inputValue promise: ' + err);
            input.value = '';
            show(input);
            input.focus();
            instance.hideLoading();
          });
        };

        var populateInputOptions = {
          select: function select(content, inputOptions, params) {
            var select = getChildByClass(content, swalClasses.select);
            inputOptions.forEach(function (inputOption) {
              var optionValue = inputOption[0];
              var optionLabel = inputOption[1];
              var option = document.createElement('option');
              option.value = optionValue;
              option.innerHTML = optionLabel;

              if (params.inputValue.toString() === optionValue.toString()) {
                option.selected = true;
              }

              select.appendChild(option);
            });
            select.focus();
          },
          radio: function radio(content, inputOptions, params) {
            var radio = getChildByClass(content, swalClasses.radio);
            inputOptions.forEach(function (inputOption) {
              var radioValue = inputOption[0];
              var radioLabel = inputOption[1];
              var radioInput = document.createElement('input');
              var radioLabelElement = document.createElement('label');
              radioInput.type = 'radio';
              radioInput.name = swalClasses.radio;
              radioInput.value = radioValue;

              if (params.inputValue.toString() === radioValue.toString()) {
                radioInput.checked = true;
              }

              var label = document.createElement('span');
              label.innerHTML = radioLabel;
              label.className = swalClasses.label;
              radioLabelElement.appendChild(radioInput);
              radioLabelElement.appendChild(label);
              radio.appendChild(radioLabelElement);
            });
            var radios = radio.querySelectorAll('input');

            if (radios.length) {
              radios[0].focus();
            }
          }
          /**
           * Converts `inputOptions` into an array of `[value, label]`s
           * @param inputOptions
           */

        };

        var formatInputOptions = function formatInputOptions(inputOptions) {
          var result = [];

          if (typeof Map !== 'undefined' && inputOptions instanceof Map) {
            inputOptions.forEach(function (value, key) {
              result.push([key, value]);
            });
          } else {
            Object.keys(inputOptions).forEach(function (key) {
              result.push([key, inputOptions[key]]);
            });
          }

          return result;
        };

        var handleConfirmButtonClick = function handleConfirmButtonClick(instance, innerParams) {
          instance.disableButtons();

          if (innerParams.input) {
            handleConfirmWithInput(instance, innerParams);
          } else {
            confirm(instance, innerParams, true);
          }
        };

        var handleCancelButtonClick = function handleCancelButtonClick(instance, dismissWith) {
          instance.disableButtons();
          dismissWith(DismissReason.cancel);
        };

        var handleConfirmWithInput = function handleConfirmWithInput(instance, innerParams) {
          var inputValue = getInputValue(instance, innerParams);

          if (innerParams.inputValidator) {
            instance.disableInput();
            var validationPromise = Promise.resolve().then(function () {
              return innerParams.inputValidator(inputValue, innerParams.validationMessage);
            });
            validationPromise.then(function (validationMessage) {
              instance.enableButtons();
              instance.enableInput();

              if (validationMessage) {
                instance.showValidationMessage(validationMessage);
              } else {
                confirm(instance, innerParams, inputValue);
              }
            });
          } else if (!instance.getInput().checkValidity()) {
            instance.enableButtons();
            instance.showValidationMessage(innerParams.validationMessage);
          } else {
            confirm(instance, innerParams, inputValue);
          }
        };

        var succeedWith = function succeedWith(instance, value) {
          instance.closePopup({
            value: value
          });
        };

        var confirm = function confirm(instance, innerParams, value) {
          if (innerParams.showLoaderOnConfirm) {
            showLoading(); // TODO: make showLoading an *instance* method
          }

          if (innerParams.preConfirm) {
            instance.resetValidationMessage();
            var preConfirmPromise = Promise.resolve().then(function () {
              return innerParams.preConfirm(value, innerParams.validationMessage);
            });
            preConfirmPromise.then(function (preConfirmValue) {
              if (isVisible(getValidationMessage()) || preConfirmValue === false) {
                instance.hideLoading();
              } else {
                succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);
              }
            });
          } else {
            succeedWith(instance, value);
          }
        };

        var getInputValue = function getInputValue(instance, innerParams) {
          var input = instance.getInput();

          if (!input) {
            return null;
          }

          switch (innerParams.input) {
            case 'checkbox':
              return getCheckboxValue(input);

            case 'radio':
              return getRadioValue(input);

            case 'file':
              return getFileValue(input);

            default:
              return innerParams.inputAutoTrim ? input.value.trim() : input.value;
          }
        };

        var getCheckboxValue = function getCheckboxValue(input) {
          return input.checked ? 1 : 0;
        };

        var getRadioValue = function getRadioValue(input) {
          return input.checked ? input.value : null;
        };

        var getFileValue = function getFileValue(input) {
          return input.files.length ? input.files[0] : null;
        };

        var addKeydownHandler = function addKeydownHandler(instance, globalState, innerParams, dismissWith) {
          if (globalState.keydownTarget && globalState.keydownHandlerAdded) {
            globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {
              capture: globalState.keydownListenerCapture
            });
            globalState.keydownHandlerAdded = false;
          }

          if (!innerParams.toast) {
            globalState.keydownHandler = function (e) {
              return keydownHandler(instance, e, innerParams, dismissWith);
            };

            globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();
            globalState.keydownListenerCapture = innerParams.keydownListenerCapture;
            globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {
              capture: globalState.keydownListenerCapture
            });
            globalState.keydownHandlerAdded = true;
          }
        }; // Focus handling


        var setFocus = function setFocus(innerParams, index, increment) {
          var focusableElements = getFocusableElements(innerParams.focusCancel); // search for visible elements and select the next possible match

          for (var i = 0; i < focusableElements.length; i++) {
            index = index + increment; // rollover to first item

            if (index === focusableElements.length) {
              index = 0; // go to last item
            } else if (index === -1) {
              index = focusableElements.length - 1;
            }

            return focusableElements[index].focus();
          } // no visible focusable elements, focus the popup


          getPopup().focus();
        };

        var arrowKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Left', 'Right', 'Up', 'Down' // IE11
        ];
        var escKeys = ['Escape', 'Esc' // IE11
        ];

        var keydownHandler = function keydownHandler(instance, e, innerParams, dismissWith) {
          if (innerParams.stopKeydownPropagation) {
            e.stopPropagation();
          } // ENTER


          if (e.key === 'Enter') {
            handleEnter(instance, e, innerParams); // TAB
          } else if (e.key === 'Tab') {
            handleTab(e, innerParams); // ARROWS - switch focus between buttons
          } else if (arrowKeys.indexOf(e.key) !== -1) {
            handleArrows(); // ESC
          } else if (escKeys.indexOf(e.key) !== -1) {
            handleEsc(e, innerParams, dismissWith);
          }
        };

        var handleEnter = function handleEnter(instance, e, innerParams) {
          // #720 #721
          if (e.isComposing) {
            return;
          }

          if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {
            if (['textarea', 'file'].indexOf(innerParams.input) !== -1) {
              return; // do not submit
            }

            clickConfirm();
            e.preventDefault();
          }
        };

        var handleTab = function handleTab(e, innerParams) {
          var targetElement = e.target;
          var focusableElements = getFocusableElements(innerParams.focusCancel);
          var btnIndex = -1;

          for (var i = 0; i < focusableElements.length; i++) {
            if (targetElement === focusableElements[i]) {
              btnIndex = i;
              break;
            }
          }

          if (!e.shiftKey) {
            // Cycle to the next button
            setFocus(innerParams, btnIndex, 1);
          } else {
            // Cycle to the prev button
            setFocus(innerParams, btnIndex, -1);
          }

          e.stopPropagation();
          e.preventDefault();
        };

        var handleArrows = function handleArrows() {
          var confirmButton = getConfirmButton();
          var cancelButton = getCancelButton(); // focus Cancel button if Confirm button is currently focused

          if (document.activeElement === confirmButton && isVisible(cancelButton)) {
            cancelButton.focus(); // and vice versa
          } else if (document.activeElement === cancelButton && isVisible(confirmButton)) {
            confirmButton.focus();
          }
        };

        var handleEsc = function handleEsc(e, innerParams, dismissWith) {
          if (callIfFunction(innerParams.allowEscapeKey)) {
            e.preventDefault();
            dismissWith(DismissReason.esc);
          }
        };

        var handlePopupClick = function handlePopupClick(domCache, innerParams, dismissWith) {
          if (innerParams.toast) {
            handleToastClick(domCache, innerParams, dismissWith);
          } else {
            // Ignore click events that had mousedown on the popup but mouseup on the container
            // This can happen when the user drags a slider
            handleModalMousedown(domCache); // Ignore click events that had mousedown on the container but mouseup on the popup

            handleContainerMousedown(domCache);
            handleModalClick(domCache, innerParams, dismissWith);
          }
        };

        var handleToastClick = function handleToastClick(domCache, innerParams, dismissWith) {
          // Closing toast by internal click
          domCache.popup.onclick = function () {
            if (innerParams.showConfirmButton || innerParams.showCancelButton || innerParams.showCloseButton || innerParams.input) {
              return;
            }

            dismissWith(DismissReason.close);
          };
        };

        var ignoreOutsideClick = false;

        var handleModalMousedown = function handleModalMousedown(domCache) {
          domCache.popup.onmousedown = function () {
            domCache.container.onmouseup = function (e) {
              domCache.container.onmouseup = undefined; // We only check if the mouseup target is the container because usually it doesn't
              // have any other direct children aside of the popup

              if (e.target === domCache.container) {
                ignoreOutsideClick = true;
              }
            };
          };
        };

        var handleContainerMousedown = function handleContainerMousedown(domCache) {
          domCache.container.onmousedown = function () {
            domCache.popup.onmouseup = function (e) {
              domCache.popup.onmouseup = undefined; // We also need to check if the mouseup target is a child of the popup

              if (e.target === domCache.popup || domCache.popup.contains(e.target)) {
                ignoreOutsideClick = true;
              }
            };
          };
        };

        var handleModalClick = function handleModalClick(domCache, innerParams, dismissWith) {
          domCache.container.onclick = function (e) {
            if (ignoreOutsideClick) {
              ignoreOutsideClick = false;
              return;
            }

            if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {
              dismissWith(DismissReason.backdrop);
            }
          };
        };

        function _main(userParams) {
          showWarningsForParams(userParams); // Check if there is another Swal closing

          if (getPopup() && globalState.swalCloseEventFinishedCallback) {
            globalState.swalCloseEventFinishedCallback();
            delete globalState.swalCloseEventFinishedCallback;
          } // Check if there is a swal disposal defer timer


          if (globalState.deferDisposalTimer) {
            clearTimeout(globalState.deferDisposalTimer);
            delete globalState.deferDisposalTimer;
          }

          var innerParams = _extends({}, defaultParams, userParams);

          setParameters(innerParams);
          Object.freeze(innerParams); // clear the previous timer

          if (globalState.timeout) {
            globalState.timeout.stop();
            delete globalState.timeout;
          } // clear the restore focus timeout


          clearTimeout(globalState.restoreFocusTimeout);
          var domCache = populateDomCache(this);
          render(this, innerParams);
          privateProps.innerParams.set(this, innerParams);
          return swalPromise(this, domCache, innerParams);
        }

        var swalPromise = function swalPromise(instance, domCache, innerParams) {
          return new Promise(function (resolve) {
            // functions to handle all closings/dismissals
            var dismissWith = function dismissWith(dismiss) {
              instance.closePopup({
                dismiss: dismiss
              });
            };

            privateMethods.swalPromiseResolve.set(instance, resolve);
            setupTimer(globalState, innerParams, dismissWith);

            domCache.confirmButton.onclick = function () {
              return handleConfirmButtonClick(instance, innerParams);
            };

            domCache.cancelButton.onclick = function () {
              return handleCancelButtonClick(instance, dismissWith);
            };

            domCache.closeButton.onclick = function () {
              return dismissWith(DismissReason.close);
            };

            handlePopupClick(domCache, innerParams, dismissWith);
            addKeydownHandler(instance, globalState, innerParams, dismissWith);

            if (innerParams.toast && (innerParams.input || innerParams.footer || innerParams.showCloseButton)) {
              addClass(document.body, swalClasses['toast-column']);
            } else {
              removeClass(document.body, swalClasses['toast-column']);
            }

            handleInputOptionsAndValue(instance, innerParams);
            openPopup(innerParams);
            initFocus(domCache, innerParams); // Scroll container to top on open (#1247)

            domCache.container.scrollTop = 0;
          });
        };

        var populateDomCache = function populateDomCache(instance) {
          var domCache = {
            popup: getPopup(),
            container: getContainer(),
            content: getContent(),
            actions: getActions(),
            confirmButton: getConfirmButton(),
            cancelButton: getCancelButton(),
            closeButton: getCloseButton(),
            validationMessage: getValidationMessage(),
            progressSteps: getProgressSteps()
          };
          privateProps.domCache.set(instance, domCache);
          return domCache;
        };

        var setupTimer = function setupTimer(globalState$$1, innerParams, dismissWith) {
          if (innerParams.timer) {
            globalState$$1.timeout = new Timer(function () {
              dismissWith('timer');
              delete globalState$$1.timeout;
            }, innerParams.timer);
          }
        };

        var initFocus = function initFocus(domCache, innerParams) {
          if (innerParams.toast) {
            return;
          }

          if (!callIfFunction(innerParams.allowEnterKey)) {
            return blurActiveElement();
          }

          if (innerParams.focusCancel && isVisible(domCache.cancelButton)) {
            return domCache.cancelButton.focus();
          }

          if (innerParams.focusConfirm && isVisible(domCache.confirmButton)) {
            return domCache.confirmButton.focus();
          }

          setFocus(innerParams, -1, 1);
        };

        var blurActiveElement = function blurActiveElement() {
          if (document.activeElement && typeof document.activeElement.blur === 'function') {
            document.activeElement.blur();
          }
        };
        /**
         * Updates popup parameters.
         */


        function update(params) {
          var validUpdatableParams = {}; // assign valid params from `params` to `defaults`

          Object.keys(params).forEach(function (param) {
            if (Swal.isUpdatableParameter(param)) {
              validUpdatableParams[param] = params[param];
            } else {
              warn("Invalid parameter to update: \"".concat(param, "\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js"));
            }
          });
          var innerParams = privateProps.innerParams.get(this);

          var updatedParams = _extends({}, innerParams, validUpdatableParams);

          render(this, updatedParams);
          privateProps.innerParams.set(this, updatedParams);
          Object.defineProperties(this, {
            params: {
              value: _extends({}, this.params, params),
              writable: false,
              enumerable: true
            }
          });
        }

        var instanceMethods = Object.freeze({
          hideLoading: hideLoading,
          disableLoading: hideLoading,
          getInput: getInput$1,
          close: close,
          closePopup: close,
          closeModal: close,
          closeToast: close,
          enableButtons: enableButtons,
          disableButtons: disableButtons,
          enableConfirmButton: enableConfirmButton,
          disableConfirmButton: disableConfirmButton,
          enableInput: enableInput,
          disableInput: disableInput,
          showValidationMessage: showValidationMessage,
          resetValidationMessage: resetValidationMessage$1,
          getProgressSteps: getProgressSteps$1,
          setProgressSteps: setProgressSteps,
          showProgressSteps: showProgressSteps,
          hideProgressSteps: hideProgressSteps,
          _main: _main,
          update: update
        });
        var currentInstance; // SweetAlert constructor

        function SweetAlert() {
          // Prevent run in Node env

          /* istanbul ignore if */
          if (typeof window === 'undefined') {
            return;
          } // Check for the existence of Promise

          /* istanbul ignore if */


          if (typeof Promise === 'undefined') {
            error('This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)');
          }

          currentInstance = this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var outerParams = Object.freeze(this.constructor.argsToParams(args));
          Object.defineProperties(this, {
            params: {
              value: outerParams,
              writable: false,
              enumerable: true,
              configurable: true
            }
          });

          var promise = this._main(this.params);

          privateProps.promise.set(this, promise);
        } // `catch` cannot be the name of a module export, so we define our thenable methods here instead


        SweetAlert.prototype.then = function (onFulfilled) {
          var promise = privateProps.promise.get(this);
          return promise.then(onFulfilled);
        };

        SweetAlert.prototype["finally"] = function (onFinally) {
          var promise = privateProps.promise.get(this);
          return promise["finally"](onFinally);
        }; // Assign instance methods from src/instanceMethods/*.js to prototype


        _extends(SweetAlert.prototype, instanceMethods); // Assign static methods from src/staticMethods/*.js to constructor


        _extends(SweetAlert, staticMethods); // Proxy to instance methods to constructor, for now, for backwards compatibility


        Object.keys(instanceMethods).forEach(function (key) {
          SweetAlert[key] = function () {
            if (currentInstance) {
              var _currentInstance;

              return (_currentInstance = currentInstance)[key].apply(_currentInstance, arguments);
            }
          };
        });
        SweetAlert.DismissReason = DismissReason;
        SweetAlert.version = '8.17.1';
        var Swal = SweetAlert;
        Swal["default"] = Swal;
        return Swal;
      });

      if (typeof this !== 'undefined' && this.Sweetalert2) {
        this.swal = this.sweetAlert = this.Swal = this.SweetAlert = this.Sweetalert2;
      }

      "undefined" != typeof document && function (e, t) {
        var n = e.createElement("style");
        if (e.getElementsByTagName("head")[0].appendChild(n), n.styleSheet) n.styleSheet.disabled || (n.styleSheet.cssText = t);else try {
          n.innerHTML = t;
        } catch (e) {
          n.innerText = t;
        }
      }(document, "@charset \"UTF-8\";@-webkit-keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@-webkit-keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@-webkit-keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.875em;width:1.5625em}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.875em;width:1.5625em}}@-webkit-keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@-webkit-keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@-webkit-keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@-webkit-keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}body.swal2-toast-shown .swal2-container{background-color:transparent}body.swal2-toast-shown .swal2-container.swal2-shown{background-color:transparent}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-left,body.swal2-toast-shown .swal2-container.swal2-top-start{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-left,body.swal2-toast-shown .swal2-container.swal2-center-start{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%,-50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-left,body.swal2-toast-shown .swal2-container.swal2-bottom-start{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}body.swal2-toast-column .swal2-toast{flex-direction:column;align-items:stretch}body.swal2-toast-column .swal2-toast .swal2-actions{flex:1;align-self:stretch;height:2.2em;margin-top:.3125em}body.swal2-toast-column .swal2-toast .swal2-loading{justify-content:center}body.swal2-toast-column .swal2-toast .swal2-input{height:2em;margin:.3125em auto;font-size:1em}body.swal2-toast-column .swal2-toast .swal2-validation-message{font-size:1em}.swal2-popup.swal2-toast{flex-direction:row;align-items:center;width:auto;padding:.625em;overflow-y:hidden;box-shadow:0 0 .625em #d9d9d9}.swal2-popup.swal2-toast .swal2-header{flex-direction:row}.swal2-popup.swal2-toast .swal2-title{flex-grow:1;justify-content:flex-start;margin:0 .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{position:static;width:.8em;height:.8em;line-height:.8}.swal2-popup.swal2-toast .swal2-content{justify-content:flex-start;font-size:1em}.swal2-popup.swal2-toast .swal2-icon{width:2em;min-width:2em;height:2em;margin:0}.swal2-popup.swal2-toast .swal2-icon::before{display:flex;align-items:center;font-size:2em;font-weight:700}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-popup.swal2-toast .swal2-icon::before{font-size:.25em}}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{flex-basis:auto!important;width:auto;height:auto;margin:0 .3125em}.swal2-popup.swal2-toast .swal2-styled{margin:0 .3125em;padding:.3125em .625em;font-size:1em}.swal2-popup.swal2-toast .swal2-styled:focus{box-shadow:0 0 0 .0625em #fff,0 0 0 .125em rgba(50,100,150,.4)}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.8em;left:-.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast.swal2-show{-webkit-animation:swal2-toast-show .5s;animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{-webkit-animation:swal2-toast-hide .1s forwards;animation:swal2-toast-hide .1s forwards}.swal2-popup.swal2-toast .swal2-animate-success-icon .swal2-success-line-tip{-webkit-animation:swal2-toast-animate-success-line-tip .75s;animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-animate-success-icon .swal2-success-line-long{-webkit-animation:swal2-toast-animate-success-line-long .75s;animation:swal2-toast-animate-success-line-long .75s}@-webkit-keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@-webkit-keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@-webkit-keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@-webkit-keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto!important}body.swal2-no-backdrop .swal2-shown{top:auto;right:auto;bottom:auto;left:auto;max-width:calc(100% - .625em * 2);background-color:transparent}body.swal2-no-backdrop .swal2-shown>.swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}body.swal2-no-backdrop .swal2-shown.swal2-top{top:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-shown.swal2-top-left,body.swal2-no-backdrop .swal2-shown.swal2-top-start{top:0;left:0}body.swal2-no-backdrop .swal2-shown.swal2-top-end,body.swal2-no-backdrop .swal2-shown.swal2-top-right{top:0;right:0}body.swal2-no-backdrop .swal2-shown.swal2-center{top:50%;left:50%;transform:translate(-50%,-50%)}body.swal2-no-backdrop .swal2-shown.swal2-center-left,body.swal2-no-backdrop .swal2-shown.swal2-center-start{top:50%;left:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-shown.swal2-center-end,body.swal2-no-backdrop .swal2-shown.swal2-center-right{top:50%;right:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-shown.swal2-bottom{bottom:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-shown.swal2-bottom-left,body.swal2-no-backdrop .swal2-shown.swal2-bottom-start{bottom:0;left:0}body.swal2-no-backdrop .swal2-shown.swal2-bottom-end,body.swal2-no-backdrop .swal2-shown.swal2-bottom-right{right:0;bottom:0}.swal2-container{display:flex;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;flex-direction:row;align-items:center;justify-content:center;padding:.625em;overflow-x:hidden;background-color:transparent;-webkit-overflow-scrolling:touch}.swal2-container.swal2-top{align-items:flex-start}.swal2-container.swal2-top-left,.swal2-container.swal2-top-start{align-items:flex-start;justify-content:flex-start}.swal2-container.swal2-top-end,.swal2-container.swal2-top-right{align-items:flex-start;justify-content:flex-end}.swal2-container.swal2-center{align-items:center}.swal2-container.swal2-center-left,.swal2-container.swal2-center-start{align-items:center;justify-content:flex-start}.swal2-container.swal2-center-end,.swal2-container.swal2-center-right{align-items:center;justify-content:flex-end}.swal2-container.swal2-bottom{align-items:flex-end}.swal2-container.swal2-bottom-left,.swal2-container.swal2-bottom-start{align-items:flex-end;justify-content:flex-start}.swal2-container.swal2-bottom-end,.swal2-container.swal2-bottom-right{align-items:flex-end;justify-content:flex-end}.swal2-container.swal2-bottom-end>:first-child,.swal2-container.swal2-bottom-left>:first-child,.swal2-container.swal2-bottom-right>:first-child,.swal2-container.swal2-bottom-start>:first-child,.swal2-container.swal2-bottom>:first-child{margin-top:auto}.swal2-container.swal2-grow-fullscreen>.swal2-modal{display:flex!important;flex:1;align-self:stretch;justify-content:center}.swal2-container.swal2-grow-row>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container.swal2-grow-column{flex:1;flex-direction:column}.swal2-container.swal2-grow-column.swal2-bottom,.swal2-container.swal2-grow-column.swal2-center,.swal2-container.swal2-grow-column.swal2-top{align-items:center}.swal2-container.swal2-grow-column.swal2-bottom-left,.swal2-container.swal2-grow-column.swal2-bottom-start,.swal2-container.swal2-grow-column.swal2-center-left,.swal2-container.swal2-grow-column.swal2-center-start,.swal2-container.swal2-grow-column.swal2-top-left,.swal2-container.swal2-grow-column.swal2-top-start{align-items:flex-start}.swal2-container.swal2-grow-column.swal2-bottom-end,.swal2-container.swal2-grow-column.swal2-bottom-right,.swal2-container.swal2-grow-column.swal2-center-end,.swal2-container.swal2-grow-column.swal2-center-right,.swal2-container.swal2-grow-column.swal2-top-end,.swal2-container.swal2-grow-column.swal2-top-right{align-items:flex-end}.swal2-container.swal2-grow-column>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container:not(.swal2-top):not(.swal2-top-start):not(.swal2-top-end):not(.swal2-top-left):not(.swal2-top-right):not(.swal2-center-start):not(.swal2-center-end):not(.swal2-center-left):not(.swal2-center-right):not(.swal2-bottom):not(.swal2-bottom-start):not(.swal2-bottom-end):not(.swal2-bottom-left):not(.swal2-bottom-right):not(.swal2-grow-fullscreen)>.swal2-modal{margin:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-container .swal2-modal{margin:0!important}}.swal2-container.swal2-fade{transition:background-color .1s}.swal2-container.swal2-shown{background-color:rgba(0,0,0,.4)}.swal2-popup{display:none;position:relative;box-sizing:border-box;flex-direction:column;justify-content:center;width:32em;max-width:100%;padding:1.25em;border:none;border-radius:.3125em;background:#fff;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:0}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-header{display:flex;flex-direction:column;align-items:center}.swal2-title{position:relative;max-width:100%;margin:0 0 .4em;padding:0;color:#595959;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;flex-wrap:wrap;align-items:center;justify-content:center;width:100%;margin:1.25em auto 0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}.swal2-actions.swal2-loading .swal2-styled.swal2-confirm{box-sizing:border-box;width:2.5em;height:2.5em;margin:.46875em;padding:0;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:.25em solid transparent;border-radius:100%;border-color:transparent;background-color:transparent!important;color:transparent;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-actions.swal2-loading .swal2-styled.swal2-cancel{margin-right:30px;margin-left:30px}.swal2-actions.swal2-loading :not(.swal2-styled).swal2-confirm::after{content:\"\";display:inline-block;width:15px;height:15px;margin-left:5px;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:3px solid #999;border-radius:50%;border-right-color:transparent;box-shadow:1px 1px 1px #fff}.swal2-styled{margin:.3125em;padding:.625em 2em;box-shadow:none;font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#3085d6;color:#fff;font-size:1.0625em}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#aaa;color:#fff;font-size:1.0625em}.swal2-styled:focus{outline:0;box-shadow:0 0 0 2px #fff,0 0 0 4px rgba(50,100,150,.4)}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1.25em 0 0;padding:1em 0 0;border-top:1px solid #eee;color:#545454;font-size:1em}.swal2-image{max-width:100%;margin:1.25em auto}.swal2-close{position:absolute;z-index:2;top:0;right:0;justify-content:center;width:1.2em;height:1.2em;padding:0;overflow:hidden;transition:color .1s ease-out;border:none;border-radius:0;outline:initial;background:0 0;color:#ccc;font-family:serif;font-size:2.5em;line-height:1.2;cursor:pointer}.swal2-close:hover{transform:none;background:0 0;color:#f27474}.swal2-content{z-index:1;justify-content:center;margin:0;padding:0;color:#545454;font-size:1.125em;font-weight:400;line-height:normal;text-align:center;word-wrap:break-word}.swal2-checkbox,.swal2-file,.swal2-input,.swal2-radio,.swal2-select,.swal2-textarea{margin:1em auto}.swal2-file,.swal2-input,.swal2-textarea{box-sizing:border-box;width:100%;transition:border-color .3s,box-shadow .3s;border:1px solid #d9d9d9;border-radius:.1875em;background:inherit;box-shadow:inset 0 1px 1px rgba(0,0,0,.06);color:inherit;font-size:1.125em}.swal2-file.swal2-inputerror,.swal2-input.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474!important;box-shadow:0 0 2px #f27474!important}.swal2-file:focus,.swal2-input:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:0;box-shadow:0 0 3px #c4e6f5}.swal2-file::-webkit-input-placeholder,.swal2-input::-webkit-input-placeholder,.swal2-textarea::-webkit-input-placeholder{color:#ccc}.swal2-file::-moz-placeholder,.swal2-input::-moz-placeholder,.swal2-textarea::-moz-placeholder{color:#ccc}.swal2-file:-ms-input-placeholder,.swal2-input:-ms-input-placeholder,.swal2-textarea:-ms-input-placeholder{color:#ccc}.swal2-file::-ms-input-placeholder,.swal2-input::-ms-input-placeholder,.swal2-textarea::-ms-input-placeholder{color:#ccc}.swal2-file::placeholder,.swal2-input::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em auto;background:inherit}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-input[type=number]{max-width:10em}.swal2-file{background:inherit;font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:inherit;color:inherit;font-size:1.125em}.swal2-checkbox,.swal2-radio{align-items:center;justify-content:center;background:inherit;color:inherit}.swal2-checkbox label,.swal2-radio label{margin:0 .6em;font-size:1.125em}.swal2-checkbox input,.swal2-radio input{margin:0 .4em}.swal2-validation-message{display:none;align-items:center;justify-content:center;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:\"!\";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;zoom:normal;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}@supports (-ms-accelerator:true){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@-moz-document url-prefix(){.swal2-close:focus{outline:2px solid rgba(50,100,150,.4)}}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:1.25em auto 1.875em;zoom:normal;border:.25em solid transparent;border-radius:50%;font-family:inherit;line-height:5em;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-icon::before{display:flex;align-items:center;height:92%;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-warning::before{content:\"!\"}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-info::before{content:\"i\"}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-question::before{content:\"?\"}.swal2-icon.swal2-question.swal2-arabic-question-mark::before{content:\"؟\"}.swal2-icon.swal2-success{border-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-.25em;left:-.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.875em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-progress-steps{align-items:center;margin:0 0 1.25em;padding:0;background:inherit;font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;width:2em;height:2em;border-radius:2em;background:#3085d6;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#3085d6}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;width:2.5em;height:.4em;margin:0 -1px;background:#3085d6}[class^=swal2]{-webkit-tap-highlight-color:transparent}.swal2-show{-webkit-animation:swal2-show .3s;animation:swal2-show .3s}.swal2-show.swal2-noanimation{-webkit-animation:none;animation:none}.swal2-hide{-webkit-animation:swal2-hide .15s forwards;animation:swal2-hide .15s forwards}.swal2-hide.swal2-noanimation{-webkit-animation:none;animation:none}.swal2-rtl .swal2-close{right:auto;left:0}.swal2-animate-success-icon .swal2-success-line-tip{-webkit-animation:swal2-animate-success-line-tip .75s;animation:swal2-animate-success-line-tip .75s}.swal2-animate-success-icon .swal2-success-line-long{-webkit-animation:swal2-animate-success-line-long .75s;animation:swal2-animate-success-line-long .75s}.swal2-animate-success-icon .swal2-success-circular-line-right{-webkit-animation:swal2-rotate-success-circular-line 4.25s ease-in;animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-animate-error-icon{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-animate-error-icon .swal2-x-mark{-webkit-animation:swal2-animate-error-x-mark .5s;animation:swal2-animate-error-x-mark .5s}@-webkit-keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll!important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static!important}}");
      /***/
    },

    /***/
    "RsLV":
    /*!**************************************************************************************!*\
      !*** ./src/app/pages/Payment Heads/add-payment-heads/add-payment-heads.component.ts ***!
      \**************************************************************************************/

    /*! exports provided: AddPaymentHeadsComponent */

    /***/
    function RsLV(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AddPaymentHeadsComponent", function () {
        return AddPaymentHeadsComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _payment_heads_service_payment_heads_api_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../payment-heads-service/payment-heads-api.service */
      "YrEC");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var src_app_utilities_utilities_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! src/app/utilities/utilities.service */
      "cnwL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");

      function AddPaymentHeadsComponent_p_6_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p", 21);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "strong");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r0.errMsg);
        }
      }

      function AddPaymentHeadsComponent_p_8_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p", 22);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "strong");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r1.successMsg);
        }
      }

      function AddPaymentHeadsComponent_div_20_div_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 24);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var validation_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", validation_r5.message, " ");
        }
      }

      function AddPaymentHeadsComponent_div_20_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, AddPaymentHeadsComponent_div_20_div_1_Template, 2, 1, "div", 23);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var validation_r5 = ctx.$implicit;

          var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r2.paymentHeadForm.get("title").hasError(validation_r5.type) && (ctx_r2.paymentHeadForm.get("title").dirty || ctx_r2.paymentHeadForm.get("title").touched));
        }
      }

      function AddPaymentHeadsComponent_option_32_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "option", 25);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var type_r8 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", type_r8);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](type_r8);
        }
      }

      function AddPaymentHeadsComponent_div_33_div_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 24);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var validation_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", validation_r9.message, " ");
        }
      }

      function AddPaymentHeadsComponent_div_33_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, AddPaymentHeadsComponent_div_33_div_1_Template, 2, 1, "div", 23);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var validation_r9 = ctx.$implicit;

          var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r4.paymentHeadForm.get("type").hasError(validation_r9.type) && (ctx_r4.paymentHeadForm.get("type").dirty || ctx_r4.paymentHeadForm.get("type").touched));
        }
      }

      var AddPaymentHeadsComponent = /*#__PURE__*/function () {
        function AddPaymentHeadsComponent(fb, api, ngZone, router, util) {
          _classCallCheck2(this, AddPaymentHeadsComponent);

          this.fb = fb;
          this.api = api;
          this.ngZone = ngZone;
          this.router = router;
          this.util = util;
          this.successMessage = false;
          this.errorMsg = false;
          this.companyName = [];
          this.paymentHeadTypes = ['Addition', 'Deduction'];
          this.validationMessage = {
            'title': [{
              type: 'required',
              message: 'Payement Head Title is Required'
            }],
            'type': [{
              type: 'required',
              message: 'Payement Head Type is Required'
            }]
          };
          this.isListAvaliable();
        }

        _createClass2(AddPaymentHeadsComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this.paymentHeadValidate();
            this.permissionInfo = this.util.permissionRoleInfo;

            if (this.permissionInfo.search('Create PaymentHeads') === -1) {
              this.paymentHeadForm.disable();
            }
          }
        }, {
          key: "paymentHeadData",
          value: function paymentHeadData() {
            var _this198 = this;

            try {
              var cleanPaymentHeadForm = this.util.cleanFormLevelOne(this.paymentHeadForm);
              this.api.addPaymentHeads(cleanPaymentHeadForm.value).subscribe(function (data) {
                if (data.status === 'success') {
                  _this198.successMessage = true;
                  _this198.errorMsg = false;
                  _this198.successMsg = data.message;
                  setTimeout(function () {
                    _this198.handleErrors();

                    _this198.ngZone.run(function () {
                      return _this198.router.navigateByUrl('/pages/payment-heads/list-payment-heads');
                    });
                  }, 2000);
                } else {
                  _this198.errorMsg = true;
                  _this198.successMessage = false;
                  _this198.errMsg = data.message;
                  setTimeout(function () {
                    _this198.handleErrors();
                  }, 3000);
                }
              });
            } catch (err) {
              console.log(err);
            }
          }
        }, {
          key: "paymentHeadValidate",
          value: function paymentHeadValidate() {
            try {
              this.paymentHeadForm = this.fb.group({
                title: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required),
                type: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required)
              });
            } catch (err) {
              console.log(err);
            }
          }
        }, {
          key: "handleErrors",
          value: function handleErrors() {
            this.errorMsg = false;
            this.successMessage = false;
            this.errMsg = '';
            this.successMsg = '';
          }
        }, {
          key: "isListAvaliable",
          value: function isListAvaliable() {
            var _this199 = this;

            try {
              this.api.getPaymentHeadData().subscribe(function (data) {
                if (data.status === 'success') {
                  if (data.data.length > 0 && _this199.util.paymentHeadStatus !== 1) {
                    _this199.router.navigateByUrl("/pages/payment-heads/list-payment-heads");

                    _this199.util.paymentHeadStatus = 0;
                  }
                }
              });
            } catch (err) {
              console.log(err);
            }
          }
        }]);

        return AddPaymentHeadsComponent;
      }();

      AddPaymentHeadsComponent.ɵfac = function AddPaymentHeadsComponent_Factory(t) {
        return new (t || AddPaymentHeadsComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_payment_heads_service_payment_heads_api_service__WEBPACK_IMPORTED_MODULE_2__["paymentHeadApiService"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](src_app_utilities_utilities_service__WEBPACK_IMPORTED_MODULE_4__["UtilitiesService"]));
      };

      AddPaymentHeadsComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: AddPaymentHeadsComponent,
        selectors: [["app-add-payment-heads"]],
        decls: 40,
        vars: 7,
        consts: [[1, "card", "card-user"], [1, "card-header"], [1, "card-title", "text-center"], [1, "card-body"], [1, "col-sm-offset-2"], ["class", "alert alert-danger", 4, "ngIf"], ["class", "alert alert-success", 4, "ngIf"], ["role", "form", "novalidate", "", 1, "form-horizontal", 3, "formGroup", "ngSubmit"], [1, "row"], [1, "col-md"], [1, "form-group"], [1, "col-sm-6", "control-label"], [2, "color", "darkred"], ["type", "text", "id", "title", "placeholder", "Enter Title", "formControlName", "title", 1, "form-control"], [4, "ngFor", "ngForOf"], ["id", "type", "formControlName", "type", 1, "dropdown", "dropdown-toggle", "form-control", 2, "width", "100%", "height", "40px"], ["ng-selected", "true", "value", "", "disabled", ""], [3, "value", 4, "ngFor", "ngForOf"], [1, "col-sm-offset-2", "col-sm-10"], ["type", "submit", 1, "btn", "btn-success", 3, "disabled"], ["type", "submit", "routerLink", "../list-payment-heads", 1, "btn", "btn-danger"], [1, "alert", "alert-danger"], [1, "alert", "alert-success"], ["style", "color:\xA0red;margin-left:\xA014px;", "style", "color:\xA0red;margin-left:\xA014px;", 4, "ngIf"], [2, "color", "red", "margin-left", "14px"], [3, "value"]],
        template: function AddPaymentHeadsComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "h2", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3, "Payment Head Details");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, AddPaymentHeadsComponent_p_6_Template, 3, 1, "p", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, AddPaymentHeadsComponent_p_8_Template, 3, 1, "p", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "form", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngSubmit", function AddPaymentHeadsComponent_Template_form_ngSubmit_9_listener() {
              return ctx.paymentHeadData();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "div", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](11, "div", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "div", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "label", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](15, "Title:\xA0");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "span", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](17, "*");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](18, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](19, "input", 13);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](20, AddPaymentHeadsComponent_div_20_Template, 2, 1, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "div", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "div", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](23, "label", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](24, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](25, "Type:\xA0");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](26, "span", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](27, "*");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](28, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](29, "select", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](30, "option", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](31, "----------Select Payment Head Type----------");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](32, AddPaymentHeadsComponent_option_32_Template, 2, 2, "option", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](33, AddPaymentHeadsComponent_div_33_Template, 2, 1, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](34, "div", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](35, "div", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](36, "button", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](37, "Submit");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](38, "button", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](39, "Cancel");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.errorMsg);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.successMessage);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("formGroup", ctx.paymentHeadForm);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.validationMessage.title);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.paymentHeadTypes);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.validationMessage.type);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx.paymentHeadForm.invalid || ctx.permissionInfo.search("Create PaymentHeads") === -1);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["NgIf"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["ɵangular_packages_forms_forms_y"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NgControlStatusGroup"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormGroupDirective"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["DefaultValueAccessor"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NgControlStatus"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControlName"], _angular_common__WEBPACK_IMPORTED_MODULE_5__["NgForOf"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["SelectControlValueAccessor"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NgSelectOption"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["ɵangular_packages_forms_forms_x"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterLink"]],
        encapsulation: 2
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AddPaymentHeadsComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-add-payment-heads',
            templateUrl: './add-payment-heads.component.html'
          }]
        }], function () {
          return [{
            type: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]
          }, {
            type: _payment_heads_service_payment_heads_api_service__WEBPACK_IMPORTED_MODULE_2__["paymentHeadApiService"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
          }, {
            type: _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"]
          }, {
            type: src_app_utilities_utilities_service__WEBPACK_IMPORTED_MODULE_4__["UtilitiesService"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "TF3C":
    /*!*****************************************************************************!*\
      !*** ./node_modules/@syncfusion/ej2-buttons/dist/es6/ej2-buttons.es2015.js ***!
      \*****************************************************************************/

    /*! exports provided: wrapperInitialize, getTextNode, destroy, preRender, createCheckBox, rippleMouseHandler, setHiddenInput, buttonObserver, Button, CheckBox, RadioButton, Switch, classNames, ChipList, Chip */

    /***/
    function TF3C(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "wrapperInitialize", function () {
        return wrapperInitialize;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getTextNode", function () {
        return getTextNode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "destroy", function () {
        return _destroy2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "preRender", function () {
        return _preRender;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createCheckBox", function () {
        return createCheckBox;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "rippleMouseHandler", function () {
        return rippleMouseHandler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setHiddenInput", function () {
        return setHiddenInput;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "buttonObserver", function () {
        return buttonObserver;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Button", function () {
        return Button;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CheckBox", function () {
        return CheckBox;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RadioButton", function () {
        return RadioButton;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Switch", function () {
        return Switch;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "classNames", function () {
        return classNames;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ChipList", function () {
        return ChipList;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Chip", function () {
        return Chip;
      });
      /* harmony import */


      var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @syncfusion/ej2-base */
      "4SUy");
      /**
       * Initialize wrapper element for angular.
       * @private
       */


      function wrapperInitialize(createElement, tag, type, element, WRAPPER, role) {
        var input = element;

        if (element.tagName === tag) {
          var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', element);
          input = createElement('input', {
            attrs: {
              'type': type
            }
          });
          var props = ['change', 'cssClass', 'label', 'labelPosition', 'id'];

          for (var index = 0, len = element.attributes.length; index < len; index++) {
            if (props.indexOf(element.attributes[index].nodeName) === -1) {
              input.setAttribute(element.attributes[index].nodeName, element.attributes[index].nodeValue);
            }
          }

          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
            'class': WRAPPER,
            'role': role,
            'aria-checked': 'false'
          });
          element.appendChild(input);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInstance, input);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["deleteObject"])(element, 'ej2_instances');
        }

        return input;
      }

      function getTextNode(element) {
        var node;
        var childnode = element.childNodes;

        for (var i = 0; i < childnode.length; i++) {
          node = childnode[i];

          if (node.nodeType === 3) {
            return node;
          }
        }

        return null;
      }
      /**
       * Destroy the button components.
       * @private
       */


      function _destroy2(ejInst, wrapper, tagName) {
        if (tagName === 'INPUT') {
          wrapper.parentNode.insertBefore(ejInst.element, wrapper);
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(wrapper);
          ejInst.element.checked = false;
          ['name', 'value', 'disabled'].forEach(function (key) {
            ejInst.element.removeAttribute(key);
          });
        } else {
          ['role', 'aria-checked', 'class'].forEach(function (key) {
            wrapper.removeAttribute(key);
          });
          wrapper.innerHTML = '';
        }
      }

      function _preRender(proxy, control, wrapper, element, moduleName) {
        element = wrapperInitialize(proxy.createElement, control, 'checkbox', element, wrapper, moduleName);
        proxy.element = element;

        if (proxy.element.getAttribute('type') !== 'checkbox') {
          proxy.element.setAttribute('type', 'checkbox');
        }

        if (!proxy.element.id) {
          proxy.element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('e-' + moduleName);
        }
      }
      /**
       * Creates CheckBox component UI with theming and ripple support.
       * @private
       */


      function createCheckBox(createElement) {
        var enableRipple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var wrapper = createElement('div', {
          className: 'e-checkbox-wrapper e-css'
        });

        if (options.cssClass) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], options.cssClass.split(' '));
        }

        if (options.enableRtl) {
          wrapper.classList.add('e-rtl');
        }

        if (enableRipple) {
          var rippleSpan = createElement('span', {
            className: 'e-ripple-container'
          });
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(rippleSpan, {
            isCenterRipple: true,
            duration: 400
          });
          wrapper.appendChild(rippleSpan);
        }

        var frameSpan = createElement('span', {
          className: 'e-frame e-icons'
        });

        if (options.checked) {
          frameSpan.classList.add('e-check');
        }

        wrapper.appendChild(frameSpan);

        if (options.label) {
          var labelSpan = createElement('span', {
            className: 'e-label',
            innerHTML: options.label
          });
          wrapper.appendChild(labelSpan);
        }

        return wrapper;
      }

      function rippleMouseHandler(e, rippleSpan) {
        if (rippleSpan) {
          var _event2 = document.createEvent('MouseEvents');

          _event2.initEvent(e.type, false, true);

          rippleSpan.dispatchEvent(_event2);
        }
      }
      /**
       * Append hidden input to given element
       * @private
       */


      function setHiddenInput(proxy, wrap) {
        if (proxy.element.getAttribute('ejs-for')) {
          wrap.appendChild(proxy.createElement('input', {
            attrs: {
              'name': proxy.name || proxy.element.name,
              'value': 'false',
              'type': 'hidden'
            }
          }));
        }
      }
      /**
       * Common modules
       */


      var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var buttonObserver = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Observer"]();
      var cssClassName = {
        RTL: 'e-rtl',
        BUTTON: 'e-btn',
        PRIMARY: 'e-primary',
        ICONBTN: 'e-icon-btn'
      };
      /**
       * The Button is a graphical user interface element that triggers an event on its click action. It can contain a text, an image, or both.
       * ```html
       * <button id="button">Button</button>
       * ```
       * ```typescript
       * <script>
       * var btnObj = new Button();
       * btnObj.appendTo("#button");
       * </script>
       * ```
       */

      var Button = /*#__PURE__*/function (_syncfusion_ej2_base_40) {
        _inherits2(Button, _syncfusion_ej2_base_40);

        var _super63 = _createSuper(Button);

        /**
         * Constructor for creating the widget
         * @param  {ButtonModel} options?
         * @param  {string|HTMLButtonElement} element?
         */
        function Button(options, element) {
          _classCallCheck2(this, Button);

          return _super63.call(this, options, element);
        }

        _createClass2(Button, [{
          key: "preRender",
          value: function preRender() {// pre render code snippets
          }
          /**
           * Initialize the control rendering
           * @returns void
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              if (!this.disabled) {
                this.wireEvents();
              }

              buttonObserver.notify('component-rendered', {
                id: this.element.id,
                instance: this
              });
            } else {
              this.initialize();
            }

            this.removeRippleEffect = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.element, {
              selector: '.' + cssClassName.BUTTON
            });
            this.renderComplete();
          }
        }, {
          key: "initialize",
          value: function initialize() {
            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.cssClass.split(' '));
            }

            if (this.isPrimary) {
              this.element.classList.add(cssClassName.PRIMARY);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.getModuleName() !== 'progress-btn') {
              if (this.content) {
                var tempContent = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(this.content) : this.content;
                this.element.innerHTML = tempContent;
              }

              this.setIconCss();
            }

            if (this.enableRtl) {
              this.element.classList.add(cssClassName.RTL);
            }

            if (this.disabled) {
              this.controlStatus(this.disabled);
            } else {
              this.wireEvents();
            }
          }
        }, {
          key: "controlStatus",
          value: function controlStatus(disabled) {
            this.element.disabled = disabled;
          }
        }, {
          key: "setIconCss",
          value: function setIconCss() {
            if (this.iconCss) {
              var span = this.createElement('span', {
                className: 'e-btn-icon ' + this.iconCss
              });

              if (!this.element.textContent.trim()) {
                this.element.classList.add(cssClassName.ICONBTN);
              } else {
                span.classList.add('e-icon-' + this.iconPosition.toLowerCase());

                if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {
                  this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');
                }
              }

              var node = this.element.childNodes[0];

              if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {
                this.element.insertBefore(span, node);
              } else {
                this.element.appendChild(span);
              }
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            if (this.isToggle) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.btnClickHandler, this);
            }
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            if (this.isToggle) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.btnClickHandler);
            }
          }
        }, {
          key: "btnClickHandler",
          value: function btnClickHandler() {
            if (this.element.classList.contains('e-active')) {
              this.element.classList.remove('e-active');
            } else {
              this.element.classList.add('e-active');
            }
          }
          /**
           * Destroys the widget.
           * @returns void
           */

        }, {
          key: "destroy",
          value: function destroy() {
            if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
              var span;
              var classList = [cssClassName.PRIMARY, cssClassName.RTL, cssClassName.ICONBTN, 'e-success', 'e-info', 'e-danger', 'e-warning', 'e-flat', 'e-outline', 'e-small', 'e-bigger', 'e-active', 'e-round', 'e-top-icon-btn', 'e-bottom-icon-btn'];

              if (this.cssClass) {
                classList = classList.concat(this.cssClass.split(' '));
              }

              _get2(_getPrototypeOf2(Button.prototype), "destroy", this).call(this);

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], classList);

              if (!this.element.getAttribute('class')) {
                this.element.removeAttribute('class');
              }

              if (this.disabled) {
                this.element.removeAttribute('disabled');
              }

              if (this.content) {
                this.element.innerHTML = this.element.innerHTML.replace(this.content, '');
              }

              span = this.element.querySelector('span.e-btn-icon');

              if (span) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(span);
              }
            }

            this.unWireEvents();

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isRippleEnabled"]) {
              this.removeRippleEffect();
            }
          }
          /**
           * Get component name.
           * @returns string
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'btn';
          }
          /**
           * Get the properties to be maintained in the persisted state.
           * @returns string
           * @private
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist([]);
          }
          /**
           * Dynamically injects the required modules to the component.
           * @private
           */

        }, {
          key: "onPropertyChanged",

          /**
           * Called internally if any of the property value changed.
           * @param  {ButtonModel} newProp
           * @param  {ButtonModel} oldProp
           * @returns void
           * @private
           */
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i95 = 0, _Object$keys31 = Object.keys(newProp); _i95 < _Object$keys31.length; _i95++) {
              var prop = _Object$keys31[_i95];

              switch (prop) {
                case 'isPrimary':
                  if (newProp.isPrimary) {
                    this.element.classList.add(cssClassName.PRIMARY);
                  } else {
                    this.element.classList.remove(cssClassName.PRIMARY);
                  }

                  break;

                case 'disabled':
                  this.controlStatus(newProp.disabled);
                  break;

                case 'iconCss':
                  var span = this.element.querySelector('span.e-btn-icon');

                  if (span) {
                    if (newProp.iconCss) {
                      span.className = 'e-btn-icon ' + newProp.iconCss;

                      if (this.element.textContent.trim()) {
                        if (this.iconPosition === 'Left') {
                          span.classList.add('e-icon-left');
                        } else {
                          span.classList.add('e-icon-right');
                        }
                      }
                    } else {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(span);
                    }
                  } else {
                    this.setIconCss();
                  }

                  break;

                case 'iconPosition':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], ['e-top-icon-btn', 'e-bottom-icon-btn']);
                  span = this.element.querySelector('span.e-btn-icon');

                  if (span) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(span);
                  }

                  this.setIconCss();
                  break;

                case 'cssClass':
                  if (oldProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldProp.cssClass.split(' '));
                  }

                  if (newProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], newProp.cssClass.split(' '));
                  }

                  break;

                case 'enableRtl':
                  if (newProp.enableRtl) {
                    this.element.classList.add(cssClassName.RTL);
                  } else {
                    this.element.classList.remove(cssClassName.RTL);
                  }

                  break;

                case 'content':
                  var node = getTextNode(this.element);

                  if (!node) {
                    this.element.classList.remove(cssClassName.ICONBTN);
                  }

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered && this.getModuleName() !== 'progress-btn') {
                    if (this.enableHtmlSanitizer) {
                      newProp.content = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(newProp.content);
                    }

                    this.element.innerHTML = newProp.content;
                    this.setIconCss();
                  }

                  break;

                case 'isToggle':
                  if (newProp.isToggle) {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.btnClickHandler, this);
                  } else {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.btnClickHandler);

                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], ['e-active']);
                  }

                  break;
              }
            }
          }
          /**
           * Click the button element
           * its native method
           * @public
           */

        }, {
          key: "click",
          value: function click() {
            this.element.click();
          }
          /**
           * Sets the focus to Button
           * its native method
           * @public
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            this.element.focus();
          }
        }], [{
          key: "Inject",
          value: function Inject() {// Inject code snippets
          }
        }]);

        return Button;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], Button.prototype, "iconPosition", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Button.prototype, "iconCss", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Button.prototype, "disabled", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Button.prototype, "isPrimary", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Button.prototype, "cssClass", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Button.prototype, "content", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Button.prototype, "isToggle", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], Button.prototype, "locale", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Button.prototype, "enableHtmlSanitizer", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Button.prototype, "created", void 0);

      Button = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Button);
      /**
       * Button modules
       */

      var __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var CHECK = 'e-check';
      var DISABLED = 'e-checkbox-disabled';
      var FRAME = 'e-frame';
      var INDETERMINATE = 'e-stop';
      var LABEL = 'e-label';
      var RIPPLE = 'e-ripple-container';
      var RIPPLECHECK = 'e-ripple-check';
      var RIPPLEINDETERMINATE = 'e-ripple-stop';
      var RTL = 'e-rtl';
      var WRAPPER = 'e-checkbox-wrapper';
      var containerAttr = ['title', 'class', 'style', 'disabled', 'readonly', 'name', 'value'];
      /**
       * The CheckBox is a graphical user interface element that allows you to select one or more options from the choices.
       * It contains checked, unchecked, and indeterminate states.
       * ```html
       * <input type="checkbox" id="checkbox"/>
       * <script>
       * var checkboxObj = new CheckBox({ label: "Default" });
       * checkboxObj.appendTo("#checkbox");
       * </script>
       * ```
       */

      var CheckBox = /*#__PURE__*/function (_syncfusion_ej2_base_41) {
        _inherits2(CheckBox, _syncfusion_ej2_base_41);

        var _super64 = _createSuper(CheckBox);

        /**
         * Constructor for creating the widget
         * @private
         */
        function CheckBox(options, element) {
          var _this200;

          _classCallCheck2(this, CheckBox);

          _this200 = _super64.call(this, options, element);
          _this200.isFocused = false;
          _this200.isMouseClick = false;
          return _this200;
        }

        _createClass2(CheckBox, [{
          key: "changeState",
          value: function changeState(state) {
            var ariaState;
            var rippleSpan;
            var frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isRippleEnabled"]) {
              rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
            }

            if (state === 'check') {
              frameSpan.classList.remove(INDETERMINATE);
              frameSpan.classList.add(CHECK);

              if (rippleSpan) {
                rippleSpan.classList.remove(RIPPLEINDETERMINATE);
                rippleSpan.classList.add(RIPPLECHECK);
              }

              ariaState = 'true';
              this.element.checked = true;
            } else if (state === 'uncheck') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([frameSpan], [CHECK, INDETERMINATE]);

              if (rippleSpan) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([rippleSpan], [RIPPLECHECK, RIPPLEINDETERMINATE]);
              }

              ariaState = 'false';
              this.element.checked = false;
            } else {
              frameSpan.classList.remove(CHECK);
              frameSpan.classList.add(INDETERMINATE);

              if (rippleSpan) {
                rippleSpan.classList.remove(RIPPLECHECK);
                rippleSpan.classList.add(RIPPLEINDETERMINATE);
              }

              ariaState = 'mixed';
              this.element.indeterminate = true;
            }

            this.getWrapper().setAttribute('aria-checked', ariaState);
          }
        }, {
          key: "clickHandler",
          value: function clickHandler(event) {
            if (this.isMouseClick) {
              this.focusOutHandler();
              this.isMouseClick = false;
            }

            if (this.indeterminate) {
              this.changeState(this.checked ? 'check' : 'uncheck');
              this.indeterminate = false;
              this.element.indeterminate = false;
            } else if (this.checked) {
              this.changeState('uncheck');
              this.checked = false;
            } else {
              this.changeState('check');
              this.checked = true;
            }

            var changeEventArgs = {
              checked: this.element.checked,
              event: event
            };
            this.trigger('change', changeEventArgs);
          }
          /**
           * Destroys the widget.
           * @returns void
           */

        }, {
          key: "destroy",
          value: function destroy() {
            var _this201 = this;

            var wrapper = this.getWrapper();

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              if (!this.disabled) {
                this.unWireEvents();
              }
            } else {
              _get2(_getPrototypeOf2(CheckBox.prototype), "destroy", this).call(this);

              if (!this.disabled) {
                this.unWireEvents();
              }

              if (this.tagName === 'INPUT') {
                wrapper.parentNode.insertBefore(this.element, wrapper);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(wrapper);
                this.element.checked = false;

                if (this.indeterminate) {
                  this.element.indeterminate = false;
                }

                ['name', 'value', 'disabled'].forEach(function (key) {
                  _this201.element.removeAttribute(key);
                });
              } else {
                ['role', 'aria-checked', 'class'].forEach(function (key) {
                  wrapper.removeAttribute(key);
                });
                wrapper.innerHTML = '';
              }
            }
          }
        }, {
          key: "focusHandler",
          value: function focusHandler() {
            this.isFocused = true;
          }
        }, {
          key: "focusOutHandler",
          value: function focusOutHandler() {
            this.getWrapper().classList.remove('e-focus');
            this.isFocused = false;
          }
          /**
           * Gets the module name.
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'checkbox';
          }
          /**
           * Gets the properties to be maintained in the persistence state.
           * @private
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist(['checked', 'indeterminate']);
          }
        }, {
          key: "getWrapper",
          value: function getWrapper() {
            return this.element.parentElement.parentElement;
          }
        }, {
          key: "initialize",
          value: function initialize() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.initialCheckedValue)) {
              this.initialCheckedValue = this.checked;
            }

            if (this.name) {
              this.element.setAttribute('name', this.name);
            }

            if (this.value) {
              this.element.setAttribute('value', this.value);
            }

            if (this.checked) {
              this.changeState('check');
            }

            if (this.indeterminate) {
              this.changeState();
            }

            if (this.disabled) {
              this.setDisabled();
            }
          }
        }, {
          key: "initWrapper",
          value: function initWrapper() {
            var wrapper = this.element.parentElement;

            if (!wrapper.classList.contains(WRAPPER)) {
              wrapper = this.createElement('div', {
                className: WRAPPER,
                attrs: {
                  'role': 'checkbox',
                  'aria-checked': 'false'
                }
              });
              this.element.parentNode.insertBefore(wrapper, this.element);
            }

            var label = this.createElement('label', {
              attrs: {
                "for": this.element.id
              }
            });
            var frameSpan = this.createElement('span', {
              className: 'e-icons ' + FRAME
            });
            wrapper.classList.add('e-wrapper');

            if (this.enableRtl) {
              wrapper.classList.add(RTL);
            }

            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], this.cssClass.split(' '));
            }

            wrapper.appendChild(label);
            label.appendChild(this.element);
            setHiddenInput(this, label);
            label.appendChild(frameSpan);

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isRippleEnabled"]) {
              var rippleSpan = this.createElement('span', {
                className: RIPPLE
              });

              if (this.labelPosition === 'Before') {
                label.appendChild(rippleSpan);
              } else {
                label.insertBefore(rippleSpan, frameSpan);
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(rippleSpan, {
                duration: 400,
                isCenterRipple: true
              });
            }

            if (this.label) {
              this.setText(this.label);
            }
          }
        }, {
          key: "keyUpHandler",
          value: function keyUpHandler() {
            if (this.isFocused) {
              this.getWrapper().classList.add('e-focus');
            }
          }
        }, {
          key: "labelMouseHandler",
          value: function labelMouseHandler(e) {
            this.isMouseClick = true;
            var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
            rippleMouseHandler(e, rippleSpan);
          }
          /**
           * Called internally if any of the property value changes.
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var wrapper = this.getWrapper();

            for (var _i96 = 0, _Object$keys32 = Object.keys(newProp); _i96 < _Object$keys32.length; _i96++) {
              var prop = _Object$keys32[_i96];

              switch (prop) {
                case 'checked':
                  this.indeterminate = false;
                  this.element.indeterminate = false;
                  this.changeState(newProp.checked ? 'check' : 'uncheck');
                  break;

                case 'indeterminate':
                  if (newProp.indeterminate) {
                    this.changeState();
                  } else {
                    this.element.indeterminate = false;
                    this.changeState(this.checked ? 'check' : 'uncheck');
                  }

                  break;

                case 'disabled':
                  if (newProp.disabled) {
                    this.setDisabled();
                    this.unWireEvents();
                  } else {
                    this.element.disabled = false;
                    wrapper.classList.remove(DISABLED);
                    wrapper.setAttribute('aria-disabled', 'false');
                    this.wireEvents();
                  }

                  break;

                case 'cssClass':
                  if (oldProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([wrapper], oldProp.cssClass.split(' '));
                  }

                  if (newProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], newProp.cssClass.split(' '));
                  }

                  break;

                case 'enableRtl':
                  if (newProp.enableRtl) {
                    wrapper.classList.add(RTL);
                  } else {
                    wrapper.classList.remove(RTL);
                  }

                  break;

                case 'label':
                  this.setText(newProp.label);
                  break;

                case 'labelPosition':
                  var label = wrapper.getElementsByClassName(LABEL)[0];
                  var labelWrap = wrapper.getElementsByTagName('label')[0];
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(label);

                  if (newProp.labelPosition === 'After') {
                    labelWrap.appendChild(label);
                  } else {
                    labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);
                  }

                  break;

                case 'name':
                  this.element.setAttribute('name', newProp.name);
                  break;

                case 'value':
                  this.element.setAttribute('value', newProp.value);
                  break;

                case 'htmlAttributes':
                  this.updateHtmlAttributeToWrapper();
                  break;
              }
            }
          }
          /**
           * Initialize Angular, React and Unique ID support.
           * @private
           */

        }, {
          key: "preRender",
          value: function preRender() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              return;
            }

            var element = this.element;
            this.formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');
            this.tagName = this.element.tagName;
            element = wrapperInitialize(this.createElement, 'EJS-CHECKBOX', 'checkbox', element, WRAPPER, 'checkbox');
            this.element = element;

            if (this.element.getAttribute('type') !== 'checkbox') {
              this.element.setAttribute('type', 'checkbox');
            }

            if (!this.element.id) {
              this.element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('e-' + this.getModuleName());
            }
          }
          /**
           * Initialize the control rendering.
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isRippleEnabled"]) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.getWrapper().getElementsByClassName(RIPPLE)[0], {
                  duration: 400,
                  isCenterRipple: true
                });
              }
            } else {
              this.initWrapper();
              this.initialize();
            }

            if (!this.disabled) {
              this.wireEvents();
            }

            this.updateHtmlAttributeToWrapper();
            this.renderComplete();
          }
        }, {
          key: "setDisabled",
          value: function setDisabled() {
            var wrapper = this.getWrapper();
            this.element.disabled = true;
            wrapper.classList.add(DISABLED);
            wrapper.setAttribute('aria-disabled', 'true');
          }
        }, {
          key: "setText",
          value: function setText(text) {
            var label = this.getWrapper().getElementsByClassName(LABEL)[0];

            if (label) {
              label.textContent = text;
            } else {
              text = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(text) : text;
              label = this.createElement('span', {
                className: LABEL,
                innerHTML: text
              });
              var labelWrap = this.getWrapper().getElementsByTagName('label')[0];

              if (this.labelPosition === 'Before') {
                labelWrap.insertBefore(label, this.getWrapper().getElementsByClassName(FRAME)[0]);
              } else {
                labelWrap.appendChild(label);
              }
            }
          }
        }, {
          key: "changeHandler",
          value: function changeHandler(e) {
            e.stopPropagation();
          }
        }, {
          key: "formResetHandler",
          value: function formResetHandler() {
            this.checked = this.initialCheckedValue;
            this.element.checked = this.initialCheckedValue;
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            var wrapper = this.getWrapper();

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.clickHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keyup', this.keyUpHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focus', this.focusHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focusout', this.focusOutHandler);

            var label = wrapper.getElementsByTagName('label')[0];

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(label, 'mousedown', this.labelMouseHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(label, 'mouseup', this.labelMouseHandler);

            if (this.formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.formElement, 'reset', this.formResetHandler);
            }

            if (this.tagName === 'EJS-CHECKBOX') {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'change', this.changeHandler);
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            var wrapper = this.getWrapper();

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.clickHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keyup', this.keyUpHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focus', this.focusHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focusout', this.focusOutHandler, this);

            var label = wrapper.getElementsByTagName('label')[0];

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(label, 'mousedown', this.labelMouseHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(label, 'mouseup', this.labelMouseHandler, this);

            if (this.formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formElement, 'reset', this.formResetHandler, this);
            }

            if (this.tagName === 'EJS-CHECKBOX') {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'change', this.changeHandler, this);
            }
          }
        }, {
          key: "updateHtmlAttributeToWrapper",
          value: function updateHtmlAttributeToWrapper() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
              for (var _i97 = 0, _Object$keys33 = Object.keys(this.htmlAttributes); _i97 < _Object$keys33.length; _i97++) {
                var key = _Object$keys33[_i97];

                if (containerAttr.indexOf(key) > -1) {
                  var wrapper = this.getWrapper();

                  if (key === 'class') {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], this.htmlAttributes[key].split(' '));
                  } else if (key === 'title') {
                    wrapper.setAttribute(key, this.htmlAttributes[key]);
                  } else if (key === 'style') {
                    var frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];
                    frameSpan.setAttribute(key, this.htmlAttributes[key]);
                  } else {
                    this.element.setAttribute(key, this.htmlAttributes[key]);
                  }
                }
              }
            }
          }
          /**
           * Click the CheckBox element
           * its native method
           * @public
           */

        }, {
          key: "click",
          value: function click() {
            this.element.click();
          }
          /**
           * Sets the focus to CheckBox
           * its native method
           * @public
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            this.element.focus();
          }
        }]);

        return CheckBox;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], CheckBox.prototype, "change", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], CheckBox.prototype, "created", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], CheckBox.prototype, "checked", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], CheckBox.prototype, "cssClass", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], CheckBox.prototype, "disabled", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], CheckBox.prototype, "indeterminate", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], CheckBox.prototype, "label", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('After')], CheckBox.prototype, "labelPosition", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], CheckBox.prototype, "name", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], CheckBox.prototype, "value", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], CheckBox.prototype, "enableHtmlSanitizer", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], CheckBox.prototype, "htmlAttributes", void 0);

      CheckBox = __decorate$1([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], CheckBox);
      /**
       * CheckBox modules
       */

      var __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var RadioButton_1;
      var LABEL$1 = 'e-label';
      var RIPPLE$1 = 'e-ripple-container';
      var RTL$1 = 'e-rtl';
      var WRAPPER$1 = 'e-radio-wrapper';
      /**
       * The RadioButton is a graphical user interface element that allows you to select one option from the choices.
       * It contains checked and unchecked states.
       * ```html
       * <input type="radio" id="radio"/>
       * <script>
       * var radioObj = new RadioButton({ label: "Default" });
       * radioObj.appendTo("#radio");
       * </script>
       * ```
       */

      var RadioButton = RadioButton_1 = /*#__PURE__*/function (_syncfusion_ej2_base_42) {
        _inherits2(RadioButton, _syncfusion_ej2_base_42);

        var _super65 = _createSuper(RadioButton);

        /**
         * Constructor for creating the widget
         * @private
         */
        function RadioButton(options, element) {
          var _this202;

          _classCallCheck2(this, RadioButton);

          _this202 = _super65.call(this, options, element);
          _this202.isFocused = false;
          return _this202;
        }

        _createClass2(RadioButton, [{
          key: "changeHandler",
          value: function changeHandler(event) {
            this.checked = true;
            this.dataBind();
            var changeEventArgs = {
              value: this.value,
              event: event
            };
            this.trigger('change', changeEventArgs);

            if (this.tagName === 'EJS-RADIOBUTTON') {
              event.stopPropagation();
            }
          }
        }, {
          key: "updateChange",
          value: function updateChange(state) {
            var input;
            var instance;
            var radioGrp = this.getRadioGroup();

            for (var i = 0; i < radioGrp.length; i++) {
              input = radioGrp[i];

              if (input !== this.element) {
                instance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(input, RadioButton_1);
                instance.checked = false;

                if (this.tagName === 'EJS-RADIOBUTTON') {
                  instance.angularValue = this.value;
                }
              }
            }
          }
          /**
           * Destroys the widget.
           * @returns void
           */

        }, {
          key: "destroy",
          value: function destroy() {
            var _this203 = this;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              if (!this.disabled) {
                this.unWireEvents();
              }
            } else {
              var radioWrap = this.element.parentElement;

              _get2(_getPrototypeOf2(RadioButton.prototype), "destroy", this).call(this);

              if (!this.disabled) {
                this.unWireEvents();
              }

              if (this.tagName === 'INPUT') {
                radioWrap.parentNode.insertBefore(this.element, radioWrap);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(radioWrap);
                this.element.checked = false;
                ['name', 'value', 'disabled'].forEach(function (key) {
                  _this203.element.removeAttribute(key);
                });
              } else {
                ['role', 'aria-checked', 'class'].forEach(function (key) {
                  radioWrap.removeAttribute(key);
                });
                radioWrap.innerHTML = '';
              }
            }
          }
        }, {
          key: "focusHandler",
          value: function focusHandler() {
            this.isFocused = true;
          }
        }, {
          key: "focusOutHandler",
          value: function focusOutHandler() {
            this.getLabel().classList.remove('e-focus');
          }
        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'radio';
          }
          /**
           * To get the value of selected radio button in a group.
           * @method getSelectedValue
           * @return {string}
           */

        }, {
          key: "getSelectedValue",
          value: function getSelectedValue() {
            var input;
            var radioGrp = this.getRadioGroup();

            for (var i = 0, len = radioGrp.length; i < len; i++) {
              input = radioGrp[i];

              if (input.checked) {
                return input.value;
              }
            }

            return '';
          }
        }, {
          key: "getRadioGroup",
          value: function getRadioGroup() {
            return document.querySelectorAll('input.e-radio[name="' + this.element.getAttribute('name') + '"]');
          }
          /**
           * Gets the properties to be maintained in the persistence state.
           * @private
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist(['checked']);
          }
        }, {
          key: "getLabel",
          value: function getLabel() {
            return this.element.nextElementSibling;
          }
        }, {
          key: "initialize",
          value: function initialize() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.initialCheckedValue)) {
              this.initialCheckedValue = this.checked;
            }

            this.initWrapper();

            if (this.name) {
              this.element.setAttribute('name', this.name);
            }

            if (this.value) {
              this.element.setAttribute('value', this.value);
            }

            if (this.checked) {
              this.element.checked = true;
            }

            if (this.disabled) {
              this.setDisabled();
            }
          }
        }, {
          key: "initWrapper",
          value: function initWrapper() {
            var rippleSpan;
            var wrapper = this.element.parentElement;

            if (!wrapper.classList.contains(WRAPPER$1)) {
              wrapper = this.createElement('div', {
                className: WRAPPER$1
              });
              this.element.parentNode.insertBefore(wrapper, this.element);
            }

            var label = this.createElement('label', {
              attrs: {
                "for": this.element.id
              }
            });
            wrapper.appendChild(this.element);
            wrapper.appendChild(label);

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isRippleEnabled"]) {
              rippleSpan = this.createElement('span', {
                className: RIPPLE$1
              });
              label.appendChild(rippleSpan);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(rippleSpan, {
                duration: 400,
                isCenterRipple: true
              });
            }

            wrapper.classList.add('e-wrapper');

            if (this.enableRtl) {
              label.classList.add(RTL$1);
            }

            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], this.cssClass.split(' '));
            }

            if (this.label) {
              this.setText(this.label);
            }
          }
        }, {
          key: "keyUpHandler",
          value: function keyUpHandler() {
            if (this.isFocused) {
              this.getLabel().classList.add('e-focus');
            }
          }
        }, {
          key: "labelRippleHandler",
          value: function labelRippleHandler(e) {
            var ripple = this.getLabel().getElementsByClassName(RIPPLE$1)[0];
            rippleMouseHandler(e, ripple);
          }
        }, {
          key: "formResetHandler",
          value: function formResetHandler() {
            this.checked = this.initialCheckedValue;

            if (this.initialCheckedValue) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
                'checked': 'true'
              });
            }
          }
          /**
           * Called internally if any of the property value changes.
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var label = this.getLabel();

            for (var _i98 = 0, _Object$keys34 = Object.keys(newProp); _i98 < _Object$keys34.length; _i98++) {
              var prop = _Object$keys34[_i98];

              switch (prop) {
                case 'checked':
                  if (newProp.checked) {
                    this.updateChange(newProp.checked);
                  }

                  this.element.checked = newProp.checked;
                  break;

                case 'disabled':
                  if (newProp.disabled) {
                    this.setDisabled();
                    this.unWireEvents();
                  } else {
                    this.element.disabled = false;
                    this.wireEvents();
                  }

                  break;

                case 'cssClass':
                  if (oldProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([label], oldProp.cssClass.split(' '));
                  }

                  if (newProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], newProp.cssClass.split(' '));
                  }

                  break;

                case 'enableRtl':
                  if (newProp.enableRtl) {
                    label.classList.add(RTL$1);
                  } else {
                    label.classList.remove(RTL$1);
                  }

                  break;

                case 'label':
                  this.setText(newProp.label);
                  break;

                case 'labelPosition':
                  if (newProp.labelPosition === 'Before') {
                    label.classList.add('e-right');
                  } else {
                    label.classList.remove('e-right');
                  }

                  break;

                case 'name':
                  this.element.setAttribute('name', newProp.name);
                  break;

                case 'value':
                  this.element.setAttribute('value', newProp.value);
                  break;
              }
            }
          }
          /**
           * Initialize checked Property, Angular and React and Unique ID support.
           * @private
           */

        }, {
          key: "preRender",
          value: function preRender() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              return;
            }

            var element = this.element;
            this.formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');
            this.tagName = this.element.tagName;
            element = wrapperInitialize(this.createElement, 'EJS-RADIOBUTTON', 'radio', element, WRAPPER$1, 'radio');
            this.element = element;

            if (this.element.getAttribute('type') !== 'radio') {
              this.element.setAttribute('type', 'radio');
            }

            if (!this.element.id) {
              this.element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('e-' + this.getModuleName());
            }

            if (this.tagName === 'EJS-RADIOBUTTON') {
              var formControlName = this.element.getAttribute('formcontrolname');

              if (formControlName) {
                this.setProperties({
                  'name': formControlName
                }, true);
                this.element.setAttribute('name', formControlName);
              }
            }
          }
          /**
           * Initialize the control rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isRippleEnabled"]) {
                var rippleSpan = this.element.parentElement.getElementsByClassName(RIPPLE$1)[0];
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(rippleSpan, {
                  duration: 400,
                  isCenterRipple: true
                });
              }
            } else {
              this.initialize();
            }

            if (!this.disabled) {
              this.wireEvents();
            }

            this.renderComplete();
          }
        }, {
          key: "setDisabled",
          value: function setDisabled() {
            this.element.disabled = true;
          }
        }, {
          key: "setText",
          value: function setText(text) {
            var label = this.getLabel();
            var textLabel = label.getElementsByClassName(LABEL$1)[0];

            if (textLabel) {
              textLabel.textContent = text;
            } else {
              text = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(text) : text;
              textLabel = this.createElement('span', {
                className: LABEL$1,
                innerHTML: text
              });
              label.appendChild(textLabel);
            }

            if (this.labelPosition === 'Before') {
              this.getLabel().classList.add('e-right');
            } else {
              this.getLabel().classList.remove('e-right');
            }
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            var label = this.getLabel();

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'change', this.changeHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focus', this.focusHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focusout', this.focusOutHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keyup', this.keyUpHandler);

            var rippleLabel = label.getElementsByClassName(LABEL$1)[0];

            if (rippleLabel) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(rippleLabel, 'mousedown', this.labelRippleHandler);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(rippleLabel, 'mouseup', this.labelRippleHandler);
            }

            if (this.formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.formElement, 'reset', this.formResetHandler);
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            var label = this.getLabel();

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'change', this.changeHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keyup', this.keyUpHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focus', this.focusHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focusout', this.focusOutHandler, this);

            var rippleLabel = label.getElementsByClassName(LABEL$1)[0];

            if (rippleLabel) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(rippleLabel, 'mousedown', this.labelRippleHandler, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(rippleLabel, 'mouseup', this.labelRippleHandler, this);
            }

            if (this.formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formElement, 'reset', this.formResetHandler, this);
            }
          }
          /**
           * Click the RadioButton element
           * its native method
           * @public
           */

        }, {
          key: "click",
          value: function click() {
            this.element.click();
          }
          /**
           * Sets the focus to RadioButton
           * its native method
           * @public
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            this.element.focus();
          }
        }]);

        return RadioButton;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], RadioButton.prototype, "change", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], RadioButton.prototype, "created", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], RadioButton.prototype, "checked", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], RadioButton.prototype, "cssClass", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], RadioButton.prototype, "disabled", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], RadioButton.prototype, "label", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('After')], RadioButton.prototype, "labelPosition", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], RadioButton.prototype, "name", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], RadioButton.prototype, "value", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], RadioButton.prototype, "enableHtmlSanitizer", void 0);

      RadioButton = RadioButton_1 = __decorate$2([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], RadioButton);
      /**
       * RadioButton modules
       */

      var __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var DISABLED$1 = 'e-switch-disabled';
      var RIPPLE$2 = 'e-ripple-container';
      var RIPPLE_CHECK = 'e-ripple-check';
      var RTL$2 = 'e-rtl';
      var WRAPPER$2 = 'e-switch-wrapper';
      var ACTIVE = 'e-switch-active';
      /**
       * The Switch is a graphical user interface element that allows you to toggle between checked and unchecked states.
       * ```html
       * <input type="checkbox" id="switch"/>
       * <script>
       * var switchObj = new Switch({});
       * switchObj.appendTo("#switch");
       * </script>
       * ```
       */

      var Switch = /*#__PURE__*/function (_syncfusion_ej2_base_43) {
        _inherits2(Switch, _syncfusion_ej2_base_43);

        var _super66 = _createSuper(Switch);

        /**
         * Constructor for creating the widget.
         * @private
         */
        function Switch(options, element) {
          var _this204;

          _classCallCheck2(this, Switch);

          _this204 = _super66.call(this, options, element);
          _this204.isFocused = false;
          _this204.isDrag = false;
          return _this204;
        }

        _createClass2(Switch, [{
          key: "changeState",
          value: function changeState(state) {
            var ariaState;
            var rippleSpan;
            var wrapper = this.getWrapper();
            var bar = wrapper.querySelector('.e-switch-inner');
            var handle = wrapper.querySelector('.e-switch-handle');

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isRippleEnabled"]) {
              rippleSpan = wrapper.getElementsByClassName(RIPPLE$2)[0];
            }

            if (state) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([bar, handle], ACTIVE);
              ariaState = 'true';
              this.element.checked = true;
              this.checked = true;

              if (rippleSpan) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([rippleSpan], [RIPPLE_CHECK]);
              }
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([bar, handle], ACTIVE);
              ariaState = 'false';
              this.element.checked = false;
              this.checked = false;

              if (rippleSpan) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([rippleSpan], [RIPPLE_CHECK]);
              }
            }

            wrapper.setAttribute('aria-checked', ariaState);
          }
        }, {
          key: "clickHandler",
          value: function clickHandler(evt) {
            this.isDrag = false;
            this.focusOutHandler();
            this.changeState(!this.checked);
            this.element.focus();
            var changeEventArgs = {
              checked: this.element.checked,
              event: evt
            };
            this.trigger('change', changeEventArgs);
          }
          /**
           * Destroys the Switch widget.
           * @returns void
           */

        }, {
          key: "destroy",
          value: function destroy() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              if (!this.disabled) {
                this.unWireEvents();
              }
            } else {
              _get2(_getPrototypeOf2(Switch.prototype), "destroy", this).call(this);

              if (!this.disabled) {
                this.unWireEvents();
              }

              _destroy2(this, this.getWrapper(), this.tagName);
            }
          }
        }, {
          key: "focusHandler",
          value: function focusHandler() {
            this.isFocused = true;
          }
        }, {
          key: "focusOutHandler",
          value: function focusOutHandler() {
            this.getWrapper().classList.remove('e-focus');
          }
          /**
           * Gets the module name.
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'switch';
          }
          /**
           * Gets the properties to be maintained in the persistence state.
           * @private
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist(['checked']);
          }
        }, {
          key: "getWrapper",
          value: function getWrapper() {
            return this.element.parentElement;
          }
        }, {
          key: "initialize",
          value: function initialize() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.initialSwitchCheckedValue)) {
              this.initialSwitchCheckedValue = this.checked;
            }

            if (this.name) {
              this.element.setAttribute('name', this.name);
            }

            if (this.value) {
              this.element.setAttribute('value', this.value);
            }

            if (this.checked) {
              this.changeState(true);
            }

            if (this.disabled) {
              this.setDisabled();
            }

            if (this.onLabel || this.offLabel) {
              this.setLabel(this.onLabel, this.offLabel);
            }
          }
        }, {
          key: "initWrapper",
          value: function initWrapper() {
            var wrapper = this.element.parentElement;

            if (!wrapper.classList.contains(WRAPPER$2)) {
              wrapper = this.createElement('div', {
                className: WRAPPER$2,
                attrs: {
                  'role': 'switch',
                  'aria-checked': 'false'
                }
              });
              this.element.parentNode.insertBefore(wrapper, this.element);
            }

            var switchInner = this.createElement('span', {
              className: 'e-switch-inner'
            });
            var onLabel = this.createElement('span', {
              className: 'e-switch-on'
            });
            var offLabel = this.createElement('span', {
              className: 'e-switch-off'
            });
            var handle = this.createElement('span', {
              className: 'e-switch-handle'
            });
            wrapper.appendChild(this.element);
            setHiddenInput(this, wrapper);
            switchInner.appendChild(onLabel);
            switchInner.appendChild(offLabel);
            wrapper.appendChild(switchInner);
            wrapper.appendChild(handle);

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isRippleEnabled"]) {
              var rippleSpan = this.createElement('span', {
                className: RIPPLE$2
              });
              handle.appendChild(rippleSpan);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(rippleSpan, {
                duration: 400,
                isCenterRipple: true
              });
            }

            wrapper.classList.add('e-wrapper');

            if (this.enableRtl) {
              wrapper.classList.add(RTL$2);
            }

            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], this.cssClass.split(' '));
            }
          }
          /**
           * Called internally if any of the property value changes.
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var wrapper = this.getWrapper();

            for (var _i99 = 0, _Object$keys35 = Object.keys(newProp); _i99 < _Object$keys35.length; _i99++) {
              var prop = _Object$keys35[_i99];

              switch (prop) {
                case 'checked':
                  this.changeState(newProp.checked);
                  break;

                case 'disabled':
                  if (newProp.disabled) {
                    this.setDisabled();
                    this.unWireEvents();
                  } else {
                    this.element.disabled = false;
                    wrapper.classList.remove(DISABLED$1);
                    wrapper.setAttribute('aria-disabled', 'false');
                    this.wireEvents();
                  }

                  break;

                case 'value':
                  this.element.setAttribute('value', newProp.value);
                  break;

                case 'name':
                  this.element.setAttribute('name', newProp.name);
                  break;

                case 'onLabel':
                case 'offLabel':
                  this.setLabel(newProp.onLabel, newProp.offLabel);
                  break;

                case 'enableRtl':
                  if (newProp.enableRtl) {
                    wrapper.classList.add(RTL$2);
                  } else {
                    wrapper.classList.remove(RTL$2);
                  }

                  break;

                case 'cssClass':
                  if (oldProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([wrapper], oldProp.cssClass.split(' '));
                  }

                  if (newProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], newProp.cssClass.split(' '));
                  }

                  break;
              }
            }
          }
          /**
           * Initialize Angular, React and Unique ID support.
           * @private
           */

        }, {
          key: "preRender",
          value: function preRender() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              return;
            }

            var element = this.element;
            this.formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');
            this.tagName = this.element.tagName;

            _preRender(this, 'EJS-SWITCH', WRAPPER$2, element, this.getModuleName());
          }
          /**
           * Initialize control rendering.
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isRippleEnabled"]) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.element.parentElement, {
                  duration: 400,
                  isCenterRipple: true
                });
              }
            } else {
              this.initWrapper();
              this.initialize();
            }

            if (!this.disabled) {
              this.wireEvents();
            }

            this.renderComplete();
          }
        }, {
          key: "rippleHandler",
          value: function rippleHandler(e) {
            var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];
            rippleMouseHandler(e, rippleSpan);

            if (e.type === 'mousedown' && e.currentTarget.classList.contains('e-switch-wrapper') && e.which === 1) {
              this.isDrag = true;
              this.isFocused = false;
            }
          }
        }, {
          key: "rippleTouchHandler",
          value: function rippleTouchHandler(eventType) {
            var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];

            if (rippleSpan) {
              var _event3 = document.createEvent('MouseEvents');

              _event3.initEvent(eventType, false, true);

              rippleSpan.dispatchEvent(_event3);
            }
          }
        }, {
          key: "setDisabled",
          value: function setDisabled() {
            var wrapper = this.getWrapper();
            this.element.disabled = true;
            wrapper.classList.add(DISABLED$1);
            wrapper.setAttribute('aria-disabled', 'true');
          }
        }, {
          key: "setLabel",
          value: function setLabel(onText, offText) {
            var wrapper = this.getWrapper();

            if (onText) {
              wrapper.querySelector('.e-switch-on').textContent = onText;
            }

            if (offText) {
              wrapper.querySelector('.e-switch-off').textContent = offText;
            }
          }
        }, {
          key: "switchFocusHandler",
          value: function switchFocusHandler() {
            if (this.isFocused) {
              this.getWrapper().classList.add('e-focus');
            }
          }
        }, {
          key: "switchMouseUp",
          value: function switchMouseUp(e) {
            var target = e.target;
            var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];

            if (e.type === 'touchmove') {
              e.preventDefault();
            }

            if (e.type === 'touchstart') {
              this.isDrag = true;
              this.rippleTouchHandler('mousedown');
            }

            if (this.isDrag) {
              if (e.type === 'mouseup' && target.className.indexOf('e-switch') < 0 || e.type === 'touchend') {
                this.clickHandler(e);
                this.rippleTouchHandler('mouseup');
                e.preventDefault();
              }
            }
          }
        }, {
          key: "formResetHandler",
          value: function formResetHandler() {
            this.checked = this.initialSwitchCheckedValue;
            this.element.checked = this.initialSwitchCheckedValue;
          }
          /**
           * Toggle the Switch component state into checked/unchecked.
           * @returns void
           */

        }, {
          key: "toggle",
          value: function toggle() {
            this.clickHandler();
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            var wrapper = this.getWrapper();
            var handle = wrapper.querySelector('.e-switch-handle');
            this.delegateMouseUpHandler = this.switchMouseUp.bind(this);
            this.delegateKeyUpHandler = this.switchFocusHandler.bind(this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(wrapper, 'click', this.clickHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focus', this.focusHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focusout', this.focusOutHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mouseup', this.delegateMouseUpHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keyup', this.delegateKeyUpHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(wrapper, 'mousedown mouseup', this.rippleHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(wrapper, 'touchstart touchmove touchend', this.switchMouseUp, this);

            if (this.formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formElement, 'reset', this.formResetHandler, this);
            }
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            var wrapper = this.getWrapper();
            var handle = wrapper.querySelector('.e-switch-handle');

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(wrapper, 'click', this.clickHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focus', this.focusHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focusout', this.focusOutHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mouseup', this.delegateMouseUpHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keyup', this.delegateKeyUpHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(wrapper, 'mousedown mouseup', this.rippleHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(wrapper, 'touchstart touchmove touchend', this.switchMouseUp);

            if (this.formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.formElement, 'reset', this.formResetHandler);
            }
          }
          /**
           * Click the switch element
           * its native method
           * @public
           */

        }, {
          key: "click",
          value: function click() {
            this.element.click();
          }
          /**
           * Sets the focus to Switch
           * its native method
           * @public
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            this.element.focus();
          }
        }]);

        return Switch;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Switch.prototype, "change", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Switch.prototype, "created", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Switch.prototype, "checked", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Switch.prototype, "cssClass", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Switch.prototype, "disabled", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Switch.prototype, "name", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Switch.prototype, "onLabel", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Switch.prototype, "offLabel", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Switch.prototype, "value", void 0);

      Switch = __decorate$3([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Switch);
      /**
       * Switch modules
       */

      var __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var classNames = {
        chipSet: 'e-chip-set',
        chip: 'e-chip',
        avatar: 'e-chip-avatar',
        text: 'e-chip-text',
        icon: 'e-chip-icon',
        "delete": 'e-chip-delete',
        deleteIcon: 'e-dlt-btn',
        multiSelection: 'e-multi-selection',
        singleSelection: 'e-selection',
        active: 'e-active',
        chipWrapper: 'e-chip-avatar-wrap',
        iconWrapper: 'e-chip-icon-wrap',
        focused: 'e-focused',
        disabled: 'e-disabled',
        rtl: 'e-rtl'
      };
      /**
       * A chip component is a small block of essential information, mostly used on contacts or filter tags.
       * ```html
       * <div id="chip"></div>
       * ```
       * ```typescript
       * <script>
       * var chipObj = new ChipList();
       * chipObj.appendTo("#chip");
       * </script>
       * ```
       */

      var ChipList = /*#__PURE__*/function (_syncfusion_ej2_base_44) {
        _inherits2(ChipList, _syncfusion_ej2_base_44);

        var _super67 = _createSuper(ChipList);

        function ChipList(options, element) {
          var _this205;

          _classCallCheck2(this, ChipList);

          _this205 = _super67.call(this, options, element);
          _this205.multiSelectedChip = [];
          return _this205;
        }
        /**
         * Initialize the event handler
         * @private
         */


        _createClass2(ChipList, [{
          key: "preRender",
          value: function preRender() {//prerender
          }
          /**
           * To find the chips length.
           * @returns boolean
           * @private
           */

        }, {
          key: "chipType",
          value: function chipType() {
            return this.chips && this.chips.length && this.chips.length > 0;
          }
          /**
           * To Initialize the control rendering.
           * @returns void
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.type = this.chips.length ? 'chipset' : this.text || this.element.innerText ? 'chip' : 'chipset';

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
              this.setAttributes();
              this.createChip();
              this.setRtl();
              this.select(this.selectedChips);
            }

            this.wireEvent(false);
            this.rippleFunction = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.element, {
              selector: '.e-chip'
            });
            this.renderComplete();
          }
        }, {
          key: "createChip",
          value: function createChip() {
            this.innerText = this.element.innerText.trim();

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              var childElement = this.element.querySelectorAll('.e-chip');

              for (var i = 0; i < childElement.length; i++) {
                if (childElement[i] != null) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(childElement[i]);
                }
              }
            } else {
              this.element.innerHTML = '';
            }

            this.chipCreation(this.type === 'chip' ? [this.innerText ? this.innerText : this.text] : this.chips);
          }
        }, {
          key: "setAttributes",
          value: function setAttributes() {
            if (this.type === 'chip') {
              this.element.tabIndex = 0;
              this.element.setAttribute('role', 'option');
            } else {
              this.element.classList.add(classNames.chipSet);
              this.element.setAttribute('role', 'listbox');

              if (this.selection === 'Multiple') {
                this.element.classList.add(classNames.multiSelection);
                this.element.setAttribute('aria-multiselectable', 'true');
              } else if (this.selection === 'Single') {
                this.element.classList.add(classNames.singleSelection);
                this.element.setAttribute('aria-multiselectable', 'false');
              } else {
                this.element.setAttribute('aria-multiselectable', 'false');
              }
            }
          }
        }, {
          key: "setRtl",
          value: function setRtl() {
            this.element.classList[this.enableRtl ? 'add' : 'remove'](classNames.rtl);
          }
        }, {
          key: "chipCreation",
          value: function chipCreation(data) {
            var chipListArray = [];

            for (var i = 0; i < data.length; i++) {
              var fieldsData = this.getFieldValues(data[i]);
              var chipArray = this.elementCreation(fieldsData);
              var className = (classNames.chip + ' ' + (fieldsData.enabled ? ' ' : classNames.disabled) + ' ' + (fieldsData.avatarIconCss || fieldsData.avatarText ? classNames.chipWrapper : fieldsData.leadingIconCss ? classNames.iconWrapper : ' ') + ' ' + fieldsData.cssClass).split(' ').filter(function (css) {
                return css;
              });

              if (!this.chipType()) {
                chipListArray = chipArray;
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], className);
                this.element.setAttribute('aria-label', fieldsData.text);

                if (fieldsData.value) {
                  this.element.setAttribute('data-value', fieldsData.value.toString());
                }
              } else {
                var wrapper = this.createElement('DIV', {
                  className: className.join(' '),
                  attrs: {
                    tabIndex: '0',
                    role: 'option',
                    'aria-label': fieldsData.text,
                    'aria-selected': 'false'
                  }
                });

                if (fieldsData.value) {
                  wrapper.setAttribute('data-value', fieldsData.value.toString());
                }

                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(chipArray, wrapper);
                chipListArray.push(wrapper);
              }
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(chipListArray, this.element);
          }
        }, {
          key: "getFieldValues",
          value: function getFieldValues(data) {
            var chipEnabled = !(this.enabled.toString() === 'false');
            var fields = {
              text: typeof data === 'object' ? data.text ? data.text.toString() : this.text.toString() : !this.chipType() ? this.innerText ? this.innerText : this.text.toString() : data.toString(),
              cssClass: typeof data === 'object' ? data.cssClass ? data.cssClass.toString() : this.cssClass.toString() : this.cssClass.toString(),
              leadingIconCss: typeof data === 'object' ? data.leadingIconCss ? data.leadingIconCss.toString() : this.leadingIconCss.toString() : this.leadingIconCss.toString(),
              avatarIconCss: typeof data === 'object' ? data.avatarIconCss ? data.avatarIconCss.toString() : this.avatarIconCss.toString() : this.avatarIconCss.toString(),
              avatarText: typeof data === 'object' ? data.avatarText ? data.avatarText.toString() : this.avatarText.toString() : this.avatarText.toString(),
              trailingIconCss: typeof data === 'object' ? data.trailingIconCss ? data.trailingIconCss.toString() : this.trailingIconCss.toString() : this.trailingIconCss.toString(),
              enabled: typeof data === 'object' ? !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data.enabled) ? data.enabled.toString() === 'false' ? false : true : chipEnabled : chipEnabled,
              value: typeof data === 'object' ? data.value ? data.value.toString() : null : null,
              leadingIconUrl: typeof data === 'object' ? data.leadingIconUrl ? data.leadingIconUrl.toString() : this.leadingIconUrl : this.leadingIconUrl,
              trailingIconUrl: typeof data === 'object' ? data.trailingIconUrl ? data.trailingIconUrl.toString() : this.trailingIconUrl : this.trailingIconUrl
            };
            return fields;
          }
        }, {
          key: "elementCreation",
          value: function elementCreation(fields) {
            var chipArray = [];

            if (fields.avatarText || fields.avatarIconCss) {
              var className = (classNames.avatar + ' ' + fields.avatarIconCss).trim();
              var chipAvatarElement = this.createElement('span', {
                className: className
              });
              chipAvatarElement.innerText = fields.avatarText;
              chipArray.push(chipAvatarElement);
            } else if (fields.leadingIconCss) {
              var _className = (classNames.icon + ' ' + fields.leadingIconCss).trim();

              var chipIconElement = this.createElement('span', {
                className: _className
              });
              chipArray.push(chipIconElement);
            } else if (fields.leadingIconUrl) {
              var _className2 = (classNames.avatar + ' ' + 'image-url').trim();

              var _chipIconElement = this.createElement('span', {
                className: _className2
              });

              _chipIconElement.style.backgroundImage = 'url(' + fields.leadingIconUrl + ')';
              chipArray.push(_chipIconElement);
            }

            var chipTextElement = this.createElement('span', {
              className: classNames.text
            });
            chipTextElement.innerText = fields.text;
            chipArray.push(chipTextElement);

            if (fields.trailingIconCss || this.chipType() && this.enableDelete) {
              var _className3 = (classNames["delete"] + ' ' + (fields.trailingIconCss ? fields.trailingIconCss : classNames.deleteIcon)).trim();

              var chipdeleteElement = this.createElement('span', {
                className: _className3
              });
              chipArray.push(chipdeleteElement);
            } else if (fields.trailingIconUrl) {
              var _className4 = 'trailing-icon-url'.trim();

              var chipIconsElement = this.createElement('span', {
                className: _className4
              });
              chipIconsElement.style.backgroundImage = 'url(' + fields.trailingIconUrl + ')';
              chipArray.push(chipIconsElement);
            }

            return chipArray;
          }
          /**
           * A function that finds chip based on given input.
           * @param  {number | HTMLElement } fields - We can pass index number or element of chip.
           */

        }, {
          key: "find",
          value: function find(fields) {
            var chipData;
            var chipElement = fields instanceof HTMLElement ? fields : this.element.querySelectorAll('.' + classNames.chip)[fields];

            if (chipElement && this.chipType()) {
              chipData = {
                text: undefined,
                index: undefined,
                element: undefined,
                data: undefined
              };
              chipData.index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipElement);
              chipData.text = typeof this.chips[chipData.index] === 'object' ? this.chips[chipData.index].text ? this.chips[chipData.index].text.toString() : '' : this.chips[chipData.index].toString();
              chipData.data = this.chips[chipData.index];
              chipData.element = chipElement;
            }

            return chipData;
          }
          /**
           * Allows adding the chip item(s) by passing a single or array of string, number, or ChipModel values.
           * @param  {string[] | number[] | ChipModel[] | string | number | ChipModel} chipsData - We can pass array of string or
           *  array of number or array of chip model or string data or number data or chip model.
           * @deprecated
           */

        }, {
          key: "add",
          value: function add(chipsData) {
            if (this.type !== 'chip') {
              var _this$chips;

              var fieldData = chipsData instanceof Array ? chipsData : [chipsData];

              (_this$chips = this.chips).push.apply(_this$chips, _toConsumableArray(fieldData));

              this.chipCreation(fieldData);
            }
          }
          /**
           * Allows selecting the chip item(s) by passing a single or array of string, number, or ChipModel values.
           * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number
           *  or chip element or array of chip element.
           */

        }, {
          key: "select",
          value: function select(fields) {
            this.onSelect(fields, false);
          }
        }, {
          key: "multiSelection",
          value: function multiSelection(newProp) {
            var items = this.element.querySelectorAll('.' + 'e-chip');

            for (var j = 0; j < newProp.length; j++) {
              if (typeof newProp[j] === 'string') {
                for (var k = 0; k < items.length; k++) {
                  if (newProp[j] !== k) {
                    if (newProp[j] === items[k].attributes[5].value) {
                      this.multiSelectedChip.push(k);
                      break;
                    }
                  }
                }
              } else {
                this.multiSelectedChip.push(newProp[j]);
              }
            }
          }
        }, {
          key: "onSelect",
          value: function onSelect(fields, callFromProperty) {
            if (this.chipType() && this.selection !== 'None') {
              if (callFromProperty) {
                var chipElements = this.element.querySelectorAll('.' + classNames.chip);

                for (var i = 0; i < chipElements.length; i++) {
                  chipElements[i].setAttribute('aria-selected', 'false');
                  chipElements[i].classList.remove(classNames.active);
                }
              }

              var fieldData = fields instanceof Array ? fields : [fields];

              for (var _i100 = 0; _i100 < fieldData.length; _i100++) {
                var chipElement = fieldData[_i100] instanceof HTMLElement ? fieldData[_i100] : this.element.querySelectorAll('.' + classNames.chip)[fieldData[_i100]];

                if (chipElement instanceof HTMLElement) {
                  this.selectionHandler(chipElement);
                }
              }
            }
          }
          /**
           * Allows removing the chip item(s) by passing a single or array of string, number, or ChipModel values.
           * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number
           *  or chip element or array of chip element.
           */

        }, {
          key: "remove",
          value: function remove(fields) {
            var _this206 = this;

            if (this.chipType()) {
              var fieldData = fields instanceof Array ? fields : [fields];
              var chipElements = [];
              var chipCollection = this.element.querySelectorAll('.' + classNames.chip);
              fieldData.forEach(function (data) {
                var chipElement = data instanceof HTMLElement ? data : chipCollection[data];

                if (chipElement instanceof HTMLElement) {
                  chipElements.push(chipElement);
                }
              });
              chipElements.forEach(function (element) {
                var chips = _this206.element.querySelectorAll('.' + classNames.chip);

                var index = Array.prototype.slice.call(chips).indexOf(element);

                _this206.deleteHandler(element, index);
              });
            }
          }
          /**
           * Returns the selected chip(s) data.
           */

        }, {
          key: "getSelectedChips",
          value: function getSelectedChips() {
            var selectedChips;

            if (this.chipType() && this.selection !== 'None') {
              var selectedItems = {
                texts: [],
                Indexes: [],
                data: [],
                elements: []
              };
              var items = this.element.querySelectorAll('.' + classNames.active);

              for (var i = 0; i < items.length; i++) {
                var chip = items[i];
                selectedItems.elements.push(chip);
                var index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chip);
                selectedItems.Indexes.push(index);
                selectedItems.data.push(this.chips[index]);
                var text = typeof this.chips[index] === 'object' ? this.chips[index].text ? this.chips[index].text.toString() : null : this.chips[index].toString();
                selectedItems.texts.push(text);
              }

              var selectedItem = {
                text: selectedItems.texts[0],
                index: selectedItems.Indexes[0],
                data: selectedItems.data[0],
                element: selectedItems.elements[0]
              };
              selectedChips = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selectedItem.index) ? this.selection === 'Multiple' ? selectedItems : selectedItem : undefined;
            }

            return selectedChips;
          }
        }, {
          key: "wireEvent",
          value: function wireEvent(unWireEvent) {
            if (!unWireEvent) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.clickHandler, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focusout', this.focusOutHandler, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keydown', this.keyHandler, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keyup', this.keyHandler, this);
            } else {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.clickHandler);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focusout', this.focusOutHandler);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keydown', this.keyHandler);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keyup', this.keyHandler);
            }
          }
        }, {
          key: "keyHandler",
          value: function keyHandler(e) {
            if (e.target.classList.contains(classNames.chip)) {
              if (e.type === 'keydown') {
                if (e.keyCode === 13) {
                  this.clickHandler(e);
                } else if (e.keyCode === 46 && this.enableDelete) {
                  this.clickHandler(e, true);
                }
              } else if (e.keyCode === 9) {
                this.focusInHandler(e.target);
              }
            }
          }
        }, {
          key: "focusInHandler",
          value: function focusInHandler(chipWrapper) {
            if (!chipWrapper.classList.contains(classNames.focused)) {
              chipWrapper.classList.add(classNames.focused);
            }
          }
        }, {
          key: "focusOutHandler",
          value: function focusOutHandler(e) {
            var chipWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + classNames.chip);
            var focusedElement = !this.chipType() ? this.element.classList.contains(classNames.focused) ? this.element : null : this.element.querySelector('.' + classNames.focused);

            if (chipWrapper && focusedElement) {
              focusedElement.classList.remove(classNames.focused);
            }
          }
        }, {
          key: "clickHandler",
          value: function clickHandler(e) {
            var _this207 = this;

            var del = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var chipWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(e.target, '.' + classNames.chip);

            if (chipWrapper) {
              var chipDataArgs;

              if (this.chipType()) {
                chipDataArgs = this.find(chipWrapper);
              } else {
                var index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipWrapper);
                chipDataArgs = {
                  text: this.innerText ? this.innerText : this.text,
                  element: chipWrapper,
                  data: this.text,
                  index: index
                };
              }

              chipDataArgs.event = e;
              chipDataArgs.cancel = false;
              this.trigger('beforeClick', chipDataArgs, function (observedArgs) {
                if (!observedArgs.cancel) {
                  observedArgs.element = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getElement"])(observedArgs.element) : observedArgs.element;

                  _this207.clickEventHandler(observedArgs.element, e, del);
                }
              });
            }
          }
        }, {
          key: "clickEventHandler",
          value: function clickEventHandler(chipWrapper, e, del) {
            var _this208 = this;

            if (this.chipType()) {
              var chipData = this.find(chipWrapper);
              chipData.event = e;
              var deleteElement = e.target.classList.contains(classNames.deleteIcon) ? e.target : del ? chipWrapper.querySelector('.' + classNames.deleteIcon) : undefined;

              if (deleteElement && this.enableDelete) {
                chipData.cancel = false;
                var deletedItemArgs = chipData;
                this.trigger('delete', deletedItemArgs, function (observedArgs) {
                  if (!observedArgs.cancel) {
                    observedArgs.element = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getElement"])(observedArgs.element) : observedArgs.element;

                    _this208.deleteHandler(observedArgs.element, observedArgs.index);
                  }
                });
              } else if (this.selection !== 'None') {
                this.selectionHandler(chipWrapper);
                chipData.selected = chipWrapper.classList.contains(classNames.active);
                var selectedItemArgs = chipData;
                this.trigger('click', selectedItemArgs);
              } else {
                this.focusInHandler(chipWrapper);
                var clickedItemArgs = chipData;
                this.trigger('click', clickedItemArgs);
              }
            } else {
              this.focusInHandler(chipWrapper);
              var _clickedItemArgs = {
                text: this.innerText ? this.innerText : this.text,
                element: chipWrapper,
                data: this.text,
                event: e
              };
              this.trigger('click', _clickedItemArgs);
            }
          }
        }, {
          key: "selectionHandler",
          value: function selectionHandler(chipWrapper) {
            if (this.selection === 'Single') {
              var activeElement = this.element.querySelector('.' + classNames.active);

              if (activeElement && activeElement !== chipWrapper) {
                activeElement.classList.remove(classNames.active);
                activeElement.setAttribute('aria-selected', 'false');
              }

              this.setProperties({
                selectedChips: null
              }, true);
            } else {
              this.setProperties({
                selectedChips: []
              }, true);
            }

            if (chipWrapper.classList.contains(classNames.active)) {
              chipWrapper.classList.remove(classNames.active);
              chipWrapper.setAttribute('aria-selected', 'false');
            } else {
              chipWrapper.classList.add(classNames.active);
              chipWrapper.setAttribute('aria-selected', 'true');
            }

            this.updateSelectedChips();
          }
        }, {
          key: "updateSelectedChips",
          value: function updateSelectedChips() {
            var chipListEle = this.element.querySelectorAll('.e-chip');
            var chipCollIndex = [];
            var chipCollValue = [];
            var chip = null;
            var value;

            for (var i = 0; i < chipListEle.length; i++) {
              var selectedEle = this.element.querySelectorAll('.e-chip')[i];

              if (selectedEle.getAttribute('aria-selected') === 'true') {
                value = selectedEle.getAttribute('data-value');

                if (this.selection === 'Single' && selectedEle.classList.contains('e-active')) {
                  chip = value ? value : i;
                  break;
                } else {
                  value ? chipCollValue.push(value) : chipCollIndex.push(i);
                }
              }
            }

            this.setProperties({
              selectedChips: this.selection === 'Single' ? chip : value ? chipCollValue : chipCollIndex
            }, true);
          }
        }, {
          key: "deleteHandler",
          value: function deleteHandler(chipWrapper, index) {
            this.allowServerDataBinding = true;
            this.chips.splice(index, 1);
            this.setProperties({
              chips: this.chips
            }, true);
            this.serverDataBind();
            this.allowServerDataBinding = false;

            if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(chipWrapper);
            }
          }
          /**
           * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.
           */

        }, {
          key: "destroy",
          value: function destroy() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], [classNames.chipSet, classNames.chip, classNames.rtl, classNames.multiSelection, classNames.singleSelection, classNames.disabled, classNames.chipWrapper, classNames.iconWrapper, classNames.active, classNames.focused].concat(this.cssClass.toString().split(' ').filter(function (css) {
              return css;
            })));
            this.removeMultipleAttributes(['tabindex', 'role', 'aria-label', 'aria-multiselectable'], this.element);
            this.wireEvent(true);
            this.rippleFunction();

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              var chipChildElement = !this.chipType() ? this.element.querySelectorAll('.e-chip-text') : this.element.querySelectorAll('.e-chip');

              for (var i = 0; i < chipChildElement.length; i++) {
                if (chipChildElement[i] != null) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(chipChildElement[i]);
                }
              }
            } else {
              _get2(_getPrototypeOf2(ChipList.prototype), "destroy", this).call(this);

              this.element.innerHTML = '';
              this.element.innerText = this.innerText;
            }
          }
        }, {
          key: "removeMultipleAttributes",
          value: function removeMultipleAttributes(attributes$$1, element) {
            attributes$$1.forEach(function (attr) {
              element.removeAttribute(attr);
            });
          }
        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist([]);
          }
        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'chip-list';
          }
          /**
           * Called internally if any of the property value changed.
           * @returns void
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i101 = 0, _Object$keys36 = Object.keys(newProp); _i101 < _Object$keys36.length; _i101++) {
              var prop = _Object$keys36[_i101];

              switch (prop) {
                case 'chips':
                case 'text':
                case 'avatarText':
                case 'avatarIconCss':
                case 'leadingIconCss':
                case 'trailingIconCss':
                case 'selection':
                case 'enableDelete':
                case 'enabled':
                  if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
                    this.isServerRendered = false;
                    this.refresh();
                    this.isServerRendered = true;
                  }

                  break;

                case 'cssClass':
                  if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
                    if (!this.chipType()) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldProp.cssClass.toString().split(' ').filter(function (css) {
                        return css;
                      }));
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], newProp.cssClass.toString().split(' ').filter(function (css) {
                        return css;
                      }));
                    } else {
                      this.isServerRendered = false;
                      this.refresh();
                      this.isServerRendered = true;
                    }
                  }

                  break;

                case 'selectedChips':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(this.element.querySelectorAll('.e-active'), 'e-active');

                  if (this.selection === 'Multiple') {
                    this.multiSelectedChip = [];
                    this.multiSelection(newProp.selectedChips);
                    this.onSelect(this.multiSelectedChip, true);
                    this.updateSelectedChips();
                  } else {
                    this.onSelect(newProp.selectedChips, true);
                  }

                  break;

                case 'enableRtl':
                  this.setRtl();
                  break;
              }
            }
          }
        }]);

        return ChipList;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], ChipList.prototype, "chips", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ChipList.prototype, "text", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ChipList.prototype, "avatarText", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ChipList.prototype, "avatarIconCss", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ChipList.prototype, "leadingIconCss", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ChipList.prototype, "trailingIconCss", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ChipList.prototype, "leadingIconUrl", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ChipList.prototype, "trailingIconUrl", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ChipList.prototype, "cssClass", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], ChipList.prototype, "enabled", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])([])], ChipList.prototype, "selectedChips", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('None')], ChipList.prototype, "selection", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ChipList.prototype, "enableDelete", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ChipList.prototype, "created", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ChipList.prototype, "click", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ChipList.prototype, "beforeClick", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ChipList.prototype, "delete", void 0);

      ChipList = __decorate$4([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], ChipList);
      /**
       * Represents ChipList `Chip` model class.
       */

      var Chip = function Chip() {
        _classCallCheck2(this, Chip);
      };
      /**
       * Chip modules
       */

      /**
       * Button all modules
       */
      //# sourceMappingURL=ej2-buttons.es2015.js.map

      /***/

    },

    /***/
    "YrEC":
    /*!****************************************************************************************!*\
      !*** ./src/app/pages/Payment Heads/payment-heads-service/payment-heads-api.service.ts ***!
      \****************************************************************************************/

    /*! exports provided: paymentHeadApiService */

    /***/
    function YrEC(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "paymentHeadApiService", function () {
        return paymentHeadApiService;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common/http */
      "tk/3");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../../../../environments/environment */
      "AytR");

      var paymentHeadApiService = /*#__PURE__*/function () {
        function paymentHeadApiService(http) {
          _classCallCheck2(this, paymentHeadApiService);

          this.http = http;
          /** Here we provide daynamic environment value from environment */

          this.endpoint = _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].apiBaseUrl;
          this.headers = new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"]().set('Contant-Type', 'application/x-www-form-urlencoded'); //Set a Header Value.
        }
        /**Create method for manage errors when request and return response from the server*/


        _createClass2(paymentHeadApiService, [{
          key: "errorMgmt",
          value: function errorMgmt(error) {
            try {
              var errorMessage = '';
              /** Handle client side error */

              if (error.error instanceof ErrorEvent) {
                errorMessage = error.error.message;
              }
              /** Handle server side error */
              else {
                  errorMessage = "Error code:".concat(error.status, "\nMessage:").concat(errorMessage);
                }

              console.log(errorMessage);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(errorMessage);
            } catch (err) {
              console.log(err.message);
            }
          }
          /**get payment heads data  */

        }, {
          key: "getPaymentHeadData",
          value: function getPaymentHeadData() {
            try {
              var companyId = sessionStorage.getItem("companyId");
              var apiURL = "".concat(this.endpoint, "/company/list-payment-heads/").concat(companyId);
              return this.http.get(apiURL).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } // Individual Payment Heads Details

        }, {
          key: "paymentHeadDetails",
          value: function paymentHeadDetails(paymentHeadId) {
            try {
              var apiURL = "".concat(this.endpoint, "/company/payment-head-details/").concat(paymentHeadId);
              return this.http.get(apiURL).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          }
          /** add payment heads */

        }, {
          key: "addPaymentHeads",
          value: function addPaymentHeads(data) {
            try {
              var companyId = sessionStorage.getItem("companyId");
              var apiURL = "".concat(this.endpoint, "/company/add-payment-head/").concat(companyId);
              return this.http.post(apiURL, data).pipe();
            } catch (err) {
              console.log(err);
            }
          }
          /**update payment heads */

        }, {
          key: "updatePaymentHeads",
          value: function updatePaymentHeads(data, paymentHeadId) {
            try {
              var companyId = sessionStorage.getItem("companyId");
              var apiURL = "".concat(this.endpoint, "/company/update-payment-head/").concat(companyId, "/").concat(paymentHeadId);
              return this.http.post(apiURL, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          }
          /**remove payment head */

        }, {
          key: "removePaymentHead",
          value: function removePaymentHead(paymentHeadId) {
            try {
              var apiURL = "".concat(this.endpoint, "/company/delete-payment-head/").concat(paymentHeadId);
              return this.http["delete"](apiURL).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          }
        }]);

        return paymentHeadApiService;
      }();

      paymentHeadApiService.ɵfac = function paymentHeadApiService_Factory(t) {
        return new (t || paymentHeadApiService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]));
      };

      paymentHeadApiService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: paymentHeadApiService,
        factory: paymentHeadApiService.ɵfac,
        providedIn: 'root'
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](paymentHeadApiService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "aNU0":
    /*!***************************************************!*\
      !*** ./src/app/themes/header/header.component.ts ***!
      \***************************************************/

    /*! exports provided: HeaderComponent */

    /***/
    function aNU0(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HeaderComponent", function () {
        return HeaderComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var src_app_services_api_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! src/app/services/api.service */
      "H+bZ");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");

      function HeaderComponent_a_8_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 25);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "strong");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("", ctx_r0.companyName, " Payroll");
        }
      }

      function HeaderComponent_a_9_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 25);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "strong");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2, "Aryavrat Payroll");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function HeaderComponent_option_21_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "option", 26);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var company_r4 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpropertyInterpolate"]("value", company_r4._id);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](company_r4.name);
        }
      }

      var _c0 = function _c0(a0) {
        return {
          "show": a0
        };
      };

      var HeaderComponent = /*#__PURE__*/function () {
        function HeaderComponent(apiService, route, ngZone) {
          _classCallCheck2(this, HeaderComponent);

          this.apiService = apiService;
          this.route = route;
          this.ngZone = ngZone;
          this.navbarOpen = false;
        }

        _createClass2(HeaderComponent, [{
          key: "toggleNavbar",
          value: function toggleNavbar() {
            this.navbarOpen = !this.navbarOpen;
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this.userProfile();
            this.getList();
            this.getIndividualList();
            var getmyVal = JSON.parse(localStorage.getItem("myVal"));
            var id = getmyVal.split('@');
            this.userId = id[0];
          } //Method for show data in the list

        }, {
          key: "getList",
          value: function getList() {
            var _this209 = this;

            try {
              this.apiService.getListData().subscribe(function (data) {
                if (data.status === 'success' || data.status === 200) {
                  if (data.company.length === 0) {
                    _this209.ngZone.run(function () {
                      return _this209.route.navigateByUrl('/pages/company/add-company');
                    });
                  } else {
                    _this209.companyListData = data.company;
                  }
                }
              });
            } catch (err) {
              console.log(err);
            }
          } //Method for show dropdown selected value

        }, {
          key: "getIndividualList",
          value: function getIndividualList() {
            var _this210 = this;

            try {
              if (sessionStorage.getItem('companyId') === "undefined") {
                this.companyName = "No Company Added";
              } else {
                this.apiService.getIndividualData(sessionStorage.getItem('companyId')).subscribe(function (data) {
                  if (data.status === 'success') {
                    _this210.companyName = data.data.name;

                    _this210.filterCompanyId();
                  } else {
                    console.log(data.message);
                  }
                });
              }
            } catch (err) {}
          } //Method for set selected valuein session storage

        }, {
          key: "onSelect",
          value: function onSelect(companyId) {
            try {
              sessionStorage.setItem('companyId', companyId);
              localStorage.setItem('companyId', companyId);
              window.location.reload();
            } catch (err) {
              console.log(err);
            }
          } //Method for filter company Name by companyId

        }, {
          key: "filterCompanyId",
          value: function filterCompanyId() {
            var companyId = sessionStorage.getItem('companyId');

            if (companyId != undefined) {
              this.filterListData = this.companyListData.filter(function (e) {
                return e._id !== companyId;
              });
              this.companyListData = this.filterListData;
            }
          }
        }, {
          key: "logout",
          value: function logout() {
            this.apiService.submitLogout();
            this.route.navigateByUrl('/users');
          } // User Profile Details

        }, {
          key: "userProfile",
          value: function userProfile() {
            var _this211 = this;

            try {
              this.apiService.getUserDetails().subscribe(function (data) {
                if (data.status === 'success') {
                  _this211.url = data.data.avatar;

                  if (data.data.name.length > 0) {
                    _this211.userId = data.data.name;
                  }
                }
              });
            } catch (error) {
              console.log(error);
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {}
        }]);

        return HeaderComponent;
      }();

      HeaderComponent.ɵfac = function HeaderComponent_Factory(t) {
        return new (t || HeaderComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](src_app_services_api_service__WEBPACK_IMPORTED_MODULE_1__["ApiService"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]));
      };

      HeaderComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: HeaderComponent,
        selectors: [["app-header"]],
        decls: 37,
        vars: 9,
        consts: [[1, "navbar", "navbar-expand-lg", "navbar-absolute", "fixed-top", "navbar-transparent"], [1, "container-fluid"], [1, "navbar-wrapper"], [1, "navbar-toggle"], ["type", "button", "data-toggle", "navbar-collapse", 1, "navbar-toggler"], [1, "navbar-toggler-bar", "bar1"], [1, "navbar-toggler-bar", "bar2"], [1, "navbar-toggler-bar", "bar3"], ["class", "navbar-brand", "routerLink", "/pages/dashboard", 4, "ngIf"], ["type", "button", "data-toggle", "navbar-collapse", "aria-controls", "navigation-index", "aria-expanded", "false", "aria-label", "Toggle navigation", 1, "navbar-toggler", 3, "click"], [1, "navbar-toggler-bar", "navbar-kebab"], ["id", "navigation", 1, "collapse", "navbar-collapse", "justify-content-end", 3, "ngClass"], [1, "input-group", "no-border", "form-group"], ["id", "headerCompanyDropDown", "Name", "Company", 1, "dropdown", "dropdown-toggle", "form-control", 3, "change"], ["selectOption", ""], ["selected", "", "disabled", "", 1, "dropdown-item"], ["class", "dropdown-item", 3, "value", 4, "ngFor", "ngForOf"], [1, "nav-item", "btn-rotate", "dropdown"], ["href", "#", "id", "navbarDropdownMenuLink", "data-toggle", "dropdown", "aria-haspopup", "true", "aria-expanded", "false", 1, "nav-link", "dropdown-toggle"], ["alt", "Cinque Terre", 1, "rounded-circle", 2, "width", "40px", "height", "40px", 3, "src"], [1, "d-lg-none", "d-md-block"], ["aria-labelledby", "navbarDropdownMenuLink", 1, "dropdown-menu", "dropdown-menu-right"], [1, "dropdown-item", 2, "cursor", "pointer"], ["routerLink", "/pages/update-profile", 1, "dropdown-item", 2, "cursor", "pointer"], [1, "dropdown-item", 2, "cursor", "pointer", 3, "click"], ["routerLink", "/pages/dashboard", 1, "navbar-brand"], [1, "dropdown-item", 3, "value"]],
        template: function HeaderComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "nav", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "button", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](5, "span", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](6, "span", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](7, "span", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, HeaderComponent_a_8_Template, 3, 1, "a", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](9, HeaderComponent_a_9_Template, 3, 0, "a", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "button", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function HeaderComponent_Template_button_click_10_listener() {
              return ctx.toggleNavbar();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "span", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](12, "span", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](13, "span", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "div", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](15, "form");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "div", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](17, "select", 13, 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function HeaderComponent_Template_select_change_17_listener($event) {
              return ctx.onSelect($event.target.value);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](19, "option", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](21, HeaderComponent_option_21_Template, 2, 2, "option", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](22, " \xA0 ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](23, "form");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](24, "div", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](25, "a", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](26, "img", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](27, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](28, "span", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](29, "Account");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](30, "div", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](31, "a", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](33, "a", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](34, "Update Profile");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](35, "a", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function HeaderComponent_Template_a_click_35_listener() {
              return ctx.logout();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](36, "Logout");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.companyName !== "No Company Added");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.companyName === "No Company Added");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](7, _c0, ctx.navbarOpen));

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.companyName);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.companyListData);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx.url, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.userId);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgClass"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ɵangular_packages_forms_forms_y"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NgControlStatusGroup"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NgForm"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NgSelectOption"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ɵangular_packages_forms_forms_x"], _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgForOf"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterLinkWithHref"]],
        styles: ["i.fa.fa-user-circle[_ngcontent-%COMP%] {\n  cursor: pointer;\n  font-size: 25px;\n}\n\ni.fa.fa-search[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdGhlbWVzL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxlQUFBO0VBQ0EsZUFBQTtBQUNKOztBQUNBO0VBQ0ksZUFBQTtBQUVKIiwiZmlsZSI6InNyYy9hcHAvdGhlbWVzL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpLmZhLmZhLXVzZXItY2lyY2xle1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBmb250LXNpemU6IDI1cHg7XG59XG5pLmZhLmZhLXNlYXJjaHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG4iXX0= */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HeaderComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-header',
            templateUrl: './header.component.html',
            styleUrls: ['./header.component.scss']
          }]
        }], function () {
          return [{
            type: src_app_services_api_service__WEBPACK_IMPORTED_MODULE_1__["ApiService"]
          }, {
            type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "ck7S":
    /*!****************************************************************************************!*\
      !*** ./src/app/pages/Payment Heads/list-payment-heads/list-payment-heads.component.ts ***!
      \****************************************************************************************/

    /*! exports provided: ListPaymentHeadsComponent */

    /***/
    function ck7S(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ListPaymentHeadsComponent", function () {
        return ListPaymentHeadsComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var sweetalert2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! sweetalert2 */
      "PSD3");
      /* harmony import */


      var sweetalert2__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_1__);
      /* harmony import */


      var _payment_heads_service_payment_heads_api_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../payment-heads-service/payment-heads-api.service */
      "YrEC");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var src_app_utilities_utilities_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! src/app/utilities/utilities.service */
      "cnwL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");

      function ListPaymentHeadsComponent_tbody_18_td_7_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function ListPaymentHeadsComponent_tbody_18_td_8_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 13);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function ListPaymentHeadsComponent_tbody_18_Template(rf, ctx) {
        if (rf & 1) {
          var _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "tbody");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "tr");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "td");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "b");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "td");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, ListPaymentHeadsComponent_tbody_18_td_7_Template, 2, 0, "td", 7);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, ListPaymentHeadsComponent_tbody_18_td_8_Template, 2, 0, "td", 7);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "td");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "a", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "i", 9);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](12, "\xA0 ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "button", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ListPaymentHeadsComponent_tbody_18_Template_button_click_13_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r6);

            var list_r1 = ctx.$implicit;

            var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r5.showConfirmationMessage(list_r1._id);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](14, "i", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var list_r1 = ctx.$implicit;
          var i_r2 = ctx.index;

          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("", i_r2 + 1, ".");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", list_r1.title, " ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", list_r1.type === "Addition");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", list_r1.type === "Deduction");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx_r0.permissionInfo.search("Edit PaymentHeads") === -1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpropertyInterpolate1"]("routerLink", "/pages/payment-heads/update-payment-heads/", list_r1._id, "");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r0.permissionInfo.search("Delete PaymentHeads") === -1);
        }
      }

      var ListPaymentHeadsComponent = /*#__PURE__*/function () {
        function ListPaymentHeadsComponent(api, route, util) {
          _classCallCheck2(this, ListPaymentHeadsComponent);

          this.api = api;
          this.route = route;
          this.util = util;
        }

        _createClass2(ListPaymentHeadsComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this.listPaymentHeads();
            this.permissionInfo = this.util.permissionRoleInfo;
          }
        }, {
          key: "listPaymentHeads",
          value: function listPaymentHeads() {
            var _this212 = this;

            try {
              this.api.getPaymentHeadData().subscribe(function (data) {
                if (data.status === 'success' || data.status === 200) {
                  _this212.paymentData = data.data;
                  var len = Object.keys(_this212.paymentData).length;

                  if (len == 0) {
                    _this212.route.navigateByUrl("pages/payment-heads/add-payment-heads");
                  } else {
                    _this212.paymentData = data.data;
                  }
                }
              });
            } catch (err) {
              console.log(err.message);
            }
          }
        }, {
          key: "showConfirmationMessage",
          value: function showConfirmationMessage(paymentHeadId) {
            var _this213 = this;

            var swalWithBootstrapButtons = sweetalert2__WEBPACK_IMPORTED_MODULE_1___default.a.mixin({
              customClass: {
                confirmButton: 'btn btn-success',
                cancelButton: 'btn btn-danger'
              },
              buttonsStyling: false
            });
            swalWithBootstrapButtons.fire({
              title: 'Are you sure?',
              text: "You want to delete it",
              type: 'warning',
              showCancelButton: true,
              confirmButtonText: 'Yes',
              cancelButtonText: 'No',
              reverseButtons: true
            }).then(function (result) {
              if (result.value) {
                _this213.api.removePaymentHead(paymentHeadId).subscribe(function (data) {
                  if (data.status === "success" || data.status === 200) {
                    swalWithBootstrapButtons.fire('Deleted!', data.message, 'success');

                    _this213.listPaymentHeads();
                  }
                });
              } else if (result.dismiss === sweetalert2__WEBPACK_IMPORTED_MODULE_1___default.a.DismissReason.cancel) {
                swalWithBootstrapButtons.fire('Cancelled', 'Your Payment Head Data is Safe', 'error');
              }
            });
          }
        }, {
          key: "addPaymentHeads",
          value: function addPaymentHeads() {
            try {
              this.util.paymentHeadStatus = 1;
            } catch (err) {
              console.log(err);
            }
          }
        }]);

        return ListPaymentHeadsComponent;
      }();

      ListPaymentHeadsComponent.ɵfac = function ListPaymentHeadsComponent_Factory(t) {
        return new (t || ListPaymentHeadsComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_payment_heads_service_payment_heads_api_service__WEBPACK_IMPORTED_MODULE_2__["paymentHeadApiService"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](src_app_utilities_utilities_service__WEBPACK_IMPORTED_MODULE_4__["UtilitiesService"]));
      };

      ListPaymentHeadsComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: ListPaymentHeadsComponent,
        selectors: [["app-list-payment-heads"]],
        decls: 19,
        vars: 2,
        consts: [[1, "card"], [1, "card-header", 2, "text-align", "center"], ["type", "button", "routerLink", "/pages/payment-heads/add-payment-heads", 1, "btn", "btn-primary", 2, "float", "right", 3, "disabled", "click"], [1, "fa", "fa-plus-square"], [1, "table", 2, "text-align", "center"], [1, "text-primary"], [4, "ngFor", "ngForOf"], [4, "ngIf"], [1, "btn", "btn-primary", 3, "routerLink"], [1, "fa", "fa-pencil-square-o"], ["type", "button", 1, "btn", "btn-danger", 3, "disabled", "click"], [1, "fa", "fa-trash"], ["id", "plus", 1, "fas", "fa-plus-square"], ["id", "minus", 1, "fas", "fa-minus-square"]],
        template: function ListPaymentHeadsComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "h2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3, "Payment Heads");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "button", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ListPaymentHeadsComponent_Template_button_click_4_listener() {
              return ctx.addPaymentHeads();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](5, "i", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6, "\xA0 Add Payment Heads");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "table", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "thead", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "tr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](11, " S.No ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](13, " Title ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](15, "Type");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "th");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](17, "Action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](18, ListPaymentHeadsComponent_tbody_18_Template, 15, 8, "tbody", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx.permissionInfo.search("Create PaymentHeads") === -1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.paymentData);
          }
        },
        directives: [_angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterLink"], _angular_common__WEBPACK_IMPORTED_MODULE_5__["NgForOf"], _angular_common__WEBPACK_IMPORTED_MODULE_5__["NgIf"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterLinkWithHref"]],
        styles: ["#plus[_ngcontent-%COMP%] {\n  color: darkgreen;\n  font-size: x-large;\n}\n\n#minus[_ngcontent-%COMP%] {\n  color: #a20909;\n  font-size: x-large;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvUGF5bWVudCBIZWFkcy9saXN0LXBheW1lbnQtaGVhZHMvQzovVXNlcnMvdXNlci9EZXNrdG9wL2FyeWFwYXlyb2xsL2NsaWVudC9zcmMvYXBwL3BhZ2VzL1BheW1lbnQlMjBIZWFkcy9saXN0LXBheW1lbnQtaGVhZHMvbGlzdC1wYXltZW50LWhlYWRzLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9wYWdlcy9QYXltZW50IEhlYWRzL2xpc3QtcGF5bWVudC1oZWFkcy9saXN0LXBheW1lbnQtaGVhZHMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxnQkFBQTtFQUNBLGtCQUFBO0FDQ0o7O0FERUE7RUFDSSxjQUFBO0VBQ0Esa0JBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL1BheW1lbnQgSGVhZHMvbGlzdC1wYXltZW50LWhlYWRzL2xpc3QtcGF5bWVudC1oZWFkcy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNwbHVze1xuICAgIGNvbG9yOiBkYXJrZ3JlZW47XG4gICAgZm9udC1zaXplOiB4LWxhcmdlO1xufVxuXG4jbWludXN7XG4gICAgY29sb3I6ICNhMjA5MDk7XG4gICAgZm9udC1zaXplOiB4LWxhcmdlO1xufSIsIiNwbHVzIHtcbiAgY29sb3I6IGRhcmtncmVlbjtcbiAgZm9udC1zaXplOiB4LWxhcmdlO1xufVxuXG4jbWludXMge1xuICBjb2xvcjogI2EyMDkwOTtcbiAgZm9udC1zaXplOiB4LWxhcmdlO1xufSJdfQ== */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ListPaymentHeadsComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-list-payment-heads',
            templateUrl: './list-payment-heads.component.html',
            styleUrls: ['./list-payment-heads.component.scss']
          }]
        }], function () {
          return [{
            type: _payment_heads_service_payment_heads_api_service__WEBPACK_IMPORTED_MODULE_2__["paymentHeadApiService"]
          }, {
            type: _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"]
          }, {
            type: src_app_utilities_utilities_service__WEBPACK_IMPORTED_MODULE_4__["UtilitiesService"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "dVhd":
    /*!***************************************************!*\
      !*** ./src/app/themes/footer/footer.component.ts ***!
      \***************************************************/

    /*! exports provided: FooterComponent */

    /***/
    function dVhd(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FooterComponent", function () {
        return FooterComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");

      var FooterComponent = /*#__PURE__*/function () {
        function FooterComponent() {
          _classCallCheck2(this, FooterComponent);
        }

        _createClass2(FooterComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
        }]);

        return FooterComponent;
      }();

      FooterComponent.ɵfac = function FooterComponent_Factory(t) {
        return new (t || FooterComponent)();
      };

      FooterComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: FooterComponent,
        selectors: [["app-footer"]],
        decls: 14,
        vars: 0,
        consts: [[1, "footer", "footer-black"], [1, "container-fluid"], [1, "row"], [1, "footer-nav"], [1, "credits", "ml-auto"], [1, "copyright"], [1, "fa", "fa-heart", "heart"]],
        template: function FooterComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "footer", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "nav", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "ul");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](5, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](6, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](7, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "span", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](10, " \xA9 ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](11, "made with ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](12, "i", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](13, " by Aryavrat ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }
        },
        styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3RoZW1lcy9mb290ZXIvZm9vdGVyLmNvbXBvbmVudC5zY3NzIn0= */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FooterComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-footer',
            templateUrl: './footer.component.html',
            styleUrls: ['./footer.component.scss']
          }]
        }], function () {
          return [];
        }, null);
      })();
      /***/

    },

    /***/
    "dgmN":
    /*!***************************************!*\
      !*** ./src/app/pages/pages.module.ts ***!
      \***************************************/

    /*! exports provided: PagesModule */

    /***/
    function dgmN(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PagesModule", function () {
        return PagesModule;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _pages_routing_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./pages-routing.module */
      "viRw");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _themes_header_header_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../themes/header/header.component */
      "aNU0");
      /* harmony import */


      var _themes_sidebar_sidebar_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../themes/sidebar/sidebar.component */
      "KunY");
      /* harmony import */


      var _themes_footer_footer_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../themes/footer/footer.component */
      "dVhd");
      /* harmony import */


      var _pages_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ./pages.component */
      "8D7W");
      /* harmony import */


      var _leave_management_leave_management_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ./leave-management/leave-management.component */
      "Aw0i");
      /* harmony import */


      var _update_profile_update_profile_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ./update-profile/update-profile.component */
      "e+I4");
      /* harmony import */


      var angular_notifier__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! angular-notifier */
      "VO+5");

      var PagesModule = function PagesModule() {
        _classCallCheck2(this, PagesModule);
      };

      PagesModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: PagesModule
      });
      PagesModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function PagesModule_Factory(t) {
          return new (t || PagesModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _pages_routing_module__WEBPACK_IMPORTED_MODULE_2__["PagesRoutingModule"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"], angular_notifier__WEBPACK_IMPORTED_MODULE_11__["NotifierModule"]]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](PagesModule, {
          declarations: [_themes_header_header_component__WEBPACK_IMPORTED_MODULE_5__["HeaderComponent"], _themes_sidebar_sidebar_component__WEBPACK_IMPORTED_MODULE_6__["SidebarComponent"], _themes_footer_footer_component__WEBPACK_IMPORTED_MODULE_7__["FooterComponent"], _pages_component__WEBPACK_IMPORTED_MODULE_8__["PagesComponent"], _leave_management_leave_management_component__WEBPACK_IMPORTED_MODULE_9__["LeaveManagementComponent"], _update_profile_update_profile_component__WEBPACK_IMPORTED_MODULE_10__["UpdateProfileComponent"]],
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _pages_routing_module__WEBPACK_IMPORTED_MODULE_2__["PagesRoutingModule"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"], angular_notifier__WEBPACK_IMPORTED_MODULE_11__["NotifierModule"]]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PagesModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: [_themes_header_header_component__WEBPACK_IMPORTED_MODULE_5__["HeaderComponent"], _themes_sidebar_sidebar_component__WEBPACK_IMPORTED_MODULE_6__["SidebarComponent"], _themes_footer_footer_component__WEBPACK_IMPORTED_MODULE_7__["FooterComponent"], _pages_component__WEBPACK_IMPORTED_MODULE_8__["PagesComponent"], _leave_management_leave_management_component__WEBPACK_IMPORTED_MODULE_9__["LeaveManagementComponent"], _update_profile_update_profile_component__WEBPACK_IMPORTED_MODULE_10__["UpdateProfileComponent"]],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _pages_routing_module__WEBPACK_IMPORTED_MODULE_2__["PagesRoutingModule"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"], angular_notifier__WEBPACK_IMPORTED_MODULE_11__["NotifierModule"]]
          }]
        }], null, null);
      })();
      /***/

    },

    /***/
    "e+I4":
    /*!******************************************************************!*\
      !*** ./src/app/pages/update-profile/update-profile.component.ts ***!
      \******************************************************************/

    /*! exports provided: UpdateProfileComponent */

    /***/
    function eI4(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "UpdateProfileComponent", function () {
        return UpdateProfileComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../../../environments/environment */
      "AytR");
      /* harmony import */


      var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @syncfusion/ej2-base */
      "4SUy");
      /* harmony import */


      var _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @syncfusion/ej2-dropdowns */
      "OyPL");
      /* harmony import */


      var sweetalert2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! sweetalert2 */
      "PSD3");
      /* harmony import */


      var sweetalert2__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_5__);
      /* harmony import */


      var src_app_services_api_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! src/app/services/api.service */
      "H+bZ");
      /* harmony import */


      var src_app_utilities_utilities_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! src/app/utilities/utilities.service */
      "cnwL");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /**
       * MultiSelect Checkbox Samples
       */


      function UpdateProfileComponent_div_19_Template(rf, ctx) {
        if (rf & 1) {
          var _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 43);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "input", 44);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function UpdateProfileComponent_div_19_Template_input_click_1_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r5);

            var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r4.discardFunctionality();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function UpdateProfileComponent_option_49_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "option", 45);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var gender_r6 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpropertyInterpolate"]("selected", gender_r6);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpropertyInterpolate"]("value", gender_r6);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", gender_r6, " ");
        }
      }

      function UpdateProfileComponent_div_57_div_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 47);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var validation_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", validation_r7.message, " ");
        }
      }

      function UpdateProfileComponent_div_57_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, UpdateProfileComponent_div_57_div_1_Template, 2, 1, "div", 46);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var validation_r7 = ctx.$implicit;

          var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r3.updateProfileForm.get("phone").hasError(validation_r7.type) && (ctx_r3.updateProfileForm.get("phone").dirty || ctx_r3.updateProfileForm.get("phone").touched));
        }
      }

      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__["enableRipple"])(true);

      var UpdateProfileComponent = /*#__PURE__*/function () {
        function UpdateProfileComponent(fb, APIService, util, router) {
          _classCallCheck2(this, UpdateProfileComponent);

          this.fb = fb;
          this.APIService = APIService;
          this.util = util;
          this.router = router;
          this.url = '../../../assets/image/profile-image.png';
          this.discardChanges = false;
          this.genderList = ['Male', 'Female', 'Other', 'N/A'];
          this.cardProfileName = '';
          this.existingUrl = '../../../assets/image/profile-image.png';
          this.validationMessage = {
            'phone': [{
              type: 'minlength',
              message: 'Number too short'
            }, {
              type: 'maxlength',
              message: 'Number is too large'
            }, {
              type: 'pattern',
              message: 'Company Number not valid'
            }]
          };
        }

        _createClass2(UpdateProfileComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this214 = this;

            this.existUpadteProfileForm();
            this.loadUpadteProfileForm();
            this.userProfileForm();
            this.APIService.getTimeZone().subscribe(function (data) {
              if (data.status === 'success') {
                _this214.timeZone = data.data;

                _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_4__["MultiSelect"].Inject(_syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_4__["CheckBoxSelection"]); // initialize the MultiSelect component


                _this214.multiObj = new _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_4__["MultiSelect"]({
                  // set the country data to dataSource property
                  dataSource: _this214.timeZone,
                  // map the appropriate columns to fields property
                  fields: {
                    text: 'Name',
                    value: 'Code'
                  },
                  // set the type of mode for checkbox to visualized the checkbox added in li element.
                  mode: 'CheckBox',
                  // set the placeholder to MultiSelect input element
                  placeholder: 'Select TimeZone',
                  // set maximum selection length in Multiselect.
                  maximumSelectionLength: 1,
                  // set true for enable the dropdown icon.
                  showDropDownIcon: true,
                  // set the placeholder to MultiSelect filter input element
                  filterBarPlaceholder: 'Search TimeZone',
                  // set the MultiSelect popup height
                  popupHeight: '350px'
                });

                _this214.multiObj.appendTo('#checkbox');

                _this214.multiObj.value = [_this214.util.timeZone];
              }
            });
          } // Load Default Form

        }, {
          key: "loadUpadteProfileForm",
          value: function loadUpadteProfileForm() {
            try {
              this.updateProfileForm = this.fb.group({
                name: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](''),
                gender: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](''),
                phone: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].minLength(10), _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(15), _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].pattern('^-?[0-9]\\d*(\\.\\d{1,2})?$')])),
                birthday: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]('')
              });
            } catch (error) {
              console.log(error);
            }
          } // Fill value With Exists value

        }, {
          key: "existUpadteProfileForm",
          value: function existUpadteProfileForm() {
            var _this215 = this;

            try {
              // Get User Details
              this.APIService.getUserDetails().subscribe(function (data) {
                if (data.status === 'success') {
                  _this215.cardProfileName = data.data.name;
                  _this215.util.timeZone = data.data.timeZone;

                  if (data.data.avatar !== "".concat(_environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"].apiBaseUrl, "/assets/images/aryavrat-infotech-squarelogo-1533534321648.png")) {
                    _this215.url = data.data.avatar;
                    _this215.existingUrl = data.data.avatar;
                  }

                  _this215.updateProfileForm = _this215.fb.group({
                    name: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](data.data.name),
                    gender: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](data.data.gender),
                    phone: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](data.data.phone, _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].minLength(10), _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(15), _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].pattern('^-?[0-9]\\d*(\\.\\d{1,2})?$')])),
                    birthday: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](data.data.birthday.substring(0, 10))
                  });
                }
              });
            } catch (error) {
              console.log(error);
            }
          }
        }, {
          key: "onSelectFile",
          value: function onSelectFile(event) {
            var _this216 = this;

            if (event.target.files && event.target.files[0]) {
              this.discardChanges = true;
              var reader = new FileReader();
              reader.readAsDataURL(event.target.files[0]); // read file as data url

              reader.onload = function (event) {
                _this216.url = event.target.result;
              };

              if (event.target.files.length > 0) {
                var file = event.target.files[0];
                this.userAvatar.get('avatar').setValue(file);
              }
            }
          } // Discard Image Value

        }, {
          key: "discardFunctionality",
          value: function discardFunctionality() {
            try {
              this.url = this.existingUrl;
              this.discardChanges = false;
              this.userAvatar.get('avatar').setValue(['']);
              document.getElementById('profilePicture').value = '';
            } catch (error) {
              console.log(error);
            }
          } // Change Profile Name

        }, {
          key: "changeName",
          value: function changeName() {
            try {
              this.cardProfileName = document.getElementById('profileName').value;
            } catch (error) {
              console.log(error);
            }
          } // Submit form

        }, {
          key: "updateProfileData",
          value: function updateProfileData() {
            var _this217 = this;

            try {
              var cleanUpdateProfileForm = this.util.cleanFormLevelOne(this.updateProfileForm);
              this.APIService.updateUSerProfile(cleanUpdateProfileForm.value, this.multiObj.value[0]).subscribe(function (data) {
                if (data.status === 'success') {
                  if (document.getElementById('profilePicture').value.length > 0) {
                    _this217.APIService.uploadProfileImage(_this217.userAvatar, "User", undefined).subscribe(function (updateProfile) {
                      if (updateProfile.status === 'success') {
                        var swalWithBootstrapButtons = sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.mixin({
                          customClass: {
                            confirmButton: 'btn btn-success',
                            cancelButton: 'btn btn-danger'
                          },
                          buttonsStyling: false
                        });
                        swalWithBootstrapButtons.fire({
                          title: 'Status',
                          text: data.message,
                          type: 'success',
                          showCancelButton: false,
                          confirmButtonText: 'Ok',
                          reverseButtons: true,
                          allowOutsideClick: false
                        }).then(function (result) {
                          if (result.value) {
                            window.location.reload();
                          }
                        });
                      }
                    });
                  } else {
                    var swalWithBootstrapButtons = sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.mixin({
                      customClass: {
                        confirmButton: 'btn btn-success',
                        cancelButton: 'btn btn-danger'
                      },
                      buttonsStyling: false
                    });
                    swalWithBootstrapButtons.fire({
                      title: 'Status',
                      text: data.message,
                      type: 'success',
                      showCancelButton: false,
                      confirmButtonText: 'Ok',
                      reverseButtons: true,
                      allowOutsideClick: false
                    }).then(function (result) {
                      if (result.value) {
                        window.location.reload();
                      }
                    });
                  }
                } else if (data.status === 'error') {
                  console.log(data.message);
                }
              });
            } catch (error) {
              console.log(error);
            }
          } // Profile Image Form

        }, {
          key: "userProfileForm",
          value: function userProfileForm() {
            try {
              this.userAvatar = this.fb.group({
                avatar: ['']
              });
            } catch (error) {
              console.log(error);
            }
          }
        }]);

        return UpdateProfileComponent;
      }();

      UpdateProfileComponent.ɵfac = function UpdateProfileComponent_Factory(t) {
        return new (t || UpdateProfileComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](src_app_services_api_service__WEBPACK_IMPORTED_MODULE_6__["ApiService"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](src_app_utilities_utilities_service__WEBPACK_IMPORTED_MODULE_7__["UtilitiesService"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_8__["Router"]));
      };

      UpdateProfileComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: UpdateProfileComponent,
        selectors: [["app-update-profile"]],
        decls: 78,
        vars: 7,
        consts: [[1, "card"], [1, "card-header"], [1, "card-body"], [1, "container"], [1, "row"], [1, "col-12"], [1, "card-body", 2, "background-color", "whitesmoke"], [1, "card-title", "mb-4"], [1, "d-flex", "justify-content-start"], [1, "image-container"], ["id", "imgProfile", 1, "rounded", 2, "width", "150px", "height", "150px", 3, "src"], [1, "middle"], ["type", "file", "accept", "image/*", "id", "profilePicture", 2, "display", "none", 3, "change"], ["file", ""], ["type", "button", "id", "btnChangePicture", "value", "Change", 1, "btn", "btn-secondary", 3, "click"], [1, "userData", "ml-3"], [1, "d-block", 2, "font-size", "1.5rem", "font-weight", "bold", "color", "#51cbce", "margin-top", "59px"], ["class", "ml-auto", 4, "ngIf"], ["role", "form", "novalidate", "", 1, "form-horizontal", 3, "formGroup", "ngSubmit"], ["id", "myTab", "role", "tablist", 1, "nav", "nav-tabs", "mb-4"], [1, "nav-item"], ["id", "basicInfo-tab", "data-toggle", "tab", "href", "#basicInfo", "role", "tab", "aria-controls", "basicInfo", "aria-selected", "true", 1, "nav-link", "active"], ["id", "myTabContent", 1, "tab-content", "ml-1"], ["id", "basicInfo", "role", "tabpanel", "aria-labelledby", "basicInfo-tab", 1, "tab-pane", "fade", "show", "active"], [1, "col-sm-3", "col-md-2", "col-5"], [2, "font-weight", "bold"], [1, "col-md-8", "col-6"], ["type", "text", "id", "profileName", "placeholder", "Enter Full Name", "formControlName", "name", 1, "form-demo", 3, "input"], ["type", "date", "placeholder", "Select DOB", "formControlName", "birthday", 1, "form-demo"], ["Name", "Company", "formControlName", "gender", 1, "dropdown", "dropdown-toggle", "form-demo", "single"], ["class", "dropdown-item", 3, "selected", "value", 4, "ngFor", "ngForOf"], ["type", "text", "placeholder", "Enter Phone Number", "formControlName", "phone", 1, "form-demo"], [4, "ngFor", "ngForOf"], [1, "stackblitz-container", "material"], [1, "control-section", "col-lg-8"], [1, "control-wrapper"], ["type", "text", "id", "checkbox"], [1, "col-lg-4", "property-section"], ["id", "property", "title", "Properties"], [1, "form-group"], [1, "col-sm-offset-2", "col-sm-10"], ["type", "submit", 1, "btn", "btn-success", 3, "disabled"], ["type", "submit", "routerLink", "/pages/dashboard/company-list", 1, "btn", "btn-danger"], [1, "ml-auto"], ["type", "button", "id", "btnDiscard", "value", "Discard Changes", 1, "btn", "btn-danger", 3, "click"], [1, "dropdown-item", 3, "selected", "value"], ["style", "color:\xA0red;margin-left:\xA014px;", "style", "color:\xA0red;margin-left:\xA014px;", 4, "ngIf"], [2, "color", "red", "margin-left", "14px"]],
        template: function UpdateProfileComponent_Template(rf, ctx) {
          if (rf & 1) {
            var _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "div", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "div", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "img", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "div", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "input", 12, 13);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function UpdateProfileComponent_Template_input_change_13_listener($event) {
              return ctx.onSelectFile($event);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](15, "input", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function UpdateProfileComponent_Template_input_click_15_listener() {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r10);

              var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](14);

              return _r0.click();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "div", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](17, "h2", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](19, UpdateProfileComponent_div_19_Template, 2, 0, "div", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](20, "form", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngSubmit", function UpdateProfileComponent_Template_form_ngSubmit_20_listener() {
              return ctx.updateProfileData();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "div", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](23, "ul", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](24, "li", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](25, "a", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](26, "Basic Info");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](27, "div", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](28, "div", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](29, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](30, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](31, "label", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](32, "Full Name");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](33, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](34, "input", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("input", function UpdateProfileComponent_Template_input_input_34_listener() {
              return ctx.changeName();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](35, "hr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](36, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](37, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](38, "label", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](39, "Birth Date");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](40, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](41, "input", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](42, "hr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](43, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](44, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](45, "label", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](46, "Gender");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](47, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](48, "select", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](49, UpdateProfileComponent_option_49_Template, 2, 3, "option", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](50, "hr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](51, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](52, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](53, "label", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](54, "Phone No.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](55, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](56, "input", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](57, UpdateProfileComponent_div_57_Template, 2, 1, "div", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](58, "hr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](59, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](60, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](61, "label", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](62, "TimeZone:");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](63, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](64, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](65, "div", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](66, "div", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](67, "input", 36);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](68, "div", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](69, "div", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](70, "table", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](71, "hr");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](72, "div", 39);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](73, "div", 40);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](74, "button", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](75, "Update Profile");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](76, "button", 42);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](77, "Cancel");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx.url, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.cardProfileName);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.discardChanges);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("formGroup", ctx.updateProfileForm);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.genderList);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.validationMessage.phone);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx.updateProfileForm.invalid);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_9__["NgIf"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["ɵangular_packages_forms_forms_y"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NgControlStatusGroup"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormGroupDirective"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["DefaultValueAccessor"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NgControlStatus"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControlName"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["SelectControlValueAccessor"], _angular_common__WEBPACK_IMPORTED_MODULE_9__["NgForOf"], _angular_router__WEBPACK_IMPORTED_MODULE_8__["RouterLink"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NgSelectOption"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["ɵangular_packages_forms_forms_x"]],
        styles: ["body[_ngcontent-%COMP%] {\n  padding-top: 68px;\n  padding-bottom: 50px;\n}\n\n.image-container[_ngcontent-%COMP%] {\n  position: relative;\n}\n\n.image[_ngcontent-%COMP%] {\n  opacity: 1;\n  display: block;\n  width: 100%;\n  height: auto;\n  transition: 0.5s ease;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n\n.middle[_ngcontent-%COMP%] {\n  transition: 0.5s ease;\n  opacity: 0;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  -ms-transform: translate(-50%, -50%);\n  text-align: center;\n}\n\n.image-container[_ngcontent-%COMP%]:hover   .image[_ngcontent-%COMP%] {\n  opacity: 0.3;\n}\n\n.image-container[_ngcontent-%COMP%]:hover   .middle[_ngcontent-%COMP%] {\n  opacity: 1;\n}\n\n.form-demo[_ngcontent-%COMP%] {\n  display: block;\n  width: 50%;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  color: #495057;\n  background: no-repeat;\n  background-clip: padding-box;\n  border: none;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n.select2-container[_ngcontent-%COMP%]   .select2-selection--single[_ngcontent-%COMP%] {\n  height: 34px !important;\n}\n\n.select2-container--default[_ngcontent-%COMP%]   .select2-selection--single[_ngcontent-%COMP%] {\n  border: 1px solid #ccc !important;\n  border-radius: 0px !important;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvdXBkYXRlLXByb2ZpbGUvdXBkYXRlLXByb2ZpbGUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxpQkFBQTtFQUNBLG9CQUFBO0FBQ0o7O0FBQ1E7RUFDSSxrQkFBQTtBQUVaOztBQUNRO0VBQ0ksVUFBQTtFQUNBLGNBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLHFCQUFBO0VBQ0EsbUNBQUE7VUFBQSwyQkFBQTtBQUVaOztBQUNRO0VBQ0kscUJBQUE7RUFDQSxVQUFBO0VBQ0Esa0JBQUE7RUFDQSxRQUFBO0VBQ0EsU0FBQTtFQUNBLGdDQUFBO0VBQ0Esb0NBQUE7RUFDQSxrQkFBQTtBQUVaOztBQUNRO0VBQ0ksWUFBQTtBQUVaOztBQUNRO0VBQ0ksVUFBQTtBQUVaOztBQUNRO0VBQ0ksY0FBQTtFQUNBLFVBQUE7RUFDQSx5QkFBQTtFQUNBLGVBQUE7RUFDQSxnQkFBQTtFQUNBLGNBQUE7RUFDQSxxQkFBQTtFQUNBLDRCQUFBO0VBQ0EsWUFBQTtFQUNBLHNCQUFBO0VBQ0Esd0VBQUE7QUFFWjs7QUFDUTtFQUNJLHVCQUFBO0FBRVo7O0FBQVE7RUFDUyxpQ0FBQTtFQUNKLDZCQUFBO0FBR2IiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy91cGRhdGUtcHJvZmlsZS91cGRhdGUtcHJvZmlsZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImJvZHl7XG4gICAgcGFkZGluZy10b3A6IDY4cHg7XG4gICAgcGFkZGluZy1ib3R0b206IDUwcHg7XG59XG4gICAgICAgIC5pbWFnZS1jb250YWluZXIge1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgLmltYWdlIHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogLjVzIGVhc2U7XG4gICAgICAgICAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICAgIH1cblxuICAgICAgICAubWlkZGxlIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IC41cyBlYXNlO1xuICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogNTAlO1xuICAgICAgICAgICAgbGVmdDogNTAlO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgICAgICAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIH1cblxuICAgICAgICAuaW1hZ2UtY29udGFpbmVyOmhvdmVyIC5pbWFnZSB7XG4gICAgICAgICAgICBvcGFjaXR5OiAwLjM7XG4gICAgICAgIH1cblxuICAgICAgICAuaW1hZ2UtY29udGFpbmVyOmhvdmVyIC5taWRkbGUge1xuICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5mb3JtLWRlbW8ge1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICB3aWR0aDogNTAlO1xuICAgICAgICAgICAgcGFkZGluZzogLjM3NXJlbSAuNzVyZW07XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMS41O1xuICAgICAgICAgICAgY29sb3I6ICM0OTUwNTc7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBuby1yZXBlYXQ7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xuICAgICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogLjI1cmVtO1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYm94LXNoYWRvdyAuMTVzIGVhc2UtaW4tb3V0O1xuICAgICAgICB9XG5cbiAgICAgICAgLnNlbGVjdDItY29udGFpbmVyIC5zZWxlY3QyLXNlbGVjdGlvbi0tc2luZ2xle1xuICAgICAgICAgICAgaGVpZ2h0OjM0cHggIWltcG9ydGFudDtcbiAgICAgICAgfVxuICAgICAgICAuc2VsZWN0Mi1jb250YWluZXItLWRlZmF1bHQgLnNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGV7XG4gICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2MgIWltcG9ydGFudDtcbiAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwcHggIWltcG9ydGFudDtcbiAgICAgICAgfVxuIl19 */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](UpdateProfileComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-update-profile',
            templateUrl: './update-profile.component.html',
            styleUrls: ['./update-profile.component.scss']
          }]
        }], function () {
          return [{
            type: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]
          }, {
            type: src_app_services_api_service__WEBPACK_IMPORTED_MODULE_6__["ApiService"]
          }, {
            type: src_app_utilities_utilities_service__WEBPACK_IMPORTED_MODULE_7__["UtilitiesService"]
          }, {
            type: _angular_router__WEBPACK_IMPORTED_MODULE_8__["Router"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "hnZ+":
    /*!*************************************************************!*\
      !*** ./src/app/pages/Payment Heads/payment-heads.module.ts ***!
      \*************************************************************/

    /*! exports provided: PaymentHeadsModule */

    /***/
    function hnZ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PaymentHeadsModule", function () {
        return PaymentHeadsModule;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _payment_heads_routing_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./payment-heads-routing.module */
      "kHFt");
      /* harmony import */


      var _payment_heads_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./payment-heads.component */
      "4uE9");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _list_payment_heads_list_payment_heads_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./list-payment-heads/list-payment-heads.component */
      "ck7S");
      /* harmony import */


      var _add_payment_heads_add_payment_heads_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./add-payment-heads/add-payment-heads.component */
      "RsLV");
      /* harmony import */


      var _update_payment_heads_update_payment_heads_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ./update-payment-heads/update-payment-heads.component */
      "tkWa");

      var PaymentHeadsModule = function PaymentHeadsModule() {
        _classCallCheck2(this, PaymentHeadsModule);
      };

      PaymentHeadsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: PaymentHeadsModule
      });
      PaymentHeadsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function PaymentHeadsModule_Factory(t) {
          return new (t || PaymentHeadsModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _payment_heads_routing_module__WEBPACK_IMPORTED_MODULE_2__["PaymentHeadsRoutingModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["RouterModule"]]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](PaymentHeadsModule, {
          declarations: [_payment_heads_component__WEBPACK_IMPORTED_MODULE_3__["PaymentHeadsComponent"], _list_payment_heads_list_payment_heads_component__WEBPACK_IMPORTED_MODULE_6__["ListPaymentHeadsComponent"], _add_payment_heads_add_payment_heads_component__WEBPACK_IMPORTED_MODULE_7__["AddPaymentHeadsComponent"], _update_payment_heads_update_payment_heads_component__WEBPACK_IMPORTED_MODULE_8__["UpdatePaymentHeadsComponent"]],
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _payment_heads_routing_module__WEBPACK_IMPORTED_MODULE_2__["PaymentHeadsRoutingModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["RouterModule"]]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PaymentHeadsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: [_payment_heads_component__WEBPACK_IMPORTED_MODULE_3__["PaymentHeadsComponent"], _list_payment_heads_list_payment_heads_component__WEBPACK_IMPORTED_MODULE_6__["ListPaymentHeadsComponent"], _add_payment_heads_add_payment_heads_component__WEBPACK_IMPORTED_MODULE_7__["AddPaymentHeadsComponent"], _update_payment_heads_update_payment_heads_component__WEBPACK_IMPORTED_MODULE_8__["UpdatePaymentHeadsComponent"]],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _payment_heads_routing_module__WEBPACK_IMPORTED_MODULE_2__["PaymentHeadsRoutingModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["RouterModule"]]
          }]
        }], null, null);
      })();
      /***/

    },

    /***/
    "kHFt":
    /*!*********************************************************************!*\
      !*** ./src/app/pages/Payment Heads/payment-heads-routing.module.ts ***!
      \*********************************************************************/

    /*! exports provided: PaymentHeadsRoutingModule */

    /***/
    function kHFt(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PaymentHeadsRoutingModule", function () {
        return PaymentHeadsRoutingModule;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _payment_heads_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./payment-heads.component */
      "4uE9");
      /* harmony import */


      var src_app_authGuard_auth_guard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! src/app/authGuard/auth.guard */
      "CG1p");
      /* harmony import */


      var _list_payment_heads_list_payment_heads_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./list-payment-heads/list-payment-heads.component */
      "ck7S");
      /* harmony import */


      var _add_payment_heads_add_payment_heads_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./add-payment-heads/add-payment-heads.component */
      "RsLV");
      /* harmony import */


      var _update_payment_heads_update_payment_heads_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./update-payment-heads/update-payment-heads.component */
      "tkWa");

      var route = [{
        path: '',
        component: _payment_heads_component__WEBPACK_IMPORTED_MODULE_3__["PaymentHeadsComponent"],
        canActivate: [src_app_authGuard_auth_guard__WEBPACK_IMPORTED_MODULE_4__["AuthGuard"]],
        children: [{
          path: 'list-payment-heads',
          component: _list_payment_heads_list_payment_heads_component__WEBPACK_IMPORTED_MODULE_5__["ListPaymentHeadsComponent"]
        }, {
          path: 'add-payment-heads',
          component: _add_payment_heads_add_payment_heads_component__WEBPACK_IMPORTED_MODULE_6__["AddPaymentHeadsComponent"]
        }, {
          path: 'update-payment-heads/:jobCategoryId',
          component: _update_payment_heads_update_payment_heads_component__WEBPACK_IMPORTED_MODULE_7__["UpdatePaymentHeadsComponent"]
        }, {
          path: '',
          redirectTo: 'list-payment-heads',
          pathMatch: 'full'
        }]
      }];

      var PaymentHeadsRoutingModule = function PaymentHeadsRoutingModule() {
        _classCallCheck2(this, PaymentHeadsRoutingModule);
      };

      PaymentHeadsRoutingModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: PaymentHeadsRoutingModule
      });
      PaymentHeadsRoutingModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function PaymentHeadsRoutingModule_Factory(t) {
          return new (t || PaymentHeadsRoutingModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(route)]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](PaymentHeadsRoutingModule, {
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PaymentHeadsRoutingModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: [],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(route)]
          }]
        }], null, null);
      })();
      /***/

    },

    /***/
    "n6zm":
    /*!***************************************************************************************!*\
      !*** ./node_modules/@syncfusion/ej2-splitbuttons/dist/es6/ej2-splitbuttons.es2015.js ***!
      \***************************************************************************************/

    /*! exports provided: getModel, upDownKeyHandler, setBlankIconStyle, Item, DropDownButton, SplitButton, Deferred, createButtonGroup, SpinSettings, AnimationSettings, ProgressButton */

    /***/
    function n6zm(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getModel", function () {
        return getModel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "upDownKeyHandler", function () {
        return _upDownKeyHandler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setBlankIconStyle", function () {
        return setBlankIconStyle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Item", function () {
        return Item;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DropDownButton", function () {
        return DropDownButton;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SplitButton", function () {
        return SplitButton;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Deferred", function () {
        return Deferred;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createButtonGroup", function () {
        return createButtonGroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SpinSettings", function () {
        return SpinSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnimationSettings", function () {
        return AnimationSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ProgressButton", function () {
        return ProgressButton;
      });
      /* harmony import */


      var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @syncfusion/ej2-base */
      "4SUy");
      /* harmony import */


      var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @syncfusion/ej2-buttons */
      "TF3C");
      /* harmony import */


      var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @syncfusion/ej2-popups */
      "Naoh");

      var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      /**
       * @param props
       * @param model
       */


      function getModel(props, model) {
        var obj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, props);

        for (var _i102 = 0, _Object$keys37 = Object.keys(obj); _i102 < _Object$keys37.length; _i102++) {
          var prop = _Object$keys37[_i102];

          if (model.indexOf(prop) < 0) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["deleteObject"])(obj, prop);
          }
        }

        return obj;
      }
      /** @hidden */


      function _upDownKeyHandler(ul, keyCode) {
        var defaultIdx = keyCode === 40 ? 0 : ul.childElementCount - 1;
        var liIdx = defaultIdx;
        var li;
        var selectedLi = ul.querySelector('.e-selected');

        if (selectedLi) {
          selectedLi.classList.remove('e-selected');
        }

        for (var i = 0, len = ul.children.length; i < len; i++) {
          if (ul.children[i].classList.contains('e-focused')) {
            li = ul.children[i];
            liIdx = i;
            li.classList.remove('e-focused');
            keyCode === 40 ? liIdx++ : liIdx--;

            if (liIdx === (keyCode === 40 ? ul.childElementCount : -1)) {
              liIdx = defaultIdx;
            }
          }
        }

        li = ul.children[liIdx];
        liIdx = isValidLI(ul, li, liIdx, keyCode);

        if (liIdx !== -1) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([ul.children[liIdx]], 'e-focused');
          ul.children[liIdx].focus();
        }
      }

      function isValidLI(ul, li, index, keyCode) {
        var count = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

        if (li.classList.contains('e-separator') || li.classList.contains('e-disabled')) {
          if (index === (keyCode === 40 ? ul.childElementCount - 1 : 0)) {
            index = keyCode === 40 ? 0 : ul.childElementCount - 1;
          } else {
            keyCode === 40 ? index++ : index--;
          }
        }

        li = ul.children[index];

        if (li.classList.contains('e-separator') || li.classList.contains('e-disabled')) {
          count++;

          if (count === ul.childElementCount) {
            return index = -1;
          }

          index = isValidLI(ul, li, index, keyCode, count);
        }

        return index;
      }
      /** @hidden */


      function setBlankIconStyle(popup) {
        var blankIconList = [].slice.call(popup.getElementsByClassName('e-blank-icon'));

        if (!blankIconList.length) {
          return;
        }

        var iconLi = popup.querySelector('.e-item:not(.e-blank-icon):not(.e-separator)');

        if (iconLi.classList.contains('e-url')) {
          iconLi = iconLi.querySelector('.e-menu-url');
        }

        var icon = iconLi.querySelector('.e-menu-icon');
        var cssProp;
        var enableRtl = popup.classList.contains('e-rtl');

        if (enableRtl) {
          cssProp = {
            padding: 'paddingRight',
            margin: 'marginLeft'
          };
        } else {
          cssProp = {
            padding: 'paddingLeft',
            margin: 'marginRight'
          };
        } // tslint:disable


        var size = "".concat(parseInt(getComputedStyle(icon).fontSize, 10) + parseInt(enableRtl ? getComputedStyle(icon)[cssProp.margin] : getComputedStyle(icon)[cssProp.margin], 10) + parseInt(getComputedStyle(iconLi).paddingLeft, 10), "px");
        blankIconList.forEach(function (li) {
          if (li.classList.contains('e-url')) {
            li.querySelector('.e-menu-url').style[cssProp.padding] = size;
          } else {
            li.style[cssProp.padding] = size;
          }
        }); // tslint:enable
      }
      /**
       * Defines the items of Split Button/DropDownButton.
       */


      var Item = /*#__PURE__*/function (_syncfusion_ej2_base_45) {
        _inherits2(Item, _syncfusion_ej2_base_45);

        var _super68 = _createSuper(Item);

        function Item() {
          _classCallCheck2(this, Item);

          return _super68.apply(this, arguments);
        }

        return Item;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "iconCss", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "id", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Item.prototype, "separator", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "text", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Item.prototype, "url", void 0);
      /**
       * Common modules
       */


      var __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var classNames = {
        DISABLED: 'e-disabled',
        FOCUS: 'e-focused',
        ICON: 'e-menu-icon',
        ITEM: 'e-item',
        POPUP: 'e-dropdown-popup',
        RTL: 'e-rtl',
        SEPARATOR: 'e-separator',
        VERTICAL: 'e-vertical'
      };
      /**
       * DropDownButton component is used to toggle contextual overlays for displaying list of action items.
       * It can contain both text and images.
       * ```html
       * <button id="element">DropDownButton</button>
       * ```
       * ```typescript
       * <script>
       * var dropDownButtonObj = new DropDownButton({items: [{ text: 'Action1' }, { text: 'Action2' },{ text: 'Action3' }]);
       * dropDownButtonObj.appendTo("#element");
       * </script>
       * ```
       */

      var DropDownButton = /*#__PURE__*/function (_syncfusion_ej2_base_46) {
        _inherits2(DropDownButton, _syncfusion_ej2_base_46);

        var _super69 = _createSuper(DropDownButton);

        /**
         * Constructor for creating the widget
         * @param  {DropDownButtonModel} options?
         * @param  {string|HTMLButtonElement} element?
         */
        function DropDownButton(options, element) {
          _classCallCheck2(this, DropDownButton);

          return _super69.call(this, options, element);
        }

        _createClass2(DropDownButton, [{
          key: "preRender",
          value: function preRender() {
            /** */
          }
          /**
           * Get the properties to be maintained in the persisted state.
           * @returns string
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist([]);
          }
          /**
           * To open/close DropDownButton popup based on current state of the DropDownButton.
           * @returns void
           */

        }, {
          key: "toggle",
          value: function toggle() {
            this.canOpen() ? this.openPopUp() : this.closePopup();
          }
          /**
           * Initialize the Component rendering
           * @returns void
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.initialize();

            if (!this.disabled) {
              this.wireEvents();
            }

            this.renderComplete();
          }
          /**
           * Adds a new item to the menu. By default, new item appends to the list as the last item,
           * but you can insert based on the text parameter.
           * @param  { ItemModel[] } items - Specifies an array of JSON data.
           * @param { string } text - Specifies the text to insert the newly added item in the menu.
           * @returns {void}.
           */

        }, {
          key: "addItems",
          value: function addItems(items, text) {
            var newItem;
            var idx = this.items.length;

            for (var j = 0, len = this.items.length; j < len; j++) {
              if (text === this.items[j].text) {
                idx = j;
                break;
              }
            }

            for (var i = items.length - 1; i >= 0; i--) {
              // tslint:disable-next-line
              newItem = new Item(this, 'items', items[i], true);
              this.items.splice(idx, 0, newItem);
            }

            if (!this.canOpen()) {
              this.createItems();
            }
          }
          /**
           * Removes the items from the menu.
           * @param  { string[] } items - Specifies an array of string to remove the items.
           * @returns {void}.
           */

        }, {
          key: "removeItems",
          value: function removeItems(items) {
            for (var i = 0, len = items.length; i < len; i++) {
              for (var j = 0, _len9 = this.items.length; j < _len9; j++) {
                if (items[i] === this.items[j].text) {
                  this.items.splice(j, 1);
                  break;
                }
              }
            }

            if (!this.canOpen()) {
              this.createItems();
            }
          }
        }, {
          key: "createPopup",
          value: function createPopup() {
            var _Object;

            var div = this.createElement('div', {
              className: classNames.POPUP,
              id: this.element.id + '-popup'
            });
            document.body.appendChild(div);
            this.dropDown = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["Popup"](div, {
              relateTo: this.element,
              collision: {
                X: 'fit',
                Y: 'flip'
              },
              position: {
                X: 'left',
                Y: 'bottom'
              },
              targetType: 'relative',
              content: this.target ? this.getTargetElement() : '',
              enableRtl: this.enableRtl
            });

            if (this.dropDown.element.style.position === 'fixed') {
              this.dropDown.refreshPosition(this.element);
            }

            this.dropDown.hide();
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, (_Object = {}, _defineProperty(_Object, 'aria-haspopup', this.items.length || this.target ? 'true' : 'false'), _defineProperty(_Object, 'aria-expanded', 'false'), _defineProperty(_Object, 'aria-owns', this.getPopUpElement().id), _defineProperty(_Object, 'type', 'button'), _defineProperty(_Object, 'aria-label', this.element.textContent + ' dropdownbutton'), _Object));

            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([div], this.cssClass.split(' '));
            }
          }
        }, {
          key: "getTargetElement",
          value: function getTargetElement() {
            return typeof this.target === 'string' ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(this.target) : this.target;
          }
        }, {
          key: "createItems",
          value: function createItems(appendItems) {
            var items = this.items;
            var showIcon = this.hasIcon(this.items, 'iconCss');
            var span;
            var item;
            var li;
            var eventArgs;
            var ul = this.getULElement();

            if (ul) {
              ul.innerHTML = '';
            } else {
              ul = this.createElement('ul', {
                attrs: {
                  'role': 'menu',
                  'tabindex': '0'
                }
              });
            }

            for (var i = 0; i < items.length; i++) {
              item = items[i];
              var tempItem = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(item.text) : item.text;
              li = this.createElement('li', {
                innerHTML: item.url ? '' : tempItem,
                className: item.separator ? classNames.ITEM + ' ' + classNames.SEPARATOR : classNames.ITEM,
                attrs: {
                  'role': 'menuItem',
                  'tabindex': '-1'
                },
                id: item.id ? item.id : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('e-' + this.getModuleName() + '-item')
              });

              if (item.url) {
                li.appendChild(this.createAnchor(item));
                li.classList.add('e-url');
              }

              if (item.iconCss) {
                span = this.createElement('span', {
                  className: classNames.ICON + ' ' + item.iconCss
                });
                item.url ? li.childNodes[0].appendChild(span) : li.insertBefore(span, li.childNodes[0]);
              } else {
                if (showIcon && !item.separator) {
                  li.classList.add('e-blank-icon');
                }
              }

              eventArgs = {
                item: item,
                element: li
              };
              this.trigger('beforeItemRender', eventArgs);
              ul.appendChild(li);
            }

            if (appendItems) {
              this.getPopUpElement().appendChild(ul);
            }

            if (showIcon) {
              setBlankIconStyle(this.getPopUpElement());
            }
          }
        }, {
          key: "hasIcon",
          value: function hasIcon(items, field) {
            for (var i = 0, len = items.length; i < len; i++) {
              if (items[i][field]) {
                return true;
              }
            }

            return false;
          }
        }, {
          key: "createAnchor",
          value: function createAnchor(item) {
            var tempItem = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(item.text) : item.text;
            return this.createElement('a', {
              className: 'e-menu-text e-menu-url',
              innerHTML: tempItem,
              attrs: {
                'href': item.url
              }
            });
          }
        }, {
          key: "initialize",
          value: function initialize() {
            this.button = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]({
              iconCss: this.iconCss,
              iconPosition: this.iconPosition,
              cssClass: this.cssClass,
              content: this.content,
              disabled: this.disabled,
              enableRtl: this.enableRtl,
              enablePersistence: this.enablePersistence
            });
            this.button.createElement = this.createElement;
            this.button.appendTo(this.element);

            if (!this.element.id) {
              this.element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('e-' + this.getModuleName());
            }

            this.appendArrowSpan();
            this.createPopup();
            this.setActiveElem([this.element]);
          }
        }, {
          key: "appendArrowSpan",
          value: function appendArrowSpan() {
            this.element.appendChild(this.createElement('span', {
              className: 'e-btn-icon e-icons ' + 'e-icon-' + (this.cssClass.indexOf(classNames.VERTICAL) > -1 ? 'bottom' : 'right') + ' e-caret'
            }));
          }
        }, {
          key: "setActiveElem",
          value: function setActiveElem(elem) {
            this.activeElem = elem;
          }
          /**
           * Get component name.
           * @returns string
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'dropdown-btn';
          }
        }, {
          key: "canOpen",
          value: function canOpen() {
            return this.getPopUpElement().classList.contains('e-popup-close');
          }
          /**
           * Destroys the widget.
           * @returns void
           */

        }, {
          key: "destroy",
          value: function destroy() {
            var _this218 = this;

            _get2(_getPrototypeOf2(DropDownButton.prototype), "destroy", this).call(this);

            if (this.getModuleName() === 'dropdown-btn') {
              var attrList;
              var classList$$1;

              if (this.element.querySelector('span.e-caret')) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.element.querySelector('span.e-caret'));
              }

              if (this.cssClass) {
                classList$$1 = this.cssClass.split(' ');
              }

              this.button.destroy();

              if (classList$$1) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], classList$$1);
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(this.activeElem, ['e-active']);
              attrList = this.element.getAttribute('class') ? ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type'] : ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type', 'class'];
              attrList.forEach(function (key) {
                _this218.element.removeAttribute(key);
              });
              this.dropDown.destroy();
              var popupEle = document.getElementById(this.getPopUpElement().id);

              if (popupEle) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([popupEle], ['e-popup-open', 'e-popup-close']);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(popupEle);
              }

              if (!this.disabled) {
                this.unWireEvents();
              }
            }
          }
        }, {
          key: "getPopUpElement",
          value: function getPopUpElement() {
            return this.dropDown.element;
          }
        }, {
          key: "getULElement",
          value: function getULElement() {
            return this.getPopUpElement().children[0];
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            var popupElement = this.getPopUpElement();
            this.delegateMousedownHandler = this.mousedownHandler.bind(this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousedown touchstart', this.delegateMousedownHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.clickHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(popupElement, 'click', this.clickHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keydown', this.keyBoardHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(popupElement, 'keydown', this.keyBoardHandler, this);

            this.rippleFn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(popupElement, {
              selector: '.' + classNames.ITEM
            });
          }
          /** @hidden */

        }, {
          key: "keyBoardHandler",
          value: function keyBoardHandler(e) {
            if (e.target === this.element && (e.keyCode === 9 || !e.altKey && e.keyCode === 40 || e.keyCode === 38)) {
              return;
            }

            switch (e.keyCode) {
              case 38:
              case 40:
                if (e.altKey && (e.keyCode === 38 || e.keyCode === 40)) {
                  this.keyEventHandler(e);
                } else {
                  this.upDownKeyHandler(e);
                }

                break;

              case 9:
              case 13:
              case 27:
              case 32:
                this.keyEventHandler(e);
                break;
            }
          }
        }, {
          key: "upDownKeyHandler",
          value: function upDownKeyHandler(e) {
            if (this.target && (e.keyCode === 38 || e.keyCode === 40)) {
              return;
            }

            e.preventDefault();

            _upDownKeyHandler(this.getULElement(), e.keyCode);
          }
        }, {
          key: "keyEventHandler",
          value: function keyEventHandler(e) {
            if (this.target && (e.keyCode === 13 || e.keyCode === 9)) {
              return;
            }

            if (e.keyCode !== 9) {
              e.preventDefault();
            }

            if (e.keyCode === 27 || e.keyCode === 38 || e.keyCode === 9) {
              if (!this.canOpen()) {
                this.closePopup(e, this.element);
              }
            } else {
              this.clickHandler(e);
            }
          }
        }, {
          key: "getLI",
          value: function getLI(elem) {
            return elem.tagName === 'LI' ? elem : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(elem, 'li');
          }
        }, {
          key: "mousedownHandler",
          value: function mousedownHandler(e) {
            var trgt = e.target;

            if (!this.canOpen() && !(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '#' + this.getPopUpElement().id) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '#' + this.element.id))) {
              this.closePopup(e);
            }
          }
        }, {
          key: "clickHandler",
          value: function clickHandler(e) {
            var trgt = e.target;
            var canOpen = this.canOpen();

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '#' + this.element.id)) {
              if (canOpen) {
                this.openPopUp(e);
              } else {
                this.closePopup(e, this.activeElem[0]);
              }
            } else {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(trgt, '#' + this.getPopUpElement().id)) {
                var eventArgs;
                var liIdx;
                var item;
                var li = this.getLI(trgt);

                if (li) {
                  liIdx = Array.prototype.indexOf.call(this.getULElement().children, li);
                  item = this.items[liIdx];

                  if (item) {
                    eventArgs = {
                      element: li,
                      item: item
                    };
                    this.trigger('select', eventArgs);
                  }

                  this.closePopup(e, this.activeElem[0]);
                }
              }
            }
          }
        }, {
          key: "openPopUp",
          value: function openPopUp() {
            var _this219 = this;

            var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            if (!this.target) {
              this.createItems(true);
            }

            var ul = this.getULElement();
            var beforeOpenArgs = {
              element: ul,
              items: this.items,
              event: e,
              cancel: false
            };
            this.trigger('beforeOpen', beforeOpenArgs, function (observedArgs) {
              if (!observedArgs.cancel) {
                var _ul4 = _this219.getULElement();

                _this219.dropDown.show(null, _this219.element);

                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([_this219.element], 'e-active');

                _this219.element.setAttribute('aria-expanded', 'true');

                _ul4.focus();

                var openArgs = {
                  element: _ul4,
                  items: _this219.items
                };

                _this219.trigger('open', openArgs);
              }
            });
          }
        }, {
          key: "closePopup",
          value: function closePopup() {
            var _this220 = this;

            var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var focusEle = arguments.length > 1 ? arguments[1] : undefined;
            var ul = this.getULElement();
            var beforeCloseArgs = {
              element: ul,
              items: this.items,
              event: e,
              cancel: false
            };
            this.trigger('beforeClose', beforeCloseArgs, function (observedArgs) {
              if (!observedArgs.cancel) {
                var _ul5 = _this220.getULElement();

                var selectedLi = _ul5.querySelector('.e-selected');

                if (selectedLi) {
                  selectedLi.classList.remove('e-selected');
                }

                _this220.dropDown.hide();

                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(_this220.activeElem, 'e-active');

                _this220.element.setAttribute('aria-expanded', 'false');

                if (focusEle) {
                  focusEle.focus();
                }

                var closeArgs = {
                  element: _ul5,
                  items: _this220.items
                };

                _this220.trigger('close', closeArgs);

                if (!_this220.target && _ul5) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(_ul5);
                }
              }
            });
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousedown touchstart', this.delegateMousedownHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.clickHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.getPopUpElement(), 'click', this.clickHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keydown', this.keyBoardHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler);

            this.rippleFn();
          }
          /**
           * Called internally if any of the property value changed.
           * @param  {DropDownButtonModel} newProp
           * @param  {DropDownButtonModel} oldProp
           * @returns void
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var btnModel = ['content', 'cssClass', 'iconCss', 'iconPosition', 'disabled', 'enableRtl'];
            this.button.setProperties(getModel(newProp, btnModel));
            this.dropDown.setProperties(getModel(newProp, ['enableRtl']));
            var popupElement = this.getPopUpElement();

            for (var _i103 = 0, _Object$keys38 = Object.keys(newProp); _i103 < _Object$keys38.length; _i103++) {
              var prop = _Object$keys38[_i103];

              switch (prop) {
                case 'content':
                  if (!this.element.querySelector('span.e-caret')) {
                    this.appendArrowSpan();
                  }

                  break;

                case 'disabled':
                  if (newProp.disabled) {
                    this.unWireEvents();

                    if (!this.canOpen()) {
                      this.closePopup();
                    }
                  } else {
                    this.wireEvents();
                  }

                  break;

                case 'cssClass':
                  if (newProp.cssClass.indexOf(classNames.VERTICAL) > -1) {
                    var arrowSpan = this.element.querySelector('span.e-caret');
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(arrowSpan, ['e-icon-bottom'], ['e-icon-right']);
                  }

                  if (oldProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([popupElement], oldProp.cssClass.split(' '));
                  }

                  if (newProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([popupElement], newProp.cssClass.split(' '));
                  }

                  break;

                case 'target':
                  this.dropDown.content = this.getTargetElement();
                  this.dropDown.dataBind();
                  break;

                case 'items':
                  if (!this.canOpen()) {
                    this.createItems();
                  }

                  break;
              }
            }
          }
          /**
           * Sets the focus to DropDownButton
           * its native method
           * @public
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            this.element.focus();
          }
        }]);

        return DropDownButton;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], DropDownButton.prototype, "content", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], DropDownButton.prototype, "cssClass", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownButton.prototype, "disabled", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], DropDownButton.prototype, "iconCss", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], DropDownButton.prototype, "iconPosition", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], DropDownButton.prototype, "enableHtmlSanitizer", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], Item)], DropDownButton.prototype, "items", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], DropDownButton.prototype, "target", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "beforeItemRender", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "beforeOpen", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "beforeClose", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "close", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "open", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "select", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], DropDownButton.prototype, "created", void 0);

      DropDownButton = __decorate$1([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], DropDownButton);
      /**
       * DropDownButton modules
       */

      var __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      }; /// <reference path='../drop-down-button/drop-down-button-model.d.ts'/>


      var RTL = 'e-rtl';
      var TAGNAME = 'EJS-SPLITBUTTON';
      /**
       * SplitButton component has primary and secondary button. Primary button is used to select
       * default action and secondary button is used to toggle contextual overlays for displaying list of
       * action items. It can contain both text and images.
       * ```html
       * <button id="element"></button>
       * ```
       * ```typescript
       * <script>
       * var splitBtnObj = new SplitButton({content: 'SplitButton'});
       * splitBtnObj.appendTo("#element");
       * </script>
       * ```
       */

      var SplitButton = /*#__PURE__*/function (_DropDownButton) {
        _inherits2(SplitButton, _DropDownButton);

        var _super70 = _createSuper(SplitButton);

        /**
         * Constructor for creating the widget
         * @param  {SplitButtonModel} options?
         * @param  {string|HTMLButtonElement} element?
         */
        function SplitButton(options, element) {
          _classCallCheck2(this, SplitButton);

          return _super70.call(this, options, element);
        }
        /**
         * Initialize Angular support.
         * @private
         */


        _createClass2(SplitButton, [{
          key: "preRender",
          value: function preRender() {
            var ele = this.element;

            if (ele.tagName === TAGNAME) {
              var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', ele);
              var btn = this.createElement('button', {
                attrs: {
                  'type': 'button'
                }
              });
              var wrapper = this.createElement(TAGNAME, {
                className: 'e-' + this.getModuleName() + '-wrapper'
              });

              for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {
                btn.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
              }

              ele.parentNode.insertBefore(wrapper, ele);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
              ele = btn;
              wrapper.appendChild(ele);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInstance, ele);
              this.wrapper = wrapper;
              this.element = ele;
            }

            if (!this.element.id) {
              this.element.id = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('e-' + this.getModuleName());
            }
          }
          /**
           * Initialize the Component rendering
           * @returns void
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.initWrapper();
            this.createPrimaryButton();
            this.renderControl();
          }
        }, {
          key: "renderControl",
          value: function renderControl() {
            this.createSecondaryButton();
            this.setActiveElem([this.element, this.secondaryBtnObj.element]);
            this.setAria();
            this.wireEvents();
            this.renderComplete();
          }
          /**
           * Adds a new item to the menu. By default, new item appends to the list as the last item,
           * but you can insert based on the text parameter.
           * @param  { ItemModel[] } items - Specifies an array of JSON data.
           * @param { string } text - Specifies the text to insert the newly added item in the menu.
           * @returns {void}.
           */

        }, {
          key: "addItems",
          value: function addItems(items, text) {
            _get2(_getPrototypeOf2(SplitButton.prototype), "addItems", this).call(this, items, text);

            this.secondaryBtnObj.items = this.items;
          }
          /**
           * Removes the items from the menu.
           * @param  { string[] } items - Specifies an array of string to remove the items.
           * @returns {void}.
           */

        }, {
          key: "removeItems",
          value: function removeItems(items) {
            _get2(_getPrototypeOf2(SplitButton.prototype), "removeItems", this).call(this, items);

            this.secondaryBtnObj.items = this.items;
          }
        }, {
          key: "initWrapper",
          value: function initWrapper() {
            if (!this.wrapper) {
              this.wrapper = this.createElement('div', {
                className: 'e-' + this.getModuleName() + '-wrapper'
              });
              this.element.parentNode.insertBefore(this.wrapper, this.element);
            }

            this.element.classList.remove('e-' + this.getModuleName());

            if (this.enableRtl) {
              this.wrapper.classList.add(RTL);
            }

            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.wrapper], this.cssClass.split(' '));
            }
          }
        }, {
          key: "createPrimaryButton",
          value: function createPrimaryButton() {
            var btnModel = {
              cssClass: this.cssClass,
              enableRtl: this.enableRtl,
              iconCss: this.iconCss,
              iconPosition: this.iconPosition,
              content: this.content,
              disabled: this.disabled
            };
            this.primaryBtnObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"](btnModel);
            this.primaryBtnObj.createElement = this.createElement;
            this.primaryBtnObj.appendTo(this.element);
            this.element.classList.add('e-' + this.getModuleName());
            this.element.type = 'button';
            this.wrapper.appendChild(this.element);
          }
        }, {
          key: "createSecondaryButton",
          value: function createSecondaryButton() {
            var _this221 = this;

            var dropDownBtnModel;
            var btnElem;
            btnElem = this.createElement('button', {
              className: 'e-icon-btn',
              attrs: {
                'tabindex': '-1'
              },
              id: this.element.id + '_dropdownbtn'
            });
            this.wrapper.appendChild(btnElem);
            dropDownBtnModel = {
              cssClass: this.cssClass,
              disabled: this.disabled,
              enableRtl: this.enableRtl,
              items: this.items,
              target: this.target
            };

            dropDownBtnModel.beforeItemRender = function (args) {
              _this221.trigger('beforeItemRender', args);
            };

            dropDownBtnModel.open = function (args) {
              _this221.trigger('open', args);
            };

            dropDownBtnModel.close = function (args) {
              _this221.trigger('close', args);
            };

            dropDownBtnModel.select = function (args) {
              _this221.trigger('select', args);
            };

            dropDownBtnModel.beforeOpen = function (args) {
              var callBackPromise = new Deferred();

              _this221.trigger('beforeOpen', args, function (observedArgs) {
                callBackPromise.resolve(observedArgs);
              });

              return callBackPromise;
            };

            dropDownBtnModel.beforeClose = function (args) {
              var callBackPromise = new Deferred();

              _this221.trigger('beforeClose', args, function (observedArgs) {
                callBackPromise.resolve(observedArgs);
              });

              return callBackPromise;
            };

            this.secondaryBtnObj = new DropDownButton(dropDownBtnModel);
            this.secondaryBtnObj.createElement = this.createElement;
            this.secondaryBtnObj.appendTo(btnElem);
            this.secondaryBtnObj.dropDown.relateTo = this.wrapper;
            this.dropDown = this.secondaryBtnObj.dropDown;
            this.secondaryBtnObj.activeElem = [this.element, this.secondaryBtnObj.element];

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.getPopUpElement(), 'keydown', this.secondaryBtnObj.keyBoardHandler);

            this.secondaryBtnObj.element.querySelector('.e-btn-icon').classList.remove('e-icon-right');
          }
        }, {
          key: "setAria",
          value: function setAria() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              'aria-expanded': 'false',
              'aria-haspopup': 'true',
              'aria-label': this.element.textContent + ' splitbutton',
              'aria-owns': this.secondaryBtnObj.dropDown.element.id
            });
          }
          /**
           * Get component name.
           * @returns string
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'split-btn';
          }
          /**
           * To open/close SplitButton popup based on current state of the SplitButton.
           * @returns void
           */

        }, {
          key: "toggle",
          value: function toggle() {
            this.secondaryBtnObj.toggle();
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var _this222 = this;

            var classList$$1 = [RTL];
            var element = document.getElementById(this.element.id);

            if (this.cssClass) {
              classList$$1 = classList$$1.concat(this.cssClass.split(' '));
            }

            if (element && element.parentElement === this.wrapper) {
              if (this.wrapper.tagName === TAGNAME) {
                this.wrapper.innerHTML = '';
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.wrapper], ['e-rtl', 'e-' + this.getModuleName() + '-wrapper']);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.wrapper], this.cssClass.split(' '));
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], classList$$1);
                ['aria-label', 'aria-haspopup', 'aria-expanded', 'aria-owns', 'type'].forEach(function (key) {
                  _this222.element.removeAttribute(key);
                });
                this.wrapper.parentNode.insertBefore(this.element, this.wrapper);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.wrapper);
              }

              this.unWireEvents();
            }

            this.primaryBtnObj.destroy();
            this.secondaryBtnObj.destroy();

            _get2(_getPrototypeOf2(SplitButton.prototype), "destroy", this).call(this);

            if (!this.element.getAttribute('class')) {
              this.element.removeAttribute('class');
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.primaryBtnClickHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.getPopUpElement(), 'keydown', this.keyBoardHandler, this);

            new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.element, {
              keyAction: this.btnKeyBoardHandler.bind(this),
              keyConfigs: {
                altdownarrow: 'alt+downarrow'
              }
            });
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.primaryBtnClickHandler);

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"]).destroy();
          }
        }, {
          key: "primaryBtnClickHandler",
          value: function primaryBtnClickHandler() {
            this.trigger('click', {
              element: this.element
            });
          }
        }, {
          key: "btnKeyBoardHandler",
          value: function btnKeyBoardHandler(e) {
            switch (e.action) {
              case 'altdownarrow':
                this.clickHandler(e);
                break;
            }
          }
          /**
           * Called internally if any of the property value changed.
           * @param  {SplitButtonModel} newProp
           * @param  {SplitButtonModel} oldProp
           * @returns void
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var model = ['content', 'iconCss', 'iconPosition', 'cssClass', 'disabled', 'enableRtl'];
            this.primaryBtnObj.setProperties(getModel(newProp, model));
            model = ['beforeOpen', 'beforeItemRender', 'select', 'open', 'close', 'cssClass', 'disabled', 'enableRtl'];

            if (Object.keys(newProp).indexOf('items') > -1) {
              this.secondaryBtnObj.items = newProp.items;
              this.secondaryBtnObj.dataBind();
            }

            this.secondaryBtnObj.setProperties(getModel(newProp, model));

            for (var _i104 = 0, _Object$keys39 = Object.keys(newProp); _i104 < _Object$keys39.length; _i104++) {
              var prop = _Object$keys39[_i104];

              switch (prop) {
                case 'cssClass':
                  if (oldProp.cssClass) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.wrapper], oldProp.cssClass.split(' '));
                  }

                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.wrapper], newProp.cssClass.split(' '));
                  break;

                case 'enableRtl':
                  if (newProp.enableRtl) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.wrapper], RTL);
                  } else {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.wrapper], RTL);
                  }

                  break;
              }
            }
          }
          /**
           * Sets the focus to SplitButton
           * its native method
           * @public
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            this.element.focus();
          }
        }]);

        return SplitButton;
      }(DropDownButton);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], SplitButton.prototype, "content", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], SplitButton.prototype, "cssClass", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], SplitButton.prototype, "disabled", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], SplitButton.prototype, "iconCss", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], SplitButton.prototype, "iconPosition", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([], Item)], SplitButton.prototype, "items", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], SplitButton.prototype, "target", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "beforeItemRender", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "beforeOpen", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "beforeClose", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "click", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "close", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "open", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "select", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], SplitButton.prototype, "created", void 0);

      SplitButton = __decorate$2([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], SplitButton);
      /**
       * Deferred is used to handle asynchronous operation.
       */

      var Deferred = function Deferred() {
        var _this223 = this;

        _classCallCheck2(this, Deferred);

        /**
         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.
         */
        this.promise = new Promise(function (resolve, reject) {
          _this223.resolve = resolve;
          _this223.reject = reject;
        });
        /**
         * Defines the callback function triggers when the Deferred object is rejected.
         */

        this["catch"] = this.promise["catch"].bind(this.promise);
        /**
         * Defines the callback function triggers when the Deferred object is resolved.
         */

        this.then = this.promise.then.bind(this.promise);
      };
      /**
       * Split Button modules
       */

      /**
       * Initialize ButtonGroup CSS component with specified properties.
       * ```html
       * <div id='buttongroup'>
       * <button></button>
       * <button></button>
       * <button></button>
       * </div>
       * ```
       * ```typescript
       * createButtonGroup('#buttongroup', {
       *   cssClass: 'e-outline',
       *   buttons: [
       *       { content: 'Day' },
       *       { content: 'Week' },
       *       { content: 'Work Week'}
       *   ]
       * });
       * ```
       * @param {string} selector
       * @param {CreateButtonGroupModel} options
       * @returns HTMLElement
       */


      function createButtonGroup(selector) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var createElement$$1 = arguments.length > 2 ? arguments[2] : undefined;
        var child;
        var btnElem;
        var nextChild;
        var btnModel;

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(createElement$$1)) {
          createElement$$1 = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
        }

        var wrapper = document.querySelector(selector);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], ['e-btn-group', 'e-css']);
        wrapper.setAttribute('role', 'group');
        var childs = wrapper.children;
        options.buttons = options.buttons || [];

        for (var i = 0, j = 0; j < childs.length; i++, j++) {
          child = childs[j];
          btnModel = options.buttons[i];

          if (btnModel !== null) {
            if (child.tagName === 'BUTTON') {
              btnElem = child;
            } else {
              btnElem = createElement$$1('label');
              nextChild = childs[j + 1];

              if (nextChild) {
                wrapper.insertBefore(btnElem, nextChild);
              } else {
                wrapper.appendChild(btnElem);
              }

              if (child.id) {
                btnElem.setAttribute('for', child.id);
              }

              if (btnModel && btnModel.disabled) {
                child.disabled = true;
              }

              j++;
            }

            if (options.cssClass && btnModel && !btnModel.cssClass) {
              btnModel.cssClass = options.cssClass;
            }

            new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"](btnModel || {}, btnElem);
          }
        }

        return wrapper;
      }
      /**
       * ButtonGroup modules
       */


      var __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var HIDESPINNER = 'e-hide-spinner';
      var PROGRESS = 'e-progress';
      var PROGRESSACTIVE = 'e-progress-active';
      var CONTENTCLS = 'e-btn-content';
      /**
       * Defines the spin settings.
       */

      var SpinSettings = /*#__PURE__*/function (_syncfusion_ej2_base_47) {
        _inherits2(SpinSettings, _syncfusion_ej2_base_47);

        var _super71 = _createSuper(SpinSettings);

        function SpinSettings() {
          _classCallCheck2(this, SpinSettings);

          return _super71.apply(this, arguments);
        }

        return SpinSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], SpinSettings.prototype, "template", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(16)], SpinSettings.prototype, "width", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], SpinSettings.prototype, "position", void 0);
      /**
       * Defines the animation settings.
       */


      var AnimationSettings = /*#__PURE__*/function (_syncfusion_ej2_base_48) {
        _inherits2(AnimationSettings, _syncfusion_ej2_base_48);

        var _super72 = _createSuper(AnimationSettings);

        function AnimationSettings() {
          _classCallCheck2(this, AnimationSettings);

          return _super72.apply(this, arguments);
        }

        return AnimationSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(400)], AnimationSettings.prototype, "duration", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('None')], AnimationSettings.prototype, "effect", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('ease')], AnimationSettings.prototype, "easing", void 0);
      /**
       * The ProgressButton visualizes the progression of an operation to indicate the user
       * that a process is happening in the background with visual representation.
       * ```html
       * <button id="element"></button>
       * ```
       * ```typescript
       * <script>
       * var progressButtonObj = new ProgressButton({ content: 'Progress Button' });
       * progressButtonObj.appendTo("#element");
       * </script>
       * ```
       */


      var ProgressButton = /*#__PURE__*/function (_syncfusion_ej2_butto) {
        _inherits2(ProgressButton, _syncfusion_ej2_butto);

        var _super73 = _createSuper(ProgressButton);

        /**
         * Constructor for creating the widget
         * @param  {ProgressButtonModel} options?
         * @param  {string|HTMLButtonElement} element?
         */
        function ProgressButton(options, element) {
          var _this224;

          _classCallCheck2(this, ProgressButton);

          _this224 = _super73.call(this, options, element);
          _this224.step = 1;
          return _this224;
        }

        _createClass2(ProgressButton, [{
          key: "preRender",
          value: function preRender() {
            _get2(_getPrototypeOf2(ProgressButton.prototype), "preRender", this).call(this);
          }
          /**
           * Initialize the Component rendering
           * @returns void
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              this.isServerRendered = false;
            }

            _get2(_getPrototypeOf2(ProgressButton.prototype), "render", this).call(this);

            this.init();
            this.wireEvents();
            this.setAria();
            this.renderComplete();
          }
          /**
           * Starts the button progress at the specified percent.
           * @param percent Starts the button progress at this percent.
           * @returns void
           */

        }, {
          key: "start",
          value: function start(percent) {
            this.isPaused = false;
            this.startProgress(percent ? percent : this.percent, this.progressTime);
          }
          /**
           * Stops the button progress.
           * @returns void
           */

        }, {
          key: "stop",
          value: function stop() {
            this.isPaused = true;
            cancelAnimationFrame(this.timerId);
          }
          /**
           * Complete the button progress.
           * @returns void
           */

        }, {
          key: "progressComplete",
          value: function progressComplete() {
            this.isPaused = false;
            this.finishProgress();
          }
          /**
           * Get component name.
           * @returns string
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'progress-btn';
          }
          /**
           * Destroys the widget.
           * @returns void
           */

        }, {
          key: "destroy",
          value: function destroy() {
            var _this225 = this;

            var classList$$1 = [HIDESPINNER, PROGRESSACTIVE, 'e-round-corner', 'e-' + _get2(_getPrototypeOf2(ProgressButton.prototype), "getModuleName", this).call(this), 'e-spin-' + this.spinSettings.position.toLowerCase()];
            var css;

            _get2(_getPrototypeOf2(ProgressButton.prototype), "destroy", this).call(this);

            this.unWireEvents();
            this.element.innerHTML = '';

            if (this.cssClass) {
              classList$$1 = classList$$1.concat(this.cssClass.split(' '));
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], classList$$1);
            css = this.element.getAttribute('class') ? ['aria-label', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow'] : ['aria-label', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow', 'class'];
            css.forEach(function (key) {
              _this225.element.removeAttribute(key);
            });

            if (this.disabled) {
              this.element.removeAttribute('disabled');
            }
          }
        }, {
          key: "init",
          value: function init() {
            this.element.classList.add('e-' + _get2(_getPrototypeOf2(ProgressButton.prototype), "getModuleName", this).call(this));
            this.setContent();
            this.createSpinner();

            if (this.enableProgress) {
              this.createProgress();
            }
          }
        }, {
          key: "createSpinner",
          value: function createSpinner() {
            var spinner = this.createElement('span', {
              className: 'e-spinner'
            });
            this.setSpinPosition(spinner);
            Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["createSpinner"])({
              target: spinner,
              width: this.spinSettings.width || 16,
              template: this.spinSettings.template
            }, this.createElement);
          }
        }, {
          key: "getSpinner",
          value: function getSpinner() {
            return this.element.getElementsByClassName('e-spinner')[0];
          }
        }, {
          key: "getProgress",
          value: function getProgress() {
            return this.element.getElementsByClassName(PROGRESS)[0];
          }
        }, {
          key: "setSpinPosition",
          value: function setSpinPosition(ele) {
            var position = this.spinSettings.position || 'Left';

            if (position === 'Left' || position === 'Top') {
              this.element.insertBefore(ele, this.element.getElementsByClassName(CONTENTCLS)[0]);
            } else {
              this.element.appendChild(ele);
            }

            this.element.classList.add('e-spin-' + position.toLowerCase());
          }
        }, {
          key: "createProgress",
          value: function createProgress() {
            this.element.appendChild(this.createElement('span', {
              className: PROGRESS
            }));
          }
        }, {
          key: "setContent",
          value: function setContent() {
            var cont;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              cont = this.content;

              if (this.enableHtmlSanitizer) {
                cont = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(this.content);
              }

              this.setContentIcon(cont);
            } else {
              cont = this.element.innerHTML;

              if (this.enableHtmlSanitizer) {
                cont = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(this.element.innerHTML);
              }

              this.element.innerHTML = '';
              this.element.appendChild(this.createElement('span', {
                className: CONTENTCLS,
                innerHTML: cont
              }));
            }
          }
        }, {
          key: "setContentIcon",
          value: function setContentIcon(content) {
            var contElem = this.createElement('span', {
              className: CONTENTCLS,
              innerHTML: content
            });

            if (this.iconCss) {
              var span = this.createElement('span', {
                className: 'e-btn-icon ' + this.iconCss
              });

              if (!this.element.textContent.trim()) {
                this.element.classList.add('e-icon-btn');
              } else {
                span.classList.add('e-icon-' + this.iconPosition.toLowerCase());

                if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {
                  this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');
                }
              }

              var node = contElem.childNodes[0];

              if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {
                contElem.insertBefore(span, node);
              } else {
                contElem.appendChild(span);
              }
            }

            this.element.appendChild(contElem);
          }
        }, {
          key: "clickHandler",
          value: function clickHandler() {
            if (this.element.classList.contains(PROGRESSACTIVE)) {
              return;
            }

            this.startProgress();
          }
        }, {
          key: "startProgress",
          value: function startProgress(percent, progressTime) {
            var clsList = this.element.classList;
            var isVertical = clsList.contains('e-vertical');
            clsList.add(PROGRESSACTIVE);

            if (!clsList.contains(HIDESPINNER)) {
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["showSpinner"])(this.element);
            }

            this.startAnimate(Date.now(), progressTime ? progressTime : 0, progressTime ? Date.now() - this.duration * 1 / 100 : Date.now(), percent ? percent : 0, 0, this.step, 0, isVertical);
            this.startContAnimate();
          }
        }, {
          key: "startAnimate",
          value: function startAnimate(timestamp, progressTime, prevTime, percent, prevPercent, step, prevProgressTime, isVertical) {
            var _this226 = this;

            try {
              var args;
              var timeDiff = timestamp - prevTime;
              var stepTime = this.duration * step / 100;
              var timeDiffBuffer = timeDiff ? timeDiff < stepTime ? timeDiff - stepTime : timeDiff % stepTime : 0;
              this.progressTime = progressTime = progressTime + timeDiff - timeDiffBuffer;
              prevTime = timestamp - timeDiffBuffer;
              percent = percent + (timeDiff - timeDiffBuffer) / this.duration * 100;
              prevPercent = (progressTime - prevProgressTime) % stepTime === 0 || percent === 100 ? percent : prevPercent;
              args = {
                percent: prevPercent,
                currentDuration: progressTime,
                step: step
              };
              this.eIsVertical = isVertical;

              if (percent === 0) {
                this.trigger('begin', args, function (observedArgs) {
                  _this226.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer, prevTime);
                });
              } else if (percent === 100 || progressTime === this.duration) {
                this.trigger('end', args, function (observedArgs) {
                  _this226.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer, prevTime);
                });
              } else {
                this.trigger('progress', args, function (observedArgs) {
                  _this226.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer, prevTime);
                });
              }
            } catch (e) {
              cancelAnimationFrame(this.timerId);
              this.trigger('fail', e);
            }
          }
        }, {
          key: "successCallback",
          value: function successCallback(args, perc, pPerc, prgTim, pPrgTim, timDif, pTim) {
            var _this227 = this;

            var percent = perc;
            var prevPercent = pPerc;
            var timeDiffBuffer = timDif;
            var progressTime = prgTim;
            var prevProgressTime = pPrgTim;
            var prevTime = pTim;
            var isVertical = this.eIsVertical;

            if (percent !== args.percent && args.percent !== prevPercent) {
              percent = args.percent;
            }

            this.percent = percent;
            this.step = args.step;

            if ((progressTime - prevProgressTime) % (this.duration * args.step / 100) === 0 || percent === 100) {
              this.timerId = requestAnimationFrame(function () {
                if (_this227.enableProgress) {
                  _this227.getProgress().style[isVertical ? 'height' : 'width'] = percent + '%';
                }

                _this227.element.setAttribute('aria-valuenow', percent.toString());
              });
              prevPercent = percent;
              prevProgressTime = progressTime;
            }

            if (!this.isPaused) {
              if (progressTime < this.duration && percent < 100) {
                this.interval = window.setTimeout(function () {
                  _this227.startAnimate(Date.now(), progressTime, prevTime, percent, prevPercent, args.step, prevProgressTime, isVertical); // tslint:disable-next-line

                }, this.duration / 100 - timeDiffBuffer);
              } else {
                this.interval = window.setTimeout(function () {
                  _this227.progressTime = _this227.percent = 0;

                  if (_this227.enableProgress) {
                    _this227.getProgress().style[isVertical ? 'height' : 'width'] = '0%';
                  }

                  _this227.element.setAttribute('aria-valuenow', '0');

                  _this227.hideSpin(); // tslint:disable-next-line

                }, 100);
              }
            }
          }
        }, {
          key: "startContAnimate",
          value: function startContAnimate() {
            var _this228 = this;

            var ele = this.element.getElementsByClassName(CONTENTCLS)[0];

            if (this.animationSettings.effect !== 'None') {
              new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"]({}).animate(ele, {
                duration: this.animationSettings.duration,
                name: 'Progress' + this.animationSettings.effect,
                timingFunction: this.animationSettings.easing,
                begin: function begin() {
                  if (_this228.spinSettings.position === 'Center') {
                    _this228.setSpinnerSize();
                  }
                },
                end: function end() {
                  ele.classList.add('e-animate-end');
                }
              });
            } else if (this.spinSettings.position === 'Center') {
              this.setSpinnerSize();
            }
          }
        }, {
          key: "finishProgress",
          value: function finishProgress() {
            var clsList = this.element.classList;
            var isVertical = clsList.contains('e-vertical');
            clsList.add(PROGRESSACTIVE);
            var args;
            var count = 100;

            for (var i = this.percent; i < count; i++) {
              i += 10;

              if (i > 100) {
                i = 100;
              }

              if (this.enableProgress) {
                this.getProgress().style[isVertical ? 'height' : 'width'] = this.percent < 100 ? i + '%' : '100%';
              }
            }

            this.element.setAttribute('aria-valuenow', '0');
            this.hideSpin();
            args = {
              step: this.step,
              currentDuration: this.progressTime,
              percent: 100
            };
            clearTimeout(this.interval);
            this.trigger('end', args);
            this.progressTime = this.percent = 0;
          }
        }, {
          key: "setSpinnerSize",
          value: function setSpinnerSize() {
            var ele = this.element.getElementsByClassName(CONTENTCLS)[0];
            var spinner = this.getSpinner();
            spinner.style.width = Math.max(spinner.offsetWidth, ele.offsetWidth) + 'px';
            spinner.style.height = Math.max(spinner.offsetHeight, ele.offsetHeight) + 'px';
            ele.classList.add('e-cont-animate');
          }
        }, {
          key: "hideSpin",
          value: function hideSpin() {
            var cont = this.element.getElementsByClassName(CONTENTCLS)[0];

            if (!this.element.classList.contains(HIDESPINNER)) {
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__["hideSpinner"])(this.element);
            }

            this.element.classList.remove(PROGRESSACTIVE);

            if (this.animationSettings.effect !== 'None') {
              cont.classList.remove('e-animate-end');
            }

            if (this.spinSettings.position === 'Center') {
              var ele = this.getSpinner();
              cont.classList.remove('e-cont-animate');
              ele.style.width = 'auto';
              ele.style.height = 'auto';
            }
          }
        }, {
          key: "setIconSpan",
          value: function setIconSpan() {
            var cont = this.element.getElementsByClassName(CONTENTCLS)[0];
            var iconSpan = this.element.getElementsByClassName('e-btn-icon')[0];

            if (cont.childNodes[0] && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {
              cont.insertBefore(iconSpan, cont.childNodes[0]);
            } else {
              cont.appendChild(iconSpan);
            }
          }
        }, {
          key: "setAria",
          value: function setAria() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              'aria-label': this.element.textContent + ' progress',
              'aria-valuemin': '0',
              'aria-valuemax': '100',
              'aria-valuenow': '0'
            });
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.clickHandler, this);
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.clickHandler);
          }
          /**
           * Called internally if any of the property value changed.
           * @param  {ProgressButtonModel} newProp
           * @param  {ProgressButtonModel} oldProp
           * @returns void
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var ele = this.element;

            _get2(_getPrototypeOf2(ProgressButton.prototype), "onPropertyChanged", this).call(this, newProp, oldProp);

            for (var _i105 = 0, _Object$keys40 = Object.keys(newProp); _i105 < _Object$keys40.length; _i105++) {
              var prop = _Object$keys40[_i105];

              switch (prop) {
                case 'content':
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                    var btnElem = this.element.querySelector('.e-btn-content');

                    if (this.iconCss) {
                      if (this.iconPosition === 'Left' || this.iconPosition === 'Top') {
                        btnElem.childNodes[1].textContent = this.content;
                      } else {
                        btnElem.childNodes[0].textContent = this.content;
                      }
                    } else {
                      btnElem.textContent = this.content;
                    }
                  } else {
                    this.setContent();
                    this.createSpinner();

                    if (this.enableProgress) {
                      this.createProgress();
                    }
                  }

                  ele.setAttribute('aria-label', ele.textContent + ' progress');
                  break;

                case 'iconCss':
                  if (!oldProp.iconCss) {
                    this.setIconSpan();
                  }

                  break;

                case 'iconPosition':
                  this.setIconSpan();
                  break;

                case 'enableProgress':
                  if (newProp.enableProgress) {
                    this.createProgress();
                  } else {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.getProgress());
                  }

                  break;

                case 'spinSettings':
                  if (newProp.spinSettings.position) {
                    ele.classList.remove('e-spin-' + oldProp.spinSettings.position.toLowerCase());
                    this.setSpinPosition(this.getSpinner());
                  }

                  if (newProp.spinSettings.template || newProp.spinSettings.width) {
                    ele.removeChild(this.getSpinner());
                    this.createSpinner();
                  }

                  break;
              }
            }
          }
          /**
           * Sets the focus to ProgressButton
           * its native method
           * @public
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            this.element.focus();
          }
        }]);

        return ProgressButton;
      }(_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__["Button"]);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ProgressButton.prototype, "enableProgress", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(2000)], ProgressButton.prototype, "duration", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Left')], ProgressButton.prototype, "iconPosition", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ProgressButton.prototype, "iconCss", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ProgressButton.prototype, "disabled", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ProgressButton.prototype, "isPrimary", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ProgressButton.prototype, "cssClass", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ProgressButton.prototype, "content", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ProgressButton.prototype, "isToggle", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ProgressButton.prototype, "enableHtmlSanitizer", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, SpinSettings)], ProgressButton.prototype, "spinSettings", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, AnimationSettings)], ProgressButton.prototype, "animationSettings", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ProgressButton.prototype, "created", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ProgressButton.prototype, "begin", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ProgressButton.prototype, "progress", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ProgressButton.prototype, "end", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ProgressButton.prototype, "fail", void 0);

      ProgressButton = __decorate$3([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], ProgressButton);
      /**
       * ProgressButton modules
       */

      /**
       * SplitButton all module
       */
      //# sourceMappingURL=ej2-splitbuttons.es2015.js.map

      /***/
    },

    /***/
    "ngVE":
    /*!***************************************************************************!*\
      !*** ./node_modules/@syncfusion/ej2-inputs/dist/es6/ej2-inputs.es2015.js ***!
      \***************************************************************************/

    /*! exports provided: NumericTextBox, regularExpressions, createMask, applyMask, wireEvents, unwireEvents, bindClearEvent, unstrippedValue, strippedValue, maskInputFocusHandler, maskInputBlurHandler, maskInputDropHandler, mobileRemoveFunction, setMaskValue, setElementValue, maskInput, getVal, getMaskedVal, MaskUndo, MaskedTextBox, Input, TicksData, ColorRangeData, LimitData, TooltipData, Slider, regex, ErrorOption, FormValidator, FilesProp, ButtonsProps, AsyncSettings, Uploader, ColorPicker, TextBox */

    /***/
    function ngVE(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NumericTextBox", function () {
        return NumericTextBox;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "regularExpressions", function () {
        return regularExpressions;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createMask", function () {
        return createMask;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "applyMask", function () {
        return applyMask;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "wireEvents", function () {
        return wireEvents;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "unwireEvents", function () {
        return unwireEvents;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "bindClearEvent", function () {
        return bindClearEvent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "unstrippedValue", function () {
        return unstrippedValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "strippedValue", function () {
        return strippedValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "maskInputFocusHandler", function () {
        return maskInputFocusHandler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "maskInputBlurHandler", function () {
        return maskInputBlurHandler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "maskInputDropHandler", function () {
        return maskInputDropHandler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mobileRemoveFunction", function () {
        return mobileRemoveFunction;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setMaskValue", function () {
        return setMaskValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setElementValue", function () {
        return setElementValue;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "maskInput", function () {
        return maskInput;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getVal", function () {
        return getVal;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getMaskedVal", function () {
        return getMaskedVal;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MaskUndo", function () {
        return MaskUndo;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MaskedTextBox", function () {
        return MaskedTextBox;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Input", function () {
        return Input;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TicksData", function () {
        return TicksData;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ColorRangeData", function () {
        return ColorRangeData;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LimitData", function () {
        return LimitData;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TooltipData", function () {
        return TooltipData;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Slider", function () {
        return Slider;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "regex", function () {
        return regex;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ErrorOption", function () {
        return ErrorOption;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormValidator", function () {
        return FormValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FilesProp", function () {
        return FilesProp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ButtonsProps", function () {
        return ButtonsProps;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AsyncSettings", function () {
        return AsyncSettings;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Uploader", function () {
        return Uploader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ColorPicker", function () {
        return ColorPicker;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TextBox", function () {
        return TextBox;
      });
      /* harmony import */


      var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @syncfusion/ej2-base */
      "4SUy");
      /* harmony import */


      var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @syncfusion/ej2-popups */
      "Naoh");
      /* harmony import */


      var _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @syncfusion/ej2-splitbuttons */
      "n6zm");

      var CLASSNAMES = {
        RTL: 'e-rtl',
        DISABLE: 'e-disabled',
        INPUT: 'e-input',
        TEXTAREA: 'e-multi-line-input',
        INPUTGROUP: 'e-input-group',
        FLOATINPUT: 'e-float-input',
        FLOATLINE: 'e-float-line',
        FLOATTEXT: 'e-float-text',
        CLEARICON: 'e-clear-icon',
        CLEARICONHIDE: 'e-clear-icon-hide',
        LABELTOP: 'e-label-top',
        LABELBOTTOM: 'e-label-bottom',
        NOFLOATLABEL: 'e-no-float-label',
        INPUTCUSTOMTAG: 'e-input-custom-tag',
        FLOATCUSTOMTAG: 'e-float-custom-tag'
      };
      /**
       * Base for Input creation through util methods.
       */

      var Input;

      (function (Input) {
        var floatType;
        /**
         * Create a wrapper to input element with multiple span elements and set the basic properties to input based components.
         * ```
         * E.g : Input.createInput({ element: element, floatLabelType : "Auto", properties: { placeholder: 'Search' } });
         * ```
         * @param args
         */

        function createInput(args, internalCreateElement) {
          var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
          var inputObject = {
            container: null,
            buttons: [],
            clearButton: null
          };
          floatType = args.floatLabelType;

          if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.floatLabelType) || args.floatLabelType === 'Never') {
            inputObject.container = createInputContainer(args, CLASSNAMES.INPUTGROUP, CLASSNAMES.INPUTCUSTOMTAG, 'span', makeElement);
            args.element.parentNode.insertBefore(inputObject.container, args.element);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([args.element], CLASSNAMES.INPUT);
            inputObject.container.appendChild(args.element);
          } else {
            createFloatingInput(args, inputObject, makeElement);
          }

          bindInitialEvent(args);

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.properties) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.properties.showClearButton) && args.properties.showClearButton && args.element.tagName !== 'TEXTAREA') {
            setClearButton(args.properties.showClearButton, args.element, inputObject, true, makeElement);
            inputObject.clearButton.setAttribute('role', 'button');

            if (inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([inputObject.container], CLASSNAMES.INPUTGROUP);
            }
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.buttons) && args.element.tagName !== 'TEXTAREA') {
            for (var i = 0; i < args.buttons.length; i++) {
              inputObject.buttons.push(appendSpan(args.buttons[i], inputObject.container, makeElement));
            }
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.element) && args.element.tagName === 'TEXTAREA') {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([inputObject.container], CLASSNAMES.TEXTAREA);
          }

          inputObject = setPropertyValue(args, inputObject);
          return inputObject;
        }

        Input.createInput = createInput;

        function bindInitialEvent(args) {
          checkInputValue(args.floatLabelType, args.element);
          args.element.addEventListener('focus', function () {
            var parent = getParentNode(this);

            if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) {
              parent.classList.add('e-input-focus');
            }
          });
          args.element.addEventListener('blur', function () {
            var parent = getParentNode(this);

            if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) {
              parent.classList.remove('e-input-focus');
            }
          });
          args.element.addEventListener('input', function () {
            checkInputValue(floatType, args.element);
          });
        }

        Input.bindInitialEvent = bindInitialEvent;

        function checkInputValue(floatLabelType, inputElement) {
          var inputValue = inputElement.value;

          if (inputValue !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(inputValue)) {
            inputElement.parentElement.classList.add('e-valid-input');
          } else if (floatLabelType !== 'Always' && inputElement.parentElement) {
            inputElement.parentElement.classList.remove('e-valid-input');
          }
        }

        function _focusFn() {
          var label = getParentNode(this).getElementsByClassName('e-float-text')[0];

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(label)) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], CLASSNAMES.LABELTOP);

            if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([label], CLASSNAMES.LABELBOTTOM);
            }
          }
        }

        function _blurFn() {
          var parent = getParentNode(this);

          if (parent.getElementsByTagName('textarea')[0] ? parent.getElementsByTagName('textarea')[0].value === '' : parent.getElementsByTagName('input')[0].value === '') {
            var label = parent.getElementsByClassName('e-float-text')[0];

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(label)) {
              if (label.classList.contains(CLASSNAMES.LABELTOP)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([label], CLASSNAMES.LABELTOP);
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], CLASSNAMES.LABELBOTTOM);
            }
          }
        }

        function wireFloatingEvents(element) {
          element.addEventListener('focus', _focusFn);
          element.addEventListener('blur', _blurFn);
        }

        Input.wireFloatingEvents = wireFloatingEvents;

        function unwireFloatingEvents(element) {
          element.removeEventListener('focus', _focusFn);
          element.removeEventListener('blur', _blurFn);
        }

        function createFloatingInput(args, inputObject, internalCreateElement) {
          var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
          var floatLinelement;
          var floatLabelElement;

          if (args.floatLabelType === 'Auto') {
            wireFloatingEvents(args.element);
          }

          if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(inputObject.container)) {
            inputObject.container = createInputContainer(args, CLASSNAMES.FLOATINPUT, CLASSNAMES.FLOATCUSTOMTAG, 'div', makeElement);
            args.element.parentNode.insertBefore(inputObject.container, args.element);
          } else {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.customTag)) {
              inputObject.container.classList.add(CLASSNAMES.FLOATCUSTOMTAG);
            }

            inputObject.container.classList.add(CLASSNAMES.FLOATINPUT);
          }

          floatLinelement = makeElement('span', {
            className: CLASSNAMES.FLOATLINE
          });
          floatLabelElement = makeElement('label', {
            className: CLASSNAMES.FLOATTEXT
          });

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.element.id) && args.element.id !== '') {
            floatLabelElement.id = 'label_' + args.element.id.replace(/ /g, '_');
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(args.element, {
              'aria-labelledby': floatLabelElement.id
            });
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.element.placeholder) && args.element.placeholder !== '') {
            floatLabelElement.innerText = encodePlaceHolder(args.element.placeholder);
            args.element.removeAttribute('placeholder');
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.properties) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.properties.placeholder) && args.properties.placeholder !== '') {
            floatLabelElement.innerText = encodePlaceHolder(args.properties.placeholder);
          }

          if (!floatLabelElement.innerText) {
            inputObject.container.classList.add(CLASSNAMES.NOFLOATLABEL);
          }

          if (inputObject.container.classList.contains('e-float-icon-left')) {
            var inputWrap = inputObject.container.querySelector('.e-input-in-wrap');
            inputWrap.appendChild(args.element);
            inputWrap.appendChild(floatLinelement);
            inputWrap.appendChild(floatLabelElement);
          } else {
            inputObject.container.appendChild(args.element);
            inputObject.container.appendChild(floatLinelement);
            inputObject.container.appendChild(floatLabelElement);
          }

          updateLabelState(args.element.value, floatLabelElement);

          if (args.floatLabelType === 'Always') {
            if (floatLabelElement.classList.contains(CLASSNAMES.LABELBOTTOM)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([floatLabelElement], CLASSNAMES.LABELBOTTOM);
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([floatLabelElement], CLASSNAMES.LABELTOP);
          }

          if (args.floatLabelType === 'Auto') {
            args.element.addEventListener('input', function (event) {
              updateLabelState(args.element.value, floatLabelElement);
            });
            args.element.addEventListener('blur', function (event) {
              updateLabelState(args.element.value, floatLabelElement);
            });
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.element.getAttribute('id'))) {
            floatLabelElement.setAttribute('for', args.element.getAttribute('id'));
          }
        }

        function checkFloatLabelType(type, container) {
          if (type === 'Always' && container.classList.contains('e-outline')) {
            container.classList.add('e-valid-input');
          }
        }

        function setPropertyValue(args, inputObject) {
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.properties)) {
            for (var _i106 = 0, _Object$keys41 = Object.keys(args.properties); _i106 < _Object$keys41.length; _i106++) {
              var prop = _Object$keys41[_i106];

              switch (prop) {
                case 'cssClass':
                  setCssClass(args.properties.cssClass, [inputObject.container]);
                  checkFloatLabelType(args.floatLabelType, inputObject.container);
                  break;

                case 'enabled':
                  setEnabled(args.properties.enabled, args.element, args.floatLabelType, inputObject.container);
                  break;

                case 'enableRtl':
                  setEnableRtl(args.properties.enableRtl, [inputObject.container]);
                  break;

                case 'placeholder':
                  setPlaceholder(args.properties.placeholder, args.element);
                  break;

                case 'readonly':
                  setReadonly(args.properties.readonly, args.element);
                  break;
              }
            }
          }

          return inputObject;
        }

        function updateIconState(value, button) {
          if (value) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([button], CLASSNAMES.CLEARICONHIDE);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([button], CLASSNAMES.CLEARICONHIDE);
          }
        }

        function updateLabelState(value, label) {
          if (value) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], CLASSNAMES.LABELTOP);

            if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([label], CLASSNAMES.LABELBOTTOM);
            }
          } else {
            if (label.classList.contains(CLASSNAMES.LABELTOP)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([label], CLASSNAMES.LABELTOP);
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([label], CLASSNAMES.LABELBOTTOM);
          }
        }

        function getParentNode(element) {
          var parentNode = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element.parentNode) ? element : element.parentNode;

          if (parentNode && parentNode.classList.contains('e-input-in-wrap')) {
            parentNode = parentNode.parentNode;
          }

          return parentNode;
        }
        /**
         * To create clear button.
         */


        function createClearButton(element, inputObject, initial, internalCreateElement) {
          var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
          var button = makeElement('span', {
            className: CLASSNAMES.CLEARICON
          });
          var container = inputObject.container;

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(initial)) {
            container.appendChild(button);
          } else {
            var baseElement = inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT) ? inputObject.container.querySelector('.' + CLASSNAMES.FLOATTEXT) : element;
            baseElement.insertAdjacentElement('afterend', button);
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([container], CLASSNAMES.INPUTGROUP);
          }

          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([button], CLASSNAMES.CLEARICONHIDE);
          wireClearBtnEvents(element, button, container);
          button.setAttribute('aria-label', 'close');
          return button;
        }

        function wireClearBtnEvents(element, button, container) {
          button.addEventListener('click', function (event) {
            if (!(element.classList.contains(CLASSNAMES.DISABLE) || element.readOnly)) {
              event.preventDefault();

              if (element !== document.activeElement) {
                element.focus();
              }

              element.value = '';
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([button], CLASSNAMES.CLEARICONHIDE);
            }
          });
          element.addEventListener('input', function (event) {
            updateIconState(element.value, button);
          });
          element.addEventListener('focus', function (event) {
            updateIconState(element.value, button);
          });
          element.addEventListener('blur', function (event) {
            setTimeout(function () {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([button], CLASSNAMES.CLEARICONHIDE);
            }, 200);
          });
        }

        Input.wireClearBtnEvents = wireClearBtnEvents;

        function validateLabel(element, floatLabelType) {
          var parent = getParentNode(element);

          if (parent.classList.contains(CLASSNAMES.FLOATINPUT) && floatLabelType === 'Auto') {
            var label = getParentNode(element).getElementsByClassName('e-float-text')[0];
            updateLabelState(element.value, label);
          }
        }
        /**
         * To create input box contianer.
         */


        function createInputContainer(args, className, tagClass, tag, internalCreateElement) {
          var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
          var container;

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.customTag)) {
            container = makeElement(args.customTag, {
              className: className
            });
            container.classList.add(tagClass);
          } else {
            container = makeElement(tag, {
              className: className
            });
          }

          container.classList.add('e-control-wrapper');
          return container;
        }

        function encodePlaceHolder(placeholder) {
          var result = '';

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(placeholder) && placeholder !== '') {
            var spanEle = document.createElement('span');
            spanEle.innerHTML = '<input  placeholder="' + placeholder + '"/>';
            var hiddenInput = spanEle.children[0];
            result = hiddenInput.placeholder;
          }

          return result;
        }
        /**
         * Sets the value to the input element.
         * ```
         * E.g : Input.setValue('content', element, "Auto", true );
         * ```
         * @param value - Specify the value of the input element.
         * @param element - The element on which the specified value is updated.
         * @param floatLabelType - Specify the float label type of the input element.
         * @param clearButton - Boolean value to specify whether the clear icon is enabled / disabled on the input.
         */


        function setValue$$1(value, element, floatLabelType, clearButton) {
          element.value = value;

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(floatLabelType) && floatLabelType === 'Auto') {
            validateLabel(element, floatLabelType);
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(clearButton) && clearButton) {
            var parentElement = getParentNode(element);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parentElement)) {
              var button = parentElement.getElementsByClassName(CLASSNAMES.CLEARICON)[0];

              if (element.value && parentElement.classList.contains('e-input-focus')) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([button], CLASSNAMES.CLEARICONHIDE);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([button], CLASSNAMES.CLEARICONHIDE);
              }
            }
          }

          checkInputValue(floatLabelType, element);
        }

        Input.setValue = setValue$$1;
        /**
         * Sets the single or multiple cssClass to wrapper of input element.
         * ```
         * E.g : Input.setCssClass('e-custom-class', [element]);
         * ```
         * @param cssClass - Css class names which are needed to add.
         * @param elements - The elements which are needed to add / remove classes.
         * @param oldClass - Css class names which are needed to remove. If old classes are need to remove, can give this optional parameter.
         */

        function setCssClass(cssClass, elements, oldClass) {
          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldClass) && oldClass !== '') {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(elements, oldClass.split(' '));
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cssClass) && cssClass !== '') {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(elements, cssClass.split(' '));
          }
        }

        Input.setCssClass = setCssClass;
        /**
         * Set the width to the wrapper of input element.
         * ```
         * E.g : Input.setWidth('200px', container);
         * ```
         * @param width - Width value which is need to add.
         * @param container - The element on which the width is need to add.
         */

        function setWidth(width, container) {
          if (typeof width === 'number') {
            container.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
          } else if (typeof width === 'string') {
            container.style.width = width.match(/px|%|em/) ? width : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
          }
        }

        Input.setWidth = setWidth;
        /**
         * Set the placeholder attribute to the input element.
         * ```
         * E.g : Input.setPlaceholder('Search here', element);
         * ```
         * @param placeholder - Placeholder value which is need to add.
         * @param element - The element on which the placeholder is need to add.
         */

        function setPlaceholder(placeholder, element) {
          var parentElement;
          placeholder = encodePlaceHolder(placeholder);
          parentElement = getParentNode(element);

          if (parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(placeholder) && placeholder !== '') {
              parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = placeholder;
              parentElement.classList.remove(CLASSNAMES.NOFLOATLABEL);
              element.removeAttribute('placeholder');
            } else {
              parentElement.classList.add(CLASSNAMES.NOFLOATLABEL);
              parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';
            }
          } else {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(placeholder) && placeholder !== '') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
                'placeholder': placeholder,
                'aria-placeholder': placeholder
              });
            } else {
              element.removeAttribute('placeholder');
              element.removeAttribute('aria-placeholder');
            }
          }
        }

        Input.setPlaceholder = setPlaceholder;
        /**
         * Set the read only attribute to the input element
         * ```
         * E.g : Input.setReadonly(true, element);
         * ```
         * @param isReadonly
         * - Boolean value to specify whether to set read only. Setting "True" value enables read only.
         * @param element
         * - The element which is need to enable read only.
         */

        function setReadonly(isReadonly, element, floatLabelType) {
          if (isReadonly) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
              readonly: ''
            });
          } else {
            element.removeAttribute('readonly');
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(floatLabelType)) {
            validateLabel(element, floatLabelType);
          }
        }

        Input.setReadonly = setReadonly;
        /**
         * Displays the element direction from right to left when its enabled.
         * ```
         * E.g : Input.setEnableRtl(true, [inputObj.container]);
         * ```
         * @param isRtl
         * - Boolean value to specify whether to set RTL. Setting "True" value enables the RTL mode.
         * @param elements
         * - The elements that are needed to enable/disable RTL.
         */

        function setEnableRtl(isRtl, elements) {
          if (isRtl) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])(elements, CLASSNAMES.RTL);
          } else {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(elements, CLASSNAMES.RTL);
          }
        }

        Input.setEnableRtl = setEnableRtl;
        /**
         * Enables or disables the given input element.
         * ```
         * E.g : Input.setEnabled(false, element);
         * ```
         * @param isEnable
         * - Boolean value to specify whether to enable or disable.
         * @param element
         * - Element to be enabled or disabled.
         */

        function setEnabled(isEnable, element, floatLabelType, inputContainer) {
          var disabledAttrs = {
            'disabled': 'disabled',
            'aria-disabled': 'true'
          };
          var considerWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(inputContainer) ? false : true;

          if (isEnable) {
            element.classList.remove(CLASSNAMES.DISABLE);
            removeAttributes(disabledAttrs, element);

            if (considerWrapper) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([inputContainer], CLASSNAMES.DISABLE);
            }
          } else {
            element.classList.add(CLASSNAMES.DISABLE);
            addAttributes(disabledAttrs, element);

            if (considerWrapper) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([inputContainer], CLASSNAMES.DISABLE);
            }
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(floatLabelType)) {
            validateLabel(element, floatLabelType);
          }
        }

        Input.setEnabled = setEnabled;

        function setClearButton(isClear, element, inputObject, initial, internalCreateElement) {
          var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];

          if (isClear) {
            inputObject.clearButton = createClearButton(element, inputObject, initial, makeElement);
          } else {
            inputObject.clearButton.remove();
            inputObject.clearButton = null;
          }
        }

        Input.setClearButton = setClearButton;
        /**
         * Removing the multiple attributes from the given element such as "disabled","id" , etc.
         * ```
         * E.g : Input.removeAttributes({ 'disabled': 'disabled', 'aria-disabled': 'true' }, element);
         * ```
         * @param attrs
         *  - Array of attributes which are need to removed from the element.
         * @param element
         *  - Element on which the attributes are needed to be removed.
         */

        function removeAttributes(attrs, element) {
          for (var _i107 = 0, _Object$keys42 = Object.keys(attrs); _i107 < _Object$keys42.length; _i107++) {
            var key = _Object$keys42[_i107];
            var parentElement = void 0;
            parentElement = getParentNode(element);

            if (key === 'disabled') {
              element.classList.remove(CLASSNAMES.DISABLE);
            }

            if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {
              parentElement.classList.remove(CLASSNAMES.DISABLE);
            }

            if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {
              parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';
            } else {
              element.removeAttribute(key);
            }
          }
        }

        Input.removeAttributes = removeAttributes;
        /**
         * Adding the multiple attributes to the given element such as "disabled","id" , etc.
         * ```
         * E.g : Input.addAttributes({ 'id': 'inputpopup' }, element);
         * ```
         * @param attrs
         * - Array of attributes which is added to element.
         * @param element
         * - Element on which the attributes are needed to be added.
         */

        function addAttributes(attrs, element) {
          for (var _i108 = 0, _Object$keys43 = Object.keys(attrs); _i108 < _Object$keys43.length; _i108++) {
            var key = _Object$keys43[_i108];
            var parentElement = void 0;
            parentElement = getParentNode(element);

            if (key === 'disabled') {
              element.classList.add(CLASSNAMES.DISABLE);
            }

            if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {
              parentElement.classList.add(CLASSNAMES.DISABLE);
            }

            if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {
              parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = attrs[key];
            } else {
              element.setAttribute(key, attrs[key]);
            }
          }
        }

        Input.addAttributes = addAttributes;

        function removeFloating(input) {
          var container = input.container;

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {
            var inputEle = container.querySelector('textarea') ? container.querySelector('textarea') : container.querySelector('input');
            var placeholder = container.querySelector('.' + CLASSNAMES.FLOATTEXT).textContent;
            var clearButton = container.querySelector('.e-clear-icon') !== null;
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(container.querySelector('.' + CLASSNAMES.FLOATLINE));
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(container.querySelector('.' + CLASSNAMES.FLOATTEXT));
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(container, [CLASSNAMES.INPUTGROUP], [CLASSNAMES.FLOATINPUT]);
            unwireFloatingEvents(inputEle);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(inputEle, {
              'placeholder': placeholder
            });
            inputEle.classList.add(CLASSNAMES.INPUT);

            if (!clearButton && inputEle.tagName === 'INPUT') {
              inputEle.removeAttribute('required');
            }
          }
        }

        Input.removeFloating = removeFloating;

        function addFloating(input, type, placeholder, internalCreateElement) {
          var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
          var container = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(input, '.' + CLASSNAMES.INPUTGROUP);
          floatType = type;

          if (type !== 'Never') {
            var customTag = container.tagName;
            customTag = customTag !== 'DIV' && customTag !== 'SPAN' ? customTag : null;
            var args = {
              element: input,
              floatLabelType: type,
              customTag: customTag,
              properties: {
                placeholder: placeholder
              }
            };
            var iconEle = container.querySelector('.e-clear-icon');
            var inputObj = {
              container: container
            };
            input.classList.remove(CLASSNAMES.INPUT);
            createFloatingInput(args, inputObj, makeElement);
            var isPrependIcon = container.classList.contains('e-float-icon-left');

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(iconEle)) {
              if (isPrependIcon) {
                var inputWrap = container.querySelector('.e-input-in-wrap');
                iconEle = inputWrap.querySelector('.e-input-group-icon');
              } else {
                iconEle = container.querySelector('.e-input-group-icon');
              }
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(iconEle)) {
              if (isPrependIcon) {
                iconEle = container.querySelector('.e-input-group-icon');
              }

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(iconEle)) {
                container.classList.remove(CLASSNAMES.INPUTGROUP);
              }
            } else {
              var floatLine = container.querySelector('.' + CLASSNAMES.FLOATLINE);
              var floatText = container.querySelector('.' + CLASSNAMES.FLOATTEXT);
              var wrapper = isPrependIcon ? container.querySelector('.e-input-in-wrap') : container;
              wrapper.insertBefore(input, iconEle);
              wrapper.insertBefore(floatLine, iconEle);
              wrapper.insertBefore(floatText, iconEle);
            }
          }

          checkFloatLabelType(type, input.parentElement);
        }

        Input.addFloating = addFloating;
        /**
         * Enable or Disable the ripple effect on the icons inside the Input. Ripple effect is only applicable for material theme.
         * ```
         * E.g : Input.setRipple(true, [inputObjects]);
         * ```
         * @param isRipple
         * - Boolean value to specify whether to enable the ripple effect.
         * @param inputObject
         * - Specify the collection of input objects.
         */

        function setRipple(isRipple, inputObj) {
          for (var i = 0; i < inputObj.length; i++) {
            _internalRipple(isRipple, inputObj[i].container);
          }
        }

        Input.setRipple = setRipple;

        function _internalRipple(isRipple, container, button) {
          var argsButton = [];
          argsButton.push(button);
          var buttons = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(button) ? container.querySelectorAll('.e-input-group-icon') : argsButton;

          if (isRipple && buttons.length > 0) {
            for (var index = 0; index < buttons.length; index++) {
              buttons[index].addEventListener('mousedown', _onMouseDownRipple, false);
              buttons[index].addEventListener('mouseup', _onMouseUpRipple, false);
            }
          } else if (buttons.length > 0) {
            for (var _index9 = 0; _index9 < buttons.length; _index9++) {
              buttons[_index9].removeEventListener('mousedown', _onMouseDownRipple, this);

              buttons[_index9].removeEventListener('mouseup', _onMouseUpRipple, this);
            }
          }
        }

        function _onMouseRipple(container, button) {
          if (!container.classList.contains('e-disabled') && !container.querySelector('input').readOnly) {
            button.classList.add('e-input-btn-ripple');
          }
        }

        function _onMouseDownRipple() {
          var ele = this;
          var parentEle = this.parentElement;

          while (!parentEle.classList.contains('e-input-group')) {
            parentEle = parentEle.parentElement;
          }

          _onMouseRipple(parentEle, ele);
        }

        function _onMouseUpRipple() {
          var ele = this;
          setTimeout(function () {
            ele.classList.remove('e-input-btn-ripple');
          }, 500);
        }

        function createIconEle(iconClass, makeElement) {
          var button = makeElement('span', {
            className: iconClass
          });
          button.classList.add('e-input-group-icon');
          return button;
        }
        /**
         * Creates a new span element with the given icons added and append it in container element.
         * ```
         * E.g : Input.addIcon('append', 'e-icon-spin', inputObj.container, inputElement);
         * ```
         * @param position - Specify the icon placement on the input.Possible values are append and prepend.
         * @param iconClass - Icon classes which are need to add to the span element which is going to created.
         * Span element acts as icon or button element for input.
         * @param container - The container on which created span element is going to append.
         * @param inputElement - The inputElement on which created span element is going to prepend.
         */
        // tslint:disable


        function addIcon(position, icons, container, input, internalCreate) {
          // tslint:enable
          var result = typeof icons === 'string' ? icons.split(',') : icons;

          if (position.toLowerCase() === 'append') {
            var _iterator83 = _createForOfIteratorHelper(result),
                _step83;

            try {
              for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {
                var icon = _step83.value;
                appendSpan(icon, container, internalCreate);
              }
            } catch (err) {
              _iterator83.e(err);
            } finally {
              _iterator83.f();
            }
          } else {
            var _iterator84 = _createForOfIteratorHelper(result),
                _step84;

            try {
              for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {
                var _icon3 = _step84.value;
                prependSpan(_icon3, container, input, internalCreate);
              }
            } catch (err) {
              _iterator84.e(err);
            } finally {
              _iterator84.f();
            }
          }
        }

        Input.addIcon = addIcon;
        /**
         * Creates a new span element with the given icons added and prepend it in input element.
         * ```
         * E.g : Input.prependSpan('e-icon-spin', inputObj.container, inputElement);
         * ```
         * @param iconClass - Icon classes which are need to add to the span element which is going to created.
         * Span element acts as icon or button element for input.
         * @param container - The container on which created span element is going to append.
         * @param inputElement - The inputElement on which created span element is going to prepend.
         */
        // tslint:disable

        function prependSpan(iconClass, container, inputElement, internalCreateElement) {
          // tslint:enable
          var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
          var button = createIconEle(iconClass, makeElement);
          container.classList.add('e-float-icon-left');
          var innerWrapper = container.querySelector('.e-input-in-wrap');

          if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(innerWrapper)) {
            innerWrapper = makeElement('span', {
              className: 'e-input-in-wrap'
            });
            inputElement.parentNode.insertBefore(innerWrapper, inputElement);
            var result = container.querySelectorAll(inputElement.tagName + ' ~ *');
            innerWrapper.appendChild(inputElement);

            for (var i = 0; i < result.length; i++) {
              innerWrapper.appendChild(result[i]);
            }
          }

          innerWrapper.parentNode.insertBefore(button, innerWrapper);

          if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {
            container.classList.add(CLASSNAMES.INPUTGROUP);
          }

          _internalRipple(true, container, button);

          return button;
        }

        Input.prependSpan = prependSpan;
        /**
         * Creates a new span element with the given icons added and append it in container element.
         * ```
         * E.g : Input.appendSpan('e-icon-spin', inputObj.container);
         * ```
         * @param iconClass - Icon classes which are need to add to the span element which is going to created.
         * Span element acts as icon or button element for input.
         * @param container - The container on which created span element is going to append.
         */

        function appendSpan(iconClass, container, internalCreateElement) {
          var makeElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"];
          var button = createIconEle(iconClass, makeElement);

          if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {
            container.classList.add(CLASSNAMES.INPUTGROUP);
          }

          var wrap = container.classList.contains('e-float-icon-left') ? container.querySelector('.e-input-in-wrap') : container;
          wrap.appendChild(button);

          _internalRipple(true, container, button);

          return button;
        }

        Input.appendSpan = appendSpan;
      })(Input || (Input = {}));

      var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var ROOT = 'e-control-wrapper e-numeric';
      var SPINICON = 'e-input-group-icon';
      var SPINUP = 'e-spin-up';
      var SPINDOWN = 'e-spin-down';
      var ERROR = 'e-error';
      var INCREMENT = 'increment';
      var DECREMENT = 'decrement';
      var INTREGEXP = new RegExp('^(-)?(\\d*)$');
      var DECIMALSEPARATOR = '.';
      var COMPONENT = 'e-numerictextbox';
      var CONTROL = 'e-control';
      var NUMERIC_FOCUS = 'e-input-focus';
      var HIDDENELEMENT = 'e-numeric-hidden';
      var wrapperAttributes = ['title', 'style', 'class'];
      /**
       * Represents the NumericTextBox component that allows the user to enter only numeric values.
       * ```html
       * <input type='text' id="numeric"/>
       * ```
       * ```typescript
       * <script>
       *   var numericObj = new NumericTextBox({ value: 10 });
       *   numericObj.appendTo("#numeric");
       * </script>
       * ```
       */

      var NumericTextBox = /*#__PURE__*/function (_syncfusion_ej2_base_49) {
        _inherits2(NumericTextBox, _syncfusion_ej2_base_49);

        var _super74 = _createSuper(NumericTextBox);

        function NumericTextBox(options, element) {
          var _this229;

          _classCallCheck2(this, NumericTextBox);

          _this229 = _super74.call(this, options, element);
          _this229.isVue = false;
          _this229.preventChange = false;
          _this229.numericOptions = options;
          return _this229;
        }

        _createClass2(NumericTextBox, [{
          key: "preRender",
          value: function preRender() {
            this.isPrevFocused = false;
            this.decimalSeparator = '.';
            this.intRegExp = new RegExp('/^(-)?(\d*)$/');
            this.isCalled = false;
            var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', this.element);
            this.cloneElement = this.element.cloneNode(true);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.cloneElement], [CONTROL, COMPONENT, 'e-lib']);
            this.angularTagName = null;
            this.formEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

            if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {
              this.angularTagName = this.element.tagName;
              var input = this.createElement('input');
              var index = 0;

              for (index; index < this.element.attributes.length; index++) {
                var attributeName = this.element.attributes[index].nodeName;

                if (attributeName !== 'id') {
                  input.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);
                  input.innerHTML = this.element.innerHTML;
                }
              }

              if (this.element.hasAttribute('name')) {
                this.element.removeAttribute('name');
              }

              this.element.classList.remove('e-control', 'e-numerictextbox');
              this.element.appendChild(input);
              this.element = input;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInstance, this.element);
            }

            if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
                'role': 'spinbutton',
                'tabindex': '0',
                'autocomplete': 'off',
                'aria-live': 'assertive'
              });
              var localeText = {
                incrementTitle: 'Increment value',
                decrementTitle: 'Decrement value',
                placeholder: this.placeholder
              };
              this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('numerictextbox', localeText, this.locale);

              if (this.l10n.getConstant('placeholder') !== '') {
                this.setProperties({
                  placeholder: this.placeholder || this.l10n.getConstant('placeholder')
                }, true);
              }
            }

            this.isValidState = true;
            this.inputStyle = null;
            this.inputName = null;
            this.cultureInfo = {};
            this.initCultureInfo();
            this.initCultureFunc();
            this.prevValue = this.value;

            if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
              this.updateHTMLAttrToElement();
              this.checkAttributes(false);

              if (this.formEle) {
                this.inputEleValue = this.value;
              }
            }

            this.validateMinMax();
            this.validateStep();

            if (this.placeholder === null && !(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
              this.updatePlaceholder();
            }
          }
          /**
           * To Initialize the control rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            if (this.element.tagName.toLowerCase() === 'input') {
              if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
                this.createWrapper();

                if (this.showSpinButton) {
                  this.spinBtnCreation();
                }

                this.setElementWidth(this.width);

                if (!this.container.classList.contains('e-input-group')) {
                  this.container.classList.add('e-input-group');
                }

                this.changeValue(this.value === null || isNaN(this.value) ? null : this.strictMode ? this.trimValue(this.value) : this.value);
              } else {
                this.container = this.element.parentElement;
                this.inputWrapper = {
                  container: this.container
                };
                this.hiddenInput = this.container.querySelector('input[type="hidden"]');

                if (this.showClearButton) {
                  this.inputWrapper.clearButton = this.container.querySelector('.e-clear-icon');
                  Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);
                }

                if (this.showSpinButton) {
                  this.spinDown = this.container.querySelector('.' + SPINDOWN);
                  this.spinUp = this.container.querySelector('.' + SPINUP);
                  this.wireSpinBtnEvents();
                }

                Input.bindInitialEvent({
                  element: this.element,
                  buttons: null,
                  customTag: null,
                  floatLabelType: this.floatLabelType,
                  properties: this.properties
                });
              }

              this.wireEvents();

              if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
                if (this.value !== null && !isNaN(this.value)) {
                  if (this.decimals) {
                    this.setProperties({
                      value: this.roundNumber(this.value, this.decimals)
                    }, true);
                  }
                }

                if (this.element.getAttribute('value') || this.value) {
                  this.element.setAttribute('value', this.element.value);
                  this.hiddenInput.setAttribute('value', this.hiddenInput.value);
                }
              }

              this.elementPrevValue = this.element.value;
              this.renderComplete();
            }
          }
        }, {
          key: "checkAttributes",
          value: function checkAttributes(isDynamic) {
            var attributes$$1 = isDynamic ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['value', 'min', 'max', 'step', 'disabled', 'readonly', 'style', 'name', 'placeholder'];

            var _iterator85 = _createForOfIteratorHelper(attributes$$1),
                _step85;

            try {
              for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {
                var prop = _step85.value;

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute(prop))) {
                  switch (prop) {
                    case 'disabled':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['enabled'] === undefined || isDynamic) {
                        var enabled = this.element.getAttribute(prop) === 'disabled' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? false : true;
                        this.setProperties({
                          enabled: enabled
                        }, !isDynamic);
                      }

                      break;

                    case 'readonly':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['readonly'] === undefined || isDynamic) {
                        var readonly = this.element.getAttribute(prop) === 'readonly' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? true : false;
                        this.setProperties({
                          readonly: readonly
                        }, !isDynamic);
                      }

                      break;

                    case 'placeholder':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['placeholder'] === undefined || isDynamic) {
                        this.setProperties({
                          placeholder: this.element.placeholder
                        }, !isDynamic);
                      }

                      break;

                    case 'value':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['value'] === undefined || isDynamic) {
                        var setNumber = this.instance.getNumberParser({
                          format: 'n'
                        })(this.element.getAttribute(prop));
                        this.setProperties(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, setNumber, {}), !isDynamic);
                      }

                      break;

                    case 'min':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['min'] === undefined || isDynamic) {
                        var minValue = this.instance.getNumberParser({
                          format: 'n'
                        })(this.element.getAttribute(prop));

                        if (minValue !== null && !isNaN(minValue)) {
                          this.setProperties(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, minValue, {}), !isDynamic);
                        }
                      }

                      break;

                    case 'max':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['max'] === undefined || isDynamic) {
                        var maxValue = this.instance.getNumberParser({
                          format: 'n'
                        })(this.element.getAttribute(prop));

                        if (maxValue !== null && !isNaN(maxValue)) {
                          this.setProperties(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, maxValue, {}), !isDynamic);
                        }
                      }

                      break;

                    case 'step':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.numericOptions) || this.numericOptions['step'] === undefined || isDynamic) {
                        var stepValue = this.instance.getNumberParser({
                          format: 'n'
                        })(this.element.getAttribute(prop));

                        if (stepValue !== null && !isNaN(stepValue)) {
                          this.setProperties(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, stepValue, {}), !isDynamic);
                        }
                      }

                      break;

                    case 'style':
                      this.inputStyle = this.element.getAttribute(prop);
                      break;

                    case 'name':
                      this.inputName = this.element.getAttribute(prop);
                      break;

                    default:
                      var value = this.instance.getNumberParser({
                        format: 'n'
                      })(this.element.getAttribute(prop));

                      if (value !== null && !isNaN(value) || prop === 'value') {
                        this.setProperties(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, value, {}), true);
                      }

                      break;
                  }
                }
              }
            } catch (err) {
              _iterator85.e(err);
            } finally {
              _iterator85.f();
            }
          }
        }, {
          key: "updatePlaceholder",
          value: function updatePlaceholder() {
            this.setProperties({
              placeholder: this.l10n.getConstant('placeholder')
            }, true);
          }
        }, {
          key: "initCultureFunc",
          value: function initCultureFunc() {
            this.instance = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Internationalization"](this.locale);
          }
        }, {
          key: "initCultureInfo",
          value: function initCultureInfo() {
            this.cultureInfo.format = this.format;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('currency', this) !== null) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('currency', this.currency, this.cultureInfo);
              this.setProperties({
                currencyCode: this.currency
              }, true);
            }
          }
          /* Wrapper creation */

        }, {
          key: "createWrapper",
          value: function createWrapper() {
            var updatedCssClassValue = this.cssClass;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && this.cssClass !== '') {
              updatedCssClassValue = this.getNumericValidClassList(this.cssClass);
            }

            var inputObj = Input.createInput({
              element: this.element,
              floatLabelType: this.floatLabelType,
              properties: {
                readonly: this.readonly,
                placeholder: this.placeholder,
                cssClass: updatedCssClassValue,
                enableRtl: this.enableRtl,
                showClearButton: this.showClearButton,
                enabled: this.enabled
              }
            }, this.createElement);
            this.inputWrapper = inputObj;
            this.container = inputObj.container;
            this.container.setAttribute('class', ROOT + ' ' + this.container.getAttribute('class'));
            this.updateHTMLAttrToWrapper();

            if (this.readonly) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
                'aria-readonly': 'true'
              });
            }

            this.hiddenInput = this.createElement('input', {
              attrs: {
                type: 'text',
                'validateHidden': 'true',
                'class': HIDDENELEMENT
              }
            });
            this.inputName = this.inputName !== null ? this.inputName : this.element.id;
            this.element.removeAttribute('name');
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.hiddenInput, {
              'name': this.inputName
            });
            this.container.insertBefore(this.hiddenInput, this.container.childNodes[1]);
            this.updateDataAttribute(false);

            if (this.inputStyle !== null) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.container, {
                'style': this.inputStyle
              });
            }
          }
        }, {
          key: "updateDataAttribute",
          value: function updateDataAttribute(isDynamic) {
            var attr = {};

            if (!isDynamic) {
              for (var a = 0; a < this.element.attributes.length; a++) {
                attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
              }
            } else {
              attr = this.htmlAttributes;
            }

            for (var _i109 = 0, _Object$keys44 = Object.keys(attr); _i109 < _Object$keys44.length; _i109++) {
              var key = _Object$keys44[_i109];

              if (key.indexOf('data') === 0) {
                this.hiddenInput.setAttribute(key, attr[key]);
              }
            }
          }
        }, {
          key: "updateHTMLAttrToElement",
          value: function updateHTMLAttrToElement() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
              for (var _i110 = 0, _Object$keys45 = Object.keys(this.htmlAttributes); _i110 < _Object$keys45.length; _i110++) {
                var pro = _Object$keys45[_i110];

                if (wrapperAttributes.indexOf(pro) < 0) {
                  this.element.setAttribute(pro, this.htmlAttributes[pro]);
                }
              }
            }
          }
        }, {
          key: "updateCssClass",
          value: function updateCssClass(newClass, oldClass) {
            Input.setCssClass(this.getNumericValidClassList(newClass), [this.container], this.getNumericValidClassList(oldClass));
          }
        }, {
          key: "getNumericValidClassList",
          value: function getNumericValidClassList(numericClassName) {
            var result = numericClassName;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(numericClassName) && numericClassName !== '') {
              result = numericClassName.replace(/\s+/g, ' ').trim();
            }

            return result;
          }
        }, {
          key: "updateHTMLAttrToWrapper",
          value: function updateHTMLAttrToWrapper() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
              for (var _i111 = 0, _Object$keys46 = Object.keys(this.htmlAttributes); _i111 < _Object$keys46.length; _i111++) {
                var pro = _Object$keys46[_i111];

                if (wrapperAttributes.indexOf(pro) > -1) {
                  if (pro === 'class') {
                    var updatedClassValue = this.getNumericValidClassList(this.htmlAttributes[pro]);

                    if (updatedClassValue !== '') {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.container], updatedClassValue.split(' '));
                    }
                  } else if (pro === 'style') {
                    var numericStyle = this.container.getAttribute(pro);
                    numericStyle = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(numericStyle) ? numericStyle + this.htmlAttributes[pro] : this.htmlAttributes[pro];
                    this.container.setAttribute(pro, numericStyle);
                  } else {
                    this.container.setAttribute(pro, this.htmlAttributes[pro]);
                  }
                }
              }
            }
          }
        }, {
          key: "setElementWidth",
          value: function setElementWidth(width) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(width)) {
              if (typeof width === 'number') {
                this.container.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
              } else if (typeof width === 'string') {
                this.container.style.width = width.match(/px|%|em/) ? width : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
              }
            }
          }
          /* Spinner creation */

        }, {
          key: "spinBtnCreation",
          value: function spinBtnCreation() {
            this.spinDown = Input.appendSpan(SPINICON + ' ' + SPINDOWN, this.container, this.createElement);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.spinDown, {
              'title': this.l10n.getConstant('decrementTitle'),
              'aria-label': this.l10n.getConstant('decrementTitle')
            });
            this.spinUp = Input.appendSpan(SPINICON + ' ' + SPINUP, this.container, this.createElement);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.spinUp, {
              'title': this.l10n.getConstant('incrementTitle'),
              'aria-label': this.l10n.getConstant('incrementTitle')
            });
            this.wireSpinBtnEvents();
          }
        }, {
          key: "validateMinMax",
          value: function validateMinMax() {
            if (!(typeof this.min === 'number' && !isNaN(this.min))) {
              this.setProperties({
                min: -Number.MAX_VALUE
              }, true);
            }

            if (!(typeof this.max === 'number' && !isNaN(this.max))) {
              this.setProperties({
                max: Number.MAX_VALUE
              }, true);
            }

            if (this.decimals !== null) {
              if (this.min !== -Number.MAX_VALUE) {
                this.setProperties({
                  min: this.instance.getNumberParser({
                    format: 'n'
                  })(this.formattedValue(this.decimals, this.min))
                }, true);
              }

              if (this.max !== Number.MAX_VALUE) {
                this.setProperties({
                  max: this.instance.getNumberParser({
                    format: 'n'
                  })(this.formattedValue(this.decimals, this.max))
                }, true);
              }
            }

            this.setProperties({
              min: this.min > this.max ? this.max : this.min
            }, true);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              'aria-valuemin': this.min.toString(),
              'aria-valuemax': this.max.toString()
            });
          }
        }, {
          key: "formattedValue",
          value: function formattedValue(decimals, value) {
            return this.instance.getNumberFormat({
              maximumFractionDigits: decimals,
              minimumFractionDigits: decimals,
              useGrouping: false
            })(value);
          }
        }, {
          key: "validateStep",
          value: function validateStep() {
            if (this.decimals !== null) {
              this.setProperties({
                step: this.instance.getNumberParser({
                  format: 'n'
                })(this.formattedValue(this.decimals, this.step))
              }, true);
            }
          }
        }, {
          key: "action",
          value: function action(operation, event) {
            this.isInteract = true;
            var value = this.isFocused ? this.instance.getNumberParser({
              format: 'n'
            })(this.element.value) : this.value;
            this.changeValue(this.performAction(value, this.step, operation));
            this.raiseChangeEvent(event);
          }
        }, {
          key: "checkErrorClass",
          value: function checkErrorClass() {
            if (this.isValidState) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.container], ERROR);
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.container], ERROR);
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              'aria-invalid': this.isValidState ? 'false' : 'true'
            });
          }
        }, {
          key: "bindClearEvent",
          value: function bindClearEvent() {
            if (this.showClearButton) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);
            }
          }
        }, {
          key: "resetHandler",
          value: function resetHandler(e) {
            e.preventDefault();

            if (!this.inputWrapper.clearButton.classList.contains('e-clear-icon-hide')) {
              this.clear(e);
            }

            this.isInteract = true;
            this.raiseChangeEvent(e);
          }
        }, {
          key: "clear",
          value: function clear(event) {
            this.setProperties({
              value: null
            }, true);
            this.setElementValue('');
            this.hiddenInput.value = '';
            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

            if (formElement) {
              var element = this.element.nextElementSibling;
              var keyupEvent = document.createEvent('KeyboardEvent');
              keyupEvent.initEvent('keyup', false, true);
              element.dispatchEvent(keyupEvent);
            }
          }
        }, {
          key: "resetFormHandler",
          value: function resetFormHandler() {
            if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {
              this.updateValue(null);
            } else {
              this.updateValue(this.inputEleValue);
            }
          }
        }, {
          key: "setSpinButton",
          value: function setSpinButton() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.spinDown)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.spinDown, {
                'title': this.l10n.getConstant('decrementTitle'),
                'aria-label': this.l10n.getConstant('decrementTitle')
              });
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.spinUp)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.spinUp, {
                'title': this.l10n.getConstant('incrementTitle'),
                'aria-label': this.l10n.getConstant('incrementTitle')
              });
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focus', this.focusHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'blur', this.focusOutHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keydown', this.keyDownHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keyup', this.keyUpHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'input', this.inputHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keypress', this.keyPressHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'change', this.changeHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'paste', this.pasteHandler, this);

            if (this.enabled) {
              this.bindClearEvent();

              if (this.formEle) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formEle, 'reset', this.resetFormHandler, this);
              }
            }
          }
        }, {
          key: "wireSpinBtnEvents",
          value: function wireSpinBtnEvents() {
            /* bind spin button events */
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.mouseDownOnSpinner, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.mouseDownOnSpinner, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchEndEvent, this.mouseUpOnSpinner, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchEndEvent, this.mouseUpOnSpinner, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchMoveEvent, this.touchMoveOnSpinner, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchMoveEvent, this.touchMoveOnSpinner, this);
          }
        }, {
          key: "unwireEvents",
          value: function unwireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focus', this.focusHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'blur', this.focusOutHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keyup', this.keyUpHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'input', this.inputHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keydown', this.keyDownHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keypress', this.keyPressHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'change', this.changeHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'paste', this.pasteHandler);

            if (this.formEle) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.formEle, 'reset', this.resetFormHandler);
            }
          }
        }, {
          key: "unwireSpinBtnEvents",
          value: function unwireSpinBtnEvents() {
            /* unbind spin button events */
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.mouseDownOnSpinner);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchStartEvent, this.mouseDownOnSpinner);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchEndEvent, this.mouseUpOnSpinner);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchEndEvent, this.mouseUpOnSpinner);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchMoveEvent, this.touchMoveOnSpinner);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].touchMoveEvent, this.touchMoveOnSpinner);
          }
        }, {
          key: "changeHandler",
          value: function changeHandler(event) {
            event.stopPropagation();

            if (!this.element.value.length) {
              this.setProperties({
                value: null
              }, true);
            }

            var parsedInput = this.instance.getNumberParser({
              format: 'n'
            })(this.element.value);
            this.updateValue(parsedInput, event);
          }
        }, {
          key: "raiseChangeEvent",
          value: function raiseChangeEvent(event) {
            if (this.prevValue !== this.value) {
              var eventArgs = {};
              this.changeEventArgs = {
                value: this.value,
                previousValue: this.prevValue,
                isInteracted: this.isInteract,
                isInteraction: this.isInteract,
                event: event
              };

              if (event) {
                this.changeEventArgs.event = event;
              }

              if (this.changeEventArgs.event === undefined) {
                this.changeEventArgs.isInteracted = false;
                this.changeEventArgs.isInteraction = false;
              }

              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(eventArgs, this.changeEventArgs);
              this.prevValue = this.value;
              this.isInteract = false;
              this.elementPrevValue = this.element.value;
              this.preventChange = false;
              this.trigger('change', eventArgs);
            }
          }
        }, {
          key: "pasteHandler",
          value: function pasteHandler() {
            var _this230 = this;

            if (!this.enabled || this.readonly) {
              return;
            }

            var beforeUpdate = this.element.value;
            setTimeout(function () {
              if (!_this230.numericRegex().test(_this230.element.value)) {
                _this230.setElementValue(beforeUpdate);
              }
            });
          }
        }, {
          key: "preventHandler",
          value: function preventHandler() {
            var _this231 = this;

            var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
            setTimeout(function () {
              if (_this231.element.selectionStart > 0) {
                var currentPos = _this231.element.selectionStart;
                var prevPos = _this231.element.selectionStart - 1;
                var start = 0;
                var ignoreKeyCode;

                var valArray = _this231.element.value.split('');

                var numericObject = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getNumericObject"])(_this231.locale);
                var decimalSeparator = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('decimal', numericObject);
                ignoreKeyCode = decimalSeparator.charCodeAt(0);

                if (_this231.element.value[prevPos] === ' ' && _this231.element.selectionStart > 0 && !iOS) {
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this231.prevVal)) {
                    _this231.element.value = _this231.element.value.trim();
                  } else if (prevPos !== 0) {
                    _this231.element.value = _this231.prevVal;
                  } else if (prevPos === 0) {
                    _this231.element.value = _this231.element.value.trim();
                  }

                  _this231.element.setSelectionRange(prevPos, prevPos);
                } else if (isNaN(parseFloat(_this231.element.value[_this231.element.selectionStart - 1])) && _this231.element.value[_this231.element.selectionStart - 1].charCodeAt(0) !== 45) {
                  if (valArray.indexOf(_this231.element.value[_this231.element.selectionStart - 1]) !== valArray.lastIndexOf(_this231.element.value[_this231.element.selectionStart - 1]) && _this231.element.value[_this231.element.selectionStart - 1].charCodeAt(0) === ignoreKeyCode || _this231.element.value[_this231.element.selectionStart - 1].charCodeAt(0) !== ignoreKeyCode) {
                    _this231.element.value = _this231.element.value.substring(0, prevPos) + _this231.element.value.substring(currentPos, _this231.element.value.length);

                    _this231.element.setSelectionRange(prevPos, prevPos);

                    if (isNaN(parseFloat(_this231.element.value[_this231.element.selectionStart - 1])) && _this231.element.selectionStart > 0 && _this231.element.value.length) {
                      _this231.preventHandler();
                    }
                  }
                } else if (isNaN(parseFloat(_this231.element.value[_this231.element.selectionStart - 2])) && _this231.element.selectionStart > 1 && _this231.element.value[_this231.element.selectionStart - 2].charCodeAt(0) !== 45) {
                  if (valArray.indexOf(_this231.element.value[_this231.element.selectionStart - 2]) !== valArray.lastIndexOf(_this231.element.value[_this231.element.selectionStart - 2]) && _this231.element.value[_this231.element.selectionStart - 2].charCodeAt(0) === ignoreKeyCode || _this231.element.value[_this231.element.selectionStart - 2].charCodeAt(0) !== ignoreKeyCode) {
                    _this231.element.setSelectionRange(prevPos, prevPos);

                    _this231.nextEle = _this231.element.value[_this231.element.selectionStart];
                    _this231.cursorPosChanged = true;

                    _this231.preventHandler();
                  }
                }

                if (_this231.cursorPosChanged === true && _this231.element.value[_this231.element.selectionStart] === _this231.nextEle && isNaN(parseFloat(_this231.element.value[_this231.element.selectionStart - 1]))) {
                  _this231.element.setSelectionRange(_this231.element.selectionStart + 1, _this231.element.selectionStart + 1);

                  _this231.cursorPosChanged = false;
                  _this231.nextEle = null;
                }

                if (_this231.element.value.trim() === '') {
                  _this231.element.setSelectionRange(start, start);
                }

                if (_this231.element.selectionStart > 0) {
                  if (_this231.element.value[_this231.element.selectionStart - 1].charCodeAt(0) === 45 && _this231.element.selectionStart > 1) {
                    if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this231.prevVal)) {
                      _this231.element.value = _this231.element.value;
                    } else {
                      _this231.element.value = _this231.prevVal;
                    }

                    _this231.element.setSelectionRange(_this231.element.selectionStart, _this231.element.selectionStart);
                  }
                }

                _this231.prevVal = _this231.element.value;
              }
            });
          }
        }, {
          key: "keyUpHandler",
          value: function keyUpHandler(event) {
            if (!this.enabled || this.readonly) {
              return;
            }

            var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);

            if (!iOS && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              this.preventHandler();
            }

            var parseValue = this.instance.getNumberParser({
              format: 'n'
            })(this.element.value);
            parseValue = parseValue === null || isNaN(parseValue) ? null : parseValue;
            this.hiddenInput.value = parseValue || parseValue === 0 ? parseValue.toString() : null;
            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

            if (formElement) {
              var element = this.element.nextElementSibling;
              var keyupEvent = document.createEvent('KeyboardEvent');
              keyupEvent.initEvent('keyup', false, true);
              element.dispatchEvent(keyupEvent);
            }
          }
        }, {
          key: "inputHandler",
          value: function inputHandler(event) {
            if (!this.enabled || this.readonly) {
              return;
            }

            var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
            var fireFox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;

            if ((fireFox || iOS) && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              this.preventHandler();
            }

            if (this.isVue) {
              var current = this.instance.getNumberParser({
                format: 'n'
              })(this.element.value);
              var previous = this.instance.getNumberParser({
                format: 'n'
              })(this.elementPrevValue);
              var eventArgs = {
                event: event,
                value: current === null || isNaN(current) ? null : current,
                previousValue: previous === null || isNaN(previous) ? null : previous
              };
              this.preventChange = true;
              this.elementPrevValue = this.element.value;
              this.trigger('input', eventArgs);
            }
          }
        }, {
          key: "keyDownHandler",
          value: function keyDownHandler(event) {
            if (!this.readonly) {
              switch (event.keyCode) {
                case 38:
                  event.preventDefault();
                  this.action(INCREMENT, event);
                  break;

                case 40:
                  event.preventDefault();
                  this.action(DECREMENT, event);
                  break;

                default:
                  break;
              }
            }
          }
        }, {
          key: "performAction",
          value: function performAction(value, step, operation) {
            if (value === null || isNaN(value)) {
              value = 0;
            }

            var updatedValue = operation === INCREMENT ? value + step : value - step;
            updatedValue = this.correctRounding(value, step, updatedValue);
            return this.strictMode ? this.trimValue(updatedValue) : updatedValue;
          }
        }, {
          key: "correctRounding",
          value: function correctRounding(value, step, result) {
            var floatExp = new RegExp('[,.](.*)');
            var valueText = value.toString();
            var stepText = step.toString();
            var floatValue = floatExp.test(value.toString());
            var floatStep = floatExp.test(step.toString());

            if (floatValue || floatStep) {
              var valueCount = floatValue ? floatExp.exec(value.toString())[0].length : 0;
              var stepCount = floatStep ? floatExp.exec(step.toString())[0].length : 0;
              var max = Math.max(valueCount, stepCount);
              return value = this.roundValue(result, max);
            }

            return result;
          }
        }, {
          key: "roundValue",
          value: function roundValue(result, precision) {
            precision = precision || 0;
            var divide = Math.pow(10, precision);
            return result *= divide, result = Math.round(result) / divide;
          }
        }, {
          key: "updateValue",
          value: function updateValue(value, event) {
            if (event) {
              this.isInteract = true;
            }

            if (value !== null && !isNaN(value)) {
              if (this.decimals) {
                value = this.roundNumber(value, this.decimals);
              }
            }

            this.changeValue(value === null || isNaN(value) ? null : this.strictMode ? this.trimValue(value) : value);

            if (!this.isVue || this.isVue && !this.preventChange) {
              this.raiseChangeEvent(event);
            }
          }
        }, {
          key: "updateCurrency",
          value: function updateCurrency(prop, propVal) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, propVal, this.cultureInfo);
            this.updateValue(this.value);
          }
        }, {
          key: "changeValue",
          value: function changeValue(value) {
            if (!(value || value === 0)) {
              value = null;
              this.setProperties({
                value: value
              }, true);
            } else {
              var numberOfDecimals;
              numberOfDecimals = this.getNumberOfDecimals(value);
              this.setProperties({
                value: this.roundNumber(value, numberOfDecimals)
              }, true);
            }

            this.modifyText();

            if (!this.strictMode) {
              this.validateState();
            }
          }
        }, {
          key: "modifyText",
          value: function modifyText() {
            if (this.value || this.value === 0) {
              var value = this.formatNumber();
              var elementValue = this.isFocused ? value : this.instance.getNumberFormat(this.cultureInfo)(this.value);
              this.setElementValue(elementValue);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
                'aria-valuenow': value
              });
              this.hiddenInput.value = this.value.toString();

              if (this.value !== null && this.serverDecimalSeparator) {
                this.hiddenInput.value = this.hiddenInput.value.replace('.', this.serverDecimalSeparator);
              }
            } else {
              this.setElementValue('');
              this.element.removeAttribute('aria-valuenow');
              this.hiddenInput.value = null;
            }
          }
        }, {
          key: "setElementValue",
          value: function setElementValue(val, element) {
            Input.setValue(val, element ? element : this.element, this.floatLabelType, this.showClearButton);
          }
        }, {
          key: "validateState",
          value: function validateState() {
            this.isValidState = true;

            if (this.value || this.value === 0) {
              this.isValidState = !(this.value > this.max || this.value < this.min);
            }

            this.checkErrorClass();
          }
        }, {
          key: "getNumberOfDecimals",
          value: function getNumberOfDecimals(value) {
            var numberOfDecimals;
            var EXPREGEXP = new RegExp('[eE][\-+]?([0-9]+)');
            var valueString = value.toString();

            if (EXPREGEXP.test(valueString)) {
              var result = EXPREGEXP.exec(valueString);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(result)) {
                valueString = value.toFixed(Math.min(parseInt(result[1], 10), 20));
              }
            }

            var decimalPart = valueString.split('.')[1];
            numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;

            if (this.decimals !== null) {
              numberOfDecimals = numberOfDecimals < this.decimals ? numberOfDecimals : this.decimals;
            }

            return numberOfDecimals;
          }
        }, {
          key: "formatNumber",
          value: function formatNumber() {
            var numberOfDecimals;
            numberOfDecimals = this.getNumberOfDecimals(this.value);
            return this.instance.getNumberFormat({
              maximumFractionDigits: numberOfDecimals,
              minimumFractionDigits: numberOfDecimals,
              useGrouping: false
            })(this.value);
          }
        }, {
          key: "trimValue",
          value: function trimValue(value) {
            if (value > this.max) {
              return this.max;
            }

            if (value < this.min) {
              return this.min;
            }

            return value;
          }
        }, {
          key: "roundNumber",
          value: function roundNumber(value, precision) {
            var result = value;
            var decimals = precision || 0;
            var result1 = result.toString().split('e');
            result = Math.round(Number(result1[0] + 'e' + (result1[1] ? Number(result1[1]) + decimals : decimals)));
            var result2 = result.toString().split('e');
            result = Number(result2[0] + 'e' + (result2[1] ? Number(result2[1]) - decimals : -decimals));
            return Number(result.toFixed(decimals));
          }
        }, {
          key: "cancelEvent",
          value: function cancelEvent(event) {
            event.preventDefault();
            return false;
          }
        }, {
          key: "keyPressHandler",
          value: function keyPressHandler(event) {
            if (!this.enabled || this.readonly) {
              return true;
            }

            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.version === '11.0' && event.keyCode === 13) {
              var parsedInput = this.instance.getNumberParser({
                format: 'n'
              })(this.element.value);
              this.updateValue(parsedInput, event);
              return true;
            }

            if (event.which === 0 || event.metaKey || event.ctrlKey || event.keyCode === 8 || event.keyCode === 13) {
              return true;
            }

            var currentChar = String.fromCharCode(event.which);
            var text = this.element.value;
            text = text.substring(0, this.element.selectionStart) + currentChar + text.substring(this.element.selectionEnd);

            if (!this.numericRegex().test(text)) {
              event.preventDefault();
              event.stopPropagation();
              return false;
            } else {
              return true;
            }
          }
        }, {
          key: "numericRegex",
          value: function numericRegex() {
            var numericObject = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getNumericObject"])(this.locale);
            var decimalSeparator = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('decimal', numericObject);
            var fractionRule = '*';

            if (decimalSeparator === DECIMALSEPARATOR) {
              decimalSeparator = '\\' + decimalSeparator;
            }

            if (this.decimals === 0 && this.validateDecimalOnType) {
              return INTREGEXP;
            }

            if (this.decimals && this.validateDecimalOnType) {
              fractionRule = '{0,' + this.decimals + '}';
            }

            return new RegExp('^(-)?(((\\d+(' + decimalSeparator + '\\d' + fractionRule + ')?)|(' + decimalSeparator + '\\d' + fractionRule + ')))?$');
          }
        }, {
          key: "mouseWheel",
          value: function mouseWheel(event) {
            event.preventDefault();
            var delta;
            var rawEvent = event;

            if (rawEvent.wheelDelta) {
              delta = rawEvent.wheelDelta / 120;
            } else if (rawEvent.detail) {
              delta = -rawEvent.detail / 3;
            }

            if (delta > 0) {
              this.action(INCREMENT, event);
            } else if (delta < 0) {
              this.action(DECREMENT, event);
            }

            this.cancelEvent(event);
          }
        }, {
          key: "focusHandler",
          value: function focusHandler(event) {
            var _this232 = this;

            this.focusEventArgs = {
              event: event,
              value: this.value,
              container: this.container
            };
            this.trigger('focus', this.focusEventArgs);

            if (!this.enabled || this.readonly) {
              return;
            }

            this.isFocused = true;
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.container], ERROR);
            this.prevValue = this.value;

            if (this.value || this.value === 0) {
              var formatValue = this.formatNumber();
              this.setElementValue(formatValue);

              if (!this.isPrevFocused) {
                if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.version === '11.0') {
                  this.element.setSelectionRange(0, formatValue.length);
                } else {
                  var delay = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIos ? 600 : 0;
                  setTimeout(function () {
                    _this232.element.setSelectionRange(0, formatValue.length);
                  }, delay);
                }
              }
            }

            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel, this);
            }
          }
        }, {
          key: "focusOutHandler",
          value: function focusOutHandler(event) {
            var _this233 = this;

            this.blurEventArgs = {
              event: event,
              value: this.value,
              container: this.container
            };
            this.trigger('blur', this.blurEventArgs);

            if (!this.enabled || this.readonly) {
              return;
            }

            if (this.isPrevFocused) {
              event.preventDefault();

              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                var value = this.element.value;
                this.element.focus();
                this.isPrevFocused = false;
                var ele = this.element;
                setTimeout(function () {
                  _this233.setElementValue(value, ele);
                }, 200);
              }
            } else {
              this.isFocused = false;

              if (!this.element.value.length) {
                this.setProperties({
                  value: null
                }, true);
              }

              var parsedInput = this.instance.getNumberParser({
                format: 'n'
              })(this.element.value);
              this.updateValue(parsedInput);

              if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel);
              }
            }

            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

            if (formElement) {
              var element = this.element.nextElementSibling;
              var focusEvent = document.createEvent('FocusEvent');
              focusEvent.initEvent('focusout', false, true);
              element.dispatchEvent(focusEvent);
            }
          }
        }, {
          key: "mouseDownOnSpinner",
          value: function mouseDownOnSpinner(event) {
            var _this234 = this;

            if (this.isFocused) {
              this.isPrevFocused = true;
              event.preventDefault();
            }

            if (!this.getElementData(event)) {
              return;
            }

            var result = this.getElementData(event);
            var target = event.currentTarget;
            var action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(target, 'mouseleave', this.mouseUpClick, this);

            this.timeOut = setInterval(function () {
              _this234.isCalled = true;

              _this234.action(action, event);
            }, 150);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mouseup', this.mouseUpClick, this);
          }
        }, {
          key: "touchMoveOnSpinner",
          value: function touchMoveOnSpinner(event) {
            var target = document.elementFromPoint(event.clientX, event.clientY);

            if (!target.classList.contains(SPINICON)) {
              clearInterval(this.timeOut);
            }
          }
        }, {
          key: "mouseUpOnSpinner",
          value: function mouseUpOnSpinner(event) {
            if (this.isPrevFocused) {
              this.element.focus();

              if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                this.isPrevFocused = false;
              }
            }

            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              event.preventDefault();
            }

            if (!this.getElementData(event)) {
              return;
            }

            var target = event.currentTarget;
            var action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(target, 'mouseleave', this.mouseUpClick);

            if (!this.isCalled) {
              this.action(action, event);
            }

            this.isCalled = false;

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mouseup', this.mouseUpClick);

            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

            if (formElement) {
              var element = this.element.nextElementSibling;
              var keyupEvent = document.createEvent('KeyboardEvent');
              keyupEvent.initEvent('keyup', false, true);
              element.dispatchEvent(keyupEvent);
            }
          }
        }, {
          key: "getElementData",
          value: function getElementData(event) {
            if (event.which && event.which === 3 || event.button && event.button === 2 || !this.enabled || this.readonly) {
              return false;
            }

            clearInterval(this.timeOut);
            return true;
          }
        }, {
          key: "floatLabelTypeUpdate",
          value: function floatLabelTypeUpdate() {
            Input.removeFloating(this.inputWrapper);
            var hiddenInput = this.hiddenInput;
            this.hiddenInput.remove();
            Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);
            this.container.insertBefore(hiddenInput, this.container.childNodes[1]);
          }
        }, {
          key: "mouseUpClick",
          value: function mouseUpClick(event) {
            event.stopPropagation();
            clearInterval(this.timeOut);
            this.isCalled = false;

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinUp, 'mouseleave', this.mouseUpClick);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.spinDown, 'mouseleave', this.mouseUpClick);
          }
          /**
           * Increments the NumericTextBox value with the specified step value.
           * @param  {number} step - Specifies the value used to increment the NumericTextBox value.
           * if its not given then numeric value will be incremented based on the step property value.
           */

        }, {
          key: "increment",
          value: function increment() {
            var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.step;
            this.isInteract = false;
            this.changeValue(this.performAction(this.value, step, INCREMENT));
            this.raiseChangeEvent();
          }
          /**
           * Decrements the NumericTextBox value with specified step value.
           * @param  {number} step - Specifies the value used to decrement the NumericTextBox value.
           * if its not given then numeric value will be decremented based on the step property value.
           */

        }, {
          key: "decrement",
          value: function decrement() {
            var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.step;
            this.isInteract = false;
            this.changeValue(this.performAction(this.value, step, DECREMENT));
            this.raiseChangeEvent();
          }
          /**
           * Removes the component from the DOM and detaches all its related event handlers.
           * Also it maintains the initial input element from the DOM.
           * @method destroy
           * @return {void}
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.unwireEvents();

            if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.hiddenInput);

              if (this.showSpinButton) {
                this.unwireSpinBtnEvents();
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.spinUp);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.spinDown);
              }

              var attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly', 'autocorrect', 'aria-disabled', 'aria-placeholder', 'autocapitalize', 'spellcheck', 'aria-autocomplete', 'tabindex', 'aria-valuemin', 'aria-valuemax', 'aria-live', 'aria-valuenow', 'aria-invalid'];

              for (var i = 0; i < attrArray.length; i++) {
                this.element.removeAttribute(attrArray[i]);
              }

              this.element.classList.remove('e-input');
              this.container.insertAdjacentElement('afterend', this.element);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.container);

              _get2(_getPrototypeOf2(NumericTextBox.prototype), "destroy", this).call(this);
            }
          }
          /**
           * Returns the value of NumericTextBox with the format applied to the NumericTextBox.
           */

        }, {
          key: "getText",
          value: function getText() {
            return this.element.value;
          }
          /**
           * Sets the focus to widget for interaction.
           * @returns void
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            if (document.activeElement !== this.element && this.enabled) {
              this.element.focus();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.container], [NUMERIC_FOCUS]);
            }
          }
          /**
           * Remove the focus from widget, if the widget is in focus state.
           * @returns void
           */

        }, {
          key: "focusOut",
          value: function focusOut() {
            if (document.activeElement === this.element && this.enabled) {
              this.element.blur();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.container], [NUMERIC_FOCUS]);
            }
          }
          /**
           * Gets the properties to be maintained in the persisted state.
           * @return {string}
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            var keyEntity = ['value'];
            return this.addOnPersist(keyEntity);
          }
          /**
           * Calls internally if any of the property value is changed.
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i112 = 0, _Object$keys47 = Object.keys(newProp); _i112 < _Object$keys47.length; _i112++) {
              var prop = _Object$keys47[_i112];

              switch (prop) {
                case 'width':
                  this.setElementWidth(newProp.width);
                  break;

                case 'cssClass':
                  this.updateCssClass(newProp.cssClass, oldProp.cssClass);
                  break;

                case 'enabled':
                  Input.setEnabled(newProp.enabled, this.element);
                  break;

                case 'enableRtl':
                  Input.setEnableRtl(newProp.enableRtl, [this.container]);
                  break;

                case 'readonly':
                  Input.setReadonly(newProp.readonly, this.element);

                  if (this.readonly) {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
                      'aria-readonly': 'true'
                    });
                  } else {
                    this.element.removeAttribute('aria-readonly');
                  }

                  break;

                case 'htmlAttributes':
                  this.updateHTMLAttrToElement();
                  this.updateHTMLAttrToWrapper();
                  this.updateDataAttribute(true);
                  this.checkAttributes(true);
                  break;

                case 'placeholder':
                  Input.setPlaceholder(newProp.placeholder, this.element);
                  break;

                case 'step':
                  this.step = newProp.step;
                  this.validateStep();
                  break;

                case 'showSpinButton':
                  this.updateSpinButton(newProp);
                  break;

                case 'showClearButton':
                  this.updateClearButton(newProp);
                  break;

                case 'floatLabelType':
                  this.floatLabelType = newProp.floatLabelType;
                  this.floatLabelTypeUpdate();
                  break;

                case 'value':
                  this.updateValue(newProp.value);

                  if (this.isVue && this.preventChange) {
                    this.preventChange = false;
                  }

                  break;

                case 'min':
                case 'max':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(prop, newProp), this);
                  this.validateMinMax();
                  this.updateValue(this.value);
                  break;

                case 'strictMode':
                  this.strictMode = newProp.strictMode;
                  this.updateValue(this.value);
                  this.validateState();
                  break;

                case 'locale':
                  this.initCultureFunc();
                  this.l10n.setLocale(this.locale);
                  this.setSpinButton();
                  this.updatePlaceholder();
                  Input.setPlaceholder(this.placeholder, this.element);
                  this.updateValue(this.value);
                  break;

                case 'currency':
                  var propVal = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(prop, newProp);
                  this.setProperties({
                    currencyCode: propVal
                  }, true);
                  this.updateCurrency(prop, propVal);
                  break;

                case 'currencyCode':
                  var propValue = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(prop, newProp);
                  this.setProperties({
                    currency: propValue
                  }, true);
                  this.updateCurrency('currency', propValue);
                  break;

                case 'format':
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])(prop, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])(prop, newProp), this);
                  this.initCultureInfo();
                  this.updateValue(this.value);
                  break;

                case 'decimals':
                  this.decimals = newProp.decimals;
                  this.updateValue(this.value);
              }
            }
          }
        }, {
          key: "updateClearButton",
          value: function updateClearButton(newProp) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              if (this.showClearButton) {
                this.inputWrapper.clearButton = this.container.querySelector('.e-clear-icon');
                Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);
              }
            } else {
              Input.setClearButton(newProp.showClearButton, this.element, this.inputWrapper, undefined, this.createElement);
              this.bindClearEvent();
            }
          }
        }, {
          key: "updateSpinButton",
          value: function updateSpinButton(newProp) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              if (this.showSpinButton) {
                this.spinDown = this.container.querySelector('.' + SPINDOWN);
                this.spinUp = this.container.querySelector('.' + SPINUP);
                this.wireSpinBtnEvents();
              }
            } else {
              if (newProp.showSpinButton) {
                this.spinBtnCreation();
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.spinUp);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.spinDown);
              }
            }
          }
          /**
           * Gets the component name
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'numerictextbox';
          }
        }]);

        return NumericTextBox;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], NumericTextBox.prototype, "cssClass", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], NumericTextBox.prototype, "value", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(-Number.MAX_VALUE)], NumericTextBox.prototype, "min", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(Number.MAX_VALUE)], NumericTextBox.prototype, "max", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1)], NumericTextBox.prototype, "step", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], NumericTextBox.prototype, "width", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], NumericTextBox.prototype, "placeholder", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], NumericTextBox.prototype, "htmlAttributes", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], NumericTextBox.prototype, "showSpinButton", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], NumericTextBox.prototype, "readonly", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], NumericTextBox.prototype, "enabled", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], NumericTextBox.prototype, "showClearButton", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], NumericTextBox.prototype, "enablePersistence", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('n2')], NumericTextBox.prototype, "format", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], NumericTextBox.prototype, "decimals", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], NumericTextBox.prototype, "currency", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], NumericTextBox.prototype, "currencyCode", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], NumericTextBox.prototype, "strictMode", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], NumericTextBox.prototype, "validateDecimalOnType", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Never')], NumericTextBox.prototype, "floatLabelType", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], NumericTextBox.prototype, "created", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], NumericTextBox.prototype, "destroyed", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], NumericTextBox.prototype, "change", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], NumericTextBox.prototype, "focus", void 0);

      __decorate([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], NumericTextBox.prototype, "blur", void 0);

      NumericTextBox = __decorate([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], NumericTextBox);
      /**
       * NumericTextBox modules
       */

      /**
       * MaskedTextBox base module
       */

      var ERROR$1 = 'e-error';
      var INPUTGROUP = 'e-input-group';
      var FLOATINPUT = 'e-float-input';
      var UTILMASK = 'e-utility-mask';
      var TOPLABEL = 'e-label-top';
      var BOTTOMLABEL = 'e-label-bottom';
      /**
       * @hidden
       * Built-in masking elements collection.
       */

      var regularExpressions = {
        '0': '[0-9]',
        '9': '[0-9 ]',
        '#': '[0-9 +-]',
        'L': '[A-Za-z]',
        '?': '[A-Za-z ]',
        '&': '[^\x7f ]+',
        'C': '[^\x7f]+',
        'A': '[A-Za-z0-9]',
        'a': '[A-Za-z0-9 ]'
      };
      /**
       * @hidden
       * Generate required masking elements to the MaskedTextBox from user mask input.
       */

      function createMask() {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
          'role': 'textbox',
          'autocomplete': 'off',
          'autocorrect': 'off',
          'autocapitalize': 'off',
          'spellcheck': 'false',
          'aria-live': 'assertive',
          'aria-valuenow': ''
        });

        if (this.mask) {
          var splitMask = this.mask.split(']');

          for (var i = 0; i < splitMask.length; i++) {
            if (splitMask[i][splitMask[i].length - 1] === '\\') {
              splitMask[i] = splitMask[i] + ']';
              var splitInnerMask = splitMask[i].split('[');

              for (var j = 0; j < splitInnerMask.length; j++) {
                if (splitInnerMask[j][splitInnerMask[j].length - 1] === '\\') {
                  splitInnerMask[j] = splitInnerMask[j] + '[';
                }

                pushIntoRegExpCollec.call(this, splitInnerMask[j]);
              }
            } else {
              var _splitInnerMask = splitMask[i].split('[');

              if (_splitInnerMask.length > 1) {
                var chkSpace = false;

                for (var _j3 = 0; _j3 < _splitInnerMask.length; _j3++) {
                  if (_splitInnerMask[_j3] === '\\') {
                    this.customRegExpCollec.push('[');
                    this.hiddenMask += _splitInnerMask[_j3] + '[';
                  } else if (_splitInnerMask[_j3] === '') {
                    chkSpace = true;
                  } else if (_splitInnerMask[_j3] !== '' && chkSpace || _j3 === _splitInnerMask.length - 1) {
                    this.customRegExpCollec.push('[' + _splitInnerMask[_j3] + ']');
                    this.hiddenMask += this.promptChar;
                    chkSpace = false;
                  } else {
                    pushIntoRegExpCollec.call(this, _splitInnerMask[_j3]);
                  }
                }
              } else {
                pushIntoRegExpCollec.call(this, _splitInnerMask[0]);
              }
            }
          }

          this.escapeMaskValue = this.hiddenMask;
          this.promptMask = this.hiddenMask.replace(/[09?LCAa#&]/g, this.promptChar);

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters)) {
            for (var _i113 = 0; _i113 < this.promptMask.length; _i113++) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters[this.promptMask[_i113]])) {
                this.promptMask = this.promptMask.replace(new RegExp(this.promptMask[_i113], 'g'), this.promptChar);
              }
            }
          }

          var escapeNumber = 0;

          if (this.hiddenMask.match(new RegExp(/\\/))) {
            for (var _i114 = 0; _i114 < this.hiddenMask.length; _i114++) {
              var _j4 = 0;

              if (_i114 >= 1) {
                _j4 = _i114;
              }

              escapeNumber = this.hiddenMask.length - this.promptMask.length;
              _j4 = _j4 - escapeNumber;

              if (_i114 > 0 && this.hiddenMask[_i114 - 1] !== '\\' && (this.hiddenMask[_i114] === '>' || this.hiddenMask[_i114] === '<' || this.hiddenMask[_i114] === '|')) {
                this.promptMask = this.promptMask.substring(0, _j4) + this.promptMask.substring(_i114 + 1 - escapeNumber, this.promptMask.length);
                this.escapeMaskValue = this.escapeMaskValue.substring(0, _j4) + this.escapeMaskValue.substring(_i114 + 1 - escapeNumber, this.escapeMaskValue.length);
              }

              if (this.hiddenMask[_i114] === '\\') {
                this.promptMask = this.promptMask.substring(0, _j4) + this.hiddenMask[_i114 + 1] + this.promptMask.substring(_i114 + 2 - escapeNumber, this.promptMask.length);
                this.escapeMaskValue = this.escapeMaskValue.substring(0, _j4) + this.escapeMaskValue[_i114 + 1] + this.escapeMaskValue.substring(_i114 + 2 - escapeNumber, this.escapeMaskValue.length);
              }
            }
          } else {
            this.promptMask = this.promptMask.replace(/[>|<]/g, '');
            this.escapeMaskValue = this.hiddenMask.replace(/[>|<]/g, '');
          }

          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
            'aria-invalid': 'false'
          });
        }
      }
      /**
       * @hidden
       * Apply mask ability with masking elements to the MaskedTextBox.
       */


      function applyMask() {
        setElementValue.call(this, this.promptMask);
        setMaskValue.call(this, this.value);
      }
      /**
       * @hidden
       * To wire required events to the MaskedTextBox.
       */


      function wireEvents() {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keydown', maskInputKeyDownHandler, this);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keypress', maskInputKeyPressHandler, this);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'keyup', maskInputKeyUpHandler, this);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'input', maskInputHandler, this);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focus', maskInputFocusHandler, this);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'blur', maskInputBlurHandler, this);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'paste', maskInputPasteHandler, this);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'cut', maskInputCutHandler, this);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'drop', maskInputDropHandler, this);

        if (this.enabled) {
          bindClearEvent.call(this);

          if (this.formElement) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formElement, 'reset', resetFormHandler, this);
          }
        }
      }
      /**
       * @hidden
       * To unwire events attached to the MaskedTextBox.
       */


      function unwireEvents() {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keydown', maskInputKeyDownHandler);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keypress', maskInputKeyPressHandler);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'keyup', maskInputKeyUpHandler);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'input', maskInputHandler);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focus', maskInputFocusHandler);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'blur', maskInputBlurHandler);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'paste', maskInputPasteHandler);

        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'cut', maskInputCutHandler);

        if (this.formElement) {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.formElement, 'reset', resetFormHandler);
        }
      }
      /**
       * @hidden
       * To bind required events to the MaskedTextBox clearButton.
       */


      function bindClearEvent() {
        if (this.showClearButton) {
          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.inputObj.clearButton, 'mousedown touchstart', resetHandler, this);
        }
      }

      function resetHandler(e) {
        e.preventDefault();

        if (!this.inputObj.clearButton.classList.contains('e-clear-icon-hide')) {
          clear.call(this, e);
          this.value = '';
        }
      }

      function clear(event) {
        var value = this.element.value;
        setElementValue.call(this, this.promptMask);
        this.redoCollec.unshift({
          value: this.promptMask,
          startIndex: this.element.selectionStart,
          endIndex: this.element.selectionEnd
        });
        triggerMaskChangeEvent.call(this, event, value);
        this.element.setSelectionRange(0, 0);
      }

      function resetFormHandler() {
        if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {
          setElementValue.call(this, this.promptMask);
        } else {
          this.value = this.initInputValue;
        }
      }
      /**
       * @hidden
       * To get masked value from the MaskedTextBox.
       */


      function unstrippedValue(element) {
        return element.value;
      }
      /**
       * @hidden
       * To extract raw value from the MaskedTextBox.
       */


      function strippedValue(element, maskValues) {
        var value = '';
        var k = 0;
        var checkMask = false;
        var maskValue = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(maskValues) ? maskValues : !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(element) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this) ? element.value : maskValues;

        if (maskValue !== this.promptMask) {
          for (var i = 0; i < this.customRegExpCollec.length; i++) {
            if (checkMask) {
              checkMask = false;
            }

            if (this.customRegExpCollec[k] === '>' || this.customRegExpCollec[k] === '<' || this.customRegExpCollec[k] === '|' || this.customRegExpCollec[k] === '\\') {
              --i;
              checkMask = true;
            }

            if (!checkMask) {
              if (maskValue[i] !== this.promptChar && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customRegExpCollec[k]) && (this._callPasteHandler || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.regExpCollec[this.customRegExpCollec[k]]) || this.customRegExpCollec[k].length > 2 && this.customRegExpCollec[k][0] === '[' && this.customRegExpCollec[k][this.customRegExpCollec[k].length - 1] === ']' || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters[this.customRegExpCollec[k]])) && maskValue !== '') {
                value += maskValue[i];
              }
            }

            ++k;
          }
        }

        if (this.mask === null || this.mask === '' && this.value !== undefined) {
          value = maskValue;
        }

        return value;
      }

      function pushIntoRegExpCollec(value) {
        for (var k = 0; k < value.length; k++) {
          this.hiddenMask += value[k];

          if (value[k] !== '\\') {
            this.customRegExpCollec.push(value[k]);
          }
        }
      }

      function maskInputFocusHandler(event) {
        var _this235 = this;

        var eventArgs = {
          selectionStart: 0,
          event: event,
          value: this.value,
          maskedValue: this.element.value,
          container: this.inputObj.container,
          selectionEnd: this.promptMask.length > 0 ? this.promptMask.length : this.element.value.length
        };
        this.trigger('focus', eventArgs, function (eventArgs) {
          if (_this235.mask) {
            _this235.isFocus = true;

            if (_this235.element.value === '') {
              setElementValue.call(_this235, _this235.promptMask);
            } else {
              setElementValue.call(_this235, _this235.element.value);
            }

            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.version === '11.0') {
              _this235.element.setSelectionRange(eventArgs.selectionStart, eventArgs.selectionEnd);
            } else {
              var delay = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIos ? 450 : 0;
              setTimeout(function () {
                _this235.element.setSelectionRange(eventArgs.selectionStart, eventArgs.selectionEnd);
              }, delay);
            }
          }
        });
      }

      function maskInputBlurHandler(event) {
        this.blurEventArgs = {
          event: event,
          value: this.value,
          maskedValue: this.element.value,
          container: this.inputObj.container
        };
        this.trigger('blur', this.blurEventArgs);

        if (this.mask) {
          this.isFocus = false;

          if (this.placeholder && this.element.value === this.promptMask && this.floatLabelType !== 'Always') {
            setElementValue.call(this, '');
            var labelElement = this.element.parentNode.querySelector('.e-float-text');

            if (this.floatLabelType === 'Auto' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(labelElement) && labelElement.classList.contains(TOPLABEL)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([labelElement], TOPLABEL);
            }
          }
        }
      }

      function maskInputPasteHandler(event) {
        var _this236 = this;

        if (this.mask && !this.readonly) {
          var sIndex = this.element.selectionStart;
          var eIndex = this.element.selectionEnd;
          var oldValue = this.element.value;
          setElementValue.call(this, '');
          this._callPasteHandler = true;
          setTimeout(function () {
            var value = _this236.element.value.replace(/ /g, '');

            if (_this236.redoCollec.length > 0 && _this236.redoCollec[0].value === _this236.element.value) {
              value = strippedValue.call(_this236, _this236.element);
            }

            setElementValue.call(_this236, oldValue);
            _this236.element.selectionStart = sIndex;
            _this236.element.selectionEnd = eIndex;
            var i = 0;
            _this236.maskKeyPress = true;

            do {
              validateValue.call(_this236, value[i], false, null);
              ++i;
            } while (i < value.length);

            _this236.maskKeyPress = false;
            _this236._callPasteHandler = false;

            if (_this236.element.value === oldValue) {
              var _i115 = 0;
              _this236.maskKeyPress = true;

              do {
                validateValue.call(_this236, value[_i115], false, null);
                ++_i115;
              } while (_i115 < value.length);

              _this236.maskKeyPress = false;
            } else {
              triggerMaskChangeEvent.call(_this236, event, oldValue);
            }
          }, 1);
        }
      }

      function maskInputCutHandler(event) {
        var _this237 = this;

        if (this.mask && !this.readonly) {
          var preValue = this.element.value;
          var sIndex = this.element.selectionStart;
          var eIndex = this.element.selectionEnd;
          this.undoCollec.push({
            value: this.element.value,
            startIndex: this.element.selectionStart,
            endIndex: this.element.selectionEnd
          });
          var value = this.element.value.substring(0, sIndex) + this.promptMask.substring(sIndex, eIndex) + this.element.value.substring(eIndex);
          setTimeout(function () {
            setElementValue.call(_this237, value);
            _this237.element.selectionStart = _this237.element.selectionEnd = sIndex;

            if (_this237.element.value !== preValue) {
              triggerMaskChangeEvent.call(_this237, event, null);
            }
          }, 0);
        }
      }

      function maskInputDropHandler(event) {
        event.preventDefault();
      }

      function maskInputHandler(event) {
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIE === true && this.element.value === '' && this.floatLabelType === 'Never') {
          return;
        }

        var eventArgs = {
          ctrlKey: false,
          keyCode: 229
        }; // tslint:disable-next-line

        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(event, eventArgs);

        if (this.mask) {
          if (this.element.value === '') {
            this.redoCollec.unshift({
              value: this.promptMask,
              startIndex: this.element.selectionStart,
              endIndex: this.element.selectionEnd
            });
          }

          if (this.element.value.length === 1) {
            this.element.value = this.element.value + this.promptMask;
            this.element.setSelectionRange(1, 1);
          }

          if (!this._callPasteHandler) {
            removeMaskInputValues.call(this, event);
          }

          if (this.element.value.length > this.promptMask.length) {
            var startIndex = this.element.selectionStart;
            var addedValues = this.element.value.length - this.promptMask.length;
            var value = this.element.value.substring(startIndex - addedValues, startIndex);
            this.maskKeyPress = false;
            var i = 0;

            do {
              validateValue.call(this, value[i], event.ctrlKey, event);
              ++i;
            } while (i < value.length);

            if (this.element.value !== this.preEleVal) {
              triggerMaskChangeEvent.call(this, event, null);
            }
          }

          var val = strippedValue.call(this, this.element);
          this.prevValue = val;
          this.value = val;

          if (val === '') {
            setElementValue.call(this, this.promptMask);
            this.element.setSelectionRange(0, 0);
          }
        }
      }

      function maskInputKeyDownHandler(event) {
        if (this.mask && !this.readonly) {
          if (event.keyCode !== 229) {
            if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {
              event.preventDefault();
            }

            removeMaskInputValues.call(this, event);
          }

          var startValue = this.element.value;

          if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {
            var collec;

            if (event.keyCode === 90 && this.undoCollec.length > 0 && startValue !== this.undoCollec[this.undoCollec.length - 1].value) {
              collec = this.undoCollec[this.undoCollec.length - 1];
              this.redoCollec.unshift({
                value: this.element.value,
                startIndex: this.element.selectionStart,
                endIndex: this.element.selectionEnd
              });
              setElementValue.call(this, collec.value);
              this.element.selectionStart = collec.startIndex;
              this.element.selectionEnd = collec.endIndex;
              this.undoCollec.splice(this.undoCollec.length - 1, 1);
            } else if (event.keyCode === 89 && this.redoCollec.length > 0 && startValue !== this.redoCollec[0].value) {
              collec = this.redoCollec[0];
              this.undoCollec.push({
                value: this.element.value,
                startIndex: this.element.selectionStart,
                endIndex: this.element.selectionEnd
              });
              setElementValue.call(this, collec.value);
              this.element.selectionStart = collec.startIndex;
              this.element.selectionEnd = collec.endIndex;
              this.redoCollec.splice(0, 1);
            }
          }
        }
      }

      function mobileRemoveFunction() {
        var collec;
        var sIndex = this.element.selectionStart;
        var eIndex = this.element.selectionEnd;

        if (this.redoCollec.length > 0) {
          collec = this.redoCollec[0];
          setElementValue.call(this, collec.value);

          if (collec.startIndex - sIndex === 1) {
            this.element.selectionStart = collec.startIndex;
            this.element.selectionEnd = collec.endIndex;
          } else {
            this.element.selectionStart = sIndex + 1;
            this.element.selectionEnd = eIndex + 1;
          }
        } else {
          setElementValue.call(this, this.promptMask);
          this.element.selectionStart = this.element.selectionEnd = sIndex;
        }
      }

      function autoFillMaskInputValues(isRemove, oldEventVal, event) {
        if (event.type === 'input') {
          isRemove = false;
          oldEventVal = this.element.value;
          setElementValue.call(this, this.promptMask);
          setMaskValue.call(this, oldEventVal);
        }

        return isRemove;
      }

      function removeMaskInputValues(event) {
        var isRemove = false;
        var oldEventVal;
        var isDeleted = false;

        if (this.element.value.length < this.promptMask.length) {
          isRemove = true;
          oldEventVal = this.element.value;
          isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);
          mobileRemoveFunction.call(this);
        }

        if (this.element.value.length >= this.promptMask.length && event.type === 'input') {
          isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);
        }

        var initStartIndex = this.element.selectionStart;
        var initEndIndex = this.element.selectionEnd;
        var startIndex = this.element.selectionStart;
        var endIndex = this.element.selectionEnd;
        var maskValue = this.hiddenMask.replace(/[>|\\<]/g, '');
        var curMask = maskValue[startIndex - 1];
        var parentElement = this.element.parentNode;

        if (isRemove || event.keyCode === 8 || event.keyCode === 46) {
          this.undoCollec.push({
            value: this.element.value,
            startIndex: this.element.selectionStart,
            endIndex: endIndex
          });
          var multipleDel = false;
          var preValue = this.element.value;

          if (startIndex > 0 || (event.keyCode === 8 || event.keyCode === 46) && startIndex < this.element.value.length && this.element.selectionEnd - startIndex !== this.element.value.length) {
            var index = startIndex;

            if (startIndex !== endIndex) {
              startIndex = endIndex;

              if (event.keyCode === 46) {
                multipleDel = true;
              }
            } else if (event.keyCode === 46) {
              ++index;
            } else {
              --index;
            }

            for (var k = startIndex; event.keyCode === 8 || isRemove || multipleDel ? k > index : k < index; event.keyCode === 8 || isRemove || multipleDel ? k-- : k++) {
              for (var i = startIndex; event.keyCode === 8 || isRemove || multipleDel ? i > 0 : i < this.element.value.length; event.keyCode === 8 || isRemove || multipleDel ? i-- : i++) {
                var sIndex = void 0;

                if ((event.keyCode === 8 || multipleDel) && (initStartIndex !== initEndIndex && initStartIndex !== startIndex || initStartIndex === initEndIndex) || isRemove) {
                  curMask = maskValue[i - 1];
                  sIndex = startIndex - 1;
                } else {
                  curMask = maskValue[i];
                  sIndex = startIndex;
                  ++startIndex;
                }

                var oldValue = this.element.value[sIndex];

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.regExpCollec[curMask]) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters[curMask]) && this.hiddenMask[sIndex] !== this.promptChar && this.customRegExpCollec[sIndex][0] !== '[' && this.customRegExpCollec[sIndex][this.customRegExpCollec[sIndex].length - 1] !== ']' || this.promptMask[sIndex] !== this.promptChar && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters)) {
                  this.element.selectionStart = this.element.selectionEnd = sIndex;
                  event.preventDefault();

                  if (event.keyCode === 46 && !multipleDel) {
                    ++this.element.selectionStart;
                  }
                } else {
                  var value = this.element.value;
                  var prompt = this.promptChar;
                  var elementValue = value.substring(0, sIndex) + prompt + value.substring(startIndex, value.length);
                  setElementValue.call(this, elementValue);
                  event.preventDefault();
                  this.element.selectionStart = this.element.selectionEnd = sIndex;
                  isDeleted = true;
                }

                startIndex = this.element.selectionStart;

                if (!isDeleted && event.keyCode === 8 || multipleDel || !isDeleted && !(event.keyCode === 46)) {
                  sIndex = startIndex - 1;
                } else {
                  sIndex = startIndex;
                  isDeleted = false;
                }

                oldValue = this.element.value[sIndex];

                if (initStartIndex !== initEndIndex && this.element.selectionStart === initStartIndex || this.promptMask[sIndex] === this.promptChar || oldValue !== this.promptMask[sIndex] && this.promptMask[sIndex] !== this.promptChar && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters)) {
                  break;
                }
              }
            }
          }

          if (this.element.selectionStart === 0 && this.element.selectionEnd === this.element.value.length) {
            setElementValue.call(this, this.promptMask);
            event.preventDefault();
            this.element.selectionStart = this.element.selectionEnd = startIndex;
          }

          this.redoCollec.unshift({
            value: this.element.value,
            startIndex: this.element.selectionStart,
            endIndex: this.element.selectionEnd
          });

          if (this.element.value !== preValue) {
            triggerMaskChangeEvent.call(this, event, oldEventVal);
          }
        }
      }

      function maskInputKeyPressHandler(event) {
        if (this.mask && !this.readonly) {
          var oldValue = this.element.value;

          if (!event.ctrlKey || event.ctrlKey && event.code !== 'KeyA' && event.code !== 'KeyY' && event.code !== 'KeyZ' && event.code !== 'KeyX' && event.code !== 'KeyC' && event.code !== 'KeyV') {
            this.maskKeyPress = true;
            var key = event.key;

            if (key === 'Spacebar') {
              key = String.fromCharCode(event.keyCode);
            }

            if (!key) {
              this.isIosInvalid = true;
              validateValue.call(this, String.fromCharCode(event.keyCode), event.ctrlKey, event);
              event.preventDefault();
              this.isIosInvalid = false;
            } else if (key && key.length === 1) {
              validateValue.call(this, key, event.ctrlKey, event);
              event.preventDefault();
            }

            if (event.keyCode === 32 && key === ' ' && this.promptChar === ' ') {
              this.element.selectionStart = this.element.selectionEnd = this.element.selectionStart - key.length;
            }
          }

          if (this.element.value !== oldValue) {
            triggerMaskChangeEvent.call(this, event, oldValue);
          }
        }
      }

      function triggerMaskChangeEvent(event, oldValue) {
        var prevOnChange = this.isProtectedOnChange;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.changeEventArgs) && !this.isInitial) {
          var eventArgs = {};
          this.changeEventArgs = {
            value: this.element.value,
            maskedValue: this.element.value,
            isInteraction: false,
            isInteracted: false
          };

          if (this.mask) {
            this.changeEventArgs.value = strippedValue.call(this, this.element);
          }

          if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(event)) {
            this.changeEventArgs.isInteracted = true;
            this.changeEventArgs.isInteraction = true;
            this.changeEventArgs.event = event;
          }

          this.isProtectedOnChange = true;
          this.value = this.changeEventArgs.value;
          this.isProtectedOnChange = prevOnChange;
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["merge"])(eventArgs, this.changeEventArgs);
          this.trigger('change', eventArgs);
        }

        this.preEleVal = this.element.value;
        this.prevValue = strippedValue.call(this, this.element);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
          'aria-valuenow': this.element.value
        });
      }

      function maskInputKeyUpHandler(event) {
        if (this.mask && !this.readonly) {
          var collec;

          if (!this.maskKeyPress && event.keyCode === 229) {
            var oldEventVal;

            if (this.element.value.length === 1) {
              this.element.value = this.element.value + this.promptMask;
              this.element.setSelectionRange(1, 1);
            }

            if (this.element.value.length > this.promptMask.length) {
              var startIndex = this.element.selectionStart;
              var addedValues = this.element.value.length - this.promptMask.length;

              var _val = this.element.value.substring(startIndex - addedValues, startIndex);

              if (this.undoCollec.length > 0) {
                collec = this.undoCollec[this.undoCollec.length - 1];
                var _startIndex = this.element.selectionStart;
                oldEventVal = collec.value;
                var oldVal = collec.value.substring(_startIndex - addedValues, _startIndex);
                collec = this.redoCollec[0];
                _val = _val.trim();
                var isSpace = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isAndroid && _val === '';

                if (!isSpace && oldVal !== _val && collec.value.substring(_startIndex - addedValues, _startIndex) !== _val) {
                  validateValue.call(this, _val, event.ctrlKey, event);
                } else if (isSpace) {
                  preventUnsupportedValues.call(this, event, _startIndex - 1, this.element.selectionEnd - 1, _val, event.ctrlKey, false);
                }
              } else {
                oldEventVal = this.promptMask;
                validateValue.call(this, _val, event.ctrlKey, event);
              }

              this.maskKeyPress = false;
              triggerMaskChangeEvent.call(this, event, oldEventVal);
            }
          } else {
            removeMaskError.call(this);
          }

          var val = strippedValue.call(this, this.element);

          if (!(this.element.selectionStart === 0 && this.promptMask === this.element.value && val === '') || val === '' && this.value !== val) {
            this.prevValue = val;
            this.value = val;
          }
        } else {
          triggerMaskChangeEvent.call(this, event);
        }

        if (this.element.selectionStart === 0 && this.element.selectionEnd === 0) {
          // tslint:disable-next-line
          var temp = this.element;
          setTimeout(function () {
            temp.setSelectionRange(0, 0);
          }, 0);
        }
      }

      function mobileSwipeCheck(key) {
        if (key.length > 1 && this.promptMask.length + key.length < this.element.value.length) {
          var elementValue = this.redoCollec[0].value.substring(0, this.redoCollec[0].startIndex) + key + this.redoCollec[0].value.substring(this.redoCollec[0].startIndex, this.redoCollec[0].value.length);
          setElementValue.call(this, elementValue);
          this.element.selectionStart = this.element.selectionEnd = this.redoCollec[0].startIndex + key.length;
        }

        this.element.selectionStart = this.element.selectionStart - key.length;
        this.element.selectionEnd = this.element.selectionEnd - key.length;
      }

      function mobileValidation(key) {
        if (!this.maskKeyPress) {
          mobileSwipeCheck.call(this, key);
        }
      }

      function validateValue(key, isCtrlKey, event) {
        mobileValidation.call(this, key);

        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(key)) {
          return;
        }

        var startIndex = this.element.selectionStart;
        var initStartIndex = startIndex;
        var endIndex = this.element.selectionEnd;
        var curMask;
        var allowText = false;
        var value = this.element.value;
        var eventOldVal;
        var prevSupport = false;
        var isEqualVal = false;

        for (var k = 0; k < key.length; k++) {
          var keyValue = key[k];
          startIndex = this.element.selectionStart;
          endIndex = this.element.selectionEnd;

          if (!this.maskKeyPress && initStartIndex === startIndex) {
            startIndex = startIndex + k;
          }

          if (!this.maskKeyPress || startIndex < this.promptMask.length) {
            for (var i = startIndex; i < this.promptMask.length; i++) {
              var maskValue = this.escapeMaskValue;
              curMask = maskValue[startIndex];

              if (this.hiddenMask[startIndex] === '\\' && this.hiddenMask[startIndex + 1] === key) {
                isEqualVal = true;
              }

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.regExpCollec[curMask]) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters[curMask])) && this.hiddenMask[startIndex] !== this.promptChar && this.customRegExpCollec[startIndex][0] !== '[' && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] !== ']' || this.promptMask[startIndex] !== this.promptChar && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters) || this.promptChar === curMask && this.escapeMaskValue === this.mask) {
                this.element.selectionStart = this.element.selectionEnd = startIndex + 1;
                startIndex = this.element.selectionStart;
                curMask = this.hiddenMask[startIndex];
              }
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customCharacters[curMask])) {
              var customValStr = this.customCharacters[curMask];
              var customValArr = customValStr.split(',');

              for (var _i116 = 0; _i116 < customValArr.length; _i116++) {
                if (keyValue.match(new RegExp('[' + customValArr[_i116] + ']'))) {
                  allowText = true;
                  break;
                }
              }
            } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.regExpCollec[curMask]) && keyValue.match(new RegExp(this.regExpCollec[curMask])) && this.promptMask[startIndex] === this.promptChar) {
              allowText = true;
            } else if (this.promptMask[startIndex] === this.promptChar && this.customRegExpCollec[startIndex][0] === '[' && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] === ']' && keyValue.match(new RegExp(this.customRegExpCollec[startIndex]))) {
              allowText = true;
            }

            if ((!this.maskKeyPress || startIndex < this.hiddenMask.length) && allowText) {
              if (k === 0) {
                if (this.maskKeyPress) {
                  this.undoCollec.push({
                    value: value,
                    startIndex: startIndex,
                    endIndex: startIndex
                  });
                } else {
                  var sIndex = this.element.selectionStart;
                  var eIndex = this.element.selectionEnd;

                  if (this.redoCollec.length > 0) {
                    eventOldVal = this.redoCollec[0].value;
                    setElementValue.call(this, eventOldVal);
                    this.undoCollec.push(this.redoCollec[0]);
                  } else {
                    this.undoCollec.push({
                      value: this.promptMask,
                      startIndex: startIndex,
                      endIndex: startIndex
                    });
                    eventOldVal = this.promptMask;
                    setElementValue.call(this, eventOldVal);
                  }

                  this.element.selectionStart = sIndex;
                  this.element.selectionEnd = eIndex;
                }
              }

              startIndex = this.element.selectionStart;
              applySupportedValues.call(this, event, startIndex, keyValue, eventOldVal, isEqualVal);
              prevSupport = true;

              if (k === key.length - 1) {
                this.redoCollec.unshift({
                  value: this.element.value,
                  startIndex: this.element.selectionStart,
                  endIndex: this.element.selectionEnd
                });
              }

              allowText = false;
            } else {
              startIndex = this.element.selectionStart;
              preventUnsupportedValues.call(this, event, startIndex, initStartIndex, key, isCtrlKey, prevSupport);
            }

            if (k === key.length - 1 && !allowText) {
              if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isAndroid || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isAndroid && startIndex < this.promptMask.length) {
                this.redoCollec.unshift({
                  value: this.element.value,
                  startIndex: this.element.selectionStart,
                  endIndex: this.element.selectionEnd
                });
              }
            }
          } else {
            if (key.length === 1 && !isCtrlKey && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(event)) {
              addMaskErrorClass.call(this);
            }
          }
        }
      }

      function applySupportedValues(event, startIndex, keyValue, eventOldVal, isEqualVal) {
        if (this.hiddenMask.length > this.promptMask.length) {
          keyValue = changeToLowerUpperCase.call(this, keyValue, this.element.value);
        }

        if (!isEqualVal) {
          var value = this.element.value;
          var elementValue = value.substring(0, startIndex) + keyValue + value.substring(startIndex + 1, value.length);
          setElementValue.call(this, elementValue);
          this.element.selectionStart = this.element.selectionEnd = startIndex + 1;
        }
      }

      function preventUnsupportedValues(event, sIdx, idx, key, ctrl, chkSupport) {
        if (!this.maskKeyPress) {
          var eventOldVal;
          var value = this.element.value;

          if (sIdx >= this.promptMask.length) {
            setElementValue.call(this, value.substring(0, sIdx));
          } else {
            if (idx === sIdx) {
              setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx + 1, value.length));
            } else {
              if (this.promptMask.length === this.element.value.length) {
                setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx, value.length));
              } else {
                setElementValue.call(this, value.substring(0, idx) + value.substring(idx + 1, value.length));
              }
            }

            this.element.selectionStart = this.element.selectionEnd = chkSupport || this.element.value[idx] !== this.promptChar ? sIdx : idx;
          }

          eventOldVal = this.element.value;
          addMaskErrorClass.call(this);
        }

        if (key.length === 1 && !ctrl && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(event)) {
          addMaskErrorClass.call(this);
        }
      }

      function addMaskErrorClass() {
        var _this238 = this;

        var parentElement = this.element.parentNode;
        var timer = 200;

        if (parentElement.classList.contains(INPUTGROUP) || parentElement.classList.contains(FLOATINPUT)) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([parentElement], ERROR$1);
        } else {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], ERROR$1);
        }

        if (this.isIosInvalid === true) {
          timer = 400;
        }

        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
          'aria-invalid': 'true'
        });
        setTimeout(function () {
          if (!_this238.maskKeyPress) {
            removeMaskError.call(_this238);
          }
        }, timer);
      }

      function removeMaskError() {
        var parentElement = this.element.parentNode;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parentElement)) {
          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([parentElement], ERROR$1);
        }

        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], ERROR$1);
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
          'aria-invalid': 'false'
        });
      }
      /**
       * @hidden
       * Validates user input using masking elements '<' , '>' and '|'.
       */


      function changeToLowerUpperCase(key, value) {
        var promptMask;
        var i;
        var curVal = value;
        var caseCount = 0;

        for (i = 0; i < this.hiddenMask.length; i++) {
          if (this.hiddenMask[i] === '\\') {
            promptMask = curVal.substring(0, i) + '\\' + curVal.substring(i, curVal.length);
          }

          if (this.hiddenMask[i] === '>' || this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|') {
            if (this.hiddenMask[i] !== curVal[i]) {
              promptMask = curVal.substring(0, i) + this.hiddenMask[i] + curVal.substring(i, curVal.length);
            }

            ++caseCount;
          }

          if (promptMask) {
            if (promptMask[i] === this.promptChar && i > this.element.selectionStart || this.element.value.indexOf(this.promptChar) < 0 && this.element.selectionStart + caseCount === i) {
              caseCount = 0;
              break;
            }

            curVal = promptMask;
          }
        }

        while (i >= 0 && promptMask) {
          if (i === 0 || promptMask[i - 1] !== '\\') {
            var val = this.element.value;

            if (promptMask[i] === '>') {
              key = key.toUpperCase();
              break;
            } else if (promptMask[i] === '<') {
              key = key.toLowerCase();
              break;
            } else if (promptMask[i] === '|') {
              break;
            }
          }

          --i;
        }

        return key;
      }
      /**
       * @hidden
       * To set updated values in the MaskedTextBox.
       */


      function setMaskValue(val) {
        if (this.mask && val !== undefined && (this.prevValue === undefined || this.prevValue !== val)) {
          this.maskKeyPress = true;
          setElementValue.call(this, this.promptMask);

          if (val !== '' && !(val === null && this.floatLabelType === 'Never' && this.placeholder)) {
            this.element.selectionStart = 0;
            this.element.selectionEnd = 0;
          }

          if (val !== null) {
            for (var i = 0; i < val.length; i++) {
              validateValue.call(this, val[i], false, null);
            }
          }

          var newVal = strippedValue.call(this, this.element);
          this.prevValue = newVal;
          this.value = newVal;
          triggerMaskChangeEvent.call(this, null, null);
          this.maskKeyPress = false;
          var labelElement = this.element.parentNode.querySelector('.e-float-text');

          if (this.element.value === this.promptMask && this.floatLabelType === 'Auto' && this.placeholder && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(labelElement) && labelElement.classList.contains(TOPLABEL) && !this.isFocus) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([labelElement], TOPLABEL);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([labelElement], BOTTOMLABEL);
            setElementValue.call(this, '');
          }
        }

        if (this.mask === null || this.mask === '' && this.value !== undefined) {
          setElementValue.call(this, this.value);
        }
      }
      /**
       * @hidden
       * To set updated values in the input element.
       */


      function setElementValue(val, element) {
        if (!this.isFocus && this.floatLabelType === 'Auto' && this.placeholder && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
          val = '';
        }

        var value = strippedValue.call(this, element ? element : this.element, val);

        if (value === null || value === '') {
          Input.setValue(val, element ? element : this.element, this.floatLabelType, false);

          if (this.showClearButton) {
            this.inputObj.clearButton.classList.add('e-clear-icon-hide');
          }
        } else {
          Input.setValue(val, element ? element : this.element, this.floatLabelType, this.showClearButton);
        }
      }
      /**
       * @hidden
       * Provide mask support to input textbox through utility method.
       */


      function maskInput(args) {
        var inputEle = getMaskInput(args);
        applyMask.call(inputEle);
        var val = strippedValue.call(this, this.element);
        this.prevValue = val;
        this.value = val;

        if (args.mask) {
          unwireEvents.call(inputEle);
          wireEvents.call(inputEle);
        }
      }

      function getMaskInput(args) {
        Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([args.element], UTILMASK);
        var inputEle = {
          element: args.element,
          mask: args.mask,
          promptMask: '',
          hiddenMask: '',
          escapeMaskValue: '',
          promptChar: args.promptChar ? args.promptChar.length > 1 ? args.promptChar = args.promptChar[0] : args.promptChar : '_',
          value: args.value ? args.value : null,
          regExpCollec: regularExpressions,
          customRegExpCollec: [],
          customCharacters: args.customCharacters,
          undoCollec: [],
          redoCollec: [],
          maskKeyPress: false,
          prevValue: ''
        };
        createMask.call(inputEle);
        return inputEle;
      }
      /**
       * @hidden
       * Gets raw value of the textbox which has been masked through utility method.
       */


      function getVal(args) {
        return strippedValue.call(getUtilMaskEle(args), args.element);
      }
      /**
       * @hidden
       * Gets masked value of the textbox which has been masked through utility method.
       */


      function getMaskedVal(args) {
        return unstrippedValue.call(getUtilMaskEle(args), args.element);
      }

      function getUtilMaskEle(args) {
        var inputEle;

        if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args) && args.element.classList.contains(UTILMASK)) {
          inputEle = getMaskInput(args);
        }

        return inputEle;
      }
      /**
       * @hidden
       * Arguments to perform undo and redo functionalities.
       */


      var MaskUndo = function MaskUndo() {
        _classCallCheck2(this, MaskUndo);
      };
      /**
       * MaskedTextbox base modules
       */


      var __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var ROOT$1 = 'e-control-wrapper e-mask';
      var INPUT = 'e-input';
      var COMPONENT$1 = 'e-maskedtextbox';
      var CONTROL$1 = 'e-control';
      var MASKINPUT_FOCUS = 'e-input-focus';
      var wrapperAttr = ['title', 'style', 'class'];
      /**
       * The MaskedTextBox allows the user to enter the valid input only based on the provided mask.
       * ```html
       * <input id="mask" type="text" />
       * ```
       * ```typescript
       * <script>
       * var maskObj = new MaskedTextBox({ mask: "(999) 9999-999" });
       * maskObj.appendTo('#mask');
       * </script>
       * ```
       */

      var MaskedTextBox = /*#__PURE__*/function (_syncfusion_ej2_base_50) {
        _inherits2(MaskedTextBox, _syncfusion_ej2_base_50);

        var _super75 = _createSuper(MaskedTextBox);

        function MaskedTextBox(options, element) {
          var _this239;

          _classCallCheck2(this, MaskedTextBox);

          _this239 = _super75.call(this, options, element);
          _this239.initInputValue = '';
          _this239.maskOptions = options;
          return _this239;
        }
        /**
         * Gets the component name
         * @private
         */


        _createClass2(MaskedTextBox, [{
          key: "getModuleName",
          value: function getModuleName() {
            return 'maskedtextbox';
          }
          /**
           * Initializes the event handler
           * @private
           */

        }, {
          key: "preRender",
          value: function preRender() {
            this.promptMask = '';
            this.hiddenMask = '';
            this.escapeMaskValue = '';
            this.regExpCollec = regularExpressions;
            this.customRegExpCollec = [];
            this.undoCollec = [];
            this.redoCollec = [];
            this.changeEventArgs = {};
            this.focusEventArgs = {};
            this.blurEventArgs = {};
            this.maskKeyPress = false;
            this.isFocus = false;
            this.isInitial = false;
            this.isIosInvalid = false;
            var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', this.element);
            this.cloneElement = this.element.cloneNode(true);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.cloneElement], [CONTROL$1, COMPONENT$1, 'e-lib']);
            this.angularTagName = null;
            this.formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

            if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {
              this.angularTagName = this.element.tagName;
              var input = this.createElement('input');

              for (var i = 0; i < this.element.attributes.length; i++) {
                input.setAttribute(this.element.attributes[i].nodeName, this.element.attributes[i].nodeValue);
                input.innerHTML = this.element.innerHTML;
              }

              if (this.element.hasAttribute('id')) {
                this.element.removeAttribute('id');
              }

              this.element.classList.remove('e-control', 'e-maskedtextbox');
              this.element.classList.add('e-mask-container');
              this.element.appendChild(input);
              this.element = input;
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInstance, this.element);
            }

            this.updateHTMLAttrToElement();
            this.checkHtmlAttributes(false);

            if (this.formElement) {
              this.initInputValue = this.value;
            }
          }
          /**
           * Gets the properties to be maintained in the persisted state.
           * @return {string}
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            var keyEntity = ['value'];
            return this.addOnPersist(keyEntity);
          }
          /**
           * Initializes the component rendering.
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            if (this.element.tagName.toLowerCase() === 'input') {
              if (this.floatLabelType === 'Never') {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], INPUT);
              }

              this.createWrapper();
              this.updateHTMLAttrToWrapper();

              if (this.element.name === '') {
                this.element.setAttribute('name', this.element.id);
              }

              this.isInitial = true;
              this.resetMaskedTextBox();
              this.isInitial = false;
              this.setMaskPlaceholder(true, false);
              this.setWidth(this.width);
              this.preEleVal = this.element.value;

              if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.version === '11.0' || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name === 'edge')) {
                this.element.blur();
              }

              if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isIos) {
                this.element.blur();
              }

              if (this.element.getAttribute('value') || this.value) {
                this.element.setAttribute('value', this.element.value);
              }

              this.renderComplete();
            }
          }
        }, {
          key: "updateHTMLAttrToElement",
          value: function updateHTMLAttrToElement() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
              for (var _i117 = 0, _Object$keys48 = Object.keys(this.htmlAttributes); _i117 < _Object$keys48.length; _i117++) {
                var key = _Object$keys48[_i117];

                if (wrapperAttr.indexOf(key) < 0) {
                  this.element.setAttribute(key, this.htmlAttributes[key]);
                }
              }
            }
          }
        }, {
          key: "updateCssClass",
          value: function updateCssClass(newClass, oldClass) {
            Input.setCssClass(this.getValidClassList(newClass), [this.inputObj.container], this.getValidClassList(oldClass));
          }
        }, {
          key: "getValidClassList",
          value: function getValidClassList(maskClassName) {
            var result = maskClassName;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(maskClassName) && maskClassName !== '') {
              result = maskClassName.replace(/\s+/g, ' ').trim();
            }

            return result;
          }
        }, {
          key: "updateHTMLAttrToWrapper",
          value: function updateHTMLAttrToWrapper() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
              for (var _i118 = 0, _Object$keys49 = Object.keys(this.htmlAttributes); _i118 < _Object$keys49.length; _i118++) {
                var key = _Object$keys49[_i118];

                if (wrapperAttr.indexOf(key) > -1) {
                  if (key === 'class') {
                    var updatedClassValues = this.htmlAttributes[key].replace(/\s+/g, ' ').trim();

                    if (updatedClassValues !== '') {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputObj.container], updatedClassValues.split(' '));
                    }
                  } else if (key === 'style') {
                    var maskStyle = this.inputObj.container.getAttribute(key);
                    maskStyle = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(maskStyle) ? maskStyle + this.htmlAttributes[key] : this.htmlAttributes[key];
                    this.inputObj.container.setAttribute(key, maskStyle);
                  } else {
                    this.inputObj.container.setAttribute(key, this.htmlAttributes[key]);
                  }
                }
              }
            }
          }
        }, {
          key: "resetMaskedTextBox",
          value: function resetMaskedTextBox() {
            this.promptMask = '';
            this.hiddenMask = '';
            this.escapeMaskValue = '';
            this.customRegExpCollec = [];
            this.undoCollec = [];
            this.redoCollec = [];

            if (this.promptChar.length > 1) {
              this.promptChar = this.promptChar[0];
            }

            createMask.call(this);
            applyMask.call(this);

            if (this.mask === null || this.mask === '' && this.value !== undefined) {
              setElementValue.call(this, this.value);
            }

            var val = strippedValue.call(this, this.element);
            this.prevValue = val;
            this.value = val;

            if (!this.isInitial) {
              unwireEvents.call(this);
            }

            wireEvents.call(this);
          }
        }, {
          key: "setMaskPlaceholder",
          value: function setMaskPlaceholder(setVal, dynamicPlaceholder) {
            if (dynamicPlaceholder || this.placeholder) {
              Input.setPlaceholder(this.placeholder, this.element);

              if (this.element.value === this.promptMask && setVal && this.floatLabelType !== 'Always') {
                setElementValue.call(this, '');
              }

              if (this.floatLabelType === 'Never') {
                maskInputBlurHandler.call(this);
              }
            }
          }
        }, {
          key: "setWidth",
          value: function setWidth(width) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(width)) {
              if (typeof width === 'number') {
                this.inputObj.container.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
                this.element.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
              } else if (typeof width === 'string') {
                var elementWidth = width.match(/px|%|em/) ? width : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
                this.inputObj.container.style.width = elementWidth;
                this.element.style.width = elementWidth;
              }
            }
          }
        }, {
          key: "checkHtmlAttributes",
          value: function checkHtmlAttributes(isDynamic) {
            var attributes$$1 = isDynamic ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['placeholder', 'disabled', 'value', 'readonly'];

            var _iterator86 = _createForOfIteratorHelper(attributes$$1),
                _step86;

            try {
              for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {
                var key = _step86.value;

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute(key))) {
                  switch (key) {
                    case 'placeholder':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.maskOptions) || this.maskOptions['placeholder'] === undefined || isDynamic) {
                        this.setProperties({
                          placeholder: this.element.placeholder
                        }, !isDynamic);
                      }

                      break;

                    case 'disabled':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.maskOptions) || this.maskOptions['enabled'] === undefined || isDynamic) {
                        var enabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? false : true;
                        this.setProperties({
                          enabled: enabled
                        }, !isDynamic);
                      }

                      break;

                    case 'value':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.maskOptions) || this.maskOptions['value'] === undefined || isDynamic) {
                        this.setProperties({
                          value: this.element.value
                        }, !isDynamic);
                      }

                      break;

                    case 'readonly':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.maskOptions) || this.maskOptions['readonly'] === undefined || isDynamic) {
                        var readonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? true : false;
                        this.setProperties({
                          readonly: readonly
                        }, !isDynamic);
                      }

                      break;
                  }
                }
              }
            } catch (err) {
              _iterator86.e(err);
            } finally {
              _iterator86.f();
            }
          }
        }, {
          key: "createWrapper",
          value: function createWrapper() {
            var updatedCssClassValues = this.cssClass;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && this.cssClass !== '') {
              updatedCssClassValues = this.getValidClassList(this.cssClass);
            }

            this.inputObj = Input.createInput({
              element: this.element,
              floatLabelType: this.floatLabelType,
              properties: {
                enableRtl: this.enableRtl,
                cssClass: updatedCssClassValues,
                enabled: this.enabled,
                readonly: this.readonly,
                placeholder: this.placeholder,
                showClearButton: this.showClearButton
              }
            }, this.createElement);
            this.inputObj.container.setAttribute('class', ROOT$1 + ' ' + this.inputObj.container.getAttribute('class'));
          }
          /**
           * Calls internally if any of the property value is changed.
           * @hidden
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i119 = 0, _Object$keys50 = Object.keys(newProp); _i119 < _Object$keys50.length; _i119++) {
              var prop = _Object$keys50[_i119];

              switch (prop) {
                case 'value':
                  setMaskValue.call(this, this.value);

                  if (this.placeholder) {
                    this.setMaskPlaceholder(false, false);
                  }

                  break;

                case 'placeholder':
                  this.setMaskPlaceholder(true, true);
                  break;

                case 'width':
                  this.setWidth(newProp.width);
                  break;

                case 'cssClass':
                  this.updateCssClass(newProp.cssClass, oldProp.cssClass);
                  break;

                case 'enabled':
                  Input.setEnabled(newProp.enabled, this.element, this.floatLabelType, this.inputObj.container);
                  break;

                case 'readonly':
                  Input.setReadonly(newProp.readonly, this.element);
                  break;

                case 'enableRtl':
                  Input.setEnableRtl(newProp.enableRtl, [this.inputObj.container]);
                  break;

                case 'customCharacters':
                  this.customCharacters = newProp.customCharacters;
                  this.resetMaskedTextBox();
                  break;

                case 'showClearButton':
                  Input.setClearButton(newProp.showClearButton, this.element, this.inputObj, undefined, this.createElement);
                  bindClearEvent.call(this);
                  break;

                case 'floatLabelType':
                  this.floatLabelType = newProp.floatLabelType;
                  Input.removeFloating(this.inputObj);
                  Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);
                  break;

                case 'htmlAttributes':
                  this.updateHTMLAttrToElement();
                  this.updateHTMLAttrToWrapper();
                  this.checkHtmlAttributes(true);
                  break;

                case 'mask':
                  var strippedValue$$1 = this.value;
                  this.mask = newProp.mask;
                  this.updateValue(strippedValue$$1);
                  break;

                case 'promptChar':
                  if (newProp.promptChar.length > 1) {
                    newProp.promptChar = newProp.promptChar[0];
                  }

                  if (newProp.promptChar) {
                    this.promptChar = newProp.promptChar;
                  } else {
                    this.promptChar = '_';
                  }

                  var value = this.element.value.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);

                  if (this.promptMask === this.element.value) {
                    value = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);
                  }

                  this.promptMask = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);
                  this.undoCollec = this.redoCollec = [];
                  setElementValue.call(this, value);
                  break;
              }
            }
          }
        }, {
          key: "updateValue",
          value: function updateValue(strippedVal) {
            this.resetMaskedTextBox();
            setMaskValue.call(this, strippedVal);
          }
          /**
           * Gets the value of the MaskedTextBox with the masked format.
           * By using `value` property, you can get the raw value of maskedtextbox without literals and prompt characters.
           * @return {string}
           */

        }, {
          key: "getMaskedValue",
          value: function getMaskedValue() {
            return unstrippedValue.call(this, this.element);
          }
          /**
           * Sets the focus to widget for interaction.
           * @returns void
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            if (document.activeElement !== this.element && this.enabled) {
              this.element.focus();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.inputObj.container], [MASKINPUT_FOCUS]);
            }
          }
          /**
           * Remove the focus from widget, if the widget is in focus state.
           * @returns void
           */

        }, {
          key: "focusOut",
          value: function focusOut() {
            if (document.activeElement === this.element && this.enabled) {
              this.element.blur();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.inputObj.container], [MASKINPUT_FOCUS]);
            }
          }
          /**
           * Removes the component from the DOM and detaches all its related event handlers.
           * Also it maintains the initial input element from the DOM.
           * @method destroy
           * @return {void}
           */

        }, {
          key: "destroy",
          value: function destroy() {
            unwireEvents.call(this);
            var attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly', 'autocorrect', 'aria-disabled', 'aria-placeholder', 'autocapitalize', 'spellcheck', 'aria-autocomplete', 'aria-live', 'aria-valuenow', 'aria-invalid'];

            for (var i = 0; i < attrArray.length; i++) {
              this.element.removeAttribute(attrArray[i]);
            }

            this.element.classList.remove('e-input');
            this.inputObj.container.insertAdjacentElement('afterend', this.element);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.inputObj.container);

            _get2(_getPrototypeOf2(MaskedTextBox.prototype), "destroy", this).call(this);
          }
        }]);

        return MaskedTextBox;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MaskedTextBox.prototype, "cssClass", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MaskedTextBox.prototype, "width", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MaskedTextBox.prototype, "placeholder", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Never')], MaskedTextBox.prototype, "floatLabelType", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], MaskedTextBox.prototype, "htmlAttributes", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], MaskedTextBox.prototype, "enabled", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MaskedTextBox.prototype, "readonly", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MaskedTextBox.prototype, "showClearButton", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], MaskedTextBox.prototype, "enablePersistence", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MaskedTextBox.prototype, "mask", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('_')], MaskedTextBox.prototype, "promptChar", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MaskedTextBox.prototype, "value", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], MaskedTextBox.prototype, "customCharacters", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MaskedTextBox.prototype, "created", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MaskedTextBox.prototype, "destroyed", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MaskedTextBox.prototype, "change", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MaskedTextBox.prototype, "focus", void 0);

      __decorate$1([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], MaskedTextBox.prototype, "blur", void 0);

      MaskedTextBox = __decorate$1([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], MaskedTextBox);
      /**
       * MaskedTextbox modules
       */

      /**
       * MaskedTextbox modules
       */

      /**
       * Input box Component
       */

      var __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      /**
       * Configures the ticks data of the Slider.
       */


      var TicksData = /*#__PURE__*/function (_syncfusion_ej2_base_51) {
        _inherits2(TicksData, _syncfusion_ej2_base_51);

        var _super76 = _createSuper(TicksData);

        function TicksData() {
          _classCallCheck2(this, TicksData);

          return _super76.apply(this, arguments);
        }

        return TicksData;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('None')], TicksData.prototype, "placement", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(10)], TicksData.prototype, "largeStep", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1)], TicksData.prototype, "smallStep", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TicksData.prototype, "showSmallTicks", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TicksData.prototype, "format", void 0);
      /**
       * It illustrates the color track data in slider.
       * {% codeBlock src='slider/colorrange/index.md' %}{% endcodeBlock %}
       */


      var ColorRangeData = /*#__PURE__*/function (_syncfusion_ej2_base_52) {
        _inherits2(ColorRangeData, _syncfusion_ej2_base_52);

        var _super77 = _createSuper(ColorRangeData);

        function ColorRangeData() {
          _classCallCheck2(this, ColorRangeData);

          return _super77.apply(this, arguments);
        }

        return ColorRangeData;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ColorRangeData.prototype, "color", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ColorRangeData.prototype, "start", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ColorRangeData.prototype, "end", void 0);
      /**
       * It illustrates the limit data in slider.
       * {% codeBlock src='slider/limits/index.md' %}{% endcodeBlock %}
       */


      var LimitData = /*#__PURE__*/function (_syncfusion_ej2_base_53) {
        _inherits2(LimitData, _syncfusion_ej2_base_53);

        var _super78 = _createSuper(LimitData);

        function LimitData() {
          _classCallCheck2(this, LimitData);

          return _super78.apply(this, arguments);
        }

        return LimitData;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], LimitData.prototype, "enabled", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], LimitData.prototype, "minStart", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], LimitData.prototype, "minEnd", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], LimitData.prototype, "maxStart", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], LimitData.prototype, "maxEnd", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], LimitData.prototype, "startHandleFixed", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], LimitData.prototype, "endHandleFixed", void 0);
      /**
       * It illustrates the tooltip data in slider.
       */


      var TooltipData = /*#__PURE__*/function (_syncfusion_ej2_base_54) {
        _inherits2(TooltipData, _syncfusion_ej2_base_54);

        var _super79 = _createSuper(TooltipData);

        function TooltipData() {
          _classCallCheck2(this, TooltipData);

          return _super79.apply(this, arguments);
        }

        return TooltipData;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], TooltipData.prototype, "cssClass", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Before')], TooltipData.prototype, "placement", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Focus')], TooltipData.prototype, "showOn", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TooltipData.prototype, "isVisible", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TooltipData.prototype, "format", void 0);

      var bootstrapTooltipOffset = 6;
      var bootstrap4TooltipOffset = 3;
      var classNames = {
        root: 'e-slider',
        rtl: 'e-rtl',
        sliderHiddenInput: 'e-slider-input',
        controlWrapper: 'e-control-wrapper',
        sliderHandle: 'e-handle',
        rangeBar: 'e-range',
        sliderButton: 'e-slider-button',
        firstButton: 'e-first-button',
        secondButton: 'e-second-button',
        scale: 'e-scale',
        tick: 'e-tick',
        large: 'e-large',
        tickValue: 'e-tick-value',
        sliderTooltip: 'e-slider-tooltip',
        sliderHover: 'e-slider-hover',
        sliderFirstHandle: 'e-handle-first',
        sliderSecondHandle: 'e-handle-second',
        sliderDisabled: 'e-disabled',
        sliderContainer: 'e-slider-container',
        horizontalTooltipBefore: 'e-slider-horizontal-before',
        horizontalTooltipAfter: 'e-slider-horizontal-after',
        verticalTooltipBefore: 'e-slider-vertical-before',
        verticalTooltipAfter: 'e-slider-vertical-after',
        materialTooltip: 'e-material-tooltip',
        materialTooltipOpen: 'e-material-tooltip-open',
        materialTooltipActive: 'e-tooltip-active',
        materialSlider: 'e-material-slider',
        sliderTrack: 'e-slider-track',
        sliderHorizantalColor: 'e-slider-horizantal-color',
        sliderVerticalColor: 'e-slider-vertical-color',
        sliderHandleFocused: 'e-handle-focused',
        verticalSlider: 'e-vertical',
        horizontalSlider: 'e-horizontal',
        sliderHandleStart: 'e-handle-start',
        sliderTooltipStart: 'e-material-tooltip-start',
        sliderTabHandle: 'e-tab-handle',
        sliderButtonIcon: 'e-button-icon',
        sliderSmallSize: 'e-small-size',
        sliderTickPosition: 'e-tick-pos',
        sliderFirstTick: 'e-first-tick',
        sliderLastTick: 'e-last-tick',
        sliderButtonClass: 'e-slider-btn',
        sliderTooltipWrapper: 'e-tooltip-wrap',
        sliderTabTrack: 'e-tab-track',
        sliderTabRange: 'e-tab-range',
        sliderActiveHandle: 'e-handle-active',
        sliderMaterialHandle: 'e-material-handle',
        sliderMaterialRange: 'e-material-range',
        sliderMaterialDefault: 'e-material-default',
        materialTooltipShow: 'e-material-tooltip-show',
        materialTooltipHide: 'e-material-tooltip-hide',
        readonly: 'e-read-only',
        limits: 'e-limits',
        limitBarDefault: 'e-limit-bar',
        limitBarFirst: 'e-limit-first',
        limitBarSecond: 'e-limit-second',
        dragHorizontal: 'e-drag-horizontal',
        dragVertical: 'e-drag-vertical'
      };
      /**
       * The Slider component allows the user to select a value or range
       * of values in-between a min and max range, by dragging the handle over the slider bar.
       * ```html
       * <div id='slider'></div>
       * ```
       * ```typescript
       * <script>
       *   var sliderObj = new Slider({ value: 10 });
       *   sliderObj.appendTo('#slider');
       * </script>
       * ```
       */

      var Slider = /*#__PURE__*/function (_syncfusion_ej2_base_55) {
        _inherits2(Slider, _syncfusion_ej2_base_55);

        var _super80 = _createSuper(Slider);

        function Slider(options, element) {
          var _this240;

          _classCallCheck2(this, Slider);

          _this240 = _super80.call(this, options, element);
          _this240.horDir = 'left';
          _this240.verDir = 'bottom';
          _this240.transition = {
            handle: 'left .4s cubic-bezier(.25, .8, .25, 1), right .4s cubic-bezier(.25, .8, .25, 1), ' + 'top .4s cubic-bezier(.25, .8, .25, 1) , bottom .4s cubic-bezier(.25, .8, .25, 1)',
            rangeBar: 'all .4s cubic-bezier(.25, .8, .25, 1)'
          };
          _this240.transitionOnMaterialTooltip = {
            handle: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, top 1ms ease-out',
            rangeBar: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, width 1ms ease-out, height 1ms ease-out'
          };
          _this240.scaleTransform = 'transform .4s cubic-bezier(.25, .8, .25, 1)';
          _this240.customAriaText = null;
          _this240.drag = true;
          return _this240;
        }

        _createClass2(Slider, [{
          key: "preRender",
          value: function preRender() {
            var localeText = {
              incrementTitle: 'Increase',
              decrementTitle: 'Decrease'
            };
            this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('slider', localeText, this.locale);
            this.isElementFocused = false;
            this.tickElementCollection = [];
            this.tooltipFormatInfo = {};
            this.ticksFormatInfo = {};
            this.initCultureInfo();
            this.initCultureFunc();
            this.formChecker();
          }
        }, {
          key: "formChecker",
          value: function formChecker() {
            var formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

            if (formElement) {
              this.isForm = true; // this condition needs to be checked, if the slider is going to be refreshed by `refresh()`
              // then we need to revert the slider `value` back to `formResetValue` to preserve the initial value

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.formResetValue)) {
                this.setProperties({
                  'value': this.formResetValue
                }, true);
              }

              this.formResetValue = this.value;

              if (this.type === 'Range' && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.formResetValue) || typeof this.formResetValue !== 'object')) {
                this.formResetValue = [parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min)), parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max))];
              } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.formResetValue)) {
                this.formResetValue = parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min));
              }

              this.formElement = formElement;
            } else {
              this.isForm = false;
            }
          }
        }, {
          key: "initCultureFunc",
          value: function initCultureFunc() {
            this.internationalization = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Internationalization"](this.locale);
          }
        }, {
          key: "initCultureInfo",
          value: function initCultureInfo() {
            this.tooltipFormatInfo.format = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip.format) ? this.tooltip.format : null;
            this.ticksFormatInfo.format = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks.format) ? this.ticks.format : null;
          }
        }, {
          key: "formatString",
          value: function formatString(value, formatInfo) {
            var formatValue = null;
            var formatString = null;

            if (value || value === 0) {
              formatValue = this.formatNumber(value);
              var numberOfDecimals = this.numberOfDecimals(value);
              formatString = this.internationalization.getNumberFormat(formatInfo)(this.makeRoundNumber(value, numberOfDecimals));
            }

            return {
              elementVal: formatValue,
              formatString: formatString
            };
          }
        }, {
          key: "formatNumber",
          value: function formatNumber(value) {
            var numberOfDecimals = this.numberOfDecimals(value);
            return this.internationalization.getNumberFormat({
              maximumFractionDigits: numberOfDecimals,
              minimumFractionDigits: numberOfDecimals,
              useGrouping: false
            })(value);
          }
        }, {
          key: "numberOfDecimals",
          value: function numberOfDecimals(value) {
            var decimalPart = value.toString().split('.')[1];
            var numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;
            return numberOfDecimals;
          }
        }, {
          key: "makeRoundNumber",
          value: function makeRoundNumber(value, precision) {
            var decimals = precision || 0;
            return Number(value.toFixed(decimals));
          }
        }, {
          key: "fractionalToInteger",
          value: function fractionalToInteger(value) {
            value = this.numberOfDecimals(value) === 0 ? Number(value).toFixed(this.noOfDecimals) : value;
            var tens = 1;

            for (var i = 0; i < this.noOfDecimals; i++) {
              tens *= 10;
            }

            value = Number((value * tens).toFixed(0));
            return value;
          }
          /**
           * To Initialize the control rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
              this.initialize();
            }

            this.initRender();
            this.wireEvents();
            this.setZindex();
            this.renderComplete();
          }
        }, {
          key: "initialize",
          value: function initialize() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], classNames.root);
            this.setCSSClass();
          }
        }, {
          key: "setElementWidth",
          value: function setElementWidth(width) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(width)) {
              if (typeof width === 'number') {
                this.sliderContainer.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
              } else if (typeof width === 'string') {
                this.sliderContainer.style.width = width.match(/px|%|em/) ? width : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(width);
              }
            }
          }
        }, {
          key: "setCSSClass",
          value: function setCSSClass(oldCSSClass) {
            if (oldCSSClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.element], oldCSSClass.split(' '));
            }

            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.element], this.cssClass.split(' '));
            }
          }
        }, {
          key: "setEnabled",
          value: function setEnabled() {
            if (!this.enabled) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.sliderContainer], [classNames.sliderDisabled]);

              if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {
                this.tooltipElement.classList.add(classNames.sliderDisabled);
              }

              this.unwireEvents();
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.sliderContainer], [classNames.sliderDisabled]);

              if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {
                this.tooltipElement.classList.remove(classNames.sliderDisabled);
              }

              this.wireEvents();
            }
          }
        }, {
          key: "getTheme",
          value: function getTheme(container) {
            var theme = window.getComputedStyle(container, ':after').getPropertyValue('content');
            return theme.replace(/['"]+/g, '');
          }
          /**
           * Initialize the rendering
           * @private
           */

        }, {
          key: "initRender",
          value: function initRender() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              this.sliderContainer = this.element.parentElement;
              this.sliderTrack = this.element.querySelector('.e-slider-track');
              this.hiddenInput = this.element.parentElement.querySelector('.e-slider-input');
            } else {
              this.sliderContainer = this.createElement('div', {
                className: classNames.sliderContainer + ' ' + classNames.controlWrapper
              });
              this.element.parentNode.insertBefore(this.sliderContainer, this.element);
              this.sliderContainer.appendChild(this.element);
              this.sliderTrack = this.createElement('div', {
                className: classNames.sliderTrack
              });
              this.element.appendChild(this.sliderTrack);
            }

            this.setElementWidth(this.width);
            this.element.tabIndex = -1;
            this.getThemeInitialization();
            this.setHandler();
            this.createRangeBar();

            if (this.limits.enabled) {
              this.createLimitBar();
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
              this.setOrientClass();
              this.hiddenInput = this.createElement('input', {
                attrs: {
                  type: 'hidden',
                  value: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) ? this.min.toString() : this.value.toString(),
                  name: this.element.getAttribute('name') || this.element.getAttribute('id') || '_' + (Math.random() * 1000).toFixed(0) + 'slider',
                  "class": classNames.sliderHiddenInput
                }
              });
              this.hiddenInput.tabIndex = -1;
              this.sliderContainer.appendChild(this.hiddenInput);
            }

            if (this.showButtons) {
              this.setButtons();
            }

            this.setEnableRTL();

            if (this.type === 'Range') {
              this.rangeValueUpdate();
            } else {
              this.value = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) ? parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min.toString())) : this.value;
            }

            this.previousVal = this.type !== 'Range' ? this.checkHandleValue(parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.value.toString()))) : [this.checkHandleValue(parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.value[0].toString()))), this.checkHandleValue(parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.value[1].toString())))];
            this.previousChanged = this.previousVal;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.hasAttribute('name'))) {
              this.element.removeAttribute('name');
            }

            this.setValue();

            if (this.limits.enabled) {
              this.setLimitBar();
            }

            if (this.ticks.placement !== 'None') {
              this.renderScale();
            }

            if (this.tooltip.isVisible) {
              this.renderTooltip();
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
              if (!this.enabled) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.sliderContainer], [classNames.sliderDisabled]);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.sliderContainer], [classNames.sliderDisabled]);
              }

              if (this.readonly) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.sliderContainer], [classNames.readonly]);
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.sliderContainer], [classNames.readonly]);
              }
            }
          }
        }, {
          key: "getThemeInitialization",
          value: function getThemeInitialization() {
            this.isMaterial = this.getTheme(this.sliderContainer) === 'material' || this.getTheme(this.sliderContainer) === 'material-dark';
            this.isBootstrap = this.getTheme(this.sliderContainer) === 'bootstrap' || this.getTheme(this.sliderContainer) === 'bootstrap-dark';
            this.isBootstrap4 = this.getTheme(this.sliderContainer) === 'bootstrap4';
            this.isMaterialTooltip = this.isMaterial && this.type !== 'Range' && this.tooltip.isVisible;
          }
        }, {
          key: "createRangeBar",
          value: function createRangeBar() {
            if (this.type !== 'Default') {
              this.rangeBar = this.createElement('div', {
                attrs: {
                  "class": classNames.rangeBar
                }
              });
              this.element.appendChild(this.rangeBar);

              if (this.drag && this.type === 'Range') {
                if (this.orientation === 'Horizontal') {
                  this.rangeBar.classList.add(classNames.dragHorizontal);
                } else {
                  this.rangeBar.classList.add(classNames.dragVertical);
                }
              }
            }
          }
        }, {
          key: "createLimitBar",
          value: function createLimitBar() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              this.limitBarFirst = this.element.querySelectorAll('.e-limits')[0];

              if (this.type === 'Range') {
                this.limitBarSecond = this.element.querySelectorAll('.e-limit-second')[0];
              }
            } else {
              var firstElementClassName = this.type !== 'Range' ? classNames.limitBarDefault : classNames.limitBarFirst;
              firstElementClassName += ' ' + classNames.limits;
              this.limitBarFirst = this.createElement('div', {
                attrs: {
                  "class": firstElementClassName
                }
              });
              this.element.appendChild(this.limitBarFirst);

              if (this.type === 'Range') {
                this.limitBarSecond = this.createElement('div', {
                  attrs: {
                    "class": classNames.limitBarSecond + ' ' + classNames.limits
                  }
                });
                this.element.appendChild(this.limitBarSecond);
              }
            }
          }
        }, {
          key: "setOrientClass",
          value: function setOrientClass() {
            if (this.orientation !== 'Vertical') {
              this.sliderContainer.classList.remove(classNames.verticalSlider);
              this.sliderContainer.classList.add(classNames.horizontalSlider);
              this.firstHandle.setAttribute('aria-orientation', 'horizontal');

              if (this.type === 'Range') {
                this.secondHandle.setAttribute('aria-orientation', 'horizontal');
              }
            } else {
              this.sliderContainer.classList.remove(classNames.horizontalSlider);
              this.sliderContainer.classList.add(classNames.verticalSlider);
              this.firstHandle.setAttribute('aria-orientation', 'vertical');

              if (this.type === 'Range') {
                this.secondHandle.setAttribute('aria-orientation', 'vertical');
              }
            }
          }
        }, {
          key: "setAriaAttributes",
          value: function setAriaAttributes(element) {
            var _this241 = this;

            var min = this.min;
            var max = this.max;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0) {
              min = this.customValues[0];
              max = this.customValues[this.customValues.length - 1];
            }

            if (this.type !== 'Range') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
                'aria-valuemin': min.toString(),
                'aria-valuemax': max.toString()
              });
            } else {
              var range = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0 ? [[min.toString(), this.customValues[this.value[1]].toString()], [this.customValues[this.value[0]].toString(), max.toString()]] : [[min.toString(), this.value[1].toString()], [this.value[0].toString(), max.toString()]];
              range.forEach(function (range, index) {
                var element = index === 0 ? _this241.firstHandle : _this241.secondHandle;

                if (element) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
                    'aria-valuemin': range[0],
                    'aria-valuemax': range[1]
                  });
                }
              });
            }
          }
        }, {
          key: "createSecondHandle",
          value: function createSecondHandle() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              this.secondHandle = this.element.querySelector('.e-handle-second');
            } else {
              this.secondHandle = this.createElement('div', {
                attrs: {
                  "class": classNames.sliderHandle,
                  'role': 'slider',
                  tabIndex: '0'
                }
              });
              this.secondHandle.classList.add(classNames.sliderSecondHandle);
              this.element.appendChild(this.secondHandle);
            }
          }
        }, {
          key: "createFirstHandle",
          value: function createFirstHandle() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              this.firstHandle = this.element.querySelector('.e-handle-first');
            } else {
              this.firstHandle = this.createElement('div', {
                attrs: {
                  "class": classNames.sliderHandle,
                  'role': 'slider',
                  tabIndex: '0'
                }
              });
              this.firstHandle.classList.add(classNames.sliderFirstHandle);
              this.element.appendChild(this.firstHandle);
            }

            if (this.isMaterialTooltip) {
              this.materialHandle = this.createElement('div', {
                attrs: {
                  "class": classNames.sliderHandle + ' ' + classNames.sliderMaterialHandle
                }
              });
              this.element.appendChild(this.materialHandle);
            }
          }
        }, {
          key: "wireFirstHandleEvt",
          value: function wireFirstHandleEvt(destroy) {
            if (!destroy) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstHandle, 'mousedown touchstart', this.handleFocus, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstHandle, 'transitionend', this.transitionEnd, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstHandle, 'mouseenter touchenter', this.handleOver, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstHandle, 'mouseleave touchend', this.handleLeave, this);
            } else {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstHandle, 'mousedown touchstart', this.handleFocus);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstHandle, 'transitionend', this.transitionEnd);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstHandle, 'mouseenter touchenter', this.handleOver);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstHandle, 'mouseleave touchend', this.handleLeave);
            }
          }
        }, {
          key: "wireSecondHandleEvt",
          value: function wireSecondHandleEvt(destroy) {
            if (!destroy) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondHandle, 'mousedown touchstart', this.handleFocus, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondHandle, 'transitionend', this.transitionEnd, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondHandle, 'mouseenter touchenter', this.handleOver, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondHandle, 'mouseleave touchend', this.handleLeave, this);
            } else {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondHandle, 'mousedown touchstart', this.handleFocus);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondHandle, 'transitionend', this.transitionEnd);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondHandle, 'mouseenter touchenter', this.handleOver);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondHandle, 'mouseleave touchend', this.handleLeave);
            }
          }
        }, {
          key: "handleStart",
          value: function handleStart() {
            if (this.type !== 'Range') {
              this.firstHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);

              if (this.isMaterialTooltip) {
                this.materialHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);

                if (this.tooltipElement) {
                  this.tooltipElement.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderTooltipStart);
                }
              }
            }
          }
        }, {
          key: "transitionEnd",
          value: function transitionEnd(e) {
            if (e.propertyName !== 'transform') {
              this.handleStart();
              this.getHandle().style.transition = 'none';

              if (this.type !== 'Default') {
                this.rangeBar.style.transition = 'none';
              }

              if (this.isMaterial && this.tooltip.isVisible && this.type === 'Default') {
                this.tooltipElement.style.transition = this.transition.handle;
              }

              this.tooltipToggle(this.getHandle());
              this.closeTooltip();
            }
          }
        }, {
          key: "handleFocusOut",
          value: function handleFocusOut() {
            if (this.firstHandle.classList.contains(classNames.sliderHandleFocused)) {
              this.firstHandle.classList.remove(classNames.sliderHandleFocused);
            }

            if (this.type === 'Range') {
              if (this.secondHandle.classList.contains(classNames.sliderHandleFocused)) {
                this.secondHandle.classList.remove(classNames.sliderHandleFocused);
              }
            }
          }
        }, {
          key: "handleFocus",
          value: function handleFocus(e) {
            this.focusSliderElement();
            this.sliderBarClick(e);

            if (e.currentTarget === this.firstHandle) {
              this.firstHandle.classList.add(classNames.sliderHandleFocused);
            } else {
              this.secondHandle.classList.add(classNames.sliderHandleFocused);
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousemove touchmove', this.sliderBarMove, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mouseup touchend', this.sliderBarUp, this);
          }
        }, {
          key: "handleOver",
          value: function handleOver(e) {
            if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover') {
              this.tooltipToggle(e.currentTarget);
            }
          }
        }, {
          key: "handleLeave",
          value: function handleLeave(e) {
            if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover' && !e.currentTarget.classList.contains(classNames.sliderHandleFocused) && !e.currentTarget.classList.contains(classNames.sliderTabHandle)) {
              this.closeTooltip();
            }
          }
        }, {
          key: "setHandler",
          value: function setHandler() {
            if (this.min > this.max) {
              this.min = this.max;
            }

            this.createFirstHandle();

            if (this.type === 'Range') {
              this.createSecondHandle();
            }
          }
        }, {
          key: "setEnableRTL",
          value: function setEnableRTL() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
              this.enableRtl && this.orientation !== 'Vertical' ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.sliderContainer], classNames.rtl) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.sliderContainer], classNames.rtl);
              var preDir = this.orientation !== 'Vertical' ? this.horDir : this.verDir;

              if (this.enableRtl) {
                this.horDir = 'right';
                this.verDir = 'bottom';
              } else {
                this.horDir = 'left';
                this.verDir = 'bottom';
              }

              var currDir = this.orientation !== 'Vertical' ? this.horDir : this.verDir;

              if (preDir !== currDir) {
                if (this.orientation === 'Horizontal') {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.firstHandle, {
                    'right': '',
                    'left': 'auto'
                  });

                  if (this.type === 'Range') {
                    Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.secondHandle, {
                      'top': '',
                      'left': 'auto'
                    });
                  }
                }
              }
            }

            this.setBarColor();
          }
        }, {
          key: "tooltipValue",
          value: function tooltipValue() {
            var _this242 = this;

            var text;
            var args = {
              value: this.value,
              text: ''
            };

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              args.text = this.formatContent(this.tooltipFormatInfo, false);
            } else {
              this.setTooltipContent();
              args.text = text = this.tooltipObj.content;
            }

            this.trigger('tooltipChange', args, function (observedArgs) {
              _this242.addTooltipClass(observedArgs.text);

              if (text !== observedArgs.text) {
                _this242.customAriaText = observedArgs.text;
                _this242.tooltipObj.content = observedArgs.text;

                _this242.setAriaAttrValue(_this242.firstHandle);

                if (_this242.type === 'Range') {
                  _this242.setAriaAttrValue(_this242.secondHandle);
                }
              }
            });
          }
        }, {
          key: "setTooltipContent",
          value: function setTooltipContent() {
            var content;
            content = this.formatContent(this.tooltipFormatInfo, false);
            this.tooltipObj.content = content;
          }
        }, {
          key: "formatContent",
          value: function formatContent(formatInfo, ariaContent) {
            var content = '';
            var handle1 = this.handleVal1;
            var handle2 = this.handleVal2;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0) {
              handle1 = this.customValues[this.handleVal1];
              handle2 = this.customValues[this.handleVal2];
            }

            if (!ariaContent) {
              if (this.type === 'Range') {
                if (this.enableRtl && this.orientation !== 'Vertical') {
                  content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(formatInfo.format) ? this.formatString(handle2, formatInfo).formatString + ' - ' + this.formatString(handle1, formatInfo).formatString : handle2.toString() + ' - ' + handle1.toString();
                } else {
                  content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString + ' - ' + this.formatString(handle2, formatInfo).formatString : handle1.toString() + ' - ' + handle2.toString();
                }
              } else {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(handle1)) {
                  content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString : handle1.toString();
                }
              }

              return content;
            } else {
              if (this.type === 'Range') {
                if (this.enableRtl && this.orientation !== 'Vertical') {
                  content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip.format) ? this.formatString(handle2, formatInfo).elementVal + ' - ' + this.formatString(handle1, formatInfo).elementVal : handle2.toString() + ' - ' + handle1.toString();
                } else {
                  content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal + ' - ' + this.formatString(handle2, formatInfo).elementVal : handle1.toString() + ' - ' + handle2.toString();
                }
              } else {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(handle1)) {
                  content = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal : handle1.toString();
                }
              }

              return content;
            }
          }
        }, {
          key: "addTooltipClass",
          value: function addTooltipClass(content) {
            if (this.isMaterialTooltip) {
              var count = content.toString().length;

              if (!this.tooltipElement) {
                var cssClass = count > 4 ? classNames.sliderMaterialRange : classNames.sliderMaterialDefault;
                this.tooltipObj.cssClass = classNames.sliderTooltip + ' ' + cssClass;
              } else {
                var _cssClass = count > 4 ? {
                  oldCss: classNames.sliderMaterialDefault,
                  newCss: classNames.sliderMaterialRange
                } : {
                  oldCss: classNames.sliderMaterialRange,
                  newCss: classNames.sliderMaterialDefault
                };

                this.tooltipElement.classList.remove(_cssClass.oldCss);

                if (!this.tooltipElement.classList.contains(_cssClass.newCss)) {
                  this.tooltipElement.classList.add(_cssClass.newCss);
                  this.tooltipElement.style.transform = count > 4 ? 'scale(1)' : this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
                }
              }
            }
          }
        }, {
          key: "tooltipPlacement",
          value: function tooltipPlacement() {
            return this.orientation === 'Horizontal' ? this.tooltip.placement === 'Before' ? 'TopCenter' : 'BottomCenter' : this.tooltip.placement === 'Before' ? 'LeftCenter' : 'RightCenter';
          }
        }, {
          key: "tooltipBeforeOpen",
          value: function tooltipBeforeOpen(args) {
            this.tooltipElement = args.element;

            if (this.tooltip.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.tooltipElement], this.tooltip.cssClass.split(' ').filter(function (css) {
                return css;
              }));
            }

            args.target.removeAttribute('aria-describedby');

            if (this.isMaterialTooltip) {
              this.tooltipElement.firstElementChild.classList.add(classNames.materialTooltipHide);
              this.handleStart();
              this.setTooltipTransform();
            }
          }
        }, {
          key: "tooltipCollision",
          value: function tooltipCollision(position) {
            if (this.isBootstrap || this.isBootstrap4 || this.isMaterial && !this.isMaterialTooltip) {
              var tooltipOffsetValue = this.isBootstrap4 ? bootstrap4TooltipOffset : bootstrapTooltipOffset;

              switch (position) {
                case 'TopCenter':
                  this.tooltipObj.setProperties({
                    'offsetY': -tooltipOffsetValue
                  }, false);
                  break;

                case 'BottomCenter':
                  this.tooltipObj.setProperties({
                    'offsetY': tooltipOffsetValue
                  }, false);
                  break;

                case 'LeftCenter':
                  this.tooltipObj.setProperties({
                    'offsetX': -tooltipOffsetValue
                  }, false);
                  break;

                case 'RightCenter':
                  this.tooltipObj.setProperties({
                    'offsetX': tooltipOffsetValue
                  }, false);
                  break;
              }
            }
          }
        }, {
          key: "materialTooltipEventCallBack",
          value: function materialTooltipEventCallBack(event) {
            this.sliderBarClick(event);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousemove touchmove', this.sliderBarMove, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mouseup touchend', this.sliderBarUp, this);
          }
        }, {
          key: "wireMaterialTooltipEvent",
          value: function wireMaterialTooltipEvent(destroy) {
            if (this.isMaterialTooltip) {
              if (!destroy) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack, this);
              } else {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack);
              }
            }
          }
        }, {
          key: "tooltipPositionCalculation",
          value: function tooltipPositionCalculation(position) {
            var cssClass;

            switch (position) {
              case 'TopCenter':
                cssClass = classNames.horizontalTooltipBefore;
                break;

              case 'BottomCenter':
                cssClass = classNames.horizontalTooltipAfter;
                break;

              case 'LeftCenter':
                cssClass = classNames.verticalTooltipBefore;
                break;

              case 'RightCenter':
                cssClass = classNames.verticalTooltipAfter;
                break;
            }

            return cssClass;
          }
        }, {
          key: "getTooltipTransformProperties",
          value: function getTooltipTransformProperties(className) {
            var transformProperties;

            if (this.tooltipElement) {
              var position = this.orientation === 'Horizontal' ? this.tooltipElement.clientHeight + 14 - this.tooltipElement.clientHeight / 2 : this.tooltipElement.clientWidth + 14 - this.tooltipElement.clientWidth / 2;
              transformProperties = this.orientation === 'Horizontal' ? className === classNames.horizontalTooltipBefore ? {
                rotate: 'rotate(45deg)',
                translate: "translateY(".concat(position, "px)")
              } : {
                rotate: 'rotate(225deg)',
                translate: "translateY(".concat(-position, "px)")
              } : className === classNames.verticalTooltipBefore ? {
                rotate: 'rotate(-45deg)',
                translate: "translateX(".concat(position, "px)")
              } : {
                rotate: 'rotate(-225deg)',
                translate: "translateX(".concat(-position, "px)")
              };
            }

            return transformProperties;
          }
        }, {
          key: "openMaterialTooltip",
          value: function openMaterialTooltip() {
            var _this243 = this;

            if (this.isMaterialTooltip) {
              this.refreshTooltip(this.firstHandle);
              var tooltipContentElement = this.tooltipElement.firstElementChild;
              tooltipContentElement.classList.remove(classNames.materialTooltipHide);
              tooltipContentElement.classList.add(classNames.materialTooltipShow);
              this.firstHandle.style.cursor = 'default';
              this.tooltipElement.style.transition = this.scaleTransform;
              this.tooltipElement.classList.add(classNames.materialTooltipOpen);
              this.materialHandle.style.transform = 'scale(0)';

              if (tooltipContentElement.innerText.length > 4) {
                this.tooltipElement.style.transform = 'scale(1)';
              } else {
                this.tooltipElement.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
              }

              if (this.type === 'Default') {
                setTimeout(function () {
                  _this243.tooltipElement.style.transition = _this243.transition.handle;
                }, 2500);
              } else {
                setTimeout(function () {
                  _this243.tooltipElement.style.transition = 'none';
                }, 2500);
              }
            }
          }
        }, {
          key: "closeMaterialTooltip",
          value: function closeMaterialTooltip() {
            var _this244 = this;

            if (this.isMaterialTooltip) {
              var tooltipContentElement = this.tooltipElement.firstElementChild;
              this.tooltipElement.style.transition = this.scaleTransform;
              tooltipContentElement.classList.remove(classNames.materialTooltipShow);
              tooltipContentElement.classList.add(classNames.materialTooltipHide);
              this.firstHandle.style.cursor = '-webkit-grab';
              this.firstHandle.style.cursor = 'grab';

              if (this.materialHandle) {
                this.materialHandle.style.transform = 'scale(1)';
              }

              this.tooltipElement.classList.remove(classNames.materialTooltipOpen);
              this.setTooltipTransform();
              this.tooltipTarget = undefined;
              setTimeout(function () {
                _this244.tooltipElement.style.transition = 'none';
              }, 2500);
            }
          }
        }, {
          key: "checkTooltipPosition",
          value: function checkTooltipPosition(args) {
            if (this.tooltipCollidedPosition === undefined || this.tooltipCollidedPosition !== args.collidedPosition) {
              if (this.isMaterialTooltip) {
                var tooltipClass = this.tooltipPositionCalculation(args.collidedPosition);

                if (tooltipClass !== undefined) {
                  args.element.classList.remove(this.previousTooltipClass);
                  args.element.classList.add(tooltipClass);
                  this.previousTooltipClass = tooltipClass;
                }

                if (args.element.style.transform && args.element.classList.contains(classNames.materialTooltipOpen) && args.element.firstElementChild.innerText.length <= 4) {
                  args.element.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
                }
              }

              this.tooltipCollidedPosition = args.collidedPosition;
            }

            if (this.isMaterialTooltip && this.tooltipElement && this.tooltipElement.style.transform.indexOf('translate') !== -1) {
              this.setTooltipTransform();
            }
          }
        }, {
          key: "setTooltipTransform",
          value: function setTooltipTransform() {
            var transformProperties = this.getTooltipTransformProperties(this.previousTooltipClass);

            if (this.tooltipElement.firstElementChild.innerText.length > 4) {
              this.tooltipElement.style.transform = "".concat(transformProperties.translate, " scale(0.01)");
            } else {
              this.tooltipElement.style.transform = "".concat(transformProperties.translate, " ").concat(transformProperties.rotate, " scale(0.01)");
            }
          }
        }, {
          key: "renderTooltip",
          value: function renderTooltip() {
            this.tooltipObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["Tooltip"]({
              showTipPointer: this.isBootstrap || this.isMaterial || this.isBootstrap4,
              cssClass: classNames.sliderTooltip,
              height: this.isMaterial ? 30 : 'auto',
              animation: {
                open: {
                  effect: 'None'
                },
                close: {
                  effect: 'FadeOut',
                  duration: 500
                }
              },
              opensOn: 'Custom',
              beforeOpen: this.tooltipBeforeOpen.bind(this),
              beforeCollision: this.checkTooltipPosition.bind(this),
              beforeClose: this.tooltipBeforeClose.bind(this),
              enableHtmlSanitizer: this.enableHtmlSanitizer
            });
            this.tooltipObj.appendTo(this.firstHandle);
            this.initializeTooltipProps();
          }
        }, {
          key: "initializeTooltipProps",
          value: function initializeTooltipProps() {
            var tooltipShowOn = this.isMaterialTooltip ? 'Always' : this.tooltip.showOn === 'Auto' ? 'Hover' : this.tooltip.showOn;
            this.setProperties({
              tooltip: {
                showOn: tooltipShowOn
              }
            }, true);
            this.tooltipObj.position = this.tooltipPlacement();
            this.tooltipCollision(this.tooltipObj.position);
            [this.firstHandle, this.rangeBar, this.secondHandle].forEach(function (handle) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(handle)) {
                handle.style.transition = 'none';
              }
            });

            if (this.isMaterialTooltip) {
              this.sliderContainer.classList.add(classNames.materialSlider);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                this.tooltipValue();
              }

              this.tooltipObj.animation.close.effect = 'None';
              this.tooltipObj.open(this.firstHandle);
            }
          }
        }, {
          key: "tooltipBeforeClose",
          value: function tooltipBeforeClose() {
            this.tooltipElement = undefined;
            this.tooltipCollidedPosition = undefined;
          }
        }, {
          key: "setButtons",
          value: function setButtons() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              this.firstBtn = this.element.parentElement.querySelector('.e-slider-button.e-first-button');
              this.secondBtn = this.element.parentElement.querySelector('.e-slider-button.e-second-button');
            } else {
              this.firstBtn = this.createElement('div', {
                className: classNames.sliderButton + ' ' + classNames.firstButton
              });
              this.firstBtn.appendChild(this.createElement('span', {
                className: classNames.sliderButtonIcon
              }));
              this.firstBtn.tabIndex = -1;
              this.secondBtn = this.createElement('div', {
                className: classNames.sliderButton + ' ' + classNames.secondButton
              });
              this.secondBtn.appendChild(this.createElement('span', {
                className: classNames.sliderButtonIcon
              }));
              this.secondBtn.tabIndex = -1;
              this.sliderContainer.classList.add(classNames.sliderButtonClass);
              this.sliderContainer.appendChild(this.firstBtn);
              this.sliderContainer.appendChild(this.secondBtn);
              this.sliderContainer.appendChild(this.element);
              this.buttonTitle();
            }
          }
        }, {
          key: "buttonTitle",
          value: function buttonTitle() {
            var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';
            this.l10n.setLocale(this.locale);
            var decrementTitle = this.l10n.getConstant('decrementTitle');
            var incrementTitle = this.l10n.getConstant('incrementTitle');
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(enabledRTL ? this.secondBtn : this.firstBtn, {
              'aria-label': decrementTitle,
              title: decrementTitle
            });
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(enabledRTL ? this.firstBtn : this.secondBtn, {
              'aria-label': incrementTitle,
              title: incrementTitle
            });
          }
        }, {
          key: "buttonFocusOut",
          value: function buttonFocusOut() {
            if (this.isMaterial) {
              this.getHandle().classList.remove('e-large-thumb-size');
            }
          }
        }, {
          key: "repeatButton",
          value: function repeatButton(args) {
            var hVal = this.handleValueUpdate();
            var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';
            var value;

            if (args.target.parentElement.classList.contains(classNames.firstButton) || args.target.classList.contains(classNames.firstButton)) {
              enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), true) : value = this.add(hVal, parseFloat(this.step.toString()), false);
            } else if (args.target.parentElement.classList.contains(classNames.secondButton) || args.target.classList.contains(classNames.secondButton)) {
              enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), false) : value = this.add(hVal, parseFloat(this.step.toString()), true);
            }

            if (this.limits.enabled) {
              value = this.getLimitCorrectedValues(value);
            }

            if (value >= this.min && value <= this.max) {
              this.changeHandleValue(value);
              this.tooltipToggle(this.getHandle());
            }
          }
        }, {
          key: "repeatHandlerMouse",
          value: function repeatHandlerMouse(args) {
            args.preventDefault();

            if (args.type === 'mousedown' || args.type === 'touchstart') {
              this.buttonClick(args);
              this.repeatInterval = setInterval(this.repeatButton.bind(this), 180, args);
            }
          }
        }, {
          key: "materialChange",
          value: function materialChange() {
            if (!this.getHandle().classList.contains('e-large-thumb-size')) {
              this.getHandle().classList.add('e-large-thumb-size');
            }
          }
        }, {
          key: "repeatHandlerUp",
          value: function repeatHandlerUp(e) {
            this.changeEvent('changed', e);
            this.closeTooltip();
            clearInterval(this.repeatInterval);
            this.getHandle().focus();
          }
        }, {
          key: "customTickCounter",
          value: function customTickCounter(bigNum) {
            var tickCount = 4;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0) {
              if (bigNum > 4) {
                tickCount = 3;
              }

              if (bigNum > 7) {
                tickCount = 2;
              }

              if (bigNum > 14) {
                tickCount = 1;
              }

              if (bigNum > 28) {
                tickCount = 0;
              }
            }

            return tickCount;
          } // tslint:disable-next-line:max-func-body-length

        }, {
          key: "renderScale",
          value: function renderScale() {
            var liElementPosition = 0;
            var orien = this.orientation === 'Vertical' ? 'v' : 'h';
            this.noOfDecimals = this.numberOfDecimals(this.step);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              this.ul = this.element.querySelector('ul');
            } else {
              this.ul = this.createElement('ul', {
                className: classNames.scale + ' ' + 'e-' + orien + '-scale ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),
                attrs: {
                  role: 'presentation',
                  tabIndex: '-1',
                  'aria-hidden': 'true'
                }
              });
            }

            this.ul.style.zIndex = '-1';

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isAndroid && orien === 'h') {
              this.ul.classList.add(classNames.sliderTickPosition);
            }

            var smallStep = this.ticks.smallStep;

            if (!this.ticks.showSmallTicks) {
              this.ticks.largeStep > 0 ? smallStep = this.ticks.largeStep : smallStep = parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max)) - parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min));
            } else if (smallStep <= 0) {
              smallStep = parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.step));
            }

            var min = this.fractionalToInteger(this.min);
            var max = this.fractionalToInteger(this.max);
            var steps = this.fractionalToInteger(smallStep);
            var bigNum = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0 && this.customValues.length - 1;
            var customStep = this.customTickCounter(bigNum);
            var count = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0 ? bigNum * customStep + bigNum : Math.abs((max - min) / steps);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
              this.element.appendChild(this.ul);
            }

            var li;
            var start = parseFloat(this.min.toString());

            if (orien === 'v') {
              start = parseFloat(this.max.toString());
            }

            var left = 0;
            var islargeTick;
            var tickWidth = 100 / count;

            if (tickWidth === Infinity) {
              tickWidth = 5;
            }

            for (var i = 0, y = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0 ? this.customValues.length - 1 : 0, k = 0; i <= count; i++) {
              li = this.createElement('li', {
                attrs: {
                  "class": classNames.tick,
                  role: 'presentation',
                  tabIndex: '-1',
                  'aria-hidden': 'true'
                }
              });

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0) {
                islargeTick = i % (customStep + 1) === 0;

                if (islargeTick) {
                  if (orien === 'h') {
                    start = this.customValues[k];
                    k++;
                  } else {
                    start = this.customValues[y];
                    y--;
                  }

                  li.setAttribute('title', start.toString());
                }
              } else {
                li.setAttribute('title', start.toString());

                if (this.numberOfDecimals(this.max) === 0 && this.numberOfDecimals(this.min) === 0 && this.numberOfDecimals(this.step) === 0) {
                  if (orien === 'h') {
                    islargeTick = (start - parseFloat(this.min.toString())) % this.ticks.largeStep === 0 ? true : false;
                  } else {
                    islargeTick = Math.abs(start - parseFloat(this.max.toString())) % this.ticks.largeStep === 0 ? true : false;
                  }
                } else {
                  var largestep = this.fractionalToInteger(this.ticks.largeStep);
                  var startValue = this.fractionalToInteger(start);

                  if (orien === 'h') {
                    islargeTick = (startValue - min) % largestep === 0 ? true : false;
                  } else {
                    islargeTick = Math.abs(startValue - parseFloat(max.toString())) % largestep === 0 ? true : false;
                  }
                }
              }

              if (islargeTick) {
                li.classList.add(classNames.large);
              }

              orien === 'h' ? li.style.width = tickWidth + '%' : li.style.height = tickWidth + '%';
              var repeat = islargeTick ? this.ticks.placement === 'Both' ? 2 : 1 : 0;

              if (islargeTick) {
                for (var j = 0; j < repeat; j++) {
                  this.createTick(li, start, tickWidth);
                }

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues)) {
                  this.updateTicksValues(start, this.ul.children[liElementPosition]);
                  liElementPosition++;
                }
              } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues)) {
                this.formatTicksValue(li, start);

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues)) {
                  this.updateTicksValues(start, this.ul.children[liElementPosition]);
                  liElementPosition++;
                }
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
                this.ul.appendChild(li);
              }

              this.tickElementCollection.push(li);
              var decimalPoints = void 0;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues)) {
                if (this.numberOfDecimals(smallStep) > this.numberOfDecimals(start)) {
                  decimalPoints = this.numberOfDecimals(smallStep);
                } else {
                  decimalPoints = this.numberOfDecimals(start);
                }

                if (orien === 'h') {
                  start = this.makeRoundNumber(start + smallStep, decimalPoints);
                } else {
                  start = this.makeRoundNumber(start - smallStep, decimalPoints);
                }

                left = this.makeRoundNumber(left + smallStep, decimalPoints);
              }
            }

            this.ticksAlignment(orien, tickWidth);
          }
        }, {
          key: "updateTicksValues",
          value: function updateTicksValues(start, liElement) {
            if (liElement.childElementCount > 0) {
              for (var i = 0; i < liElement.childElementCount; i++) {
                this.blazortTicksValue(liElement, start, liElement.children[i]);
              }
            } else {
              this.blazortTicksValue(liElement, start, null);
            }
          }
        }, {
          key: "blazortTicksValue",
          value: function blazortTicksValue(li, start, span) {
            var _this245 = this;

            var tickText = this.formatNumber(start);
            var text = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks.format) ? this.formatString(start, this.ticksFormatInfo).formatString : tickText;
            var eventArgs = {
              value: start,
              text: text,
              tickElement: li
            };
            this.trigger('renderingTicks', eventArgs, function (observedArgs) {
              li.setAttribute('title', observedArgs.text.toString());

              if (span) {
                if (_this245.enableHtmlSanitizer) {
                  span.innerHTML = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(observedArgs.text.toString());
                } else {
                  span.innerHTML = observedArgs.text.toString();
                }
              }
            });
          }
        }, {
          key: "ticksAlignment",
          value: function ticksAlignment(orien, tickWidth) {
            var triggerEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            this.firstChild = this.ul.firstElementChild;
            this.lastChild = this.ul.lastElementChild;
            this.firstChild.classList.add(classNames.sliderFirstTick);
            this.lastChild.classList.add(classNames.sliderLastTick);
            this.sliderContainer.classList.add(classNames.scale + '-' + this.ticks.placement.toLowerCase());

            if (orien === 'h') {
              this.firstChild.style.width = tickWidth / 2 + '%';
              this.lastChild.style.width = tickWidth / 2 + '%';
            } else {
              this.firstChild.style.height = tickWidth / 2 + '%';
              this.lastChild.style.height = tickWidth / 2 + '%';
            }

            var eventArgs = {
              ticksWrapper: this.ul,
              tickElements: this.tickElementCollection
            };

            if (triggerEvent) {
              this.trigger('renderedTicks', eventArgs);
            }

            this.scaleAlignment();
          }
        }, {
          key: "createTick",
          value: function createTick(li, start, tickWidth) {
            var span = this.createElement('span', {
              className: classNames.tickValue + ' ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),
              attrs: {
                role: 'presentation',
                tabIndex: '-1',
                'aria-hidden': 'true'
              }
            });
            li.appendChild(span);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues)) {
              this.formatTicksValue(li, start, span, tickWidth);
            } else {
              if (this.enableHtmlSanitizer) {
                span.innerHTML = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(start.toString());
              } else {
                span.innerHTML = start.toString();
              }
            }
          }
        }, {
          key: "formatTicksValue",
          value: function formatTicksValue(li, start, spanElement, tickWidth) {
            var _this246 = this;

            var tickText = this.formatNumber(start);
            var text = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks.format) ? this.formatString(start, this.ticksFormatInfo).formatString : tickText;
            var eventArgs = {
              value: start,
              text: text,
              tickElement: li
            };
            this.trigger('renderingTicks', eventArgs, function (observedArgs) {
              li.setAttribute('title', observedArgs.text.toString());

              if (spanElement) {
                if (_this246.enableHtmlSanitizer) {
                  spanElement.innerHTML = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["SanitizeHtmlHelper"].sanitize(observedArgs.text.toString());
                } else {
                  spanElement.innerHTML = observedArgs.text.toString();
                }
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this246.renderingTicks) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                var orien = _this246.orientation === 'Horizontal' ? 'h' : 'v';

                _this246.ticksAlignment(orien, tickWidth, false);
              }
            });
          }
        }, {
          key: "scaleAlignment",
          value: function scaleAlignment() {
            this.tickValuePosition();
            var orien = this.orientation === 'Vertical' ? 'v' : 'h';

            if (this.orientation === 'Vertical') {
              this.element.getBoundingClientRect().width <= 15 ? this.sliderContainer.classList.add(classNames.sliderSmallSize) : this.sliderContainer.classList.remove(classNames.sliderSmallSize);
            } else {
              this.element.getBoundingClientRect().height <= 15 ? this.sliderContainer.classList.add(classNames.sliderSmallSize) : this.sliderContainer.classList.remove(classNames.sliderSmallSize);
            }
          }
        }, {
          key: "tickValuePosition",
          value: function tickValuePosition() {
            this.firstChild = this.element.querySelector('ul').children[0];
            var first = this.firstChild.getBoundingClientRect();
            var firstChild;
            var otherChild;
            var smallStep = this.ticks.smallStep;
            var count = Math.abs(parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max)) - parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min))) / smallStep;

            if (this.firstChild.children.length > 0) {
              firstChild = this.firstChild.children[0].getBoundingClientRect();
            }

            var tickElements = [this.sliderContainer.querySelectorAll('.' + classNames.tick + '.' + classNames.large + ' .' + classNames.tickValue)];
            var other;

            if (this.ticks.placement === 'Both') {
              other = [].slice.call(tickElements[0], 2);
            } else {
              other = [].slice.call(tickElements[0], 1);
            }

            var tickWidth = this.orientation === 'Vertical' ? first.height * 2 : first.width * 2;

            for (var i = 0; i < this.firstChild.children.length; i++) {
              if (this.orientation === 'Vertical') {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
                  this.firstChild.children[i].style.top = -(firstChild.height / 2) + 'px';
                }
              } else {
                if (!this.enableRtl) {
                  this.firstChild.children[i].style.left = -(firstChild.width / 2) + 'px';
                } else {
                  this.firstChild.children[i].style.left = (tickWidth - this.firstChild.children[i].getBoundingClientRect().width) / 2 + 'px';
                }
              }
            }

            for (var _i120 = 0; _i120 < other.length; _i120++) {
              otherChild = other[_i120].getBoundingClientRect();

              if (this.orientation === 'Vertical') {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(other[_i120], {
                    top: (tickWidth - otherChild.height) / 2 + 'px'
                  });
                }
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(other[_i120], {
                  left: (tickWidth - otherChild.width) / 2 + 'px'
                });
              }
            }

            if (this.enableRtl && this.lastChild.children.length && count !== 0) {
              this.lastChild.children[0].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';

              if (this.ticks.placement === 'Both') {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                  this.lastChild.children[1].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';
                }
              }
            }

            if (count === 0) {
              if (this.orientation === 'Horizontal') {
                if (!this.enableRtl) {
                  this.firstChild.classList.remove(classNames.sliderLastTick);

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                    this.firstChild.style.left = this.firstHandle.style.left;
                  }
                } else {
                  this.firstChild.classList.remove(classNames.sliderLastTick);
                  this.firstChild.style.right = this.firstHandle.style.right;

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                    this.firstChild.children[0].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + 'px';

                    if (this.ticks.placement === 'Both') {
                      this.firstChild.children[1].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + 'px';
                    }
                  }
                }
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
                if (this.orientation === 'Vertical') {
                  this.firstChild.classList.remove(classNames.sliderLastTick);
                }
              }
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
              var args;

              if (this.firstChild != null) {
                if (this.orientation === 'Horizontal') {
                  args = {
                    firstTickPostion: this.firstChild.children[0].style.left
                  };
                } else {
                  args = {
                    firstTickPostion: -(firstChild.height / 2) + 'px'
                  };
                }
              }

              if (other[0] != null) {
                if (this.orientation === 'Horizontal') {
                  args = {
                    otherTicksPosition: other[0].style.left
                  };
                } else {
                  args = {
                    otherTicksPosition: (tickWidth - otherChild.height) / 2 + 'px'
                  };
                }
              }

              if (this.firstChild != null && other[0] != null) {
                if (this.orientation === 'Horizontal') {
                  args = {
                    firstTickPostion: this.firstChild.children[0].style.left,
                    otherTicksPosition: other[0].style.left
                  };
                } else {
                  args = {
                    firstTickPostion: -(firstChild.height / 2) + 'px',
                    otherTicksPosition: (tickWidth - otherChild.height) / 2 + 'px'
                  };
                }
              } // tslint:disable


              this.interopAdaptor.invokeMethodAsync('SliderTicksData', args); // tslint:enable
            }
          }
        }, {
          key: "setAriaAttrValue",
          value: function setAriaAttrValue(element) {
            var ariaValueText;
            var isTickFormatted = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks.format) ? true : false;
            var text = !isTickFormatted ? this.formatContent(this.ticksFormatInfo, false) : this.formatContent(this.tooltipFormatInfo, false);
            var valuenow = isTickFormatted ? this.formatContent(this.ticksFormatInfo, true) : this.formatContent(this.tooltipFormatInfo, true);
            text = !this.customAriaText ? text : this.customAriaText;

            if (text.split(' - ').length === 2) {
              ariaValueText = text.split(' - ');
            } else {
              ariaValueText = [text, text];
            }

            this.setAriaAttributes(element);

            if (this.type !== 'Range') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
                'aria-valuenow': valuenow,
                'aria-valuetext': text
              });
            } else {
              !this.enableRtl ? element === this.firstHandle ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
                'aria-valuenow': valuenow.split(' - ')[0],
                'aria-valuetext': ariaValueText[0]
              }) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
                'aria-valuenow': valuenow.split(' - ')[1],
                'aria-valuetext': ariaValueText[1]
              }) : element === this.firstHandle ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
                'aria-valuenow': valuenow.split(' - ')[1],
                'aria-valuetext': ariaValueText[1]
              }) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(element, {
                'aria-valuenow': valuenow.split(' - ')[0],
                'aria-valuetext': ariaValueText[0]
              });
            }
          }
        }, {
          key: "handleValueUpdate",
          value: function handleValueUpdate() {
            var hVal;

            if (this.type === 'Range') {
              if (this.activeHandle === 1) {
                hVal = this.handleVal1;
              } else {
                hVal = this.handleVal2;
              }
            } else {
              hVal = this.handleVal1;
            }

            return hVal;
          }
        }, {
          key: "getLimitCorrectedValues",
          value: function getLimitCorrectedValues(value) {
            if (this.type === 'MinRange' || this.type === 'Default') {
              value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];
            } else {
              if (this.activeHandle === 1) {
                value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];
              } else {
                value = this.getLimitValueAndPosition(value, this.limits.maxStart, this.limits.maxEnd)[0];
              }
            }

            return value;
          }
        }, {
          key: "focusSliderElement",
          value: function focusSliderElement() {
            if (!this.isElementFocused) {
              this.element.focus();
              this.isElementFocused = true;
            }
          }
        }, {
          key: "buttonClick",
          value: function buttonClick(args) {
            this.focusSliderElement();
            var value;
            var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';
            var hVal = this.handleValueUpdate();

            if (args.keyCode === 40 || args.keyCode === 37 || args.currentTarget.classList.contains(classNames.firstButton)) {
              enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), true) : value = this.add(hVal, parseFloat(this.step.toString()), false);
            } else if (args.keyCode === 38 || args.keyCode === 39 || args.currentTarget.classList.contains(classNames.secondButton)) {
              enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), false) : value = this.add(hVal, parseFloat(this.step.toString()), true);
            } else if (args.keyCode === 33 || args.currentTarget.classList.contains(classNames.firstButton)) {
              enabledRTL ? value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false) : value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true);
            } else if (args.keyCode === 34 || args.currentTarget.classList.contains(classNames.secondButton)) {
              enabledRTL ? value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true) : value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false);
            } else if (args.keyCode === 36) {
              value = parseFloat(this.min.toString());
            } else if (args.keyCode === 35) {
              value = parseFloat(this.max.toString());
            }

            if (this.limits.enabled) {
              value = this.getLimitCorrectedValues(value);
            }

            this.changeHandleValue(value);

            if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {
              this.materialChange();
            }

            this.tooltipToggle(this.getHandle());
            this.getHandle().focus();

            if (args.currentTarget.classList.contains(classNames.firstButton)) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstBtn, 'mouseup touchend', this.buttonUp, this);
            }

            if (args.currentTarget.classList.contains(classNames.secondButton)) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondBtn, 'mouseup touchend', this.buttonUp, this);
            }
          }
        }, {
          key: "tooltipToggle",
          value: function tooltipToggle(target) {
            if (this.isMaterialTooltip) {
              !this.tooltipElement.classList.contains(classNames.materialTooltipOpen) ? this.openMaterialTooltip() : this.refreshTooltip(this.firstHandle);
            } else {
              !this.tooltipElement ? this.openTooltip(target) : this.refreshTooltip(target);
            }
          }
        }, {
          key: "buttonUp",
          value: function buttonUp(args) {
            if (args.currentTarget.classList.contains(classNames.firstButton)) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstBtn, 'mouseup touchend', this.buttonUp);
            }

            if (args.currentTarget.classList.contains(classNames.secondButton)) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondBtn, 'mouseup touchend', this.buttonUp);
            }
          }
        }, {
          key: "setRangeBar",
          value: function setRangeBar() {
            if (this.orientation === 'Horizontal') {
              if (this.type === 'MinRange') {
                this.enableRtl ? this.rangeBar.style.right = '0px' : this.rangeBar.style.left = '0px';
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
                  'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.handlePos1) ? 0 : this.handlePos1 + 'px'
                });
              } else {
                this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + 'px' : this.rangeBar.style.left = this.handlePos1 + 'px';
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
                  'width': this.handlePos2 - this.handlePos1 + 'px'
                });
              }
            } else {
              if (this.type === 'MinRange') {
                this.rangeBar.style.bottom = '0px';
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
                  'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.handlePos1) ? 0 : this.handlePos1 + 'px'
                });
              } else {
                this.rangeBar.style.bottom = this.handlePos1 + 'px';
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
                  'height': this.handlePos2 - this.handlePos1 + 'px'
                });
              }
            }
          }
        }, {
          key: "checkValidValueAndPos",
          value: function checkValidValueAndPos(value) {
            value = this.checkHandleValue(value);
            value = this.checkHandlePosition(value);
            return value;
          }
        }, {
          key: "setLimitBarPositions",
          value: function setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion) {
            if (this.orientation === 'Horizontal') {
              if (!this.enableRtl) {
                this.limitBarFirst.style.left = fromMinPostion + 'px';
                this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + 'px';
              } else {
                this.limitBarFirst.style.right = fromMinPostion + 'px';
                this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + 'px';
              }
            } else {
              this.limitBarFirst.style.bottom = fromMinPostion + 'px';
              this.limitBarFirst.style.height = fromMaxpostion - fromMinPostion + 'px';
            }

            if (this.type === 'Range') {
              if (this.orientation === 'Horizontal') {
                if (!this.enableRtl) {
                  this.limitBarSecond.style.left = toMinPostion + 'px';
                  this.limitBarSecond.style.width = toMaxpostion - toMinPostion + 'px';
                } else {
                  this.limitBarSecond.style.right = toMinPostion + 'px';
                  this.limitBarSecond.style.width = toMaxpostion - toMinPostion + 'px';
                }
              } else {
                this.limitBarSecond.style.bottom = toMinPostion + 'px';
                this.limitBarSecond.style.height = toMaxpostion - toMinPostion + 'px';
              }
            }
          }
        }, {
          key: "setLimitBar",
          value: function setLimitBar() {
            if (this.type === 'Default' || this.type === 'MinRange') {
              var fromPosition = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];
              fromPosition = this.checkValidValueAndPos(fromPosition);
              var toPosition = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];
              toPosition = this.checkValidValueAndPos(toPosition);
              this.setLimitBarPositions(fromPosition, toPosition);
            } else if (this.type === 'Range') {
              var fromMinPostion = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];
              fromMinPostion = this.checkValidValueAndPos(fromMinPostion);
              var fromMaxpostion = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];
              fromMaxpostion = this.checkValidValueAndPos(fromMaxpostion);
              var toMinPostion = this.getLimitValueAndPosition(this.limits.maxStart, this.limits.maxStart, this.limits.maxEnd, true)[0];
              toMinPostion = this.checkValidValueAndPos(toMinPostion);
              var toMaxpostion = this.getLimitValueAndPosition(this.limits.maxEnd, this.limits.maxStart, this.limits.maxEnd, true)[0];
              toMaxpostion = this.checkValidValueAndPos(toMaxpostion);
              this.setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion);
            }
          }
        }, {
          key: "getLimitValueAndPosition",
          value: function getLimitValueAndPosition(currentValue, minValue, maxValue, limitBar) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(minValue)) {
              minValue = this.min;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(currentValue) && limitBar) {
                currentValue = minValue;
              }
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(maxValue)) {
              maxValue = this.max;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(currentValue) && limitBar) {
                currentValue = maxValue;
              }
            }

            if (currentValue < minValue) {
              currentValue = minValue;
            }

            if (currentValue > maxValue) {
              currentValue = maxValue;
            }

            return [currentValue, this.checkHandlePosition(currentValue)];
          }
        }, {
          key: "setValue",
          value: function setValue() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues) && this.customValues.length > 0) {
              this.min = 0;
              this.max = this.customValues.length - 1;
              this.setBarColor();
            }

            this.setAriaAttributes(this.firstHandle);
            this.handleVal1 = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value) ? this.checkHandleValue(parseFloat(this.min.toString())) : this.checkHandleValue(parseFloat(this.value.toString()));
            this.handlePos1 = this.checkHandlePosition(this.handleVal1);
            this.preHandlePos1 = this.handlePos1;
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.activeHandle) ? this.type === 'Range' ? this.activeHandle = 2 : this.activeHandle = 1 : this.activeHandle = this.activeHandle;

            if (this.type === 'Default' || this.type === 'MinRange') {
              if (this.limits.enabled) {
                var values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
                this.handleVal1 = values[0];
                this.handlePos1 = values[1];
                this.preHandlePos1 = this.handlePos1;
              }

              this.setHandlePosition(null);
              this.handleStart();
              this.value = this.handleVal1;
              this.setAriaAttrValue(this.firstHandle);
              this.changeEvent('changed', null);
            } else {
              this.validateRangeValue();
            }

            if (this.type !== 'Default') {
              this.setRangeBar();
            }

            if (this.limits.enabled) {
              this.setLimitBar();
            }
          }
        }, {
          key: "rangeValueUpdate",
          value: function rangeValueUpdate() {
            if (this.value === null || typeof this.value !== 'object') {
              this.value = [parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min)), parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max))];
            }
          }
        }, {
          key: "validateRangeValue",
          value: function validateRangeValue() {
            this.rangeValueUpdate();
            this.setRangeValue();
          }
        }, {
          key: "modifyZindex",
          value: function modifyZindex() {
            if (this.type === 'Range') {
              if (this.activeHandle === 1) {
                this.firstHandle.style.zIndex = this.zIndex + 4 + '';
                this.secondHandle.style.zIndex = this.zIndex + 3 + '';
              } else {
                this.firstHandle.style.zIndex = this.zIndex + 3 + '';
                this.secondHandle.style.zIndex = this.zIndex + 4 + '';
              }
            } else if (this.isMaterialTooltip && this.tooltipElement) {
              this.tooltipElement.style.zIndex = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["getZindexPartial"])(this.element) + '';
            }
          }
        }, {
          key: "setHandlePosition",
          value: function setHandlePosition(event) {
            var _this247 = this;

            var handle;
            var pos = this.activeHandle === 1 ? this.handlePos1 : this.handlePos2;

            if (this.isMaterialTooltip) {
              handle = [this.firstHandle, this.materialHandle];
            } else {
              handle = [this.getHandle()];
            }

            this.handleStart();
            handle.forEach(function (handle) {
              if (_this247.orientation === 'Horizontal') {
                _this247.enableRtl ? handle.style.right = "".concat(pos, "px") : handle.style.left = "".concat(pos, "px");
              } else {
                handle.style.bottom = "".concat(pos, "px");
              }

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && _this247.isServerRendered) {
                handle.style.removeProperty('visibility');
              }
            });
            this.changeEvent('change', event);
          }
        }, {
          key: "getHandle",
          value: function getHandle() {
            return this.activeHandle === 1 ? this.firstHandle : this.secondHandle;
          }
        }, {
          key: "setRangeValue",
          value: function setRangeValue() {
            this.updateRangeValue();
            this.activeHandle = 1;
            this.setHandlePosition(null);
            this.activeHandle = 2;
            this.setHandlePosition(null);
            this.activeHandle = 1;
          }
        }, {
          key: "changeEvent",
          value: function changeEvent(eventName, e) {
            var previous = eventName === 'change' ? this.previousVal : this.previousChanged;

            if (this.type !== 'Range') {
              this.setProperties({
                'value': this.handleVal1
              }, true);

              if (previous !== this.value) {
                this.trigger(eventName, this.changeEventArgs(eventName, e));
                this.setPreviousVal(eventName, this.value);
              }

              this.setAriaAttrValue(this.firstHandle);
            } else {
              var value = this.value = [this.handleVal1, this.handleVal2];
              this.setProperties({
                'value': value
              }, true);

              if (previous.length === this.value.length && this.value[0] !== previous[0] || this.value[1] !== previous[1]) {
                this.trigger(eventName, this.changeEventArgs(eventName, e));
                this.setPreviousVal(eventName, this.value);
              }

              this.setAriaAttrValue(this.getHandle());
            }

            this.hiddenInput.value = this.value.toString();
          }
        }, {
          key: "changeEventArgs",
          value: function changeEventArgs(eventName, e) {
            var eventArgs;

            if (this.tooltip.isVisible && this.tooltipObj) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
                this.tooltipValue();
              }

              eventArgs = {
                value: this.value,
                previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,
                action: eventName,
                text: this.tooltipObj.content,
                isInteracted: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) ? false : true
              };
            } else {
              eventArgs = {
                value: this.value,
                previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,
                action: eventName,
                text: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticksFormatInfo.format) ? this.value.toString() : this.type !== 'Range' ? this.formatString(this.value, this.ticksFormatInfo).formatString : this.formatString(this.value[0], this.ticksFormatInfo).formatString + ' - ' + this.formatString(this.value[1], this.ticksFormatInfo).formatString,
                isInteracted: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(e) ? false : true
              };
            }

            return eventArgs;
          }
        }, {
          key: "setPreviousVal",
          value: function setPreviousVal(eventName, value) {
            if (eventName === 'change') {
              this.previousVal = value;
            } else {
              this.previousChanged = value;
            }
          }
        }, {
          key: "updateRangeValue",
          value: function updateRangeValue() {
            var values = this.value.toString().split(',').map(Number);

            if (this.enableRtl && this.orientation !== 'Vertical' || this.rtl) {
              this.value = [values[1], values[0]];
            } else {
              this.value = [values[0], values[1]];
            }

            if (this.enableRtl && this.orientation !== 'Vertical') {
              this.handleVal1 = this.checkHandleValue(this.value[1]);
              this.handleVal2 = this.checkHandleValue(this.value[0]);
            } else {
              this.handleVal1 = this.checkHandleValue(this.value[0]);
              this.handleVal2 = this.checkHandleValue(this.value[1]);
            }

            this.handlePos1 = this.checkHandlePosition(this.handleVal1);
            this.handlePos2 = this.checkHandlePosition(this.handleVal2);

            if (this.handlePos1 > this.handlePos2) {
              this.handlePos1 = this.handlePos2;
              this.handleVal1 = this.handleVal2;
            }

            this.preHandlePos1 = this.handlePos1;
            this.preHandlePos2 = this.handlePos2;

            if (this.limits.enabled) {
              this.activeHandle = 1;

              var _values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);

              this.handleVal1 = _values[0];
              this.handlePos1 = _values[1];
              this.preHandlePos1 = this.handlePos1;
              this.activeHandle = 2;
              _values = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);
              this.handleVal2 = _values[0];
              this.handlePos2 = _values[1];
              this.preHandlePos2 = this.handlePos2;
            }
          }
        }, {
          key: "checkHandlePosition",
          value: function checkHandlePosition(value) {
            var pos;
            value = 100 * (value - parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min))) / (parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max)) - parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min)));

            if (this.orientation === 'Horizontal') {
              pos = this.element.getBoundingClientRect().width * (value / 100);
            } else {
              pos = this.element.getBoundingClientRect().height * (value / 100);
            }

            if (parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max)) === parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min))) {
              if (this.orientation === 'Horizontal') {
                pos = this.element.getBoundingClientRect().width;
              } else {
                pos = this.element.getBoundingClientRect().height;
              }
            }

            return pos;
          }
        }, {
          key: "checkHandleValue",
          value: function checkHandleValue(value) {
            if (this.min > this.max) {
              this.min = this.max;
            }

            if (this.min === this.max) {
              return parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max));
            }

            var handle = this.tempStartEnd();

            if (value < handle.start) {
              value = handle.start;
            } else if (value > handle.end) {
              value = handle.end;
            }

            return value;
          }
          /**
           * It is used to reposition slider.
           * @returns void
           */

        }, {
          key: "reposition",
          value: function reposition() {
            var _this248 = this;

            this.firstHandle.style.transition = 'none';

            if (this.type !== 'Default') {
              this.rangeBar.style.transition = 'none';
            }

            if (this.type === 'Range') {
              this.secondHandle.style.transition = 'none';
            }

            this.handlePos1 = this.checkHandlePosition(this.handleVal1);

            if (this.handleVal2) {
              this.handlePos2 = this.checkHandlePosition(this.handleVal2);
            }

            if (this.orientation === 'Horizontal') {
              this.enableRtl ? this.firstHandle.style.right = "".concat(this.handlePos1, "px") : this.firstHandle.style.left = "".concat(this.handlePos1, "px");

              if (this.isMaterialTooltip) {
                this.enableRtl ? this.materialHandle.style.right = "".concat(this.handlePos1, "px") : this.materialHandle.style.left = "".concat(this.handlePos1, "px");
              }

              if (this.type === 'MinRange') {
                this.enableRtl ? this.rangeBar.style.right = '0px' : this.rangeBar.style.left = '0px';
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
                  'width': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.handlePos1) ? 0 : this.handlePos1 + 'px'
                });
              } else if (this.type === 'Range') {
                this.enableRtl ? this.secondHandle.style.right = "".concat(this.handlePos2, "px") : this.secondHandle.style.left = "".concat(this.handlePos2, "px");
                this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + 'px' : this.rangeBar.style.left = this.handlePos1 + 'px';
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
                  'width': this.handlePos2 - this.handlePos1 + 'px'
                });
              }
            } else {
              this.firstHandle.style.bottom = "".concat(this.handlePos1, "px");

              if (this.isMaterialTooltip) {
                this.materialHandle.style.bottom = "".concat(this.handlePos1, "px");
              }

              if (this.type === 'MinRange') {
                this.rangeBar.style.bottom = '0px';
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
                  'height': Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.handlePos1) ? 0 : this.handlePos1 + 'px'
                });
              } else if (this.type === 'Range') {
                this.secondHandle.style.bottom = "".concat(this.handlePos2, "px");
                this.rangeBar.style.bottom = this.handlePos1 + 'px';
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setStyleAttribute"])(this.rangeBar, {
                  'height': this.handlePos2 - this.handlePos1 + 'px'
                });
              }
            }

            if (this.limits.enabled) {
              this.setLimitBar();
            }

            if (this.ticks.placement !== 'None' && this.ul) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                this.removeElement(this.ul);
                this.ul = undefined;
              }

              this.renderScale();

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                this.tickValuePosition();
              }
            }

            this.handleStart();

            if (!this.tooltip.isVisible) {
              setTimeout(function () {
                _this248.firstHandle.style.transition = _this248.scaleTransform;

                if (_this248.type === 'Range') {
                  _this248.secondHandle.style.transition = _this248.scaleTransform;
                }
              });
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
              this.refreshTooltip(this.tooltipTarget);
            }

            this.setBarColor();
          }
        }, {
          key: "changeHandleValue",
          value: function changeHandleValue(value) {
            var position = null;

            if (this.activeHandle === 1) {
              if (!(this.limits.enabled && this.limits.startHandleFixed)) {
                this.handleVal1 = this.checkHandleValue(value);
                this.handlePos1 = this.checkHandlePosition(this.handleVal1);

                if (this.type === 'Range' && this.handlePos1 > this.handlePos2) {
                  this.handlePos1 = this.handlePos2;
                  this.handleVal1 = this.handleVal2;
                }

                if (this.handlePos1 !== this.preHandlePos1) {
                  position = this.preHandlePos1 = this.handlePos1;
                }
              }

              this.modifyZindex();
            } else {
              if (!(this.limits.enabled && this.limits.endHandleFixed)) {
                this.handleVal2 = this.checkHandleValue(value);
                this.handlePos2 = this.checkHandlePosition(this.handleVal2);

                if (this.type === 'Range' && this.handlePos2 < this.handlePos1) {
                  this.handlePos2 = this.handlePos1;
                  this.handleVal2 = this.handleVal1;
                }

                if (this.handlePos2 !== this.preHandlePos2) {
                  position = this.preHandlePos2 = this.handlePos2;
                }
              }

              this.modifyZindex();
            }

            if (position !== null) {
              if (this.type !== 'Default') {
                this.setRangeBar();
              }

              this.setHandlePosition(null);
            }
          }
        }, {
          key: "tempStartEnd",
          value: function tempStartEnd() {
            if (this.min > this.max) {
              return {
                start: this.max,
                end: this.min
              };
            } else {
              return {
                start: this.min,
                end: this.max
              };
            }
          }
        }, {
          key: "xyToPosition",
          value: function xyToPosition(position) {
            var pos;

            if (this.min === this.max) {
              return 100;
            }

            if (this.orientation === 'Horizontal') {
              var left = position.x - this.element.getBoundingClientRect().left;
              var num = this.element.offsetWidth / 100;
              this.val = left / num;
            } else {
              var top = position.y - this.element.getBoundingClientRect().top;

              var _num = this.element.offsetHeight / 100;

              this.val = 100 - top / _num;
            }

            var val = this.stepValueCalculation(this.val);

            if (val < 0) {
              val = 0;
            } else if (val > 100) {
              val = 100;
            }

            if (this.enableRtl && this.orientation !== 'Vertical') {
              val = 100 - val;
            }

            if (this.orientation === 'Horizontal') {
              pos = this.element.getBoundingClientRect().width * (val / 100);
            } else {
              pos = this.element.getBoundingClientRect().height * (val / 100);
            }

            return pos;
          }
        }, {
          key: "stepValueCalculation",
          value: function stepValueCalculation(value) {
            if (this.step === 0) {
              this.step = 1;
            }

            var percentStep = parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.step)) / ((parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max)) - parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min))) / 100);
            var remain = value % Math.abs(percentStep);

            if (remain !== 0) {
              if (percentStep / 2 > remain) {
                value -= remain;
              } else {
                value += Math.abs(percentStep) - remain;
              }
            }

            return value;
          }
        }, {
          key: "add",
          value: function add(a, b, addition) {
            var precision;
            var x = Math.pow(10, precision || 3);
            var val;

            if (addition) {
              val = (Math.round(a * x) + Math.round(b * x)) / x;
            } else {
              val = (Math.round(a * x) - Math.round(b * x)) / x;
            }

            return val;
          }
        }, {
          key: "positionToValue",
          value: function positionToValue(pos) {
            var val;
            var diff = parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.max)) - parseFloat(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.min));

            if (this.orientation === 'Horizontal') {
              val = pos / this.element.getBoundingClientRect().width * diff;
            } else {
              val = pos / this.element.getBoundingClientRect().height * diff;
            }

            var total = this.add(val, parseFloat(this.min.toString()), true);
            return total;
          }
        }, {
          key: "sliderBarClick",
          value: function sliderBarClick(evt) {
            evt.preventDefault();
            var pos;

            if (evt.type === 'mousedown' || evt.type === 'mouseup' || evt.type === 'click') {
              pos = {
                x: evt.clientX,
                y: evt.clientY
              };
            } else if (evt.type === 'touchend' || evt.type === 'touchstart') {
              pos = {
                x: evt.changedTouches[0].clientX,
                y: evt.changedTouches[0].clientY
              };
            }

            var handlepos = this.xyToPosition(pos);
            var handleVal = this.positionToValue(handlepos);

            if (this.type === 'Range' && this.handlePos2 - handlepos < handlepos - this.handlePos1) {
              this.activeHandle = 2;

              if (!(this.limits.enabled && this.limits.endHandleFixed)) {
                if (this.limits.enabled) {
                  var value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);
                  handleVal = value[0];
                  handlepos = value[1];
                }

                this.secondHandle.classList.add(classNames.sliderActiveHandle);
                this.handlePos2 = this.preHandlePos2 = handlepos;
                this.handleVal2 = handleVal;
              }

              this.modifyZindex();
              this.secondHandle.focus();
            } else {
              this.activeHandle = 1;

              if (!(this.limits.enabled && this.limits.startHandleFixed)) {
                if (this.limits.enabled) {
                  var _value3 = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);

                  handleVal = _value3[0];
                  handlepos = _value3[1];
                }

                this.firstHandle.classList.add(classNames.sliderActiveHandle);
                this.handlePos1 = this.preHandlePos1 = handlepos;
                this.handleVal1 = handleVal;
              }

              this.modifyZindex();
              this.firstHandle.focus();
            }

            if (this.isMaterialTooltip) {
              this.tooltipElement.classList.add(classNames.materialTooltipActive);
            }

            var focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);

            if (focusedElement && this.getHandle() !== focusedElement) {
              focusedElement.classList.remove(classNames.sliderTabHandle);
            }

            var handle = this.activeHandle === 1 ? this.firstHandle : this.secondHandle;

            if (evt.target === handle) {
              if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {
                this.materialChange();
              }

              this.tooltipToggle(this.getHandle());
              return;
            }

            if (!this.checkRepeatedValue(handleVal)) {
              return;
            }

            var transition = this.isMaterial && this.tooltip.isVisible ? this.transitionOnMaterialTooltip : this.transition;
            this.getHandle().style.transition = transition.handle;

            if (this.type !== 'Default') {
              this.rangeBar.style.transition = transition.rangeBar;
            }

            this.setHandlePosition(evt);

            if (this.type !== 'Default') {
              this.setRangeBar();
            }
          }
        }, {
          key: "handleValueAdjust",
          value: function handleValueAdjust(handleValue, assignValue, handleNumber) {
            if (handleNumber === 1) {
              this.handleVal1 = assignValue;
              this.handleVal2 = this.handleVal1 + this.minDiff;
            } else if (handleNumber === 2) {
              this.handleVal2 = assignValue;
              this.handleVal1 = this.handleVal2 - this.minDiff;
            }

            this.handlePos1 = this.checkHandlePosition(this.handleVal1);
            this.handlePos2 = this.checkHandlePosition(this.handleVal2);
          }
        }, {
          key: "dragRangeBarMove",
          value: function dragRangeBarMove(event) {
            if (event.type !== 'touchmove') {
              event.preventDefault();
            }

            this.rangeBarDragged = true;
            var pos;
            this.rangeBar.style.transition = 'none';
            this.firstHandle.style.transition = 'none';
            this.secondHandle.style.transition = 'none';
            var xPostion;
            var yPostion;

            if (event.type === 'mousemove') {
              var _ref4 = [event.clientX, event.clientY];
              xPostion = _ref4[0];
              yPostion = _ref4[1];
            } else {
              var _ref5 = [event.changedTouches[0].clientX, event.changedTouches[0].clientY];
              xPostion = _ref5[0];
              yPostion = _ref5[1];
            }

            if (!(this.limits.enabled && this.limits.startHandleFixed) && !(this.limits.enabled && this.limits.endHandleFixed)) {
              if (!this.enableRtl) {
                pos = {
                  x: xPostion - this.firstPartRemain,
                  y: yPostion + this.secondPartRemain
                };
              } else {
                pos = {
                  x: xPostion + this.secondPartRemain,
                  y: yPostion + this.secondPartRemain
                };
              }

              this.handlePos1 = this.xyToPosition(pos);
              this.handleVal1 = this.positionToValue(this.handlePos1);

              if (!this.enableRtl) {
                pos = {
                  x: xPostion + this.secondPartRemain,
                  y: yPostion - this.firstPartRemain
                };
              } else {
                pos = {
                  x: xPostion - this.firstPartRemain,
                  y: yPostion - this.firstPartRemain
                };
              }

              this.handlePos2 = this.xyToPosition(pos);
              this.handleVal2 = this.positionToValue(this.handlePos2);

              if (this.limits.enabled) {
                var value = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
                this.handleVal1 = value[0];
                this.handlePos1 = value[1];

                if (this.handleVal1 === this.limits.minEnd) {
                  this.handleValueAdjust(this.handleVal1, this.limits.minEnd, 1);
                }

                if (this.handleVal1 === this.limits.minStart) {
                  this.handleValueAdjust(this.handleVal1, this.limits.minStart, 1);
                }

                value = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);
                this.handleVal2 = value[0];
                this.handlePos2 = value[1];

                if (this.handleVal2 === this.limits.maxStart) {
                  this.handleValueAdjust(this.handleVal2, this.limits.maxStart, 2);
                }

                if (this.handleVal2 === this.limits.maxEnd) {
                  this.handleValueAdjust(this.handleVal2, this.limits.maxEnd, 2);
                }
              }

              if (this.handleVal2 === this.max) {
                this.handleValueAdjust(this.handleVal2, this.max, 2);
              }

              if (this.handleVal1 === this.min) {
                this.handleValueAdjust(this.handleVal1, this.min, 1);
              }
            }

            this.activeHandle = 1;
            this.setHandlePosition(event);
            this.activeHandle = 2;
            this.setHandlePosition(event);
            this.tooltipToggle(this.rangeBar);
            this.setRangeBar();
          }
        }, {
          key: "sliderBarUp",
          value: function sliderBarUp(event) {
            this.changeEvent('changed', event);
            this.handleFocusOut();
            this.firstHandle.classList.remove(classNames.sliderActiveHandle);

            if (this.type === 'Range') {
              this.secondHandle.classList.remove(classNames.sliderActiveHandle);
            }

            this.closeTooltip();

            if (this.isMaterial) {
              this.getHandle().classList.remove('e-large-thumb-size');

              if (this.isMaterialTooltip) {
                this.tooltipElement.classList.remove(classNames.materialTooltipActive);
              }
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousemove touchmove', this.sliderBarMove);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mouseup touchend', this.sliderBarUp);
          }
        }, {
          key: "sliderBarMove",
          value: function sliderBarMove(evt) {
            if (evt.type !== 'touchmove') {
              evt.preventDefault();
            }

            var pos;

            if (evt.type === 'mousemove') {
              pos = {
                x: evt.clientX,
                y: evt.clientY
              };
            } else {
              pos = {
                x: evt.changedTouches[0].clientX,
                y: evt.changedTouches[0].clientY
              };
            }

            var handlepos = this.xyToPosition(pos);
            var handleVal = this.positionToValue(handlepos);
            handlepos = Math.round(handlepos);

            if (this.type !== 'Range' && this.activeHandle === 1) {
              if (!(this.limits.enabled && this.limits.startHandleFixed)) {
                if (this.limits.enabled) {
                  var valueAndPostion = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
                  handlepos = valueAndPostion[1];
                  handleVal = valueAndPostion[0];
                }

                this.handlePos1 = handlepos;
                this.handleVal1 = handleVal;
              }

              this.firstHandle.classList.add(classNames.sliderActiveHandle);
            }

            if (this.type === 'Range') {
              if (this.activeHandle === 1) {
                this.firstHandle.classList.add(classNames.sliderActiveHandle);

                if (!(this.limits.enabled && this.limits.startHandleFixed)) {
                  if (handlepos > this.handlePos2) {
                    handlepos = this.handlePos2;
                    handleVal = this.handleVal2;
                  }

                  if (handlepos !== this.preHandlePos1) {
                    if (this.limits.enabled) {
                      var value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
                      handleVal = value[0];
                      handlepos = value[1];
                    }

                    this.handlePos1 = this.preHandlePos1 = handlepos;
                    this.handleVal1 = handleVal;
                    this.activeHandle = 1;
                  }
                }
              } else if (this.activeHandle === 2) {
                this.secondHandle.classList.add(classNames.sliderActiveHandle);

                if (!(this.limits.enabled && this.limits.endHandleFixed)) {
                  if (handlepos < this.handlePos1) {
                    handlepos = this.handlePos1;
                    handleVal = this.handleVal1;
                  }

                  if (handlepos !== this.preHandlePos2) {
                    if (this.limits.enabled) {
                      var _value4 = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);

                      handleVal = _value4[0];
                      handlepos = _value4[1];
                    }

                    this.handlePos2 = this.preHandlePos2 = handlepos;
                    this.handleVal2 = handleVal;
                    this.activeHandle = 2;
                  }
                }
              }
            }

            if (!this.checkRepeatedValue(handleVal)) {
              return;
            }

            this.getHandle().style.transition = this.scaleTransform;

            if (this.type !== 'Default') {
              this.rangeBar.style.transition = 'none';
            }

            this.setHandlePosition(evt);

            if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {
              this.materialChange();
            }

            this.tooltipToggle(this.getHandle());

            if (this.type !== 'Default') {
              this.setRangeBar();
            }
          }
        }, {
          key: "dragRangeBarUp",
          value: function dragRangeBarUp(event) {
            if (!this.rangeBarDragged) {
              this.focusSliderElement();
              this.sliderBarClick(event);
            }

            this.changeEvent('changed', event);
            this.closeTooltip();

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousemove touchmove', this.dragRangeBarMove);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mouseup touchend', this.dragRangeBarUp);

            this.rangeBarDragged = false;
          }
        }, {
          key: "checkRepeatedValue",
          value: function checkRepeatedValue(currentValue) {
            if (this.type === 'Range') {
              var previousVal = this.enableRtl && this.orientation !== 'Vertical' ? this.activeHandle === 1 ? this.previousVal[1] : this.previousVal[0] : this.activeHandle === 1 ? this.previousVal[0] : this.previousVal[1];

              if (currentValue === previousVal) {
                return 0;
              }
            } else {
              if (currentValue === this.previousVal) {
                return 0;
              }
            }

            return 1;
          }
        }, {
          key: "refreshTooltip",
          value: function refreshTooltip(target) {
            if (this.tooltip.isVisible && this.tooltipObj) {
              this.tooltipValue();

              if (target) {
                this.tooltipObj.refresh(target);
                this.tooltipTarget = target;
              }
            }
          }
        }, {
          key: "openTooltip",
          value: function openTooltip(target) {
            if (this.tooltip.isVisible && this.tooltipObj && !this.isMaterialTooltip) {
              this.tooltipValue();
              this.tooltipObj.open(target);
              this.tooltipTarget = target;
            }
          }
        }, {
          key: "closeTooltip",
          value: function closeTooltip() {
            if (this.tooltip.isVisible && this.tooltipObj && this.tooltip.showOn !== 'Always' && !this.isMaterialTooltip) {
              this.tooltipValue();
              this.tooltipObj.close();
              this.tooltipTarget = undefined;
            }
          }
        }, {
          key: "keyDown",
          value: function keyDown(event) {
            switch (event.keyCode) {
              case 37:
              case 38:
              case 39:
              case 40:
              case 33:
              case 34:
              case 36:
              case 35:
                event.preventDefault();
                this.buttonClick(event);
                break;
            }
          }
        }, {
          key: "wireButtonEvt",
          value: function wireButtonEvt(destroy) {
            if (!destroy) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.firstBtn, 'focusout', this.sliderFocusOut, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.secondBtn, 'focusout', this.sliderFocusOut, this);
            } else {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.firstBtn, 'focusout', this.sliderFocusOut);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.secondBtn, 'focusout', this.sliderFocusOut);
            }
          }
        }, {
          key: "rangeBarMousedown",
          value: function rangeBarMousedown(event) {
            event.preventDefault();
            this.focusSliderElement();

            if (this.type === 'Range' && this.drag && event.target === this.rangeBar) {
              var xPostion;
              var yPostion;

              if (event.type === 'mousedown') {
                var _ref6 = [event.clientX, event.clientY];
                xPostion = _ref6[0];
                yPostion = _ref6[1];
              } else if (event.type === 'touchstart') {
                var _ref7 = [event.changedTouches[0].clientX, event.changedTouches[0].clientY];
                xPostion = _ref7[0];
                yPostion = _ref7[1];
              }

              if (this.orientation === 'Horizontal') {
                this.firstPartRemain = xPostion - this.rangeBar.getBoundingClientRect().left;
                this.secondPartRemain = this.rangeBar.getBoundingClientRect().right - xPostion;
              } else {
                this.firstPartRemain = yPostion - this.rangeBar.getBoundingClientRect().top;
                this.secondPartRemain = this.rangeBar.getBoundingClientRect().bottom - yPostion;
              }

              this.minDiff = this.handleVal2 - this.handleVal1;
              this.tooltipToggle(this.rangeBar);
              var focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);

              if (focusedElement) {
                focusedElement.classList.remove(classNames.sliderTabHandle);
              }

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousemove touchmove', this.dragRangeBarMove, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mouseup touchend', this.dragRangeBarUp, this);
            }
          }
        }, {
          key: "elementClick",
          value: function elementClick(event) {
            event.preventDefault();
            this.focusSliderElement();
            this.sliderBarClick(event);
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            this.onresize = this.reposition.bind(this);
            window.addEventListener('resize', this.onresize);

            if (this.enabled && !this.readonly) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'click', this.elementClick, this);

              if (this.type === 'Range' && this.drag) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown, this);
              }

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.sliderContainer, 'keydown', this.keyDown, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.sliderContainer, 'keyup', this.keyUp, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'focusout', this.sliderFocusOut, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover, this);

              this.wireFirstHandleEvt(false);

              if (this.type === 'Range') {
                this.wireSecondHandleEvt(false);
              }

              if (this.showButtons) {
                this.wireButtonEvt(false);
              }

              this.wireMaterialTooltipEvent(false);

              if (this.isForm) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formElement, 'reset', this.formResetHandler, this);
              }
            }
          }
        }, {
          key: "unwireEvents",
          value: function unwireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'click', this.elementClick);

            if (this.type === 'Range' && this.drag) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown);
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.sliderContainer, 'keydown', this.keyDown);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.sliderContainer, 'keyup', this.keyUp);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'focusout', this.sliderFocusOut);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover);

            this.wireFirstHandleEvt(true);

            if (this.type === 'Range') {
              this.wireSecondHandleEvt(true);
            }

            if (this.showButtons) {
              this.wireButtonEvt(true);
            }

            this.wireMaterialTooltipEvent(true);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'reset', this.formResetHandler);
          }
        }, {
          key: "formResetHandler",
          value: function formResetHandler() {
            this.setProperties({
              'value': this.formResetValue
            }, true);
            this.setValue();
          }
        }, {
          key: "keyUp",
          value: function keyUp(event) {
            if (event.keyCode === 9 && event.target.classList.contains(classNames.sliderHandle)) {
              this.focusSliderElement();

              if (!event.target.classList.contains(classNames.sliderTabHandle)) {
                if (this.element.querySelector('.' + classNames.sliderTabHandle)) {
                  this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);
                }

                event.target.classList.add(classNames.sliderTabHandle);
                var parentElement = event.target.parentElement;

                if (parentElement === this.element) {
                  parentElement.querySelector('.' + classNames.sliderTrack).classList.add(classNames.sliderTabTrack);

                  if (this.type === 'Range' || this.type === 'MinRange') {
                    parentElement.querySelector('.' + classNames.rangeBar).classList.add(classNames.sliderTabRange);
                  }
                }

                if (this.type === 'Range') {
                  event.target.previousSibling.classList.contains(classNames.sliderHandle) ? this.activeHandle = 2 : this.activeHandle = 1;
                }

                this.getHandle().focus();
                this.tooltipToggle(this.getHandle());
              }
            }

            this.closeTooltip();
            this.changeEvent('changed', event);
          }
        }, {
          key: "hover",
          value: function hover(event) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(event)) {
              if (event.type === 'mouseover' || event.type === 'touchmove' || event.type === 'mousemove' || event.type === 'pointermove' || event.type === 'touchstart') {
                this.sliderContainer.classList.add(classNames.sliderHover);
              } else {
                this.sliderContainer.classList.remove(classNames.sliderHover);
              }
            }
          }
        }, {
          key: "sliderFocusOut",
          value: function sliderFocusOut(event) {
            if (event.relatedTarget !== this.secondHandle && event.relatedTarget !== this.firstHandle && event.relatedTarget !== this.element && event.relatedTarget !== this.firstBtn && event.relatedTarget !== this.secondBtn) {
              this.closeMaterialTooltip();

              if (this.element.querySelector('.' + classNames.sliderTabHandle)) {
                this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);
              }

              if (this.element.querySelector('.' + classNames.sliderTabTrack)) {
                this.element.querySelector('.' + classNames.sliderTabTrack).classList.remove(classNames.sliderTabTrack);

                if ((this.type === 'Range' || this.type === 'MinRange') && this.element.querySelector('.' + classNames.sliderTabRange)) {
                  this.element.querySelector('.' + classNames.sliderTabRange).classList.remove(classNames.sliderTabRange);
                }
              }

              this.hiddenInput.focus();
              this.hiddenInput.blur();
              this.isElementFocused = false;
            }
          }
        }, {
          key: "removeElement",
          value: function removeElement(element) {
            if (element.parentNode) {
              element.parentNode.removeChild(element);
            }
          }
        }, {
          key: "changeSliderType",
          value: function changeSliderType(type, args) {
            if (this.isMaterialTooltip && this.materialHandle) {
              this.sliderContainer.classList.remove(classNames.materialSlider);
              this.removeElement(this.materialHandle);
              this.materialHandle = undefined;
            }

            this.removeElement(this.firstHandle);
            this.firstHandle = undefined;

            if (type !== 'Default') {
              if (type === 'Range') {
                this.removeElement(this.secondHandle);
                this.secondHandle = undefined;
              }

              this.removeElement(this.rangeBar);
              this.rangeBar = undefined;
            }

            if (this.tooltip.isVisible && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.tooltipObj)) {
              this.tooltipObj.destroy();
              this.tooltipElement = undefined;
              this.tooltipCollidedPosition = undefined;
            }

            if (this.limits.enabled) {
              if (type === 'MinRange' || type === 'Default') {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarFirst)) {
                  this.removeElement(this.limitBarFirst);
                  this.limitBarFirst = undefined;
                }
              } else {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarSecond)) {
                  this.removeElement(this.limitBarSecond);
                  this.limitBarSecond = undefined;
                }
              }
            }

            this.activeHandle = 1;
            this.getThemeInitialization();

            if (this.type === 'Range') {
              this.rangeValueUpdate();
            }

            this.createRangeBar();

            if (this.limits.enabled) {
              this.createLimitBar();
            }

            this.setHandler();
            this.setOrientClass();
            this.wireFirstHandleEvt(false);

            if (this.type === 'Range') {
              this.wireSecondHandleEvt(false);
            }

            this.setValue();

            if (this.tooltip.isVisible) {
              this.renderTooltip();
              this.wireMaterialTooltipEvent(false);
            }

            this.setBarColor();

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered || args !== 'tooltip') {
              this.updateConfig();
            }
          }
        }, {
          key: "changeRtl",
          value: function changeRtl() {
            if (!this.enableRtl && this.type === 'Range') {
              this.value = [this.handleVal2, this.handleVal1];
            }

            this.updateConfig();

            if (this.tooltip.isVisible) {
              this.tooltipObj.refresh(this.firstHandle);
            }

            if (this.showButtons) {
              var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(enabledRTL ? this.secondBtn : this.firstBtn, {
                'aria-label': 'Decrease',
                title: 'Decrease'
              });
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(enabledRTL ? this.firstBtn : this.secondBtn, {
                'aria-label': 'Increase',
                title: 'Increase'
              });
            }
          }
        }, {
          key: "changeOrientation",
          value: function changeOrientation() {
            this.changeSliderType(this.type, 'null');
          }
        }, {
          key: "updateConfig",
          value: function updateConfig() {
            this.setEnableRTL();
            this.setValue();

            if (this.tooltip.isVisible) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                this.refreshTooltip(this.tooltipTarget);
              }
            }

            if (this.ticks.placement !== 'None') {
              if (this.ul) {
                this.removeElement(this.ul);
                this.ul = undefined;
                this.renderScale();
              }
            }

            this.limitsPropertyChange();
          }
        }, {
          key: "limitsPropertyChange",
          value: function limitsPropertyChange() {
            if (this.limits.enabled) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarFirst) && this.type !== 'Range') {
                this.createLimitBar();
              }

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarFirst) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarSecond) && this.type === 'Range') {
                this.createLimitBar();
              }

              this.setLimitBar();
              this.setValue();
            } else {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarFirst)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.limitBarFirst);
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.limitBarSecond)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.limitBarSecond);
              }
            }
          }
          /**
           * Get the properties to be maintained in the persisted state.
           * @private
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            var keyEntity = ['value'];
            return this.addOnPersist(keyEntity);
          }
          /**
           * Removes the component from the DOM and detaches all its related event handlers.
           * Also it removes the attributes and classes.
           * @method destroy
           * @return {void}
           */

        }, {
          key: "destroy",
          value: function destroy() {
            _get2(_getPrototypeOf2(Slider.prototype), "destroy", this).call(this);

            this.unwireEvents();
            window.removeEventListener('resize', this.onresize);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.sliderContainer], [classNames.sliderDisabled]);
            this.firstHandle.removeAttribute('aria-orientation');

            if (this.type === 'Range') {
              this.secondHandle.removeAttribute('aria-orientation');
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered) {
              this.sliderContainer.parentNode.insertBefore(this.element, this.sliderContainer);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.sliderContainer);
            }

            if (this.tooltip.isVisible) {
              this.tooltipObj.destroy();
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered) {
              this.element.innerHTML = '';
            }
          }
          /**
           * Calls internally if any of the property value is changed.
           * @private
           */
          // tslint:disable-next-line

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var _this249 = this;

            for (var _i121 = 0, _Object$keys51 = Object.keys(newProp); _i121 < _Object$keys51.length; _i121++) {
              var prop = _Object$keys51[_i121];

              switch (prop) {
                case 'cssClass':
                  this.setCSSClass(oldProp.cssClass);
                  break;

                case 'value':
                  if (newProp && oldProp) {
                    var value = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.value) ? this.type === 'Range' ? [this.min, this.max] : this.min : newProp.value;
                    this.setProperties({
                      'value': value
                    }, true);

                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.value) && oldProp.value.toString() !== value.toString()) {
                      this.setValue();

                      if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
                        this.refreshTooltip(this.tooltipTarget);
                      }

                      if (this.type === 'Range') {
                        if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.value) || oldProp.value[1] === value[1]) {
                          this.activeHandle = 1;
                        } else {
                          this.activeHandle = 2;
                        }
                      }
                    }
                  }

                  break;

                case 'min':
                case 'step':
                case 'max':
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                    this.isServerRendered = false;
                  }

                  this.setMinMaxValue();

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered) {
                    this.isServerRendered = true;
                  }

                  break;

                case 'tooltip':
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                    this.isServerRendered = false;
                  }

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.tooltip) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.tooltip)) {
                    this.setTooltip(prop);
                  }

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered) {
                    this.isServerRendered = true;
                  }

                  break;

                case 'type':
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                    this.isServerRendered = false;
                  }

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp) && Object.keys(oldProp).length && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldProp.type)) {
                    this.changeSliderType(oldProp.type, prop);
                    this.setZindex();
                  }

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered) {
                    this.isServerRendered = true;
                  }

                  break;

                case 'enableRtl':
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                    if (this.isMaterialTooltip) {
                      this.sliderContainer.classList.add(classNames.materialSlider);
                    }

                    this.isServerRendered = false;
                  }

                  if (oldProp.enableRtl !== newProp.enableRtl && this.orientation !== 'Vertical') {
                    this.rtl = oldProp.enableRtl;
                    this.changeRtl();
                  }

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered) {
                    this.isServerRendered = true;
                  }

                  break;

                case 'limits':
                  this.limitsPropertyChange();
                  break;

                case 'orientation':
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                    this.isServerRendered = false;
                  }

                  this.changeOrientation();

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered) {
                    this.isServerRendered = true;
                  }

                  break;

                case 'ticks':
                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.sliderContainer.querySelector('.' + classNames.scale))) {
                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.ul);
                    }

                    Array.prototype.forEach.call(this.sliderContainer.classList, function (className) {
                      if (className.match(/e-scale-/)) {
                        _this249.sliderContainer.classList.remove(className);
                      }
                    });
                  }

                  if (this.ticks.placement !== 'None') {
                    this.renderScale();
                    this.setZindex();
                  }

                  break;

                case 'locale':
                  if (this.showButtons) {
                    this.buttonTitle();
                  }

                  break;

                case 'showButtons':
                  if (newProp.showButtons) {
                    this.setButtons();
                    this.reposition();

                    if (this.enabled && !this.readonly) {
                      this.wireButtonEvt(false);
                    }
                  } else {
                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() || !this.isServerRendered) {
                      if (this.firstBtn && this.secondBtn) {
                        this.sliderContainer.removeChild(this.firstBtn);
                        this.sliderContainer.removeChild(this.secondBtn);
                        this.sliderContainer.classList.remove(classNames.sliderButtonClass);
                        this.firstBtn = undefined;
                        this.secondBtn = undefined;
                        this.reposition();
                      }
                    }
                  }

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                    if (this.isMaterialTooltip) {
                      this.sliderContainer.classList.add(classNames.materialSlider);
                    }
                  }

                  break;

                case 'enabled':
                  this.setEnabled();

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                    if (this.isMaterialTooltip) {
                      this.sliderContainer.classList.add(classNames.materialSlider);
                    }
                  }

                  break;

                case 'readonly':
                  this.setReadOnly();

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                    if (this.isMaterialTooltip) {
                      this.sliderContainer.classList.add(classNames.materialSlider);
                    }
                  }

                  break;

                case 'customValues':
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                    this.isServerRendered = false;
                  }

                  this.setValue();
                  this.reposition();

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered) {
                    this.isServerRendered = true;
                  }

                  break;

                case 'colorRange':
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered) {
                    this.isServerRendered = false;
                  }

                  this.reposition();

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && !this.isServerRendered) {
                    this.isServerRendered = true;
                  }

                  break;

                case 'width':
                  this.setElementWidth(newProp.width);
                  this.setMinMaxValue();

                  if (this.limits) {
                    this.limitsPropertyChange();
                  }

                  break;
              }
            }
          }
        }, {
          key: "setReadOnly",
          value: function setReadOnly() {
            if (this.readonly) {
              this.unwireEvents();
              this.sliderContainer.classList.add(classNames.readonly);
            } else {
              this.wireEvents();
              this.sliderContainer.classList.remove(classNames.readonly);
            }
          }
        }, {
          key: "setMinMaxValue",
          value: function setMinMaxValue() {
            var _this250 = this;

            this.setValue();

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
              this.refreshTooltip(this.tooltipTarget);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.sliderContainer.querySelector('.' + classNames.scale))) {
              if (this.ul) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.ul);
                Array.prototype.forEach.call(this.sliderContainer.classList, function (className) {
                  if (className.match(/e-scale-/)) {
                    _this250.sliderContainer.classList.remove(className);
                  }
                });
              }
            }

            if (this.ticks.placement !== 'None') {
              this.renderScale();
              this.setZindex();
            }
          }
        }, {
          key: "setZindex",
          value: function setZindex() {
            this.zIndex = 6;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks) && this.ticks.placement !== 'None') {
              this.ul.style.zIndex = this.zIndex + -7 + '';
              this.element.style.zIndex = this.zIndex + 2 + '';
            }

            if (!this.isMaterial && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.ticks) && this.ticks.placement === 'Both') {
              this.element.style.zIndex = this.zIndex + 2 + '';
            }

            this.firstHandle.style.zIndex = this.zIndex + 3 + '';

            if (this.type === 'Range') {
              this.secondHandle.style.zIndex = this.zIndex + 4 + '';
            }
          }
        }, {
          key: "setTooltip",
          value: function setTooltip(args) {
            this.changeSliderType(this.type, args);
          }
        }, {
          key: "setBarColor",
          value: function setBarColor() {
            var trackPosition;
            var trackClassName;
            var child = this.sliderTrack.lastElementChild;

            while (child) {
              this.sliderTrack.removeChild(child);
              child = this.sliderTrack.lastElementChild;
            }

            for (var i = 0; i < this.colorRange.length; i++) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.colorRange[i].start) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.colorRange[i].end)) {
                if (this.colorRange[i].end > this.colorRange[i].start) {
                  if (this.colorRange[i].start < this.min) {
                    this.colorRange[i].start = this.min;
                  }

                  if (this.colorRange[i].end > this.max) {
                    this.colorRange[i].end = this.max;
                  }

                  var startingPosition = this.checkHandlePosition(this.colorRange[i].start);
                  var endPosition = this.checkHandlePosition(this.colorRange[i].end);
                  var trackContainer = this.createElement('div');
                  trackContainer.style.backgroundColor = this.colorRange[i].color;
                  trackContainer.style.border = '1px solid ' + this.colorRange[i].color;

                  if (this.orientation === 'Horizontal') {
                    trackClassName = classNames.sliderHorizantalColor;

                    if (this.enableRtl) {
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.customValues)) {
                        trackPosition = this.checkHandlePosition(this.max) - this.checkHandlePosition(this.colorRange[i].end);
                      } else {
                        trackPosition = this.checkHandlePosition(this.customValues.length - this.colorRange[i].end - 1);
                      }
                    } else {
                      trackPosition = this.checkHandlePosition(this.colorRange[i].start);
                    }

                    trackContainer.style.width = endPosition - startingPosition + 'px';
                    trackContainer.style.left = trackPosition + 'px';
                  } else {
                    trackClassName = classNames.sliderVerticalColor;
                    trackPosition = this.checkHandlePosition(this.colorRange[i].start);
                    trackContainer.style.height = endPosition - startingPosition + 'px';
                    trackContainer.style.bottom = trackPosition + 'px';
                  }

                  trackContainer.classList.add(trackClassName);
                  this.sliderTrack.appendChild(trackContainer);
                }
              }
            }
          }
          /**
           * Gets the component name
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'slider';
          }
        }]);

        return Slider;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Slider.prototype, "value", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Slider.prototype, "customValues", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(1)], Slider.prototype, "step", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Slider.prototype, "width", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Slider.prototype, "min", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(100)], Slider.prototype, "max", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Slider.prototype, "readonly", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Default')], Slider.prototype, "type", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([{}], ColorRangeData)], Slider.prototype, "colorRange", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, TicksData)], Slider.prototype, "ticks", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, LimitData)], Slider.prototype, "limits", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Slider.prototype, "enabled", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, TooltipData)], Slider.prototype, "tooltip", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Slider.prototype, "showButtons", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Slider.prototype, "enableAnimation", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Horizontal')], Slider.prototype, "orientation", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Slider.prototype, "cssClass", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Slider.prototype, "enableHtmlSanitizer", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Slider.prototype, "created", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Slider.prototype, "change", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Slider.prototype, "changed", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Slider.prototype, "renderingTicks", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Slider.prototype, "renderedTicks", void 0);

      __decorate$2([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Slider.prototype, "tooltipChange", void 0);

      Slider = __decorate$2([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Slider);
      /**
       * Slider modules
       */

      var __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var FormValidator_1;
      /**
       * global declarations
       */
      // tslint:disable-next-line:no-any

      var regex = {
        EMAIL: new RegExp('^[A-Za-z0-9._%+-]{1,}@[A-Za-z0-9._%+-]{1,}([.]{1}[a-zA-Z0-9]{2,}' + '|[.]{1}[a-zA-Z0-9]{2,4}[.]{1}[a-zA-Z0-9]{2,4})$'),
        URL: /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$/m,
        DATE_ISO: new RegExp('^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$'),
        DIGITS: new RegExp('^[0-9]*$'),
        PHONE: new RegExp('^[+]?[0-9]{9,13}$'),
        CREDITCARD: new RegExp('^\\d{13,16}$')
      };
      /**
       * ErrorOption values
       * @private
       */

      var ErrorOption;

      (function (ErrorOption) {
        /**
         * Defines the error message.
         */
        ErrorOption[ErrorOption["Message"] = 0] = "Message";
        /**
         * Defines the error element type.
         */

        ErrorOption[ErrorOption["Label"] = 1] = "Label";
      })(ErrorOption || (ErrorOption = {}));
      /**
       * FormValidator class enables you to validate the form fields based on your defined rules
       * ```html
       * <form id='formId'>
       *  <input type='text' name='Name' />
       *  <input type='text' name='Age' />
       * </form>
       * <script>
       *   let formObject = new FormValidator('#formId', {
       *      rules: { Name: { required: true }, Age: { range: [18, 30] } };
       *   });
       *   formObject.validate();
       * </script>
       * ```
       */


      var FormValidator = FormValidator_1 = /*#__PURE__*/function (_syncfusion_ej2_base_56) {
        _inherits2(FormValidator, _syncfusion_ej2_base_56);

        var _super81 = _createSuper(FormValidator);

        // Initializes the FormValidator 
        function FormValidator(element, options) {
          var _this251;

          _classCallCheck2(this, FormValidator);

          _this251 = _super81.call(this, options, element);
          _this251.validated = [];
          _this251.errorRules = [];
          _this251.allowSubmit = false;
          _this251.required = 'required';
          _this251.infoElement = null;
          _this251.inputElement = null;
          _this251.selectQuery = 'input:not([type=reset]):not([type=button]), select, textarea'; // tslint:disable-next-line:no-any

          _this251.localyMessage = {};
          /**
           * Specifies the default messages for validation rules.
           * @default { List of validation message }
           */

          _this251.defaultMessages = {
            required: 'This field is required.',
            email: 'Please enter a valid email address.',
            url: 'Please enter a valid URL.',
            date: 'Please enter a valid date.',
            dateIso: 'Please enter a valid date ( ISO ).',
            creditcard: 'Please enter valid card number',
            number: 'Please enter a valid number.',
            digits: 'Please enter only digits.',
            maxLength: 'Please enter no more than {0} characters.',
            minLength: 'Please enter at least {0} characters.',
            rangeLength: 'Please enter a value between {0} and {1} characters long.',
            range: 'Please enter a value between {0} and {1}.',
            max: 'Please enter a value less than or equal to {0}.',
            min: 'Please enter a value greater than or equal to {0}.',
            regex: 'Please enter a correct value.',
            tel: 'Please enter a valid phone number.',
            pattern: 'Please enter a correct pattern value.',
            equalTo: 'Please enter the valid match text'
          };

          if (typeof _this251.rules === 'undefined') {
            _this251.rules = {};
          }

          _this251.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('formValidator', _this251.defaultMessages, _this251.locale);

          if (_this251.locale) {
            _this251.localeFunc();
          }

          _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["onIntlChange"].on('notifyExternalChange', _this251.afterLocalization, _assertThisInitialized2(_this251));

          element = typeof element === 'string' ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(element, document) : element; // Set novalidate to prevent default HTML5 form validation

          if (_this251.element != null) {
            _this251.element.setAttribute('novalidate', '');

            _this251.inputElements = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(_this251.selectQuery, _this251.element);

            _this251.createHTML5Rules();

            _this251.wireEvents();
          } else {
            return _possibleConstructorReturn2(_this251, undefined);
          }

          return _this251;
        } // tslint:enable

        /**
         * Add validation rules to the corresponding input element based on `name` attribute.
         * @param {string} name `name` of form field.
         * @param {Object} rules Validation rules for the corresponding element.
         * @return {void}
         */


        _createClass2(FormValidator, [{
          key: "addRules",
          value: function addRules(name, rules) {
            if (name) {
              if (this.rules.hasOwnProperty(name)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["extend"])(this.rules[name], rules, {});
              } else {
                this.rules[name] = rules;
              }
            }
          }
          /**
           * Remove validation to the corresponding field based on name attribute.
           * When no parameter is passed, remove all the validations in the form.
           * @param {string} name Input name attribute value.
           * @param {string[]} rules List of validation rules need to be remove from the corresponding element.
           * @return {void}
           */

        }, {
          key: "removeRules",
          value: function removeRules(name, rules) {
            if (!name && !rules) {
              this.rules = {};
            } else if (this.rules[name] && !rules) {
              delete this.rules[name];
            } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.rules[name] && rules)) {
              for (var i = 0; i < rules.length; i++) {
                delete this.rules[name][rules[i]];
              }
            } else {
              return;
            }
          }
          /**
           * Validate the current form values using defined rules.
           * Returns `true` when the form is valid otherwise `false`
           * @param {string} selected - Optional parameter to validate specified element.
           * @return {boolean}
           */

        }, {
          key: "validate",
          value: function validate(selected) {
            var rules = Object.keys(this.rules);

            if (selected && rules.length) {
              this.validateRules(selected); //filter the selected element it don't have any valid input element

              return rules.indexOf(selected) !== -1 && this.errorRules.filter(function (data) {
                return data.name === selected;
              }).length === 0;
            } else {
              this.errorRules = [];

              var _iterator87 = _createForOfIteratorHelper(rules),
                  _step87;

              try {
                for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {
                  var name = _step87.value;
                  this.validateRules(name);
                }
              } catch (err) {
                _iterator87.e(err);
              } finally {
                _iterator87.f();
              }

              return this.errorRules.length === 0;
            }
          }
          /**
           * Reset the value of all the fields in form.
           * @return {void}
           */

        }, {
          key: "reset",
          value: function reset() {
            this.element.reset();
            this.clearForm();
          }
          /**
           * Get input element by name.
           * @param {string} name - Input element name attribute value.
           * @return {HTMLInputElement}
           */

        }, {
          key: "getInputElement",
          value: function getInputElement(name) {
            this.inputElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('[name="' + name + '"]', this.element);
            return this.inputElement;
          }
          /**
           * Destroy the form validator object and error elements.
           * @return {void}
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.reset();
            this.unwireEvents();
            this.rules = {};
            var elements = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + this.errorClass + ', .' + this.validClass, this.element);

            var _iterator88 = _createForOfIteratorHelper(elements),
                _step88;

            try {
              for (_iterator88.s(); !(_step88 = _iterator88.n()).done;) {
                var element = _step88.value;
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(element);
              }
            } catch (err) {
              _iterator88.e(err);
            } finally {
              _iterator88.f();
            }

            _get2(_getPrototypeOf2(FormValidator.prototype), "destroy", this).call(this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["onIntlChange"].off('notifyExternalChange', this.afterLocalization);
          }
          /**
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i122 = 0, _Object$keys52 = Object.keys(newProp); _i122 < _Object$keys52.length; _i122++) {
              var prop = _Object$keys52[_i122];

              switch (prop) {
                case 'locale':
                  this.localeFunc();
                  break;
              }
            }
          }
        }, {
          key: "localeFunc",

          /**
           * @private
           */
          value: function localeFunc() {
            for (var _i123 = 0, _Object$keys53 = Object.keys(this.defaultMessages); _i123 < _Object$keys53.length; _i123++) {
              var key = _Object$keys53[_i123];
              this.l10n.setLocale(this.locale);
              var value = this.l10n.getConstant(key);
              this.localyMessage[key] = value;
            }
          }
          /**
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'formValidator';
          }
          /**
           * @private
           */
          // tslint:disable-next-line:no-any

        }, {
          key: "afterLocalization",
          value: function afterLocalization(args) {
            this.locale = args.locale;
            this.localeFunc();
          }
          /**
           * Allows you to refresh the form validator base events to the elements inside the form.
           * @return {void}
           */

        }, {
          key: "refresh",
          value: function refresh() {
            this.unwireEvents();
            this.inputElements = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(this.selectQuery, this.element);
            this.wireEvents();
          }
        }, {
          key: "clearForm",
          value: function clearForm() {
            this.errorRules = [];
            this.validated = [];
            var elements = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])(this.selectQuery, this.element);

            var _iterator89 = _createForOfIteratorHelper(elements),
                _step89;

            try {
              for (_iterator89.s(); !(_step89 = _iterator89.n()).done;) {
                var element = _step89.value;
                var input = element;
                input.removeAttribute('aria-invalid');
                input.classList.remove(this.errorClass);

                if (input.name.length > 0) {
                  this.getInputElement(input.name);
                  this.getErrorElement(input.name);
                  this.hideMessage(input.name);
                }

                input.classList.remove(this.validClass);
              }
            } catch (err) {
              _iterator89.e(err);
            } finally {
              _iterator89.f();
            }
          }
        }, {
          key: "createHTML5Rules",
          value: function createHTML5Rules() {
            var defRules = ['required', 'validateHidden', 'regex', 'rangeLength', 'maxLength', 'minLength', 'dateIso', 'digits', 'pattern', 'data-val-required', 'type', 'data-validation', 'min', 'max', 'range', 'equalTo', 'data-val-minlength-min', 'data-val-equalto-other', 'data-val-maxlength-max', 'data-val-range-min', 'data-val-regex-pattern', 'data-val-length-max', 'data-val-creditcard', 'data-val-phone'];
            var acceptedTypes = ['hidden', 'email', 'url', 'date', 'number', 'tel'];

            var _iterator90 = _createForOfIteratorHelper(this.inputElements),
                _step90;

            try {
              for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {
                var input = _step90.value;
                // Default attribute rules 
                var allRule = {};

                var _iterator91 = _createForOfIteratorHelper(defRules),
                    _step91;

                try {
                  for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {
                    var rule = _step91.value;

                    if (input.getAttribute(rule) !== null) {
                      switch (rule) {
                        case 'required':
                          this.defRule(input, allRule, rule, input.required);
                          break;

                        case 'data-validation':
                          rule = input.getAttribute(rule);
                          this.defRule(input, allRule, rule, true);
                          break;

                        case 'type':
                          if (acceptedTypes.indexOf(input.type) !== -1) {
                            this.defRule(input, allRule, input.type, true);
                          }

                          break;

                        case 'rangeLength':
                        case 'range':
                          this.defRule(input, allRule, rule, JSON.parse(input.getAttribute(rule)));
                          break;

                        case 'equalTo':
                          var id = input.getAttribute(rule);
                          this.defRule(input, allRule, rule, id);
                          break;

                        default:
                          if (input.getAttribute('data-val') === 'true') {
                            this.annotationRule(input, allRule, rule, input.getAttribute(rule));
                          } else {
                            this.defRule(input, allRule, rule, input.getAttribute(rule));
                          }

                      }
                    }
                  } //adding pattern type validation

                } catch (err) {
                  _iterator91.e(err);
                } finally {
                  _iterator91.f();
                }

                if (Object.keys(allRule).length !== 0) {
                  this.addRules(input.name, allRule);
                }
              }
            } catch (err) {
              _iterator90.e(err);
            } finally {
              _iterator90.f();
            }
          }
        }, {
          key: "annotationRule",
          value: function annotationRule(input, ruleCon, ruleName, value) {
            var annotationRule = ruleName.split('-');
            var rulesList = ['required', 'creditcard', 'phone', 'maxlength', 'minlength', 'range', 'regex', 'equalto'];
            var ruleFirstName = annotationRule[annotationRule.length - 1];
            var ruleSecondName = annotationRule[annotationRule.length - 2];

            if (rulesList.indexOf(ruleFirstName) !== -1) {
              switch (ruleFirstName) {
                case 'required':
                  this.defRule(input, ruleCon, 'required', value);
                  break;

                case 'creditcard':
                  this.defRule(input, ruleCon, 'creditcard', value);
                  break;

                case 'phone':
                  this.defRule(input, ruleCon, 'tel', value);
                  break;
              }
            } else if (rulesList.indexOf(ruleSecondName) !== -1) {
              switch (ruleSecondName) {
                case 'maxlength':
                  this.defRule(input, ruleCon, 'maxLength', value);
                  break;

                case 'minlength':
                  this.defRule(input, ruleCon, 'minLength', value);
                  break;

                case 'range':
                  var minvalue = input.getAttribute('data-val-range-min');
                  var maxvalue = input.getAttribute('data-val-range-max');
                  this.defRule(input, ruleCon, 'range', [minvalue, maxvalue]);
                  break;

                case 'equalto':
                  var id = input.getAttribute(ruleName).split('.');
                  this.defRule(input, ruleCon, 'equalTo', id[id.length - 1]);
                  break;

                case 'regex':
                  this.defRule(input, ruleCon, 'regex', value);
                  break;
              }
            }
          }
        }, {
          key: "defRule",
          value: function defRule(input, ruleCon, ruleName, value) {
            var message = input.getAttribute('data-' + ruleName + '-message');
            var annotationMessage = input.getAttribute('data-val-' + ruleName);
            var customMessage;

            if (this.rules[input.name] && ruleName !== 'validateHidden' && ruleName !== 'hidden') {
              this.getInputElement(input.name);
              customMessage = this.getErrorMessage(this.rules[input.name][ruleName], ruleName);
            }

            if (message) {
              value = [value, message];
            } else if (annotationMessage) {
              value = [value, annotationMessage];
            } else if (customMessage) {
              value = [value, customMessage];
            }

            ruleCon[ruleName] = value;
          } // Wire events to the form elements

        }, {
          key: "wireEvents",
          value: function wireEvents() {
            var _iterator92 = _createForOfIteratorHelper(this.inputElements),
                _step92;

            try {
              for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {
                var input = _step92.value;

                if (FormValidator_1.isCheckable(input)) {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(input, 'click', this.clickHandler, this);
                } else if (input.tagName === 'SELECT') {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(input, 'change', this.changeHandler, this);
                } else {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(input, 'focusout', this.focusOutHandler, this);

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(input, 'keyup', this.keyUpHandler, this);
                }
              }
            } catch (err) {
              _iterator92.e(err);
            } finally {
              _iterator92.f();
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'submit', this.submitHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'reset', this.resetHandler, this);
          } // UnWire events to the form elements

        }, {
          key: "unwireEvents",
          value: function unwireEvents() {
            var _iterator93 = _createForOfIteratorHelper(this.inputElements),
                _step93;

            try {
              for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {
                var input = _step93.value;

                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].clearEvents(input);
              }
            } catch (err) {
              _iterator93.e(err);
            } finally {
              _iterator93.f();
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'submit', this.submitHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'reset', this.resetHandler);
          } // Handle input element focusout event

        }, {
          key: "focusOutHandler",
          value: function focusOutHandler(e) {
            this.trigger('focusout', e); //FormValidator.triggerCallback(this.focusout, e);

            var element = e.target;

            if (this.rules[element.name]) {
              if (this.rules[element.name][this.required] || element.value.length > 0) {
                this.validate(element.name);
              } else if (this.validated.indexOf(element.name) === -1) {
                this.validated.push(element.name);
              }
            }
          } // Handle input element keyup event

        }, {
          key: "keyUpHandler",
          value: function keyUpHandler(e) {
            this.trigger('keyup', e);
            var element = e.target; // List of keys need to prevent while validation

            var excludeKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];

            if (e.which === 9 && (!this.rules[element.name] || this.rules[element.name] && !this.rules[element.name][this.required])) {
              return;
            }

            if (this.validated.indexOf(element.name) !== -1 && this.rules[element.name] && excludeKeys.indexOf(e.which) === -1) {
              this.validate(element.name);
            }
          } // Handle input click event

        }, {
          key: "clickHandler",
          value: function clickHandler(e) {
            this.trigger('click', e);
            var element = e.target; // If element type is not submit allow validation

            if (element.type !== 'submit') {
              this.validate(element.name);
            } else if (element.getAttribute('formnovalidate') !== null) {
              // Prevent form validation, if submit button has formnovalidate attribute
              this.allowSubmit = true;
            }
          } // Handle input change event

        }, {
          key: "changeHandler",
          value: function changeHandler(e) {
            this.trigger('change', e);
            var element = e.target;
            this.validate(element.name);
          } // Handle form submit event

        }, {
          key: "submitHandler",
          value: function submitHandler(e) {
            this.trigger('submit', e); //FormValidator.triggerCallback(this.submit, e);
            // Prevent form submit if validation failed

            if (!this.allowSubmit && !this.validate()) {
              e.preventDefault();
            } else {
              this.allowSubmit = false;
            }
          } // Handle form reset

        }, {
          key: "resetHandler",
          value: function resetHandler() {
            this.clearForm();
          } // Validate each rule based on input element name

        }, {
          key: "validateRules",
          value: function validateRules(name) {
            if (!this.rules[name]) {
              return;
            }

            var rules = Object.keys(this.rules[name]);
            var hiddenType = false;
            var validateHiddenType = false;
            var vhPos = rules.indexOf('validateHidden');
            var hPos = rules.indexOf('hidden');
            this.getInputElement(name);

            if (hPos !== -1) {
              hiddenType = true;
            }

            if (vhPos !== -1) {
              validateHiddenType = true;
            }

            if (!hiddenType || hiddenType && validateHiddenType) {
              if (vhPos !== -1) {
                rules.splice(vhPos, 1);
              }

              if (hPos !== -1) {
                rules.splice(hPos - 1, 1);
              }

              this.getErrorElement(name);

              var _iterator94 = _createForOfIteratorHelper(rules),
                  _step94;

              try {
                for (_iterator94.s(); !(_step94 = _iterator94.n()).done;) {
                  var rule = _step94.value;
                  var errorMessage = this.getErrorMessage(this.rules[name][rule], rule);
                  var errorRule = {
                    name: name,
                    message: errorMessage
                  };
                  var eventArgs = {
                    inputName: name,
                    element: this.inputElement,
                    message: errorMessage
                  };

                  if (!this.isValid(name, rule) && !this.inputElement.classList.contains(this.ignore)) {
                    this.removeErrorRules(name);
                    this.errorRules.push(errorRule); // Set aria attributes to invalid elements

                    this.inputElement.setAttribute('aria-invalid', 'true');
                    this.inputElement.setAttribute('aria-describedby', this.inputElement.id + '-info');
                    this.inputElement.classList.add(this.errorClass);
                    this.inputElement.classList.remove(this.validClass);

                    if (!this.infoElement) {
                      this.createErrorElement(name, errorRule.message, this.inputElement);
                    } else {
                      this.showMessage(errorRule);
                    }

                    eventArgs.errorElement = this.infoElement;
                    eventArgs.status = 'failure';
                    this.inputElement.classList.add(this.errorClass);
                    this.inputElement.classList.remove(this.validClass);
                    this.optionalValidationStatus(name, eventArgs);
                    this.trigger('validationComplete', eventArgs); // Set aria-required to required rule elements

                    if (rule === 'required') {
                      this.inputElement.setAttribute('aria-required', 'true');
                    }

                    break;
                  } else {
                    this.hideMessage(name);
                    eventArgs.status = 'success';
                    this.trigger('validationComplete', eventArgs);
                  }
                }
              } catch (err) {
                _iterator94.e(err);
              } finally {
                _iterator94.f();
              }
            } else {
              return;
            }
          } // Update the optional validation status

        }, {
          key: "optionalValidationStatus",
          value: function optionalValidationStatus(name, refer) {
            if (!this.rules[name][this.required] && !this.inputElement.value.length && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.infoElement)) {
              this.infoElement.innerHTML = this.inputElement.value;
              this.infoElement.setAttribute('aria-invalid', 'false');
              refer.status = '';
              this.hideMessage(name);
            }
          } // Check the input element whether it's value satisfy the validation rule or not

        }, {
          key: "isValid",
          value: function isValid(name, rule) {
            var params = this.rules[name][rule];
            var param = params instanceof Array && typeof params[1] === 'string' ? params[0] : params;
            var currentRule = this.rules[name][rule];
            var args = {
              value: this.inputElement.value,
              param: param,
              element: this.inputElement,
              formElement: this.element
            };
            this.trigger('validationBegin', args);

            if (currentRule && typeof currentRule[0] === 'function') {
              var fn = currentRule[0];
              return fn.call(this, {
                element: this.inputElement,
                value: this.inputElement.value
              });
            } else if (FormValidator_1.isCheckable(this.inputElement)) {
              if (rule !== 'required') {
                return true;
              }

              return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('input[name=' + name + ']:checked', this.element).length > 0;
            } else {
              return FormValidator_1.checkValidator[rule](args);
            }
          } // Return default error message or custom error message 

        }, {
          key: "getErrorMessage",
          value: function getErrorMessage(ruleValue, rule) {
            var message = this.inputElement.getAttribute('data-' + rule + '-message') ? this.inputElement.getAttribute('data-' + rule + '-message') : ruleValue instanceof Array && typeof ruleValue[1] === 'string' ? ruleValue[1] : Object.keys(this.localyMessage).length !== 0 ? this.localyMessage[rule] : this.defaultMessages[rule];
            var formats = message.match(/{(\d)}/g);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(formats)) {
              for (var i = 0; i < formats.length; i++) {
                var value = ruleValue instanceof Array ? ruleValue[i] : ruleValue;
                message = message.replace(formats[i], value);
              }
            }

            return message;
          } // Create error element based on name and error message

        }, {
          key: "createErrorElement",
          value: function createErrorElement(name, message, input) {
            var errorElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])(this.errorElement, {
              className: this.errorClass,
              innerHTML: message,
              attrs: {
                "for": name
              }
            }); // Create message design if errorOption is message

            if (this.errorOption === ErrorOption.Message) {
              errorElement.classList.remove(this.errorClass);
              errorElement.classList.add('e-message');
              errorElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["createElement"])(this.errorContainer, {
                className: this.errorClass,
                innerHTML: errorElement.outerHTML
              });
            }

            errorElement.id = this.inputElement.name + '-info'; // Append error message into MVC error message element

            if (this.element.querySelector('[data-valmsg-for="' + input.id + '"]')) {
              this.element.querySelector('[data-valmsg-for="' + input.id + '"]').appendChild(errorElement);
            } else if (input.hasAttribute('data-msg-containerid') === true) {
              // Append error message into custom div element
              var containerId = input.getAttribute('data-msg-containerid');
              var divElement = this.element.querySelector('#' + containerId);
              divElement.appendChild(errorElement);
            } else if (this.customPlacement != null) {
              // Call custom placement function if customPlacement is not null
              this.customPlacement.call(this, this.inputElement, errorElement);
            } else {
              this.inputElement.parentNode.insertBefore(errorElement, this.inputElement.nextSibling);
            }

            errorElement.style.display = 'block';
            this.getErrorElement(name);
            this.validated.push(name);
            this.checkRequired(name);
          } // Get error element by name

        }, {
          key: "getErrorElement",
          value: function getErrorElement(name) {
            this.infoElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(this.errorElement + '.' + this.errorClass, this.inputElement.parentElement);

            if (!this.infoElement) {
              this.infoElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])(this.errorElement + '.' + this.errorClass + '[for="' + name + '"]', this.element);
            }

            return this.infoElement;
          } // Remove existing rule from errorRules object

        }, {
          key: "removeErrorRules",
          value: function removeErrorRules(name) {
            for (var i = 0; i < this.errorRules.length; i++) {
              var rule = this.errorRules[i];

              if (rule.name === name) {
                this.errorRules.splice(i, 1);
              }
            }
          } // Show error message to the input element

        }, {
          key: "showMessage",
          value: function showMessage(errorRule) {
            this.infoElement.style.display = 'block';
            this.infoElement.innerHTML = errorRule.message;
            this.checkRequired(errorRule.name);
          } // Hide error message based on input name

        }, {
          key: "hideMessage",
          value: function hideMessage(name) {
            if (this.infoElement) {
              this.infoElement.style.display = 'none';
              this.removeErrorRules(name);
              this.inputElement.classList.add(this.validClass);
              this.inputElement.classList.remove(this.errorClass);
              this.inputElement.setAttribute('aria-invalid', 'false');
            }
          } // Check whether the input element have required rule and its value is not empty

        }, {
          key: "checkRequired",
          value: function checkRequired(name) {
            if (!this.rules[name][this.required] && !this.inputElement.value.length && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.infoElement)) {
              this.infoElement.innerHTML = this.inputElement.value;
              this.infoElement.setAttribute('aria-invalid', 'false');
              this.hideMessage(name);
            }
          } // Return boolean result if the input have chekcable or submit types

        }], [{
          key: "isCheckable",
          value: function isCheckable(input) {
            var inputType = input.getAttribute('type');
            return inputType && (inputType === 'checkbox' || inputType === 'radio' || inputType === 'submit');
          }
        }]);

        return FormValidator;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Base"]); // List of function to validate the rules


      FormValidator.checkValidator = {
        required: function required(option) {
          return !isNaN(Date.parse(option.value)) ? !isNaN(new Date(option.value).getTime()) : option.value.toString().length > 0;
        },
        email: function email(option) {
          return regex.EMAIL.test(option.value);
        },
        url: function url(option) {
          return regex.URL.test(option.value);
        },
        dateIso: function dateIso(option) {
          return regex.DATE_ISO.test(option.value);
        },
        tel: function tel(option) {
          return regex.PHONE.test(option.value);
        },
        creditcard: function creditcard(option) {
          return regex.CREDITCARD.test(option.value);
        },
        number: function number(option) {
          return !isNaN(Number(option.value)) && option.value.indexOf(' ') === -1;
        },
        digits: function digits(option) {
          return regex.DIGITS.test(option.value);
        },
        maxLength: function maxLength(option) {
          return option.value.length <= option.param;
        },
        minLength: function minLength(option) {
          return option.value.length >= option.param;
        },
        rangeLength: function rangeLength(option) {
          var param = option.param;
          return option.value.length >= param[0] && option.value.length <= param[1];
        },
        range: function range(option) {
          var param = option.param;
          return !isNaN(Number(option.value)) && Number(option.value) >= param[0] && Number(option.value) <= param[1];
        },
        date: function date(option) {
          return !isNaN(new Date(option.value).getTime());
        },
        max: function max(option) {
          if (!isNaN(Number(option.value))) {
            // Maximum rule validation for number
            return +option.value <= option.param;
          } // Maximum rule validation for date


          return new Date(option.value).getTime() <= new Date(JSON.parse(JSON.stringify(option.param))).getTime();
        },
        min: function min(option) {
          if (!isNaN(Number(option.value))) {
            // Minimum rule validation for number
            return +option.value >= option.param;
          } else if (option.value.indexOf(',') !== -1) {
            var uNum = option.value.replace(/,/g, '');
            return parseFloat(uNum) >= option.param;
          } else {
            // Minimum rule validation for date
            return new Date(option.value).getTime() >= new Date(JSON.parse(JSON.stringify(option.param))).getTime();
          }
        },
        regex: function regex(option) {
          return new RegExp(option.param).test(option.value);
        },
        equalTo: function equalTo(option) {
          var compareTo = option.formElement.querySelector('#' + option.param);
          option.param = compareTo.value;
          return option.param === option.value;
        }
      };

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], FormValidator.prototype, "locale", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('e-hidden')], FormValidator.prototype, "ignore", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])()], FormValidator.prototype, "rules", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('e-error')], FormValidator.prototype, "errorClass", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('e-valid')], FormValidator.prototype, "validClass", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('label')], FormValidator.prototype, "errorElement", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('div')], FormValidator.prototype, "errorContainer", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(ErrorOption.Label)], FormValidator.prototype, "errorOption", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "focusout", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "keyup", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "click", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "change", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "submit", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "validationBegin", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "validationComplete", void 0);

      __decorate$3([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], FormValidator.prototype, "customPlacement", void 0);

      FormValidator = FormValidator_1 = __decorate$3([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], FormValidator);
      /**
       * Input box Component
       */

      var __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var CONTROL_WRAPPER = 'e-upload e-control-wrapper';
      var INPUT_WRAPPER = 'e-file-select';
      var DROP_AREA = 'e-file-drop';
      var DROP_WRAPPER = 'e-file-select-wrap';
      var LIST_PARENT = 'e-upload-files';
      var FILE = 'e-upload-file-list';
      var STATUS = 'e-file-status';
      var ACTION_BUTTONS = 'e-upload-actions';
      var UPLOAD_BUTTONS = 'e-file-upload-btn e-css e-btn e-flat e-primary';
      var CLEAR_BUTTONS = 'e-file-clear-btn e-css e-btn e-flat';
      var FILE_NAME = 'e-file-name';
      var FILE_TYPE = 'e-file-type';
      var FILE_SIZE = 'e-file-size';
      var REMOVE_ICON = 'e-file-remove-btn';
      var DELETE_ICON = 'e-file-delete-btn';
      var SPINNER_PANE = 'e-spinner-pane';
      var ABORT_ICON = 'e-file-abort-btn';
      var RETRY_ICON = 'e-file-reload-btn';
      var DRAG_HOVER = 'e-upload-drag-hover';
      var PROGRESS_WRAPPER = 'e-upload-progress-wrap';
      var PROGRESSBAR = 'e-upload-progress-bar';
      var PROGRESSBAR_TEXT = 'e-progress-bar-text';
      var UPLOAD_INPROGRESS = 'e-upload-progress';
      var UPLOAD_SUCCESS = 'e-upload-success';
      var UPLOAD_FAILED = 'e-upload-fails';
      var TEXT_CONTAINER = 'e-file-container';
      var VALIDATION_FAILS = 'e-validation-fails';
      var RTL = 'e-rtl';
      var DISABLED = 'e-disabled';
      var RTL_CONTAINER = 'e-rtl-container';
      var ICON_FOCUSED = 'e-clear-icon-focus';
      var PROGRESS_INNER_WRAPPER = 'e-progress-inner-wrap';
      var PAUSE_UPLOAD = 'e-file-pause-btn';
      var RESUME_UPLOAD = 'e-file-play-btn';
      var RESTRICT_RETRY = 'e-restrict-retry';
      var wrapperAttr$1 = ['title', 'style', 'class'];
      var FORM_UPLOAD = 'e-form-upload';
      var HIDDEN_INPUT = 'e-hidden-file-input';
      var INVALID_FILE = 'e-file-invalid';
      var INFORMATION = 'e-file-information';

      var FilesProp = /*#__PURE__*/function (_syncfusion_ej2_base_57) {
        _inherits2(FilesProp, _syncfusion_ej2_base_57);

        var _super82 = _createSuper(FilesProp);

        function FilesProp() {
          _classCallCheck2(this, FilesProp);

          return _super82.apply(this, arguments);
        }

        return FilesProp;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], FilesProp.prototype, "name", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], FilesProp.prototype, "size", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], FilesProp.prototype, "type", void 0);

      var ButtonsProps = /*#__PURE__*/function (_syncfusion_ej2_base_58) {
        _inherits2(ButtonsProps, _syncfusion_ej2_base_58);

        var _super83 = _createSuper(ButtonsProps);

        function ButtonsProps() {
          _classCallCheck2(this, ButtonsProps);

          return _super83.apply(this, arguments);
        }

        return ButtonsProps;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Browse...')], ButtonsProps.prototype, "browse", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Upload')], ButtonsProps.prototype, "upload", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Clear')], ButtonsProps.prototype, "clear", void 0);

      var AsyncSettings = /*#__PURE__*/function (_syncfusion_ej2_base_59) {
        _inherits2(AsyncSettings, _syncfusion_ej2_base_59);

        var _super84 = _createSuper(AsyncSettings);

        function AsyncSettings() {
          _classCallCheck2(this, AsyncSettings);

          return _super84.apply(this, arguments);
        }

        return AsyncSettings;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["ChildProperty"]);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], AsyncSettings.prototype, "saveUrl", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], AsyncSettings.prototype, "removeUrl", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], AsyncSettings.prototype, "chunkSize", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(3)], AsyncSettings.prototype, "retryCount", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(500)], AsyncSettings.prototype, "retryAfterDelay", void 0);
      /**
       * The uploader component allows to upload images, documents, and other files from local to server.
       * ```html
       * <input type='file' name='images[]' id='upload'/>
       * ```
       * ```typescript
       * <script>
       *   var uploadObj = new Uploader();
       *   uploadObj.appendTo('#upload');
       * </script>
       * ```
       */


      var Uploader = /*#__PURE__*/function (_syncfusion_ej2_base_60) {
        _inherits2(Uploader, _syncfusion_ej2_base_60);

        var _super85 = _createSuper(Uploader);

        /**
         * Triggers when change the Uploader value.
         */
        function Uploader(options, element) {
          var _this252;

          _classCallCheck2(this, Uploader);

          _this252 = _super85.call(this, options, element);
          _this252.initialAttr = {
            accept: null,
            multiple: false,
            disabled: false
          };
          _this252.uploadedFilesData = [];
          _this252.base64String = [];
          _this252.isForm = false;
          _this252.allTypes = false;
          _this252.pausedData = [];
          _this252.uploadMetaData = [];
          _this252.tabIndex = '0';
          _this252.btnTabIndex = '0';
          _this252.disableKeyboardNavigation = false;
          _this252.count = -1;
          _this252.actionCompleteCount = 0;
          _this252.flag = true;
          _this252.selectedFiles = [];
          _this252.uploaderName = 'UploadFiles';
          _this252.fileStreams = [];
          _this252.newFileRef = 0;
          _this252.isFirstFileOnSelection = false;
          /**
           * Get the file item(li) which are shown in file list.
           * @private
           */

          _this252.fileList = [];
          /**
           * Get the data of files which are shown in file list.
           * @private
           */

          _this252.filesData = [];
          _this252.uploaderOptions = options;
          return _this252;
        }
        /**
         * Calls internally if any of the property value is changed.
         * @private
         */


        _createClass2(Uploader, [{
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i124 = 0, _Object$keys54 = Object.keys(newProp); _i124 < _Object$keys54.length; _i124++) {
              var prop = _Object$keys54[_i124];

              switch (prop) {
                case 'allowedExtensions':
                  this.setExtensions(this.allowedExtensions);
                  this.clearAll();
                  break;

                case 'enabled':
                  this.setControlStatus();
                  break;

                case 'multiple':
                  this.setMultipleSelection();
                  break;

                case 'enableRtl':
                  this.setRTL();
                  this.reRenderFileList();
                  break;

                case 'buttons':
                  this.buttons.browse = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons.browse) ? '' : this.buttons.browse;
                  this.buttons.clear = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons.clear) ? '' : this.buttons.clear;
                  this.buttons.upload = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons.upload) ? '' : this.buttons.upload;
                  this.renderButtonTemplates();
                  break;

                case 'dropArea':
                  this.unBindDropEvents();
                  this.updateDropArea();
                  break;

                case 'htmlAttributes':
                  this.updateHTMLAttrToElement();
                  this.updateHTMLAttrToWrapper();
                  this.checkHTMLAttributes(true);
                  break;

                case 'files':
                  this.renderPreLoadFiles();
                  break;

                case 'directoryUpload':
                  this.updateDirectoryAttributes();
                  break;

                case 'template':
                  if (!this.isServerBlazor) {
                    this.clearAll();
                  }

                  break;

                case 'minFileSize':
                case 'maxFileSize':
                case 'autoUpload':
                  this.clearAll();
                  break;

                case 'sequentialUpload':
                  this.clearAll();
                  break;

                case 'locale':
                  this.l10n.setLocale(this.locale);
                  this.setLocalizedTexts();
                  this.preLocaleObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('currentLocale', this.l10n);
                  break;

                case 'cssClass':
                  this.setCSSClass(oldProp.cssClass);
                  break;
              }
            }
          }
        }, {
          key: "setLocalizedTexts",
          value: function setLocalizedTexts() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template)) {
              if (typeof this.buttons.browse === 'string') {
                this.browseButton.innerText = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;
                this.browseButton.setAttribute('title', this.browseButton.innerText);

                if (this.uploadWrapper && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploadWrapper.querySelector('.' + DROP_AREA))) {
                  this.uploadWrapper.querySelector('.' + DROP_AREA).innerHTML = this.localizedTexts('dropFilesHint');
                }
              }

              this.updateFileList();
            }
          }
        }, {
          key: "getKeyValue",
          value: function getKeyValue(val) {
            var keyValue;

            for (var _i125 = 0, _Object$keys55 = Object.keys(this.preLocaleObj); _i125 < _Object$keys55.length; _i125++) {
              var key = _Object$keys55[_i125];

              if (this.preLocaleObj[key] === val) {
                keyValue = key;
              }
            }

            return keyValue;
          }
        }, {
          key: "updateFileList",
          value: function updateFileList() {
            var element;
            /* istanbul ignore next */

            if (this.fileList.length > 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploadWrapper.querySelector('.' + LIST_PARENT))) {
              for (var i = 0; i < this.fileList.length; i++) {
                element = this.fileList[i].querySelector('.e-file-status');
                element.innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[i].status));
                this.filesData[i].status = this.localizedTexts(this.getKeyValue(this.filesData[i].status));

                if (this.fileList[i].classList.contains(UPLOAD_SUCCESS)) {
                  this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('delete'));
                }

                if (this.fileList[i].querySelector('.e-file-play-btn')) {
                  this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('resume'));
                }

                if (this.fileList[i].querySelector('.e-file-remove-btn')) {
                  this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('remove'));
                }

                if (this.fileList[i].querySelector('.e-file-reload-btn')) {
                  this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('retry'));
                }

                if (!this.autoUpload) {
                  this.uploadButton.innerText = this.buttons.upload === 'Upload' ? this.localizedTexts('Upload') : this.buttons.upload;
                  this.uploadButton.setAttribute('title', this.localizedTexts('Upload'));
                  this.clearButton.innerText = this.buttons.clear === 'Clear' ? this.localizedTexts('Clear') : this.buttons.clear;
                  this.clearButton.setAttribute('title', this.localizedTexts('Clear'));
                }
              }
            }
          }
        }, {
          key: "reRenderFileList",
          value: function reRenderFileList() {
            if (this.listParent) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.listParent);
              this.listParent = null;
              this.fileList = [];
              this.createFileList(this.filesData);

              if (this.actionButtons) {
                this.removeActionButtons();
                this.renderActionButtons();
                this.checkActionButtonStatus();
              }
            }
          }
        }, {
          key: "preRender",
          value: function preRender() {
            this.localeText = {
              Browse: 'Browse...',
              Clear: 'Clear',
              Upload: 'Upload',
              dropFilesHint: 'Or drop files here',
              invalidMaxFileSize: 'File size is too large',
              invalidMinFileSize: 'File size is too small',
              invalidFileType: 'File type is not allowed',
              uploadFailedMessage: 'File failed to upload',
              uploadSuccessMessage: 'File uploaded successfully',
              removedSuccessMessage: 'File removed successfully',
              removedFailedMessage: 'Unable to remove file',
              inProgress: 'Uploading',
              readyToUploadMessage: 'Ready to upload',
              abort: 'Abort',
              remove: 'Remove',
              cancel: 'Cancel',
              "delete": 'Delete file',
              pauseUpload: 'File upload paused',
              pause: 'Pause',
              resume: 'Resume',
              retry: 'Retry',
              fileUploadCancel: 'File upload canceled',
              invalidFileSelection: 'Invalid files selected',
              totalFiles: 'Total files',
              size: 'Size'
            };
            this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('uploader', this.localeText, this.locale);
            this.preLocaleObj = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('currentLocale', this.l10n);
            this.isServerBlazor = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered ? true : false;
            this.isBlazorTemplate = this.isServerBlazor && this.template !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) ? true : false;
            this.isBlazorSaveUrl = this.isServerRendered && (this.asyncSettings.saveUrl === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.asyncSettings.saveUrl)) ? true : false;

            if (this.isBlazorSaveUrl && this.sequentialUpload) {
              this.sequentialUpload = false;
            }

            if (!this.isBlazorSaveUrl) {
              this.formRendered();
            }

            if (!this.isServerBlazor) {
              this.updateHTMLAttrToElement();
              this.checkHTMLAttributes(false); // tslint:disable-next-line

              var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', this.element);
              /* istanbul ignore next */

              if (this.element.tagName === 'EJS-UPLOADER') {
                var inputElement = this.createElement('input', {
                  attrs: {
                    type: 'file'
                  }
                });
                var index = 0;

                for (index; index < this.element.attributes.length; index++) {
                  inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);
                  inputElement.innerHTML = this.element.innerHTML;
                }

                if (!inputElement.hasAttribute('name')) {
                  inputElement.setAttribute('name', 'UploadFiles');
                }

                this.element.appendChild(inputElement);
                this.element = inputElement;
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInstance, this.element);
              }
              /* istanbul ignore next */


              if (ejInstance[0].isPureReactComponent) {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ejInstance[0].props.name)) {
                  this.element.setAttribute('name', ejInstance[0].props.name);
                } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ejInstance[0].props.id) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(ejInstance[0].props.name)) {
                  this.element.setAttribute('name', ejInstance[0].props.id);
                } else {
                  this.element.setAttribute('name', 'UploadFiles');
                }
              }

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute('name'))) {
                this.element.setAttribute('name', this.element.getAttribute('id'));
              }

              if (!this.element.hasAttribute('type')) {
                this.element.setAttribute('type', 'file');
              }

              this.updateDirectoryAttributes();
            }

            this.keyConfigs = {
              enter: 'enter'
            };

            if (this.element.hasAttribute('tabindex')) {
              this.tabIndex = this.element.getAttribute('tabindex');
            }

            this.browserName = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].info.name;
            this.uploaderName = this.element.getAttribute('name');
          }
        }, {
          key: "formRendered",
          value: function formRendered() {
            var parentEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(parentEle)) {
              for (; parentEle && parentEle !== document.documentElement; parentEle = parentEle.parentElement) {
                if (parentEle.tagName === 'FORM') {
                  this.isForm = true;
                  this.formElement = parentEle;
                  parentEle.setAttribute('enctype', 'multipart/form-data');
                  parentEle.setAttribute('encoding', 'multipart/form-data');
                }
              }
            }
          }
        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist(['filesData']);
          }
          /**
           * Return the module name of the component.
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'uploader';
          }
        }, {
          key: "updateDirectoryAttributes",
          value: function updateDirectoryAttributes() {
            if (this.directoryUpload) {
              this.element.setAttribute('directory', 'true');
              this.element.setAttribute('webkitdirectory', 'true');
            } else {
              this.element.removeAttribute('directory');
              this.element.removeAttribute('webkitdirectory');
            }
          }
          /**
           * To Initialize the control rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            if (!this.isServerBlazor) {
              this.renderBrowseButton();
              this.initializeUpload();
              this.updateHTMLAttrToWrapper();
              this.wireEvents();
              this.setMultipleSelection();
              this.setExtensions(this.allowedExtensions);
              this.setRTL();
              this.renderPreLoadFiles();
              this.setControlStatus();
              this.setCSSClass();
            } else {
              this.dropAreaWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, '.' + DROP_WRAPPER);
              this.uploadWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, '.e-upload.e-control-wrapper');
              this.browseButton = this.dropAreaWrapper.querySelector('button.e-upload-browse-btn');
              this.setDropArea();
              this.renderPreLoadFiles();
              this.wireEvents();
            }

            this.renderComplete();
          }
        }, {
          key: "renderBrowseButton",
          value: function renderBrowseButton() {
            this.browseButton = this.createElement('button', {
              className: 'e-css e-btn',
              attrs: {
                'type': 'button'
              }
            });
            this.browseButton.setAttribute('tabindex', this.tabIndex);

            if (typeof this.buttons.browse === 'string') {
              this.browseButton.textContent = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;
              this.browseButton.setAttribute('title', this.browseButton.innerText);
            } else {
              this.browseButton.appendChild(this.buttons.browse);
            }

            this.element.setAttribute('aria-label', 'Uploader');
          }
        }, {
          key: "renderActionButtons",
          value: function renderActionButtons() {
            this.element.setAttribute('tabindex', '-1');

            if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {
              this.actionButtons = this.createElement('div', {
                className: ACTION_BUTTONS
              });
              this.uploadButton = this.createElement('button', {
                className: UPLOAD_BUTTONS,
                attrs: {
                  'type': 'button',
                  'tabindex': this.btnTabIndex
                }
              });
              this.clearButton = this.createElement('button', {
                className: CLEAR_BUTTONS,
                attrs: {
                  'type': 'button',
                  'tabindex': this.btnTabIndex
                }
              });
              this.actionButtons.appendChild(this.clearButton);
              this.actionButtons.appendChild(this.uploadButton);
              this.renderButtonTemplates();
              this.uploadWrapper.appendChild(this.actionButtons);
              this.browseButton.blur();
              this.uploadButton.focus();
              this.wireActionButtonEvents();
            }
          }
          /* istanbul ignore next */

        }, {
          key: "serverActionButtonsEventBind",
          value: function serverActionButtonsEventBind(element) {
            if (element && !this.isForm) {
              this.browseButton.blur();
              this.actionButtons = element;
              this.uploadButton = this.actionButtons.querySelector('.e-file-upload-btn');
              this.clearButton = this.actionButtons.querySelector('.e-file-clear-btn');
              this.uploadButton.focus();
              this.unwireActionButtonEvents();
              this.wireActionButtonEvents();
              this.checkActionButtonStatus();
            }
          }
          /* istanbul ignore next */

        }, {
          key: "serverUlElement",
          value: function serverUlElement(element) {
            if (element) {
              if (this.isBlazorSaveUrl || this.isBlazorTemplate) {
                this.listParent = element;
                this.fileList = [].slice.call(this.listParent.querySelectorAll('li'));
                this.serverRemoveIconBindEvent();

                if (!this.isForm) {
                  this.checkAutoUpload(this.filesData);
                }
              }
            }
          }
        }, {
          key: "wireActionButtonEvents",
          value: function wireActionButtonEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.uploadButton, 'click', this.uploadButtonClick, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.clearButton, 'click', this.clearButtonClick, this);
          }
        }, {
          key: "unwireActionButtonEvents",
          value: function unwireActionButtonEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.uploadButton, 'click', this.uploadButtonClick);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.clearButton, 'click', this.clearButtonClick);
          }
        }, {
          key: "removeActionButtons",
          value: function removeActionButtons() {
            if (this.actionButtons) {
              this.unwireActionButtonEvents();

              if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.actionButtons);
              }

              this.actionButtons = null;
            }
          }
        }, {
          key: "renderButtonTemplates",
          value: function renderButtonTemplates() {
            if (typeof this.buttons.browse === 'string') {
              this.browseButton.textContent = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;
              this.browseButton.setAttribute('title', this.browseButton.textContent);
            } else {
              this.browseButton.innerHTML = '';
              this.browseButton.appendChild(this.buttons.browse);
            }

            if (this.uploadButton) {
              var uploadText;
              uploadText = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons.upload) ? 'Upload' : this.buttons.upload;
              this.buttons.upload = uploadText;

              if (typeof this.buttons.upload === 'string') {
                this.uploadButton.textContent = this.buttons.upload === 'Upload' ? this.localizedTexts('Upload') : this.buttons.upload;
                this.uploadButton.setAttribute('title', this.uploadButton.textContent);
              } else {
                this.uploadButton.innerHTML = '';
                this.uploadButton.appendChild(this.buttons.upload);
              }
            }

            if (this.clearButton) {
              var clearText;
              clearText = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.buttons.clear) ? 'Clear' : this.buttons.clear;
              this.buttons.clear = clearText;

              if (typeof this.buttons.clear === 'string') {
                this.clearButton.textContent = this.buttons.clear === 'Clear' ? this.localizedTexts('Clear') : this.buttons.clear;
                this.clearButton.setAttribute('title', this.clearButton.textContent);
              } else {
                this.clearButton.innerHTML = '';
                this.clearButton.appendChild(this.buttons.clear);
              }
            }
          }
        }, {
          key: "initializeUpload",
          value: function initializeUpload() {
            this.element.setAttribute('tabindex', '-1');
            var inputWrapper = this.createElement('span', {
              className: INPUT_WRAPPER
            });
            this.element.parentElement.insertBefore(inputWrapper, this.element);
            this.dropAreaWrapper = this.createElement('div', {
              className: DROP_WRAPPER
            });
            this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element);
            inputWrapper.appendChild(this.element);
            this.dropAreaWrapper.appendChild(this.browseButton);
            this.dropAreaWrapper.appendChild(inputWrapper);
            this.uploadWrapper = this.createElement('div', {
              className: CONTROL_WRAPPER
            });
            this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper);
            this.uploadWrapper.appendChild(this.dropAreaWrapper);
            this.setDropArea();
          }
        }, {
          key: "renderPreLoadFiles",
          value: function renderPreLoadFiles() {
            if (this.files.length) {
              if (this.enablePersistence && this.filesData.length) {
                this.createFileList(this.filesData);
                return;
              }

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.files[0].size)) {
                return;
              }

              var files = [].slice.call(this.files);
              var filesData = [];

              if (!this.multiple) {
                this.clearData();
                files = [files[0]];
              }

              var _iterator95 = _createForOfIteratorHelper(files),
                  _step95;

              try {
                for (_iterator95.s(); !(_step95 = _iterator95.n()).done;) {
                  var data = _step95.value;
                  var fileData = {
                    name: data.name + '.' + data.type.split('.')[data.type.split('.').length - 1],
                    rawFile: '',
                    size: data.size,
                    status: this.localizedTexts('uploadSuccessMessage'),
                    type: data.type,
                    validationMessages: {
                      minSize: '',
                      maxSize: ''
                    },
                    statusCode: '2'
                  };
                  filesData.push(fileData);
                  this.filesData.push(fileData);
                }
              } catch (err) {
                _iterator95.e(err);
              } finally {
                _iterator95.f();
              }

              this.createFileList(filesData);

              if (!this.autoUpload && this.listParent && !this.actionButtons && (!this.isForm || this.allowUpload()) && this.showFileList) {
                this.renderActionButtons();
              }

              this.checkActionButtonStatus();

              if (this.sequentialUpload) {
                this.count = this.filesData.length - 1;
              }
            }
          }
        }, {
          key: "checkActionButtonStatus",
          value: function checkActionButtonStatus() {
            if (this.actionButtons) {
              var length = this.uploadWrapper.querySelectorAll('.' + VALIDATION_FAILS).length + this.uploadWrapper.querySelectorAll('.e-upload-fails:not(.e-upload-progress)').length + this.uploadWrapper.querySelectorAll('span.' + UPLOAD_SUCCESS).length + this.uploadWrapper.querySelectorAll('span.' + UPLOAD_INPROGRESS).length;

              if (length > 0 && length === this.uploadWrapper.querySelectorAll('li').length) {
                this.uploadButton.setAttribute('disabled', 'disabled');
              } else {
                this.uploadButton.removeAttribute('disabled');
              }
            }
          }
        }, {
          key: "setDropArea",
          value: function setDropArea() {
            var dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');

            if (this.dropArea) {
              this.dropZoneElement = typeof this.dropArea !== 'string' ? this.dropArea : document.querySelector(this.dropArea);
              var element = this.element;
              var enableDropText = false;

              while (element.parentNode) {
                element = element.parentNode;

                if (element === this.dropZoneElement) {
                  enableDropText = true;

                  if (!dropTextArea) {
                    this.createDropTextHint();
                  } else if (!this.isServerBlazor) {
                    dropTextArea.innerHTML = this.localizedTexts('dropFilesHint');
                  }
                }
              }

              if (!enableDropText && dropTextArea) {
                dropTextArea.remove();
              }
            } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploaderOptions) && this.uploaderOptions.dropArea === undefined) {
              this.createDropTextHint();
              this.dropZoneElement = this.uploadWrapper;
              this.setProperties({
                dropArea: this.uploadWrapper
              }, true);
            }

            this.bindDropEvents();
          }
        }, {
          key: "updateDropArea",
          value: function updateDropArea() {
            if (this.dropArea) {
              this.setDropArea();
            } else {
              this.dropZoneElement = null;
              var dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');

              if (dropTextArea) {
                dropTextArea.remove();
              }
            }
          }
        }, {
          key: "createDropTextHint",
          value: function createDropTextHint() {
            if (!this.isServerBlazor) {
              var fileDropArea = this.createElement('span', {
                className: DROP_AREA
              });
              fileDropArea.innerHTML = this.localizedTexts('dropFilesHint');
              this.dropAreaWrapper.appendChild(fileDropArea);
            }
          }
        }, {
          key: "updateHTMLAttrToElement",
          value: function updateHTMLAttrToElement() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
              for (var _i126 = 0, _Object$keys56 = Object.keys(this.htmlAttributes); _i126 < _Object$keys56.length; _i126++) {
                var pro = _Object$keys56[_i126];

                if (wrapperAttr$1.indexOf(pro) < 0) {
                  this.element.setAttribute(pro, this.htmlAttributes[pro]);
                }
              }
            }
          }
        }, {
          key: "updateHTMLAttrToWrapper",
          value: function updateHTMLAttrToWrapper() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
              for (var _i127 = 0, _Object$keys57 = Object.keys(this.htmlAttributes); _i127 < _Object$keys57.length; _i127++) {
                var pro = _Object$keys57[_i127];

                if (wrapperAttr$1.indexOf(pro) > -1) {
                  if (pro === 'class') {
                    var updatedClassValues = this.htmlAttributes[pro].replace(/\s+/g, ' ').trim();

                    if (updatedClassValues !== '') {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.uploadWrapper], updatedClassValues.split(' '));
                    }
                  } else if (pro === 'style') {
                    var uploadStyle = this.uploadWrapper.getAttribute(pro);
                    uploadStyle = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(uploadStyle) ? uploadStyle + this.htmlAttributes[pro] : this.htmlAttributes[pro];
                    this.uploadWrapper.setAttribute(pro, uploadStyle);
                  } else {
                    this.uploadWrapper.setAttribute(pro, this.htmlAttributes[pro]);
                  }
                }
              }
            }
          }
        }, {
          key: "setMultipleSelection",
          value: function setMultipleSelection() {
            if (this.multiple && !this.element.hasAttribute('multiple')) {
              var newAttr = document.createAttribute('multiple');
              newAttr.value = 'multiple';
              this.element.setAttributeNode(newAttr);
            } else if (!this.multiple) {
              this.element.removeAttribute('multiple');
            }
          }
        }, {
          key: "checkAutoUpload",
          value: function checkAutoUpload(fileData) {
            if (this.autoUpload) {
              if (this.sequentialUpload) {
                /* istanbul ignore next */
                this.sequenceUpload(fileData);
              } else {
                this.upload(fileData);
              }

              this.removeActionButtons();
            } else if (!this.actionButtons) {
              this.renderActionButtons();
            }

            this.checkActionButtonStatus();
          }
        }, {
          key: "sequenceUpload",
          value: function sequenceUpload(fileData) {
            if (this.filesData.length - fileData.length === 0 || this.filesData[this.filesData.length - fileData.length - 1].statusCode !== '1') {
              ++this.count;
              var isFileListCreated = this.showFileList ? false : true;

              if (typeof this.filesData[this.count] === 'object') {
                this.isFirstFileOnSelection = false;
                this.upload(this.filesData[this.count], isFileListCreated);

                if (this.filesData[this.count].statusCode === '0') {
                  this.sequenceUpload(fileData);
                }
              } else {
                --this.count;
              }
            }
          }
        }, {
          key: "setCSSClass",
          value: function setCSSClass(oldCSSClass) {
            var updatedCssClassValue = this.cssClass;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && this.cssClass !== '') {
              updatedCssClassValue = this.cssClass.replace(/\s+/g, ' ').trim();
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && updatedCssClassValue !== '') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.uploadWrapper], updatedCssClassValue.split(updatedCssClassValue.indexOf(',') > -1 ? ',' : ' '));
            }

            var updatedOldCssClass = oldCSSClass;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldCSSClass)) {
              updatedOldCssClass = oldCSSClass.replace(/\s+/g, ' ').trim();
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(oldCSSClass) && updatedOldCssClass !== '') {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.uploadWrapper], updatedOldCssClass.split(' '));
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.browseButton, 'click', this.browseButtonClick, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.element, 'change', this.onSelectFiles, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'click', this.removeFocus, this);

            this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["KeyboardEvents"](this.uploadWrapper, {
              keyAction: this.keyActionHandler.bind(this),
              keyConfigs: this.keyConfigs,
              eventName: 'keydown'
            });

            if (this.isForm) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formElement, 'reset', this.resetForm, this);
            }
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.browseButton, 'click', this.browseButtonClick);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.element, 'change', this.onSelectFiles);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'click', this.removeFocus);

            if (this.isForm) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.formElement, 'reset', this.resetForm);
            }

            this.keyboardModule.destroy();
          }
        }, {
          key: "resetForm",
          value: function resetForm() {
            this.clearAll();
          }
        }, {
          key: "keyActionHandler",
          value: function keyActionHandler(e) {
            var targetElement = e.target;

            switch (e.action) {
              case 'enter':
                if (e.target === this.clearButton) {
                  this.clearButtonClick();
                } else if (e.target === this.uploadButton) {
                  this.uploadButtonClick();
                } else if (e.target === this.browseButton) {
                  this.browseButtonClick();
                } else if (targetElement.classList.contains(PAUSE_UPLOAD)) {
                  var metaData = this.getCurrentMetaData(null, e);
                  metaData.file.statusCode = '4';
                  metaData.file.status = this.localizedTexts('pauseUpload');
                  this.abortUpload(metaData, false);
                } else if (targetElement.classList.contains(RESUME_UPLOAD)) {
                  this.resumeUpload(this.getCurrentMetaData(null, e), e);
                } else if (targetElement.classList.contains(RETRY_ICON)) {
                  var _metaData = this.getCurrentMetaData(null, e);

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_metaData)) {
                    _metaData.file.statusCode = '1';
                    _metaData.file.status = this.localizedTexts('readyToUploadMessage');
                    this.chunkUpload(_metaData.file);
                  } else {
                    var target = e.target.parentElement;
                    var fileData = this.filesData[this.fileList.indexOf(target)];
                    this.retry(fileData);
                  }
                } else {
                  this.removeFiles(e);

                  if (!targetElement.classList.contains(ABORT_ICON)) {
                    this.browseButton.focus();
                  }
                }

                e.preventDefault();
                e.stopPropagation();
                break;
            }
          }
        }, {
          key: "getCurrentMetaData",
          value: function getCurrentMetaData(fileInfo, e) {
            var fileData;
            var targetMetaData;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fileInfo)) {
              var target = e.target.parentElement;
              fileData = this.filesData[this.fileList.indexOf(target)];
            } else {
              fileData = fileInfo;
            }

            for (var i = 0; i < this.uploadMetaData.length; i++) {
              if (this.uploadMetaData[i].file.name === fileData.name) {
                targetMetaData = this.uploadMetaData[i];
              }
            }

            return targetMetaData;
          }
        }, {
          key: "removeFocus",
          value: function removeFocus() {
            if (this.uploadWrapper && this.listParent && this.listParent.querySelector('.' + ICON_FOCUSED)) {
              document.activeElement.blur();
              this.listParent.querySelector('.' + ICON_FOCUSED).classList.remove(ICON_FOCUSED);
            }
          }
        }, {
          key: "browseButtonClick",
          value: function browseButtonClick() {
            this.element.click();
          }
        }, {
          key: "uploadButtonClick",
          value: function uploadButtonClick() {
            if (this.sequentialUpload) {
              this.sequenceUpload(this.filesData);
            } else {
              this.upload(this.filesData);
            }
          }
        }, {
          key: "clearButtonClick",
          value: function clearButtonClick() {
            this.clearAll();
            /* istanbul ignore next */

            if (this.sequentialUpload) {
              this.count = -1;
            }

            this.actionCompleteCount = 0;
          }
        }, {
          key: "bindDropEvents",
          value: function bindDropEvents() {
            if (this.dropZoneElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.dropZoneElement, 'drop', this.dropElement, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.dropZoneElement, 'dragover', this.dragHover, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.dropZoneElement, 'dragleave', this.onDragLeave, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.dropZoneElement, 'paste', this.onPasteFile, this);
            }
          }
        }, {
          key: "unBindDropEvents",
          value: function unBindDropEvents() {
            if (this.dropZoneElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.dropZoneElement, 'drop', this.dropElement);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.dropZoneElement, 'dragover', this.dragHover);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.dropZoneElement, 'dragleave', this.onDragLeave);
            }
          }
        }, {
          key: "onDragLeave",
          value: function onDragLeave(e) {
            this.dropZoneElement.classList.remove(DRAG_HOVER);
          }
        }, {
          key: "dragHover",
          value: function dragHover(e) {
            if (!this.enabled) {
              return;
            }

            this.dropZoneElement.classList.add(DRAG_HOVER);

            if (this.dropEffect !== 'Default') {
              e.dataTransfer.dropEffect = this.dropEffect.toLowerCase();
            }

            e.preventDefault();
            e.stopPropagation();
          }
          /* istanbul ignore next */

        }, {
          key: "dropElement",
          value: function dropElement(e) {
            this.dropZoneElement.classList.remove(DRAG_HOVER);
            this.onSelectFiles(e);
            e.preventDefault();
            e.stopPropagation();
          }
          /* istanbul ignore next */

        }, {
          key: "onPasteFile",
          value: function onPasteFile(event) {
            var item = event.clipboardData.items;

            if (item.length !== 1) {
              return;
            }

            var pasteFile = [].slice.call(item)[0];

            if (pasteFile.kind === 'file' && pasteFile.type.match('^image/')) {
              this.renderSelectedFiles(event, [pasteFile.getAsFile()], false, true);
            }
          }
        }, {
          key: "getSelectedFiles",
          value: function getSelectedFiles(index) {
            var data = [];
            var liElement = this.fileList[index];
            var allFiles = this.getFilesData();
            var nameElements = +liElement.getAttribute('data-files-count');
            var startIndex = 0;

            for (var i = 0; i < index; i++) {
              startIndex += +this.fileList[i].getAttribute('data-files-count');
            }

            for (var j = startIndex; j < startIndex + nameElements; j++) {
              data.push(allFiles[j]);
            }

            return data;
          }
        }, {
          key: "removeFiles",
          value: function removeFiles(args) {
            if (!this.enabled) {
              return;
            }

            var selectedElement = args.target.parentElement;

            if (this.isBlazorSaveUrl) {
              this.fileList = [].slice.call(this.uploadWrapper.querySelectorAll('li'));
            }

            var index = this.fileList.indexOf(selectedElement);
            var liElement = this.fileList[index];
            var formUpload = this.isFormUpload();
            var fileData = formUpload ? this.getSelectedFiles(index) : this.getFilesInArray(this.filesData[index]);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fileData)) {
              return;
            }

            if (args.target.classList.contains(ABORT_ICON) && !formUpload) {
              fileData[0].statusCode = '5';

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
                var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);
                Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["createSpinner"])({
                  target: spinnerTarget,
                  width: '20px'
                });
                Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["showSpinner"])(spinnerTarget);
              }

              if (this.sequentialUpload) {
                /* istanbul ignore next */
                this.uploadSequential();
              }

              if (!liElement.classList.contains(RESTRICT_RETRY)) {
                this.checkActionComplete(true);
              }
            } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(args.target, '.' + SPINNER_PANE)) {
              this.remove(fileData, false, false, true, args);
            }

            this.element.value = '';
            this.checkActionButtonStatus();
          }
        }, {
          key: "removeFilesData",
          value: function removeFilesData(file, customTemplate) {
            var index;

            if (customTemplate) {
              if (!this.showFileList) {
                index = this.filesData.indexOf(file);
                this.filesData.splice(index, 1);
              }

              return;
            }

            var selectedElement = this.getLiElement(file);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selectedElement)) {
              return;
            }

            if (!this.isBlazorSaveUrl) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(selectedElement);
            }

            index = this.fileList.indexOf(selectedElement);
            this.fileList.splice(index, 1);
            this.filesData.splice(index, 1);

            if (!this.isBlazorSaveUrl) {
              if (this.fileList.length === 0 && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listParent)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.listParent);
                this.listParent = null;
                this.removeActionButtons();
              }

              if (this.sequentialUpload) {
                /* istanbul ignore next */
                if (index <= this.count) {
                  --this.count;
                }
              }
            } else {
              // tslint:disable-next-line
              this.interopAdaptor.invokeMethodAsync('removeFileData', index);
            }
          }
        }, {
          key: "removeUploadedFile",
          value: function removeUploadedFile(file, eventArgs, removeDirectly, custom) {
            var _this253 = this;

            var selectedFiles = file;
            var ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Ajax"](this.asyncSettings.removeUrl, 'POST', true, null);
            ajax.emitError = false;
            var formData = new FormData();

            ajax.beforeSend = function (e) {
              eventArgs.currentRequest = ajax.httpRequest;

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                if (_this253.currentRequestHeader) {
                  _this253.updateCustomheader(ajax.httpRequest, _this253.currentRequestHeader);
                }

                if (_this253.customFormDatas) {
                  _this253.updateFormData(formData, _this253.customFormDatas);
                }
              }

              if (!removeDirectly) {
                _this253.trigger('removing', eventArgs, function (eventArgs) {
                  if (eventArgs.cancel) {
                    e.cancel = true;
                  } else {
                    _this253.removingEventCallback(eventArgs, formData, selectedFiles, file);
                  }
                });
              } else {
                _this253.removingEventCallback(eventArgs, formData, selectedFiles, file);
              }
            };

            if (this.isServerBlazor) {
              var name = this.element.getAttribute('name');

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {
                formData.append(name, selectedFiles.rawFile, selectedFiles.name);
              } else {
                formData.append(name, selectedFiles.name);
              }
            }

            ajax.onLoad = function (e) {
              _this253.removeCompleted(e, selectedFiles, custom);

              return {};
            };
            /* istanbul ignore next */


            ajax.onError = function (e) {
              _this253.removeFailed(e, selectedFiles, custom);

              return {};
            };

            ajax.send(formData);
          }
        }, {
          key: "removingEventCallback",
          value: function removingEventCallback(eventArgs, formData, selectedFiles, file) {
            /* istanbul ignore next */
            var name = this.element.getAttribute('name');
            var liElement = this.getLiElement(file);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement) && (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + DELETE_ICON)) || !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + REMOVE_ICON)))) {
              var spinnerTarget;
              spinnerTarget = liElement.querySelector('.' + DELETE_ICON) ? liElement.querySelector('.' + DELETE_ICON) : liElement.querySelector('.' + REMOVE_ICON);
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["createSpinner"])({
                target: spinnerTarget,
                width: '20px'
              });
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["showSpinner"])(spinnerTarget);
            }

            if (!this.isServerBlazor) {
              if (eventArgs.postRawFile && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {
                formData.append(name, selectedFiles.rawFile, selectedFiles.name);
              } else {
                formData.append(name, selectedFiles.name);
              }

              this.updateFormData(formData, eventArgs.customFormData);
            }
          }
          /* istanbul ignore next */

        }, {
          key: "updateFormData",
          value: function updateFormData(formData, customData) {
            if (customData.length > 0 && customData[0]) {
              var _loop17 = function _loop17(i) {
                var data = customData[i]; // tslint:disable-next-line

                var value = Object.keys(data).map(function (e) {
                  return data[e];
                });
                formData.append(Object.keys(data)[0], value);
              };

              for (var i = 0; i < customData.length; i++) {
                _loop17(i);
              }
            }
          }
          /* istanbul ignore next */

        }, {
          key: "updateCustomheader",
          value: function updateCustomheader(request, currentRequest) {
            if (currentRequest.length > 0 && currentRequest[0]) {
              var _loop18 = function _loop18(i) {
                var data = currentRequest[i]; // tslint:disable-next-line

                var value = Object.keys(data).map(function (e) {
                  return data[e];
                });
                request.setRequestHeader(Object.keys(data)[0], value);
              };

              for (var i = 0; i < currentRequest.length; i++) {
                _loop18(i);
              }
            }
          }
        }, {
          key: "removeCompleted",
          value: function removeCompleted(e, files, customTemplate) {
            var response = e && e.currentTarget ? this.getResponse(e) : null;
            var args = {
              e: e,
              response: response,
              operation: 'remove',
              file: this.updateStatus(files, this.localizedTexts('removedSuccessMessage'), '2')
            };
            this.trigger('success', args);
            this.removeFilesData(files, customTemplate);
            var index = this.uploadedFilesData.indexOf(files);
            this.uploadedFilesData.splice(index, 1);
            this.trigger('change', {
              files: this.uploadedFilesData
            });
          }
        }, {
          key: "removeFailed",
          value: function removeFailed(e, files, customTemplate) {
            var response = e && e.currentTarget ? this.getResponse(e) : null;
            var args = {
              e: e,
              response: response,
              operation: 'remove',
              file: this.updateStatus(files, this.localizedTexts('removedFailedMessage'), '0')
            };

            if (!customTemplate) {
              var index = this.filesData.indexOf(files);
              var rootElement = this.fileList[index];

              if (rootElement) {
                rootElement.classList.remove(UPLOAD_SUCCESS);
                rootElement.classList.add(UPLOAD_FAILED);
                var statusElement = rootElement.querySelector('.' + STATUS);

                if (statusElement) {
                  statusElement.classList.remove(UPLOAD_SUCCESS);
                  statusElement.classList.add(UPLOAD_FAILED);
                }
              }

              this.checkActionButtonStatus();
            }

            this.trigger('failure', args);
            var liElement = this.getLiElement(files);
            /* istanbul ignore next */

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + DELETE_ICON))) {
              var spinnerTarget = liElement.querySelector('.' + DELETE_ICON);
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["hideSpinner"])(spinnerTarget);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.e-spinner-pane'));
            }
          }
          /* istanbul ignore next */

        }, {
          key: "getFilesFromFolder",
          value: function getFilesFromFolder(event) {
            var _this254 = this;

            this.filesEntries = [];
            var items;
            items = this.multiple ? event.dataTransfer.items : [event.dataTransfer.items[0]];
            var validDirectoryUpload = this.checkDirectoryUpload(items);

            if (!validDirectoryUpload) {
              return;
            }

            var _loop19 = function _loop19(i) {
              // tslint:disable-next-line
              var item = items[i].webkitGetAsEntry();

              if (item.isFile) {
                var files = []; // tslint:disable-next-line

                item.file(function (fileObj) {
                  var path = item.fullPath;
                  files.push({
                    'path': path,
                    'file': fileObj
                  });
                });

                _this254.renderSelectedFiles(event, files, true);
              } else if (item.isDirectory) {
                _this254.traverseFileTree(item, event);
              }
            };

            for (var i = 0; i < items.length; i++) {
              _loop19(i);
            }
          }
          /* istanbul ignore next */

        }, {
          key: "checkDirectoryUpload",
          value: function checkDirectoryUpload(items) {
            for (var i = 0; items && i < items.length; i++) {
              // tslint:disable-next-line
              var item = items[i].webkitGetAsEntry();

              if (item.isDirectory) {
                return true;
              }
            }

            return false;
          } // tslint:disable

          /* istanbul ignore next */

        }, {
          key: "traverseFileTree",
          value: function traverseFileTree(item, event) {
            if (item.isFile) {
              this.filesEntries.push(item);
            } else if (item.isDirectory) {
              // tslint:disable-next-line
              var directoryReader = item.createReader(); // tslint:disable-next-line

              this.readFileFromDirectory(directoryReader, event);
            }
          } // tslint:disable

          /* istanbul ignore next */

        }, {
          key: "readFileFromDirectory",
          value: function readFileFromDirectory(directoryReader, event) {
            var _this255 = this;

            // tslint:disable-next-line
            directoryReader.readEntries(function (entries) {
              for (var i = 0; i < entries.length; i++) {
                _this255.traverseFileTree(entries[i]); // tslint:disable-next-line

              }

              _this255.pushFilesEntries(event);

              if (entries.length) {
                _this255.readFileFromDirectory(directoryReader);
              }
            });
          }
        }, {
          key: "pushFilesEntries",
          value: function pushFilesEntries(event) {
            var _this256 = this;

            var files = [];

            var _loop20 = function _loop20(i) {
              // tslint:disable-next-line
              _this256.filesEntries[i].file(function (fileObj) {
                if (_this256.filesEntries) {
                  var path = _this256.filesEntries[i].fullPath;
                  files.push({
                    'path': path,
                    'file': fileObj
                  });

                  if (i === _this256.filesEntries.length - 1) {
                    _this256.filesEntries = [];

                    _this256.renderSelectedFiles(event, files, true);
                  }
                }
              });
            };

            for (var i = 0; i < this.filesEntries.length; i++) {
              _loop20(i);
            }
          } // tslint:enable

        }, {
          key: "onSelectFiles",
          value: function onSelectFiles(args) {
            if (!this.enabled) {
              return;
            }

            var targetFiles;
            /* istanbul ignore next */

            if (args.type === 'drop') {
              if (this.directoryUpload) {
                this.getFilesFromFolder(args);
              } else {
                var files = this.sortFilesList = args.dataTransfer.files;

                if (this.browserName !== 'msie' && this.browserName !== 'edge') {
                  this.element.files = files;
                }

                targetFiles = this.multiple ? this.sortFileList(files) : [files[0]];
                this.renderSelectedFiles(args, targetFiles);
              }
            } else {
              targetFiles = [].slice.call(args.target.files);
              this.renderSelectedFiles(args, targetFiles);
            }
          }
          /* istanbul ignore next */

        }, {
          key: "getBase64",
          value: function getBase64(file) {
            return new Promise(function (resolve, reject) {
              var fileReader = new FileReader();
              fileReader.readAsDataURL(file);

              fileReader.onload = function () {
                return resolve(fileReader.result);
              };

              fileReader.onerror = function (error) {
                return reject(error);
              };
            });
          }
          /* istanbul ignore next */

          /* tslint:ignore */

        }, {
          key: "renderSelectedFiles",
          value: function renderSelectedFiles(args, // tslint:disable-next-line
          targetFiles, directory, paste) {
            var _this257 = this;

            this.base64String = []; // tslint:disable-next-line

            var eventArgs = {
              event: args,
              cancel: false,
              filesData: [],
              isModified: false,
              modifiedFilesData: [],
              progressInterval: '',
              isCanceled: false,
              currentRequest: null,
              customFormData: null
            };
            /* istanbul ignore next */

            if (targetFiles.length < 1) {
              eventArgs.isCanceled = true;
              this.trigger('selected', eventArgs);
              return;
            }

            this.flag = true;
            var fileData = [];

            if (!this.multiple) {
              this.clearData(true);
              targetFiles = [targetFiles[0]];
            }

            for (var i = 0; i < targetFiles.length; i++) {
              var file = directory ? targetFiles[i].file : targetFiles[i];
              this.updateInitialFileDetails(args, targetFiles, file, i, fileData, directory, paste);
            }

            eventArgs.filesData = fileData;

            if (this.allowedExtensions.indexOf('*') > -1) {
              this.allTypes = true;
            }

            if (!this.allTypes) {
              fileData = this.checkExtension(fileData);
            }

            this.trigger('selected', eventArgs, function (eventArgs) {
              _this257._internalRenderSelect(eventArgs, fileData);
            });
          }
        }, {
          key: "updateInitialFileDetails",
          value: function updateInitialFileDetails(args, // tslint:disable-next-line
          targetFiles, file, i, fileData, directory, paste) {
            var fileName = directory ? targetFiles[i].path.substring(1, targetFiles[i].path.length) : paste ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name) : this.directoryUpload ? targetFiles[i].webkitRelativePath : file.name;
            var fileDetails = {
              name: fileName,
              rawFile: file,
              size: file.size,
              status: this.localizedTexts('readyToUploadMessage'),
              type: this.getFileType(file.name),
              validationMessages: this.validatedFileSize(file.size),
              statusCode: '1',
              id: Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name)
            };
            /* istanbul ignore next */

            if (paste) {
              fileDetails.fileSource = 'paste';
            }

            fileDetails.status = fileDetails.validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : fileDetails.validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : fileDetails.status;

            if (fileDetails.validationMessages.minSize !== '' || fileDetails.validationMessages.maxSize !== '') {
              fileDetails.statusCode = '0';
            }

            fileData.push(fileDetails);
          }
        }, {
          key: "_internalRenderSelect",
          value: function _internalRenderSelect(eventArgs, fileData) {
            if (!eventArgs.cancel) {
              /* istanbul ignore next */
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                this.currentRequestHeader = eventArgs.currentRequest;
                this.customFormDatas = eventArgs.customFormData;
              }

              this.selectedFiles = fileData;
              this.btnTabIndex = this.disableKeyboardNavigation ? '-1' : '0';

              if (this.showFileList) {
                if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {
                  for (var j = 0; j < eventArgs.modifiedFilesData.length; j++) {
                    for (var k = 0; k < fileData.length; k++) {
                      if (eventArgs.modifiedFilesData[j].id === fileData[k].id) {
                        eventArgs.modifiedFilesData[j].rawFile = fileData[k].rawFile;
                      }
                    }
                  }

                  var dataFiles = this.allTypes ? eventArgs.modifiedFilesData : this.checkExtension(eventArgs.modifiedFilesData);
                  this.updateSortedFileList(dataFiles);
                  this.filesData = dataFiles;

                  if (!this.isForm || this.allowUpload()) {
                    this.checkAutoUpload(dataFiles);
                  }
                } else {
                  this.createFileList(fileData, true);

                  if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {
                    this.filesData = this.filesData.concat(fileData);
                  }

                  if (!this.isForm || this.allowUpload()) {
                    if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {
                      this.checkAutoUpload(fileData);
                    }
                  }
                }

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(eventArgs.progressInterval) && eventArgs.progressInterval !== '') {
                  this.progressInterval = eventArgs.progressInterval;
                }
              } else {
                this.filesData = this.filesData.concat(fileData);

                if (this.isBlazorSaveUrl) {
                  // tslint:disable-next-line
                  this.interopAdaptor.invokeMethodAsync('updateServerFileData', this.filesData, this.isForm);
                }

                if (this.autoUpload) {
                  this.upload(this.filesData, true);
                }
              }

              this.raiseActionComplete();
              this.isFirstFileOnSelection = true;
            }
          }
        }, {
          key: "allowUpload",
          value: function allowUpload() {
            var allowFormUpload = false;

            if (this.isForm && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.asyncSettings.saveUrl) && this.asyncSettings.saveUrl !== '') {
              allowFormUpload = true;
            }

            return allowFormUpload;
          }
        }, {
          key: "isFormUpload",
          value: function isFormUpload() {
            var isFormUpload = false;

            if (this.isForm && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.asyncSettings.saveUrl) || this.asyncSettings.saveUrl === '') && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === '')) {
              isFormUpload = true;
            }

            return isFormUpload;
          }
        }, {
          key: "clearData",
          value: function clearData(singleUpload) {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listParent) && !(this.isBlazorSaveUrl || this.isBlazorTemplate)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.listParent);
              this.listParent = null;
            }

            if (this.browserName !== 'msie' && !singleUpload) {
              this.element.value = '';
            }

            this.fileList = [];
            this.filesData = [];

            if (this.isBlazorSaveUrl || this.isBlazorTemplate) {
              // tslint:disable-next-line
              this.interopAdaptor.invokeMethodAsync('clearAll');
            } else {
              this.removeActionButtons();
            }
          }
        }, {
          key: "updateSortedFileList",
          value: function updateSortedFileList(filesData) {
            var previousListClone = this.createElement('div', {
              id: 'clonewrapper'
            });
            var added = -1;
            var removedList;

            if (this.listParent) {
              for (var i = 0; i < this.listParent.querySelectorAll('li').length; i++) {
                var liElement = this.listParent.querySelectorAll('li')[i];
                previousListClone.appendChild(liElement.cloneNode(true));
              }

              removedList = this.listParent.querySelectorAll('li');

              var _iterator96 = _createForOfIteratorHelper(removedList),
                  _step96;

              try {
                for (_iterator96.s(); !(_step96 = _iterator96.n()).done;) {
                  var item = _step96.value;
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(item);
                }
              } catch (err) {
                _iterator96.e(err);
              } finally {
                _iterator96.f();
              }

              this.removeActionButtons();
              var oldList = [].slice.call(previousListClone.childNodes);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.listParent);
              this.listParent = null;
              this.fileList = [];
              this.createParentUL();

              for (var index = 0; index < filesData.length; index++) {
                for (var j = 0; j < this.filesData.length; j++) {
                  if (this.filesData[j].name === filesData[index].name) {
                    this.listParent.appendChild(oldList[j]);

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(oldList[j].querySelector('.e-icons'), 'click', this.removeFiles, this);

                    this.fileList.push(oldList[j]);
                    added = index;
                  }
                }

                if (added !== index) {
                  this.createFileList([filesData[index]]);
                }
              }
            } else {
              this.createFileList(filesData);
            }
          }
        }, {
          key: "isBlank",
          value: function isBlank(str) {
            return !str || /^\s*$/.test(str);
          }
        }, {
          key: "checkExtension",
          value: function checkExtension(files) {
            var dropFiles = files;

            if (!this.isBlank(this.allowedExtensions)) {
              var allowedExtensions = [];
              var extensions = this.allowedExtensions.split(',');

              var _iterator97 = _createForOfIteratorHelper(extensions),
                  _step97;

              try {
                for (_iterator97.s(); !(_step97 = _iterator97.n()).done;) {
                  var extension = _step97.value;
                  allowedExtensions.push(extension.trim().toLocaleLowerCase());
                }
              } catch (err) {
                _iterator97.e(err);
              } finally {
                _iterator97.f();
              }

              for (var i = 0; i < files.length; i++) {
                if (allowedExtensions.indexOf(('.' + files[i].type).toLocaleLowerCase()) === -1) {
                  files[i].status = this.localizedTexts('invalidFileType');
                  files[i].statusCode = '0';
                }
              }
            }

            return dropFiles;
          }
        }, {
          key: "validatedFileSize",
          value: function validatedFileSize(fileSize) {
            var minSizeError = '';
            var maxSizeError = '';

            if (fileSize < this.minFileSize) {
              minSizeError = this.localizedTexts('invalidMinFileSize');
            } else if (fileSize > this.maxFileSize) {
              maxSizeError = this.localizedTexts('invalidMaxFileSize');
            } else {
              minSizeError = '';
              maxSizeError = '';
            }

            var errorMessage = {
              minSize: minSizeError,
              maxSize: maxSizeError
            };
            return errorMessage;
          }
        }, {
          key: "isPreLoadFile",
          value: function isPreLoadFile(fileData) {
            var isPreload = false;

            for (var i = 0; i < this.files.length; i++) {
              if (this.files[i].name === fileData.name.slice(0, fileData.name.lastIndexOf('.')) && this.files[i].type === fileData.type) {
                isPreload = true;
              }
            }

            return isPreload;
          }
        }, {
          key: "createCustomfileList",
          value: function createCustomfileList(fileData) {
            this.createParentUL();
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.element.id + 'Template', 'Template');

            var _iterator98 = _createForOfIteratorHelper(fileData),
                _step98;

            try {
              for (_iterator98.s(); !(_step98 = _iterator98.n()).done;) {
                var listItem = _step98.value;
                var liElement = this.createElement('li', {
                  className: FILE,
                  attrs: {
                    'data-file-name': listItem.name
                  }
                });
                this.uploadTemplateFn = this.templateComplier(this.template);
                var fromElements = [].slice.call(this.uploadTemplateFn(listItem, null, null, this.element.id + 'Template', this.isStringTemplate));
                var index = fileData.indexOf(listItem);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(fromElements, liElement);
                var eventArgs = {
                  element: liElement,
                  fileInfo: listItem,
                  index: index,
                  isPreload: this.isPreLoadFile(listItem)
                };
                var eventsArgs = {
                  element: liElement,
                  fileInfo: listItem,
                  index: index,
                  isPreload: this.isPreLoadFile(listItem)
                };
                this.trigger('rendering', eventArgs);
                this.trigger('fileListRendering', eventsArgs);
                this.listParent.appendChild(liElement);
                this.fileList.push(liElement);
              }
            } catch (err) {
              _iterator98.e(err);
            } finally {
              _iterator98.f();
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.element.id + 'Template', 'Template', this, false);
          }
        }, {
          key: "createParentUL",
          value: function createParentUL() {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listParent)) {
              this.listParent = this.createElement('ul', {
                className: LIST_PARENT
              });
              this.uploadWrapper.appendChild(this.listParent);
            }
          }
        }, {
          key: "formFileList",
          value: function formFileList(fileData, files) {
            var fileList = this.createElement('li', {
              className: FILE
            });
            fileList.setAttribute('data-files-count', fileData.length + '');
            var fileContainer = this.createElement('span', {
              className: TEXT_CONTAINER
            });
            var statusMessage;

            var _iterator99 = _createForOfIteratorHelper(fileData),
                _step99;

            try {
              for (_iterator99.s(); !(_step99 = _iterator99.n()).done;) {
                var listItem = _step99.value;
                var fileNameEle = this.createElement('span', {
                  className: FILE_NAME
                });
                fileNameEle.innerHTML = this.getFileNameOnly(listItem.name);
                var fileTypeEle = this.createElement('span', {
                  className: FILE_TYPE
                });
                fileTypeEle.innerHTML = '.' + this.getFileType(listItem.name);

                if (!this.enableRtl) {
                  fileContainer.appendChild(fileNameEle);
                  fileContainer.appendChild(fileTypeEle);
                } else {
                  var rtlContainer = this.createElement('span', {
                    className: RTL_CONTAINER
                  });
                  rtlContainer.appendChild(fileTypeEle);
                  rtlContainer.appendChild(fileNameEle);
                  fileContainer.appendChild(rtlContainer);
                }

                this.truncateName(fileNameEle);
                statusMessage = this.formValidateFileInfo(listItem, fileList);
              }
            } catch (err) {
              _iterator99.e(err);
            } finally {
              _iterator99.f();
            }

            fileList.appendChild(fileContainer);
            this.setListToFileInfo(fileData, fileList);
            var index = this.listParent.querySelectorAll('li').length;
            var infoEle = this.createElement('span');

            if (fileList.classList.contains(INVALID_FILE)) {
              infoEle.classList.add(STATUS);
              infoEle.classList.add(INVALID_FILE);
              infoEle.innerText = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;
            } else {
              infoEle.classList.add(fileData.length > 1 ? INFORMATION : FILE_SIZE);
              infoEle.innerText = fileData.length > 1 ? this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(fileData)) : this.bytesToSize(fileData[0].size);
              this.createFormInput(fileData);
            }

            fileContainer.appendChild(infoEle);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fileList.querySelector('.e-icons'))) {
              var iconElement = this.createElement('span', {
                className: 'e-icons',
                attrs: {
                  'tabindex': this.btnTabIndex
                }
              });
              /* istanbul ignore next */

              if (this.browserName === 'msie') {
                iconElement.classList.add('e-msie');
              }

              iconElement.setAttribute('title', this.localizedTexts('remove'));
              fileList.appendChild(fileContainer);
              fileList.appendChild(iconElement);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(iconElement, 'click', this.removeFiles, this);

              iconElement.classList.add(REMOVE_ICON);
            }

            var eventArgs = {
              element: fileList,
              fileInfo: this.mergeFileInfo(fileData, fileList),
              index: index,
              isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))
            };
            var eventsArgs = {
              element: fileList,
              fileInfo: this.mergeFileInfo(fileData, fileList),
              index: index,
              isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))
            };
            this.trigger('rendering', eventArgs);
            this.trigger('fileListRendering', eventsArgs);
            this.listParent.appendChild(fileList);
            this.fileList.push(fileList);
          }
        }, {
          key: "formValidateFileInfo",
          value: function formValidateFileInfo(listItem, fileList) {
            var statusMessage = listItem.status;
            var validationMessages = this.validatedFileSize(listItem.size);

            if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {
              this.addInvalidClass(fileList);
              statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;
            }

            var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;

            if (typeValidationMessage === this.localizedTexts('invalidFileType')) {
              this.addInvalidClass(fileList);
              statusMessage = typeValidationMessage;
            }

            return statusMessage;
          }
        }, {
          key: "addInvalidClass",
          value: function addInvalidClass(fileList) {
            fileList.classList.add(INVALID_FILE);
          }
        }, {
          key: "createFormInput",
          value: function createFormInput(fileData) {
            var inputElement = this.element.cloneNode(true);
            inputElement.classList.add(HIDDEN_INPUT);

            var _iterator100 = _createForOfIteratorHelper(fileData),
                _step100;

            try {
              for (_iterator100.s(); !(_step100 = _iterator100.n()).done;) {
                var listItem = _step100.value;
                listItem.input = inputElement;
              }
            } catch (err) {
              _iterator100.e(err);
            } finally {
              _iterator100.f();
            }

            inputElement.setAttribute('name', this.uploaderName);
            this.uploadWrapper.querySelector('.' + INPUT_WRAPPER).appendChild(inputElement);

            if (this.browserName !== 'msie' && this.browserName !== 'edge') {
              this.element.value = '';
            }
          }
        }, {
          key: "getFileSize",
          value: function getFileSize(fileData) {
            var fileSize = 0;

            var _iterator101 = _createForOfIteratorHelper(fileData),
                _step101;

            try {
              for (_iterator101.s(); !(_step101 = _iterator101.n()).done;) {
                var file = _step101.value;
                fileSize += file.size;
              }
            } catch (err) {
              _iterator101.e(err);
            } finally {
              _iterator101.f();
            }

            return fileSize;
          }
        }, {
          key: "mergeFileInfo",
          value: function mergeFileInfo(fileData, fileList) {
            var result = {
              name: '',
              rawFile: '',
              size: 0,
              status: '',
              type: '',
              validationMessages: {
                minSize: '',
                maxSize: ''
              },
              statusCode: '1',
              list: fileList
            };
            var fileNames = [];
            var type = '';

            var _iterator102 = _createForOfIteratorHelper(fileData),
                _step102;

            try {
              for (_iterator102.s(); !(_step102 = _iterator102.n()).done;) {
                var listItem = _step102.value;
                fileNames.push(listItem.name);
                type = listItem.type;
              }
            } catch (err) {
              _iterator102.e(err);
            } finally {
              _iterator102.f();
            }

            result.name = fileNames.join(', ');
            result.size = this.getFileSize(fileData);
            result.type = type;
            result.status = this.statusForFormUpload(fileData, fileList);
            return result;
          }
        }, {
          key: "statusForFormUpload",
          value: function statusForFormUpload(fileData, fileList) {
            var isValid = true;
            var statusMessage;

            var _iterator103 = _createForOfIteratorHelper(fileData),
                _step103;

            try {
              for (_iterator103.s(); !(_step103 = _iterator103.n()).done;) {
                var listItem = _step103.value;
                statusMessage = listItem.status;
                var validationMessages = this.validatedFileSize(listItem.size);

                if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {
                  isValid = false;
                  statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;
                }

                var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;

                if (typeValidationMessage === this.localizedTexts('invalidFileType')) {
                  isValid = false;
                  statusMessage = typeValidationMessage;
                }
              }
            } catch (err) {
              _iterator103.e(err);
            } finally {
              _iterator103.f();
            }

            if (!isValid) {
              fileList.classList.add(INVALID_FILE);
              statusMessage = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;
            } else {
              statusMessage = this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(fileData));
            }

            return statusMessage;
          }
        }, {
          key: "formCustomFileList",
          value: function formCustomFileList(fileData, files) {
            this.createParentUL();
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["resetBlazorTemplate"])(this.element.id + 'Template', 'Template');
            var fileList = this.createElement('li', {
              className: FILE
            });
            fileList.setAttribute('data-files-count', fileData.length + '');
            this.setListToFileInfo(fileData, fileList);
            var result = this.mergeFileInfo(fileData, fileList);
            fileList.setAttribute('data-file-name', result.name);
            this.uploadTemplateFn = this.templateComplier(this.template);
            var fromElements = [].slice.call(this.uploadTemplateFn(result, null, null, this.element.id + 'Template', this.isStringTemplate));
            var index = this.listParent.querySelectorAll('li').length;
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["append"])(fromElements, fileList);

            if (!fileList.classList.contains(INVALID_FILE)) {
              this.createFormInput(fileData);
            }

            var eventArgs = {
              element: fileList,
              fileInfo: result,
              index: index,
              isPreload: this.isPreLoadFile(result)
            };
            var eventsArgs = {
              element: fileList,
              fileInfo: result,
              index: index,
              isPreload: this.isPreLoadFile(result)
            };
            this.trigger('rendering', eventArgs);
            this.trigger('fileListRendering', eventsArgs);
            this.listParent.appendChild(fileList);
            this.fileList.push(fileList);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["updateBlazorTemplate"])(this.element.id + 'Template', 'Template', this, false);
          }
          /**
           * Create the file list for specified files data.
           * @param { FileInfo[] } fileData - specifies the files data for file list creation.
           * @returns void
           */

        }, {
          key: "createFileList",
          value: function createFileList(fileData, isSelectedFile) {
            if (this.isBlazorSaveUrl || this.isBlazorTemplate) {
              var fileListData = isSelectedFile ? this.filesData = this.filesData.concat(fileData) : fileData; // tslint:disable-next-line

              this.interopAdaptor.invokeMethodAsync('createFileList', fileListData, this.isForm);
            } else {
              this.createParentUL();

              if (this.template !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template)) {
                if (this.isFormUpload()) {
                  this.uploadWrapper.classList.add(FORM_UPLOAD);
                  this.formCustomFileList(fileData, this.element.files);
                } else {
                  this.createCustomfileList(fileData);
                }
              } else if (this.isFormUpload()) {
                this.uploadWrapper.classList.add(FORM_UPLOAD);
                this.formFileList(fileData, this.element.files);
              } else {
                var _iterator104 = _createForOfIteratorHelper(fileData),
                    _step104;

                try {
                  for (_iterator104.s(); !(_step104 = _iterator104.n()).done;) {
                    var listItem = _step104.value;
                    var liElement = this.createElement('li', {
                      className: FILE,
                      attrs: {
                        'data-file-name': listItem.name,
                        'data-files-count': '1'
                      }
                    });
                    var textContainer = this.createElement('span', {
                      className: TEXT_CONTAINER
                    });
                    var textElement = this.createElement('span', {
                      className: FILE_NAME,
                      attrs: {
                        'title': listItem.name
                      }
                    });
                    textElement.innerHTML = this.getFileNameOnly(listItem.name);
                    var fileExtension = this.createElement('span', {
                      className: FILE_TYPE
                    });
                    fileExtension.innerHTML = '.' + this.getFileType(listItem.name);

                    if (!this.enableRtl) {
                      textContainer.appendChild(textElement);
                      textContainer.appendChild(fileExtension);
                    } else {
                      var rtlContainer = this.createElement('span', {
                        className: RTL_CONTAINER
                      });
                      rtlContainer.appendChild(fileExtension);
                      rtlContainer.appendChild(textElement);
                      textContainer.appendChild(rtlContainer);
                    }

                    var fileSize = this.createElement('span', {
                      className: FILE_SIZE
                    });
                    fileSize.innerHTML = this.bytesToSize(listItem.size);
                    textContainer.appendChild(fileSize);
                    var statusElement = this.createElement('span', {
                      className: STATUS
                    });
                    textContainer.appendChild(statusElement);
                    statusElement.innerHTML = listItem.status;
                    liElement.appendChild(textContainer);
                    var iconElement = this.createElement('span', {
                      className: ' e-icons',
                      attrs: {
                        'tabindex': this.btnTabIndex
                      }
                    });
                    /* istanbul ignore next */

                    if (this.browserName === 'msie') {
                      iconElement.classList.add('e-msie');
                    }

                    iconElement.setAttribute('title', this.localizedTexts('remove'));
                    liElement.appendChild(iconElement);

                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(iconElement, 'click', this.removeFiles, this);

                    if (listItem.statusCode === '2') {
                      statusElement.classList.add(UPLOAD_SUCCESS);
                      iconElement.classList.add(DELETE_ICON);
                      iconElement.setAttribute('title', this.localizedTexts('delete'));
                    } else if (listItem.statusCode !== '1') {
                      statusElement.classList.remove(UPLOAD_SUCCESS);
                      statusElement.classList.add(VALIDATION_FAILS);
                    }

                    if (this.autoUpload && listItem.statusCode === '1' && this.asyncSettings.saveUrl !== '') {
                      statusElement.innerHTML = '';
                    }

                    if (!iconElement.classList.contains(DELETE_ICON)) {
                      iconElement.classList.add(REMOVE_ICON);
                    }

                    var index = fileData.indexOf(listItem);
                    var eventArgs = {
                      element: liElement,
                      fileInfo: listItem,
                      index: index,
                      isPreload: this.isPreLoadFile(listItem)
                    };
                    var eventsArgs = {
                      element: liElement,
                      fileInfo: listItem,
                      index: index,
                      isPreload: this.isPreLoadFile(listItem)
                    };
                    this.trigger('rendering', eventArgs);
                    this.trigger('fileListRendering', eventsArgs);
                    this.listParent.appendChild(liElement);
                    this.fileList.push(liElement);
                    this.truncateName(textElement);
                    var preventActionComplete = this.flag;

                    if (this.isPreLoadFile(listItem)) {
                      this.flag = false;
                      this.checkActionComplete(true);
                      this.flag = preventActionComplete;
                    }
                  }
                } catch (err) {
                  _iterator104.e(err);
                } finally {
                  _iterator104.f();
                }
              }
            }
          }
        }, {
          key: "getSlicedName",
          value: function getSlicedName(nameElement) {
            var text;
            text = nameElement.textContent;
            nameElement.dataset.tail = text.slice(text.length - 10);
          }
        }, {
          key: "setListToFileInfo",
          value: function setListToFileInfo(fileData, fileList) {
            var _iterator105 = _createForOfIteratorHelper(fileData),
                _step105;

            try {
              for (_iterator105.s(); !(_step105 = _iterator105.n()).done;) {
                var listItem = _step105.value;
                listItem.list = fileList;
              }
            } catch (err) {
              _iterator105.e(err);
            } finally {
              _iterator105.f();
            }
          }
        }, {
          key: "truncateName",
          value: function truncateName(name) {
            var nameElement = name;

            if (this.browserName !== 'edge' && nameElement.offsetWidth < nameElement.scrollWidth) {
              this.getSlicedName(nameElement);
              /* istanbul ignore next */
            } else if (nameElement.offsetWidth + 1 < nameElement.scrollWidth) {
              this.getSlicedName(nameElement);
            }
          }
        }, {
          key: "getFileType",
          value: function getFileType(name) {
            var extension;
            var index = name.lastIndexOf('.');

            if (index >= 0) {
              extension = name.substring(index + 1);
            }

            return extension ? extension : '';
          }
        }, {
          key: "getFileNameOnly",
          value: function getFileNameOnly(name) {
            var type = this.getFileType(name);
            var names = name.split('.' + type);
            return type = names[0];
          }
        }, {
          key: "setInitialAttributes",
          value: function setInitialAttributes() {
            if (this.initialAttr.accept) {
              this.element.setAttribute('accept', this.initialAttr.accept);
            }

            if (this.initialAttr.disabled) {
              this.element.setAttribute('disabled', 'disabled');
            }

            if (this.initialAttr.multiple) {
              var newAttr = document.createAttribute('multiple');
              this.element.setAttributeNode(newAttr);
            }
          }
        }, {
          key: "filterfileList",
          value: function filterfileList(files) {
            var filterFiles = [];
            var li;

            for (var i = 0; i < files.length; i++) {
              li = this.getLiElement(files[i]);

              if (!li.classList.contains(UPLOAD_SUCCESS)) {
                filterFiles.push(files[i]);
              }
            }

            return filterFiles;
          }
        }, {
          key: "updateStatus",
          value: function updateStatus(files, status, statusCode) {
            var updateLiStatus = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

            if (!(status === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(status)) && !(statusCode === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(statusCode))) {
              if (this.isBlazorSaveUrl) {
                for (var i = 0; i < this.filesData.length; i++) {
                  if (this.filesData[i].name === files.name) {
                    this.filesData[i].status = status;
                    this.filesData[i].statusCode = statusCode;
                  }
                }
              } else {
                files.status = status;
                files.statusCode = statusCode;
              }
            }

            if (updateLiStatus) {
              var li = this.getLiElement(files);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + STATUS)) && !(status === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(status))) {
                  li.querySelector('.' + STATUS).textContent = status;
                }
              }
            }

            return files;
          }
        }, {
          key: "getLiElement",
          value: function getLiElement(files) {
            var index;

            for (var i = 0; i < this.filesData.length; i++) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.filesData[i].id) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(files.id) ? this.filesData[i].name === files.name && this.filesData[i].id === files.id : this.filesData[i].name === files.name) {
                index = i;
              }
            }

            return this.fileList[index];
          }
        }, {
          key: "createProgressBar",
          value: function createProgressBar(liElement) {
            var progressbarWrapper = this.createElement('span', {
              className: PROGRESS_WRAPPER
            });
            var progressBar = this.createElement('progressbar', {
              className: PROGRESSBAR,
              attrs: {
                value: '0',
                max: '100'
              }
            });
            var progressbarInnerWrapper = this.createElement('span', {
              className: PROGRESS_INNER_WRAPPER
            });
            progressBar.setAttribute('style', 'width: 0%');
            var progressbarText = this.createElement('span', {
              className: PROGRESSBAR_TEXT
            });
            progressbarText.textContent = '0%';
            progressbarInnerWrapper.appendChild(progressBar);
            progressbarWrapper.appendChild(progressbarInnerWrapper);
            progressbarWrapper.appendChild(progressbarText);
            liElement.querySelector('.' + TEXT_CONTAINER).appendChild(progressbarWrapper);
          }
          /* istanbul ignore next */

        }, {
          key: "updateProgressbar",
          value: function updateProgressbar(e, li) {
            if (!isNaN(Math.round(e.loaded / e.total * 100)) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + PROGRESSBAR))) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.progressInterval) && this.progressInterval !== '') {
                var value = Math.round(e.loaded / e.total * 100) % parseInt(this.progressInterval, 10);

                if (value === 0 || value === 100) {
                  this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + '%');
                }
              } else {
                this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + '%');
              }
            }
          }
        }, {
          key: "changeProgressValue",
          value: function changeProgressValue(li, progressValue) {
            li.querySelector('.' + PROGRESSBAR).setAttribute('style', 'width:' + progressValue);
            li.querySelector('.' + PROGRESSBAR_TEXT).textContent = progressValue;
          }
        }, {
          key: "uploadInProgress",
          value: function uploadInProgress(e, files, customUI, request) {
            var li = this.getLiElement(files);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li) && !customUI) {
              return;
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
              /* istanbul ignore next */
              if (files.statusCode === '5') {
                this.cancelUploadingFile(files, e, request, li);
              }

              if (!(li.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0) && li.querySelector('.' + STATUS)) {
                li.querySelector('.' + STATUS).classList.add(UPLOAD_INPROGRESS);
                this.createProgressBar(li);
                this.updateProgressBarClasses(li, UPLOAD_INPROGRESS);
                li.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);
              }

              this.updateProgressbar(e, li);
              var iconEle = li.querySelector('.' + REMOVE_ICON);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(iconEle)) {
                iconEle.classList.add(ABORT_ICON, UPLOAD_INPROGRESS);
                iconEle.setAttribute('title', this.localizedTexts('abort'));
                iconEle.classList.remove(REMOVE_ICON);
              }
            } else {
              this.cancelUploadingFile(files, e, request);
            }

            var args = {
              e: e,
              operation: 'upload',
              file: this.updateStatus(files, this.localizedTexts('inProgress'), '3')
            };
            this.trigger('progress', args);
          }
          /* istanbul ignore next */

        }, {
          key: "cancelUploadingFile",
          value: function cancelUploadingFile(files, e, request, li) {
            var _this258 = this;

            if (files.statusCode === '5') {
              var eventArgs = {
                event: e,
                fileData: files,
                cancel: false
              };
              this.trigger('canceling', eventArgs, function (eventArgs) {
                if (eventArgs.cancel) {
                  files.statusCode = '3';

                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
                    var spinnerTarget = li.querySelector('.' + ABORT_ICON);

                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(spinnerTarget)) {
                      Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["hideSpinner"])(spinnerTarget);
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(li.querySelector('.e-spinner-pane'));
                    }
                  }
                } else {
                  request.emitError = false;
                  request.httpRequest.abort();
                  var formData = new FormData();

                  if (files.statusCode === '5') {
                    var name = _this258.element.getAttribute('name');

                    formData.append(name, files.name);
                    formData.append('cancel-uploading', files.name);
                    var ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Ajax"](_this258.asyncSettings.removeUrl, 'POST', true, null);
                    ajax.emitError = false;

                    ajax.onLoad = function (e) {
                      _this258.removecanceledFile(e, files);

                      return {};
                    };

                    ajax.send(formData);
                  }
                }
              });
            }
          }
        }, {
          key: "removecanceledFile",
          value: function removecanceledFile(e, file) {
            var liElement = this.getLiElement(file);

            if (liElement.querySelector('.' + RETRY_ICON) || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + ABORT_ICON))) {
              return;
            }

            this.updateStatus(file, this.localizedTexts('fileUploadCancel'), '5');
            this.renderFailureState(e, file, liElement);
            var spinnerTarget = liElement.querySelector('.' + REMOVE_ICON);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["hideSpinner"])(spinnerTarget);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.e-spinner-pane'));
            }

            var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
            var args = {
              event: e,
              response: requestResponse,
              operation: 'cancel',
              file: file
            };
            this.trigger('success', args);
          }
        }, {
          key: "renderFailureState",
          value: function renderFailureState(e, file, liElement) {
            var _this259 = this;

            this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
            this.removeProgressbar(liElement, 'failure');

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.e-file-status'))) {
              liElement.querySelector('.e-file-status').classList.add(UPLOAD_FAILED);
            }

            var deleteIcon = liElement.querySelector('.' + ABORT_ICON);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(deleteIcon)) {
              return;
            }

            deleteIcon.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);
            deleteIcon.classList.add(REMOVE_ICON);
            deleteIcon.setAttribute('title', this.localizedTexts('remove'));
            this.pauseButton = this.createElement('span', {
              className: 'e-icons e-file-reload-btn',
              attrs: {
                'tabindex': this.btnTabIndex
              }
            });
            deleteIcon.parentElement.insertBefore(this.pauseButton, deleteIcon);
            this.pauseButton.setAttribute('title', this.localizedTexts('retry'));
            var retryElement = liElement.querySelector('.' + RETRY_ICON);
            /* istanbul ignore next */

            retryElement.addEventListener('click', function (e) {
              _this259.reloadcanceledFile(e, file, liElement, false);
            }, false);
          }
        }, {
          key: "reloadcanceledFile",
          value: function reloadcanceledFile(e, file, liElement, custom) {
            file.statusCode = '1';
            file.status = this.localizedTexts('readyToUploadMessage');

            if (!custom) {
              liElement.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + RETRY_ICON))) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.' + RETRY_ICON));
              }

              this.pauseButton = null;
            }
            /* istanbul ignore next */


            liElement.classList.add(RESTRICT_RETRY);
            this.upload([file]);
          }
          /* istanbul ignore next */

        }, {
          key: "uploadComplete",
          value: function uploadComplete(e, file, customUI) {
            var status = e.target;

            if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {
              var li = this.getLiElement(file);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li) && (!customUI || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(customUI))) {
                return;
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
                this.updateProgressBarClasses(li, UPLOAD_SUCCESS);
                this.removeProgressbar(li, 'success');
                var iconEle = li.querySelector('.' + ABORT_ICON);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(iconEle)) {
                  iconEle.classList.add(DELETE_ICON);
                  iconEle.setAttribute('title', this.localizedTexts('delete'));
                  iconEle.classList.remove(ABORT_ICON);
                  iconEle.classList.remove(UPLOAD_INPROGRESS);
                }
              }

              this.raiseSuccessEvent(e, file);
            } else {
              this.uploadFailed(e, file);
            }
          }
        }, {
          key: "getResponse",
          value: function getResponse(e) {
            // tslint:disable-next-line
            var target = e.currentTarget;
            var response = {
              readyState: target.readyState,
              statusCode: target.status,
              statusText: target.statusText,
              headers: target.getAllResponseHeaders(),
              withCredentials: target.withCredentials
            };
            return response;
          }
          /* istanbul ignore next */

        }, {
          key: "serverRemoveIconBindEvent",
          value: function serverRemoveIconBindEvent() {
            if (this.uploadWrapper && this.isBlazorSaveUrl) {
              var iconElement = [].slice.call(this.uploadWrapper.querySelectorAll('ul li'));

              for (var i = 0; i < iconElement.length; i++) {
                var removeIconEle = iconElement[i] ? iconElement[i].querySelector('.e-icons') : null;

                if (removeIconEle) {
                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(removeIconEle, 'click', this.removeFiles);

                  _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(removeIconEle, 'click', this.removeFiles, this);
                }
              }
            }
          }
        }, {
          key: "raiseSuccessEvent",
          value: function raiseSuccessEvent(e, file) {
            var _this260 = this;

            var response = e && e.currentTarget ? this.getResponse(e) : null;
            var statusMessage = this.localizedTexts('uploadSuccessMessage');
            var args = {
              e: e,
              response: response,
              operation: 'upload',
              file: this.updateStatus(file, statusMessage, '2', false),
              statusText: statusMessage
            };

            if (!this.isBlazorSaveUrl) {
              var liElement = this.getLiElement(file);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
                var spinnerEle = liElement.querySelector('.' + SPINNER_PANE);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(spinnerEle)) {
                  Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["hideSpinner"])(liElement);
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(spinnerEle);
                }
              }
            }

            this.trigger('success', args, function (args) {
              // tslint:disable-next-line
              _this260.updateStatus(file, args.statusText, '2');

              _this260.uploadedFilesData.push(file);

              if (!_this260.isBlazorSaveUrl) {
                _this260.trigger('change', {
                  file: _this260.uploadedFilesData
                });
              }

              _this260.checkActionButtonStatus();

              if (_this260.fileList.length > 0) {
                if (!_this260.getLiElement(file).classList.contains(RESTRICT_RETRY)) {
                  _this260.uploadSequential();

                  _this260.checkActionComplete(true);
                } else {
                  /* istanbul ignore next */
                  _this260.getLiElement(file).classList.remove(RESTRICT_RETRY);
                }
              }
            });
          }
        }, {
          key: "uploadFailed",
          value: function uploadFailed(e, file) {
            var _this261 = this;

            var li = this.getLiElement(file);
            var response = e && e.currentTarget ? this.getResponse(e) : null;
            var statusMessage = this.localizedTexts('uploadFailedMessage');
            var args = {
              e: e,
              response: response,
              operation: 'upload',
              file: this.updateStatus(file, statusMessage, '0', false),
              statusText: statusMessage
            };

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li)) {
              this.renderFailureState(e, file, li);
            }

            this.trigger('failure', args, function (args) {
              // tslint:disable-next-line
              _this261.updateStatus(file, args.statusText, '0');

              _this261.checkActionButtonStatus();

              _this261.uploadSequential();

              _this261.checkActionComplete(true);
            });
          }
        }, {
          key: "uploadSequential",
          value: function uploadSequential() {
            if (this.sequentialUpload) {
              if (this.autoUpload) {
                /* istanbul ignore next */
                this.checkAutoUpload(this.filesData);
              } else {
                this.uploadButtonClick();
              }
            }
          }
        }, {
          key: "checkActionComplete",
          value: function checkActionComplete(increment) {
            increment ? ++this.actionCompleteCount : --this.actionCompleteCount;
            this.raiseActionComplete();
          }
        }, {
          key: "raiseActionComplete",
          value: function raiseActionComplete() {
            if (this.filesData.length === this.actionCompleteCount && this.flag) {
              this.flag = false;
              var eventArgs = {
                fileData: []
              };
              eventArgs.fileData = this.getSelectedFileStatus(this.selectedFiles);
              this.trigger('actionComplete', eventArgs);
            }
          }
        }, {
          key: "getSelectedFileStatus",
          value: function getSelectedFileStatus(selectedFiles) {
            var matchFiles = [];
            var matchFilesIndex = 0;

            for (var selectFileIndex = 0; selectFileIndex < selectedFiles.length; selectFileIndex++) {
              var selectedFileData = selectedFiles[selectFileIndex];

              for (var fileDataIndex = 0; fileDataIndex < this.filesData.length; fileDataIndex++) {
                if (this.filesData[fileDataIndex].name === selectedFileData.name) {
                  matchFiles[matchFilesIndex] = this.filesData[fileDataIndex];
                  ++matchFilesIndex;
                }
              }
            }

            return matchFiles;
          }
        }, {
          key: "updateProgressBarClasses",
          value: function updateProgressBarClasses(li, className) {
            var progressBar = li.querySelector('.' + PROGRESSBAR);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(progressBar)) {
              progressBar.classList.add(className);
            }
          }
        }, {
          key: "removeProgressbar",
          value: function removeProgressbar(li, callType) {
            var _this262 = this;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + PROGRESS_WRAPPER))) {
              this.progressAnimation = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Animation"]({
                duration: 1250
              });
              this.progressAnimation.animate(li.querySelector('.' + PROGRESS_WRAPPER), {
                name: 'FadeOut'
              });
              this.progressAnimation.animate(li.querySelector('.' + PROGRESSBAR_TEXT), {
                name: 'FadeOut'
              });
              setTimeout(function () {
                _this262.animateProgressBar(li, callType);
              }, 750);
            }
          }
          /* istanbul ignore next */

        }, {
          key: "animateProgressBar",
          value: function animateProgressBar(li, callType) {
            if (callType === 'success') {
              li.classList.add(UPLOAD_SUCCESS);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + STATUS))) {
                li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);
                this.progressAnimation.animate(li.querySelector('.' + STATUS), {
                  name: 'FadeIn'
                });
                li.querySelector('.' + STATUS).classList.add(UPLOAD_SUCCESS);
              }
            } else {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(li.querySelector('.' + STATUS))) {
                li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);
                this.progressAnimation.animate(li.querySelector('.' + STATUS), {
                  name: 'FadeIn'
                });
                li.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);
              }
            }

            if (li.querySelector('.' + PROGRESS_WRAPPER)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(li.querySelector('.' + PROGRESS_WRAPPER));
            }
          }
        }, {
          key: "setExtensions",
          value: function setExtensions(extensions) {
            if (extensions !== '' && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(extensions)) {
              this.element.setAttribute('accept', extensions);
            } else {
              this.element.removeAttribute('accept');
            }
          }
        }, {
          key: "templateComplier",
          value: function templateComplier(uploadTemplate) {
            if (uploadTemplate) {
              try {
                if (document.querySelectorAll(uploadTemplate).length) {
                  return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(document.querySelector(uploadTemplate).innerHTML.trim());
                }
              } catch (exception) {
                return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["compile"])(uploadTemplate);
              }
            }

            return undefined;
          }
        }, {
          key: "setRTL",
          value: function setRTL() {
            this.enableRtl ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.uploadWrapper], RTL) : Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.uploadWrapper], RTL);
          }
        }, {
          key: "localizedTexts",
          value: function localizedTexts(localeText) {
            this.l10n.setLocale(this.locale);
            return this.l10n.getConstant(localeText);
          }
        }, {
          key: "setControlStatus",
          value: function setControlStatus() {
            if (!this.enabled) {
              this.uploadWrapper.classList.add(DISABLED);
              this.element.setAttribute('disabled', 'disabled');
              this.browseButton.setAttribute('disabled', 'disabled');

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.clearButton)) {
                this.clearButton.setAttribute('disabled', 'disabled');
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploadButton)) {
                this.uploadButton.setAttribute('disabled', 'disabled');
              }
            } else {
              if (this.uploadWrapper.classList.contains(DISABLED)) {
                this.uploadWrapper.classList.remove(DISABLED);
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.browseButton) && this.element.hasAttribute('disabled')) {
                this.element.removeAttribute('disabled');
                this.browseButton.removeAttribute('disabled');
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.clearButton) && this.clearButton.hasAttribute('disabled')) {
                this.clearButton.removeAttribute('disabled');
              }

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploadButton) && this.uploadButton.hasAttribute('disabled')) {
                this.uploadButton.hasAttribute('disabled');
              }
            }
          }
        }, {
          key: "checkHTMLAttributes",
          value: function checkHTMLAttributes(isDynamic) {
            var attributes$$1 = isDynamic ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['accept', 'multiple', 'disabled'];

            var _iterator106 = _createForOfIteratorHelper(attributes$$1),
                _step106;

            try {
              for (_iterator106.s(); !(_step106 = _iterator106.n()).done;) {
                var prop = _step106.value;

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute(prop))) {
                  switch (prop) {
                    case 'accept':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploaderOptions) || this.uploaderOptions['allowedExtensions'] === undefined || isDynamic) {
                        this.setProperties({
                          allowedExtensions: this.element.getAttribute('accept')
                        }, !isDynamic);
                        this.initialAttr.accept = this.allowedExtensions;
                      }

                      break;

                    case 'multiple':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploaderOptions) || this.uploaderOptions['multiple'] === undefined || isDynamic) {
                        var isMutiple = this.element.getAttribute(prop) === 'multiple' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? true : false;
                        this.setProperties({
                          multiple: isMutiple
                        }, !isDynamic);
                        this.initialAttr.multiple = true;
                      }

                      break;

                    case 'disabled':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploaderOptions) || this.uploaderOptions['enabled'] === undefined || isDynamic) {
                        var isDisabled = this.element.getAttribute(prop) === 'disabled' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? false : true;
                        this.setProperties({
                          enabled: isDisabled
                        }, !isDynamic);
                        this.initialAttr.disabled = true;
                      }

                  }
                }
              }
            } catch (err) {
              _iterator106.e(err);
            } finally {
              _iterator106.f();
            }
          }
        }, {
          key: "chunkUpload",
          value: function chunkUpload(file, custom, fileIndex) {
            var start = 0;
            var end = Math.min(this.asyncSettings.chunkSize, file.size);
            var index = 0;
            var blob = file.rawFile.slice(start, end);
            var metaData = {
              chunkIndex: index,
              blob: blob,
              file: file,
              start: start,
              end: end,
              retryCount: 0,
              request: null
            };
            this.sendRequest(file, metaData, custom, fileIndex);
          }
        }, {
          key: "sendRequest",
          value: function sendRequest(file, metaData, custom, fileIndex) {
            var _this263 = this;

            var formData = new FormData();
            var blob = file.rawFile.slice(metaData.start, metaData.end);
            formData.append('chunkFile', blob, file.name);
            formData.append(this.uploaderName, blob, file.name);
            formData.append('chunk-index', metaData.chunkIndex.toString());
            formData.append('chunkIndex', metaData.chunkIndex.toString());
            var totalChunk = Math.max(Math.ceil(file.size / this.asyncSettings.chunkSize), 1);
            formData.append('total-chunk', totalChunk.toString());
            formData.append('totalChunk', totalChunk.toString());
            var ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Ajax"]({
              url: this.asyncSettings.saveUrl,
              type: 'POST',
              async: true,
              contentType: null
            });
            ajax.emitError = false;

            ajax.onLoad = function (e) {
              _this263.chunkUploadComplete(e, metaData, custom);

              return {};
            };

            ajax.onUploadProgress = function (e) {
              _this263.chunkUploadInProgress(e, metaData, custom);

              return {};
            };

            var eventArgs = {
              fileData: file,
              customFormData: [],
              cancel: false,
              chunkSize: this.asyncSettings.chunkSize === 0 ? null : this.asyncSettings.chunkSize
            };

            ajax.beforeSend = function (e) {
              eventArgs.currentRequest = ajax.httpRequest;
              eventArgs.currentChunkIndex = metaData.chunkIndex;
              /* istanbul ignore next */

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                if (_this263.currentRequestHeader) {
                  _this263.updateCustomheader(ajax.httpRequest, _this263.currentRequestHeader);
                }

                if (_this263.customFormDatas) {
                  _this263.updateFormData(formData, _this263.customFormDatas);
                }
              }

              if (eventArgs.currentChunkIndex === 0) {
                // This event is currently not required but to avoid breaking changes for previous customer, we have included.
                _this263.trigger('uploading', eventArgs, function (eventArgs) {
                  _this263.uploadingEventCallback(formData, eventArgs, e, file);
                });
              } else {
                _this263.trigger('chunkUploading', eventArgs, function (eventArgs) {
                  _this263.uploadingEventCallback(formData, eventArgs, e, file);
                });
              }
            };
            /* istanbul ignore next */


            ajax.onError = function (e) {
              _this263.chunkUploadFailed(e, metaData, custom);

              return {};
            };

            ajax.send(formData);
            metaData.request = ajax;
          }
        }, {
          key: "uploadingEventCallback",
          value: function uploadingEventCallback(formData, eventArgs, e, file) {
            if (eventArgs.cancel) {
              this.eventCancelByArgs(e, eventArgs, file);
            } else {
              this.updateFormData(formData, eventArgs.customFormData);
            }
          }
        }, {
          key: "eventCancelByArgs",
          value: function eventCancelByArgs(e, eventArgs, file) {
            var _this264 = this;

            e.cancel = true;

            if (eventArgs.fileData.statusCode === '5') {
              return;
            }

            var liElement = this.getLiElement(eventArgs.fileData);
            liElement.querySelector('.' + STATUS).innerHTML = this.localizedTexts('fileUploadCancel');
            liElement.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);
            eventArgs.fileData.statusCode = '5';
            eventArgs.fileData.status = this.localizedTexts('fileUploadCancel');
            this.pauseButton = this.createElement('span', {
              className: 'e-icons e-file-reload-btn',
              attrs: {
                'tabindex': this.btnTabIndex
              }
            });
            var removeIcon = liElement.querySelector('.' + REMOVE_ICON);
            removeIcon.parentElement.insertBefore(this.pauseButton, removeIcon);
            this.pauseButton.setAttribute('title', this.localizedTexts('retry'));
            /* istanbul ignore next */

            this.pauseButton.addEventListener('click', function (e) {
              _this264.reloadcanceledFile(e, file, liElement);
            }, false);
            this.checkActionButtonStatus();
          }
        }, {
          key: "checkChunkUpload",
          value: function checkChunkUpload() {
            return this.asyncSettings.chunkSize <= 0 || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.asyncSettings.chunkSize) ? false : true;
          }
        }, {
          key: "chunkUploadComplete",
          value: function chunkUploadComplete(e, metaData, custom) {
            var _this265 = this;

            var response = e.target;
            var liElement;

            if (response.readyState === 4 && response.status >= 200 && response.status < 300) {
              var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
              var totalChunk = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);
              var eventArgs = {
                event: e,
                file: metaData.file,
                chunkIndex: metaData.chunkIndex,
                totalChunk: totalChunk,
                chunkSize: this.asyncSettings.chunkSize,
                response: requestResponse
              };
              this.trigger('chunkSuccess', eventArgs);

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) || !custom) {
                liElement = this.getLiElement(metaData.file);
              }

              this.updateMetaData(metaData);

              if (metaData.end === metaData.file.size) {
                metaData.file.statusCode = '3';
              }

              if (metaData.file.statusCode === '5') {
                var _eventArgs2 = {
                  event: e,
                  fileData: metaData.file,
                  cancel: false
                };
                this.trigger('canceling', _eventArgs2, function (eventArgs) {
                  /* istanbul ignore next */
                  if (eventArgs.cancel) {
                    metaData.file.statusCode = '3';
                    var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);

                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(spinnerTarget)) {
                      Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["hideSpinner"])(spinnerTarget);
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.e-spinner-pane'));
                    }

                    _this265.sendNextRequest(metaData);
                  } else {
                    metaData.request.emitError = false;
                    response.abort();
                    var formData = new FormData();

                    var name = _this265.element.getAttribute('name');

                    formData.append(name, metaData.file.name);
                    formData.append('cancel-uploading', metaData.file.name);
                    formData.append('cancelUploading', metaData.file.name);
                    var ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Ajax"](_this265.asyncSettings.removeUrl, 'POST', true, null);
                    ajax.emitError = false;

                    ajax.onLoad = function (e) {
                      _this265.removeChunkFile(e, metaData, custom);

                      return {};
                    };

                    ajax.send(formData);
                  }
                });
              } else {
                if (totalChunk - 1 === metaData.chunkIndex && totalChunk > metaData.chunkIndex) {
                  var index = this.pausedData.indexOf(metaData);

                  if (index >= 0) {
                    this.pausedData.splice(index, 1);
                  }

                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) || !custom) && liElement) {
                    if (liElement) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.' + PAUSE_UPLOAD));
                    }

                    this.removeChunkProgressBar(metaData);
                  }

                  this.raiseSuccessEvent(e, metaData.file);
                  return;
                }

                this.sendNextRequest(metaData);
              }
            } else {
              this.chunkUploadFailed(e, metaData);
            }
          }
        }, {
          key: "sendNextRequest",
          value: function sendNextRequest(metaData) {
            metaData.start = metaData.end;
            metaData.end += this.asyncSettings.chunkSize;
            metaData.end = Math.min(metaData.end, metaData.file.size);
            metaData.chunkIndex += 1;
            this.sendRequest(metaData.file, metaData);
          }
        }, {
          key: "removeChunkFile",
          value: function removeChunkFile(e, metaData, custom) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) && !custom) {
              var liElement = this.getLiElement(metaData.file);
              var deleteIcon = liElement.querySelector('.' + ABORT_ICON);
              var spinnerTarget = deleteIcon;
              this.updateStatus(metaData.file, this.localizedTexts('fileUploadCancel'), '5');
              this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
              this.removeProgressbar(liElement, 'failure');
              deleteIcon.classList.remove(ABORT_ICON);
              deleteIcon.classList.add(REMOVE_ICON);
              deleteIcon.setAttribute('title', this.localizedTexts('remove'));
              var pauseIcon = liElement.querySelector('.' + PAUSE_UPLOAD);
              pauseIcon.classList.add(RETRY_ICON);
              pauseIcon.classList.remove(PAUSE_UPLOAD);
              pauseIcon.setAttribute('title', this.localizedTexts('retry'));

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement) && !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(deleteIcon)) {
                Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["hideSpinner"])(spinnerTarget);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.e-spinner-pane'));
              }
            }
          }
        }, {
          key: "pauseUpload",
          value: function pauseUpload(metaData, e, custom) {
            metaData.file.statusCode = '4';
            metaData.file.status = this.localizedTexts('pause');
            this.updateMetaData(metaData);
            var eventArgs = {
              event: e ? e : null,
              file: metaData.file,
              chunkIndex: metaData.chunkIndex,
              chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
              chunkSize: this.asyncSettings.chunkSize
            };
            this.abortUpload(metaData, custom, eventArgs);
          }
        }, {
          key: "abortUpload",
          value: function abortUpload(metaData, custom, eventArgs) {
            metaData.request.emitError = false;
            metaData.request.httpRequest.abort();
            var liElement = this.getLiElement(metaData.file);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) || !custom)) {
              var targetElement = liElement.querySelector('.' + PAUSE_UPLOAD);
              targetElement.classList.remove(PAUSE_UPLOAD);
              targetElement.classList.add(RESUME_UPLOAD);
              targetElement.setAttribute('title', this.localizedTexts('resume'));
              targetElement.nextElementSibling.classList.add(REMOVE_ICON);
              targetElement.nextElementSibling.classList.remove(ABORT_ICON);
              targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('remove'));
            }

            for (var i = 0; i < this.pausedData.length; i++) {
              if (this.pausedData[i].file.name === metaData.file.name) {
                this.pausedData.splice(i, 1);
              }
            }

            this.pausedData.push(metaData);
            this.trigger('pausing', eventArgs);
          }
        }, {
          key: "resumeUpload",
          value: function resumeUpload(metaData, e, custom) {
            var liElement = this.getLiElement(metaData.file);
            var targetElement;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
              targetElement = liElement.querySelector('.' + RESUME_UPLOAD);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(targetElement) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) || !custom)) {
              targetElement.classList.remove(RESUME_UPLOAD);
              targetElement.classList.add(PAUSE_UPLOAD);
              targetElement.setAttribute('title', this.localizedTexts('pause'));
              targetElement.nextElementSibling.classList.remove(REMOVE_ICON);
              targetElement.nextElementSibling.classList.add(ABORT_ICON);
              targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('abort'));
            }

            metaData.file.status = this.localizedTexts('inProgress');
            metaData.file.statusCode = '3';
            this.updateMetaData(metaData);
            var eventArgs = {
              event: e ? e : null,
              file: metaData.file,
              chunkIndex: metaData.chunkIndex,
              chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
              chunkSize: this.asyncSettings.chunkSize
            };
            this.trigger('resuming', eventArgs);

            for (var i = 0; i < this.pausedData.length; i++) {
              if (this.pausedData[i].end === this.pausedData[i].file.size) {
                this.chunkUploadComplete(e, metaData, custom);
              } else {
                if (this.pausedData[i].file.name === metaData.file.name) {
                  this.pausedData[i].start = this.pausedData[i].end;
                  this.pausedData[i].end = this.pausedData[i].end + this.asyncSettings.chunkSize;
                  this.pausedData[i].end = Math.min(this.pausedData[i].end, this.pausedData[i].file.size);
                  this.pausedData[i].chunkIndex = this.pausedData[i].chunkIndex + 1;
                  this.sendRequest(this.pausedData[i].file, this.pausedData[i], custom);
                }
              }
            }
          }
        }, {
          key: "updateMetaData",
          value: function updateMetaData(metaData) {
            if (this.uploadMetaData.indexOf(metaData) === -1) {
              this.uploadMetaData.push(metaData);
            } else {
              this.uploadMetaData.splice(this.uploadMetaData.indexOf(metaData), 1);
              this.uploadMetaData.push(metaData);
            }
          }
        }, {
          key: "removeChunkProgressBar",
          value: function removeChunkProgressBar(metaData) {
            var liElement = this.getLiElement(metaData.file);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
              this.updateProgressBarClasses(liElement, UPLOAD_SUCCESS);
              this.removeProgressbar(liElement, 'success');
              var cancelButton = liElement.querySelector('.' + ABORT_ICON);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(cancelButton)) {
                cancelButton.classList.add(DELETE_ICON);
                cancelButton.setAttribute('title', this.localizedTexts('delete'));
                cancelButton.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);
              }
            }
          }
        }, {
          key: "chunkUploadFailed",
          value: function chunkUploadFailed(e, metaData, custom) {
            var _this266 = this;

            var chunkCount = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);
            var liElement;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) || !custom)) {
              liElement = this.getLiElement(metaData.file);
            }

            var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
            var eventArgs = {
              event: e,
              file: metaData.file,
              chunkIndex: metaData.chunkIndex,
              totalChunk: chunkCount,
              chunkSize: this.asyncSettings.chunkSize,
              cancel: false,
              response: requestResponse
            };
            this.trigger('chunkFailure', eventArgs, function (eventArgs) {
              // To prevent triggering of failure event
              // tslint:disable-next-line
              if (!eventArgs.cancel) {
                if (metaData.retryCount < _this266.asyncSettings.retryCount) {
                  setTimeout(function () {
                    _this266.retryRequest(liElement, metaData, custom);
                  }, _this266.asyncSettings.retryAfterDelay);
                } else {
                  if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
                    var pauseButton = liElement.querySelector('.' + PAUSE_UPLOAD) ? liElement.querySelector('.' + PAUSE_UPLOAD) : liElement.querySelector('.' + RESUME_UPLOAD);

                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(pauseButton)) {
                      pauseButton.classList.add(RETRY_ICON);
                      pauseButton.classList.remove(PAUSE_UPLOAD, RESUME_UPLOAD);
                    }

                    _this266.updateProgressBarClasses(liElement, UPLOAD_FAILED);

                    _this266.removeProgressbar(liElement, 'failure');

                    liElement.querySelector('.e-icons').classList.remove(UPLOAD_INPROGRESS);
                    var iconElement = liElement.querySelector('.' + ABORT_ICON) ? liElement.querySelector('.' + ABORT_ICON) : liElement.querySelector('.' + REMOVE_ICON);
                    iconElement.classList.remove(ABORT_ICON);

                    if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + PAUSE_UPLOAD))) {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(liElement.querySelector('.' + PAUSE_UPLOAD));
                    }

                    if (metaData.start > 0) {
                      iconElement.classList.add(DELETE_ICON);
                      iconElement.setAttribute('title', _this266.localizedTexts('delete'));
                    } else {
                      iconElement.classList.add(REMOVE_ICON);
                      iconElement.setAttribute('title', _this266.localizedTexts('remove'));
                    }
                  }

                  metaData.retryCount = 0;
                  var file = metaData.file;

                  var failureMessage = _this266.localizedTexts('uploadFailedMessage');

                  var args = {
                    e: e,
                    response: requestResponse,
                    operation: 'upload',
                    file: _this266.updateStatus(file, failureMessage, '0', false),
                    statusText: failureMessage
                  };

                  _this266.trigger('failure', args, function (args) {
                    // tslint:disable-next-line
                    _this266.updateStatus(file, args.statusText, '0');

                    _this266.uploadSequential();

                    _this266.checkActionComplete(true);
                  });
                }
              }
            });
          }
        }, {
          key: "retryRequest",
          value: function retryRequest(liElement, metaData, custom) {
            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom) || !custom) && liElement) {
              this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
            }

            metaData.retryCount += 1;
            this.sendRequest(metaData.file, metaData);
          }
        }, {
          key: "checkPausePlayAction",
          value: function checkPausePlayAction(e) {
            var targetElement = e.target;
            var selectedElement = e.target.parentElement;
            var index = this.fileList.indexOf(selectedElement);
            var fileData = this.filesData[index];
            var metaData = this.getCurrentMetaData(fileData);

            if (targetElement.classList.contains(PAUSE_UPLOAD)) {
              /* istanbul ignore next */
              this.pauseUpload(metaData, e);
            } else if (targetElement.classList.contains(RESUME_UPLOAD)) {
              /* istanbul ignore next */
              this.resumeUpload(metaData, e);
            } else if (targetElement.classList.contains(RETRY_ICON)) {
              if (metaData.file.status === this.localizedTexts('fileUploadCancel')) {
                this.retryUpload(metaData, false);
              } else {
                this.retryUpload(metaData, true);
              }
            }
          }
        }, {
          key: "retryUpload",
          value: function retryUpload(metaData, fromcanceledStage) {
            if (fromcanceledStage) {
              metaData.end = metaData.end + this.asyncSettings.chunkSize;
              metaData.start = metaData.start + this.asyncSettings.chunkSize;
              this.sendRequest(metaData.file, metaData);
            } else {
              metaData.file.statusCode = '1';
              metaData.file.status = this.localizedTexts('readyToUploadMessage');
              this.chunkUpload(metaData.file);
            }
            /* istanbul ignore next */


            this.getLiElement(metaData.file).classList.add(RESTRICT_RETRY);
          }
        }, {
          key: "chunkUploadInProgress",
          value: function chunkUploadInProgress(e, metaData, custom) {
            var _this267 = this;

            if (metaData.file.statusCode === '4') {
              return;
            }

            if (metaData.file.statusCode !== '4' && metaData.file.statusCode !== '5') {
              metaData.file.statusCode = '3';
              metaData.file.status = this.localizedTexts('inProgress');
            }

            this.updateMetaData(metaData);
            var liElement = this.getLiElement(metaData.file);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
              return;
            }

            var retryElement = liElement.querySelector('.' + RETRY_ICON);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(retryElement)) {
              retryElement.classList.add(PAUSE_UPLOAD);
              retryElement.setAttribute('title', this.localizedTexts('pause'));
              retryElement.classList.remove(RETRY_ICON);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement)) {
              if (!(liElement.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0)) {
                var statusElement = liElement.querySelector('.' + STATUS);

                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template)) {
                  statusElement.classList.add(UPLOAD_INPROGRESS);
                  statusElement.classList.remove(UPLOAD_FAILED);
                  this.createProgressBar(liElement);
                  this.updateProgressBarClasses(liElement, UPLOAD_INPROGRESS);
                }

                var clearIcon = liElement.querySelector('.' + REMOVE_ICON) ? liElement.querySelector('.' + REMOVE_ICON) : liElement.querySelector('.' + DELETE_ICON);

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(clearIcon)) {
                  clearIcon.classList.add(ABORT_ICON);
                  clearIcon.setAttribute('title', this.localizedTexts('abort'));
                  clearIcon.classList.remove(REMOVE_ICON);
                }
              }

              if (!isNaN(Math.round(e.loaded / e.total * 100)) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template) && metaData.file.statusCode !== '4') {
                var loadedSize = metaData.chunkIndex * this.asyncSettings.chunkSize;
                var value = Math.min((loadedSize + e.loaded) / metaData.file.size * 100, 100);
                this.changeProgressValue(liElement, Math.round(value).toString() + '%');
              }

              if (metaData.chunkIndex === 0) {
                this.checkActionButtonStatus();
              }
            }

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement.querySelector('.' + PAUSE_UPLOAD)) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template)) {
              this.pauseButton = this.createElement('span', {
                className: 'e-icons e-file-pause-btn',
                attrs: {
                  'tabindex': this.btnTabIndex
                }
              });

              if (this.browserName === 'msie') {
                this.pauseButton.classList.add('e-msie');
              }

              var abortIcon = liElement.querySelector('.' + ABORT_ICON);
              abortIcon.parentElement.insertBefore(this.pauseButton, abortIcon);
              this.pauseButton.setAttribute('title', this.localizedTexts('pause'));
              this.pauseButton.addEventListener('click', function (e) {
                _this267.checkPausePlayAction(e);
              }, false);
            }
          }
          /**
           * It is used to convert bytes value into kilobytes or megabytes depending on the size based
           * on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).
           * @param { number } bytes - specifies the file size in bytes.
           * @returns string
           */

        }, {
          key: "bytesToSize",
          value: function bytesToSize(bytes) {
            var i = -1;

            if (!bytes) {
              return '0.0 KB';
            }

            do {
              bytes = bytes / 1024;
              i++;
            } while (bytes > 99);

            if (i >= 2) {
              bytes = bytes * 1024;
              i = 1;
            }

            return Math.max(bytes, 0).toFixed(1) + ' ' + ['KB', 'MB'][i];
          }
          /**
           * Allows you to sort the file data alphabetically based on its file name clearly.
           * @param { FileList } filesData - specifies the files data for upload.
           * @returns File[]
           */

          /* istanbul ignore next */

        }, {
          key: "sortFileList",
          value: function sortFileList(filesData) {
            filesData = filesData ? filesData : this.sortFilesList;
            var files = filesData;
            var fileNames = [];

            for (var i = 0; i < files.length; i++) {
              fileNames.push(files[i].name);
            }

            var sortedFileNames = fileNames.sort();
            var sortedFilesData = [];

            var _iterator107 = _createForOfIteratorHelper(sortedFileNames),
                _step107;

            try {
              for (_iterator107.s(); !(_step107 = _iterator107.n()).done;) {
                var name = _step107.value;

                for (var _i128 = 0; _i128 < files.length; _i128++) {
                  if (name === files[_i128].name) {
                    sortedFilesData.push(files[_i128]);
                  }
                }
              }
            } catch (err) {
              _iterator107.e(err);
            } finally {
              _iterator107.f();
            }

            return sortedFilesData;
          }
          /**
           * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
           * @method destroy
           * @return {void}.
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.element.value = null;

            if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {
              this.clearAll();
            }

            this.unWireEvents();
            this.unBindDropEvents();

            if (this.multiple) {
              this.element.removeAttribute('multiple');
            }

            if (!this.enabled) {
              this.element.removeAttribute('disabled');
            }

            this.element.removeAttribute('accept');
            this.setInitialAttributes();
            var attributes$$1 = ['aria-label', 'directory', 'webkitdirectory', 'tabindex'];

            for (var _i129 = 0, _attributes$$ = attributes$$1; _i129 < _attributes$$.length; _i129++) {
              var key = _attributes$$[_i129];
              this.element.removeAttribute(key);
            }

            if (!this.isServerBlazor) {
              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.uploadWrapper)) {
                this.uploadWrapper.parentElement.appendChild(this.element);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.uploadWrapper);
              }

              this.uploadWrapper = null;

              _get2(_getPrototypeOf2(Uploader.prototype), "destroy", this).call(this);
            } else {
              this.uploadWrapper = null;
            }
          }
          /**
           * Allows you to call the upload process manually by calling save URL action.
           * To process the selected files (added in upload queue), pass an empty argument otherwise
           * upload the specific file based on its argument.
           * @param { FileInfo | FileInfo[] } files - specifies the files data for upload.
           * @returns void
           */

        }, {
          key: "upload",
          value: function upload(files, custom) {
            var _this268 = this;

            files = files ? files : this.filesData;

            if (this.sequentialUpload && (this.isFirstFileOnSelection || custom)) {
              this.sequenceUpload(files);
            } else {
              var uploadFiles = this.getFilesInArray(files);
              var eventArgs = {
                customFormData: [],
                currentRequest: null,
                cancel: false
              };
              this.trigger('beforeUpload', eventArgs, function (eventArgs) {
                if (!eventArgs.cancel) {
                  if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                    _this268.currentRequestHeader = eventArgs.currentRequest ? eventArgs.currentRequest : _this268.currentRequestHeader;
                    _this268.customFormDatas = eventArgs.customFormData && eventArgs.customFormData.length > 0 ? eventArgs.customFormData : _this268.customFormDatas;
                  }

                  _this268.uploadFiles(uploadFiles, custom);
                }
              });
            }
          }
        }, {
          key: "getFilesInArray",
          value: function getFilesInArray(files) {
            var uploadFiles = [];

            if (files instanceof Array) {
              uploadFiles = files;
            } else {
              uploadFiles.push(files);
            }

            return uploadFiles;
          }
          /* istanbul ignore next */

        }, {
          key: "serverReadFileBase64",
          value: function serverReadFileBase64(fileIndex, position, totalCount) {
            var _this269 = this;

            return new Promise(function (resolve, reject) {
              var file = _this269.fileStreams[fileIndex].rawFile;

              try {
                var reader = new FileReader(); // tslint:disable-next-line

                reader.onload = function (args) {
                  return function () {
                    try {
                      var contents = args.result;
                      var data = contents ? contents.split(';base64,')[1] : null;
                      resolve(data);
                    } catch (e) {
                      reject(e);
                    }
                  };
                }(reader);

                reader.readAsDataURL(file.slice(position, position + totalCount));
              } catch (e) {
                reject(e);
              }
            });
          }
          /* istanbul ignore next */

        }, {
          key: "uploadFileCount",
          value: function uploadFileCount(ele) {
            var files = this.filesData;

            if (!files || files.length === 0) {
              return -1;
            }

            var result = files.length;
            return result;
          }
          /* istanbul ignore next */

        }, {
          key: "getFileRead",
          value: function getFileRead(index, ele) {
            var files = this.filesData;

            if (!files || files.length === 0) {
              return -1;
            }

            var file = files[index];
            var fileCount = this.newFileRef++;
            this.fileStreams[fileCount] = file;
            return fileCount;
          }
          /* istanbul ignore next */

        }, {
          key: "getFileInfo",
          value: function getFileInfo(index, ele) {
            var files = this.filesData;

            if (!files || files.length === 0) {
              return null;
            }

            var file = files[index];

            if (!file) {
              return null;
            }

            return this.filesData[index];
          }
        }, {
          key: "uploadFiles",
          value: function uploadFiles(files, custom) {
            var _this270 = this;

            var selectedFiles = [];

            if (this.asyncSettings.saveUrl === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.asyncSettings.saveUrl)) {
              if (this.isServerBlazor) {
                // tslint:disable-next-line
                this.interopAdaptor.invokeMethodAsync('GetFileDetails', files);
              }

              return;
            }

            if (!custom || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(custom)) {
              if (!this.multiple) {
                var file = [];
                file.push(files[0]);
                selectedFiles = this.filterfileList(file);
              } else {
                selectedFiles = this.filterfileList(files);
              }
            } else {
              selectedFiles = files;
            }

            var _loop21 = function _loop21(i) {
              if (_this270.isServerBlazor && !_this270.checkChunkUpload()) {
                /* istanbul ignore next */

                /* tslint:disable */
                if (selectedFiles[i] && selectedFiles[i].rawFile instanceof File) {
                  _this270.getBase64(selectedFiles[i].rawFile).then(function (data) {
                    _this270.base64String.push(data);

                    _this270.uploadFilesRequest(selectedFiles, i, custom);
                  });
                }
                /* tslint:disable */

              } else {
                _this270.uploadFilesRequest(selectedFiles, i, custom);
              }
            };

            for (var i = 0; i < selectedFiles.length; i++) {
              _loop21(i);
            }
          }
        }, {
          key: "uploadFilesRequest",
          value: function uploadFilesRequest(selectedFiles, i, custom) {
            var _this271 = this;

            var cloneFiles = [];
            var chunkEnabled = this.checkChunkUpload();
            var ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Ajax"](this.asyncSettings.saveUrl, 'POST', true, null);
            ajax.emitError = false;
            var getFileData;
            /* istanbul ignore next */

            if (this.isServerBlazor) {
              getFileData = selectedFiles.slice(0);
              cloneFiles.push(getFileData[i].rawFile);
            }

            var eventArgs = {
              fileData: this.isServerBlazor ? getFileData[i] : selectedFiles[i],
              customFormData: [],
              cancel: false
            };
            var formData = new FormData();

            ajax.beforeSend = function (e) {
              eventArgs.currentRequest = ajax.httpRequest;
              /* istanbul ignore next */

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                eventArgs.fileData.rawFile = !chunkEnabled ? _this271.base64String[i] : eventArgs.fileData.rawFile;

                if (_this271.currentRequestHeader) {
                  _this271.updateCustomheader(ajax.httpRequest, _this271.currentRequestHeader);
                }

                if (_this271.customFormDatas) {
                  _this271.updateFormData(formData, _this271.customFormDatas);
                }
              }

              _this271.trigger('uploading', eventArgs, function (eventArgs) {
                /* istanbul ignore next */
                if (_this271.isServerBlazor && !chunkEnabled) {
                  selectedFiles[i].rawFile = eventArgs.fileData.rawFile = cloneFiles[i];
                }

                if (eventArgs.cancel) {
                  _this271.eventCancelByArgs(e, eventArgs, selectedFiles[i]);
                }

                _this271.updateFormData(formData, eventArgs.customFormData);
              });
            };

            if (selectedFiles[i].statusCode === '1') {
              var name = this.element.getAttribute('name');
              formData.append(name, selectedFiles[i].rawFile, selectedFiles[i].name);

              if (chunkEnabled && selectedFiles[i].size > this.asyncSettings.chunkSize) {
                this.chunkUpload(selectedFiles[i], custom, i);
              } else {
                ajax.onLoad = function (e) {
                  if (eventArgs.cancel && _this271.isServerBlazor) {
                    return {};
                  } else {
                    _this271.uploadComplete(e, selectedFiles[i], custom);

                    return {};
                  }
                };

                ajax.onUploadProgress = function (e) {
                  if (eventArgs.cancel && _this271.isServerBlazor) {
                    return {};
                  } else {
                    _this271.uploadInProgress(e, selectedFiles[i], custom, ajax);

                    return {};
                  }
                };
                /* istanbul ignore next */


                ajax.onError = function (e) {
                  _this271.uploadFailed(e, selectedFiles[i]);

                  return {};
                };

                ajax.send(formData);
              }
            }
          }
        }, {
          key: "spliceFiles",
          value: function spliceFiles(liIndex) {
            var liElement = this.fileList[liIndex];
            var allFiles = this.getFilesData();
            var nameElements = +liElement.getAttribute('data-files-count');
            var startIndex = 0;

            for (var i = 0; i < liIndex; i++) {
              startIndex += +this.fileList[i].getAttribute('data-files-count');
            }

            var endIndex = startIndex + nameElements - 1;

            for (var j = endIndex; j >= startIndex; j--) {
              allFiles.splice(j, 1);
            }
          }
          /**
           * Remove the uploaded file from server manually by calling the remove URL action.
           * If you pass an empty argument to this method, the complete file list can be cleared,
           * otherwise remove the specific file based on its argument (“file_data”).
           * @param { FileInfo | FileInfo[] } fileData - specifies the files data to remove from file list/server.
           * @param { boolean } customTemplate - Set true if the component rendering with customize template.
           * @param { boolean } removeDirectly - Set true if files remove without removing event.
           * @param { boolean } postRawFile - Set false, to post file name only to the remove action.
           * @returns void
           */

        }, {
          key: "remove",
          value: function remove(fileData, customTemplate, removeDirectly, postRawFile, args) {
            var _this272 = this;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(postRawFile)) {
              postRawFile = true;
            }

            var eventArgs = {
              event: args,
              cancel: false,
              filesData: [],
              customFormData: [],
              postRawFile: postRawFile,
              currentRequest: null
            };
            var beforeEventArgs = {
              cancel: false,
              customFormData: [],
              currentRequest: null
            };
            this.trigger('beforeRemove', beforeEventArgs, function (beforeEventArgs) {
              if (!beforeEventArgs.cancel) {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])()) {
                  _this272.currentRequestHeader = beforeEventArgs.currentRequest;
                  _this272.customFormDatas = beforeEventArgs.customFormData;
                }

                var index;

                if (_this272.isFormUpload() && !_this272.isBlazorSaveUrl) {
                  eventArgs.filesData = fileData;

                  _this272.trigger('removing', eventArgs, function (eventArgs) {
                    if (!eventArgs.cancel) {
                      var removingFiles = _this272.getFilesInArray(fileData);

                      var isLiRemoved = false;
                      var liIndex;

                      var _iterator108 = _createForOfIteratorHelper(removingFiles),
                          _step108;

                      try {
                        for (_iterator108.s(); !(_step108 = _iterator108.n()).done;) {
                          var data = _step108.value;

                          if (!isLiRemoved) {
                            liIndex = _this272.fileList.indexOf(data.list);
                          }

                          if (liIndex > -1) {
                            var inputElement = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(data.input) ? data.input : null;

                            if (inputElement) {
                              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(inputElement);
                            }

                            _this272.spliceFiles(liIndex);

                            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(_this272.fileList[liIndex]);

                            _this272.fileList.splice(liIndex, 1);

                            isLiRemoved = true;
                            liIndex = -1;
                          }
                        }
                      } catch (err) {
                        _iterator108.e(err);
                      } finally {
                        _iterator108.f();
                      }
                    }
                  });
                } else if (_this272.isForm && (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(_this272.asyncSettings.removeUrl) || _this272.asyncSettings.removeUrl === '') && !_this272.isBlazorSaveUrl) {
                  eventArgs.filesData = _this272.getFilesData();

                  _this272.trigger('removing', eventArgs, function (eventArgs) {
                    if (!eventArgs.cancel) {
                      _this272.clearAll();
                    }
                  });
                } else {
                  var removeFiles = [];
                  fileData = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fileData) ? fileData : _this272.filesData;

                  if (fileData instanceof Array) {
                    removeFiles = fileData;
                  } else {
                    removeFiles.push(fileData);
                  }

                  eventArgs.filesData = removeFiles;
                  var removeUrl = _this272.asyncSettings.removeUrl;
                  var validUrl = removeUrl === '' || Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(removeUrl) ? false : true;

                  var _iterator109 = _createForOfIteratorHelper(removeFiles),
                      _step109;

                  try {
                    var _loop22 = function _loop22() {
                      var files = _step109.value;
                      index = _this272.filesData.indexOf(files);

                      if ((files.statusCode === '2' || files.statusCode === '4') && validUrl) {
                        _this272.removeUploadedFile(files, eventArgs, removeDirectly, customTemplate);
                      } else {
                        if (!removeDirectly) {
                          _this272.trigger('removing', eventArgs, function (eventArgs) {
                            if (!eventArgs.cancel) {
                              _this272.removeFilesData(files, customTemplate);
                            }
                          });
                        } else {
                          _this272.removeFilesData(files, customTemplate);
                        }
                      }

                      if (args && !args.target.classList.contains(REMOVE_ICON)) {
                        _this272.checkActionComplete(false);
                      }
                    };

                    for (_iterator109.s(); !(_step109 = _iterator109.n()).done;) {
                      _loop22();
                    }
                  } catch (err) {
                    _iterator109.e(err);
                  } finally {
                    _iterator109.f();
                  }
                }
              }
            });
          }
          /**
           * Clear all the file entries from list that can be uploaded files or added in upload queue.
           * @returns void
           */

        }, {
          key: "clearAll",
          value: function clearAll() {
            var _this273 = this;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.listParent) && !(this.isBlazorSaveUrl || this.isBlazorTemplate)) {
              if (this.browserName !== 'msie') {
                this.element.value = '';
              }

              this.filesData = [];
              return;
            }

            var eventArgs = {
              cancel: false,
              filesData: this.filesData
            };
            this.trigger('clearing', eventArgs, function (eventArgs) {
              if (!eventArgs.cancel) {
                _this273.clearData();

                _this273.actionCompleteCount = 0;
                _this273.count = -1;
              }
            });
          }
          /**
           * Get the data of files which are shown in file list.
           * @param { number } index - specifies the file list item(li) index.
           * @returns FileInfo[]
           */

        }, {
          key: "getFilesData",
          value: function getFilesData(index) {
            if (!this.isServerBlazor) {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(index)) {
                return this.filesData;
              } else {
                return this.getSelectedFiles(index);
              }
            } else {
              for (var i = 0; i < this.filesData.length; i++) {
                this.filesData[i].rawFile = this.base64String[i];
              }

              return this.filesData;
            }
          }
          /**
           * Pauses the in-progress chunked upload based on the file data.
           * @param { FileInfo | FileInfo[] } fileData - specifies the files data to pause from uploading.
           * @param { boolean } custom - Set true if used custom UI.
           * @returns void
           */

        }, {
          key: "pause",
          value: function pause(fileData, custom) {
            fileData = fileData ? fileData : this.filesData;
            var fileDataFiles = this.getFilesInArray(fileData);
            this.pauseUploading(fileDataFiles, custom);
          }
        }, {
          key: "pauseUploading",
          value: function pauseUploading(fileData, custom) {
            var files = this.getFiles(fileData);

            for (var i = 0; i < files.length; i++) {
              if (files[i].statusCode === '3') {
                this.pauseUpload(this.getCurrentMetaData(files[i], null), null, custom);
              }
            }
          }
        }, {
          key: "getFiles",
          value: function getFiles(fileData) {
            var files = [];

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(fileData) && !(fileData instanceof Array)) {
              files.push(fileData);
            } else {
              files = fileData;
            }

            return files;
          }
          /**
           * Resumes the chunked upload that is previously paused based on the file data.
           * @param { FileInfo | FileInfo[] } fileData - specifies the files data to resume the paused file.
           * @param { boolean } custom - Set true if used custom UI.
           * @returns void
           */

        }, {
          key: "resume",
          value: function resume(fileData, custom) {
            fileData = fileData ? fileData : this.filesData;
            var fileDataFiles = this.getFilesInArray(fileData);
            this.resumeFiles(fileDataFiles, custom);
          }
        }, {
          key: "resumeFiles",
          value: function resumeFiles(fileData, custom) {
            var files = this.getFiles(fileData);

            for (var i = 0; i < files.length; i++) {
              if (files[i].statusCode === '4') {
                this.resumeUpload(this.getCurrentMetaData(files[i], null), null, custom);
              }
            }
          }
          /**
           * Retries the canceled or failed file upload based on the file data.
           * @param { FileInfo | FileInfo[] } fileData - specifies the files data to retry the canceled or failed file.
           * @param { boolean } fromcanceledStage - Set true to retry from canceled stage and set false to retry from initial stage.
           * @returns void
           */

        }, {
          key: "retry",
          value: function retry(fileData, fromcanceledStage, custom) {
            fileData = fileData ? fileData : this.filesData;
            var fileDataFiles = this.getFilesInArray(fileData);
            this.retryFailedFiles(fileDataFiles, fromcanceledStage, custom);
          }
        }, {
          key: "retryFailedFiles",
          value: function retryFailedFiles(fileData, fromcanceledStage, custom) {
            var files = this.getFiles(fileData);

            for (var i = 0; i < files.length; i++) {
              if (files[i].statusCode === '5' || files[i].statusCode === '0') {
                if (this.asyncSettings.chunkSize > 0) {
                  this.retryUpload(this.getCurrentMetaData(files[i], null), fromcanceledStage);
                } else {
                  var liElement = void 0;

                  if (!custom) {
                    liElement = this.fileList[this.filesData.indexOf(files[i])];
                  }

                  this.reloadcanceledFile(null, files[i], liElement, custom);
                }
              }
            }
          }
          /**
           * Stops the in-progress chunked upload based on the file data.
           * When the file upload is canceled, the partially uploaded file is removed from server.
           * @param { FileInfo | FileInfo[] } fileData - specifies the files data to cancel the progressing file.
           * @returns void
           */

        }, {
          key: "cancel",
          value: function cancel(fileData) {
            fileData = fileData ? fileData : this.filesData;
            var cancelingFiles = this.getFilesInArray(fileData);
            this.cancelUpload(cancelingFiles);
          }
        }, {
          key: "cancelUpload",
          value: function cancelUpload(fileData) {
            var files = this.getFiles(fileData);

            if (this.asyncSettings.chunkSize > 0) {
              for (var i = 0; i < files.length; i++) {
                if (files[i].statusCode === '3') {
                  var metaData = this.getCurrentMetaData(files[i], null);
                  metaData.file.statusCode = '5';
                  metaData.file.status = this.localizedTexts('fileUploadCancel');
                  this.updateMetaData(metaData);
                  this.showHideUploadSpinner(files[i]);
                }
              }
            } else {
              for (var _i130 = 0; _i130 < files.length; _i130++) {
                if (files[_i130].statusCode === '3') {
                  files[_i130].statusCode = '5';
                  files[_i130].status = this.localizedTexts('fileUploadCancel');
                  this.showHideUploadSpinner(files[_i130]);
                }
              }
            }
          }
        }, {
          key: "showHideUploadSpinner",
          value: function showHideUploadSpinner(files) {
            var liElement = this.getLiElement(files);

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(liElement) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.template)) {
              var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["createSpinner"])({
                target: spinnerTarget,
                width: '20px'
              });
              Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["showSpinner"])(spinnerTarget);
            }
          }
        }]);

        return Uploader;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({
        saveUrl: '',
        removeUrl: ''
      }, AsyncSettings)], Uploader.prototype, "asyncSettings", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Uploader.prototype, "sequentialUpload", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], Uploader.prototype, "htmlAttributes", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Uploader.prototype, "cssClass", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Uploader.prototype, "enabled", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Uploader.prototype, "template", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Uploader.prototype, "multiple", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Uploader.prototype, "autoUpload", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Complex"])({}, ButtonsProps)], Uploader.prototype, "buttons", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], Uploader.prototype, "allowedExtensions", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(0)], Uploader.prototype, "minFileSize", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(30000000)], Uploader.prototype, "maxFileSize", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], Uploader.prototype, "dropArea", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Collection"])([{}], FilesProp)], Uploader.prototype, "files", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], Uploader.prototype, "showFileList", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], Uploader.prototype, "directoryUpload", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Default')], Uploader.prototype, "dropEffect", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "created", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "actionComplete", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "rendering", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "beforeUpload", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "fileListRendering", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "selected", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "uploading", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "success", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "failure", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "removing", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "beforeRemove", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "clearing", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "progress", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "change", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "chunkSuccess", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "chunkFailure", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "chunkUploading", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "canceling", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "pausing", void 0);

      __decorate$4([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], Uploader.prototype, "resuming", void 0);

      Uploader = __decorate$4([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], Uploader);
      /**
       * Uploader modules
       */

      var __decorate$5 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var APPLY = 'e-apply';
      var CANCEL = 'e-cancel';
      var CURRENT = 'e-current';
      var CONTAINER = 'e-container';
      var CTRLBTN = 'e-ctrl-btn';
      var CTRLSWITCH = 'e-switch-ctrl-btn';
      var DISABLED$1 = 'e-disabled';
      var FORMATSWITCH = 'e-value-switch-btn';
      var HANDLER = 'e-handler';
      var HEX = 'e-hex';
      var HIDEHEX = 'e-hide-hex-value';
      var HIDEOPACITY = 'e-hide-opacity';
      var HIDERGBA = 'e-hide-switchable-value';
      var HIDEVALUE = 'e-hide-value';
      var HIDEVALUESWITCH = 'e-hide-valueswitcher';
      var HSVAREA = 'e-hsv-color';
      var HSVCONTAINER = 'e-hsv-container';
      var INPUTWRAPPER = 'e-selected-value';
      var MODESWITCH = 'e-mode-switch-btn';
      var NOCOLOR = 'e-nocolor-item';
      var OPACITY = 'e-opacity-value';
      var PALETTES = 'e-palette';
      var PALETTECONTENT = 'e-color-palette';
      var PICKERCONTENT = 'e-color-picker';
      var PREVIEW = 'e-preview-container';
      var PREVIOUS = 'e-previous';
      var RTL$1 = 'e-rtl';
      var SHOWVALUE = 'e-show-value';
      var SELECT = 'e-selected';
      var SPLITPREVIEW = 'e-split-preview';
      var TILE = 'e-tile';
      var presets = {
        "default": ['#000000', '#f44336', '#e91e63', '#9c27b0', '#673ab7', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#ffeb3b', '#ffffff', '#ffebee', '#fce4ec', '#f3e5f5', '#ede7f6', '#e3f2fd', '#e1f5fe', '#e0f7fa', '#e0f2f1', '#fffde7', '#f2f2f2', '#ffcdd2', '#f8bbd0', '#e1bee7', '#d1c4e9', '#bbdefb', '#b3e5fc', '#b2ebf2', '#b2dfdb', '#fff9c4', '#e6e6e6', '#ef9a9a', '#f48fb1', '#ce93d8', '#b39ddb', '#90caf9', '#81d4fa', '#80deea', '#80cbc4', '#fff59d', '#cccccc', '#e57373', '#f06292', '#ba68c8', '#9575cd', '#64b5f6', '#4fc3f7', '#4dd0e1', '#4db6ac', '#fff176', '#b3b3b3', '#ef5350', '#ec407a', '#ab47bc', '#7e57c2', '#42a5f5', '#29b6f6', '#26c6da', '#26a69a', '#ffee58', '#999999', '#e53935', '#d81b60', '#8e24aa', '#5e35b1', '#1e88e5', '#039be5', '#00acc1', '#00897b', '#fdd835', '#808080', '#d32f2f', '#c2185b', '#7b1fa2', '#512da8', '#1976d2', '#0288d1', '#0097a7', '#00796b', '#fbc02d', '#666666', '#c62828', '#ad1457', '#6a1b9a', '#4527a0', '#1565c0', '#0277bd', '#00838f', '#00695c', '#f9a825', '#4d4d4d', '#b71c1c', '#880e4f', '#4a148c', '#311b92', '#0d47a1', '#01579b', '#006064', '#004d40', '#f57f17']
      };
      /**
       * ColorPicker component is a user interface to select and adjust color values. It provides supports for various
       * color specification like Red Green Blue, Hue Saturation Value and Hex codes.
       * ```html
       * <input type="color" id="color-picker">
       * ```
       * ```typescript
       * <script>
       *   let colorPickerObj: ColorPicker = new ColorPicker(null , "#color-picker");
       * </script>
       * ```
       */

      var ColorPicker = /*#__PURE__*/function (_syncfusion_ej2_base_61) {
        _inherits2(ColorPicker, _syncfusion_ej2_base_61);

        var _super86 = _createSuper(ColorPicker);

        function ColorPicker(options, element) {
          _classCallCheck2(this, ColorPicker);

          return _super86.call(this, options, element);
        }

        _createClass2(ColorPicker, [{
          key: "preRender",
          value: function preRender() {
            var ele = this.element;
            this.formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

            if (this.formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formElement, 'reset', this.formResetHandler, this);
            }

            var localeText = {
              Apply: 'Apply',
              Cancel: 'Cancel',
              ModeSwitcher: 'Switch Mode'
            };
            this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('colorpicker', localeText, this.locale);

            if (ele.getAttribute('ejs-for') && !ele.getAttribute('name')) {
              ele.setAttribute('name', ele.id);
            }
          }
          /**
           * To Initialize the component rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            this.initWrapper();

            if (this.inline) {
              this.createWidget();
            } else {
              this.createSplitBtn();
            }

            if (!this.enableOpacity) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.container.parentElement], HIDEOPACITY);
            }

            this.renderComplete();
          }
        }, {
          key: "initWrapper",
          value: function initWrapper() {
            var wrapper = this.createElement('div', {
              className: 'e-' + this.getModuleName() + '-wrapper'
            });
            this.element.parentNode.insertBefore(wrapper, this.element);
            wrapper.appendChild(this.element);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              'tabindex': '-1',
              'spellcheck': 'false'
            });
            this.container = this.createElement('div', {
              className: CONTAINER
            });
            this.getWrapper().appendChild(this.container);
            var value = this.value ? this.roundValue(this.value).toLowerCase() : '#008000ff';

            if (this.noColor && this.mode === 'Palette' && this.value === '') {
              value = '';
            }

            var slicedValue = value.slice(0, 7);

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.initialInputValue)) {
              this.initialInputValue = slicedValue;
            }

            this.element.value = slicedValue;

            if (this.enableOpacity) {
              this.setProperties({
                'value': value
              }, true);
            } else {
              this.setProperties({
                'value': slicedValue
              }, true);
            }

            if (this.enableRtl) {
              wrapper.classList.add(RTL$1);
            }

            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper], this.cssClass.split(' '));
            }

            this.tileRipple = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.container, {
              selector: '.' + TILE
            });
            this.ctrlBtnRipple = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["rippleEffect"])(this.container, {
              selector: '.e-btn'
            });
          }
        }, {
          key: "getWrapper",
          value: function getWrapper() {
            return this.element.parentElement;
          }
        }, {
          key: "createWidget",
          value: function createWidget() {
            if (this.mode === 'Palette') {
              this.createPalette();

              if (!this.inline) {
                this.firstPaletteFocus();
              }
            } else {
              this.createPicker();

              if (!this.inline) {
                this.getDragHandler().focus();
              }
            }

            this.isRgb = true;
            this.createInput();
            this.createCtrlBtn();

            if (!this.disabled) {
              this.wireEvents();
            }

            if (this.inline && this.disabled) {
              this.toggleDisabled(true);
            }

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              this.refreshPopupPos();
            }
          }
        }, {
          key: "createSplitBtn",
          value: function createSplitBtn() {
            var _this274 = this;

            var splitButton = this.createElement('button', {
              className: 'e-split-colorpicker'
            });
            this.getWrapper().appendChild(splitButton);
            this.splitBtn = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_2__["SplitButton"]({
              iconCss: 'e-selected-color',
              target: this.container,
              disabled: this.disabled,
              enableRtl: this.enableRtl,
              open: this.onOpen.bind(this),
              click: function click(args) {
                _this274.trigger('change', {
                  currentValue: {
                    hex: _this274.value.slice(0, 7),
                    rgba: _this274.convertToRgbString(_this274.hexToRgb(_this274.value))
                  },
                  previousValue: {
                    hex: null,
                    rgba: null
                  },
                  value: _this274.value
                });
              }
            });
            this.splitBtn.createElement = this.createElement;
            this.splitBtn.appendTo(splitButton);
            var preview = this.createElement('span', {
              className: SPLITPREVIEW
            });
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-selected-color', splitButton).appendChild(preview);
            preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
            var popupEle = this.getPopupEle();
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([popupEle], 'e-colorpicker-popup');

            if (this.cssClass) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([popupEle], this.cssClass.split(' '));
            }

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
              var popupInst = this.getPopupInst();
              popupInst.relateTo = document.body;
              popupInst.position = {
                X: 'center',
                Y: 'center'
              };
              popupInst.targetType = 'container';
              popupInst.collision = {
                X: 'fit',
                Y: 'fit'
              };
              popupInst.offsetY = 4;
              popupEle.style.zIndex = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["getZindexPartial"])(this.splitBtn.element).toString();
            }

            this.bindCallBackEvent();
          }
        }, {
          key: "onOpen",
          value: function onOpen(args) {
            this.trigger('open', {
              element: this.container
            });
          }
        }, {
          key: "getPopupInst",
          value: function getPopupInst() {
            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(this.getPopupEle(), _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["Popup"]);
          }
        }, {
          key: "bindCallBackEvent",
          value: function bindCallBackEvent() {
            var _this275 = this;

            this.splitBtn.beforeOpen = function (args) {
              var callBackPromise = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_2__["Deferred"]();

              _this275.trigger('beforeOpen', args, function (observeOpenArgs) {
                if (!observeOpenArgs.cancel) {
                  var popupEle = _this275.getPopupEle();

                  popupEle.style.top = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(0 + pageYOffset);
                  popupEle.style.left = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(0 + pageXOffset);
                  popupEle.style.display = 'block';

                  _this275.createWidget();

                  popupEle.style.display = '';

                  if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice) {
                    _this275.modal = _this275.createElement('div');
                    _this275.modal.className = 'e-' + _this275.getModuleName() + ' e-modal';
                    _this275.modal.style.display = 'none';
                    document.body.insertBefore(_this275.modal, popupEle);
                    document.body.className += ' e-colorpicker-overflow';
                    _this275.modal.style.display = 'block';
                    _this275.modal.style.zIndex = (Number(popupEle.style.zIndex) - 1).toString();
                  }
                }

                args.cancel = observeOpenArgs.cancel;
                callBackPromise.resolve(observeOpenArgs);
              });

              return callBackPromise;
            };

            this.splitBtn.beforeClose = function (args) {
              var callBackPromise = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_2__["Deferred"]();

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(args.event)) {
                var beforeCloseArgs = {
                  element: _this275.container,
                  event: args.event,
                  cancel: false
                };

                _this275.trigger('beforeClose', beforeCloseArgs, function (observedCloseArgs) {
                  if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && args.event.target === _this275.modal) {
                    observedCloseArgs.cancel = true;
                  }

                  if (!observedCloseArgs.cancel) {
                    _this275.onPopupClose();
                  }

                  args.cancel = observedCloseArgs.cancel;
                  callBackPromise.resolve(observedCloseArgs);
                });
              } else {
                callBackPromise.resolve(args);
              }

              return callBackPromise;
            };
          }
        }, {
          key: "onPopupClose",
          value: function onPopupClose() {
            this.unWireEvents();
            this.destroyOtherComp();
            this.container.style.width = '';
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + SPLITPREVIEW, this.splitBtn.element).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
            this.container.innerHTML = '';
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.container], [PICKERCONTENT, PALETTECONTENT]);

            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Browser"].isDevice && this.modal) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([document.body], 'e-colorpicker-overflow');
              this.modal.style.display = 'none';
              this.modal.outerHTML = '';
              this.modal = null;
            }
          }
        }, {
          key: "createPalette",
          value: function createPalette() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(this.container, [PALETTECONTENT], [PICKERCONTENT]);

            if (this.presetColors) {
              var paletteGroup = this.createElement('div', {
                className: 'e-custom-palette'
              });
              this.appendElement(paletteGroup);
              var keys = Object.keys(this.presetColors);

              if (keys.length === 1) {
                this.appendPalette(this.presetColors[keys[0]], keys[0], paletteGroup);
              } else {
                for (var i = 0, len = keys.length; i < len; i++) {
                  this.appendPalette(this.presetColors[keys[i]], keys[i], paletteGroup);
                }
              }

              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-row', paletteGroup).length > 10) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([paletteGroup], 'e-palette-group');
              }
            } else {
              this.appendPalette(presets["default"], 'default');
            }

            if (this.mode === 'Palette' && !this.modeSwitcher && this.noColor) {
              this.setNoColor();
            }

            var width = parseInt(getComputedStyle(this.container).borderBottomWidth, 10);
            this.container.style.width = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(this.container.children[0].offsetWidth + width + width);
            this.rgb = this.hexToRgb(this.roundValue(this.value));
            this.hsv = this.rgbToHsv.apply(this, this.rgb);
          }
        }, {
          key: "firstPaletteFocus",
          value: function firstPaletteFocus() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + SELECT, this.container.children[0])) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + PALETTES, this.container)[0].focus();
            }
          }
        }, {
          key: "appendPalette",
          value: function appendPalette(colors, key, refEle) {
            var palette = this.createElement('div', {
              className: PALETTES,
              attrs: {
                'tabindex': '0'
              }
            });

            if (refEle) {
              refEle.appendChild(palette);
            } else {
              this.appendElement(palette);
            }

            var row;
            var tile;
            var roundedColor;

            for (var i = 0, len = colors.length; i < len; i++) {
              if (i === 0 || i % this.columns === 0) {
                row = this.createElement('div', {
                  className: 'e-row',
                  attrs: {
                    'role': 'row'
                  }
                });
                palette.appendChild(row);
              }

              roundedColor = this.roundValue(colors[i]).toLowerCase();
              tile = this.createElement('span', {
                className: TILE,
                attrs: {
                  'role': 'gridcell',
                  'aria-label': roundedColor,
                  'aria-selected': 'false'
                }
              });
              this.trigger('beforeTileRender', {
                element: tile,
                presetName: key,
                value: colors[i]
              });
              row.appendChild(tile);

              if (this.value === roundedColor) {
                this.addTileSelection(tile);
                palette.focus();
              }

              tile.style.backgroundColor = this.convertToRgbString(this.hexToRgb(roundedColor));
            }
          }
        }, {
          key: "setNoColor",
          value: function setNoColor() {
            var noColorEle = this.container.querySelector('.e-row').children[0];
            noColorEle.classList.add(NOCOLOR);

            if (!this.value) {
              noColorEle.classList.add(SELECT);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(noColorEle, '.' + PALETTES).focus();
            }

            ['aria-selected', 'aria-label'].forEach(function (attr) {
              noColorEle.removeAttribute(attr);
            });
            noColorEle.style.backgroundColor = '';
          }
        }, {
          key: "appendElement",
          value: function appendElement(ele) {
            var insertPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var refEle = this.container.children[insertPos];
            refEle ? this.container.insertBefore(ele, refEle) : this.container.appendChild(ele);
          }
        }, {
          key: "addTileSelection",
          value: function addTileSelection(ele) {
            ele.classList.add(SELECT);
            ele.setAttribute('aria-selected', 'true');
          }
        }, {
          key: "createPicker",
          value: function createPicker() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["classList"])(this.container, [PICKERCONTENT], [PALETTECONTENT]);
            var hsvContainer = this.createElement('div', {
              className: HSVCONTAINER
            });
            this.appendElement(hsvContainer);
            hsvContainer.appendChild(this.createElement('div', {
              className: HSVAREA
            }));
            var dragHandler = this.createElement('span', {
              className: HANDLER,
              attrs: {
                'tabindex': '0'
              }
            });
            hsvContainer.appendChild(dragHandler);
            this.rgb = this.hexToRgb(this.value);
            this.hsv = this.rgbToHsv.apply(this, this.rgb);
            this.setHsvContainerBg();
            this.setHandlerPosition();
            this.createSlider();
            this.createDragTooltip();
          }
        }, {
          key: "setHsvContainerBg",
          value: function setHsvContainerBg() {
            var h = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hsv[0];
            this.getHsvContainer().style.backgroundColor = this.convertToRgbString(this.hsvToRgb(h, 100, 100, 1));
          }
        }, {
          key: "getHsvContainer",
          value: function getHsvContainer() {
            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HSVCONTAINER, this.container);
          }
        }, {
          key: "setHandlerPosition",
          value: function setHandlerPosition() {
            var dragHandler = this.getDragHandler();
            var hsvArea = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HSVAREA, this.container);

            if (this.enableRtl) {
              dragHandler.style.left = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(hsvArea.offsetWidth * Math.abs(100 - this.hsv[1]) / 100);
            } else {
              dragHandler.style.left = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(hsvArea.offsetWidth * this.hsv[1] / 100);
            }

            dragHandler.style.top = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(hsvArea.offsetHeight * (100 - this.hsv[2]) / 100);
          }
        }, {
          key: "createSlider",
          value: function createSlider() {
            var sliderPreviewWrapper = this.createElement('div', {
              className: 'e-slider-preview'
            });
            this.appendElement(sliderPreviewWrapper, 1);
            this.createPreview(sliderPreviewWrapper);
            var sliderWrapper = this.createElement('div', {
              className: 'e-colorpicker-slider'
            });
            sliderPreviewWrapper.insertBefore(sliderWrapper, sliderPreviewWrapper.children[0]);
            var slider = this.createElement('div', {
              className: 'e-hue-slider'
            });
            sliderWrapper.appendChild(slider);
            this.hueSlider = new Slider({
              value: this.hsv[0],
              min: 0,
              max: 359,
              enableRtl: this.enableRtl,
              enabled: !this.disabled,
              change: this.hueChange.bind(this)
            });
            this.hueSlider.createElement = this.createElement;
            this.hueSlider.appendTo(slider);

            if (this.enableOpacity) {
              slider = this.createElement('div', {
                className: 'e-opacity-slider'
              });
              sliderWrapper.appendChild(slider);
              this.createOpacitySlider(slider);
            }
          }
        }, {
          key: "createOpacitySlider",
          value: function createOpacitySlider(slider) {
            this.opacitySlider = new Slider({
              value: this.rgb[3] * 100,
              min: 0,
              max: 100,
              enableRtl: this.enableRtl,
              enabled: !this.disabled,
              change: this.opacityChange.bind(this)
            });
            this.opacitySlider.createElement = this.createElement;
            this.opacitySlider.appendTo(slider);
            var opacityBgTrack = this.createElement('div', {
              className: 'e-opacity-empty-track'
            });
            slider.appendChild(opacityBgTrack);
            this.updateOpacitySliderBg();
          }
        }, {
          key: "updateOpacitySliderBg",
          value: function updateOpacitySliderBg() {
            var direction = this.enableRtl ? 'to left' : 'to right';
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-slider-track', this.opacitySlider.element).style.background = 'linear-gradient(' + direction + ', rgba(' + this.rgb.slice(0, 3) + ', 0) 0%, ' + this.convertToRgbString(this.rgb.slice(0, 3)) + ' 100%)';
          }
        }, {
          key: "hueChange",
          value: function hueChange(args) {
            this.hsv[0] = args.value;
            this.setHsvContainerBg();
            this.convertToOtherFormat();
          }
        }, {
          key: "opacityChange",
          value: function opacityChange(args) {
            var value = args.value;
            var pValue = this.rgbToHex(this.rgb);
            this.hsv[3] = value / 100;
            this.rgb[3] = value / 100;
            var cValue = this.rgbToHex(this.rgb);
            this.updateOpacityInput(value);
            var rgb = this.convertToRgbString(this.rgb);
            this.updatePreview(rgb);
            this.triggerEvent(cValue, pValue, rgb);
          }
        }, {
          key: "updateOpacityInput",
          value: function updateOpacityInput(value) {
            if (!this.getWrapper().classList.contains(HIDEVALUE)) {
              var opacityTextBoxInst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + OPACITY, this.container), NumericTextBox);
              opacityTextBoxInst.value = value;
              opacityTextBoxInst.dataBind();
            }
          }
        }, {
          key: "createPreview",
          value: function createPreview(parentEle) {
            var previewContainer = this.createElement('div', {
              className: PREVIEW
            });
            parentEle.appendChild(previewContainer);
            var preview = this.createElement('span', {
              className: 'e-preview ' + CURRENT
            });
            previewContainer.appendChild(preview);
            var colorValue = this.convertToRgbString(this.rgb);
            preview.style.backgroundColor = colorValue;
            preview = this.createElement('span', {
              className: 'e-preview ' + PREVIOUS
            });
            previewContainer.appendChild(preview);
            preview.style.backgroundColor = colorValue;
          }
        }, {
          key: "isPicker",
          value: function isPicker() {
            return !this.container.classList.contains(PALETTECONTENT);
          }
        }, {
          key: "getPopupEle",
          value: function getPopupEle() {
            return this.container.parentElement;
          }
        }, {
          key: "createNumericInput",
          value: function createNumericInput(element, value, label, max) {
            var _this276 = this;

            var numericInput = new NumericTextBox({
              value: value,
              placeholder: label,
              min: 0,
              max: max,
              format: '###.##',
              showSpinButton: false,
              floatLabelType: 'Always',
              enableRtl: this.enableRtl,
              enabled: !this.disabled,
              readonly: this.isPicker() ? false : true,
              change: function change(args) {
                if (args.event) {
                  _this276.inputHandler(args.event);
                }
              }
            });
            numericInput.createElement = this.createElement;
            numericInput.appendTo(element);
          }
        }, {
          key: "createInput",
          value: function createInput() {
            var isPicker = this.isPicker();
            var wrapper = this.getWrapper();

            if (isPicker && !wrapper.classList.contains(HIDEVALUE) || !isPicker && wrapper.classList.contains(SHOWVALUE)) {
              var inputWrap = this.createElement('div', {
                className: INPUTWRAPPER
              });
              isPicker ? this.appendElement(inputWrap, 2) : this.appendElement(inputWrap, 1);
              var container = this.createElement('div', {
                className: 'e-input-container'
              });
              inputWrap.appendChild(container);

              if (!wrapper.classList.contains(HIDEVALUESWITCH)) {
                this.appendValueSwitchBtn(inputWrap);
              }

              if (!wrapper.classList.contains(HIDEHEX)) {
                var hexInput = this.createElement('input', {
                  className: HEX,
                  attrs: {
                    'maxlength': '7',
                    'spellcheck': 'false'
                  }
                });
                container.appendChild(hexInput);
                Input.createInput({
                  element: hexInput,
                  floatLabelType: 'Always',
                  properties: {
                    placeholder: 'HEX',
                    enableRtl: this.enableRtl,
                    enabled: !this.disabled,
                    readonly: this.isPicker() ? false : true
                  }
                }, this.createElement);
                Input.setValue(this.value.slice(0, 7), hexInput);
                hexInput.addEventListener('input', this.inputHandler.bind(this));
              }

              if (!wrapper.classList.contains(HIDERGBA)) {
                var label;
                var value;

                if (this.isRgb) {
                  label = 'RGB';
                  value = this.rgb;
                } else {
                  label = 'HSV';
                  value = this.hsv;
                }

                var clsName = ['rh', 'gs', 'bv'];

                for (var i = 0; i < 3; i++) {
                  this.createNumericInput(container.appendChild(this.createElement('input', {
                    className: 'e-' + clsName[i] + '-value'
                  })), value[i], label[i], 255);
                }

                if (this.enableOpacity) {
                  this.appendOpacityValue(container);
                }
              }
            }
          }
        }, {
          key: "appendOpacityValue",
          value: function appendOpacityValue(container) {
            this.createNumericInput(container.appendChild(this.createElement('input', {
              className: OPACITY
            })), this.rgb[3] * 100, 'A', 100);
          }
        }, {
          key: "appendValueSwitchBtn",
          value: function appendValueSwitchBtn(targetEle) {
            var valueSwitchBtn = this.createElement('button', {
              className: 'e-icons e-css e-btn e-flat e-icon-btn ' + FORMATSWITCH
            });
            targetEle.appendChild(valueSwitchBtn);

            if (this.isPicker() && !this.getWrapper().classList.contains(HIDERGBA)) {
              valueSwitchBtn.addEventListener('click', this.formatSwitchHandler.bind(this));
            }
          }
        }, {
          key: "createCtrlBtn",
          value: function createCtrlBtn() {
            if (this.modeSwitcher || this.showButtons) {
              this.l10n.setLocale(this.locale);
              var btnWrapper = this.createElement('div', {
                className: CTRLSWITCH
              });
              this.container.appendChild(btnWrapper);

              if (this.showButtons) {
                var controlBtnWrapper = this.createElement('div', {
                  className: CTRLBTN
                });
                btnWrapper.appendChild(controlBtnWrapper);
                var apply = this.l10n.getConstant('Apply');
                controlBtnWrapper.appendChild(this.createElement('button', {
                  innerHTML: apply,
                  className: 'e-btn e-css e-flat e-primary e-small ' + APPLY,
                  attrs: {
                    'title': apply
                  }
                }));
                var cancel = this.l10n.getConstant('Cancel');
                controlBtnWrapper.appendChild(this.createElement('button', {
                  innerHTML: cancel,
                  className: 'e-btn e-css e-flat e-small ' + CANCEL,
                  attrs: {
                    'title': cancel
                  }
                }));
              }

              if (this.modeSwitcher) {
                this.appendModeSwitchBtn();
              }
            }
          }
        }, {
          key: "appendModeSwitchBtn",
          value: function appendModeSwitchBtn() {
            var modeSwitcher = this.createElement('button', {
              className: 'e-icons e-btn e-flat e-icon-btn ' + MODESWITCH,
              attrs: {
                title: this.l10n.getConstant('ModeSwitcher')
              }
            });
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLSWITCH, this.container).insertBefore(modeSwitcher, Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLBTN, this.container));
          }
        }, {
          key: "createDragTooltip",
          value: function createDragTooltip() {
            var _this277 = this;

            var tooltip = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["Tooltip"]({
              opensOn: 'Custom',
              showTipPointer: false,
              cssClass: 'e-color-picker-tooltip',
              beforeOpen: function beforeOpen(args) {
                _this277.tooltipEle = args.element;
              },
              animation: {
                open: {
                  effect: 'None'
                },
                close: {
                  effect: 'None'
                }
              }
            });
            tooltip.createElement = this.createElement;
            tooltip.appendTo(this.container);
            tooltip.open(this.container);
            this.tooltipEle.style.zIndex = Object(_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["getZindexPartial"])(this.tooltipEle).toString();
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-tip-content', this.tooltipEle).appendChild(this.createElement('div', {
              className: 'e-tip-transparent'
            }));
          }
        }, {
          key: "getTooltipInst",
          value: function getTooltipInst() {
            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(this.container, _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__["Tooltip"]);
          }
        }, {
          key: "setTooltipOffset",
          value: function setTooltipOffset(value) {
            this.getTooltipInst().offsetY = value;
          }
        }, {
          key: "toggleDisabled",
          value: function toggleDisabled(enable) {
            enable ? this.getWrapper().classList.add(DISABLED$1) : this.getWrapper().classList.remove(DISABLED$1);

            if (this.showButtons) {
              [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.e-btn', this.container)).forEach(function (ele) {
                enable ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(ele, {
                  'disabled': ''
                }) : ele.removeAttribute('disabled');
              });
            }
          }
        }, {
          key: "convertToRgbString",
          value: function convertToRgbString(rgb) {
            return rgb.length ? rgb.length === 4 ? 'rgba(' + rgb.join() + ')' : 'rgb(' + rgb.join() + ')' : '';
          }
        }, {
          key: "convertToHsvString",
          value: function convertToHsvString(hsv) {
            return hsv.length === 4 ? 'hsva(' + hsv.join() + ')' : 'hsv(' + hsv.join() + ')';
          }
        }, {
          key: "updateHsv",
          value: function updateHsv() {
            this.hsv[1] = this.hsv[1] > 100 ? 100 : this.hsv[1];
            this.hsv[2] = this.hsv[2] > 100 ? 100 : this.hsv[2];
            this.setHandlerPosition();
          }
        }, {
          key: "convertToOtherFormat",
          value: function convertToOtherFormat() {
            var isKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var pValue = this.rgbToHex(this.rgb);
            this.rgb = this.hsvToRgb.apply(this, this.hsv);
            var cValue = this.rgbToHex(this.rgb);
            var rgba = this.convertToRgbString(this.rgb);
            this.updatePreview(rgba);
            this.updateInput(cValue);
            this.triggerEvent(cValue, pValue, rgba, isKey);
          }
        }, {
          key: "updateInput",
          value: function updateInput(value) {
            var wrapper = this.getWrapper();

            if (!wrapper.classList.contains(HIDEVALUE)) {
              if (!wrapper.classList.contains(HIDEHEX)) {
                Input.setValue(value.substr(0, 7), Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HEX, this.container));
              }

              if (!wrapper.classList.contains(HIDERGBA)) {
                if (this.isRgb) {
                  this.updateValue(this.rgb, false);
                } else {
                  this.updateValue(this.hsv, false);
                }
              }
            }
          }
        }, {
          key: "updatePreview",
          value: function updatePreview(value) {
            if (this.enableOpacity) {
              this.updateOpacitySliderBg();
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-tip-transparent', this.tooltipEle).style.backgroundColor = value;
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = value;
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PREVIEW + ' .' + PREVIOUS, this.container).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
          }
        }, {
          key: "getDragHandler",
          value: function getDragHandler() {
            return Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HANDLER, this.container);
          }
        }, {
          key: "removeTileSelection",
          value: function removeTileSelection() {
            var selectedEle = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + SELECT, this.container.children[0]));
            selectedEle.forEach(function (ele) {
              ele.classList.remove(SELECT);
              ele.setAttribute('aria-selected', 'false');
            });
          }
        }, {
          key: "convertRgbToNumberArray",
          value: function convertRgbToNumberArray(value) {
            return value.slice(value.indexOf('(') + 1, value.indexOf(')')).split(',').map(function (n, i) {
              return i !== 3 ? parseInt(n, 10) : parseFloat(n);
            });
          }
          /**
           * To get color value in specified type.
           * @param value - Specify the color value.
           * @param type - Specify the type to which the specified color needs to be converted.
           * @method getValue
           * @return {string}
           */

        }, {
          key: "getValue",
          value: function getValue(value, type) {
            if (!value) {
              value = this.value;
            }

            type = !type ? 'hex' : type.toLowerCase();

            if (value[0] === 'r') {
              var cValue = this.convertRgbToNumberArray(value);

              if (type === 'hex' || type === 'hexa') {
                var hex = this.rgbToHex(cValue);
                return type === 'hex' ? hex.slice(0, 7) : hex;
              } else {
                if (type === 'hsv') {
                  return this.convertToHsvString(this.rgbToHsv.apply(this, cValue.slice(0, 3)));
                } else {
                  if (type === 'hsva') {
                    return this.convertToHsvString(this.rgbToHsv.apply(this, cValue));
                  } else {
                    return 'null';
                  }
                }
              }
            } else {
              if (value[0] === 'h') {
                var _cValue = this.hsvToRgb.apply(this, this.convertRgbToNumberArray(value));

                if (type === 'rgba') {
                  return this.convertToRgbString(_cValue);
                } else {
                  if (type === 'hex' || type === 'hexa') {
                    var _hex = this.rgbToHex(_cValue);

                    return type === 'hex' ? _hex.slice(0, 7) : _hex;
                  } else {
                    if (type === 'rgb') {
                      return this.convertToRgbString(_cValue.slice(0, 3));
                    } else {
                      return 'null';
                    }
                  }
                }
              } else {
                value = this.roundValue(value);
                var rgb = this.hexToRgb(value);

                if (type === 'rgb' || type === 'hsv') {
                  rgb = rgb.slice(0, 3);
                }

                if (type === 'rgba' || type === 'rgb') {
                  return this.convertToRgbString(rgb);
                } else {
                  if (type === 'hsva' || type === 'hsv') {
                    return this.convertToHsvString(this.rgbToHsv.apply(this, rgb));
                  } else {
                    if (type === 'hex') {
                      return value.slice(0, 7);
                    } else {
                      if (type === 'a') {
                        return rgb[3].toString();
                      } else {
                        return 'null';
                      }
                    }
                  }
                }
              }
            }
          }
          /**
           * To show/hide ColorPicker popup based on current state of the SplitButton.
           * @method toggle
           * @return {void}
           */

        }, {
          key: "toggle",
          value: function toggle() {
            this.container.parentElement.classList.contains('e-popup-close') ? this.splitBtn.toggle() : this.closePopup(null);
          }
          /**
           * Get component name.
           * @returns string
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'colorpicker';
          }
          /**
           * Gets the properties to be maintained in the persisted state.
           * @return {string}
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            return this.addOnPersist(['value']);
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            if (this.isPicker()) {
              var dragHandler = this.getDragHandler();

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(dragHandler, 'keydown', this.pickerKeyDown, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown, this);

              if (this.modeSwitcher || this.showButtons) {
                this.addCtrlSwitchEvent();
              }

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PREVIOUS, this.container), 'click', this.previewHandler, this);
            } else {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.container, 'click', this.paletteClickHandler, this);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.container, 'keydown', this.paletteKeyDown, this);
            }
          }
        }, {
          key: "formResetHandler",
          value: function formResetHandler() {
            this.value = this.initialInputValue;
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["attributes"])(this.element, {
              'value': this.initialInputValue
            });
          }
        }, {
          key: "addCtrlSwitchEvent",
          value: function addCtrlSwitchEvent() {
            var ctrlSwitchBtn = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLSWITCH, this.container);

            if (ctrlSwitchBtn) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(ctrlSwitchBtn, 'click', this.btnClickHandler, this);
            }
          }
        }, {
          key: "pickerKeyDown",
          value: function pickerKeyDown(e) {
            switch (e.keyCode) {
              case 39:
                this.handlerDragPosition(1, this.enableRtl ? -1 : 1, e);
                break;

              case 37:
                this.handlerDragPosition(1, this.enableRtl ? 1 : -1, e);
                break;

              case 38:
                this.handlerDragPosition(2, 1, e);
                break;

              case 40:
                this.handlerDragPosition(2, -1, e);
                break;

              case 13:
                e.preventDefault();
                var cValue = this.rgbToHex(this.rgb);
                this.enterKeyHandler(cValue, e);
            }
          }
        }, {
          key: "enterKeyHandler",
          value: function enterKeyHandler(value, e) {
            this.triggerChangeEvent(value);

            if (!this.inline) {
              this.closePopup(e);
              this.splitBtn.element.focus();
            }
          }
        }, {
          key: "closePopup",
          value: function closePopup(e) {
            var _this278 = this;

            var beforeCloseArgs = {
              element: this.container,
              event: e,
              cancel: false
            };
            this.trigger('beforeClose', beforeCloseArgs, function (observedcloseArgs) {
              if (!observedcloseArgs.cancel) {
                _this278.splitBtn.toggle();

                _this278.onPopupClose();
              }
            });
          }
        }, {
          key: "triggerChangeEvent",
          value: function triggerChangeEvent(value) {
            var hex = value.slice(0, 7);
            this.trigger('change', {
              currentValue: {
                hex: hex,
                rgba: this.convertToRgbString(this.rgb)
              },
              previousValue: {
                hex: this.value.slice(0, 7),
                rgba: this.convertToRgbString(this.hexToRgb(this.value))
              },
              value: this.enableOpacity ? value : hex
            });

            if (this.enableOpacity) {
              this.setProperties({
                'value': value
              }, true);
            } else {
              this.setProperties({
                'value': hex
              }, true);
            }

            this.element.value = hex ? hex : '#000000';
          }
        }, {
          key: "handlerDragPosition",
          value: function handlerDragPosition(prob, value, e) {
            e.preventDefault();
            this.hsv[prob] += value * (e.ctrlKey ? 1 : 3);

            if (this.hsv[prob] < 0) {
              this.hsv[prob] = 0;
            }

            this.updateHsv();
            this.convertToOtherFormat(true);
          }
        }, {
          key: "handlerDown",
          value: function handlerDown(e) {
            e.preventDefault();

            if (e.type === 'mousedown') {
              this.clientX = Math.abs(e.pageX - pageXOffset);
              this.clientY = Math.abs(e.pageY - pageYOffset);
              this.setTooltipOffset(8);
            } else {
              this.clientX = Math.abs(e.changedTouches[0].pageX - pageXOffset);
              this.clientY = Math.abs(e.changedTouches[0].pageY - pageYOffset);
              this.setTooltipOffset(-8);
            }

            this.setHsv(this.clientX, this.clientY);
            this.getDragHandler().style.transition = 'left .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1)';
            this.updateHsv();
            this.convertToOtherFormat();
            this.getDragHandler().focus();

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mousemove touchmove', this.handlerMove, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(document, 'mouseup touchend', this.handlerEnd, this);
          }
        }, {
          key: "handlerMove",
          value: function handlerMove(e) {
            if (e.type !== 'touchmove') {
              e.preventDefault();
            }

            var x;
            var y;

            if (e.type === 'mousemove') {
              x = Math.abs(e.pageX - pageXOffset);
              y = Math.abs(e.pageY - pageYOffset);
            } else {
              x = Math.abs(e.changedTouches[0].pageX - pageXOffset);
              y = Math.abs(e.changedTouches[0].pageY - pageYOffset);
            }

            this.setHsv(x, y);
            var dragHandler = this.getDragHandler();
            var left = parseInt(dragHandler.style.left, 10);
            var top = parseInt(dragHandler.style.top, 10);
            this.updateHsv();
            this.convertToOtherFormat();
            this.getTooltipInst().refresh(dragHandler);

            if (!this.tooltipEle.style.transform) {
              if (Math.abs(this.clientX - x) > 8 || Math.abs(this.clientY - y) > 8) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HSVAREA, this.container).style.cursor = 'pointer';
                dragHandler.style.transition = 'none';

                if (!this.inline) {
                  this.tooltipEle.style.zIndex = (parseInt(this.getPopupEle().style.zIndex, 10) + 1).toString();
                }

                this.tooltipEle.style.transform = 'rotate(45deg)';
                dragHandler.classList.add('e-hide-handler');
              }
            }
          }
        }, {
          key: "setHsv",
          value: function setHsv(clientX, clientY) {
            var ele = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HSVAREA, this.container);
            var position = ele.getBoundingClientRect();

            if (this.enableRtl) {
              clientX = clientX > position.right ? 0 : Math.abs(clientX - position.right);
            } else {
              clientX = clientX > position.left ? Math.abs(clientX - position.left) : 0;
            }

            clientY = clientY > position.top ? Math.abs(clientY - position.top) : 0;
            this.hsv[2] = Math.round(Number(100 * (ele.offsetHeight - Math.max(0, Math.min(ele.offsetHeight, clientY - ele.offsetTop))) / ele.offsetHeight) * 10) / 10;
            this.hsv[1] = Math.round(Number(100 * Math.max(0, Math.min(ele.offsetWidth, clientX - ele.offsetLeft)) / ele.offsetWidth) * 10) / 10;
          }
        }, {
          key: "handlerEnd",
          value: function handlerEnd(e) {
            if (e.type !== 'touchend') {
              e.preventDefault();
            }

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mousemove touchmove', this.handlerMove);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(document, 'mouseup touchend', this.handlerEnd);

            var dragHandler = this.getDragHandler();
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + HSVAREA, this.container).style.cursor = '';

            if (this.tooltipEle.style.transform) {
              this.tooltipEle.style.transform = '';
              dragHandler.classList.remove('e-hide-handler');
            }

            if (!this.inline && !this.showButtons) {
              this.closePopup(e);
            }
          }
        }, {
          key: "btnClickHandler",
          value: function btnClickHandler(e) {
            var target = e.target;

            if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + MODESWITCH)) {
              e.stopPropagation();
              this.switchToPalette();
            } else {
              if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {
                this.ctrlBtnClick(target, e);
              }
            }
          }
        }, {
          key: "switchToPalette",
          value: function switchToPalette() {
            this.trigger('beforeModeSwitch', {
              element: this.container,
              mode: 'Palette'
            });
            this.unWireEvents();
            this.destroyOtherComp();
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-slider-preview', this.container));

            if (!this.getWrapper().classList.contains(HIDEVALUE)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INPUTWRAPPER, this.container));
            }

            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.getHsvContainer());
            this.createPalette();
            this.firstPaletteFocus();
            this.createInput();
            this.refreshPopupPos();
            this.wireEvents();
            this.trigger('onModeSwitch', {
              element: this.container,
              mode: 'Palette'
            });
          }
        }, {
          key: "refreshPopupPos",
          value: function refreshPopupPos() {
            if (!this.inline) {
              var popupEle = this.getPopupEle();
              popupEle.style.left = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(0 + pageXOffset);
              popupEle.style.top = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])(0 + pageYOffset);
              this.getPopupInst().refreshPosition(this.splitBtn.element.parentElement);
            }
          }
        }, {
          key: "formatSwitchHandler",
          value: function formatSwitchHandler(e) {
            var target = e.target.parentElement;

            if (this.isRgb) {
              this.updateValue(this.hsv, true, 3, [360, 100, 100]);
              this.isRgb = false;
            } else {
              this.updateValue(this.rgb, true, 2);
              this.isRgb = true;
            }
          }
        }, {
          key: "updateValue",
          value: function updateValue(value, format, idx, max) {
            var clsName = ['e-rh-value', 'e-gs-value', 'e-bv-value'];
            var inst;

            for (var i = 0, len = clsName.length; i < len; i++) {
              inst = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getInstance"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + clsName[i], this.container), NumericTextBox);
              inst.value = Math.round(value[i]);

              if (format) {
                inst.placeholder = clsName[i].substr(idx, 1).toUpperCase();
                inst.max = max ? max[i] : 255;
              }

              inst.dataBind();
            }
          }
        }, {
          key: "previewHandler",
          value: function previewHandler(e) {
            var target = e.target;
            var pValue = this.rgbToHex(this.rgb);
            this.rgb = this.convertRgbToNumberArray(target.style.backgroundColor);

            if (!this.rgb[3]) {
              this.rgb[3] = 1;
            }

            var cValue = this.rgbToHex(this.rgb);
            var hsv = this.rgbToHsv.apply(this, this.rgb);

            if (hsv[0] !== this.hsv[0]) {
              this.hueSlider.setProperties({
                'value': hsv[0]
              }, true);
              this.hueSlider.refresh();
            }

            this.setHsvContainerBg(hsv[0]);

            if (this.enableOpacity && hsv[3] !== this.hsv[3]) {
              this.opacitySlider.setProperties({
                'value': hsv[3] * 100
              }, true);
              this.opacitySlider.refresh();
              this.updateOpacitySliderBg();
            }

            this.hsv = hsv;
            this.setHandlerPosition();
            this.updateInput(cValue);
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = this.convertToRgbString(this.rgb);
            this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));
          }
        }, {
          key: "paletteClickHandler",
          value: function paletteClickHandler(e) {
            e.preventDefault();
            var target = e.target;

            if (target.classList.contains(TILE)) {
              this.removeTileSelection();
              this.addTileSelection(target);

              if (target.classList.contains(NOCOLOR)) {
                this.noColorTile();
              } else {
                var cValue = target.getAttribute('aria-label');
                var pValue = this.rgbToHex(this.rgb);
                this.rgb = this.hexToRgb(this.roundValue(cValue));
                this.hsv = this.rgbToHsv.apply(this, this.rgb);

                if (this.getWrapper().classList.contains(SHOWVALUE)) {
                  this.updateInput(cValue);
                }

                this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));
              }

              if (!this.inline && !this.showButtons) {
                this.closePopup(e);
              }
            } else {
              if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + MODESWITCH)) {
                this.switchToPicker();
              } else {
                if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {
                  this.ctrlBtnClick(target, e);
                } else {
                  if (this.getWrapper().classList.contains(SHOWVALUE) && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(target, '.' + FORMATSWITCH)) {
                    this.formatSwitchHandler(e);
                  }
                }
              }
            }
          }
        }, {
          key: "noColorTile",
          value: function noColorTile() {
            var isKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var pValue = this.rgbToHex(this.rgb);
            this.rgb = [];
            this.hsv = [];
            this.triggerEvent('', pValue, '', isKey);
          }
        }, {
          key: "switchToPicker",
          value: function switchToPicker() {
            var wrapper = this.getWrapper();
            this.trigger('beforeModeSwitch', {
              element: this.container,
              mode: 'Picker'
            });
            this.unWireEvents();
            [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + PALETTES, this.container)).forEach(function (ele) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(ele);
            });

            if (wrapper.classList.contains(SHOWVALUE)) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INPUTWRAPPER, this.container));
            }

            this.container.style.width = '';
            var grpEle = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-custom-palette', this.container);

            if (this.presetColors) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(grpEle);
            }

            this.createPicker();
            this.getDragHandler().focus();
            this.createInput();
            this.refreshPopupPos();
            this.wireEvents();
            this.trigger('onModeSwitch', {
              element: this.container,
              mode: 'Picker'
            });
          }
        }, {
          key: "ctrlBtnClick",
          value: function ctrlBtnClick(ele, e) {
            if (ele.classList.contains(APPLY)) {
              var cValue = this.rgbToHex(this.rgb);
              this.triggerChangeEvent(cValue);
            }

            if (!this.inline) {
              this.closePopup(e);
              this.splitBtn.element.focus();
            }
          }
        }, {
          key: "paletteKeyDown",
          value: function paletteKeyDown(e) {
            var target = e.target;

            if (!target.classList.contains(PALETTES)) {
              return;
            }

            var selectedEle;
            var idx;
            var tiles = [].slice.call(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["selectAll"])('.' + TILE, target));
            var prevSelectedEle = tiles.filter(function (tile) {
              return tile.classList.contains('e-selected');
            }).pop();

            switch (!e.altKey && e.keyCode) {
              case 39:
                e.preventDefault();
                selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? -1 : 1)] : tiles[this.enableRtl ? tiles.length - 1 : 0];
                this.keySelectionChanges(selectedEle);
                break;

              case 37:
                e.preventDefault();
                selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? 1 : -1)] : tiles[this.enableRtl ? 0 : tiles.length - 1];
                this.keySelectionChanges(selectedEle);
                break;

              case 38:
                e.preventDefault();
                idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, -this.columns) : 0;
                selectedEle = tiles[idx] ? tiles[idx] : tiles[idx - this.columns];
                this.keySelectionChanges(selectedEle);
                break;

              case 40:
                e.preventDefault();
                idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, this.columns) : tiles.length - 1;

                if (tiles[idx]) {
                  selectedEle = tiles[idx];
                } else {
                  idx %= tiles.length;
                  idx += tiles[tiles.length - 1].parentElement.childElementCount;
                  selectedEle = tiles[idx];
                }

                this.keySelectionChanges(selectedEle);
                break;

              case 13:
                e.preventDefault();

                if (prevSelectedEle) {
                  var cValue = prevSelectedEle.getAttribute('aria-label');
                  this.enterKeyHandler(cValue ? cValue : '', e);
                }

            }
          }
        }, {
          key: "keySelectionChanges",
          value: function keySelectionChanges(newEle) {
            this.removeTileSelection();
            this.addTileSelection(newEle);

            if (newEle.classList.contains(NOCOLOR)) {
              this.noColorTile(true);
            } else {
              var cValue = newEle.getAttribute('aria-label');
              var pValue = this.rgbToHex(this.rgb);
              this.rgb = this.hexToRgb(cValue);
              this.hsv = this.rgbToHsv.apply(this, this.rgb);

              if (this.getWrapper().classList.contains(SHOWVALUE)) {
                this.updateInput(cValue);
              }

              this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb), true);
            }
          }
        }, {
          key: "tilePosition",
          value: function tilePosition(items, element, cIdx) {
            items = Array.prototype.slice.call(items);
            var n = items.length;
            var emptyCount = this.columns - items[n - 1].parentElement.childElementCount;
            var idx = items.indexOf(element);
            idx += cIdx;
            idx < 0 ? idx += n + emptyCount : idx %= n + emptyCount;
            return idx;
          }
        }, {
          key: "inputHandler",
          value: function inputHandler(e) {
            var target = e.target;

            if (!target.value.length) {
              return;
            }

            var hsv;
            var pValue;
            var label = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-float-text', target.parentElement).textContent;

            switch (label) {
              case 'HEX':
                var value = '';

                if (target.value[0] === '#' && target.value.length !== 5 || target.value[0] !== '#' && target.value.length !== 4) {
                  value = this.roundValue(target.value);
                }

                if (value.length === 9) {
                  pValue = this.rgbToHex(this.rgb);
                  this.rgb = this.hexToRgb(value + value.substr(-2));
                  this.inputValueChange(this.rgbToHsv.apply(this, this.rgb), pValue, target.value);
                } else {
                  return;
                }

                break;

              case 'R':
                if (this.rgb[0] !== Number(target.value)) {
                  pValue = this.rgbToHex(this.rgb);
                  this.rgb[0] = Number(target.value);
                  hsv = this.rgbToHsv.apply(this, this.rgb);
                  this.inputValueChange(hsv, pValue);
                }

                break;

              case 'G':
                if (this.rgb[1] !== Number(target.value)) {
                  pValue = this.rgbToHex(this.rgb);
                  this.rgb[1] = Number(target.value);
                  hsv = this.rgbToHsv.apply(this, this.rgb);
                  this.inputValueChange(hsv, pValue);
                }

                break;

              case 'B':
                if (this.rgb[2] !== Number(target.value)) {
                  pValue = this.rgbToHex(this.rgb);
                  this.rgb[2] = Number(target.value);
                  hsv = this.rgbToHsv.apply(this, this.rgb);
                  this.inputValueChange(hsv, pValue);
                }

                break;

              case 'H':
                this.hueSlider.value = Number(target.value);
                break;

              case 'S':
                if (this.hsv[1] !== Number(target.value)) {
                  this.hsv[1] = Number(target.value);
                  this.updateHsv();
                  this.convertToOtherFormat();
                }

                break;

              case 'V':
                if (this.hsv[2] !== Number(target.value)) {
                  this.hsv[2] = Number(target.value);
                  this.updateHsv();
                  this.convertToOtherFormat();
                }

                break;

              case 'A':
                this.opacitySlider.value = Number(target.value);
                break;
            }
          }
        }, {
          key: "inputValueChange",
          value: function inputValueChange(hsv, pValue, value) {
            if (hsv[0] !== this.hsv[0]) {
              this.hueSlider.setProperties({
                'value': hsv[0]
              }, true);
              this.hueSlider.refresh();
              this.setHsvContainerBg(hsv[0]);
            }

            this.hsv = hsv;
            var cValue = this.rgbToHex(this.rgb);
            this.setHandlerPosition();
            this.updateInput(value ? value : cValue);
            var rgba = this.convertToRgbString(this.rgb);
            this.updatePreview(rgba);
            this.triggerEvent(cValue, pValue, rgba);
          }
        }, {
          key: "triggerEvent",
          value: function triggerEvent(cValue, pValue, rgba) {
            var isKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
            var hex = cValue.slice(0, 7);

            if (!this.showButtons && !isKey) {
              this.trigger('change', {
                currentValue: {
                  hex: hex,
                  rgba: rgba
                },
                previousValue: {
                  hex: this.value.slice(0, 7),
                  rgba: this.convertToRgbString(this.hexToRgb(this.value))
                },
                value: cValue
              });
              this.setProperties({
                'value': cValue
              }, true);
              this.element.value = hex ? hex : '#000000';
            } else {
              this.trigger('select', {
                currentValue: {
                  hex: hex,
                  rgba: rgba
                },
                previousValue: {
                  hex: pValue.slice(0, 7),
                  rgba: this.convertToRgbString(this.hexToRgb(pValue))
                }
              });
            }
          }
          /**
           * Removes the component from the DOM and detaches all its related event handlers.
           * Also it maintains the initial input element from the DOM.
           * @method destroy
           * @return {void}
           */

        }, {
          key: "destroy",
          value: function destroy() {
            var _this279 = this;

            var wrapper = this.getWrapper();

            _get2(_getPrototypeOf2(ColorPicker.prototype), "destroy", this).call(this);

            ['tabindex', 'spellcheck'].forEach(function (attr) {
              _this279.element.removeAttribute(attr);
            });

            if (this.inline) {
              this.unWireEvents();
              this.destroyOtherComp();
            } else {
              if (this.isPopupOpen()) {
                this.unWireEvents();
                this.destroyOtherComp();
              }

              this.splitBtn.destroy();
              this.splitBtn = null;
            }

            this.tileRipple();
            this.tileRipple = null;
            this.ctrlBtnRipple();
            this.ctrlBtnRipple = null;

            if (this.element.nextElementSibling) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.element.nextElementSibling);
            }

            if (wrapper) {
              wrapper.parentElement.insertBefore(this.element, wrapper);
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(wrapper);
            }

            this.container = null;

            if (this.formElement) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.formElement, 'reset', this.formResetHandler);
            }
          }
        }, {
          key: "destroyOtherComp",
          value: function destroyOtherComp() {
            if (this.isPicker()) {
              this.hueSlider.destroy();

              if (this.enableOpacity) {
                this.opacitySlider.destroy();
                this.opacitySlider = null;
              }

              this.hueSlider = null;
              var tooltipInst = this.getTooltipInst();
              tooltipInst.close();
              tooltipInst.destroy();
              this.tooltipEle = null;
            }
          }
        }, {
          key: "isPopupOpen",
          value: function isPopupOpen() {
            return this.getPopupEle().classList.contains('e-popup-open');
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            if (this.isPicker()) {
              var wrapper = this.getWrapper();
              var dragHandler = this.getDragHandler();

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(dragHandler, 'keydown', this.pickerKeyDown);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown);

              if (this.modeSwitcher || this.showButtons) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLSWITCH, this.container), 'click', this.btnClickHandler);
              }

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + PREVIOUS, this.container), 'click', this.previewHandler);
            } else {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.container, 'click', this.paletteClickHandler);

              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.container, 'keydown', this.paletteKeyDown);
            }
          }
        }, {
          key: "roundValue",
          value: function roundValue(value) {
            if (!value) {
              return '';
            }

            if (value[0] !== '#') {
              value = '#' + value;
            }

            var len = value.length;

            if (len === 4) {
              value += 'f';
              len = 5;
            }

            if (len === 5) {
              var tempValue = '';

              for (var i = 1, _len10 = value.length; i < _len10; i++) {
                tempValue += value.charAt(i) + value.charAt(i);
              }

              value = '#' + tempValue;
              len = 9;
            }

            if (len === 7) {
              value += 'ff';
            }

            return value;
          }
        }, {
          key: "hexToRgb",
          value: function hexToRgb(hex) {
            if (!hex) {
              return [];
            }

            hex = hex.trim();

            if (hex.length !== 9) {
              hex = this.roundValue(hex);
            }

            var opacity = Number((parseInt(hex.slice(-2), 16) / 255).toFixed(2));
            hex = hex.slice(1, 7);
            var bigInt = parseInt(hex, 16);
            var h = [];
            h.push(bigInt >> 16 & 255);
            h.push(bigInt >> 8 & 255);
            h.push(bigInt & 255);
            h.push(opacity);
            return h;
          }
        }, {
          key: "rgbToHsv",
          value: function rgbToHsv(r, g, b, opacity) {
            if (this.rgb && !this.rgb.length) {
              return [];
            }

            r /= 255;
            g /= 255;
            b /= 255;
            var max = Math.max(r, g, b);
            var min = Math.min(r, g, b);
            var h;
            var s;
            var v = max;
            var d = max - min;
            s = max === 0 ? 0 : d / max;

            if (max === min) {
              h = 0;
            } else {
              switch (max) {
                case r:
                  h = (g - b) / d + (g < b ? 6 : 0);
                  break;

                case g:
                  h = (b - r) / d + 2;
                  break;

                case b:
                  h = (r - g) / d + 4;
                  break;
              }

              h /= 6;
            }

            var hsv = [Math.round(h * 360), Math.round(s * 1000) / 10, Math.round(v * 1000) / 10];

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(opacity)) {
              hsv.push(opacity);
            }

            return hsv;
          }
        }, {
          key: "hsvToRgb",
          value: function hsvToRgb(h, s, v, opacity) {
            var r;
            var g;
            var b;
            var i;
            var f;
            var p;
            var q;
            var t;
            s /= 100;
            v /= 100;

            if (s === 0) {
              r = g = b = v;
              return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), opacity];
            }

            h /= 60;
            i = Math.floor(h);
            f = h - i;
            p = v * (1 - s);
            q = v * (1 - s * f);
            t = v * (1 - s * (1 - f));

            switch (i) {
              case 0:
                r = v;
                g = t;
                b = p;
                break;

              case 1:
                r = q;
                g = v;
                b = p;
                break;

              case 2:
                r = p;
                g = v;
                b = t;
                break;

              case 3:
                r = p;
                g = q;
                b = v;
                break;

              case 4:
                r = t;
                g = p;
                b = v;
                break;

              default:
                r = v;
                g = p;
                b = q;
            }

            var rgb = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(opacity)) {
              rgb.push(opacity);
            }

            return rgb;
          }
        }, {
          key: "rgbToHex",
          value: function rgbToHex(rgb) {
            return rgb.length ? '#' + this.hex(rgb[0]) + this.hex(rgb[1]) + this.hex(rgb[2]) + (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(rgb[3]) ? rgb[3] !== 0 ? (Math.round(rgb[3] * 255) + 0x10000).toString(16).substr(-2) : '00' : '') : '';
          }
        }, {
          key: "hex",
          value: function hex(x) {
            return ('0' + x.toString(16)).slice(-2);
          }
        }, {
          key: "changeModeSwitcherProp",
          value: function changeModeSwitcherProp(prop) {
            var ctrlSwitchWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLSWITCH, this.container);

            if (prop) {
              if (ctrlSwitchWrapper) {
                this.appendModeSwitchBtn();
              } else {
                this.createCtrlBtn();

                if (this.isPicker() && !this.disabled) {
                  this.addCtrlSwitchEvent();
                }
              }
            } else {
              if (ctrlSwitchWrapper) {
                if (this.showButtons) {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + MODESWITCH, ctrlSwitchWrapper));
                } else {
                  Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(ctrlSwitchWrapper);
                }
              }
            }
          }
        }, {
          key: "changeShowBtnProps",
          value: function changeShowBtnProps(prop) {
            var ctrlBtnWrapper = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLSWITCH, this.container);

            if (prop) {
              if (ctrlBtnWrapper) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(ctrlBtnWrapper);
              }

              this.createCtrlBtn();

              if (this.isPicker() && !this.disabled) {
                this.addCtrlSwitchEvent();
              }
            } else {
              if (this.modeSwitcher) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + CTRLBTN, ctrlBtnWrapper));
              } else {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(ctrlBtnWrapper);
              }
            }
          }
        }, {
          key: "changeValueProp",
          value: function changeValueProp(newProp) {
            if (this.isPicker()) {
              this.rgb = this.hexToRgb(newProp);
              this.hsv = this.rgbToHsv.apply(this, this.rgb);
              this.setHandlerPosition();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.hueSlider.element, '.e-slider-preview'));
              this.createSlider();
              this.setHsvContainerBg();
              this.updateInput(newProp);

              if (this.rgb.length === 4) {
                this.updateOpacityInput(this.rgb[3] * 100);
              }
            } else {
              this.removeTileSelection();
              var ele = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('span[aria-label="' + this.roundValue(newProp) + '"]', this.container);

              if (ele) {
                this.addTileSelection(ele);
              }
            }
          }
        }, {
          key: "setInputEleProps",
          value: function setInputEleProps(prop) {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INPUTWRAPPER, this.container));
            this.createInput();
          }
        }, {
          key: "changeDisabledProp",
          value: function changeDisabledProp(newProp) {
            if (this.isPicker()) {
              this.hueSlider.enabled = !newProp;
              this.opacitySlider.enabled = !newProp;
              this.setInputEleProps(newProp);
            }

            if (newProp) {
              this.toggleDisabled(true);
              this.unWireEvents();
            } else {
              this.toggleDisabled(false);
              this.wireEvents();
            }
          }
        }, {
          key: "changeCssClassProps",
          value: function changeCssClassProps(newProp, oldProp) {
            var wrapper = this.getWrapper();
            var popupWrapper = this.getPopupEle();

            if (oldProp) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([wrapper, popupWrapper], oldProp.split(' '));
            }

            if (newProp) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([wrapper, popupWrapper], newProp.split(' '));
            }
          }
        }, {
          key: "changeRtlProps",
          value: function changeRtlProps(newProp) {
            if (newProp) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.getWrapper()], 'e-rtl');
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.getWrapper()], 'e-rtl');
            }
          }
        }, {
          key: "changePaletteProps",
          value: function changePaletteProps() {
            Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.container.children[0]);
            this.container.style.width = '';
            this.createPalette();
          }
        }, {
          key: "changeOpacityProps",
          value: function changeOpacityProps(newProp) {
            var wrapper = this.getWrapper();

            if (newProp) {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.container.parentElement], HIDEOPACITY);
              this.createOpacitySlider(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-colorpicker-slider', this.container).appendChild(this.createElement('div', {
                className: 'e-opacity-slider'
              })));

              if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {
                this.appendOpacityValue(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.e-input-container', this.container));
              }
            } else {
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.container.parentElement], HIDEOPACITY);
              this.opacitySlider.destroy();
              Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(this.opacitySlider.element);
              this.opacitySlider = null;

              if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + OPACITY, this.container).parentElement);
              }
            }
          }
          /**
           * Called internally if any of the property value changed.
           * @param  {ColorPickerModel} newProp
           * @param  {ColorPickerModel} oldProp
           * @returns void
           * @private
           */

        }, {
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            var _this280 = this;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.value)) {
              var value = this.roundValue(newProp.value);

              if (value.length === 9) {
                this.element.value = this.roundValue(value).slice(0, 7);
                var preview = this.splitBtn && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + SPLITPREVIEW, this.splitBtn.element);

                if (preview) {
                  preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(newProp.value));
                }
              } else {
                this.value = oldProp.value;
              }
            }

            if (!this.inline && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(newProp.inline)) {
              var otherCompModel = ['disabled', 'enableRtl'];
              this.splitBtn.setProperties(Object(_syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_2__["getModel"])(newProp, otherCompModel));

              if (!this.isPopupOpen()) {
                this.changeCssClassProps(newProp.cssClass, oldProp.cssClass);
                this.changeRtlProps(newProp.enableRtl);
                return;
              }
            }

            for (var _i131 = 0, _Object$keys58 = Object.keys(newProp); _i131 < _Object$keys58.length; _i131++) {
              var prop = _Object$keys58[_i131];

              (function () {
                switch (prop) {
                  case 'inline':
                    if (newProp.inline) {
                      _this280.getWrapper().appendChild(_this280.container);

                      _this280.splitBtn.destroy();

                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(_this280.element.nextElementSibling);

                      if (!_this280.container.children.length) {
                        _this280.createWidget();
                      }
                    } else {
                      _this280.destroyOtherComp();

                      _this280.unWireEvents();

                      _this280.container.innerHTML = '';

                      _this280.createSplitBtn();
                    }

                    break;

                  case 'cssClass':
                    _this280.changeCssClassProps(newProp.cssClass, oldProp.cssClass);

                    var props = newProp.cssClass.split(' ').concat(oldProp.cssClass.split(' '));
                    props = props.reduce(function (a, b) {
                      if (a.indexOf(b) < 0) {
                        a.push(b);
                      }

                      return a;
                    }, []);
                    var count = 0;
                    props.forEach(function (cls) {
                      if (count === 0 && (cls === HIDEVALUE || cls === HIDEVALUESWITCH || cls === SHOWVALUE || cls === HIDEHEX || cls === HIDERGBA)) {
                        var inputWrap = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INPUTWRAPPER, _this280.container);

                        if (inputWrap) {
                          Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["remove"])(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["select"])('.' + INPUTWRAPPER, _this280.container));
                        }

                        _this280.createInput();

                        count++;
                      }
                    });
                    break;

                  case 'enableRtl':
                    if (_this280.isPicker()) {
                      _this280.hueSlider.enableRtl = newProp.enableRtl;

                      if (_this280.enableOpacity) {
                        _this280.opacitySlider.enableRtl = newProp.enableRtl;
                      }

                      _this280.setInputEleProps(newProp.enableRtl);
                    }

                    _this280.changeRtlProps(newProp.enableRtl);

                    break;

                  case 'disabled':
                    _this280.changeDisabledProp(newProp.disabled);

                    break;

                  case 'value':
                    if (_this280.value !== oldProp.value) {
                      _this280.changeValueProp(newProp.value);
                    }

                    break;

                  case 'showButtons':
                    _this280.changeShowBtnProps(newProp.showButtons);

                    break;

                  case 'mode':
                    if (newProp.mode === 'Picker') {
                      _this280.switchToPicker();
                    } else {
                      _this280.switchToPalette();
                    }

                    break;

                  case 'modeSwitcher':
                    _this280.changeModeSwitcherProp(newProp.modeSwitcher);

                    break;

                  case 'columns':
                  case 'presetColors':
                    if (!_this280.isPicker()) {
                      _this280.changePaletteProps();
                    }

                    break;

                  case 'noColor':
                    if (newProp.noColor) {
                      if (_this280.mode === 'Palette' && !_this280.modeSwitcher) {
                        _this280.setNoColor();
                      }
                    } else {
                      _this280.changePaletteProps();
                    }

                    break;

                  case 'enableOpacity':
                    _this280.changeOpacityProps(newProp.enableOpacity);

                    break;
                }
              })();
            }
          }
          /**
           * Sets the focus to Colorpicker
           * its native method
           * @public
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            this.element.parentElement.focus();
          }
        }]);

        return ColorPicker;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('#008000ff')], ColorPicker.prototype, "value", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], ColorPicker.prototype, "cssClass", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ColorPicker.prototype, "disabled", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Picker')], ColorPicker.prototype, "mode", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], ColorPicker.prototype, "modeSwitcher", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], ColorPicker.prototype, "presetColors", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], ColorPicker.prototype, "showButtons", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(10)], ColorPicker.prototype, "columns", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ColorPicker.prototype, "inline", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ColorPicker.prototype, "noColor", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], ColorPicker.prototype, "enablePersistence", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], ColorPicker.prototype, "enableOpacity", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "select", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "change", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "beforeTileRender", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "beforeOpen", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "open", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "beforeClose", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "beforeModeSwitch", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "onModeSwitch", void 0);

      __decorate$5([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], ColorPicker.prototype, "created", void 0);

      ColorPicker = __decorate$5([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], ColorPicker);
      /**
       * ColorPicker modules
       */

      var __decorate$6 = undefined && undefined.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
          if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

      var HIDE_CLEAR = 'e-clear-icon-hide';
      var TEXTBOX_FOCUS = 'e-input-focus';
      var containerAttr = ['title', 'style', 'class'];
      /**
       * Represents the TextBox component that allows the user to enter the values based on it's type.
       * ```html
       * <input name='images' id='textbox'/>
       * ```
       * ```typescript
       * <script>
       *   var textboxObj = new TextBox();
       *   textboxObj.appendTo('#textbox');
       * </script>
       * ```
       */

      var TextBox = /*#__PURE__*/function (_syncfusion_ej2_base_62) {
        _inherits2(TextBox, _syncfusion_ej2_base_62);

        var _super87 = _createSuper(TextBox);

        function TextBox(options, element) {
          var _this281;

          _classCallCheck2(this, TextBox);

          _this281 = _super87.call(this, options, element);
          _this281.previousValue = null;
          _this281.isAngular = false;
          _this281.isHiddenInput = false;
          _this281.isForm = false;
          _this281.inputPreviousValue = null;
          _this281.isVue = false;
          _this281.textboxOptions = options;
          return _this281;
        }
        /**
         * Calls internally if any of the property value is changed.
         * @private
         */


        _createClass2(TextBox, [{
          key: "onPropertyChanged",
          value: function onPropertyChanged(newProp, oldProp) {
            for (var _i132 = 0, _Object$keys59 = Object.keys(newProp); _i132 < _Object$keys59.length; _i132++) {
              var prop = _Object$keys59[_i132];

              switch (prop) {
                case 'floatLabelType':
                  Input.removeFloating(this.textboxWrapper);
                  Input.addFloating(this.respectiveElement, this.floatLabelType, this.placeholder);
                  break;

                case 'enabled':
                  Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
                  this.bindClearEvent();
                  break;

                case 'width':
                  Input.setWidth(newProp.width, this.textboxWrapper.container);
                  break;

                case 'value':
                  var prevOnChange = this.isProtectedOnChange;
                  this.isProtectedOnChange = true;

                  if (!this.isBlank(this.value)) {
                    this.value = this.value.toString();
                  }

                  this.isProtectedOnChange = prevOnChange;
                  Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);

                  if (this.isHiddenInput) {
                    this.element.value = this.respectiveElement.value;
                  }

                  this.inputPreviousValue = this.respectiveElement.value;
                  /* istanbul ignore next */

                  if ((this.isAngular || this.isVue) && this.preventChange === true) {
                    this.previousValue = this.isAngular ? this.value : this.previousValue;
                    this.preventChange = false;
                  } else if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.isAngular) || !this.isAngular || this.isAngular && !this.preventChange || this.isAngular && Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.preventChange)) {
                    this.raiseChangeEvent();
                  }

                  break;

                case 'htmlAttributes':
                  this.updateHTMLAttrToElement();
                  this.updateHTMLAttrToWrapper();
                  var attributes$$1 = this.element.attributes;
                  this.checkAttributes(true);
                  break;

                case 'readonly':
                  Input.setReadonly(this.readonly, this.respectiveElement);
                  break;

                case 'type':
                  if (this.respectiveElement.tagName !== 'TEXTAREA') {
                    this.respectiveElement.setAttribute('type', this.type);
                    this.raiseChangeEvent();
                  }

                  break;

                case 'showClearButton':
                  if (this.respectiveElement.tagName !== 'TEXTAREA') {
                    Input.setClearButton(this.showClearButton, this.respectiveElement, this.textboxWrapper);
                    this.bindClearEvent();
                  }

                  break;

                case 'enableRtl':
                  Input.setEnableRtl(this.enableRtl, [this.textboxWrapper.container]);
                  break;

                case 'placeholder':
                  Input.setPlaceholder(this.placeholder, this.respectiveElement);
                  break;

                case 'autocomplete':
                  if (this.autocomplete !== 'on' && this.autocomplete !== '') {
                    this.respectiveElement.autocomplete = this.autocomplete;
                  } else {
                    this.removeAttributes(['autocomplete']);
                  }

                  break;

                case 'cssClass':
                  this.updateCssClass(newProp.cssClass, oldProp.cssClass);
                  break;

                case 'locale':
                  this.globalize = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Internationalization"](this.locale);
                  this.l10n.setLocale(this.locale);
                  this.setProperties({
                    placeholder: this.l10n.getConstant('placeholder')
                  }, true);
                  Input.setPlaceholder(this.placeholder, this.respectiveElement);
                  break;
              }
            }
          }
          /**
           * Gets the component name
           * @private
           */

        }, {
          key: "getModuleName",
          value: function getModuleName() {
            return 'textbox';
          }
        }, {
          key: "isBlank",
          value: function isBlank(str) {
            return !str || /^\s*$/.test(str);
          }
        }, {
          key: "preRender",
          value: function preRender() {
            if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
              this.cloneElement = this.element.cloneNode(true);
              this.formElement = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["closest"])(this.element, 'form');

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.formElement)) {
                this.isForm = true;
              }
              /* istanbul ignore next */


              if (this.element.tagName === 'EJS-TEXTBOX') {
                var ejInstance = Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getValue"])('ej2_instances', this.element);
                var inputElement = this.multiline ? this.createElement('textarea') : this.createElement('input');
                var index = 0;

                for (index; index < this.element.attributes.length; index++) {
                  var attributeName = this.element.attributes[index].nodeName;

                  if (attributeName !== 'id') {
                    inputElement.setAttribute(attributeName, this.element.attributes[index].nodeValue);
                    inputElement.innerHTML = this.element.innerHTML;

                    if (attributeName === 'name') {
                      this.element.removeAttribute('name');
                    }
                  }
                }

                this.element.appendChild(inputElement);
                this.element = inputElement;
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["setValue"])('ej2_instances', ejInstance, this.element);
              }

              this.updateHTMLAttrToElement();
              this.checkAttributes(false);

              if (this.element.tagName !== 'TEXTAREA') {
                this.element.setAttribute('type', this.type);
              }

              this.element.setAttribute('role', 'textbox');
              this.globalize = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Internationalization"](this.locale);
              var localeText = {
                placeholder: this.placeholder
              };
              this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["L10n"]('textbox', localeText, this.locale);

              if (this.l10n.getConstant('placeholder') !== '') {
                this.setProperties({
                  placeholder: this.placeholder || this.l10n.getConstant('placeholder')
                }, true);
              }

              if (!this.element.hasAttribute('id')) {
                this.element.setAttribute('id', Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["getUniqueID"])('textbox'));
              }

              if (!this.element.hasAttribute('name')) {
                this.element.setAttribute('name', this.element.getAttribute('id'));
              }

              if (this.element.tagName === 'INPUT' && this.multiline) {
                this.isHiddenInput = true;
                this.textarea = this.createElement('textarea');
                this.element.parentNode.insertBefore(this.textarea, this.element);
                this.element.setAttribute('type', 'hidden');
                this.textarea.setAttribute('name', this.element.getAttribute('name'));
                this.element.removeAttribute('name');
                this.textarea.setAttribute('role', this.element.getAttribute('role'));
                this.element.removeAttribute('role');
                var attribute = ['required', 'minlength', 'maxlength'];

                for (var i = 0; i < attribute.length; i++) {
                  if (this.element.hasAttribute(attribute[i])) {
                    var attr = this.element.getAttribute(attribute[i]);
                    this.textarea.setAttribute(attribute[i], attr);
                    this.element.removeAttribute(attribute[i]);
                  }
                }
              }
            }
          }
        }, {
          key: "checkAttributes",
          value: function checkAttributes(isDynamic) {
            var attrs = isDynamic ? Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['placeholder', 'disabled', 'value', 'readonly', 'type', 'autocomplete'];

            var _iterator110 = _createForOfIteratorHelper(attrs),
                _step110;

            try {
              for (_iterator110.s(); !(_step110 = _iterator110.n()).done;) {
                var key = _step110.value;

                if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.element.getAttribute(key))) {
                  switch (key) {
                    case 'disabled':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) || this.textboxOptions['enabled'] === undefined || isDynamic) {
                        var enabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? false : true;
                        this.setProperties({
                          enabled: enabled
                        }, !isDynamic);
                      }

                      break;

                    case 'readonly':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) || this.textboxOptions['readonly'] === undefined || isDynamic) {
                        var readonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? true : false;
                        this.setProperties({
                          readonly: readonly
                        }, !isDynamic);
                      }

                      break;

                    case 'placeholder':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) || this.textboxOptions['placeholder'] === undefined || isDynamic) {
                        this.setProperties({
                          placeholder: this.element.placeholder
                        }, !isDynamic);
                      }

                      break;

                    case 'autocomplete':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) || this.textboxOptions['autocomplete'] === undefined || isDynamic) {
                        var autoCompleteTxt = this.element.autocomplete === 'off' ? 'off' : 'on';
                        this.setProperties({
                          autocomplete: autoCompleteTxt
                        }, !isDynamic);
                      }

                      break;

                    case 'value':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) || this.textboxOptions['value'] === undefined || isDynamic) {
                        this.setProperties({
                          value: this.element.value
                        }, !isDynamic);
                      }

                      break;

                    case 'type':
                      // tslint:disable-next-line
                      if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) || this.textboxOptions['type'] === undefined || isDynamic) {
                        this.setProperties({
                          type: this.element.type
                        }, !isDynamic);
                      }

                      break;
                  }
                }
              }
            } catch (err) {
              _iterator110.e(err);
            } finally {
              _iterator110.f();
            }
          }
          /**
           * To Initialize the control rendering
           * @private
           */

        }, {
          key: "render",
          value: function render() {
            var updatedCssClassValue = this.cssClass;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.cssClass) && this.cssClass !== '') {
              updatedCssClassValue = this.getInputValidClassList(this.cssClass);
            }

            if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
              this.respectiveElement = this.isHiddenInput ? this.textarea : this.element;
              this.textboxWrapper = Input.createInput({
                element: this.respectiveElement,
                floatLabelType: this.floatLabelType,
                properties: {
                  enabled: this.enabled,
                  enableRtl: this.enableRtl,
                  cssClass: updatedCssClassValue,
                  readonly: this.readonly,
                  placeholder: this.placeholder,
                  showClearButton: this.showClearButton
                }
              });
              this.updateHTMLAttrToWrapper();

              if (this.isHiddenInput) {
                this.respectiveElement.parentNode.insertBefore(this.element, this.respectiveElement);
              }
            } else {
              this.respectiveElement = this.element;
              this.textboxWrapper = {
                container: this.element.parentElement
              };

              if (this.showClearButton && !this.multiline) {
                this.textboxWrapper.clearButton = this.textboxWrapper.container.querySelector('.e-clear-icon');
                Input.wireClearBtnEvents(this.respectiveElement, this.textboxWrapper.clearButton, this.textboxWrapper.container);
              }

              if (this.floatLabelType === 'Auto') {
                Input.wireFloatingEvents(this.respectiveElement);
              } // tslint:disable-next-line


              Input.bindInitialEvent({
                element: this.respectiveElement,
                buttons: null,
                customTag: null,
                floatLabelType: this.floatLabelType,
                properties: this.properties
              });
            }

            this.wireEvents();

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
              Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);

              if (this.isHiddenInput) {
                this.element.value = this.respectiveElement.value;
              }
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.value)) {
              this.initialValue = this.value;
              this.setInitialValue();
            }

            if (this.autocomplete !== 'on' && this.autocomplete !== '') {
              this.respectiveElement.autocomplete = this.autocomplete; // tslint:disable-next-line
            } else if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxOptions) && this.textboxOptions['autocomplete'] !== undefined) {
              this.removeAttributes(['autocomplete']);
            }

            this.previousValue = this.value;
            this.inputPreviousValue = this.value;
            this.respectiveElement.defaultValue = this.respectiveElement.value;
            Input.setWidth(this.width, this.textboxWrapper.container);
            this.renderComplete();
          }
        }, {
          key: "updateHTMLAttrToWrapper",
          value: function updateHTMLAttrToWrapper() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
              for (var _i133 = 0, _Object$keys60 = Object.keys(this.htmlAttributes); _i133 < _Object$keys60.length; _i133++) {
                var key = _Object$keys60[_i133];

                if (containerAttr.indexOf(key) > -1) {
                  if (key === 'class') {
                    var updatedClassValues = this.getInputValidClassList(this.htmlAttributes[key]);

                    if (updatedClassValues !== '') {
                      Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.textboxWrapper.container], updatedClassValues.split(' '));
                    }
                  } else if (key === 'style') {
                    var setStyle = this.textboxWrapper.container.getAttribute(key);
                    setStyle = !Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(setStyle) ? setStyle + this.htmlAttributes[key] : this.htmlAttributes[key];
                    this.textboxWrapper.container.setAttribute(key, setStyle);
                  } else {
                    this.textboxWrapper.container.setAttribute(key, this.htmlAttributes[key]);
                  }
                }
              }
            }
          }
        }, {
          key: "updateHTMLAttrToElement",
          value: function updateHTMLAttrToElement() {
            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.htmlAttributes)) {
              for (var _i134 = 0, _Object$keys61 = Object.keys(this.htmlAttributes); _i134 < _Object$keys61.length; _i134++) {
                var key = _Object$keys61[_i134];

                if (containerAttr.indexOf(key) < 0) {
                  this.element.setAttribute(key, this.htmlAttributes[key]);
                }
              }
            }
          }
        }, {
          key: "updateCssClass",
          value: function updateCssClass(newClass, oldClass) {
            Input.setCssClass(this.getInputValidClassList(newClass), [this.textboxWrapper.container], this.getInputValidClassList(oldClass));
          }
        }, {
          key: "getInputValidClassList",
          value: function getInputValidClassList(inputClassName) {
            var result = inputClassName;

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(inputClassName) && inputClassName !== '') {
              result = inputClassName.replace(/\s+/g, ' ').trim();
            }

            return result;
          }
        }, {
          key: "setInitialValue",
          value: function setInitialValue() {
            if (!this.isAngular) {
              this.respectiveElement.setAttribute('value', this.initialValue);
            }
          }
        }, {
          key: "wireEvents",
          value: function wireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.respectiveElement, 'focus', this.focusHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.respectiveElement, 'blur', this.focusOutHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.respectiveElement, 'input', this.inputHandler, this);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.respectiveElement, 'change', this.changeHandler, this);

            if (this.isForm) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.formElement, 'reset', this.resetForm, this);
            }

            this.bindClearEvent();
          }
        }, {
          key: "resetValue",
          value: function resetValue(value) {
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;
            this.value = value;
            this.isProtectedOnChange = prevOnChange;
          }
        }, {
          key: "resetForm",
          value: function resetForm() {
            if (this.isAngular) {
              this.resetValue('');
            } else {
              this.resetValue(this.initialValue);
            }

            if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxWrapper)) {
              var label = this.textboxWrapper.container.querySelector('.e-float-text');

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(label)) {
                if (Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.initialValue) || this.initialValue === '') {
                  label.classList.add('e-label-bottom');
                  label.classList.remove('e-label-top');
                } else if (this.initialValue !== '') {
                  label.classList.add('e-label-top');
                  label.classList.remove('e-label-bottom');
                }
              }
            }
          }
        }, {
          key: "focusHandler",
          value: function focusHandler(args) {
            var eventArgs = {
              container: this.textboxWrapper.container,
              event: args,
              value: this.value
            };
            this.trigger('focus', eventArgs);
          }
        }, {
          key: "focusOutHandler",
          value: function focusOutHandler(args) {
            if (!(this.previousValue === null && this.value === null && this.respectiveElement.value === '') && this.previousValue !== this.respectiveElement.value) {
              this.raiseChangeEvent(args, true);
            }

            var eventArgs = {
              container: this.textboxWrapper.container,
              event: args,
              value: this.value
            };
            this.trigger('blur', eventArgs);
          }
        }, {
          key: "inputHandler",
          value: function inputHandler(args) {
            // tslint:disable-next-line
            var textboxObj = this;
            var eventArgs = {
              event: args,
              value: this.respectiveElement.value,
              previousValue: this.inputPreviousValue,
              container: this.textboxWrapper.container
            };
            this.inputPreviousValue = this.respectiveElement.value;
            /* istanbul ignore next */

            if (this.isAngular) {
              textboxObj.localChange({
                value: this.respectiveElement.value
              });
              this.preventChange = true;
            }

            if (this.isVue) {
              this.preventChange = true;
            }

            this.trigger('input', eventArgs);
            args.stopPropagation();
          }
        }, {
          key: "changeHandler",
          value: function changeHandler(args) {
            this.setProperties({
              value: this.respectiveElement.value
            }, true);
            this.raiseChangeEvent(args, true);
            args.stopPropagation();
          }
        }, {
          key: "raiseChangeEvent",
          value: function raiseChangeEvent(event, interaction) {
            var eventArgs = {
              event: event,
              value: this.value,
              previousValue: this.previousValue,
              container: this.textboxWrapper.container,
              isInteraction: interaction ? interaction : false,
              isInteracted: interaction ? interaction : false
            };
            this.preventChange = false;
            this.trigger('change', eventArgs);
            this.previousValue = this.value;
          }
        }, {
          key: "bindClearEvent",
          value: function bindClearEvent() {
            if (this.showClearButton && this.respectiveElement.tagName !== 'TEXTAREA') {
              if (this.enabled) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].add(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler, this);
              } else {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler);
              }
            }
          }
        }, {
          key: "resetInputHandler",
          value: function resetInputHandler(event) {
            event.preventDefault();

            if (!this.textboxWrapper.clearButton.classList.contains(HIDE_CLEAR)) {
              var previousValue = this.value;
              Input.setValue('', this.respectiveElement, this.floatLabelType, this.showClearButton);

              if (this.isHiddenInput) {
                this.element.value = this.respectiveElement.value;
              }

              this.setProperties({
                value: this.respectiveElement.value
              }, true);
              var eventArgs = {
                event: event,
                value: this.respectiveElement.value,
                previousValue: this.inputPreviousValue,
                container: this.textboxWrapper.container
              };
              this.trigger('input', eventArgs);
              this.inputPreviousValue = this.respectiveElement.value;
              this.raiseChangeEvent(event, true);
            }
          }
        }, {
          key: "unWireEvents",
          value: function unWireEvents() {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.respectiveElement, 'focus', this.focusHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.respectiveElement, 'blur', this.focusOutHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.respectiveElement, 'input', this.inputHandler);

            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.respectiveElement, 'change', this.changeHandler);

            if (this.isForm) {
              _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["EventHandler"].remove(this.formElement, 'reset', this.resetForm);
            }
          }
          /**
           * Removes the component from the DOM and detaches all its related event handlers.
           * Also, it maintains the initial TextBox element from the DOM.
           * @method destroy
           * @return {void}
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.unWireEvents();

            if (!(Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isBlazor"])() && this.isServerRendered)) {
              if (this.element.tagName === 'INPUT' && this.multiline) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.textboxWrapper.container.getElementsByTagName('textarea')[0]);
                this.respectiveElement = this.element;
                this.element.removeAttribute('type');
              }

              this.respectiveElement.value = this.respectiveElement.defaultValue;
              this.respectiveElement.classList.remove('e-input');
              this.removeAttributes(['aria-placeholder', 'aria-disabled', 'aria-readonly', 'aria-labelledby']);

              if (!Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"])(this.textboxWrapper)) {
                this.textboxWrapper.container.insertAdjacentElement('afterend', this.respectiveElement);
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["detach"])(this.textboxWrapper.container);
              }

              this.textboxWrapper = null;

              _get2(_getPrototypeOf2(TextBox.prototype), "destroy", this).call(this);
            } else {
              this.textboxWrapper = null;
            }
          }
          /**
           * Adding the icons to the TextBox component.
           * @param { string } position - Specify the icon placement on the TextBox. Possible values are append and prepend.
           * @param { string | string[] } iconClass - Icon classes which are need to add to the span element which is going to created.
           * Span element acts as icon or button element for TextBox.
           * @return {void}
           */

        }, {
          key: "addIcon",
          value: function addIcon(position, icons) {
            Input.addIcon(position, icons, this.textboxWrapper.container, this.respectiveElement, this.createElement);
          }
          /**
           * Gets the properties to be maintained in the persisted state.
           * @return {string}
           */

        }, {
          key: "getPersistData",
          value: function getPersistData() {
            var keyEntity = ['value'];
            return this.addOnPersist(keyEntity);
          }
          /**
           * Adding the multiple attributes as key-value pair to the TextBox element.
           * @param { { [key: string]: string } } attributes - Specifies the attributes to be add to TextBox element.
           * @return {void}
           */

        }, {
          key: "addAttributes",
          value: function addAttributes(attributes$$1) {
            for (var _i135 = 0, _Object$keys62 = Object.keys(attributes$$1); _i135 < _Object$keys62.length; _i135++) {
              var key = _Object$keys62[_i135];

              if (key === 'disabled') {
                this.setProperties({
                  enabled: false
                }, true);
                Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
              } else if (key === 'readonly') {
                this.setProperties({
                  readonly: true
                }, true);
                Input.setReadonly(this.readonly, this.respectiveElement);
              } else if (key === 'class') {
                this.respectiveElement.classList.add(attributes$$1[key]);
              } else if (key === 'placeholder') {
                this.setProperties({
                  placeholder: attributes$$1[key]
                }, true);
                Input.setPlaceholder(this.placeholder, this.respectiveElement);
              } else if (key === 'rows' && this.respectiveElement.tagName === 'TEXTAREA') {
                this.respectiveElement.setAttribute(key, attributes$$1[key]);
              } else {
                this.respectiveElement.setAttribute(key, attributes$$1[key]);
              }
            }
          }
          /**
           * Removing the multiple attributes as key-value pair to the TextBox element.
           * @param { string[] } attributes - Specifies the attributes name to be removed from TextBox element.
           * @return {void}
           */

        }, {
          key: "removeAttributes",
          value: function removeAttributes(attributes$$1) {
            var _iterator111 = _createForOfIteratorHelper(attributes$$1),
                _step111;

            try {
              for (_iterator111.s(); !(_step111 = _iterator111.n()).done;) {
                var key = _step111.value;

                if (key === 'disabled') {
                  this.setProperties({
                    enabled: true
                  }, true);
                  Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
                } else if (key === 'readonly') {
                  this.setProperties({
                    readonly: false
                  }, true);
                  Input.setReadonly(this.readonly, this.respectiveElement);
                } else if (key === 'placeholder') {
                  this.setProperties({
                    placeholder: null
                  }, true);
                  Input.setPlaceholder(this.placeholder, this.respectiveElement);
                } else {
                  this.respectiveElement.removeAttribute(key);
                }
              }
            } catch (err) {
              _iterator111.e(err);
            } finally {
              _iterator111.f();
            }
          }
          /**
           * Sets the focus to widget for interaction.
           * @returns void
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            if (document.activeElement !== this.respectiveElement && this.enabled) {
              this.respectiveElement.focus();

              if (this.textboxWrapper.container.classList.contains('e-input-group') || this.textboxWrapper.container.classList.contains('e-outline') || this.textboxWrapper.container.classList.contains('e-filled')) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["addClass"])([this.textboxWrapper.container], [TEXTBOX_FOCUS]);
              }
            }
          }
          /**
           * Remove the focus from widget, if the widget is in focus state.
           * @returns void
           */

        }, {
          key: "focusOut",
          value: function focusOut() {
            if (document.activeElement === this.respectiveElement && this.enabled) {
              this.respectiveElement.blur();

              if (this.textboxWrapper.container.classList.contains('e-input-group') || this.textboxWrapper.container.classList.contains('e-outline') || this.textboxWrapper.container.classList.contains('e-filled')) {
                Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["removeClass"])([this.textboxWrapper.container], [TEXTBOX_FOCUS]);
              }
            }
          }
        }]);

        return TextBox;
      }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Component"]);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('text')], TextBox.prototype, "type", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TextBox.prototype, "readonly", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TextBox.prototype, "value", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('Never')], TextBox.prototype, "floatLabelType", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('')], TextBox.prototype, "cssClass", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TextBox.prototype, "placeholder", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])('on')], TextBox.prototype, "autocomplete", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])({})], TextBox.prototype, "htmlAttributes", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TextBox.prototype, "multiline", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(true)], TextBox.prototype, "enabled", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TextBox.prototype, "showClearButton", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(false)], TextBox.prototype, "enablePersistence", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Property"])(null)], TextBox.prototype, "width", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TextBox.prototype, "created", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TextBox.prototype, "destroyed", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TextBox.prototype, "change", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TextBox.prototype, "blur", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TextBox.prototype, "focus", void 0);

      __decorate$6([Object(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["Event"])()], TextBox.prototype, "input", void 0);

      TextBox = __decorate$6([_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__["NotifyPropertyChanges"]], TextBox);
      /**
       * Uploader modules
       */

      /**
       * NumericTextBox all modules
       */
      //# sourceMappingURL=ej2-inputs.es2015.js.map

      /***/
    },

    /***/
    "qp47":
    /*!********************************************************************!*\
      !*** ./src/app/pages/employee-wizard/services/employee.service.ts ***!
      \********************************************************************/

    /*! exports provided: EmployeeService */

    /***/
    function qp47(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmployeeService", function () {
        return EmployeeService;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common/http */
      "tk/3");
      /* harmony import */


      var src_environments_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! src/environments/environment */
      "AytR");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");

      var EmployeeService = /*#__PURE__*/function () {
        function EmployeeService(http) {
          _classCallCheck2(this, EmployeeService);

          this.http = http;
          this.endpoint = src_environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"].apiBaseUrl;
          this.headers = new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"]().set('Content-Type', 'application/x-www-form-urlencoded'); //Set a Header Value.
        } //Get Company List Data


        _createClass2(EmployeeService, [{
          key: "getCompanyData",
          value: function getCompanyData() {
            try {
              var parentUserId = localStorage.getItem("token");
              var apiUrl = "".concat(this.endpoint, "/company/company-list/").concat(parentUserId);
              return this.http.get(apiUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } //Method for get branch list Data

        }, {
          key: "getBranchListData",
          value: function getBranchListData(companyParentId) {
            try {
              var apiUrl = "".concat(this.endpoint, "/company/branch-list/").concat(companyParentId);
              return this.http.get(apiUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } //Method for get job profile data

        }, {
          key: "getJobProfileListData",
          value: function getJobProfileListData(companyId) {
            try {
              var api = "".concat(this.endpoint, "/company/list-all-job-profiles/").concat(companyId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } //Method for get department list

        }, {
          key: "getDepartmentData",
          value: function getDepartmentData(branchId) {
            try {
              var apiUrl = "".concat(this.endpoint, "/branch/list-department/").concat(branchId);
              return this.http.get(apiUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } //Method for get the job profile data

        }, {
          key: "getJobProfileData",
          value: function getJobProfileData(companyId) {
            try {
              var apiUrl = "".concat(this.endpoint, "/company/list-all-job-profiles/").concat(companyId);
              return this.http.get(apiUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } //Method to Add Employee form Data

        }, {
          key: "submitData",
          value: function submitData(data) {
            try {
              data.isActive = true;
              var parentUserId = localStorage.getItem('token');
              var apiUrl = "".concat(this.endpoint, "/user/add-employee/").concat(parentUserId);
              return this.http.post(apiUrl, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {}
          } // Method For Update Employee Profile with basic details

        }, {
          key: "updateEmployeeBasicDetails",
          value: function updateEmployeeBasicDetails(data, employeeId) {
            try {
              var parentUserId = localStorage.getItem('token');
              var apiUrl = "".concat(this.endpoint, "/employee/update-employee-profile/").concat(employeeId, "/").concat(parentUserId);
              return this.http.post(apiUrl, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              return err;
            }
          } //Create method for manage errors when request and return response from the server

        }, {
          key: "errorMgmt",
          value: function errorMgmt(error) {
            try {
              var errorMessage = ''; //Handle client side error

              if (error.error instanceof ErrorEvent) {
                errorMessage = error.error.message;
              } //Handle server side error
              else {
                  errorMessage = "Error code:".concat(error.status, "\nMessage:").concat(errorMessage);
                }

              console.log(errorMessage);
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["throwError"])(errorMessage);
            } catch (err) {
              console.log(err);
            }
          } //Method for submit address

        }, {
          key: "submitAddress",
          value: function submitAddress(data, employeeId) {
            try {
              var apiUrl = "".concat(this.endpoint, "/employee/add-employee-address/").concat(employeeId);
              return this.http.post(apiUrl, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
          /**add employe bank details */

        }, {
          key: "employBank",
          value: function employBank(data, employeeId) {
            try {
              var apiUrl = "".concat(this.endpoint, "/employee/add-employee-bank-details/").concat(employeeId);
              return this.http.post(apiUrl, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
          /** add work experience  */

        }, {
          key: "experiAdd",
          value: function experiAdd(data, employeeId) {
            try {
              var apiUrl = "".concat(this.endpoint, "/employee/add-employee-work-experiences/").concat(employeeId);
              return this.http.post(apiUrl, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
          /** add family members of employee */

        }, {
          key: "addFamilyMember",
          value: function addFamilyMember(data, employeeId) {
            try {
              var apiUrl = "".concat(this.endpoint, "/employee/add-employee-family/").concat(employeeId);
              return this.http.post(apiUrl, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } //Method for submit educational details

        }, {
          key: "submitEducationalData",
          value: function submitEducationalData(data, employeeId) {
            try {
              var apiURL = "".concat(this.endpoint, "/employee/add-employee-educational-details/").concat(employeeId);
              return this.http.post(apiURL, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } //Method for submit employee bio details

        }, {
          key: "submitBioData",
          value: function submitBioData(data, employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/add-employee-bio/").concat(employeeId);
              return this.http.post(api, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } // Update the Employee Bio Profile

        }, {
          key: "updateBio",
          value: function updateBio(data, employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/update-bio/").concat(employeeId);
              return this.http.post(api, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } //Method for get employee list

        }, {
          key: "getEmployeeList",
          value: function getEmployeeList(status) {
            try {
              var companyId = sessionStorage.getItem("companyId");
              var api = "".concat(this.endpoint, "/company/list-employees/").concat(companyId, "/").concat(status);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } //Method for filter employee list

        }, {
          key: "filterEmployeeList",
          value: function filterEmployeeList(employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/list-details/").concat(employeeId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } //Method for set Password of employee

        }, {
          key: "setPassword",
          value: function setPassword(data, employeeId) {
            try {
              var api = "".concat(this.endpoint, "/user/employee-set-password/").concat(employeeId);
              return this.http.post(api, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
          /** List employee address */

        }, {
          key: "oldAddress",
          value: function oldAddress(employeeId) {
            try {
              var apiURL = "".concat(this.endpoint, "/employee/list-addresses/").concat(employeeId);
              return this.http.get(apiURL).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
          /** Update address employee*/

        }, {
          key: "updateAddess",
          value: function updateAddess(data, employeeId, addressId) {
            try {
              var api = "".concat(this.endpoint, "/employee/update-address/").concat(employeeId, "/").concat(addressId);
              return this.http.post(api, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
          /**Delete employee address */

        }, {
          key: "deleteAddress",
          value: function deleteAddress(employeeId, addressId) {
            try {
              var apiURL = "".concat(this.endpoint, "/employee/delete-address/").concat(employeeId, "/").concat(addressId);
              return this.http["delete"](apiURL).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } //Method for get employee family-details

        }, {
          key: "getFamilyData",
          value: function getFamilyData(employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/list-family-details/").concat(employeeId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } //Method for remove employee family details

        }, {
          key: "removeFamilyDetails",
          value: function removeFamilyDetails(employeeId, familyId) {
            try {
              var api = "".concat(this.endpoint, "/employee/delete-family-detail/").concat(employeeId, "/").concat(familyId);
              return this.http["delete"](api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } //Method for update employee family details

        }, {
          key: "updateFamilyDetails",
          value: function updateFamilyDetails(data, employeeId, familyId) {
            try {
              var api = "".concat(this.endpoint, "/employee/update-family-details/").concat(employeeId, "/").concat(familyId);
              return this.http.post(api, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
          /** list of education details */

        }, {
          key: "removeEducation",
          value: function removeEducation(employeeId, educationId) {
            try {
              var api = "".concat(this.endpoint, "/employee/delete-educational-detail/").concat(employeeId, "/").concat(educationId);
              return this.http["delete"](api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
        }, {
          key: "educationDetails",
          value: function educationDetails(employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/list-educational-details/").concat(employeeId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
        }, {
          key: "updateEducation",
          value: function updateEducation(data, employeeId, educationId) {
            try {
              var api = "".concat(this.endpoint, "/employee/update-educational-detail/").concat(employeeId, "/").concat(educationId);
              return this.http.post(api, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
          /**work Exprience start */

        }, {
          key: "removeExprience",
          value: function removeExprience(employeeId, workExperienceId) {
            try {
              var api = "".concat(this.endpoint, "/employee/delete-work-experience/").concat(employeeId, "/").concat(workExperienceId);
              return this.http["delete"](api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
        }, {
          key: "workExprience",
          value: function workExprience(employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/list-work-experiences/").concat(employeeId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
        }, {
          key: "updateWokExprience",
          value: function updateWokExprience(data, employeeId, workExperienceId) {
            try {
              var api = "".concat(this.endpoint, "/employee/update-work-experiences/").concat(employeeId, "/").concat(workExperienceId);
              return this.http.post(api, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
          /** Bank details */

        }, {
          key: "bankDetailsList",
          value: function bankDetailsList(employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/list-bank-details/").concat(employeeId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
          /** submit payroll setting data  */

        }, {
          key: "payrollDataSubmit",
          value: function payrollDataSubmit(data, employeeId) {
            try {
              var apiURL = "".concat(this.endpoint, "/employee/add-payroll-setting/").concat(employeeId);
              return this.http.post(apiURL, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } // Update Payroll Settings

        }, {
          key: "updatePayrollSettings",
          value: function updatePayrollSettings(data, employeeId) {
            try {
              var apiURL = "".concat(this.endpoint, "/employee/update-payroll-setting/").concat(employeeId);
              return this.http.post(apiURL, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
        }, {
          key: "payollDataList",
          value: function payollDataList(employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/list-payroll-settings/").concat(employeeId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } // Grade Rule List

        }, {
          key: "gradeRuleList",
          value: function gradeRuleList() {
            try {
              var companyId = sessionStorage.getItem('companyId');
              var api = "".concat(this.endpoint, "/company/list-all-grade-rule/").concat(companyId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          }
          /** bio list api configation */

        }, {
          key: "bioDataList",
          value: function bioDataList(employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/list-bio/").concat(employeeId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
          /** language skill api configation  */

        }, {
          key: "addLanguageSkill",
          value: function addLanguageSkill(data, employeeId) {
            try {
              var apiURL = "".concat(this.endpoint, "/employee/add-employee-language-skills/").concat(employeeId);
              return this.http.post(apiURL, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
        }, {
          key: "updateLanguageSkill",
          value: function updateLanguageSkill(data, employeeId, languageId) {
            try {
              var apiURL = "".concat(this.endpoint, "/employee/update-language-skill/").concat(employeeId, "/").concat(languageId);
              return this.http.post(apiURL, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
        }, {
          key: "LanguageSkill",
          value: function LanguageSkill(employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/list-language-skills/").concat(employeeId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          }
        }, {
          key: "employeeList",
          value: function employeeList(employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/list-details/").concat(employeeId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } // Employee Leave Settings Details

        }, {
          key: "leaveEmployeeDataList",
          value: function leaveEmployeeDataList(employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/list-leave-settings/").concat(employeeId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } // Add Leave Settings

        }, {
          key: "addLeaveSettings",
          value: function addLeaveSettings(data, employeeId) {
            try {
              var userId = localStorage.getItem('token');
              var apiURL = "".concat(this.endpoint, "/employee/add-leave-settings/").concat(employeeId, "/").concat(userId);
              return this.http.post(apiURL, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } // Update Leave Settings

        }, {
          key: "updateLeaveSettings",
          value: function updateLeaveSettings(data, employeeId, leaveSettingId) {
            try {
              console.log(data);
              var userId = localStorage.getItem('token');
              var apiURL = "".concat(this.endpoint, "/employee/update-leave-settings/").concat(leaveSettingId, "/").concat(employeeId, "/").concat(userId);
              return this.http.post(apiURL, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } // Employee Id Proofs List Details

        }, {
          key: "employeeIdProofsDataList",
          value: function employeeIdProofsDataList(employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/list-identity-proofs/").concat(employeeId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } // Add Employee Identity Proofs  Details

        }, {
          key: "addEmployeeIdProofs",
          value: function addEmployeeIdProofs(data, employeeId) {
            try {
              var apiURL = "".concat(this.endpoint, "/employee/add-employee-identity-proofs/").concat(employeeId);
              return this.http.post(apiURL, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } // Update Id Proofs Settings

        }, {
          key: "updateIdProofsSettings",
          value: function updateIdProofsSettings(data, employeeId, proofId) {
            try {
              var apiURL = "".concat(this.endpoint, "/employee/update-identity-proofs/").concat(employeeId, "/").concat(proofId);
              return this.http.post(apiURL, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } //Method for Delete employee Id Proofs details

        }, {
          key: "removeIdProofsDetails",
          value: function removeIdProofsDetails(employeeId, proofId) {
            try {
              var api = "".concat(this.endpoint, "/employee/delete-identity-proof/").concat(employeeId, "/").concat(proofId);
              return this.http["delete"](api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err.message);
            }
          } // Get company TL/Manager List

        }, {
          key: "getTlList",
          value: function getTlList() {
            try {
              var companyId = sessionStorage.getItem('companyId');
              var api = "".concat(this.endpoint, "/company/get-tl-list/").concat(companyId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } // Assign Tl to Employee

        }, {
          key: "assignTl",
          value: function assignTl(data, userId) {
            try {
              var apiURL = "".concat(this.endpoint, "/user/assign-parentId/").concat(userId);
              return this.http.post(apiURL, data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } // Employee TL List

        }, {
          key: "employeeTlList",
          value: function employeeTlList(employeeId) {
            try {
              var api = "".concat(this.endpoint, "/employee/parent-child-ids/").concat(employeeId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } // Unassign TL/Manager

        }, {
          key: "unassignTl",
          value: function unassignTl(userId, parentUserId) {
            try {
              var api = "".concat(this.endpoint, "/user/unassign-parentId/").concat(userId, "/").concat(parentUserId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } // update employee status

        }, {
          key: "updateEmployeeStatus",
          value: function updateEmployeeStatus(employeeId, status) {
            try {
              var api = "".concat(this.endpoint, "/company/employee-status/").concat(employeeId, "/").concat(status);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } // Get Employee Documnet which is not yet uploaded

        }, {
          key: "uploadedDocuments",
          value: function uploadedDocuments(employeeId) {
            try {
              var companyId = sessionStorage.getItem('companyId');
              var api = "".concat(this.endpoint, "/employee/uploaded-documnets/").concat(employeeId, "/").concat(companyId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } // Upload Employee Documents

        }, {
          key: "uploadDocuments",
          value: function uploadDocuments(data, documentTypeId, employeeId, type) {
            try {
              var formData = new FormData();
              formData.append('document', data.get('document').value);
              var userId = localStorage.getItem('token');
              var companyId = sessionStorage.getItem('companyId');
              var apiUrl = "".concat(this.endpoint, "/user/upload-documents/").concat(userId, "/").concat(documentTypeId, "/").concat(employeeId, "/").concat(type, "/").concat(companyId);
              return this.http.post(apiUrl, formData).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } // Get uploaded document by employee

        }, {
          key: "employeeDocumentList",
          value: function employeeDocumentList(employeeId) {
            try {
              var api = "".concat(this.endpoint, "/user/list-documents/").concat(employeeId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } // Delete Employee Document

        }, {
          key: "deleteEmployeeDocument",
          value: function deleteEmployeeDocument(documentTypeId, employeeId) {
            try {
              var apiURL = "".concat(this.endpoint, "/user/remove-documnets/").concat(documentTypeId, "/").concat(employeeId);
              return this.http["delete"](apiURL).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } // Get employee count

        }, {
          key: "employeeCount",
          value: function employeeCount() {
            try {
              var companyId = sessionStorage.getItem('companyId');
              var api = "".concat(this.endpoint, "/company/employee-count/").concat(companyId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (err) {
              console.log(err);
            }
          } // Is Admin

        }, {
          key: "isAdmin",
          value: function isAdmin() {
            try {
              var userId = localStorage.getItem('token');
              var api = "".concat(this.endpoint, "/user/is-admin/").concat(userId);
              return this.http.get(api).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.errorMgmt));
            } catch (error) {
              console.log(error);
            }
          }
        }]);

        return EmployeeService;
      }();

      EmployeeService.ɵfac = function EmployeeService_Factory(t) {
        return new (t || EmployeeService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]));
      };

      EmployeeService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: EmployeeService,
        factory: EmployeeService.ɵfac,
        providedIn: 'root'
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](EmployeeService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "tkWa":
    /*!********************************************************************************************!*\
      !*** ./src/app/pages/Payment Heads/update-payment-heads/update-payment-heads.component.ts ***!
      \********************************************************************************************/

    /*! exports provided: UpdatePaymentHeadsComponent */

    /***/
    function tkWa(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "UpdatePaymentHeadsComponent", function () {
        return UpdatePaymentHeadsComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/forms */
      "3Pt+");
      /* harmony import */


      var _payment_heads_service_payment_heads_api_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../payment-heads-service/payment-heads-api.service */
      "YrEC");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var src_app_utilities_utilities_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! src/app/utilities/utilities.service */
      "cnwL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");

      function UpdatePaymentHeadsComponent_p_6_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p", 20);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "strong");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r0.errMsg);
        }
      }

      function UpdatePaymentHeadsComponent_p_8_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p", 21);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "strong");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r1.successMsg);
        }
      }

      function UpdatePaymentHeadsComponent_div_20_div_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 23);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var validation_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", validation_r5.message, " ");
        }
      }

      function UpdatePaymentHeadsComponent_div_20_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, UpdatePaymentHeadsComponent_div_20_div_1_Template, 2, 1, "div", 22);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var validation_r5 = ctx.$implicit;

          var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r2.paymentHeadUpdateForm.get("title").hasError(validation_r5.type) && (ctx_r2.paymentHeadUpdateForm.get("title").dirty || ctx_r2.paymentHeadUpdateForm.get("title").touched));
        }
      }

      function UpdatePaymentHeadsComponent_option_30_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "option", 24);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var h_r8 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", h_r8);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](h_r8);
        }
      }

      function UpdatePaymentHeadsComponent_div_31_div_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 23);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var validation_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", validation_r9.message, " ");
        }
      }

      function UpdatePaymentHeadsComponent_div_31_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, UpdatePaymentHeadsComponent_div_31_div_1_Template, 2, 1, "div", 22);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var validation_r9 = ctx.$implicit;

          var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r4.paymentHeadUpdateForm.get("type").hasError(validation_r9.type) && (ctx_r4.paymentHeadUpdateForm.get("type").dirty || ctx_r4.paymentHeadUpdateForm.get("type").touched));
        }
      }

      var UpdatePaymentHeadsComponent = /*#__PURE__*/function () {
        function UpdatePaymentHeadsComponent(api, fb, route, ngZone, router, util) {
          var _this282 = this;

          _classCallCheck2(this, UpdatePaymentHeadsComponent);

          this.api = api;
          this.fb = fb;
          this.route = route;
          this.ngZone = ngZone;
          this.router = router;
          this.util = util;
          this.successMessage = false;
          this.errorMsg = false;
          this.paymentHeadTypes = ['Addition', 'Deduction'];
          this.validationMessage = {
            'title': [{
              type: 'required',
              message: 'Payement Head Title is Required'
            }],
            'type': [{
              type: 'required',
              message: 'Payement Head Type is Required'
            }]
          };
          this.paymentHeadId = this.route.snapshot.paramMap.get("jobCategoryId");
          this.util.moduleExists(this.paymentHeadId, 'PaymentHead').subscribe(function (data) {
            if (data.status === 'success') {
              if (!data.data) {
                _this282.router.navigateByUrl('/pages/payment-heads/list-payment-heads');
              }
            }
          });
        }

        _createClass2(UpdatePaymentHeadsComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this.existingDataList();
            this.updatePaymentHeadValidation();
            this.permissionInfo = this.util.permissionRoleInfo;

            if (this.permissionInfo.search('Edit PaymentHeads') === -1) {
              this.paymentHeadUpdateForm.disable();
            }
          }
        }, {
          key: "updatePaymentHeadValidation",
          value: function updatePaymentHeadValidation() {
            try {
              this.paymentHeadUpdateForm = this.fb.group({
                title: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required),
                type: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required)
              });
            } catch (err) {
              console.log(err);
            }
          }
        }, {
          key: "existingDataList",
          value: function existingDataList() {
            var _this283 = this;

            this.api.paymentHeadDetails(this.paymentHeadId).subscribe(function (data) {
              _this283.existingData = data.data;
              _this283.paymentHeadUpdateForm = _this283.fb.group({
                title: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](_this283.existingData.title, _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required),
                type: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](_this283.existingData.type, _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required)
              });
            });
          }
        }, {
          key: "updatePaymenthead",
          value: function updatePaymenthead() {
            var _this284 = this;

            try {
              var cleanPaymentHeadUpdateForm = this.util.cleanFormLevelOne(this.paymentHeadUpdateForm);
              this.api.updatePaymentHeads(cleanPaymentHeadUpdateForm.value, this.paymentHeadId).subscribe(function (data) {
                if (data.status === 'success') {
                  _this284.successMessage = true;
                  _this284.errorMsg = false;
                  _this284.successMsg = data.message;
                  setTimeout(function () {
                    _this284.handleErrors();

                    _this284.ngZone.run(function () {
                      return _this284.router.navigateByUrl('/pages/payment-heads/list-payment-heads');
                    });
                  }, 2000);
                } else {
                  _this284.errorMsg = true;
                  _this284.successMessage = false;
                  _this284.errMsg = data.message;
                  setTimeout(function () {
                    _this284.handleErrors();
                  }, 3000);
                }
              });
            } catch (err) {
              console.log(err);
            }
          }
        }, {
          key: "handleErrors",
          value: function handleErrors() {
            this.errorMsg = false;
            this.successMessage = false;
            this.errMsg = '';
            this.successMsg = '';
          }
        }]);

        return UpdatePaymentHeadsComponent;
      }();

      UpdatePaymentHeadsComponent.ɵfac = function UpdatePaymentHeadsComponent_Factory(t) {
        return new (t || UpdatePaymentHeadsComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_payment_heads_service_payment_heads_api_service__WEBPACK_IMPORTED_MODULE_2__["paymentHeadApiService"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](src_app_utilities_utilities_service__WEBPACK_IMPORTED_MODULE_4__["UtilitiesService"]));
      };

      UpdatePaymentHeadsComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: UpdatePaymentHeadsComponent,
        selectors: [["app-update-payment-heads"]],
        decls: 38,
        vars: 7,
        consts: [[1, "card", "card-u</div>ser"], [1, "card-header"], [1, "card-title", "text-center"], [1, "card-body"], [1, "col-sm-offset-2"], ["class", "alert alert-danger", 4, "ngIf"], ["class", "alert alert-success", 4, "ngIf"], ["role", "form", 1, "form-horizontal", 3, "formGroup", "ngSubmit"], [1, "row"], [1, "col-md"], [1, "form-group"], [1, "col-sm-6", "control-label"], [2, "color", "darkred"], ["type", "text", "id", "title", "placeholder", "Enter Title", "formControlName", "title", 1, "form-control"], [4, "ngFor", "ngForOf"], ["id", "type", "formControlName", "type", 1, "dropdown", "dropdown-toggle", "form-control", 2, "width", "100%", "height", "40px"], [3, "value", 4, "ngFor", "ngForOf"], [1, "col-sm-offset-2", "col-sm-10"], ["type", "submit", 1, "btn", "btn-success", 3, "disabled"], ["type", "submit", "routerLink", "../../list-payment-heads", 1, "btn", "btn-danger"], [1, "alert", "alert-danger"], [1, "alert", "alert-success"], ["style", "color:\xA0red;margin-left:\xA014px;", "style", "color:\xA0red;margin-left:\xA014px;", 4, "ngIf"], [2, "color", "red", "margin-left", "14px"], [3, "value"]],
        template: function UpdatePaymentHeadsComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "h2", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3, "Update Payment Heads");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, UpdatePaymentHeadsComponent_p_6_Template, 3, 1, "p", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, UpdatePaymentHeadsComponent_p_8_Template, 3, 1, "p", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "form", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngSubmit", function UpdatePaymentHeadsComponent_Template_form_ngSubmit_9_listener() {
              return ctx.updatePaymenthead();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "div", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](11, "div", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "div", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "label", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](15, "Title:\xA0");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "span", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](17, "*");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](18, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](19, "input", 13);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](20, UpdatePaymentHeadsComponent_div_20_Template, 2, 1, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "div", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "div", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](23, "label", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](24, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](25, "Type:\xA0");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](26, "span", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](27, "*");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](28, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](29, "select", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](30, UpdatePaymentHeadsComponent_option_30_Template, 2, 2, "option", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](31, UpdatePaymentHeadsComponent_div_31_Template, 2, 1, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](32, "div", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](33, "div", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](34, "button", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](35, "Update");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](36, "button", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](37, "Cancel");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.errorMsg);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.successMessage);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("formGroup", ctx.paymentHeadUpdateForm);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.validationMessage.title);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.paymentHeadTypes);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.validationMessage.type);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx.paymentHeadUpdateForm.invalid || ctx.permissionInfo.search("Edit PaymentHeads") === -1);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["NgIf"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["ɵangular_packages_forms_forms_y"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NgControlStatusGroup"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormGroupDirective"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["DefaultValueAccessor"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NgControlStatus"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControlName"], _angular_common__WEBPACK_IMPORTED_MODULE_5__["NgForOf"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["SelectControlValueAccessor"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterLink"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NgSelectOption"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["ɵangular_packages_forms_forms_x"]],
        encapsulation: 2
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](UpdatePaymentHeadsComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-update-payment-heads',
            templateUrl: 'update-payment-heads.component.html'
          }]
        }], function () {
          return [{
            type: _payment_heads_service_payment_heads_api_service__WEBPACK_IMPORTED_MODULE_2__["paymentHeadApiService"]
          }, {
            type: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]
          }, {
            type: _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
          }, {
            type: _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"]
          }, {
            type: src_app_utilities_utilities_service__WEBPACK_IMPORTED_MODULE_4__["UtilitiesService"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "viRw":
    /*!***********************************************!*\
      !*** ./src/app/pages/pages-routing.module.ts ***!
      \***********************************************/

    /*! exports provided: PagesRoutingModule */

    /***/
    function viRw(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PagesRoutingModule", function () {
        return PagesRoutingModule;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/router */
      "tyNb");
      /* harmony import */


      var _pages_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./pages.component */
      "8D7W");
      /* harmony import */


      var _Payment_Heads_payment_heads_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./Payment Heads/payment-heads.module */
      "hnZ+");
      /* harmony import */


      var _update_profile_update_profile_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./update-profile/update-profile.component */
      "e+I4");
      /* harmony import */


      var _authGuard_auth_guard__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../authGuard/auth.guard */
      "CG1p");

      var routes = [{
        path: '',
        component: _pages_component__WEBPACK_IMPORTED_MODULE_3__["PagesComponent"],
        canActivate: [_authGuard_auth_guard__WEBPACK_IMPORTED_MODULE_6__["AuthGuard"]],
        children: [{
          path: 'dashboard',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() | dashboard-dashboard-module */
            [__webpack_require__.e("default~company-company-module~dashboard-dashboard-module"), __webpack_require__.e("dashboard-dashboard-module")]).then(__webpack_require__.bind(null,
            /*! ./dashboard/dashboard.module */
            "/2RN")).then(function (m) {
              return m.DashboardModule;
            });
          }
        }, {
          path: 'sub-user',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() | sub-user-sub-user-module */
            [__webpack_require__.e("common"), __webpack_require__.e("sub-user-sub-user-module")]).then(__webpack_require__.bind(null,
            /*! ./sub-user/sub-user.module */
            "Fb0g")).then(function (m) {
              return m.SubUserModule;
            });
          }
        }, {
          path: 'company',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() | company-company-module */
            [__webpack_require__.e("default~company-company-module~payroll-payroll-module"), __webpack_require__.e("default~company-company-module~dashboard-dashboard-module"), __webpack_require__.e("common"), __webpack_require__.e("company-company-module")]).then(__webpack_require__.bind(null,
            /*! ./company/company.module */
            "rXpt")).then(function (m) {
              return m.CompanyModule;
            });
          }
        }, {
          path: 'branches',
          loadChildren: function loadChildren() {
            return __webpack_require__.e(
            /*! import() | branches-branches-module */
            "branches-branches-module").then(__webpack_require__.bind(null,
            /*! ./branches/branches.module */
            "TEzN")).then(function (m) {
              return m.BranchesModule;
            });
          }
        }, {
          path: 'leave-types',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() | leave-types-leave-types-module */
            [__webpack_require__.e("common"), __webpack_require__.e("leave-types-leave-types-module")]).then(__webpack_require__.bind(null,
            /*! ./leave-types/leave-types.module */
            "ka8b")).then(function (m) {
              return m.LeavetypesModule;
            });
          }
        }, {
          path: 'employee-wizard',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() | employee-wizard-employee-wizard-module */
            [__webpack_require__.e("default~app-users-users-module~employee-wizard-employee-wizard-module"), __webpack_require__.e("common"), __webpack_require__.e("employee-wizard-employee-wizard-module")]).then(__webpack_require__.bind(null,
            /*! ./employee-wizard/employee-wizard.module */
            "NaB9")).then(function (m) {
              return m.EmployeeWizardModule;
            });
          }
        }, // {
        //   path:'employee-wizard',
        //   loadChildren:() => import('./employee-wizard/employee-wizard.module')
        //   .then(m => m.EmployeeWizardModule)
        // },
        {
          path: 'job-profile',
          loadChildren: function loadChildren() {
            return __webpack_require__.e(
            /*! import() | job-profile-job-profile-module */
            "job-profile-job-profile-module").then(__webpack_require__.bind(null,
            /*! ./job-profile/job-profile.module */
            "Man0")).then(function (m) {
              return m.JobProfileModule;
            });
          }
        }, {
          path: 'job-category',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() | job-category-job-category-module */
            [__webpack_require__.e("common"), __webpack_require__.e("job-category-job-category-module")]).then(__webpack_require__.bind(null,
            /*! ./job category/job-category.module */
            "pkwT")).then(function (m) {
              return m.JobCategoryModule;
            });
          }
        }, {
          path: 'document-types',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() | document-types-document-types-module */
            [__webpack_require__.e("common"), __webpack_require__.e("document-types-document-types-module")]).then(__webpack_require__.bind(null,
            /*! ./document-types/document-types.module */
            "ANNO")).then(function (m) {
              return m.DocumenttypesModule;
            });
          }
        }, {
          path: 'skill-category',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() | skill-category-skill-category-module */
            [__webpack_require__.e("common"), __webpack_require__.e("skill-category-skill-category-module")]).then(__webpack_require__.bind(null,
            /*! ./skill-category/skill-category.module */
            "Fufc")).then(function (m) {
              return m.SkillCategoryModule;
            });
          }
        }, {
          path: 'holiday',
          loadChildren: function loadChildren() {
            return __webpack_require__.e(
            /*! import() | holiday-holiday-module */
            "holiday-holiday-module").then(__webpack_require__.bind(null,
            /*! ./holiday/holiday.module */
            "yP01")).then(function (m) {
              return m.HolidayModule;
            });
          }
        }, {
          path: 'payment-heads',
          loadChildren: function loadChildren() {
            return Promise.resolve().then(__webpack_require__.bind(null,
            /*! ./Payment Heads/payment-heads.module */
            "hnZ+")).then(function (m) {
              return _Payment_Heads_payment_heads_module__WEBPACK_IMPORTED_MODULE_4__["PaymentHeadsModule"];
            });
          }
        }, {
          path: 'report',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() | report-report-module */
            [__webpack_require__.e("default~payroll-payroll-module~report-report-module"), __webpack_require__.e("report-report-module")]).then(__webpack_require__.bind(null,
            /*! ./report/report.module */
            "Q0Id")).then(function (m) {
              return m.ReportModule;
            });
          }
        }, {
          path: 'payroll',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() | payroll-payroll-module */
            [__webpack_require__.e("default~company-company-module~payroll-payroll-module"), __webpack_require__.e("default~payroll-payroll-module~report-report-module"), __webpack_require__.e("payroll-payroll-module")]).then(__webpack_require__.bind(null,
            /*! ./payroll/payroll.module */
            "JrtD")).then(function (m) {
              return m.PayrollModule;
            });
          }
        }, {
          path: 'calendar',
          loadChildren: function loadChildren() {
            return __webpack_require__.e(
            /*! import() | calendar-calendar-module */
            "calendar-calendar-module").then(__webpack_require__.bind(null,
            /*! ./calendar/calendar.module */
            "awFG")).then(function (m) {
              return m.CalendarModule;
            });
          }
        }, {
          path: 'department',
          loadChildren: function loadChildren() {
            return __webpack_require__.e(
            /*! import() | department-department-module */
            "department-department-module").then(__webpack_require__.bind(null,
            /*! ./department/department.module */
            "goCz")).then(function (m) {
              return m.DepartmentModule;
            });
          }
        }, {
          path: 'graderule',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() | graderule-graderule-module */
            [__webpack_require__.e("common"), __webpack_require__.e("graderule-graderule-module")]).then(__webpack_require__.bind(null,
            /*! ./graderule/graderule.module */
            "nqxb")).then(function (m) {
              return m.GraderuleModule;
            });
          }
        }, {
          path: 'leave-management',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() | leave-management-leave-management-module */
            [__webpack_require__.e("common"), __webpack_require__.e("leave-management-leave-management-module")]).then(__webpack_require__.bind(null,
            /*! ./leave-management/leave-management.module */
            "pnYl")).then(function (m) {
              return m.LeaveManagementModule;
            });
          }
        }, {
          path: 'roles',
          loadChildren: function loadChildren() {
            return Promise.all(
            /*! import() | roles-roles-module */
            [__webpack_require__.e("common"), __webpack_require__.e("roles-roles-module")]).then(__webpack_require__.bind(null,
            /*! ./roles/roles.module */
            "eDec")).then(function (m) {
              return m.RolesModule;
            });
          }
        }, {
          path: 'update-profile',
          component: _update_profile_update_profile_component__WEBPACK_IMPORTED_MODULE_5__["UpdateProfileComponent"]
        }, {
          path: '',
          redirectTo: 'company',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'branches',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'leave-types',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'employee-wizard',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'job-profile',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'job-category',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'document-types',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'skill-category',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'holiday',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'payment-heads',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'report',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'payroll',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'calendar',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'department',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'graderule',
          pathMatch: 'full'
        }, {
          path: '',
          redirectTo: 'leave-management',
          pathMatch: 'full'
        }]
      }];

      var PagesRoutingModule = function PagesRoutingModule() {
        _classCallCheck2(this, PagesRoutingModule);
      };

      PagesRoutingModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: PagesRoutingModule
      });
      PagesRoutingModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function PagesRoutingModule_Factory(t) {
          return new (t || PagesRoutingModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](PagesRoutingModule, {
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PagesRoutingModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: [],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)]
          }]
        }], null, null);
      })();
      /***/

    }
  }]);
})();
//# sourceMappingURL=app-pages-pages-module-es5.js.map