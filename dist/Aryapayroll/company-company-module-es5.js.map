{"version":3,"sources":["webpack:///src/app/pages/company/company.component.ts","webpack:///src/app/pages/company/company.component.html","webpack:///src/app/pages/company/company-routing.module.ts","webpack:///src/app/pages/company/update-company-list/update-company-list.component.ts","webpack:///src/app/pages/company/update-company-list/update-company-list.component.html","webpack:///src/app/pages/company/company-report/company-report.component.html","webpack:///src/app/pages/company/company-report/company-report.component.ts","webpack:///src/app/pages/company/company.module.ts","webpack:///src/app/pages/company/add-company/add-company.component.ts","webpack:///src/app/pages/company/add-company/add-company.component.html"],"names":["CompanyComponent","selector","templateUrl","styleUrls","route","path","component","canActivate","children","redirectTo","pathMatch","CompanyRoutingModule","forChild","declarations","imports","UpdateCompanyListComponent","api","fb","ngZone","router","util","successMessage","errorMsg","validationMessage","type","message","document","getElementById","removeAttribute","permissionInfo","permissionRoleInfo","setAttribute","snapshotParam","snapshot","paramMap","get","formValidation","existingCompanyDataValues","updateComapnyLogo","search","updateCompanyForm","disable","group","name","required","officialNumber","compose","minLength","maxLength","pattern","email","fax","address","domicile","outGoingMails","taxationNumber","panNumber","bankName","bankAccNum","bankType","err","console","log","getIndividualData","subscribe","data","status","url","logoUrl","existingUrl","listCompanyData","cleanCompanyUpdateForm","cleanFormLevelOne","valid","submitUpdateCompanyData","value","isCompanyLogo","length","uploadCompanyLogo","updateCompanyLogoForm","responseData","successMsg","setTimeout","handleErrors","window","location","replace","errMsg","element","scrollIntoView","event","target","files","reader","FileReader","readAsDataURL","onload","result","file","setValue","companyLogo","error","updateCompanyFormData","onSelectFile","reset","scroll","providers","CompanyReportComponent","datePipe","gradeApi","apiService","notifier","spinner","earningDetails","deductionDetails","headerData","viewData","empData","gradeDetails","disableFilter","excelHeader","minMode","sortMonthTabs","currentPage","excelViewData","requestDatePicker","startDate","endDate","bsConfig","Object","assign","rangeInputFormat","dateInputFormat","getGradeRuleList","response","getAllFilterValues","tableData","header","gradeRuleInfo","earningsInfo","earning","earningString","push","trim","deductionInfo","deduction","deductionString","concat","j","employeeSheetDetails","returnSheetValue","employeeData","srNo","headers","transform","doj","inHand","bonus","incentives","gross","presentDays","absentDays","workingDays","adjustLeave","everyDaySalary","netSalary","payMode","k","indexOf","empDedEarHeader","substr","empDedEarIndex","deductions","map","amount","label","earnings","grade","show","getCompanyReport","hide","notify","sortingCriteria","tabIndex","monthObj","sheetId","sortingId","workbook","worksheet","addWorksheet","showMonthName","showYear","addRow","mergeCells","getCell","companyExpen","month","year","fill","fgColor","argb","font","family","size","bold","alignment","vertical","horizontal","wrapText","border","top","style","left","bottom","right","cellValues","sheetAlgo","cell","eachCell","i","getColumn","width","forEach","d","row","number","monthHeading","monthSubHeader","monthlyData","cash","cheque","bankTransfer","xlsx","writeBuffer","then","blob","Blob","cellValue","basicVertCellVal","Number","remainder","toString","quotient","parseInt","returnCellValue","dateValues","format","page","selectGrade","rangeDatesUpdated","filterData","customNotifierOptions","position","distance","gap","theme","behaviour","autoHide","onClick","onMouseover","showDismissButton","stacking","animations","enabled","preset","speed","easing","offset","shift","overlap","CompanyModule","withConfig","forRoot","AddCompanyComponent","stateOption","imageError","imageFlag","currencyValidationMessage","permissionsInfo","companyDataValidate","populateCountries","companyForm","cleanCompanyForm","submitCompanyData","selectCountryName","selectStateName","sessionStorage","setItem","company","_id","companyLogoForm","countryMsg","stateName","imageErrorMsg","companyFormData","countryName"],"mappings":"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","file":"company-company-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-company',\n  templateUrl: './company.component.html',\n  styleUrls: ['./company.component.scss']\n})\nexport class CompanyComponent implements OnInit {\n\n  constructor(){\n  }\n  ngOnInit(){\n  }\n\n}\n","\n<router-outlet></router-outlet>\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CompanyComponent } from './company.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { AddCompanyComponent } from './add-company/add-company.component';\nimport { UpdateCompanyListComponent } from './update-company-list/update-company-list.component';\nimport { CompanyReportComponent } from './company-report/company-report.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : CompanyComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'add-company',\n        component: AddCompanyComponent,\n      },\n      {\n        path: 'update-company-list/:companyId',\n        component:UpdateCompanyListComponent,\n      },\n      {\n        path: 'company-report',\n        component: CompanyReportComponent,\n      },\n      {\n        path:'',\n        redirectTo :'company-list',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class CompanyRoutingModule { }\n","import { Component, OnInit, NgZone, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CompanyListComponent } from '../../dashboard/company-list/company-list.component';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-company-list',\n  templateUrl: './update-company-list.component.html',\n  styleUrls: ['./update-company-list.component.scss'],\n  providers: [CompanyListComponent],\n})\nexport class UpdateCompanyListComponent implements OnInit,OnDestroy {\n  ngOnDestroy(): void {\n    (document.getElementById('headerCompanyDropDown')as HTMLInputElement).removeAttribute('disabled');\n  }\n\n  updateCompanyForm: any;\n  addCurrencyForm:FormGroup;\n  successMsg: String;\n  successMessage: Boolean = false;\n  errMsg: String;\n  errorMsg: Boolean = false;\n  snapshotParam: String;\n  listCompanyData: any;\n  url: any;\n  updateCompanyLogoForm: any;\n  existingUrl: any;\n  permissionInfo: any;\n  // currency: any;\n  // currencyOptionValue = 'Please Add Currency';\n\n\n  constructor(private route: ActivatedRoute,\n     private api: ApiService,\n     public fb: FormBuilder,\n     private ngZone: NgZone,\n     private router: Router,\n     private util: UtilitiesService,\n    ) { }\n\n  ngOnInit() { //Calling methods for validation\n    this.permissionInfo = this.util.permissionRoleInfo;\n    (document.getElementById('headerCompanyDropDown')as HTMLInputElement).setAttribute('disabled','disabled');\n    this.snapshotParam = this.route.snapshot.paramMap.get(\"companyId\");\n    // this.listCurrency();\n    // this.addCurrencyFormValidation();\n    this.formValidation();\n    this.existingCompanyDataValues();\n    this.updateComapnyLogo();\n    if(this.permissionInfo.search('Edit Company') === -1){\n      this.updateCompanyForm.disable();\n    }\n  }\n\n// List Currency Information\n// listCurrency(){\n//   try{\n//     this.api.listCurrency().subscribe((data) =>{\n//       if(data.status === 'success'){\n//         if(data.data.length == 0){\n//           this.currencyOptionValue = 'Please Add Currency';\n//         } else {\n//           this.currency = data.data;\n//           this.currencyOptionValue = 'Select Currency';\n//         }\n\n//       }\n//     })\n//   } catch(err){}\n//   }\n\n  // addCurrencyFormValidation() {\n  //   try {\n  //     this.addCurrencyForm = this.fb.group({\n  //       name: new FormControl('', Validators.required),\n  //       code: new FormControl('',Validators.required)\n  //     });\n  //   }\n  //   catch (err) {\n  //     console.log(err);\n  //   }\n  // }\n   // Reset PopUp Currency Window\n  //  resetForm(){\n  //   try{\n  //     this.addCurrencyForm.reset();\n  //   } catch(err){\n  //     console.log(err);\n  //   }\n  // }\n\n  // addCurrency(){\n  //   try{\n  //     let cleanCurrencyForm = this.util.cleanFormLevelOne(this.addCurrencyForm);\n  //     this.api.submitCurrency(cleanCurrencyForm.value).subscribe((data) => {\n  //       if(data.status === \"success\"){\n  //         this.successMessage = true ;\n  //         this.errorMsg = false ;\n  //         this.successMsg = data.message;\n  //         setTimeout(() => {\n  //           this.listCurrency();\n  //           this.handleErrors();\n  //           (document.getElementById('dismiss') as HTMLElement).click();\n  //         },1500);\n  //       } else {\n  //         this.errorMsg = true;\n  //         this.successMessage = false;\n  //         this.errMsg = data.message;\n  //         setTimeout(() => {\n  //           this.handleErrors();\n  //         },1500);\n  //       }\n  //     })\n  //   } catch(err){\n  //     console.log(err);\n  //   }\n  // }\n\n  //Method for show currency validdation message\n// currencyValidationMessage = {\n//   'name': [\n//     { type: 'required', message: 'Currency Name is required' },\n//   ],\n//   'code': [\n//     { type: 'required', message: 'Currency Code is required' },\n//   ]\n// }\n  //Method for form validation\n  formValidation() {\n    try {\n      this.updateCompanyForm = this.fb.group({\n        name: new FormControl(\"\",Validators.required),\n        officialNumber: new FormControl(\"\", Validators.compose([\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(15),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n        ])),\n        email: new FormControl(\"\", Validators.compose([\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n        ])),\n        fax: new FormControl(\"\", Validators.compose([\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n          Validators.minLength(10),\n          Validators.maxLength(10),\n        ])),\n\n        address: new FormControl(\"\",Validators.required),\n        domicile: new FormControl(\"\", Validators.pattern('^[a-zA-Z]*$')),\n        outGoingMails: new FormControl(\"\", Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')),\n        taxationNumber: new FormControl(''),\n        panNumber: new FormControl('', Validators.pattern('(^[A-Za-z]{5}[0-9]{4}[A-Za-z]$)')),\n        bankName: new FormControl(''),\n        bankAccNum: new FormControl('',Validators.compose([Validators.maxLength(16),\n          Validators.pattern(/^[0-9]*$/)])),\n        bankType: new FormControl('')\n\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method for set existing value in the form\n  existingCompanyDataValues() {\n    try {\n      this.api.getIndividualData(this.snapshotParam).subscribe(data => {\n        if (data.status === \"success\" || data.status === 200) {\n          console.log(data);\n          this.url = data.data.logoUrl;\n          this.existingUrl = data.data.logoUrl;\n          this.listCompanyData = data.data;\n          this.updateCompanyForm = this.fb.group({\n            name: new FormControl(this.listCompanyData.name,Validators.required),\n            officialNumber: new FormControl(this.listCompanyData.officialNumber, Validators.compose([\n              Validators.required,\n              Validators.minLength(10),\n              Validators.maxLength(15),\n              Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n            ])),\n            email: new FormControl(this.listCompanyData.email, Validators.compose([\n              Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n            ])),\n            fax: new FormControl(this.listCompanyData.fax, Validators.compose([\n              Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n              Validators.minLength(10),\n              Validators.maxLength(10),\n            ])),\n\n            address: new FormControl(this.listCompanyData.address,Validators.required),\n            domicile: new FormControl(this.listCompanyData.domicile, Validators.pattern('^[a-zA-Z]*$')),\n            taxationNumber: new FormControl(this.listCompanyData.taxationNumber),\n            panNumber: new FormControl(this.listCompanyData.panNumber, Validators.pattern('(^[A-Za-z]{5}[0-9]{4}[A-Za-z]$)')),\n            bankName: new FormControl(this.listCompanyData.bankName),\n            bankAccNum: new FormControl(this.listCompanyData.bankAccNum,Validators.compose([Validators.maxLength(16),\n              Validators.pattern(/^[0-9]*$/)])),\n            bankType: new FormControl(this.listCompanyData.bankType)\n          })\n        }\n      })\n\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for Update Data\n  updateCompanyFormData() {\n    try{\n      let cleanCompanyUpdateForm = this.util.cleanFormLevelOne(this.updateCompanyForm);\n      if (this.updateCompanyForm.valid) {\n        this.api.submitUpdateCompanyData(cleanCompanyUpdateForm.value, this.snapshotParam).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n\n            // Upload Company Logo\n          let isCompanyLogo;\n          if((document.getElementById('updateCompanyLogo') as HTMLInputElement).value.length === 0){\n           isCompanyLogo = false;\n          } else {\n            isCompanyLogo = true;\n          }\n          this.api.uploadCompanyLogo(this.updateCompanyLogoForm,'Update CompanyLogo',isCompanyLogo).subscribe((responseData) => {\n            if(responseData.status === 'success'){\n              this.successMessage = true ;\n              this.errorMsg = false ;\n              this.successMsg = data.message;\n\n              setTimeout(() => {\n                this.handleErrors();\n                window.location.replace('/pages/dashboard/company-list');\n              },2000);\n            }\n          })\n          }\n          else if (data.status == \"error\") {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n            },2000);\n          }\n        })\n      }\n    } catch(err){\n      console.log(err);\n    }\n\n  }\n\n  //Onclick scrolling on div and  show message div\n  scroll(element) {\n    element.scrollIntoView();\n  }\n\n\n\n  //Method for show validation message\n  validationMessage = {\n    'name': [\n      { type: 'required', message: 'Name is required' },\n    ],\n    'address': [\n      { type: 'required', message: 'Address is required' }\n    ],\n    'officialNumber': [\n      { type: 'required', message: 'Official Number is required' },\n      { type: 'minlength', message: 'Number too short ' },\n      { type: 'maxlength', message: 'Number is too large' },\n      { type: 'pattern', message: 'Company Number not valid' },\n    ],\n    'fax': [\n      { type: 'minlength', message: 'Fax number too short ' },\n      { type: 'maxlength', message: 'Fax no. is too large' },\n      { type: 'pattern', message: 'Fax Number not valid' },\n    ],\n    'domicile': [\n      { type: 'pattern', message: 'Invalid Domicile' },\n    ],\n    'outGoingMails': [\n      { type: 'pattern', message: 'Invalid Mail' },\n    ],\n    'taxNumber':[\n      { type: 'pattern', message: 'Invalid Taxation No.'},\n    ],\n    'panNo':[\n      { type: 'pattern', message: 'Invalid PAN No.'},\n    ],\n    'bankAccNum':[\n      { type: 'maxlength', message: 'Account No. limit exceeded'},\n      { type: 'pattern', message: 'Invalid Account No.'},\n    ],\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n\n// When User Select the file\nonSelectFile(event) {\n  if (event.target.files && event.target.files[0]) {\n    var reader = new FileReader();\n\n    reader.readAsDataURL(event.target.files[0]); // read file as data url\n\n    reader.onload = (event: any) => { // called once readAsDataURL is completed\n      this.url = event.target.result;\n    }\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0];\n      this.updateCompanyLogoForm.get('companyLogo').setValue(file);\n    }\n  }\n}\n\n// update Company Logo\nupdateComapnyLogo(){\n  try{\n    this.updateCompanyLogoForm = this.fb.group({\n      companyLogo: ['']\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\nreset(){\n  try {\n    this.url = this.existingUrl;\n  } catch (error) {\n    console.log(error);\n\n  }\n}\n\n}\n","<div class=\"card card-user\">\n  <div class=\"card-header\" #target>\n    <h2 class=\"card-title\" style=\"text-align: center\">Update Company Details</h2>\n  </div>\n\n\n  <div class=\"col-sm-offset-2\">\n    <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n      <strong>{{ errMsg }}</strong>\n    </p>\n  </div>\n\n  <div class=\"col-sm-offset-2\">\n    <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n      <strong>{{ successMsg }}</strong>\n    </p>\n  </div>\n  <div class=\"card-body\">\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"updateCompanyForm\" (ngSubmit)=\"updateCompanyFormData()\"\n      novalidate>\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Name (to appear on reports):&nbsp;<span\n              style=\"color: darkred\">*</span></b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"text\" placeholder=\"Enter Company Name\" formControlName=\"name\">\n          <div *ngFor=\"let validation of validationMessage.name\">\n            <div style=\"color: red;margin-left: 14px;\"\n              *ngIf=\"updateCompanyForm.get('name').hasError(validation.type) && (updateCompanyForm.get('name').dirty || updateCompanyForm.get('name').touched)\">\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Address:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n        <div class=\"col-sm-offset-2\">\n          <textarea class=\"form-control\" id=\"inputAddress\" placeholder=\"Address\" formControlName=\"address\"></textarea>\n          <div *ngFor=\"let validation of validationMessage.address\">\n            <div style=\"color: red;margin-left: 14px;\"\n              *ngIf=\"updateCompanyForm.get('address').hasError(validation.type) && (updateCompanyForm.get('address').dirty || updateCompanyForm.get('address').touched)\"\n              >\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div class=\"form-group col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Domicile:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" id=\"inputDomiclie\" placeholder=\"Enter Domicile\"\n                formControlName=\"domicile\">\n              <div *ngFor=\"let validation of validationMessage.domicile\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"updateCompanyForm.get('domicile').hasError(validation.type) && (updateCompanyForm.get('domicile').dirty || updateCompanyForm.get('domicile').touched)\"\n                  >\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-group col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Bank Name:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" placeholder=\"Enter Bank Name:\" formControlName=\"bankName\">\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div class=\"form-group col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Account Type:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" placeholder=\"Enter Account Type:\" formControlName=\"bankType\">\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-group col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Account Number:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" placeholder=\"Enter Account Number:\" formControlName=\"bankAccNum\">\n              <div *ngFor=\"let validation of validationMessage.bankAccNum\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"updateCompanyForm.get('bankAccNum').hasError(validation.type) && (updateCompanyForm.get('bankAccNum').dirty || updateCompanyForm.get('bankAccNum').touched)\"\n                  >\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n      <div class=\"form-row\">\n\n        <div class=\"form-group col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Official Company Number:&nbsp;<span\n                  style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" id=\"inputCompanyNo\" placeholder=\"Enter Official Company Number\"\n                formControlName=\"officialNumber\">\n              <div *ngFor=\"let validation of validationMessage.officialNumber\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"updateCompanyForm.get('officialNumber').hasError(validation.type) && (updateCompanyForm.get('officialNumber').dirty || updateCompanyForm.get('officialNumber').touched)\"\n                 >\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-group col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Fax Number:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" id=\"inputFax\" placeholder=\"Enter Fax Number:\" formControlName=\"fax\">\n              <div *ngFor=\"let validation of validationMessage.fax\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"updateCompanyForm.get('fax').hasError(validation.type) && (updateCompanyForm.get('fax').dirty || updateCompanyForm.get('fax').touched)\"\n                  >\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Taxation No:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" id=\"inputTaxationno.\" placeholder=\"Enter Taxation Number\"\n                formControlName=\"taxationNumber\">\n              <div *ngFor=\"let validation of validationMessage.taxNumber\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"updateCompanyForm.get('taxationNumber').hasError(validation.type) && (updateCompanyForm.get('taxationNumber').dirty || updateCompanyForm.get('taxationNumber').touched)\"\n                  style=\"color: red;margin-left: 14px;\">\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n              <label class=\"col-sm-6 control-label\"><b>PAN (Permanent Account Number):</b></label>\n              <div class=\"col-sm-offset-2\">\n                <input class=\"form-control\" onkeyup=\"this.value = this.value.toUpperCase();\" type=\"text\" id=\"inputPanno.\" placeholder=\"Enter PAN Number\"\n                  formControlName=\"panNumber\">\n                <div *ngFor=\"let validation of validationMessage.panNo\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                    *ngIf=\"updateCompanyForm.get('panNumber').hasError(validation.type) && (updateCompanyForm.get('panNumber').dirty || updateCompanyForm.get('panNumber').touched)\"\n                    style=\"color: red;margin-left: 14px;\">\n                    {{ validation.message }}\n                  </div>\n                </div>\n              </div>\n          </div>\n        </div>\n     </div>\n     <div class=\"row\">\n      <div class=\"col-lg-6 col-md-6 col-sm-6\">\n    <div class=\"row\">\n     <div class=\"col-lg-10 col-md-6 col-sm-6\">\n       <div class=\"form-group\">\n\n          <label class=\"control-label\"><b>Company Logo:</b></label><br>\n           <img [src]=\"url\" height=\"70\">\n           <input type=\"file\" class=\"form-control-file border\" id=\"updateCompanyLogo\" (change)=\"onSelectFile($event)\" accept=\"image/*\">\n         </div>\n\n     </div>\n     <div class=\"col-lg-2 col-md-6 col-sm-6\">\n       <div class=\"delete-button\">\n       <button class=\"btn btn-danger\" type=\"button\" (click)=\"reset()\" ><i class=\"fa fa-trash\"></i>&nbsp; Reset</button>\n     </div>\n     </div>\n\n    </div>\n   </div>\n   <div class=\"col-lg-6 col-md-6 col-sm-6\"></div>\n   </div>\n\n\n      <!-- <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>GST No:</b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"text\" id=\"inputGstno.\" placeholder=\"Enter GSTNo\"\n            formControlName=\"gstNumber\">\n          <div *ngFor=\"let validation of validationMessage.gstNumber\">\n            <div style=\"color: red;margin-left: 14px;\"\n              *ngIf=\"updateCompanyForm.get('gstNumber').hasError(validation.type) && (updateCompanyForm.get('gstNumber').dirty || updateCompanyForm.get('gstNumber').touched)\"\n              >\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n      </div> -->\n\n      <!-- <div class=\"form-row\">\n        <div class=\"form-group col-md-6\">\n          <label class=\"col-sm-4 control-label\"><b>Home Currency:</b></label>\n          <select class=\"dropdown dropdown-toggle form-control\" Name=\"HomeCurrency\" formControlName=\"currency\">\n            <option class='dropdown-item' ng-selected=\"true\" value=\"\" disabled selected>----------{{currencyOptionValue}}----------</option>\n            <option [ngValue]=\"homeCurrency.code\" *ngFor=\"let homeCurrency of currency\"> {{ homeCurrency.code }}</option>\n          </select>\n        </div>\n          <div class=\"form-group col-md-4\" style=\"margin-top: 13px;\">\n              <button type=\"button\" style=\"float: left;\" class=\"btn btn-primary\" data-toggle=\"modal\" (click)=resetForm() data-target=\"#myModal\">\n               <i class=\"fa fa-plus-square\"></i> Add Currency\n              </button>\n              <button type=\"button\" class=\"btn btn-danger\" style=\"float: left;\" >\n                  <i class=\"fa fa-trash\"></i> Delete Currency\n                 </button>\n                </div>\n        </div> -->\n        <!-- <div class=\"modal\" id=\"myModal\">\n          <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n\n              <div class=\"modal-header\">\n                <h4 class=\"modal-title\">Add Currency</h4>\n              </div>\n              <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                  <strong>{{ errMsg }}</strong>\n                </p>\n              </div>\n\n              <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                  <strong>{{ successMsg }}</strong>\n                </p>\n              </div>\n              <div class=\"modal-body\">\n                <form role=\"form\" [formGroup]=\"addCurrencyForm\" (ngSubmit)=\"addCurrency()\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Currency Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <input type=\"text\" formControlName=\"name\" placeholder=\"Enter Currency Name\" class=\"form-control\" />\n                    <div *ngFor=\"let validation of currencyValidationMessage.name\">\n                      <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"addCurrencyForm.get('name').hasError(validation.type) && (addCurrencyForm.get('name').dirty || addCurrencyForm.get('name').touched)\"\n                        >\n                        {{ validation.message }}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Currency Code:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <input type=\"text\" formControlName=\"code\" placeholder=\"Enter Currency Code\" class=\"form-control\" />\n                    <div *ngFor=\"let validation of currencyValidationMessage.code\">\n                      <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"addCurrencyForm.get('code').hasError(validation.type) && (addCurrencyForm.get('code').dirty || addCurrencyForm.get('code').touched)\"\n                       >\n                        {{ validation.message }}\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"form-group\">\n                      <button type=\"button\" class=\"btn btn-danger\" id=\"dismiss\" style=\"float:right;\" data-dismiss=\"modal\">Close</button>\n                      <button type=\"submit\" class=\"btn btn-success\" style=\"float:right;\" [disabled]='addCurrencyForm.invalid'>Submit</button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n       </div> -->\n\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" class=\"btn btn-success\" [disabled]='updateCompanyForm.invalid || permissionInfo.search(\"Edit Company\") === -1' (click)=\"scroll(target)\">Update Company</button>\n          <button type=\"button\" class=\"btn btn-danger\"  routerLink=\"/pages/dashboard/company-list\" >Cancel</button>\n\n\n        </div>\n      </div>\n\n    </form>\n  </div>\n</div>","<notifier-container></notifier-container>\n<ngx-spinner bdColor=\"rgba(51,51,51,0.8)\" size=\"large\" color=\"#fff\" type=\"square-jelly-box\">\n    <p style=\"font-size: 20px; color: white\">Loading...</p>\n</ngx-spinner>\n<div class=\"card card-user\">\n    <div class=\"card-header\">\n        <h2 class=\"card-title text-center\">Company Report</h2>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"form-row\">\n            <div class=\"col-lg-3 col-md-3 col-sm-12\">\n                <div class=\"form-group\">\n                    <select class=\"dropdown dropdown-toggle form-control\" id=\"gradeOptions\" (change)=\"selectGrade()\">\n          <option class=\"dropdown-item\" ng-selected=\"true\" value=\"\" selected>Select Grade</option>\n          <option class=\"dropdown-item\" *ngFor='let list of gradeDetails'  value=\"{{list._id}}\">{{ list.title }}</option>\n       </select>\n                </div>\n            </div>\n            <div class=\"col-lg-3 col-md-3 col-sm-12\">\n                <div class=\"form-group\">\n\n                    <input type=\"text\" class=\"form-control\" [bsConfig]=\"bsConfig\" placeholder=\"Select Months\" id=\"rangeDate\" bsDaterangepicker (bsValueChange)=\"rangeDatesUpdated($event)\">\n\n                </div>\n            </div>\n            <div class=\"col-lg-6 col-md-6 col-sm-12\">\n                <div class=\"form-group right-buttongroup\">\n                    <button class=\"btn btn-primary btn-margin\" [disabled]=\"disableFilter\" (click)=\"filterData()\"><i  class=\"fa fa-filter\"></i>Filter</button>\n                    <button class=\"btn btn-danger btn-margin\" (click)=\"reset()\"><i  class=\"fa fa-trash\"></i>Reset</button>\n                    <button *ngIf=\"viewData.length !== 0\" style=\"float: right;\" class=\"btn btn-success btn-round btn-margin\" (click)=\"generateExcelSheet()\"><i class=\"fas fa-download\"></i>Sheet</button>\n                </div>\n            </div>\n        </div>\n\n\n\n\n        <div *ngIf=\"viewData.length === 0\">\n            <p style=\"font-size: 16px;\" class=\"text-center\">Please fill sufficient data for the view of company reports</p>\n        </div>\n        <ul class=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\" #target>\n            <li class=\"nav-item\" *ngFor=\"let monthTab of sortMonthTabs, let i = index ;\">\n                <a class=\"nav-link\" [ngClass]=\" i === 0 ? 'active': ''\" data-toggle=\"tab\" [attr.href]=\" '#' + monthTab.showMonthName + monthTab.showYear \" role=\"tab\" [attr.aria-controls]=\"monthTab.showMonthName\" (click)=\"changeTabData(monthTab.sortingId)\">{{  monthTab.showMonthName }} - {{ monthTab.showYear }}</a>\n            </li>\n        </ul>\n\n\n        <div class=\"tab-content\">\n            <div class=\"tab-pane\" *ngFor=\"let monthTab of sortMonthTabs, let i = index ;\" id=\"{{ monthTab.showMonthName }}{{ monthTab.showYear }}\" role=\"tabpanel\" [ngClass]=\" i === 0 ? 'active': ''\">\n                <div *ngIf=\"viewData.length !== 0\">\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead class=\"text-primary\">\n                                <th class=\"text-center\" *ngFor=\"let list of headerData, let i = index;\" [ngClass]=\"i === 0  ? 'sticky-col first-col': i === 1 ? 'sticky-col second-col' : '' \">{{ list }}</th>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let emp of viewData | paginate: { itemsPerPage: 5, currentPage: currentPage }\">\n                                    <td *ngFor=\"let empDet of emp, let  i = index; \" class=\"text-center\" [ngClass]=\"i === 0  ? 'sticky-col first-col': i === 1 ? 'sticky-col second-col' : '' \">{{ empDet }}</td>\n                                </tr>\n\n                            </tbody>\n                        </table>\n\n                    </div>\n                    <div class=\"pagination-outer\">\n                        <pagination-controls (pageChange)=\"onPageChange($event)\" previousLabel=\"\" nextLabel=\"\"></pagination-controls>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>","import { Component, OnInit } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { ApiService } from 'src/app/services/api.service';\nimport { GraderuleApiService } from '../../graderule/graderule-service/graderule-api.service';\nimport { Workbook } from 'exceljs';\nimport * as fs from 'file-saver';\nimport { NotifierService } from 'angular-notifier';\nimport moment from 'moment';\nimport { BsDatepickerConfig, BsDatepickerViewMode } from 'ngx-bootstrap/datepicker';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-company-report',\n  templateUrl: './company-report.component.html',\n  styleUrls: ['./company-report.component.scss']\n})\nexport class CompanyReportComponent implements OnInit {\n\n  earningDetails = [];\n  deductionDetails = [];\n  headerData = [];\n  viewData = [];\n  empData = [];\n  gradeDetails = [];\n  tableData: any;\n  disableFilter = true;\n  cellValues: string;\n  excelHeader = [];\n  minMode: BsDatepickerViewMode = 'month'; // change for month:year\n  sortMonthTabs = [];\n\n  currentPage = 1;\n  excelViewData = [];\n\n  bsConfig: Partial<BsDatepickerConfig>;\n  requestDatePicker = {\n    startDate: '',\n    endDate: ''\n  }\n\n  constructor(\n    private datePipe: DatePipe,\n    public gradeApi: GraderuleApiService,\n    public apiService: ApiService,\n    public notifier: NotifierService,\n    private spinner: NgxSpinnerService,\n\n\n\n  ) {\n    this.bsConfig = Object.assign({}, {\n      minMode : this.minMode,\n      rangeInputFormat: 'MM-YYYY',\n      dateInputFormat: 'MM-YYYY'\n    });\n  }\n\n  ngOnInit() {\n    this.gradeApi.getGradeRuleList().subscribe(response => {\n      if (response.status === 'success') {\n        this.gradeDetails = response.data;\n      }\n    });\n    this.getAllFilterValues();\n  }\n\n  getCompanyReport(tableData) {\n    try {\n      this.headerData = [];\n      const header = [\n        'Sr No.',\n        'Name',\n        'Date of Joining',\n        'In Hand(P/M)',\n        'Bonus',\n        'Incentives',\n        'Gross',\n        'PresentDays',\n        'Absent Days',\n        'Working Days',\n        'Adjust Leave',\n        'Per day Salary',\n        'Net Salary',\n        'Pay Mode'\n      ];\n\n\n      // FOR EARNING INFO\n      if (tableData.gradeRuleInfo.earningsInfo.length !== 0) {\n        this.earningDetails = [];\n        for (let earning of tableData.gradeRuleInfo.earningsInfo) {\n          if (earning.type === 'Percent') {\n            let earningString = `${earning.name}(${earning.value}%)`;\n            this.earningDetails.push(earningString);\n          }\n\n          if (earning.type === 'Fixed') {\n            let earningString = `${earning.name}(₹ ${earning.value})`;\n            this.earningDetails.push(earningString);\n          }\n\n          if ((earning.type).trim().length === 0) {\n            let earningString = `${earning.name}`;\n            this.earningDetails.push(earningString);\n          }\n\n        }\n      }\n\n      // FOR DEDUCTION INFO\n      if (tableData.gradeRuleInfo.deductionInfo.length !== 0) {\n        this.deductionDetails = [];\n        for (let deduction of tableData.gradeRuleInfo.deductionInfo) {\n          if (deduction.type === 'Percent') {\n            let deductionString = `${deduction.name}(${deduction.value}%)`;\n            this.deductionDetails.push(deductionString);\n          }\n\n          if (deduction.type === 'Fixed') {\n            let deductionString = `${deduction.name}(₹ ${deduction.value})`;\n            this.deductionDetails.push(deductionString);\n          }\n          if ((deduction.type).trim().length === 0) {\n            let deductionString = `${deduction.name}`;\n            this.deductionDetails.push(deductionString);\n          }\n        }\n      }\n      // FOR MANAGE HEADER DATA\n      this.headerData = header.concat(this.earningDetails.concat(this.deductionDetails));\n      this.viewData = [];\n      for (let j = 0; j < tableData.employeeSheetDetails.length; j++) {\n        this.returnSheetValue(tableData.employeeSheetDetails[j], j + 1, this.headerData, 'companyReport');\n      }\n     } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // FOR MANAGE TABLE DATA ACCORDING TO HEADER DATA\n  returnSheetValue(employeeData, srNo, headers, type) {\n    let viewData = [\n      srNo,\n      employeeData.name,\n      this.datePipe.transform(employeeData.doj, 'dd-MM-yyyy'),\n      employeeData.inHand,\n      employeeData.bonus,\n      employeeData.incentives,\n      employeeData.gross,\n      employeeData.presentDays,\n      employeeData.absentDays,\n      employeeData.workingDays,\n      employeeData.adjustLeave,\n      employeeData.everyDaySalary,\n      employeeData.netSalary,\n      employeeData.payMode,\n\n    ];\n    for (let k = headers.indexOf(\"Pay Mode\") + 1; k < headers.length; k++) {\n\n      let empDedEarHeader = headers[k].substr(0, headers[k].indexOf('(')).trim();\n      empDedEarHeader.trim().length === 0 ? empDedEarHeader = headers[k].trim() : '';\n\n      let empDedEarIndex = employeeData.deductions.map((amount) => {\n        return (amount.label).trim();\n      }).indexOf(empDedEarHeader);\n\n      if (empDedEarIndex === -1) {\n        empDedEarIndex = employeeData.earnings.map((amount) => {\n          return (amount.label).trim();\n        }).indexOf(empDedEarHeader);\n\n        viewData.push(employeeData.earnings[empDedEarIndex]['amt'])\n      } else {\n        viewData.push(employeeData.deductions[empDedEarIndex]['amt'])\n      }\n    }\n    return type === 'excelReport' ? this.excelViewData.push(viewData) : this.viewData.push(viewData);\n  }\n\n  // CHECK ALL FILTER BLANK OR NOT\n  getAllFilterValues() {\n    try {\n      let grade = (document.getElementById('gradeOptions') as HTMLInputElement).value;\n      if (grade !== '' && this.requestDatePicker.startDate.trim().length > 0  && this.requestDatePicker.endDate.trim().length > 0) {\n        this.disableFilter = false;\n      } else {\n        this.disableFilter = true;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // CHECK DROPDOWN VALUES\n  selectGrade() {\n    try {\n      this.getAllFilterValues();\n    } catch (error) {\n      console.log(error);\n\n    }\n  }\n\n\n  // FOR FILTER DATA AND GET COMPANY REPORT\n  filterData() {\n    try {\n      this.spinner.show();\n      let grade = (document.getElementById('gradeOptions') as HTMLInputElement).value;\n      this.apiService.getCompanyReport(this.requestDatePicker.startDate, this.requestDatePicker.endDate, grade).subscribe(response => { \n      this.spinner.hide();\n          if (response.status === 'success') {\n          if(response.data.length === 0){\n            this.notifier.notify('info', 'Company Report Not Available')\n          }\n          if(response.data.length !== 0){\n            this.sortMonthTabs = response.sortingCriteria;\n            this.tableData = response.data;\n\n            let tabIndex = this.tableData.map((monthObj) => {\n              return monthObj.sheetId;\n            }).indexOf(this.sortMonthTabs[0].sortingId);\n\n          this.getCompanyReport(this.tableData[tabIndex]);\n          }\n        } else if (response.status === 'error') {\n          this.tableData = [];\n          this.notifier.notify(response.status, response.message);\n        }\n      }, error => {\n      this.spinner.hide();\n        console.log(error);\n      });\n    } catch (error) {\n      this.spinner.hide();\n      console.log(error);\n    }\n  }\n\n  // FOR RESET FILTER VALUES\n  reset() {\n    try {\n      (document.getElementById('gradeOptions') as HTMLInputElement).value = '';\n      (document.getElementById('rangeDate') as HTMLInputElement).value = '';\n      this.disableFilter  = true;\n      this.headerData = [];\n      this.excelHeader = [];\n      this.viewData = [];\n      this.sortMonthTabs = [];\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n// FOR GENERATE COMPANY REPORT SHEET\n  async generateExcelSheet() {\n    try {\n      const workbook = new Workbook();\n      for(let tableData of this.tableData) { \n        \n      const worksheet = workbook.addWorksheet(`${tableData.showMonthName} ${tableData.showYear}`);\n      worksheet.addRow([]);\n      // FOR MANAGE COMPANY NAME\n      worksheet.mergeCells('L2:R2');\n      worksheet.getCell('L2').value = `${tableData.companyExpen.name}, ${tableData.month} ${tableData.year}`;\n      worksheet.getCell('L2').fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '7B7B7B' }, };\n      worksheet.getCell('L2').font = { name: 'Trebuchet MS', family: 4, size: 20, bold: true, };\n      worksheet.getCell('L2').alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n\n      worksheet.addRow([]);\n      worksheet.addRow([]);\n      const header = [\n        'Sr No.',\n        'Name',\n        'Date of Joining',\n        'In Hand(P/M)',\n        'Bonus',\n        'Incentives',\n        'Gross',\n        'PresentDays',\n        'Absent Days',\n        'Working Days',\n        'Adjust Leave',\n        'Per day Salary',\n        'Net Salary',\n        'Pay Mode'\n\n      ];\n\n      worksheet.mergeCells('A4:M4');\n      worksheet.getCell('A4:M4').value = 'Employee Details';\n      worksheet.getCell('A4:M4').fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE1EFDA' } };\n      worksheet.getCell('A4:M4').alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n      worksheet.getCell('A4:M4').font = { name: 'Arial', family: 4, size: 12, bold: true, };\n      worksheet.getCell('A4:M4').border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n\n      const  earnings = [];\n      if (tableData.gradeRuleInfo.earningsInfo.length !== 0) {\n        this.cellValues = `${this.sheetAlgo(14 + tableData.gradeRuleInfo.earningsInfo.length)}4`;\n        worksheet.mergeCells(`N4:${this.cellValues}`);\n        worksheet.getCell('N4').value = 'Total Earnings';\n        worksheet.getCell('N4').fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE1EFDA' } };\n        worksheet.getCell('N4').alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n        worksheet.getCell('N4').font = { name: 'Arial', family: 4, size: 12, bold: true, };\n        worksheet.getCell('N4').border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        for (let earning of tableData.gradeRuleInfo.earningsInfo) {\n          if (earning.type === 'Percent') {\n            let earningString = `${earning.name}(${earning.value}%)`;\n            earnings.push(earningString);\n          }\n\n          if (earning.type === 'Fixed') {\n            let earningString = `${earning.name}(₹ ${earning.value})`;\n            earnings.push(earningString);\n          }\n\n          if ((earning.type).trim().length === 0) {\n            let earningString = `${earning.name}`;\n            earnings.push(earningString);\n          }\n        }\n      }\n      const deductions = [];\n      if (tableData.gradeRuleInfo.deductionInfo.length !== 0) {\n        let cell = `${this.sheetAlgo((14 + tableData.gradeRuleInfo.earningsInfo.length + 1))}4:${this.sheetAlgo((14 + tableData.gradeRuleInfo.earningsInfo.length + tableData.gradeRuleInfo.deductionInfo.length))}4`;\n        worksheet.mergeCells(cell);\n        worksheet.getCell(`${this.sheetAlgo(14 + tableData.gradeRuleInfo.earningsInfo.length + 1)}4`).value = 'Total Deduction';\n        worksheet.getCell(`${this.sheetAlgo(14 + tableData.gradeRuleInfo.earningsInfo.length + 1)}4`).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE1EFDA' } };\n        worksheet.getCell(`${this.sheetAlgo(14 + tableData.gradeRuleInfo.earningsInfo.length + 1)}4`).alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n        worksheet.getCell(`${this.sheetAlgo(14 + tableData.gradeRuleInfo.earningsInfo.length + 1)}4`).font = { name: 'Arial', family: 4, size: 12, bold: true, };\n        worksheet.getCell(`${this.sheetAlgo(14 + tableData.gradeRuleInfo.earningsInfo.length + 1)}4`).border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        for (let deduction of tableData.gradeRuleInfo.deductionInfo) {\n          if (deduction.type === 'Percent') {\n            let deductionString = `${deduction.name}(${deduction.value}%)`;\n           deductions.push(deductionString);\n          }\n\n          if (deduction.type === 'Fixed') {\n            let deductionString = `${deduction.name}(₹ ${deduction.value} )`;\n           deductions.push(deductionString);\n          }\n\n          if ((deduction.type).trim().length === 0) {\n            let deductionString = `${deduction.name}`;\n           deductions.push(deductionString);\n          }\n        }\n      }\n\n\n       this.excelHeader = header.concat(earnings.concat(deductions));\n\n      worksheet.addRow(this.excelHeader).eachCell(cell => {\n        cell.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: { argb: 'FFE1EFDA' },\n        }\n        cell.font = { name: 'Arial', family: 4, size: 10, bold: true, };\n        cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n      });\n\n      for (let i = 0; i < this.excelHeader.length; i++) {\n        worksheet.getColumn(i + 1).width = 20;\n      }\n\n      this.excelViewData = [];\n      for (let j = 0; j < tableData.employeeSheetDetails.length; j++) {\n        this.returnSheetValue(tableData.employeeSheetDetails[j], j + 1, this.excelHeader, 'excelReport');\n\n      }\n\n      this.excelViewData.forEach(d => {\n        const row = worksheet.addRow(d);\n        row.eachCell((cell, number) => {\n          cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n          cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n        });\n      });\n\n      worksheet.addRow([]);\n      worksheet.addRow([]);\n\n\n      const monthHeading = ['', '', 'Monthly Paid', ''];\n      worksheet.addRow(monthHeading).eachCell(cell => {\n        cell.font = { name: 'Arial', family: 4, size: 14, bold: true, };\n        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFDF2CC' } };\n        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n      });\n\n      const monthSubHeader = ['Company Name', 'Cash', 'Cheque', 'Account Transfer'];\n      worksheet.addRow(monthSubHeader).eachCell(cell => {\n        cell.font = { name: 'Arial', family: 4, size: 10, bold: true, };\n        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE1EFDA' } };\n        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n      });\n\n      const monthlyData = [[tableData.companyExpen.name, tableData.companyExpen.cash, tableData.companyExpen.cheque, tableData.companyExpen.bankTransfer]]\n\n      monthlyData.forEach(d => {\n        const row = worksheet.addRow(d);\n        row.eachCell((cell, number) => {\n          cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n          cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };\n        });\n      });\n\n    }\n\n      // Generate Excel sheet\n      workbook.xlsx.writeBuffer().then((data) => {\n        const blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n        fs.saveAs(blob, `${this.tableData[0].companyExpen.name}-report.xlsx`);\n        this.excelHeader = [];\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  sheetAlgo(cellValue) {\n\n    let basicVertCellVal = {\n      1: 'A', 2: 'B', 3: 'C', 4: 'D', 5: 'E', 6: 'F', 7: 'G', 8: 'H', 9: 'I', 10: 'J',\n      11: 'K', 12: 'L', 13: 'M', 14: 'N', 15: 'O', 16: 'P', 17: 'Q', 18: 'R', 19: 'S', 20: 'T',\n      21: 'U', 22: 'V', 23: 'W', 24: 'X', 25: 'Y', 26: 'Z',\n    }\n    let value = Number(cellValue);\n\n    if (value > 26) {\n      let remainder = (value % 26).toString();\n      let quotient = parseInt((value / 26).toString());\n      let returnCellValue = remainder === '0' ? `${basicVertCellVal[Number(quotient) - 1]}Z` : `${basicVertCellVal[quotient]}${basicVertCellVal[remainder]}`;\n\n      return returnCellValue;\n    } else {\n      return `${basicVertCellVal[cellValue]}`;\n    }\n  }\n\n\n// ON DATE SELECT CHECK VALIDATION\n  rangeDatesUpdated(dateValues){\n    try {\n\n      if (dateValues === null || dateValues === 'Invalid Date' || dateValues === [null] || dateValues[0] === null || dateValues[1] === null || dateValues.length < 2) {\n        this.requestDatePicker = {\n          startDate: '',\n          endDate: '',\n        }\n      } else{\n        this.requestDatePicker = {\n          startDate: moment(dateValues[0]).format('YYYY-MM'),\n          endDate: moment(dateValues[1]).format('YYYY-MM'),\n        }\n      }\n     \n      this.getAllFilterValues();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\n  // FOR FILTER MONTH DATA\n  changeTabData(sortingId){\n    try { \n      let tabIndex = this.tableData.map((monthObj) => {\n        return monthObj.sheetId\n      }).indexOf(sortingId);\n      \n      this.getCompanyReport(this.tableData[tabIndex]);\n      this.currentPage = 1;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n   // on page change events\n   onPageChange(page: number) {\n    this.currentPage = page;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AddCompanyComponent } from './add-company/add-company.component';\nimport { CompanyRoutingModule } from './company-routing.module';\nimport { CompanyComponent } from './company.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UpdateCompanyListComponent } from './update-company-list/update-company-list.component';\nimport { CompanyReportComponent } from './company-report/company-report.component';\nimport { NotifierModule, NotifierOptions } from 'angular-notifier';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nconst customNotifierOptions: NotifierOptions = {\n  position: {\n    horizontal: {\n      position: 'right',\n      distance: 12\n    },\n    vertical: {\n      position: 'top',\n      distance: 12,\n      gap: 10\n    }\n  },\n  theme: 'material',\n  behaviour: {\n    autoHide: 5000,\n    onClick: 'hide',\n    onMouseover: 'pauseAutoHide',\n    showDismissButton: true,\n    stacking: 4\n  },\n  animations: {\n    enabled: true,\n    show: {\n      preset: 'slide',\n      speed: 300,\n      easing: 'ease'\n    },\n    hide: {\n      preset: 'fade',\n      speed: 300,\n      easing: 'ease',\n      offset: 50\n    },\n    shift: {\n      speed: 300,\n      easing: 'ease'\n    },\n    overlap: 150\n  }\n};\n@NgModule({\n  declarations: [\n    AddCompanyComponent,\n    CompanyComponent,\n     UpdateCompanyListComponent,\n     CompanyReportComponent\n    ],\n  imports: [\n    CommonModule,\n    CompanyRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    NgxPaginationModule,\n    NotifierModule.withConfig(customNotifierOptions),\n    BsDatepickerModule.forRoot(),\n    NgxSpinnerModule\n\n  ]\n})\nexport class CompanyModule { }\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport { Router } from '@angular/router';\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\ndeclare var populateCountries: any ;\n\n@Component({\n  selector: 'app-add-company',\n  templateUrl: './add-company.component.html',\n  styleUrls: ['./add-company.component.scss']\n})\nexport class AddCompanyComponent implements OnInit {\n\n  companyForm: FormGroup;\n  addCurrencyForm:FormGroup;\n  companyLogoForm: FormGroup\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  countryMsg: any;\n  stateOption = false;\n  selectCountryName: any;\n  selectStateName: any;\n  url: any;\n  imageError = 'Image Size should be less than 2MB';\n  imageFlag = false;\n  imageErrorMsg: any;\n  permissionsInfo: any;\n\n  // currency: any;\n  // currencyOptionValue = 'Please Add Currency';\n\n  constructor(private api: ApiService, public fb: FormBuilder, private ngZone: NgZone,\n     private router: Router,\n     private util: UtilitiesService) {\n  }\n\n  ngOnInit() {\n    this.permissionsInfo = this.util.permissionRoleInfo;\n    this.companyDataValidate();\n    populateCountries(\"country\", \"state\");\n    this.uploadCompanyLogo();\n    if(this.permissionsInfo.search('Create Company') === -1){\n      this.companyForm.disable();\n    }\n    // this.addCurrencyFormValidation();\n    // this.listCurrency();\n  }\n  // addCurrencyFormValidation() {\n  //   try {\n  //     this.addCurrencyForm = this.fb.group({\n  //       name: new FormControl('', Validators.required),\n  //       code: new FormControl('',Validators.required)\n  //     });\n  //   }\n  //   catch (err) {\n  //     console.log(err);\n  //   }\n  // }\n   // Reset PopUp Currency Window\n  //  resetForm(){\n  //   try{\n  //     this.addCurrencyForm.reset();\n  //   } catch(err){\n  //     console.log(err);\n  //   }\n  // }\n\n  // Add Currency Value\n  // addCurrency(){\n  //   try{\n  //     let cleanCurrencyForm = this.util.cleanFormLevelOne(this.addCurrencyForm);\n  //     this.api.submitCurrency(cleanCurrencyForm.value).subscribe((data) => {\n  //       if(data.status === \"success\"){\n  //         this.successMessage = true ;\n  //         this.errorMsg = false ;\n  //         this.successMsg = data.message;\n  //         setTimeout(() => {\n  //           // this.listCurrency();\n  //           this.handleErrors();\n  //           (document.getElementById('dismiss') as HTMLElement).click();\n  //         },1500);\n  //       } else {\n  //         this.errorMsg = true;\n  //         this.successMessage = false;\n  //         this.errMsg = data.message;\n  //         setTimeout(() => {\n  //           this.handleErrors();\n  //         },1500);\n  //       }\n  //     })\n  //   } catch(err){\n  //     console.log(err);\n  //   }\n  // }\n\n//Method for show currency validdation message\ncurrencyValidationMessage = {\n  'name': [\n    { type: 'required', message: 'Currency Name is required' },\n  ],\n  'code': [\n    { type: 'required', message: 'Currency Code is required' },\n  ]\n}\n\n// List Currency Information\n// listCurrency(){\n// try{\n//   this.api.listCurrency().subscribe((data) =>{\n//     if(data.status === 'success'){\n//       if(data.data.length == 0){\n//         this.currencyOptionValue = 'Please Add Currency';\n//       } else {\n//         this.currency = data.data;\n//         this.currencyOptionValue = 'Select Currency';\n//       }\n\n//     }\n//   })\n// } catch(err){\n//   console.log(err);\n// }\n// }\n\n\n  //Method for Validation\n\n  companyDataValidate() {\n    try {\n      this.companyForm = this.fb.group({\n        name: new FormControl('', Validators.compose([\n          Validators.required,\n        ])),\n        officialNumber: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(15),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n        ])),\n        email: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n        ])),\n        fax: new FormControl('', Validators.compose([\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n          Validators.minLength(10),\n          Validators.maxLength(10),\n        ])),\n        address: new FormControl('', Validators.required),\n        domicile: new FormControl('', Validators.pattern('^[a-zA-Z]*$')),\n        outGoingMails: new FormControl('', Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')),\n        taxationNumber: new FormControl(''),\n        panNumber: new FormControl('', Validators.pattern('(^[A-Za-z]{5}[0-9]{4}[A-Za-z]$)')),\n        bankName: new FormControl(''),\n        bankAccNum: new FormControl('',Validators.compose([Validators.maxLength(16),\n          Validators.pattern(/^[0-9]*$/)])),\n        bankType: new FormControl('')\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  scroll(element) {\n    element.scrollIntoView();\n}\n\n//Method for submit new company list data\n  companyFormData() {\n    try{\n      let cleanCompanyForm = this.util.cleanFormLevelOne(this.companyForm);\n    if (this.companyForm.valid) {\n      this.api.submitCompanyData(cleanCompanyForm.value,this.selectCountryName,this.selectStateName).subscribe((data) => {\n        if(data.status == \"success\"){\n          sessionStorage.setItem('companyId',data.company._id);\n\n          // Upload Company Logo\n          let isCompanyLogo;\n          if((document.getElementById('companyLogo') as HTMLInputElement).value.length === 0){\n           isCompanyLogo = false;\n          } else {\n            isCompanyLogo = true;\n          }\n\n          this.api.uploadCompanyLogo(this.companyLogoForm,'Add CompanyLogo',isCompanyLogo).subscribe((responseData) => {\n            if(responseData.status === 'success'){\n              this.successMessage = true ;\n              this.errorMsg = false ;\n              this.successMsg = data.message;\n\n              setTimeout(() => {\n                this.handleErrors();\n                window.location.replace('/pages/dashboard/company-list');\n              },2000);\n            }\n          })\n\n        }\n        else if(data.status === \"error\"){\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(() => {\n            this.handleErrors();\n          },2000)\n        }\n      })\n    }\n  }\n  catch(err){\n    console.log(err);\n  }\n  }\n\n//Method for show validdation message\n  validationMessage = {\n    'name': [\n      { type: 'required', message: 'Name is required' },\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ],\n    'address':[\n      { type: 'required', message: 'Address is required' },\n    ],\n    'officialNumber': [\n      { type: 'required', message: 'Number is required' },\n      { type: 'minlength', message: 'Number too short ' },\n      { type: 'maxlength', message: 'Number is too large' },\n      { type: 'pattern', message: 'Company Number not valid' },\n    ],\n    'fax': [\n      { type: 'minlength', message: 'Fax number too short ' },\n      { type: 'maxlength', message: 'Fax no. is too large' },\n      { type: 'pattern', message: 'Fax Number not valid' },\n    ],\n    'domicile':[\n      { type: 'pattern', message: 'Invalid Domicile'},\n    ],\n    'outGoingMails':[\n      { type: 'pattern', message: 'Invalid Mail'},\n    ],\n    'taxNumber':[\n      { type: 'pattern', message: 'Invalid Taxation No.'},\n    ],\n    'panNo':[\n      { type: 'pattern', message: 'Invalid PAN No.'},\n    ],\n    'bankAccNum':[\n      { type: 'maxlength', message: 'Account No. limit exceeded'},\n      { type: 'pattern', message: 'Invalid Account No.'},\n    ],\n  }\n\n handleErrors(){\n          this.errorMsg = false;\n          this.successMessage = false;\n          this.errMsg = '';\n          this.successMsg = '';\n }\n\n // Country Option Functionality\n countryName(){\n   if((document.getElementById('country')as HTMLInputElement).value === '-1'){\n    this.countryMsg = \"Country Name is Required\";\n    this.stateOption = false;\n   } else {\n     this.selectCountryName = (document.getElementById('country')as HTMLInputElement).value\n     this.countryMsg = '';\n     this.stateOption = true;\n     this.stateName();\n   }\n }\n\n // State Option Functionality\nstateName(){\n  if((document.getElementById('state')as HTMLInputElement) === null){\n    this.selectStateName = '';\n  } else if((document.getElementById('state')as HTMLInputElement).value === ''){\n    this.selectStateName = '';\n  } else {\n    this.selectStateName = (document.getElementById('state')as HTMLInputElement).value\n  }\n}\n\n// Upload company Logo form\nuploadCompanyLogo(){\n  try{\n    this.companyLogoForm = this.fb.group({\n      companyLogo: ['']\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\nonSelectFile(event) {\n  if (event.target.files && event.target.files[0]) {\n    var reader = new FileReader();\n\n    reader.readAsDataURL(event.target.files[0]); // read file as data url\n\n    reader.onload = (event: any) => { // called once readAsDataURL is completed\n      this.url = event.target.result;\n    }\n    if(event.target.files[0].size > 2000000){\n      this.imageFlag = true;\n      this.imageErrorMsg = \"File Size Exceeded than 2MB\";\n    } else {\n      if (event.target.files.length > 0) {\n        this.imageFlag = false;\n        this.imageError = '';\n        this.imageErrorMsg = '';\n        const file = event.target.files[0];\n        this.companyLogoForm.get('companyLogo').setValue(file);\n      }\n    }\n  }\n}\n\n// Reset Image\nreset(){\n  try {\n    (document.getElementById('companyLogo') as HTMLInputElement).value = '';\n    this.url = '';\n    this.imageError = 'Image Size should be less than 2MB';\n    this.imageFlag = false;\n  } catch (error) {\n    console.log(error);\n\n  }\n}\n\n}\n","<div class=\"card card-user\">\n  <div class=\"card-header\">\n    <h2 class=\"card-title\" #target>Company Details</h2>\n  </div>\n\n  <div class=\"card-body\" >\n    <div class=\"col-sm-offset-2\" >\n      <p class=\"alert alert-danger\" *ngIf=\"errorMsg\" >\n        <strong>{{ errMsg }}</strong>\n      </p>\n    </div>\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"successMessage\" >\n        <strong>{{ successMsg }}</strong>\n      </p>\n    </div>\n\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"companyForm\" (ngSubmit)=\"companyFormData()\" novalidate>\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Name (to appear on reports):&nbsp;<span style=\"color: darkred\">*</span></b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Company Name\" formControlName=\"name\">\n          <div *ngFor=\"let validation of validationMessage.name\">\n            <div style=\"color: red;margin-left: 14px;\"\n              *ngIf=\"companyForm.get('name').hasError(validation.type) && (companyForm.get('name').dirty || companyForm.get('name').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Address:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n        <div class=\"col-sm-offset-2\">\n          <textarea class=\"form-control\" id=\"inputAddress\" placeholder=\"Address\" formControlName=\"address\"\n          ></textarea>\n          <div *ngFor=\"let validation of validationMessage.address\">\n            <div style=\"color: red;margin-left: 14px;\"\n              *ngIf=\"companyForm.get('address').hasError(validation.type) && (companyForm.get('address').dirty || companyForm.get('address').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-6\">\n            <label class=\"col-sm-4 control-label\"><b>Country:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <select class=\"dropdown dropdown-toggle form-control\" id=\"country\" name =\"country\" (change)=\"countryName()\">\n            </select>\n            <div [ngStyle]=\"{display: countryMsg === undefined?'none':'block'}\" ><p style=\"color:red;\">{{countryMsg}}</p></div>\n          </div>\n          <div class=\"form-group col-md-6\" *ngIf=\"stateOption\">\n            <label class=\"col-sm-4 control-label\"><b>State:</b></label>\n            <select class=\"dropdown dropdown-toggle form-control\" name =\"state\" id =\"state\" (change)=\"stateName()\"></select>\n          </div>\n          <div class=\"form-group col-md-6\" *ngIf=\"!stateOption\">\n            <label class=\"col-sm-4 control-label\"><b>State:</b></label>\n            <select class=\"dropdown dropdown-toggle form-control\" disabled>\n              <option class=\"drop-down\">----Country Not Selected----</option>\n            </select>\n          </div>\n        </div>\n\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-6\">\n            <div class=\"form-group\">\n              <label class=\"col-sm-6 control-label\"><b>Domicile:</b></label>\n              <div class=\"col-sm-offset-2\">\n                <input class=\"form-control\" type=\"text\" id=\"inputDomiclie\" placeholder=\"Enter Domicile\"\n                  formControlName=\"domicile\">\n                <div *ngFor=\"let validation of validationMessage.domicile\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                    *ngIf=\"companyForm.get('domicile').hasError(validation.type) && (companyForm.get('domicile').dirty || companyForm.get('domicile').touched)\"\n                    style=\"color: red;margin-left: 14px;\">\n                    {{ validation.message }}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-group col-md-6\">\n            <div class=\"form-group\">\n              <label class=\"col-sm-6 control-label\"><b>Fax Number:</b></label>\n              <div class=\"col-sm-offset-2\">\n                <input class=\"form-control\" type=\"text\" id=\"inputFax\" placeholder=\"Enter Fax Number:\" formControlName=\"fax\">\n                <div *ngFor=\"let validation of validationMessage.fax\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                    *ngIf=\"companyForm.get('fax').hasError(validation.type) && (companyForm.get('fax').dirty || companyForm.get('fax').touched)\"\n                    style=\"color: red;margin-left: 14px;\">\n                    {{ validation.message }}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n    </div>\n\n    <div class=\"form-row\">\n      <div class=\"form-group col-md-6\">\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>Email Address:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n          <div class=\"col-sm-offset-2\">\n            <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Email \" formControlName=\"email\"\n            >\n            <div *ngFor=\"let validation of validationMessage.email\">\n              <div style=\"color: red;margin-left: 14px;\"\n                *ngIf=\"companyForm.get('email').hasError(validation.type) && (companyForm.get('email').dirty || companyForm.get('email').touched)\"\n                style=\"color: red;margin-left: 14px;\">\n                {{ validation.message }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group col-md-6\">\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>BCC Address for all outgoing mails:</b></label>\n          <div class=\"col-sm-offset-2\">\n            <input class=\"form-control\" type=\"email\" id=\"inputBcc\" placeholder=\"Enter BCC Address\"\n              formControlName=\"outGoingMails\">\n            <div *ngFor=\"let validation of validationMessage.outGoingMails\">\n              <div style=\"color: red;margin-left: 14px;\"\n                *ngIf=\"companyForm.get('outGoingMails').hasError(validation.type) && (companyForm.get('outGoingMails').dirty || companyForm.get('outGoingMails').touched)\"\n                style=\"color: red;margin-left: 14px;\">\n                {{ validation.message }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"form-row\">\n      <div class=\"form-group col-md-6\">\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>Bank Name:</b></label>\n          <div class=\"col-sm-offset-2\">\n            <input class=\"form-control\" type=\"text\" placeholder=\"Enter Bank Name \" formControlName=\"bankName\">\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group col-md-6\">\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>Account Type:</b></label>\n          <div class=\"col-sm-offset-2\">\n            <input class=\"form-control\" type=\"text\" placeholder=\"Enter Account Type\"\n              formControlName=\"bankType\">\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"form-row\">\n      <div class=\"col-md-6\">\n        <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Account Number:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" placeholder=\"Enter Account Number\"\n                formControlName=\"bankAccNum\">\n              <div *ngFor=\"let validation of validationMessage.bankAccNum\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"companyForm.get('bankAccNum').hasError(validation.type) && (companyForm.get('bankAccNum').dirty || companyForm.get('bankAccNum').touched)\"\n                  style=\"color: red;margin-left: 14px;\">\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n        </div>\n      </div>\n\n      <div class=\"form-group col-md-6\">\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>Official Company Number:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n          <div class=\"col-sm-offset-2\">\n            <input class=\"form-control\" type=\"text\" id=\"inputCompanyNo\" placeholder=\"Enter Official Company Number\"\n              formControlName=\"officialNumber\">\n            <div *ngFor=\"let validation of validationMessage.officialNumber\">\n              <div style=\"color: red;margin-left: 14px;\"\n                *ngIf=\"companyForm.get('officialNumber').hasError(validation.type) && (companyForm.get('officialNumber').dirty || companyForm.get('officialNumber').touched)\"\n                style=\"color: red;margin-left: 14px;\">\n                {{ validation.message }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Taxation No:</b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" id=\"inputTaxationno.\" placeholder=\"Enter Taxation Number\"\n                formControlName=\"taxationNumber\">\n              <div *ngFor=\"let validation of validationMessage.taxNumber\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"companyForm.get('taxationNumber').hasError(validation.type) && (companyForm.get('taxationNumber').dirty || companyForm.get('taxationNumber').touched)\"\n                  style=\"color: red;margin-left: 14px;\">\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n              <label class=\"col-sm-6 control-label\"><b>PAN (Permanent Account Number):</b></label>\n              <div class=\"col-sm-offset-2\">\n                <input class=\"form-control\" onkeyup=\"this.value = this.value.toUpperCase().trim();\" type=\"text\" id=\"inputPanno.\" placeholder=\"Enter PAN Number\"\n                  formControlName=\"panNumber\">\n                <div *ngFor=\"let validation of validationMessage.panNo\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                    *ngIf=\"companyForm.get('panNumber').hasError(validation.type) && (companyForm.get('panNumber').dirty || companyForm.get('panNumber').touched)\"\n                    style=\"color: red;margin-left: 14px;\">\n                    {{ validation.message }}\n                  </div>\n                </div>\n              </div>\n          </div>\n        </div>\n      </div>\n\n     <div class=\"row\">\n       <div class=\"col-lg-6 col-md-6 col-sm-6\">\n     <div class=\"row\">\n      <div class=\"col-lg-10 col-md-6 col-sm-6\">\n        <div class=\"form-group\">\n           <label class=\"control-label\"><b>Company Logo:</b></label><br>\n            <img [src]=\"url\" height=\"70\">\n            <input type=\"file\" class=\"form-control-file border\" id=\"companyLogo\" (change)=\"onSelectFile($event)\" accept=\"image/*\">\n            <div *ngIf=\"!imageFlag\">\n              <p class=\"imageError\">{{ imageError }}</p>\n            </div>\n            <div *ngIf=\"imageFlag\">\n              <p class=\"imageError\">{{ imageErrorMsg }}</p>\n            </div>\n          </div>\n      </div>\n      <div class=\"col-lg-2 col-md-6 col-sm-6\">\n        <div class=\"delete-button\">\n        <button class=\"btn btn-danger\" type=\"button\" (click)=\"reset()\" ><i class=\"fa fa-trash\"></i>&nbsp; Reset</button>\n      </div>\n      </div>\n     </div>\n    </div>\n    <div class=\"col-lg-6 col-md-6 col-sm-6\"></div>\n    </div>\n\n      <!-- <div class=\"form-row\">\n      <div class=\"form-group col-md-6\">\n        <label class=\"col-sm-4 control-label\"><b>Home Currency:</b></label>\n        <select class=\"dropdown dropdown-toggle form-control\" Name=\"HomeCurrency\" formControlName=\"currency\">\n          <option class='dropdown-item' ng-selected=\"true\" value=\"\" disabled selected>----------{{currencyOptionValue}}----------</option>\n          <option [ngValue]=\"homeCurrency.code\" *ngFor=\"let homeCurrency of currency\"> {{ homeCurrency.code }}</option>\n        </select>\n      </div>\n        <div class=\"form-group col-md-4\" style=\"margin-top: 13px;\">\n            <button type=\"button\" style=\"float: left;\" class=\"btn btn-primary\" data-toggle=\"modal\" (click)=resetForm() data-target=\"#myModal\">\n             <i class=\"fa fa-plus-square\"></i> Add Currency\n            </button>\n            <button type=\"button\" class=\"btn btn-danger\" style=\"float: left;\" >\n                <i class=\"fa fa-trash\"></i> Delete Currency\n               </button>\n              </div>\n      </div> -->\n            <!-- <div class=\"modal\" id=\"myModal\">\n                <div class=\"modal-dialog\">\n                  <div class=\"modal-content\">\n\n\n                    <div class=\"modal-header\">\n                      <h4 class=\"modal-title\">Add Currency</h4>\n                    </div>\n                    <div class=\"col-sm-offset-2\">\n                      <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                        <strong>{{ errMsg }}</strong>\n                      </p>\n                    </div>\n\n                    <div class=\"col-sm-offset-2\">\n                      <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                        <strong>{{ successMsg }}</strong>\n                      </p>\n                    </div>\n\n                    <div class=\"modal-body\">\n                      <form role=\"form\" [formGroup]=\"addCurrencyForm\" (ngSubmit)=\"addCurrency()\">\n                        <div class=\"form-group\">\n                          <label class=\"col-sm-6 control-label\"><b>Currency Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                          <input type=\"text\" formControlName=\"name\" placeholder=\"Enter Currency Name\" class=\"form-control\" />\n                          <div *ngFor=\"let validation of currencyValidationMessage.name\">\n                            <div style=\"color: red;margin-left: 14px;\"\n                              *ngIf=\"addCurrencyForm.get('name').hasError(validation.type) && (addCurrencyForm.get('name').dirty || addCurrencyForm.get('name').touched)\"\n                              style=\"color: red;margin-left: 14px;\">\n                              {{ validation.message }}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div class=\"form-group\">\n                          <label class=\"col-sm-6 control-label\"><b>Currency Code:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                          <input type=\"text\" formControlName=\"code\" placeholder=\"Enter Currency Code\" class=\"form-control\" />\n                          <div *ngFor=\"let validation of currencyValidationMessage.code\">\n                            <div style=\"color: red;margin-left: 14px;\"\n                              *ngIf=\"addCurrencyForm.get('code').hasError(validation.type) && (addCurrencyForm.get('code').dirty || addCurrencyForm.get('code').touched)\"\n                              style=\"color: red;margin-left: 14px;\">\n                              {{ validation.message }}\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"form-group\">\n                            <button type=\"button\" class=\"btn btn-danger\" id=\"dismiss\" style=\"float:right;\" data-dismiss=\"modal\">Close</button>\n                            <button type=\"submit\" class=\"btn btn-success\" style=\"float:right;\" [disabled]='addCurrencyForm.invalid'>Submit</button>\n                        </div>\n                      </form>\n                    </div>\n                  </div>\n                </div>\n             </div> -->\n             <!-- <div class=\"form-group\">\n              <div class=\"col-sm-offset-2 col-sm-10\">\n                <img [src]=\"url\" height=\"200\">\n                <input type=\"file\" class=\"form-control-file border\" (change)=\"onSelectFile($event)\" accept=\"image/*\">\n              </div>\n            </div> -->\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"companyForm.invalid || countryMsg || countryMsg === undefined || imageFlag\" (click)=\"scroll(target)\">Add Company</button>\n          <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"/pages/dashboard/company-list\">Cancel</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>"]}