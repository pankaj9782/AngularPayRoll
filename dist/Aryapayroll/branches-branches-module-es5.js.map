{"version":3,"sources":["webpack:///src/app/pages/branches/branch-service/branch.service.ts","webpack:///src/app/pages/branches/department/add-department/add-department.component.ts","webpack:///src/app/pages/branches/department/add-department/add-department.component.html","webpack:///src/app/pages/branches/show-branches/show-branches.component.ts","webpack:///src/app/pages/branches/show-branches/show-branches.component.html","webpack:///src/app/pages/branches/branches-routing.module.ts","webpack:///src/app/pages/branches/branches.module.ts","webpack:///src/app/pages/branches/department/update-department/update-department.component.ts","webpack:///src/app/pages/branches/department/update-department/update-department.component.html","webpack:///src/app/pages/branches/branches.component.ts","webpack:///src/app/pages/branches/branches.component.html","webpack:///src/app/pages/branches/add-branches/add-branches.component.ts","webpack:///src/app/pages/branches/add-branches/add-branches.component.html","webpack:///src/app/pages/branches/update-branch-data/update-branch-data.component.ts","webpack:///src/app/pages/branches/update-branch-data/update-branch-data.component.html","webpack:///src/app/pages/branches/department/show-departments/show-departments.component.ts","webpack:///src/app/pages/branches/department/show-departments/show-departments.component.html"],"names":["BranchService","http","endpoint","apiBaseUrl","headers","set","data","companyParentId","countryName","stateName","countryState","apiUrl","post","pipe","errorMgmt","err","console","log","sessionStorage","getItem","get","branchId","message","error","errorMessage","ErrorEvent","status","departmentId","providedIn","AddDepartmentComponent","route","api","fb","ngZone","router","successMessage","errorMsg","validationMessage","type","snapshotParam","snapshot","paramMap","departmentValidation","departmentForm","group","title","required","description","valid","submitDepartmentData","value","subscribe","setTimeout","run","navigateByUrl","successMsg","errMsg","departmentFormData","selector","templateUrl","styleUrls","ShowBranchesComponent","util","branchList","showBranchCard","permissionInfo","permissionRoleInfo","showBranchList","getBranchListData","branch","length","i","_id","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","text","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","removeData","dismiss","DismissReason","cancel","branchesSatus","addBranches","routes","path","component","canActivate","children","redirectTo","pathMatch","BranchesRoutingModule","forChild","declarations","imports","BranchesModule","providers","UpdateDepartmentComponent","departmentList","Array","departmentData","departmentParam","updateFormValidation","getExistingData","updateDepartmentForm","updateDepartmentData","getDepartmentData","department","len","Object","keys","push","BranchesComponent","AddBranchesComponent","isListAvaliable","branchDataValidate","populateCountries","search","branchForm","disable","name","compose","officialNumber","minLength","maxLength","pattern","email","fax","address","outGoingMails","taxationNumber","panNumber","bankName","bankAccNum","bankType","element","scrollIntoView","cleanAddCompanyForm","cleanFormLevelOne","submitBranchFormData","selectCountryName","selectStateName","handleErrors","document","getElementById","countryMsg","stateOption","branchFormData","scroll","UpdateBranchDataComponent","currencyApi","getBranchList","branchData","String","moduleExists","updateBranchDataValidate","updateBranchForm","getBranchDetails","bankDetails","cleanUpdateBranchForm","submitUpdatedData","updateBranchFormData","ShowDepartmentsComponent","showDepartmentCard","getDepartmentListData","removeDepartmentData","navigate"],"mappings":"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","file":"branches-branches-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { BranchData } from 'src/app/auth/branch';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../../environments/environment';\nimport { Department } from 'src/app/auth/department';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BranchService {\n\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n  //Method For submit branch form data to the server\n  submitBranchFormData(data: BranchData, companyParentId: String,countryName,stateName): Observable<any> {\n    try {\n      data.countryName = countryName;\n      data.countryState = stateName;\n      let apiUrl = `${this.endpoint}/company/add-branch/${companyParentId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for get branch list Data\n  getBranchListData(): Observable<any> {\n    try {\n      const companyParentId = sessionStorage.getItem(\"companyId\");\n      let apiUrl = `${this.endpoint}/company/branch-list/${companyParentId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for Individual Branch Details\n  getBranchDetails(branchId: String): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/company/branch-details/${branchId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for submit updated branch data\n  submitUpdatedData(data: BranchData, branchId: String): Observable<any> {\n    try {\n      const companyParentId = sessionStorage.getItem(\"companyId\");\n      let apiUrl = `${this.endpoint}/company/update-branch/${companyParentId}/${branchId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n\n  }\n\n  //Create method for manage errors when request and return response from the server\n  errorMgmt(error: HttpErrorResponse) {\n    try {\n      let errorMessage = '';\n      //Handle client side error\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      }\n      //Handle server side error\n      else {\n        errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n      }\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for delete branch\n  removeData(branchId: String): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/company/delete-branch/${branchId}`;\n      return this.http.delete(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n\n  }\n\n  //Method for add department\n  submitDepartmentData(data: Department, branchId: String): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/branch/add-department/${branchId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n    //Method for add department\n    updateDepartmentData(data: Department, branchId: String, departmentId:String): Observable<any> {\n      try {\n        let apiUrl = `${this.endpoint}/branch/update-department/${branchId}/${departmentId}`;\n        return this.http.post(apiUrl, data).pipe(\n          catchError(this.errorMgmt)\n        )\n      } catch (err) {\n        console.log(err.message);\n      }\n    }\n\n\n  //Method for get department list\n  getDepartmentData(branchId:String):Observable<any>{\n    try{\n      let apiUrl = `${this.endpoint}/branch/list-department/${branchId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n  //Method for remove department\n  removeDepartmentData(departmentId:String):Observable<any>{\n    try{\n      let apiUrl = `${this.endpoint}/branch/delete-department/${departmentId}`;\n      return this.http.delete(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n  }\n\n\n}\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BranchService } from '../../branch-service/branch.service';\n\n@Component({\n  selector: 'app-add-department',\n  templateUrl: './add-department.component.html',\n  styleUrls: ['./add-department.component.scss']\n})\nexport class AddDepartmentComponent implements OnInit {\n\n  departmentForm: FormGroup;\n  snapshotParam: String;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private api: BranchService,\n    public fb: FormBuilder,\n    private ngZone: NgZone,\n    private router: Router) { }\n\n  ngOnInit() {\n    this.snapshotParam = this.route.snapshot.paramMap.get(\"branchId\");\n    this.departmentValidation();\n  }\n\n  //Method for form validation\n  departmentValidation() {\n    try {\n      this.departmentForm = this.fb.group({\n        title: new FormControl(null, Validators.required),\n        description: new FormControl(null),\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method for submit form data\n  departmentFormData() {\n    try {\n      if (this.departmentForm.valid) {\n        this.api.submitDepartmentData(this.departmentForm.value, this.snapshotParam).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successMessage = true;\n            setTimeout(() => {\n              this.ngZone.run(()=>{this.router.navigateByUrl(`/pages/branches/show-departments/${this.snapshotParam}`)});\n            }, 1000);\n            this.errorMsg = false;\n            this.successMsg = data.message;\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n\n  // For show error message\n  validationMessage = {\n    'title': [\n      { type: 'required', message: 'Title is required' },\n    ],\n  }\n}\n","<div class=\"card card-user\">\n    <div class=\"card-header\">\n        <h2 class=\"card-title\">Department Details</h2>\n        <a routerLink=\"../../show-departments/{{ snapshotParam }}\" class=\"btn btn-primary btn-circle\" style=\"float: right;\"><i\n                class=\"fa  fa-arrow-right\"></i></a>\n    </div>\n\n\n    <div class=\"card-body\">\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                <strong>{{ errMsg }}</strong>\n            </p>\n        </div>\n\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                <strong>{{ successMsg }}</strong>\n            </p>\n        </div>\n\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"departmentForm\" (ngSubmit)=\"departmentFormData()\" novalidate>\n                <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <div class=\"col-sm-offset-2\">\n                          <input class=\"form-control\" type=\"text\" id=\"inputTitle\" placeholder=\"Enter Department Name\" formControlName=\"title\"\n                            >\n                          <div *ngFor=\"let validation of validationMessage.title\">\n                            <div style=\"color: red;margin-left: 14px;\" \n                              *ngIf=\"departmentForm.get('title').hasError(validation.type) && (departmentForm.get('title').dirty || departmentForm.get('title').touched)\"\n                              style=\"color: red;margin-left: 14px;\">\n                              {{ validation.message }}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"form-group\">\n                            <label class=\"col-sm-6 control-label\"><b>Description:</b></label>\n                            <div class=\"col-sm-offset-2\">\n                              <input class=\"form-control\" type=\"text\" id=\"inputDescription\" placeholder=\"Description\" formControlName=\"description\"\n                                >\n                              <!-- <div *ngFor=\"let validation of validationMessage.description\">\n                                <div class=\"alert alert-danger\"\n                                  *ngIf=\"departmentForm.get('description').hasError(validation.type) && (departmentForm.get('description').dirty || departmentForm.get('description').touched)\"\n                                  class=\"alert alert-danger\">\n                                  {{ validation.message }}\n                                </div>\n                              </div> -->\n                            </div>\n                          </div>\n                          <div class=\"form-group\">\n                                <div class=\"col-sm-offset-2 col-sm-10\">\n                                  <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"departmentForm.invalid\">Add Department</button>\n                                </div>\n                              </div>\n\n        </form>\n    </div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { BranchService } from '../branch-service/branch.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-show-branches',\n  templateUrl: './show-branches.component.html',\n  styleUrls: ['./show-branches.component.scss']\n})\nexport class ShowBranchesComponent implements OnInit {\n\n  snapShot:String;\n  // branchList: any =Object;\n  branchList: any = [];\n  showBranchCard = {};\n  permissionInfo: any;\n\n  constructor(private api:BranchService,\n     private route:ActivatedRoute,\n     private ngZone: NgZone,\n     private router: Router,\n     private util: UtilitiesService) { }\n\n  ngOnInit() {\n    this.permissionInfo = this.util.permissionRoleInfo;\n    this.showBranchList();\n  }\n\n//Method for Show branch list\n  showBranchList(){\n    try{\n    this.api.getBranchListData().subscribe((data)=>{\n      if(data.status === \"success\" || data.status === 200){\n        this.branchList = data.branch;\n        if(data.branch.length == 0){\n          this.router.navigateByUrl(\"/pages/branches/add-branch\");\n        }else{\n        for(var i = 0; i < this.branchList.length; i++){\n          this.showBranchCard[this.branchList[i]._id] = true;\n        }\n        }\n      }\n    })\n  }\n  catch(err){\n    console.log(err);\n  }\n}\n\n  //Method for onclick data show when collapse\n  showData(branchId: String) {\n    try{\n    this.showBranchCard[`${branchId}`] = !this.showBranchCard[`${branchId}`];\n    }\n    catch(err){\n      console.log(err);\n    }\n  }\n\n   //Method for remove company branch\n   showConfirmationMessage(branchId: String) {\n    try {\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeData(branchId).subscribe((data) => {\n            if (data.status === \"success\" || data.status === 200) {\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                data.message,\n                'success'\n              )\n              this.ngZone.run(()=>{\n                this.router.navigateByUrl('/pages/branches/show-branches');\n              })\n              this.showBranchList();\n            } else if(data.status === 'error'){\n              swalWithBootstrapButtons.fire(\n                'ERROR!',\n                data.message,\n                'error'\n              )\n            }\n          })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your list data safe',\n            'error'\n          )\n        }\n      })\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n  addBranches(){\n    try{\n      this.util.branchesSatus = 1;\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n}\n","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Branches List</h2>\n        <a [class.disabled]=\"permissionInfo.search('Create Branch') === -1\"\n        class=\"btn btn-primary\" routerLink=\"../add-branch\" style=\"float: right;\" (click) = \"addBranches()\"><i\n                class=\"fa fa-plus-square\"></i>&nbsp; Add Branch</a>\n    </div>\n    <div class=\"panel-body\">\n        <ul class=\"list-group\">\n            <li class=\"list-group-item\" *ngFor=\"let list of branchList\">\n                <strong><b (click)=\"showData(list._id)\" style=\"cursor: pointer\">{{ list.name}}</b></strong>\n                <div style=\"float: right;\">\n                    <i class=\"dropdown-toggle\" (click)=\"showData(list._id)\"></i>\n                </div>\n                <div class=\"card\" style=\"background-color:ghostwhite\" [hidden]=\"showBranchCard[list._id]\">\n                    <table class=\"table\" style=\"margin: auto\">\n                        <tr>\n                            <td><b>Name:</b></td>\n                            <td>{{ list.name }}</td>\n                            <td><b>Address:</b></td>\n                            <td>{{ list.address }}</td>\n                        </tr>\n                        <tr>\n                            <td><b>Official Number:</b></td>\n                            <td>{{ list.officialNumber }}</td>\n                            <td><b>Fax:</b></td>\n                            <td>{{ list.fax }}</td>\n                        </tr>\n                        <tr>\n                            <td><b>Email:</b></td>\n                            <td>{{ list.email }}</td>\n                            <td><b>Bank Name:</b></td>\n                            <td>{{ list.bankName }}</td>\n                        </tr>\n                        <tr>\n                            <td><b>Account No:</b></td>\n                            <td>{{ list.bankAccNum }}</td>\n                            <td><b>Country Name:</b></td>\n                            <td>{{ list.countryName }}</td>\n                        </tr>\n                        <tr>\n                            <td><b>Taxation No:</b></td>\n                            <td>{{ list.taxationNumber }}</td>\n                            <td><b>State Name:</b></td>\n                            <td>{{ list.countryState }}</td>\n                        </tr>\n                        <tr>\n                            <td><b>PAN No:</b></td>\n                            <td>{{ list.panNumber }}</td>\n                            <td><b>Currency:</b></td>\n                            <td>{{ list.currency }}</td>\n                        </tr>\n                        <tr>\n                            <td><b>BCC Address for all outgoing mails:</b></td>\n                            <td>{{ list.outGoingMails }}</td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n                    </table>\n                    <div>\n                        <a [class.disabled]=\"permissionInfo.search('Edit Branch') === -1\"\n                         routerLink=\"../update-branch-data/{{ list._id }}\" style=\"float: right\" class=\"btn btn-primary\">\n                            <i class=\"fa fa-pencil-square-o\"></i>\n                        </a\n                        >\n                        <button [disabled]=\"permissionInfo.search('Delete Branch') === -1\"\n                         style=\"float: right;\" class=\"btn btn-danger\" type=\"button\"\n                            (click)=\"showConfirmationMessage(list._id)\">\n                            <i class=\"fa fa-trash\"></i></button>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BranchesComponent } from './branches.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { AddBranchesComponent } from './add-branches/add-branches.component';\nimport { ShowBranchesComponent } from './show-branches/show-branches.component';\nimport { UpdateBranchDataComponent } from './update-branch-data/update-branch-data.component';\n// import { AddDepartmentComponent } from './department/add-department/add-department.component';\nimport { ShowDepartmentsComponent } from './department/show-departments/show-departments.component';\nimport { UpdateDepartmentComponent } from './department/update-department/update-department.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BranchesComponent,\n    canActivate:[AuthGuard],\n    children: [\n      {\n        path:'add-branch',\n        component:AddBranchesComponent,\n      },\n      {\n        path:'show-branches',\n        component:ShowBranchesComponent,\n      },\n      {\n        path:'update-branch-data/:branchId',\n        component:UpdateBranchDataComponent,\n      },\n      // {\n      //   path:'add-department/:branchId',\n      //   component:AddDepartmentComponent,\n      // },\n      {\n        path:'show-departments/:branchId',\n        component:ShowDepartmentsComponent,\n      },\n      {\n        path:'update-department/:branchId/:departmentId',\n        component:UpdateDepartmentComponent,\n      },\n      {\n        path:'',\n        redirectTo :'show-branches',\n        pathMatch:'full',\n      },\n    ],\n  },\n]\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n  ]\n})\nexport class BranchesRoutingModule { }","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BranchesRoutingModule } from './branches-routing.module';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { BranchesComponent } from './branches.component';\nimport { AddBranchesComponent } from './add-branches/add-branches.component';\nimport { ShowBranchesComponent } from './show-branches/show-branches.component';\nimport { BranchService } from './branch-service/branch.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { UpdateBranchDataComponent } from './update-branch-data/update-branch-data.component';\nimport { AddDepartmentComponent } from './department/add-department/add-department.component';\nimport { ShowDepartmentsComponent } from './department/show-departments/show-departments.component';\nimport { UpdateDepartmentComponent } from './department/update-department/update-department.component';\n\n@NgModule({\n  declarations: [BranchesComponent, AddBranchesComponent, ShowBranchesComponent, UpdateBranchDataComponent, AddDepartmentComponent, ShowDepartmentsComponent, UpdateDepartmentComponent],\n  imports: [\n    CommonModule,\n    BranchesRoutingModule,\n    RouterModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n  ],\n  providers:[AuthGuard,BranchService]\n})\nexport class BranchesModule { }\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BranchService } from '../../branch-service/branch.service';\n\n@Component({\n  selector: 'app-update-department',\n  templateUrl: './update-department.component.html',\n  styleUrls: ['./update-department.component.scss']\n})\n\nexport class UpdateDepartmentComponent implements OnInit {\n\n  updateDepartmentForm:FormGroup;\n  snapshotParam: String;\n  departmentParam:String;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  departmentList= new Array();\n  // public departmentList: any=[];\n  // public departmentData:any =[];\n  departmentData= new Array();\n\n  constructor(\n    private route: ActivatedRoute,\n    private api: BranchService,\n    public fb: FormBuilder,\n    private ngZone: NgZone,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.snapshotParam = this.route.snapshot.paramMap.get(\"branchId\");\n    this.departmentParam = this.route.snapshot.paramMap.get(\"departmentId\");\n    this.updateFormValidation();\n    this.getExistingData();\n  }\n\n  //Method for form validation\n  updateFormValidation() {\n    try {\n      this.updateDepartmentForm = this.fb.group({\n        title: new FormControl(null),\n        description: new FormControl(null),\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n   //Method for submit form data\n   updateDepartmentFormData() {\n    try {\n      if (this.updateDepartmentForm.valid) {\n        this.api.updateDepartmentData(this.updateDepartmentForm.value, this.snapshotParam, this.departmentParam).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successMessage = true;\n            setTimeout(() => {\n              this.ngZone.run(()=>{this.router.navigateByUrl(`/pages/branches/show-departments/${this.snapshotParam}`)});\n            }, 1000);\n            this.errorMsg = false;\n            this.successMsg = data.message;\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n   //Method for get existing data show on update form\n   getExistingData() {\n    this.api.getDepartmentData(this.snapshotParam).subscribe((data) => {\n      if (data.status === \"success\" || data.status === 200) {\n        this.departmentList = data.department;\n        const len = Object.keys(this.departmentList).length;\n        for (var i = 0; i < len; i++) {\n          if (this.departmentList[i]._id === this.departmentParam) {\n            this.departmentData.push(this.departmentList[i]);\n            this.updateDepartmentForm = this.fb.group({\n              title: new FormControl(this.departmentList[i].title),\n              description: new FormControl(this.departmentList[i].description),\n            })\n          }\n        }\n      }\n    })\n  }\n\n}","<div class=\"card card-user\">\n    <div class=\"card-header\">\n        <h2 class=\"card-title\" style=\"text-align: center\">Update Department Details</h2>\n        <a routerLink=\"../../../show-departments/{{ snapshotParam }}\" class=\"btn btn-primary btn-circle\"\n            style=\"float: right;\"><i class=\"fa  fa-arrow-right\"></i></a>\n    </div>\n\n\n    <div class=\"card-body\">\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                <strong>{{ errMsg }}</strong>\n            </p>\n        </div>\n\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                <strong>{{ successMsg }}</strong>\n            </p>\n        </div>\n\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"updateDepartmentForm\" *ngFor=\"let list of departmentData\"\n            (ngSubmit)=\"updateDepartmentFormData()\" novalidate>\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"inputTitle\"\n                        formControlName=\"title\">\n\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Description:</b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"inputDescription\" \n                        formControlName=\"description\">\n\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"updateDepartmentForm.invalid\">Add\n                        Department</button>\n                </div>\n            </div>\n\n        </form>\n    </div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-branches',\n  templateUrl: './branches.component.html',\n  styleUrls: ['./branches.component.scss']\n})\nexport class BranchesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<router-outlet></router-outlet>","import { Component, OnInit, NgZone, ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ } from '@angular/core';\nimport { BranchService } from '../branch-service/branch.service';\nimport { FormBuilder, FormControl, Validators, FormGroup } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\ndeclare var populateCountries: any ;\n\n@Component({\n  selector: 'app-add-branches',\n  templateUrl: './add-branches.component.html',\n  styleUrls: ['./add-branches.component.scss']\n})\nexport class AddBranchesComponent implements OnInit {\n\n  branchForm:FormGroup;\n  snapshotParam:String;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  countryMsg: string;\n  stateOption: boolean;\n  selectCountryName: string;\n  selectStateName: string;\n  permissionInfo: any;\n\n  constructor(private route: ActivatedRoute,private api: BranchService, public fb: FormBuilder, private ngZone: NgZone,\n    private router: Router,\n    private util: UtilitiesService,\n    ) {\n      this.isListAvaliable();\n    }\n\n  ngOnInit() {\n    this.permissionInfo = this.util.permissionRoleInfo;\n    this.branchDataValidate();\n    populateCountries(\"country\", \"state\");\n    this.snapshotParam = sessionStorage.getItem(\"companyId\");\n    if(this.permissionInfo.search('Create Branch') === -1){\n      this.branchForm.disable();\n    }\n  }\n\n   //Method for Validation\n  branchDataValidate() {\n    try {\n      this.branchForm = this.fb.group({\n        name: new FormControl('', Validators.compose([\n          Validators.required,\n        ])),\n        officialNumber: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(15),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n        ])),\n        email: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n        ])),\n        fax: new FormControl('', Validators.compose([\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n          Validators.minLength(10),\n          Validators.maxLength(10),\n        ])),\n        address: new FormControl('', Validators.required),\n        outGoingMails: new FormControl('', Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')),\n        taxationNumber: new FormControl(''),\n        panNumber: new FormControl('', Validators.pattern('(^[A-Za-z]{5}[0-9]{4}[A-Za-z]$)')),\n        bankName: new FormControl(''),\n        bankAccNum: new FormControl('',Validators.compose([Validators.maxLength(16),\n          Validators.pattern(/^[0-9]*$/)])),\n        bankType: new FormControl('')\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  scroll(element) {\n    element.scrollIntoView();\n}\n\n//Method for submit form data\n  branchFormData(){\n    try{\n      let cleanAddCompanyForm = this.util.cleanFormLevelOne(this.branchForm);\n      if(this.branchForm.valid){\n        this.api.submitBranchFormData(cleanAddCompanyForm.value,this.snapshotParam,this.selectCountryName,this.selectStateName).subscribe((data)=>{\n          if(data.status === \"success\"|| data.status === 200){\n            this.successMessage = true ;\n            this.errorMsg = false ;\n            this.successMsg = data.message;\n            setTimeout(()=>{\n            this.handleErrors();\n            this.ngZone.run(()=>this.router.navigateByUrl('/pages/branches/show-branches'));\n             }, 1500);\n          }\n          else if(data.status == \"error\"){\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(()=> {\n              this.handleErrors();\n            },4000)\n          }\n        })\n      }\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n  //Method for show validdation message\n  validationMessage = {\n    'name': [\n      { type: 'required', message: 'Name is required' },\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ],\n    'address':[\n      { type: 'required', message: 'Address is required' },\n    ],\n    'officialNumber': [\n      { type: 'required', message: 'Number is required' },\n      { type: 'minlength', message: 'Number too short ' },\n      { type: 'maxlength', message: 'Number is too large' },\n      { type: 'pattern', message: 'Company Number not valid' },\n    ],\n    'fax': [\n      { type: 'minlength', message: 'Fax number too short ' },\n      { type: 'maxlength', message: 'Fax no. is too large' },\n      { type: 'pattern', message: 'Fax Number not valid' },\n    ],\n    'outGoingMails':[\n      { type: 'pattern', message: 'Invalid Mail'},\n    ],\n    'taxNumber':[\n      { type: 'pattern', message: 'Invalid Taxation No.'},\n    ],\n    'panNumber':[\n      { type: 'pattern', message: 'Invalid PAN Number'},\n    ],\n    'bankAccNum':[\n      { type: 'maxlength', message: 'Account No. limit exceeded'},\n      { type: 'pattern', message: 'Invalid Account No.'},\n    ],\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\nisListAvaliable(){\n  try{\n    this.api.getBranchListData().subscribe((data) =>{\n      if(data.status === 'success'){\n        if(data.branch.length > 0 && this.util.branchesSatus !== 1){\n          this.router.navigateByUrl(\"/pages/branches/show-branches\");\n          this.util.branchesSatus = 0;\n        }\n      }\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\n//Check For Country Validation\ncountryName(){\n  if((document.getElementById('country')as HTMLInputElement).value === '-1'){\n   this.countryMsg = \"Country Name is Required\";\n   this.stateOption = false;\n  } else {\n    this.selectCountryName = (document.getElementById('country')as HTMLInputElement).value\n    this.countryMsg = '';\n    this.stateOption = true;\n    this.stateName();\n  }\n}\n// State Option Functionality\nstateName(){\n  if((document.getElementById('state')as HTMLInputElement) === null){\n    this.selectStateName = '';\n  } else if((document.getElementById('state')as HTMLInputElement).value === ''){\n    this.selectStateName = '';\n  } else {\n    this.selectStateName = (document.getElementById('state')as HTMLInputElement).value\n  }\n}\n\n}\n","<div class=\"card card-user\">\n    <div class=\"card-header\">\n      <h2 class=\"card-title\" #target>Branch Details</h2>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"col-sm-offset-2\">\n          <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{ errMsg }}</strong>\n          </p>\n        </div>\n\n        <div class=\"col-sm-offset-2\">\n          <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{ successMsg }}</strong>\n          </p>\n        </div>\n\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"branchForm\" (ngSubmit)=\"branchFormData()\" novalidate>\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Name (to appear on reports):&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n              <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Branch Name\" formControlName=\"name\"\n                >\n              <div *ngFor=\"let validation of validationMessage.name\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"branchForm.get('name').hasError(validation.type) && (branchForm.get('name').dirty || branchForm.get('name').touched)\"\n                  style=\"color: red;margin-left: 14px;\">\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n\n\n          <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Address:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n              <textarea class=\"form-control\" id=\"inputAddress\" placeholder=\"Address\" formControlName=\"address\"\n                ></textarea>\n              <div *ngFor=\"let validation of validationMessage.address\">\n                <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"branchForm.get('address').hasError(validation.type) && (branchForm.get('address').dirty || branchForm.get('address').touched)\"\n                  style=\"color: red;margin-left: 14px;\">\n                  {{ validation.message }}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-row\">\n            <div class=\"form-group col-md-6\">\n              <label class=\"col-sm-4 control-label\"><b>Country:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n              <select class=\"dropdown dropdown-toggle form-control\" id=\"country\" name =\"country\" (change)=\"countryName()\">\n              </select>\n              <div [ngStyle]=\"{display: countryMsg === undefined?'none':'block'}\" ><p style=\"color:red;\">{{countryMsg}}</p></div>\n            </div>\n            <div class=\"form-group col-md-6\" *ngIf=\"stateOption\">\n              <label class=\"col-sm-4 control-label\"><b>State:</b></label>\n              <select class=\"dropdown dropdown-toggle form-control\" name =\"state\" id =\"state\" (change)=\"stateName()\"></select>\n            </div>\n            <div class=\"form-group col-md-6\" *ngIf=\"!stateOption\">\n              <label class=\"col-sm-4 control-label\"><b>State:</b></label>\n              <select class=\"dropdown dropdown-toggle form-control\" disabled>\n                <option class=\"dropdown-item\">----Country Not Selected----</option>\n              </select>\n            </div>\n          </div>\n\n          <div class=\"form-row\">\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Email Address:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Email \" formControlName=\"email\"\n                    >\n                  <div *ngFor=\"let validation of validationMessage.email\">\n                    <div style=\"color: red;margin-left: 14px;\"\n                      *ngIf=\"branchForm.get('email').hasError(validation.type) && (branchForm.get('email').dirty || branchForm.get('email').touched)\"\n                      style=\"color: red;margin-left: 14px;\">\n                      {{ validation.message }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>BCC Address for all outgoing mails:</b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"email\" id=\"inputBcc\" placeholder=\"Enter BCC Address\"\n                    formControlName=\"outGoingMails\">\n                  <div *ngFor=\"let validation of validationMessage.outGoingMails\">\n                    <div style=\"color: red;margin-left: 14px;\"\n                      *ngIf=\"branchForm.get('outGoingMails').hasError(validation.type) && (branchForm.get('outGoingMails').dirty || branchForm.get('outGoingMails').touched)\"\n                      style=\"color: red;margin-left: 14px;\">\n                      {{ validation.message }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n          </div>\n\n\n          <div class=\"form-row\">\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Bank Name:</b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"email\" placeholder=\"Enter Bank Name \" formControlName=\"bankName\">\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Account Type:</b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"email\" placeholder=\"Enter Account Type\"\n                    formControlName=\"bankType\">\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-row\">\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Account No:</b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"inputFax\" placeholder=\"Enter Account Number:\" formControlName=\"bankAccNum\">\n                  <div *ngFor=\"let validation of validationMessage.bankAccNum\">\n                    <div style=\"color: red;margin-left: 14px;\"\n                      *ngIf=\"branchForm.get('bankAccNum').hasError(validation.type) && (branchForm.get('bankAccNum').dirty || branchForm.get('bankAccNum').touched)\"\n                      style=\"color: red;margin-left: 14px;\">\n                      {{ validation.message }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Official Branch Number:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"inputCompanyNo\" placeholder=\"Enter Official Branch Number\"\n                    formControlName=\"officialNumber\" >\n                  <div *ngFor=\"let validation of validationMessage.officialNumber\">\n                    <div style=\"color: red;margin-left: 14px;\"\n                      *ngIf=\"branchForm.get('officialNumber').hasError(validation.type) && (branchForm.get('officialNumber').dirty || branchForm.get('officialNumber').touched)\"\n                      style=\"color: red;margin-left: 14px;\">\n                      {{ validation.message }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-row\">\n            <div class=\"form-group col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Fax Number:</b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"inputFax\" placeholder=\"Enter Fax Number:\" formControlName=\"fax\">\n                  <div *ngFor=\"let validation of validationMessage.fax\">\n                    <div style=\"color: red;margin-left: 14px;\"\n                      *ngIf=\"branchForm.get('fax').hasError(validation.type) && (branchForm.get('fax').dirty || branchForm.get('fax').touched)\"\n                      style=\"color: red;margin-left: 14px;\">\n                      {{ validation.message }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Taxation No:</b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"inputTaxationno.\" placeholder=\"Enter Taxation Number\"\n                    formControlName=\"taxationNumber\">\n                  <div *ngFor=\"let validation of validationMessage.taxNumber\">\n                    <div style=\"color: red;margin-left: 14px;\"\n                      *ngIf=\"branchForm.get('taxationNumber').hasError(validation.type) && (branchForm.get('taxationNumber').dirty || branchForm.get('taxationNumber').touched)\"\n                      style=\"color: red;margin-left: 14px;\">\n                      {{ validation.message }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                  <label class=\"col-sm-6 control-label\"><b>PAN (Permanent Account Number):</b></label>\n                  <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" onkeyup=\"this.value = this.value.toUpperCase().trim();\" type=\"text\" id=\"inputPanno\" placeholder=\"Enter PAN Number\"\n                      formControlName=\"panNumber\">\n                    <div *ngFor=\"let validation of validationMessage.panNumber\">\n                      <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"branchForm.get('panNumber').hasError(validation.type) && (branchForm.get('panNumber').dirty || branchForm.get('panNumber').touched)\"\n                        style=\"color: red;margin-left: 14px;\">\n                        {{ validation.message }}\n                      </div>\n                    </div>\n                  </div>\n              </div>\n            </div>\n         </div>\n\n          <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n              <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"branchForm.invalid || countryMsg || countryMsg === undefined\" (click)=\"scroll(target)\">Add Branch</button>\n              <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"../show-branches\">Cancel</button>\n\n            </div>\n          </div>\n        </form>\n        </div>\n    </div>\n\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BranchService } from '../branch-service/branch.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\nimport { ApiService } from 'src/app/services/api.service';\n\n\n@Component({\n  selector: 'app-update-branch-data',\n  templateUrl: './update-branch-data.component.html',\n  styleUrls: ['./update-branch-data.component.scss']\n})\nexport class UpdateBranchDataComponent implements OnInit {\n\n  updateBranchForm: FormGroup;\n  getBranchList:any =Object;\n  branchData: Object[] = [];\n  snapshotParam: String;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: any = String;\n  errorMsg: boolean = false;\n  permissionInfo: any;\n\n\n  constructor(private route: ActivatedRoute, private api: BranchService, public fb: FormBuilder, private ngZone: NgZone,\n    private router: Router,\n    private util: UtilitiesService,\n    private currencyApi: ApiService) {\n      this.snapshotParam = this.route.snapshot.paramMap.get(\"branchId\");\n      this.util.moduleExists(this.snapshotParam,'Branches').subscribe((data)=>{\n        if(data.status === 'success'){\n          if(!data.data){\n            this.router.navigateByUrl('/pages/branches/show-branches');\n          }\n        }\n      })\n    }\n\n  ngOnInit() {\n    this.updateBranchDataValidate();\n    this.permissionInfo = this.util.permissionRoleInfo;\n    this.getExistingData();\n    if(this.permissionInfo.search('Edit Branch') === -1){\n      this.updateBranchForm.disable();\n    }\n  }\n\n  //Method for Validation\n  updateBranchDataValidate() {\n    try {\n      this.updateBranchForm = this.fb.group({\n        name: new FormControl('', Validators.compose([ Validators.required\n        ])),\n        officialNumber: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(15),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n        ])),\n        fax: new FormControl('', Validators.compose([\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n          Validators.minLength(10),\n          Validators.maxLength(10),\n        ])),\n        address: new FormControl('', Validators.required),\n        outGoingMails: new FormControl('', Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')),\n        taxationNumber: new FormControl(''),\n        panNumber: new FormControl('', Validators.pattern('(^[A-Za-z]{5}[0-9]{4}[A-Za-z]$)')),\n        bankName: new FormControl(''),\n        bankAccNum: new FormControl('',Validators.compose([Validators.maxLength(16),\n          Validators.pattern(/^[0-9]*$/)])),\n        bankType: new FormControl('')\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  scroll(element) {\n    element.scrollIntoView();\n  }\n\n  //Method for get existing data show on update form\n  getExistingData() {\n    try{\n      this.api.getBranchDetails(this.snapshotParam).subscribe((data) => {\n        if (data.status === \"success\") {\n          this.getBranchList = data.data;\n              this.updateBranchForm = this.fb.group({\n                name: new FormControl(this.getBranchList.name, Validators.compose([ Validators.required\n                ])),\n                officialNumber: new FormControl(this.getBranchList.officialNumber, Validators.compose([\n                  Validators.required,\n                  Validators.minLength(10),\n                  Validators.maxLength(15),\n                  Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n                ])),\n                fax: new FormControl(this.getBranchList.fax, Validators.compose([\n                  Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n                  Validators.minLength(10),\n                  Validators.maxLength(10),\n                ])),\n                address: new FormControl(this.getBranchList.address, Validators.required),\n                outGoingMails: new FormControl(this.getBranchList.outGoingMails, Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')),\n                taxationNumber: new FormControl(this.getBranchList.taxationNumber),\n                panNumber: new FormControl(this.getBranchList.panNumber, Validators.pattern('(^[A-Za-z]{5}[0-9]{4}[A-Za-z]$)')),\n                bankName: new FormControl(this.getBranchList.bankDetails.bankName),\n                bankAccNum: new FormControl(this.getBranchList.bankDetails.bankAccNum,Validators.compose([Validators.maxLength(16),\n                  Validators.pattern(/^[0-9]*$/)])),\n                bankType: new FormControl(this.getBranchList.bankDetails.bankType)\n              })\n        }\n      })\n    } catch(err){\n      console.log(err);\n    }\n\n  }\n\n  //Method for submit updated form data\n  updateBranchFormData() {\n    try {\n      let cleanUpdateBranchForm = this.util.cleanFormLevelOne(this.updateBranchForm);\n      if (this.updateBranchForm.valid) {\n        this.api.submitUpdatedData(cleanUpdateBranchForm.value, this.snapshotParam).subscribe(data => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n              this.router.navigateByUrl(\"/pages/branches/show-branches\");\n            }, 2000);\n          }\n          else if (data.status === \"error\" || data.status === 404) {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n            },3000)\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method for show validdation message\n  validationMessage = {\n    'name':[{ type: 'required', message: 'Name is Required ' }],\n    'address':[{ type: 'required', message: 'Address is Required ' }],\n    'officialNumber': [\n      { type: 'required', message: 'Official Number is Required ' },\n      { type: 'minlength', message: 'Number too short ' },\n      { type: 'maxlength', message: 'Number is too large' },\n      { type: 'pattern', message: 'Company Number not valid' },\n    ],\n    'fax': [\n      { type: 'minlength', message: 'Fax number too short ' },\n      { type: 'maxlength', message: 'Fax no. is too large' },\n      { type: 'pattern', message: 'Fax Number not valid' },\n    ],\n    'outGoingMails': [\n      { type: 'pattern', message: 'Invalid Mail' },\n    ],\n    'taxNumber':[\n      { type: 'pattern', message: 'Invalid Taxation No.'},\n    ],\n    'panNumber':[\n      { type: 'pattern', message: 'Invalid PAN Number'},\n    ],\n    'bankAccNum':[\n      { type: 'maxlength', message: 'Account No. limit exceeded'},\n      { type: 'pattern', message: 'Invalid Account No.'},\n    ],\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n}\n","<div class=\"card card-user\">\n        <div class=\"card-header\">\n          <h2 class=\"card-title\" #target style=\"text-align: center\">Update Branch Details</h2>\n        </div>\n        <div class=\"card-body\">\n            <div class=\"col-sm-offset-2\">\n              <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                <strong>{{errMsg}}</strong>\n              </p>\n            </div>\n            <div class=\"col-sm-offset-2\">\n              <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                <strong>{{successMsg}}</strong>\n              </p>\n            </div>\n\n            <form class=\"form-horizontal\"  [formGroup]=\"updateBranchForm\" (ngSubmit)=\"updateBranchFormData()\">\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Name (to appear on reports):&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Branch Name\" formControlName=\"name\"\n                    >\n                    <div *ngFor=\"let validation of validationMessage.name\">\n                      <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"updateBranchForm.get('name').hasError(validation.type) && (updateBranchForm.get('name').dirty || updateBranchForm.get('name').touched)\"\n                        >\n                        {{ validation.message }}\n                      </div>\n                    </div>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Address:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                  <textarea class=\"form-control\" id=\"inputAddress\" placeholder=\"Address\" formControlName=\"address\"\n                    ></textarea>\n                    <div *ngFor=\"let validation of validationMessage.address\">\n                      <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"updateBranchForm.get('address').hasError(validation.type) && (updateBranchForm.get('address').dirty || updateBranchForm.get('address').touched)\"\n                        >\n                        {{ validation.message }}\n                      </div>\n                    </div>\n                </div>\n              </div>\n\n              <div class=\"form-row\">\n                <div class=\"form-group col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>BCC Address for all outgoing mails:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"email\" id=\"inputBcc\" placeholder=\"Enter BCC Address\"\n                        formControlName=\"outGoingMails\">\n                      <div *ngFor=\"let validation of validationMessage.outGoingMails\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                          *ngIf=\"updateBranchForm.get('outGoingMails').hasError(validation.type) && (updateBranchForm.get('outGoingMails').dirty || updateBranchForm.get('outGoingMails').touched)\"\n                          style=\"color: red;margin-left: 14px;\">\n                          {{ validation.message }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                </div>\n                <div class=\"form-group col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Bank Name:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"text\" placeholder=\"Enter Bank Name\"\n                        formControlName=\"bankName\">\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"form-row\">\n                <div class=\"form-group col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Account Type:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"text\" placeholder=\"Enter Account Type\"\n                        formControlName=\"bankType\">\n                    </div>\n                  </div>\n                </div>\n                <div class=\"form-group col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Account Number:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"email\" placeholder=\"Enter Account Number\"\n                        formControlName=\"bankAccNum\">\n                      <div *ngFor=\"let validation of validationMessage.bankAccNum\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                          *ngIf=\"updateBranchForm.get('bankAccNum').hasError(validation.type) && (updateBranchForm.get('bankAccNum').dirty || updateBranchForm.get('bankAccNum').touched)\"\n                          style=\"color: red;margin-left: 14px;\">\n                          {{ validation.message }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"form-row\">\n                <div class=\"form-group col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Fax Number:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"text\" id=\"inputFax\" placeholder=\"Enter Fax Number:\" formControlName=\"fax\" >\n                      <div *ngFor=\"let validation of validationMessage.fax\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                          *ngIf=\"updateBranchForm.get('fax').hasError(validation.type) && (updateBranchForm.get('fax').dirty || updateBranchForm.get('fax').touched)\"\n                          style=\"color: red;margin-left: 14px;\">\n                          {{ validation.message }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"form-group col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Official Branch Number:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"text\" id=\"inputCompanyNo\" placeholder=\"Enter Official Branch Number\"\n                        formControlName=\"officialNumber\" >\n                      <div *ngFor=\"let validation of validationMessage.officialNumber\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                          *ngIf=\"updateBranchForm.get('officialNumber').hasError(validation.type) && (updateBranchForm.get('officialNumber').dirty || updateBranchForm.get('officialNumber').touched)\"\n                          style=\"color: red;margin-left: 14px;\">\n                          {{ validation.message }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"form-row\">\n                <div class=\"col-md-6\">\n                  <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Taxation No:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                      <input class=\"form-control\" type=\"text\" id=\"inputTaxationno.\" placeholder=\"Enter Taxation Number\"\n                        formControlName=\"taxationNumber\">\n                      <div *ngFor=\"let validation of validationMessage.taxNumber\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                          *ngIf=\"updateBranchForm.get('taxationNumber').hasError(validation.type) && (updateBranchForm.get('taxationNumber').dirty || updateBranchForm.get('taxationNumber').touched)\"\n                          style=\"color: red;margin-left: 14px;\">\n                          {{ validation.message }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-md-6\">\n                  <div class=\"form-group\">\n                      <label class=\"col-sm-6 control-label\"><b>PAN (Permanent Account Number):</b></label>\n                      <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" onkeyup=\"this.value = this.value.toUpperCase().trim();\" type=\"text\" id=\"inputPanno\" placeholder=\"Enter PAN Number\"\n                          formControlName=\"panNumber\">\n                        <div *ngFor=\"let validation of validationMessage.panNumber\">\n                          <div style=\"color: red;margin-left: 14px;\"\n                            *ngIf=\"updateBranchForm.get('panNumber').hasError(validation.type) && (updateBranchForm.get('panNumber').dirty || updateBranchForm.get('panNumber').touched)\"\n                            style=\"color: red;margin-left: 14px;\">\n                            {{ validation.message }}\n                          </div>\n                        </div>\n                      </div>\n                  </div>\n                </div>\n             </div>\n              <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                  <button type=\"submit\" class=\"btn btn-success\" (click)=\"scroll(target)\" [disabled]=\"updateBranchForm.invalid || permissionInfo.search('Edit Branch')=== -1\" >Update Branch</button>\n                  <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../../show-branches\" >Cancel</button>\n                </div>\n              </div>\n            </form>\n            </div>\n        </div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BranchService } from '../../branch-service/branch.service';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-show-departments',\n  templateUrl: './show-departments.component.html',\n  styleUrls: ['./show-departments.component.scss']\n})\nexport class ShowDepartmentsComponent implements OnInit {\n\n  snapshotParam: String;\n  departmentList= new Array();\n  showDepartmentCard = {};\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private api: BranchService,\n    private ngZone: NgZone, ) { }\n\n  ngOnInit() {\n    this.getDepartmentListData();\n  }\n\n  navigate() {\n    this.router.navigateByUrl(`/pages/branches/add-department/${this.snapshotParam}`)\n  }\n\n  getDepartmentListData() {\n    try {\n      this.snapshotParam = this.route.snapshot.paramMap.get(\"branchId\");\n      this.api.getDepartmentData(this.snapshotParam).subscribe((data) => {\n        if (data.status === \"success\" || data.status === 200) {\n          this.departmentList = data.department;\n          const len = Object.keys(data.department).length;\n          for (var i = 0; i < len; i++) {\n            this.showDepartmentCard[this.departmentList[i]._id] = true;\n          }\n        }\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method for onclick data show when collapse\n  showData(departmentId: String) {\n    try {\n      this.showDepartmentCard[`${departmentId}`] = !this.showDepartmentCard[`${departmentId}`];\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for remove company branch\n  deleteList(departmentId: String) {\n    try {\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeDepartmentData(departmentId).subscribe((data) => {\n            if (data.status === \"success\" || data.status === 200) {\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                data.message,\n                'success'\n              )\n              this.ngZone.run(() => {\n                this.router.navigateByUrl(`/pages/branches/show-departments/${this.snapshotParam}`);\n              })\n              this.getDepartmentListData();\n            }\n          })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your list data safe',\n            'error'\n          )\n        }\n      })\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n}\n","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Departments List</h2>\n        <button class=\"btn btn-primary\" (click)=\"navigate()\"  style=\"float: right;\"><i\n                class=\"fa fa-plus-square\"></i>&nbsp; Add Department</button>\n    </div>\n\n    <div class=\"panel-body\">\n            <ul class=\"list-group\">\n                <li class=\"list-group-item\" *ngFor=\"let list of departmentList\">\n                    <strong><b (click)=\"showData(list._id)\" style=\"cursor: pointer\">{{ list.title }}</b></strong>\n                    <div style=\"float: right;\">\n                        <i class=\"dropdown-toggle\" (click)=\"showData(list._id)\"></i>\n                    </div>\n                    <div class=\"card\" style=\"background-color:ghostwhite\" [hidden]=\"showDepartmentCard[list._id]\">\n                        <table class=\"table\" style=\"margin: auto\">\n                            <tr>\n                                <th>Title:</th>\n                                <td>{{ list.title }}</td>\n                            </tr>\n                            <tr>\n                                <th>Description:</th>\n                                <td>{{ list.description }}</td>\n                            </tr>\n                        </table>\n                        <div>\n                            <a  routerLink=\"../../update-department/{{ snapshotParam }}/{{ list._id}}\" style=\"float: right\" class=\"btn btn-primary\">\n                                <i class=\"fa fa-pencil-square-o\"></i>&nbsp;\n                                update\n                            </a>\n                            <button style=\"float: right;\" class=\"btn btn-danger\" type=\"button\"\n                               (click)=deleteList(list._id)  >\n                                <i class=\"fa fa-trash\"></i>&nbsp; Delete\n                            </button>\n                        </div>\n                    </div>\n                </li>\n            </ul>\n        </div> \n</div>"]}