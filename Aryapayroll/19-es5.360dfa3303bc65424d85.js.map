{"version":3,"sources":["webpack:///src/app/pages/holiday/holiday.component.ts","webpack:///src/app/pages/holiday/holiday-service/holiday-api.service.ts","webpack:///src/app/pages/holiday/holiday.component.html","webpack:///src/app/pages/holiday/list-holiday/list-holiday.component.html","webpack:///src/app/pages/holiday/list-holiday/list-holiday.component.ts","webpack:///src/app/pages/holiday/add-holiday/add-holiday.component.html","webpack:///src/app/pages/holiday/update-holiday/update-holiday.component.html","webpack:///src/app/pages/holiday/holiday-routing.module.ts","webpack:///src/app/pages/holiday/update-holiday/update-holiday.component.ts","webpack:///src/app/pages/holiday/add-holiday/add-holiday.component.ts","webpack:///src/app/pages/holiday/holiday.module.ts"],"names":["HolidayComponent","HolidayApiService","http","endpoint","environment","apiBaseUrl","headers","set","error","errorMessage","ErrorEvent","message","status","console","log","throwError","err","companyId","sessionStorage","getItem","this","get","pipe","catchError","errorMgmt","holidayId","data","post","ListHolidayComponent","api","route","_Activatedroute","util","showCard","leaveListData","Array","companyShowData","holidayList","permissionInfo","permissionRoleInfo","getHoliday","subscribe","Object","keys","length","navigateByUrl","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","type","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","value","removeData","dismiss","DismissReason","cancel","holidaysStatus","addHolidays","UpdateHolidayComponent","AddHolidayComponent","HolidayModule","HolidayRoutingModule","path","component","canActivate","children","_api","fb","ngZone","router","successMessage","errorMsg","holidayName","validationMessage","isListAvaliable","companyDataValidate","search","holidayForm","disable","group","required","holidayDate","cleanHolidayForm","cleanFormLevelOne","addHoliday","successMsg","setTimeout","handleErrors","run","errMsg","holidayDataSubmit","leaveData","snapshot","paramMap","moduleExists","existingData","holidayDetails","holidatList","substring","cleanHolidayUpdateForm","updateHoliday","updateHolidayList","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-holiday',\n  templateUrl: './holiday.component.html',\n  styleUrls: ['./holiday.component.scss']\n})\nexport class HolidayComponent implements OnInit {\n\n  constructor(){\n\n  }\n  ngOnInit(){\n    \n  }\n \n\n}","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { Holiday } from '../../../auth/holiday';\nimport { updateHoliday } from '../../../auth/updateHoliday';\nimport { environment } from '../../../../environments/environment';\n \n@Injectable({\n  providedIn: 'root'\n})\n\nexport class HolidayApiService {\n\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n  /**Create method for manage errors when request and return response from the server*/\n  errorMgmt(error: HttpErrorResponse) {\n    try {\n      let errorMessage = '';\n      /** Handle client side error */\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      }\n      /** Handle server side error */\n      else {\n        errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n      }\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  /**Create Method for Get Company Holiday  */\n  getHoliday(): Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiURL = `${this.endpoint}/company/list-all-holidays/${companyId}`;\n       return this.http.get(apiURL).pipe(\n         catchError(this.errorMgmt)\n      )\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  // Get Individual Holiday List\n  holidayDetails(holidayId:string): Observable<any> {\n    try {\n      \n      let apiURL = `${this.endpoint}/company/holiday-details/${holidayId}`;\n       return this.http.get(apiURL).pipe(\n         catchError(this.errorMgmt)\n      )\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  /** Method for get data from company for Holiday */\n  addHoliday(data:Holiday): Observable<any> {\n    try{\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiURL = `${this.endpoint}/company/add-holiday/${companyId}`;\n      return this.http.post(apiURL,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n\n  /** Method for Update Holiday type  */\n  updateHoliday(data:updateHoliday, holidayId:string,):Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiURL = `${this.endpoint}/company/update-holiday/${companyId}/${holidayId}`;\n      return this.http.post(apiURL,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n\n  /**Method for delete (remove) Holiday type */\n  removeData(holidayId:String):Observable<any>{\n    try{\n      let apiURL = `${this.endpoint}/company/delete-holiday/${holidayId}`;\n      return this.http.delete(apiURL).pipe(\n        catchError(this.errorMgmt)\n      )   \n    }\n    catch(err){\n      console.log(err);\n    }\n  }\n}\n","<router-outlet></router-outlet>","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Holidays List</h2>\n        <button [disabled]=\"permissionInfo.search('Create Holiday') === -1\"\n         class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/holiday/add-holiday\"\n            style=\"float: right;\" (click)=\"addHolidays()\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Holiday</button\n            >\n    </div>\n    <table class=\"table\" style=\"text-align: center;\">\n        <thead class=\" text-primary\">\n            <tr>\n            <th> S.No </th>\n            <th> Title </th>\n            <th>Holiday Date</th>\n            <th> Type </th>\n            <th> Action </th>\n            </tr>\n        </thead>\n        <tbody *ngFor=\"let list of leaveListData; let i = index\">\n            <tr >\n            <td><b>{{ i+1 }}.</b></td>\n            <td> {{ list.title }} </td>\n            <td > {{list.holidayDate |  date }}</td>\n            <td> {{ list.type }} </td>\n            <td>\n                <a [class.disabled]=\"permissionInfo.search('Edit Holiday') === -1\"\n                routerLink=\"/pages/holiday/update-holiday/{{list._id}}\" class=\"btn btn-primary\">\n                    <i class=\"fa fa-pencil-square-o\"></i></a>&nbsp;\n                <button [disabled]=\"permissionInfo.search('Delete Holiday') === -1\"\n                class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\">\n                    <i class=\"fa fa-trash\"></i>\n                </button>\n            </td>\n            </tr>\n    </table>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { HolidayApiService } from '../holiday-service/holiday-api.service';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component ({\n    selector: 'app-list-holidays',\n    templateUrl: './list-holiday.component.html'\n})\n\nexport class ListHolidayComponent implements OnInit {\n\n    showCard = {};\n    leaveListData = new Array();\n    companyShowData = [];\n  permissionInfo: any;\n\n    constructor(private api: HolidayApiService,public route:Router, private _Activatedroute:ActivatedRoute, private util:UtilitiesService) {}\n\n    ngOnInit(){\n      this.holidayList();\n      this.permissionInfo = this.util.permissionRoleInfo;\n    }\n\n    holidayList(){\n      try{\n        this.api.getHoliday().subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.leaveListData = data.data;\n             const len = Object.keys(this.leaveListData).length;\n            if(len == 0){\n               this.route.navigateByUrl(\"pages/holiday/add-holiday\");\n            }else{\n              this.leaveListData = data.data;\n            }\n          }\n        })\n      }catch(err){\n        console.log(err.message);\n      }\n    }\n\n    showConfirmationMessage(holidayId:String){\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeData(holidayId).subscribe((data)=>{\n            if(data.status === \"success\" || data.status === 200){\n          swalWithBootstrapButtons.fire(\n            'Deleted!',\n            data.message,\n            'success'\n          )\n          this.holidayList();\n            }\n        })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your data is safe',\n            'error'\n          )\n        }\n      })\n    }\n    addHolidays(){\n      try{\n        this.util.holidaysStatus = 1;\n      }catch(err){\n        console.log(err)\n      }\n    }\n}","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Holiday Details</h2>\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{ errMsg }}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{ successMsg }}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"holidayForm\" (ngSubmit)=\"holidayDataSubmit()\">\n         <div class=\"row\">\n            <div class=\"col-md\">\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Title :&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"holidayName\" placeholder=\"Enter Holiday Title\"\n                  formControlName=\"title\" required>\n               <div *ngFor=\"let validation of validationMessage.title\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"holidayForm.get('title').hasError(validation.type) && (holidayForm.get('title').dirty || holidayForm.get('title').touched)\"\n                     style=\"color: red;margin-left: 14px;\">\n                     {{ validation.message }}\n                  </div>\n               </div>\n            </div>\n         </div>\n      </div>\n      <div class=\"col-md\">\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Date:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"date\" id=\"date\" placeholder=\"Enter Date\" formControlName=\"holidayDate\" required>\n               <div *ngFor=\"let validation of validationMessage.holidayDate\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"holidayForm.get('holidayDate').hasError(validation.type) && (holidayForm.get('holidayDate').dirty || holidayForm.get('holidayDate').touched)\"\n                     style=\"color: red;margin-left: 14px;\">\n                     {{ validation.message }}\n                  </div>\n               </div>\n            </div>\n         </div>\n      </div>\n      <div class=\"col-md\">\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Type :&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <select id=\"htype\" class=\"dropdown dropdown-toggle form-control\" formControlName=\"type\" style=\"width:100%; height: 40px;\">\n                  <option ng-selected=\"true\" value=\"\" disabled>----------Select Holiday Type----------</option>\n                  <option *ngFor=\"let type of holidayName\" [value]=\"type\">{{type}}</option>\n               </select>\n               <div *ngFor=\"let validation of validationMessage.type\">\n                  <div style=\"color: red;margin-left: 14px;\" *ngIf=\"holidayForm.get('type').hasError(validation.type) && (holidayForm.get('type').dirty || holidayForm.get('type').touched)\" style=\"color: red;margin-left: 14px;\">\n                        {{ validation.message }}\n                  </div>\n               </div>\n            </div>\n         </div>\n         </div>\n      </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"holidayForm.invalid || permissionInfo.search('Create Holiday') === -1\">Submit</button>\n            <button type=\"button\" routerLink=\"../list-holiday\" class=\"btn btn-danger\">Cancel</button>\n\n            </div>\n         </div>\n      </form>\n   </div>\n</div>\n\n","<div class=\"card card-user\">\n   <div class=\"card-header\">\n       <h2 class=\"card-title text-center\">Update Holiday</h2>\n       <!-- <button type=\"button\" class=\"btn btn-primary btn-circle\" routerLink=\"../../list-holiday\"  style=\"float: right;\" ><i class=\"fa  fa-arrow-right\"></i></button> -->\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n             <strong>{{ errMsg }}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n          <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n             <strong>{{ successMsg }}</strong>\n          </p>\n      </div>\n   <form class=\"form-horizontal\" [formGroup]=\"holidayForm\" (ngSubmit)=\"updateHolidayList()\">\n   <div class=\"row\">\n      <div class=\"col-md\">\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Title: &nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"title\" placeholder=\"Enter Title\" formControlName=\"title\">\n               <div *ngFor=\"let validation of validationMessage.title\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"holidayForm.get('title').hasError(validation.type) && (holidayForm.get('title').dirty || holidayForm.get('title').touched)\"\n                     style=\"color: red;margin-left: 14px;\">\n                     {{ validation.message }}\n                  </div>\n               </div>\n            </div>\n         </div>\n      </div>\n      <div class=\"col-md\">\n            <div class=\"form-group\">\n                  <label class=\"col-sm-6 control-label\"><b>Date: &nbsp;<span style=\"color: darkred\">*</span></b></label>\n                  <div class=\"col-sm-offset-2\">\n                     <input class=\"form-control\" type=\"date\" id=\"holidayDate\" placeholder=\"Enter Date\" formControlName=\"holidayDate\">\n                     <div *ngFor=\"let validation of validationMessage.holidayDate\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                           *ngIf=\"holidayForm.get('holidayDate').hasError(validation.type) && (holidayForm.get('holidayDate').dirty || holidayForm.get('holidayDate').touched)\"\n                           style=\"color: red;margin-left: 14px;\">\n                           {{ validation.message }}\n                        </div>\n                     </div>\n                  </div>\n               </div>\n      </div>\n      <div class=\"col-md\">\n            <div class=\"form-group\">\n                  <label class=\"col-sm-6 control-label\"><b>Type: &nbsp;<span style=\"color: darkred\">*</span></b></label>\n                  <div class=\"col-sm-offset-2\">\n                  <select id=\"htype\" class=\"dropdown dropdown-toggle form-control\" formControlName=\"type\" style=\"width:100%; height: 40px;\">\n                     <option ng-selected=\"true\" value=\"\" disabled>----------Select Holiday Type----------</option>\n                     <option *ngFor=\"let h of holidayName\" [value]=\"h\">{{h}}</option>\n                  </select>\n                  <div *ngFor=\"let validation of validationMessage.type\">\n                     <div style=\"color: red;margin-left: 14px;\" *ngIf=\"holidayForm.get('type').hasError(validation.type) && (holidayForm.get('type').dirty || holidayForm.get('type').touched)\" style=\"color: red;margin-left: 14px;\">\n                           {{ validation.message }}\n                     </div>\n                  </div>\n               </div>\n               </div>\n      </div>\n\n   </div>\n      <div class=\"form-group\">\n         <div class=\"col-sm-offset-2 col-sm-10\">\n            <button [disabled]=\"permissionInfo.search('Edit Holiday') === -1 || holidayForm.invalid\"\n             type=\"submit\" class=\"btn btn-success\">Update</button>\n            <button type=\"button\" routerLink=\"../../list-holiday\" class=\"btn btn-danger\">Cancel</button>\n         </div>\n      </div>\n   </form>\n   </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HolidayComponent } from './holiday.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListHolidayComponent } from './list-holiday/list-holiday.component';\nimport { AddHolidayComponent } from './add-holiday/add-holiday.component';\nimport { UpdateHolidayComponent } from './update-holiday/update-holiday.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : HolidayComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-holiday',\n        component: ListHolidayComponent,\n      },\n      {\n        path: 'add-holiday',\n        component: AddHolidayComponent\n      },\n      {\n        path: 'update-holiday/:holidayId',\n        component: UpdateHolidayComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-holiday',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class HolidayRoutingModule { }","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HolidayApiService } from '../holiday-service/holiday-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-holiday',\n  templateUrl: 'update-holiday.component.html'\n})\n\nexport class UpdateHolidayComponent implements OnInit {\n\n  holidayForm: any;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  companyNameStore: [];\n  showCard: any;\n  companyNameId: any;\n  public companyName: [];\n  public companyId: any;\n  public holidayId: any;\n  public leaveId;\n  leaveData: Object[] = [];\n  holidayData: Object;\n  lastVal: [];\n  public holidayName = ['NATIONAL', 'STATE', 'WEEKLY', 'FESTIVAL'];\n  holidatList: any;\n  permissionInfo: any;\n\n  constructor(\n    public fb: FormBuilder,\n    private router: Router, private ngZone: NgZone, private route: ActivatedRoute,\n    private api: HolidayApiService,\n    private util: UtilitiesService) {\n      this.holidayId = this.route.snapshot.paramMap.get(\"holidayId\");\n      this.util.moduleExists(this.holidayId,'Holidays').subscribe((data)=>{\n        if(data.status === 'success'){\n          if(!data.data){\n            this.router.navigateByUrl('/pages/holiday/list-holiday');\n          }\n        }\n      })\n    }\n\n  ngOnInit() {\n    this.companyDataValidate();\n    this.existingData();\n    this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Edit Holiday') === -1){\n        this.holidayForm.disable();\n      }\n  }\n\n  existingData(){\n    this.api.holidayDetails(this.holidayId).subscribe(data=>{\n      this.holidatList = data.data;\n        this.holidayForm = this.fb.group({\n          title: new FormControl(this.holidatList.title,Validators.required),\n          holidayDate: new FormControl(this.holidatList.holidayDate.substring(0,10),Validators.required),\n          type: new FormControl (this.holidatList.type,Validators.required)\n        })\n    })\n  }\n\n  companyDataValidate() {\n    try {\n      this.holidayForm = this.fb.group({\n        title: new FormControl('',Validators.required),\n        holidayDate: new FormControl('',Validators.required),\n        type: new FormControl ('',Validators.required)\n      })\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  validationMessage = {\n    'title':[{\n      type: 'required', message: 'Holiday Title is Required'\n    },],\n    'holidayDate':[\n      {type:'required',message: 'Holiday Date is Required'},\n    ],\n    'type':[\n      {type:'required', message: 'Holiday Type is Required'}\n    ],\n  }\n\n  updateHolidayList() {\n    try {\n      let cleanHolidayUpdateForm = this.util.cleanFormLevelOne(this.holidayForm);\n      if (this.holidayForm.value) {\n        this.api.updateHoliday(cleanHolidayUpdateForm.value,this.holidayId).subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n              this.ngZone.run(() => this.router.navigateByUrl('/pages/holiday/list-holiday'));\n            },2000);\n          } else if (data.status == \"error\") {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n            },3000);\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n}","import { Component, OnInit,NgZone } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { HolidayApiService } from '../holiday-service/holiday-api.service';\nimport { ApiService } from '../../../services/api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n    selector: 'app-add-holiday',\n    templateUrl: './add-holiday.component.html'\n})\n\nexport class AddHolidayComponent implements OnInit {\n\n    holidayForm: FormGroup;\n    successMsg: String;\n    successMessage: boolean = false;\n    errMsg: String;\n    errorMsg: boolean = false;\n    companyNameStore: any;\n    showCard: any;\n    companyListData: Object;\n    companyNameId: any;\n    public holidayName = ['NATIONAL', 'STATE', 'WEEKLY', 'FESTIVAL'];\n    public companyId: any;\n  permissionInfo: any;\n\n    constructor(private _api: ApiService,\n      public fb: FormBuilder,\n      private ngZone: NgZone,\n      private router: Router,\n      private api: HolidayApiService,\n      private util: UtilitiesService){\n        this.isListAvaliable();\n      }\n\n    ngOnInit() {\n      this.companyDataValidate();\n      this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Create Holiday') === -1){\n        this.holidayForm.disable();\n      }\n    }\n\n    companyDataValidate() {\n      try {\n        this.holidayForm = this.fb.group({\n          title: new FormControl('',Validators.required),\n          holidayDate: new FormControl('',Validators.required),\n          type: new FormControl('',Validators.required)\n          })\n        }\n      catch (err) {\n        console.log(err);\n      }\n    }\n\n    holidayDataSubmit() {\n      try{\n        let cleanHolidayForm = this.util.cleanFormLevelOne(this.holidayForm);\n        if (this.holidayForm.value) {\n          this.api.addHoliday(cleanHolidayForm.value).subscribe((data) => {\n            if(data.status === \"success\" || data.status === 200){\n              this.successMessage = true ;\n              this.errorMsg = false ;\n              this.successMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n                this.ngZone.run(()=>this.router.navigateByUrl('/pages/holiday/list-holiday'));\n              },2000);\n            }\n            else if(data.status === \"error\"|| data.status === 404){\n              this.errorMsg = true;\n              this.successMessage = false;\n              this.errMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n              },3000);\n            }\n          })\n        }\n      } catch(err){\n        console.log(err);\n      }\n\n    }\n\n    validationMessage = {\n      'title':[{\n        type: 'required', message: 'Holiday Title is Required'\n      },],\n      'holidayDate':[\n        {type:'required',message: 'Holiday Date is Required'},\n      ],\n      'type':[\n        {type:'required', message: 'Holiday Type is Required'}\n      ],\n    }\n\n    handleErrors(){\n      this.errorMsg = false;\n      this.successMessage = false;\n      this.errMsg = '';\n      this.successMsg = '';\n  }\n  isListAvaliable(){\n    try{\n      this.api.getHoliday().subscribe((data) =>{\n        if(data.status === 'success'){\n          if(data.data.length > 0 && this.util.holidaysStatus !== 1){\n            this.router.navigateByUrl(\"/pages/holiday/list-holiday\");\n            this.util.holidaysStatus = 0;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HolidayRoutingModule } from './holiday-routing.module';\nimport { HolidayComponent } from './holiday.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListHolidayComponent } from './list-holiday/list-holiday.component';\nimport { AddHolidayComponent } from './add-holiday/add-holiday.component';\nimport { UpdateHolidayComponent } from './update-holiday/update-holiday.component';\n\n\n@NgModule({\n  declarations: [\n     HolidayComponent,\n     ListHolidayComponent,\n     AddHolidayComponent,\n     UpdateHolidayComponent\n    ],\n  \n  imports: [\n    CommonModule,\n    HolidayRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\nexport class HolidayModule { }\n"]}