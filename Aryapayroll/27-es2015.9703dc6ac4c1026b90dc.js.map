{"version":3,"sources":["webpack:///src/app/pages/skill-category/skill-category.component.ts","webpack:///src/app/pages/skill-category/skill-category.component.html","webpack:///src/app/pages/skill-category/list-skill-category/list-skill-category.component.html","webpack:///src/app/pages/skill-category/list-skill-category/list-skill-category.component.ts","webpack:///src/app/pages/skill-category/add-skill-category/add-skill-category.component.html","webpack:///src/app/pages/skill-category/update-skill-category/update-skill-category.component.html","webpack:///src/app/pages/skill-category/skill-category-routing.module.ts","webpack:///src/app/pages/skill-category/add-skill-category/add-skill-category.component.ts","webpack:///src/app/pages/skill-category/update-skill-category/update-skill-category.component.ts","webpack:///src/app/pages/skill-category/skill-category.module.ts"],"names":["SkillCategoryComponent","ListSkillCategoryComponent","api","route","_Activatedroute","util","showCard","leaveListData","companyShowData","this","leaveList","permissionInfo","permissionRoleInfo","skillCategoryData","subscribe","data","status","skillCategory","length","navigateByUrl","err","console","log","message","skillCategoryId","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","type","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","value","removeData","dismiss","DismissReason","cancel","skillCategoryStatus","addSkillCategory","path","component","canActivate","children","AddSkillCategoryComponent","_api","fb","ngZone","router","apiService","successMsg","String","successMessage","errMsg","errorMsg","companyListData","companyName","demo","validationMessage","isListAvaliable","getCategoryList","companyDataValidate","search","skillForm","disable","group","skillName","required","categoryId","getListData","companyNameStore","company","getJobCategoryData","categoryList","jobCategory","companyId","cleanSkillCategoryForm","cleanFormLevelOne","addSkillCategoy","setTimeout","handleErrors","run","skillData","UpdateSkillCategoryComponent","leaveData","leaveFormData","snapshot","paramMap","get","moduleExists","existingData","skillCategoryDetails","existinglist","cleanSkillCategoryUpdateForm","updateSkillCategory","skillDataUpdate","redirectTo","pathMatch","SkillCategoryRoutingModule","forChild","SkillCategoryModule"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-skill-category',\n  templateUrl: './skill-category.component.html',\n  styleUrls: ['./skill-category.component.scss']\n})\nexport class SkillCategoryComponent implements OnInit {\n\n  constructor(){\n\n  }\n  ngOnInit(){\n\n  }\n \n\n}","<router-outlet></router-outlet>","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Skill Category</h2>\n        <button [disabled]=\"permissionInfo.search('Create SkillCategory') === -1\"\n         class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/skill-category/add-skill-category\"style=\"float: right;\" (click)= \"addSkillCategory()\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add skill Category</button\n            >\n    </div>\n    <!-- <div class=\"panel-body\">\n        <ul class=\"list-group\">\n            <li class=\"list-group-item\" *ngFor=\"let list of leaveListData\">\n                <div class=\"row\">\n                    <div class=\"col-md-10\">\n                        <p><b>Skill Name: </b> {{list?.skillName}} </p>\n                    </div>\n                    <div class=\"cpl-md-2\">\n                        <a routerLink=\"/pages/skill-category/update-skill-category/{{list?._id}}\"style=\"float: right\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>\n                        <button style=\"float: right;\" class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i></button>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div> -->\n    <table class=\"table\" style=\"text-align: center;\">\n        <thead class=\" text-primary\">\n            <tr>\n            <th> S.No </th>\n            <th> Skill Name </th>\n            </tr>\n        </thead>\n        <tbody *ngFor=\"let list of leaveListData; let i = index\">\n            <tr >\n            <td><b>{{ i+1 }}.</b></td>\n            <td> {{ list.skillName }} </td>\n            <td>\n                <a [class.disabled]=\"permissionInfo.search('Edit SkillCategory') === -1\"\n                routerLink=\"/pages/skill-category/update-skill-category/{{list?._id}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>&nbsp;\n                <button [disabled]=\"permissionInfo.search('Delete SkillCategory') === -1\"\n                 class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i></button\n                    >\n            </td>\n            </tr>\n    </table>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { skillCategoryApiService } from '../skillCategory-service/skillCategory-api.service';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component ({\n    selector: 'app-list-skill-category',\n    templateUrl: './list-skill-category.component.html',\n})\n\nexport class ListSkillCategoryComponent implements OnInit {\n\n    showCard = {};\n    // leaveListData: Object;\n    leaveListData:any =[];\n    companyShowData: any = [];\n  permissionInfo: any;\n\n    constructor(private api: skillCategoryApiService,\n       public route:Router,\n       private _Activatedroute:ActivatedRoute,\n       private util: UtilitiesService) {}\n\n    ngOnInit() {\n      this.leaveList();\n      this.permissionInfo = this.util.permissionRoleInfo\n    }\n\n    leaveList() {\n      try{\n        this.api.skillCategoryData().subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.leaveListData = data.skillCategory;\n            const len =this.leaveListData.length;\n            if(len == 0){\n              this.route.navigateByUrl(\"/pages/skill-category/add-skill-category\");\n            }\n          }\n        })\n      }catch(err){\n        console.log(err.message);\n      }\n    }\n\n    showConfirmationMessage(skillCategoryId:String){\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeData(skillCategoryId).subscribe((data)=>{\n            if(data.status === \"success\" || data.status === 200){\n          swalWithBootstrapButtons.fire(\n            'Deleted!',\n            data.message,\n            'success'\n          )\n          this.leaveList();\n            }\n        })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your list data safe',\n            'error'\n          )\n        }\n      })\n    }\n    addSkillCategory(){\n      try{\n        this.util.skillCategoryStatus = 1;\n      }catch(err){\n        console.log(err)\n      }\n    }\n}","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Skill Category Details</h2>\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{errMsg}}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{successMsg}}</strong>\n         </p>\n      </div>\n\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"skillForm\" (ngSubmit)=\"skillData()\" novalidate>\n        <div class=\"row\">\n           <div class=\"col-md\">\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Category Name: <span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n                  <select class=\"dropdown dropdown-toggle form-control\" Name=\"category\"  formControlName=\"categoryId\" >\n                     <option ng-selected=\"true\" value=\"\" disabled>----- Select Category Name ------</option>\n                        <option class=\"dropdown-item\" *ngFor=\"let list of categoryList\" [ngValue]=\"list._id\" >\n                           {{list.categoryName}}\n                        </option>\n                     </select>\n               <div *ngFor=\"let validation of validationMessage.categoryId\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"skillForm.get('categoryId').hasError(validation.type) && (skillForm.get('categoryId').dirty || skillForm.get('categoryId').touched)\"\n                     style=\"color: red;margin-left: 14px;\">\n                     {{validation.message}}\n                  </div>\n               </div>\n            </div>\n         </div>\n      </div>\n      <div class=\"col-md\">\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Skill Name: <span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"sName\" placeholder=\"Enter Skill Name\"\n                  formControlName=\"skillName\" required>\n               <div *ngFor=\"let validation of validationMessage.skillName\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"skillForm.get('skillName').hasError(validation.type) && (skillForm.get('skillName').dirty || skillForm.get('skillName').touched)\"\n                     style=\"color: red;margin-left: 14px;\">\n                     {{validation.message}}\n                  </div>\n               </div>\n            </div>\n         </div>\n         </div>\n         <!-- <div class=\"col-md\">\n            <div class=\"form-group\">\n               <label class=\"col-sm-6 control-label\"><b>Skill Name: <span style=\"color: darkred\">*</span></b></label>\n               <div class=\"col-sm-offset-2\">\n\n                  <select class=\"dropdown dropdown-toggle form-control\" Name=\"category\"  formControlName=\"categoryId\">\n                     <option class=\"dropdown-item\" value=\"0\" selected></option>\n                  </select>\n               </div>\n            </div>\n            </div> -->\n\n      </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"skillForm.invalid\">Submit</button>\n               <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../list-skill-category\">Cancel</button>\n            </div>\n         </div>\n      </form>\n\n   </div>\n</div>","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Update Skill Category</h2>\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{errMsg}}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{successMsg}}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"skillForm\" (ngSubmit)=\"skillDataUpdate()\" novalidate>\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Skill Name:<span style=\"color: darkred\">*</span> </b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"sName\" placeholder=\"Enter Skill Name\" formControlName=\"skillName\" required>\n                  <div *ngFor=\"let validation of validationMessage.skillName\">\n                     <div style=\"color: red;margin-left: 14px;\" *ngIf=\"skillForm.get('skillName').hasError(validation.type) && (skillForm.get('skillName').dirty || skillForm.get('skillName').touched)\"\n                     style=\"color: red;margin-left: 14px;\" >{{validation.message}}</div>\n                  </div>\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"skillForm.invalid || permissionInfo.search('Edit SkillCategory') === -1\">Update</button>\n               <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../../list-skill-category\">Cancel</button>\n            </div>\n         </div>\n      </form>\n   </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SkillCategoryComponent } from './skill-category.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListSkillCategoryComponent } from './list-skill-category/list-skill-category.component';\nimport { AddSkillCategoryComponent } from './add-skill-category/add-skill-category.component';\nimport { UpdateSkillCategoryComponent } from './update-skill-category/update-skill-category.component';\n\n\nconst route : Routes = [\n  {\n    path :'',\n    component : SkillCategoryComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-skill-category',\n        component: ListSkillCategoryComponent,\n      },\n      {\n        path: 'add-skill-category',\n        component: AddSkillCategoryComponent\n      },\n      {\n        path: 'update-skill-category/:categoryId',\n        component: UpdateSkillCategoryComponent\n      },\n      \n      {\n        path:'',\n        redirectTo :'list-skill-category',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class SkillCategoryRoutingModule { }","import { Component, OnInit,NgZone, ViewChild } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { skillCategoryApiService } from '../skillCategory-service/skillCategory-api.service';\nimport { ApiService } from '../../../services/api.service';\nimport { Observable } from 'rxjs';\nimport { JobCategoryApiService } from '../../job category/jobCategory-service/jobCategory-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n    selector: 'app-add-skill-category',\n    templateUrl: './add-skill-category.component.html'\n})\n\nexport class AddSkillCategoryComponent implements OnInit {\n\n    skillForm: FormGroup;\n    successMsg:any= String;\n    successMessage: boolean = false;\n    errMsg:any= String;\n    errorMsg: boolean = false;\n    companyNameStore: any;\n    showCard: any;\n    companyListData: any = [];\n    companyNameId: any;\n    public companyName:any= [];\n    public companyId: any;\n    categoryList: any;\n    demo = ['Akshay'];\n  permissionInfo: any;\n\n    constructor(private _api: ApiService,\n      public fb: FormBuilder,\n      private ngZone: NgZone,\n      private router: Router,\n      private api: skillCategoryApiService,\n      private apiService: JobCategoryApiService,\n      private util: UtilitiesService){\n        this.isListAvaliable();\n      }\n\n    ngOnInit() {\n      this.getCategoryList();\n      this.companyDataValidate();\n      this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Create SkillCategory') === -1){\n        this.skillForm.disable();\n      }\n    }\n\n    companyDataValidate() {\n      try {\n        this.skillForm = this.fb.group({\n          skillName: new FormControl('',Validators.required),\n          categoryId: new FormControl('',Validators.required)\n          })\n        }\n      catch (err) {\n        console.log(err);\n      }\n    }\n\n    companyValue() {\n      this._api.getListData().subscribe(data =>{\n        if(data.status == 'success' || data.status == 200) {\n          this.companyNameStore = data.company;\n        }\n      })\n    }\n\n    getCategoryList() {\n      try {\n        this.apiService.getJobCategoryData().subscribe(data =>{\n          this.categoryList = data.jobCategory;\n        })\n      } catch (err) {\n        console.log(err.message);\n      }\n    }\n\n    onChangeCompany(value:String) {\n      this.companyId = value;\n    }\n\n    skillData() {\n      try{\n        let cleanSkillCategoryForm = this.util.cleanFormLevelOne(this.skillForm);\n        if (this.skillForm.value) {\n          this.api.addSkillCategoy(cleanSkillCategoryForm.value).subscribe(data => {\n            if(data.status === \"success\" || data.status === 200){\n              this.successMessage = true ;\n              this.errorMsg = false ;\n              this.successMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n                this.ngZone.run(()=>this.router.navigateByUrl('/pages/skill-category/list-skill-category'));\n              }, 2000);\n            }\n            else if(data.status === \"error\"|| data.status === 404){\n              this.errorMsg = true;\n              this.successMessage = false;\n              this.errMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n              }, 3000);\n            }\n          })\n        }\n      } catch(err){\n        console.log(err);\n      }\n\n    }\n\n    validationMessage = {\n      'skillName': [\n        { type: 'required', message: 'Skill Name is required' },\n      ],\n      'categoryId': [\n        { type: 'required', message: 'Category Name is required' },\n      ],\n    }\n\n    handleErrors(){\n      this.errorMsg = false;\n      this.successMessage = false;\n      this.errMsg = '';\n      this.successMsg = '';\n  }\n  isListAvaliable(){\n    try{\n      this.api.skillCategoryData().subscribe((data) =>{\n        if(data.status === 'success'){\n          if(data.skillCategory.length > 0 && this.util.skillCategoryStatus !== 1){\n            this.router.navigateByUrl(\"/pages/skill-category/list-skill-category\");\n            this.util.skillCategoryStatus = 0;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n}","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { skillCategoryApiService } from '../skillCategory-service/skillCategory-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-skill-category',\n  templateUrl: 'update-skill-category.component.html'\n})\n\nexport class UpdateSkillCategoryComponent implements OnInit {\n\n  skillForm: FormGroup;\n  successMsg:any= String;\n  successMessage: boolean = false;\n  errMsg: any= String;\n  errorMsg: boolean = false;\n  companyNameStore:any= [];\n  showCard: any;\n  companyNameId: any;\n  companyName:any= [];\n  skillCategoryId: any;\n  leaveTypeId: any;\n  leaveId: any;\n  leaveData: any= [];\n  leaveFormData: any=[];\n  existinglist: any;\n  permissionInfo: any;\n\n  constructor(\n    public fb: FormBuilder,\n    private router: Router,\n    private ngZone: NgZone,\n    private route: ActivatedRoute,\n    private api: skillCategoryApiService,\n    private util: UtilitiesService) {\n      this.skillCategoryId = this.route.snapshot.paramMap.get(\"categoryId\");\n      this.util.moduleExists(this.skillCategoryId,'SkillCategory').subscribe((data)=>{\n        if(data.status === 'success'){\n          if(!data.data){\n            this.router.navigateByUrl('/pages/skill-category/list-skill-category');\n          }\n        }\n      })\n    }\n\n  ngOnInit() {\n    this.companyDataValidate();\n    this.existingData();\n    this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Edit SkillCategory') === -1){\n        this.skillForm.disable();\n      }\n  }\n\n  existingData(){\n    this.api.skillCategoryDetails(this.skillCategoryId).subscribe((data)=>{\n      this.existinglist = data;\n        this.skillForm = this.fb.group({\n          skillName: new FormControl(this.existinglist.data.skillName),\n        })\n    })\n  }\n\n\n  companyDataValidate() {\n    try {\n      this.skillForm = this.fb.group({\n        skillName: new FormControl('', Validators.required),\n      })\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  skillDataUpdate() {\n    try {\n      let cleanSkillCategoryUpdateForm = this.util.cleanFormLevelOne(this.skillForm);\n      if (this.skillForm.value) {\n        this.api.updateSkillCategory(cleanSkillCategoryUpdateForm.value,this.skillCategoryId).subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n              this.ngZone.run(() => this.router.navigateByUrl('/pages/skill-category/list-skill-category'));\n            },2000);\n\n          } else if (data.status == \"error\") {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n            },3000)\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  validationMessage = {\n    'skillName': [\n      { type: 'required', message: 'Skill Name is Required' },\n    ],\n  }\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SkillCategoryRoutingModule } from './skill-category-routing.module';\nimport { SkillCategoryComponent } from './skill-category.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListSkillCategoryComponent } from './list-skill-category/list-skill-category.component';\nimport { AddSkillCategoryComponent } from './add-skill-category/add-skill-category.component';\nimport { UpdateSkillCategoryComponent } from './update-skill-category/update-skill-category.component';\n\n\n@NgModule({\n  declarations: [\n    SkillCategoryComponent,\n     ListSkillCategoryComponent,\n     AddSkillCategoryComponent,\n     UpdateSkillCategoryComponent,\n    ],\n  \n  imports: [\n    CommonModule,\n    SkillCategoryRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\nexport class SkillCategoryModule { }\n"]}