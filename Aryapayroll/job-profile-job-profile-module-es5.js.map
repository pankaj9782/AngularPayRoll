{"version":3,"sources":["webpack:///src/app/pages/job-profile/job-profile-services/job-profile.service.ts","webpack:///src/app/pages/job-profile/update-profile-data/update-profile-data.component.ts","webpack:///src/app/pages/job-profile/update-profile-data/update-profile-data.component.html","webpack:///src/app/pages/job-profile/job-profile-routing.module.ts","webpack:///src/app/pages/job-profile/job-profile.module.ts","webpack:///src/app/pages/job-profile/job-profile.component.ts","webpack:///src/app/pages/job-profile/job-profile.component.html","webpack:///src/app/pages/job-profile/add-job-profile/add-job-profile.component.ts","webpack:///src/app/pages/job-profile/add-job-profile/add-job-profile.component.html","webpack:///src/app/pages/job-profile/job-profile-list/job-profile-list.component.ts","webpack:///src/app/pages/job-profile/job-profile-list/job-profile-list.component.html"],"names":["JobProfileService","http","endpoint","apiBaseUrl","headers","set","data","companyId","sessionStorage","getItem","apiUrl","post","pipe","errorMgmt","err","console","log","message","get","jobProfileId","api","error","errorMessage","ErrorEvent","status","providedIn","UpdateProfileDataComponent","fb","ngZone","router","route","util","snapShotParam","String","profileData","Array","successMsg","successMessage","errMsg","errorMsg","validationMessage","type","snapshot","paramMap","moduleExists","subscribe","navigateByUrl","jobProfileFormValidation","UpdateJobProfileFormValidation","permissionInfo","permissionRoleInfo","search","updateJobProfileForm","disable","group","positionName","required","payBasis","isActive","jobProfileDetails","jobProfileList","cleanJobProfileUpdateForm","cleanFormLevelOne","valid","updatedSubmitData","value","setTimeout","run","handleErrors","updateJobProfileFormData","selector","templateUrl","styleUrls","path","component","canActivate","children","redirectTo","pathMatch","JobProfileRoutingModule","forChild","declarations","imports","JobProfileModule","providers","JobProfileComponent","AddJobProfileComponent","payType","isListAvaliable","jobProfileForm","cleanJobPofieForm","submitData","getJobProfileData","length","jobProfileStatus","jobProfileFormData","JobProfileListComponent","showCard","len","Object","keys","i","_id","profileId","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","removeProfileData","dismiss","DismissReason","cancel","addJobProfile"],"mappings":"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","file":"job-profile-job-profile-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpHeaders, HttpErrorResponse, HttpClient } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { JobProfile } from 'src/app/auth/job-profile';\nimport { catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JobProfileService {\n\n\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n\n\n  //Method for submit job-profile data\n  submitData(data: JobProfile): Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiUrl = `${this.endpoint}/company/add-job-profile/${companyId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method for get the job profile data\n  getJobProfileData(): Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiUrl = `${this.endpoint}/company/list-all-job-profiles/${companyId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  jobProfileDetails(jobProfileId:string): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/company/job-profile-details/${jobProfileId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n  //Method for remove job profile\n removeProfileData(jobProfileId:String):Observable<any>{\n   try{\n     let api = `${this.endpoint}/company/delete-job-profile/${jobProfileId}`;\n     return this.http.delete(api).pipe(\n       catchError(this.errorMgmt)\n     )\n   }catch(err){\n     console.log(err.message);\n   }\n }\n\n\n  //Create method for manage errors when request and return response from the server\n  errorMgmt(error: HttpErrorResponse) {\n    try {\n      let errorMessage = '';\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.message;\n      }\n      else {\n        errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n      }\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for submit updated form data\n  updatedSubmitData(data: JobProfile, jobProfileId: String): Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiUrl = `${this.endpoint}/company/update-job-profile/${companyId}/${jobProfileId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n}\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { JobProfileService } from '../job-profile-services/job-profile.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-profile-data',\n  templateUrl: './update-profile-data.component.html',\n  styleUrls: ['./update-profile-data.component.scss']\n})\nexport class UpdateProfileDataComponent implements OnInit {\n\n  updateJobProfileForm: FormGroup;\n  public jobProfileList: any;\n  public snapShotParam: any = String;\n  public profileData= new Array();\n  public successMsg: any = String;\n  public successMessage: boolean = false;\n  public errMsg: any = String;\n  public errorMsg: boolean = false;\n  permissionInfo: any;\n\n  constructor(public fb: FormBuilder, private api: JobProfileService, public ngZone: NgZone, private router: Router,\n     private route: ActivatedRoute,\n     private util: UtilitiesService) {\n      this.snapShotParam = this.route.snapshot.paramMap.get(\"jobProfileId\");\n      this.util.moduleExists(this.snapShotParam,'JobProfile').subscribe((data)=>{\n        if(data.status === 'success'){\n          if(!data.data){\n            this.router.navigateByUrl('/pages/job-profile/job-profile-list');\n          }\n        }\n      })\n     }\n\n  ngOnInit() {\n    this.jobProfileFormValidation();\n    this.UpdateJobProfileFormValidation();\n    this.permissionInfo = this.util.permissionRoleInfo;\n    if(this.permissionInfo.search('Edit JobProfile') === -1){\n      this.updateJobProfileForm.disable();\n    }\n  }\n\n//Method for validation\njobProfileFormValidation() {\n  try{\n        this.updateJobProfileForm = this.fb.group({\n          positionName: new FormControl('',Validators.required),\n          payBasis: new FormControl('',Validators.required),\n          isActive: new FormControl('false'),\n        })\n\n  }catch(err){\n    console.log(err.message)\n  }\n}\n  //Method for validation\n  UpdateJobProfileFormValidation() {\n    try{\n      this.api.jobProfileDetails(this.snapShotParam).subscribe((data) => {\n        if (data.status === 'success' || data.status === 200) {\n           this.jobProfileList = data.data;\n          this.updateJobProfileForm = this.fb.group({\n            positionName: new FormControl(this.jobProfileList.positionName,Validators.required),\n            payBasis: new FormControl(this.jobProfileList.payBasis,Validators.required),\n            isActive: new FormControl(this.jobProfileList.isActive),\n          })\n        }\n      })\n\n    }catch(err){\n      console.log(err.message)\n    }\n  }\n\n  //For Showing errors\n  validationMessage = {\n    'positionName': [\n      { type: 'required', message: 'Position Name is required' },\n    ],\n    'payBasis': [\n      { type: 'required', message: 'Pay Basis is required' },\n    ],\n  }\n\n\n  //Method for submit updated form data\n  updateJobProfileFormData() {\n    try {\n      let cleanJobProfileUpdateForm = this.util.cleanFormLevelOne(this.updateJobProfileForm)\n      if (this.updateJobProfileForm.valid) {\n        this.api.updatedSubmitData(cleanJobProfileUpdateForm.value, this.snapShotParam).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.ngZone.run(() => {\n                this.handleErrors();\n                this.router.navigateByUrl(\"/pages/job-profile/job-profile-list\");\n              })\n            }, 2000);\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.ngZone.run(() => {\n                this.handleErrors();\n              })\n            }, 3000);\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n}\n","<div class=\"card card-user\">\n    <div class=\"card-header\">\n        <h2 class=\"card-title\">Update Job-Profile</h2>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                <strong>{{errMsg}}</strong>\n            </p>\n        </div>\n\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                <strong>{{successMsg}}</strong>\n            </p>\n        </div>\n\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"updateJobProfileForm\"\n            (ngSubmit)=\"updateJobProfileFormData()\" novalidate>\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Profile Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Name\"\n                        formControlName=\"positionName\">\n                        <div *ngFor=\"let validation of validationMessage.positionName\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                            *ngIf=\"updateJobProfileForm.get('positionName').hasError(validation.type) && (updateJobProfileForm.get('positionName').dirty || updateJobProfileForm.get('positionName').touched)\"\n                            style=\"color: red;margin-left: 14px;\">\n                            {{validation.message}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Pay Basis:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <select class=\"dropdown dropdown-toggle form-control\" Name=\"Pay Basis\" formControlName=\"payBasis\">\n                    <option class=\"dropdown-item\" disabled>Choose Pay Basis</option>\n                    <option class=\"dropdown-item\" value=\"Monthly Salary\">Monthly Salary</option>\n                    <option class=\"dropdown-item\" value=\"Daily Wages\">Daily Wages</option>\n                </select>\n                <div *ngFor=\"let validation of validationMessage.payBasis\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                            *ngIf=\"updateJobProfileForm.get('payBasis').hasError(validation.type) && (updateJobProfileForm.get('payBasis').dirty || updateJobProfileForm.get('payBasis').touched)\"\n                            style=\"color: red;margin-left: 14px;\">\n                            {{validation.message}}\n                        </div>\n                    </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Status:</b></label>\n                <select class=\"dropdown dropdown-toggle form-control\" Name=\"Status of Profile\"\n                    formControlName=\"isActive\">\n                    <option class=\"dropdown-item\" value=true>Active</option>\n                    <option class=\"dropdown-item\" value=false>In-Active</option>\n                </select>\n            </div>\n\n\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <button [disabled]=\"updateJobProfileForm.invalid || permissionInfo.search('Edit JobProfile') === -1\"\n                     type=\"submit\" class=\"btn btn-success\">Update</button>\n                    <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../../job-profile-list\">Cancel</button>\n\n                </div>\n            </div>\n        </form>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { JobProfileComponent } from './job-profile.component';\nimport { AddJobProfileComponent } from './add-job-profile/add-job-profile.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { JobProfileListComponent } from './job-profile-list/job-profile-list.component';\nimport { UpdateProfileDataComponent } from './update-profile-data/update-profile-data.component';\n\nconst route:Routes =[\n  {\n    path:'',\n    component:JobProfileComponent,\n    canActivate:[AuthGuard],\n    children:[\n      {\n        path:'add-job-profile',\n        component:AddJobProfileComponent,\n      },\n      {\n        path:'job-profile-list',\n        component:JobProfileListComponent,\n      },\n      {\n        path:'update-profile-data/:jobProfileId',\n        component:UpdateProfileDataComponent,\n      },\n      {\n        path:'',\n        redirectTo :'job-profile-list',\n        pathMatch:'full',\n      },\n    ],\n  }\n]\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class JobProfileRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { JobProfileRoutingModule } from './job-profile-routing.module';\nimport { JobProfileComponent } from './job-profile.component';\nimport { AddJobProfileComponent } from './add-job-profile/add-job-profile.component';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { JobProfileListComponent } from './job-profile-list/job-profile-list.component';\nimport { UpdateProfileDataComponent } from './update-profile-data/update-profile-data.component';\nimport { JobProfileService } from './job-profile-services/job-profile.service';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { HttpClientModule } from '@angular/common/http';\n\n\n@NgModule({\n  declarations: [JobProfileComponent, AddJobProfileComponent, JobProfileListComponent, UpdateProfileDataComponent],\n  imports: [\n    CommonModule,\n    JobProfileRoutingModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n  ],\n  providers: [JobProfileService, AuthGuard],\n})\n\nexport class JobProfileModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-job-profile',\n  templateUrl: './job-profile.component.html',\n  styleUrls: ['./job-profile.component.scss']\n})\nexport class JobProfileComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<router-outlet></router-outlet>\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { JobProfileService } from '../job-profile-services/job-profile.service';\nimport { Router } from '@angular/router';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\nimport { IfStmt } from '@angular/compiler';\n\n\n@Component({\n  selector: 'app-add-job-profile',\n  templateUrl: './add-job-profile.component.html',\n  styleUrls: ['./add-job-profile.component.scss']\n})\nexport class AddJobProfileComponent implements OnInit {\n\n  jobProfileForm: FormGroup;\n  public payType = ['Daily Wages','Monthly Salary'];\n  public successMsg:any = String;\n  public successMessage: boolean = false;\n  public errMsg:any = String;\n  public errorMsg: boolean = false;\n  permissionInfo: any;\n\n\n  constructor(public fb: FormBuilder,\n     private api: JobProfileService,\n     public ngZone: NgZone,\n     private router: Router,\n     private util: UtilitiesService\n     ) {this.isListAvaliable();}\n\n  ngOnInit() {\n    this.jobProfileFormValidation();\n    this.permissionInfo = this.util.permissionRoleInfo;\n    if(this.permissionInfo.search('Create JobProfile') === -1){\n      this.jobProfileForm.disable();\n    }\n  }\n\n\n  //Method  for form Validation\n  jobProfileFormValidation() {\n    this.jobProfileForm = this.fb.group({\n      positionName: new FormControl('', Validators.required),\n      payBasis: new FormControl('Daily Wages', Validators.required),\n      isActive: new FormControl('true'),\n    })\n  }\n\n  //Submit form Data\n  jobProfileFormData() {\n    try {\n      let cleanJobPofieForm = this.util.cleanFormLevelOne(this.jobProfileForm);\n      if (this.jobProfileForm.valid) {\n        this.api.submitData(cleanJobPofieForm.value).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successMessage = true;\n            setTimeout(() => {\n              this.handleErrors();\n              this.ngZone.run(() => this.router.navigateByUrl('/pages/job-profile/job-profile-list'));\n            }, 2000);\n            this.errorMsg = false;\n            this.successMsg = data.message;\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n            }, 3000);\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //For Showing errors\n  validationMessage = {\n    'positionName': [\n      { type: 'required', message: 'Position Name is required' },\n    ],\n    'payBasis': [\n      { type: 'required', message: 'Pay Basis is required' },\n    ],\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\nisListAvaliable(){\n  try{\n    this.api.getJobProfileData().subscribe((data) =>{\n      if(data.status === 'success'){\n        if(data.data.length > 0 && this.util.jobProfileStatus !== 1){\n          this.router.navigateByUrl(\"/pages/job-profile/job-profile-list\");\n          this.util.jobProfileStatus = 0;\n        }\n      }\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\n}\n","<div class=\"card card-user\">\n    <div class=\"card-header\">\n        <h2 class=\"card-title\">Add Job-Profile</h2>\n        <!-- <a routerLink=\"../job-profile-list\" class=\"btn btn-primary btn-circle\" style=\"float: right;\"><i\n                class=\"fa  fa-arrow-right\"></i></a> -->\n    </div>\n    <div class=\"card-body\">\n\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                <strong>{{errMsg}}</strong>\n            </p>\n        </div>\n\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                <strong>{{successMsg}}</strong>\n            </p>\n        </div>\n\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"jobProfileForm\" (ngSubmit)=\"jobProfileFormData()\"\n            novalidate>\n            <div class=\"form-group\">\n\n                 <label class=\"col-sm-6 control-label\"><b>Profile Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Name\"\n                        formControlName=\"positionName\">\n                    <div *ngFor=\"let validation of validationMessage.positionName\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                            *ngIf=\"jobProfileForm.get('positionName').hasError(validation.type) && (jobProfileForm.get('positionName').dirty || jobProfileForm.get('positionName').touched)\"\n                            style=\"color: red;margin-left: 14px;\">\n                            {{validation.message}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n\n                 <label class=\"col-sm-6 control-label\"><b>Pay Basis:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n\n                <select class=\"dropdown dropdown-toggle form-control\" Name=\"Pay Basis\" formControlName=\"payBasis\">\n                    <option class=\"dropdown-item\" selected disabled>Choose Pay Basis</option>\n                    <option [ngValue]=\"payBasis\" *ngFor=\"let payBasis of payType\"> {{payBasis}}</option>\n                </select>\n                <div *ngFor=\"let validation of validationMessage.payBasis\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                            *ngIf=\"jobProfileForm.get('payBasis').hasError(validation.type) && (jobProfileForm.get('payBasis').dirty || jobProfileForm.get('payBasis').touched)\"\n                            style=\"color: red;margin-left: 14px;\">\n                            {{validation.message}}\n                        </div>\n                    </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Status:</b></label>\n                <select class=\"dropdown dropdown-toggle form-control\" Name=\"Status of Profile\"\n                    formControlName=\"isActive\">\n                    <option class=\"dropdown-item\" value=true>Active</option>\n                    <option class=\"dropdown-item\" value=false>In-Active</option>\n                </select>\n            </div>\n\n\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"jobProfileForm.invalid || permissionInfo.search('Create JobProfile') === -1\">Submit</button>\n                    <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../job-profile-list\">Cancel</button>\n\n                </div>\n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { JobProfileService } from '../job-profile-services/job-profile.service';\nimport { Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-job-profile-list',\n  templateUrl: './job-profile-list.component.html',\n  styleUrls: ['./job-profile-list.component.scss']\n})\nexport class JobProfileListComponent implements OnInit {\n\n  // jobProfileList: Object;\n  public jobProfileList:any =[];\n  public showCard:any = {};\n  permissionInfo: any;\n\n  constructor(private api: JobProfileService,\n     private router: Router,\n     private util: UtilitiesService) { }\n\n  ngOnInit() {\n    this.permissionInfo = this.util.permissionRoleInfo;\n    this.getJobProfileData();\n  }\n\n//Method for showing data in a list for binding in HTML\n  getJobProfileData() {\n    try {\n      this.api.getJobProfileData().subscribe(data => {\n        if (data.status === 'success' || data.status === 200) {\n          this.jobProfileList = data.data;\n          if (data.data.length == 0) {\n            this.router.navigateByUrl(\"/pages/job-profile/add-job-profile\");\n          }\n          else {\n            const len = Object.keys(this.jobProfileList).length;\n            for (var i = 0; i < len; i++) {\n              this.showCard[this.jobProfileList[i]._id] = true;\n            }\n          }\n        }\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n\n  //Method For collapsed List Data\n  showData(jobProfileId: String) {\n    try {\n      this.showCard[`${jobProfileId}`] = !this.showCard[`${jobProfileId}`];\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for remove job profile list\n   deleteJobProfile(profileId: String) {\n    try {\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeProfileData(profileId).subscribe(data => {\n            if (data.status === \"success\" || data.status === 200) {\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                data.message,\n                'success'\n              )\n              this.getJobProfileData();\n            }\n          })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your list data safe',\n            'error'\n          )\n        }\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n  addJobProfile(){\n    try{\n      this.util.jobProfileStatus = 1;\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n\n}\n","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Job Profiles List</h2>\n        <a [class.disabled]=\"permissionInfo.search('Create JobProfile') === -1\"\n        class=\"btn btn-primary\" routerLink=\"../add-job-profile\" style=\"float:right;\" (click)= \"addJobProfile()\"><i class=\"fa fa-plus\"></i>&nbsp;\n            Add Job-profile</a>\n    </div>\n    <!-- <div class=\"panel-body\">\n            <ul class=\"list-group\">\n                <li class=\"list-group-item\" *ngFor=\"let list of jobProfileList\">\n                    <strong><b (click)=\"showData(list._id)\"\n                            style=\"cursor: pointer\">{{list.positionName}}</b></strong>\n                    <div style=\"float: right;\">\n                        <i class=\"dropdown-toggle\" (click)=\"showData(list._id)\"></i>\n                    </div>\n                    <div class=\"card\" style=\"background-color:ghostwhite\" [hidden]=\"showCard[list._id]\">\n                        <table class=\"table\" style=\"margin: auto\">\n                            <tr>\n                                <th>Position Name:</th>\n                                <td>{{list?.positionName}}</td>\n                            </tr>\n                            <tr>\n                                <th>Pay Basis:</th>\n                                <td>{{list?.payBasis}}</td>\n                            </tr>\n                            <tr>\n                                <th>Is Active:</th>\n                                <td>{{list?.isActive}}</td>\n                            </tr>\n                        </table>\n                        <div>\n                            <a routerLink=\"../update-profile-data/{{list._id}}\" style=\"float: right;\"\n                                class=\"btn btn-primary\">\n                                <i class=\"fa fa-pencil-square-o\"></i></a>\n                            <button style=\"float: right;\" class=\"btn btn-danger\" type=\"button\"\n                                (click)=\"deleteJobProfile(list._id)\">\n                                <i class=\"fa fa-trash\"></i>\n                            </button>\n\n                        </div>\n                    </div>\n                </li>\n            </ul>\n        </div> -->\n    <table class=\"table\" style=\"text-align: center;\">\n        <thead class=\" text-primary\">\n            <tr>\n            <th>S.No</th>\n            <th>Profile Name</th>\n            <th>Pay Basis</th>\n            <th>Is Active</th>\n            <th>Action</th>\n            </tr>\n        </thead>\n        <tbody *ngFor=\"let list of jobProfileList; let i = index\">\n            <tr >\n                <td><b>{{i+1}}.</b></td>\n                <td>{{list.positionName}}</td>\n                <td>{{list.payBasis}}</td>\n                <td *ngIf=\"list.isActive\"><i class=\"fa fa-check\" style=\"color: green; font-size: 25px;\"></i></td>\n                <td *ngIf=\"!list.isActive\"><i class=\"fa fa-times\" style=\"color: red; font-size: 25px;\"></i></td>\n            <td>\n                <a [class.disabled]=\"permissionInfo.search('Edit JobProfile') === -1\"\n                routerLink=\"../update-profile-data/{{list._id}}\" class=\"btn btn-primary\">\n                    <i class=\"fa fa-pencil-square-o\"></i></a>&nbsp;\n                <button [disabled]=\"permissionInfo.search('Delete JobProfile') === -1\"\n                class=\"btn btn-danger\" type=\"button\" (click)=\"deleteJobProfile(list._id)\">\n                    <i class=\"fa fa-trash\"></i></button>\n            </td>\n            </tr>\n    </table>\n</div>"]}