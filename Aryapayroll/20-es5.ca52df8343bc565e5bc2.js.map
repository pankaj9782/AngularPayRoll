{"version":3,"sources":["webpack:///src/app/pages/job category/job-category.component.ts","webpack:///src/app/pages/job category/job-category.component.html","webpack:///src/app/pages/job category/list-job-category/list-job-category.component.html","webpack:///src/app/pages/job category/list-job-category/list-job-category.component.ts","webpack:///src/app/pages/job category/add-job-category/add-job-category.component.html","webpack:///src/app/pages/job category/update-job-category/update-job-category.component.html","webpack:///src/app/pages/job category/job-category-routing.module.ts","webpack:///src/app/pages/job category/update-job-category/update-job-category.component.ts","webpack:///src/app/pages/job category/add-job-category/add-job-category.component.ts","webpack:///src/app/pages/job category/job-category.module.ts"],"names":["JobCategoryComponent","ListJobCategoryComponent","api","route","_Activatedroute","util","showCard","companyShowData","leaveListData","this","jobList","permissionInfo","permissionRoleInfo","getJobCategoryData","subscribe","data","status","jobCategory","length","navigateByUrl","i","_id","isActive","err","console","log","message","jobCategoryId","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","type","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","value","removeData","dismiss","DismissReason","cancel","jobCategoryStatus","addJobCategory","UpdateJobCategoryComponent","AddJobCategoryComponent","JobCategoryModule","JobCategoryRoutingModule","path","component","canActivate","children","fb","ngZone","router","successMessage","errorMsg","companyName","validationMessage","isListAvaliable","companyDataValidate","search","jobForm","disable","group","categoryName","required","cleanJobCategoryForm","cleanFormLevelOne","addJobCategoy","successMsg","setTimeout","handleErrors","run","errMsg","jobFormData","leaveData","snapshot","paramMap","get","moduleExists","getExistingData","jobCategoryDetails","leaveFormData","cleanJobPofileUpdateForm","updateJobCategory","updateJobForm","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-job-category',\n  templateUrl: './job-category.component.html',\n  styleUrls: ['./job-category.component.scss']\n})\n\nexport class JobCategoryComponent implements OnInit {\n\n  constructor() {}\n  ngOnInit() {}\n\n}","<router-outlet></router-outlet>","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Job Category</h2>\n        <button [disabled]=\"permissionInfo.search('Create JobCategory')=== -1\"\n         class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/job-category/add-job-category\"style=\"float: right;\" (click)= \"addJobCategory()\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Job Category</button\n            >\n    </div>\n    <!-- <div class=\"panel-body\">\n        <ul class=\"list-group\">\n            <li class=\"list-group-item\" *ngFor=\"let list of leaveListData\">\n                <div class=\"row\">\n                    <div class=\"col-md-5\">\n                        <p><b>Category Name: </b> {{list?.categoryName}} </p>\n                    </div>\n                    <div class=\"col-md-5\">\n                        <p *ngIf=\"list?.isActive\" ngIfElse=\"\"> <b>Is Active: </b>Yes</p>\n                        <p *ngIf=\"!list?.isActive\"> <b>Is Active: </b>No</p>\n                    </div>\n                    <div class=\"cpl-md-2\">\n                        <a routerLink=\"/pages/job-category/update-job-category/{{list._id}}\"style=\"float: right\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>\n                        <button style=\"float: right;\" class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i></button>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div> -->\n    <table class=\"table\" style=\"text-align: center;\">\n        <thead class=\" text-primary\">\n            <tr>\n            <th> S.No</th>\n            <th> Category Name</th>\n            <th> Is Active</th>\n            </tr>\n        </thead>\n        <tbody *ngFor=\"let list of leaveListData; let i = index\">\n            <tr >\n            <td> <b>{{ i+1 }}.</b> </td>\n            <td> {{ list.categoryName }} </td>\n            <td *ngIf=\"list.isActive\"><i class=\"fa fa-check\" style=\"color: green; font-size: 25px;\"></i></td>\n            <td *ngIf=\"!list.isActive\"><i class=\"fa fa-times\" style=\"color: red; font-size: 25px;\"></i></td>\n            <td>\n                <a [class.disabled]=\"permissionInfo.search('Edit JobCategory')=== -1\"\n                 routerLink=\"/pages/job-category/update-job-category/{{list._id}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a\n                    >&nbsp;\n                <button [disabled]=\"permissionInfo.search('Delete JobCategory')=== -1\"\n                 class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i></button>\n            </td>\n            </tr>\n    </table>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { JobCategoryApiService } from '../jobCategory-service/jobCategory-api.service';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component ({\n    selector: 'app-list-job-category',\n    templateUrl: './list-job-category.component.html'\n})\n\nexport class ListJobCategoryComponent implements OnInit {\n\n    showCard:any = {};\n    // leaveListData: any = Object;\n    companyShowData: any = [];\n    leaveListData: any=[];\n    public isActive: any;\n    public isNot: any;\n    permissionInfo: any;\n\n    constructor(private api: JobCategoryApiService,public route:Router, private _Activatedroute:ActivatedRoute, private util:UtilitiesService) {}\n\n    ngOnInit() {\n      this.jobList();\n      this.permissionInfo = this.util.permissionRoleInfo;\n    }\n\n    jobList() {\n      try{\n        this.api.getJobCategoryData().subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.leaveListData = data.jobCategory;\n            if(this.leaveListData.length == 0){\n               this.route.navigateByUrl(\"/pages/job-category/add-job-category\");\n            }else{\n            for (var i = 0; i < this.leaveListData.length; i++) {\n              this.showCard[this.leaveListData[i]._id] = true;\n              this.isActive = data.jobCategory[i].isActive == true ;\n            }\n          }\n          }\n        })\n      }catch(err){\n        console.log(err.message);\n      }\n    }\n\n    showConfirmationMessage(jobCategoryId:String){\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeData(jobCategoryId).subscribe((data)=>{\n            if(data.status === \"success\" || data.status === 200){\n          swalWithBootstrapButtons.fire(\n            'Deleted!',\n            data.message,\n            'success'\n          )\n          this.jobList();\n            }\n        })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your list data safe',\n            'error'\n          )\n        }\n      })\n    }\n    addJobCategory(){\n      try{\n        this.util.jobCategoryStatus = 1;\n      }catch(err){\n        console.log(err)\n      }\n    }\n\n}","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Job Category Details</h2>\n\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{ errMsg }}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{ successMsg }}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"jobForm\" (ngSubmit)=\"jobFormData()\" novalidate>\n         <div class=\"form-group\">\n             <label class=\"col-sm-6 control-label\"><b>Category Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"CategoryName\" placeholder=\"Enter Category Name\"\n                  formControlName=\"categoryName\" required>\n               <div *ngFor=\"let validation of validationMessage.categoryName\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"jobForm.get('categoryName').hasError(validation.type) && (jobForm.get('categoryName').dirty || jobForm.get('categoryName').touched)\"\n                     style=\"color: red;margin-left: 14px;\">\n                     {{ validation.message }}\n                  </div>\n               </div>\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2\">\n               <label><b>Is Active: </b></label><input type=\"checkbox\" formControlName=\"isActive\">\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"jobForm.invalid || permissionInfo.search('Create JobCategory') === -1\">Submit</button>\n               <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../list-job-category\">Cancel</button>\n\n            </div>\n         </div>\n      </form>\n   </div>\n</div>","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Update Job Category</h2>\n      <!-- <button type=\"button\" class=\"btn btn-primary btn-circle\" routerLink=\"../../list-job-category\"  style=\"float: right;\" ><i class=\"fa  fa-arrow-right\"></i></button> -->\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{errMsg}}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{successMsg}}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"jobForm\" (ngSubmit)=\"updateJobForm()\" novalidate>\n            <div class=\"form-group\">\n               <label class=\"col-sm-6 control-label\"><b>Category Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n               <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"CategoryName\" placeholder=\"Enter Category Name\"\n                     formControlName=\"categoryName\" required>\n                  <div *ngFor=\"let validation of validationMessage.categoryName\">\n                     <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"jobForm.get('categoryName').hasError(validation.type) && (jobForm.get('categoryName').dirty || jobForm.get('categoryName').touched)\"\n                        >\n                        {{validation.message}}\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div class=\"form-group\">\n               <div class=\"col-sm-offset-2\">\n                  <label><b>Is Active: </b></label><input type=\"checkbox\" formControlName=\"isActive\">\n               </div>\n            </div>\n            <div class=\"form-group\">\n               <div class=\"col-sm-offset-2 col-sm-10\">\n                  <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"jobForm.invalid || permissionInfo.search('Edit JobCategory') === -1\">Update</button>\n                  <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"../../list-job-category\" >Cancel</button>\n\n\n               </div>\n            </div>\n         </form>\n   </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { JobCategoryComponent } from './job-category.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListJobCategoryComponent } from './list-job-category/list-job-category.component';\nimport { AddJobCategoryComponent } from './add-job-category/add-job-category.component';\nimport { UpdateJobCategoryComponent } from './update-job-category/update-job-category.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : JobCategoryComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-job-category',\n        component: ListJobCategoryComponent,\n      },\n      {\n        path: 'add-job-category',\n        component: AddJobCategoryComponent\n      },\n      {\n        path: 'update-job-category/:jobCategoryId',\n        component: UpdateJobCategoryComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-job-category',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class JobCategoryRoutingModule { }","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { JobCategoryApiService } from '../jobCategory-service/jobCategory-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-job-category',\n  templateUrl: 'update-job-category.component.html'\n})\n\nexport class UpdateJobCategoryComponent implements OnInit {\n\n  jobForm: FormGroup;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  companyNameStore: [];\n  showCard: any;\n  companyNameId: any;\n  public companyName: [];\n  public companyId: any;\n  public leaveTypeId: any;\n  public jobCategoryId: any;\n  // leaveData: Object[] = [];\n  // leaveFormData: Object;\n  public leaveData:any = [];\n  public leaveFormData:any;\n  permissionInfo: any;\n\n  constructor(\n    public fb: FormBuilder,\n    private router: Router, private ngZone: NgZone, private route: ActivatedRoute, private api: JobCategoryApiService,\n    private util: UtilitiesService) {\n      this.jobCategoryId = this.route.snapshot.paramMap.get(\"jobCategoryId\");\n      this.util.moduleExists(this.jobCategoryId,'JobCategory').subscribe((data)=>{\n        if(data.status === 'success'){\n          if(!data.data){\n            this.router.navigateByUrl('/pages/job-category/list-job-category');\n          }\n        }\n      })\n    }\n\n  ngOnInit() {\n    this.companyDataValidate();\n    this.getExistingData();\n    this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Edit JobCategory') === -1){\n        this.jobForm.disable();\n      }\n  }\n\n  getExistingData() {\n    this.api.jobCategoryDetails(this.jobCategoryId).subscribe(data => {\n        this.leaveFormData = data.data;\n            this.jobForm = this.fb.group({\n              categoryName: new FormControl(this.leaveFormData.categoryName),\n              isActive: new FormControl(this.leaveFormData.isActive)\n            })\n    });\n  }\n\n  companyDataValidate() {\n    try {\n      this.jobForm = this.fb.group({\n          categoryName: new FormControl('',Validators.required),\n          isActive: new FormControl(false)\n        })\n      }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n\n  updateJobForm() {\n    try {\n      let cleanJobPofileUpdateForm = this.util.cleanFormLevelOne(this.jobForm);\n      if (this.jobForm.value) {\n        this.api.updateJobCategory(cleanJobPofileUpdateForm.value,  this.jobCategoryId).subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            setTimeout(()=> {\n              this.handleErrors();\n              this.ngZone.run(() => this.router.navigateByUrl('/pages/job-category/list-job-category'));\n            },2000);\n          } else if (data.status == \"error\") {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(()=> {\n              this.handleErrors();\n            },3000);\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  validationMessage = {\n    'categoryName':[{\n      type: 'required', message: 'Category Name is required'\n    },],\n  }\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n}","import { Component, OnInit,NgZone } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { JobCategoryApiService } from '../jobCategory-service/jobCategory-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n    selector: 'app-add-job-category',\n    templateUrl: './add-job-category.component.html'\n})\n\nexport class AddJobCategoryComponent implements OnInit {\n\n    jobForm: FormGroup;\n    successMsg: String;\n    successMessage: boolean = false;\n    errMsg: String;\n    errorMsg: boolean = false;\n    companyNameStore: any;\n    showCard: any;\n    companyNameId: any;\n    public companyName:any= [];\n    public companyId: any;\n    permissionInfo: any;\n\n    constructor(\n      public fb: FormBuilder,\n      private ngZone: NgZone,\n      private router: Router,\n      private api:JobCategoryApiService,\n      private util: UtilitiesService){\n        this.isListAvaliable();\n      }\n\n    ngOnInit() {\n      this.companyDataValidate();\n      this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Create JobCategory') === -1){\n        this.jobForm.disable();\n      }\n    }\n\n    companyDataValidate() {\n      try {\n        this.jobForm = this.fb.group({\n            categoryName: new FormControl('',Validators.required),\n            isActive: new FormControl(false)\n          })\n        }\n      catch (err) {\n        console.log(err);\n      }\n    }\n\n    jobFormData() {\n      try{\n        let cleanJobCategoryForm = this.util.cleanFormLevelOne(this.jobForm);\n        if (this.jobForm.value) {\n          this.api.addJobCategoy(cleanJobCategoryForm.value).subscribe((data) => {\n            if(data.status === \"success\" || data.status === 200){\n              this.successMessage = true ;\n              this.errorMsg = false ;\n              this.successMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n                this.ngZone.run(()=>this.router.navigateByUrl('/pages/job-category/list-job-category'));\n              }, 2000);\n            }\n            else if(data.status === \"error\"|| data.status === 404){\n              this.errorMsg = true;\n              this.successMessage = false;\n              this.errMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n              }, 3000);\n            }\n          })\n        }\n      } catch(err){\n        console.log(err);\n      }\n\n    }\n\n    validationMessage = {\n      'categoryName':[{\n        type: 'required', message: 'Category Name is Required'\n      },],\n    }\n\n    handleErrors(){\n      this.errorMsg = false;\n      this.successMessage = false;\n      this.errMsg = '';\n      this.successMsg = '';\n  }\n  isListAvaliable(){\n    try{\n      this.api.getJobCategoryData().subscribe((data) =>{\n        if(data.status === 'success'){\n          if(data.jobCategory.length > 0 && this.util.jobCategoryStatus !== 1){\n            this.router.navigateByUrl(\"/pages/job-category/list-job-category\");\n            this.util.jobCategoryStatus = 0;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { JobCategoryRoutingModule } from './job-category-routing.module';\nimport { JobCategoryComponent } from './job-category.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListJobCategoryComponent } from './list-job-category/list-job-category.component';\nimport { AddJobCategoryComponent } from './add-job-category/add-job-category.component';\nimport { UpdateJobCategoryComponent } from './update-job-category/update-job-category.component';\n\n@NgModule({\n  declarations: [\n    JobCategoryComponent,\n    ListJobCategoryComponent,\n    AddJobCategoryComponent,\n    UpdateJobCategoryComponent\n  ],\n  \n  imports: [\n    CommonModule,\n    JobCategoryRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\nexport class JobCategoryModule { }\n"]}