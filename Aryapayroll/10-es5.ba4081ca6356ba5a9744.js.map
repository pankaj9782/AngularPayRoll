{"version":3,"sources":["node_modules/@syncfusion/ej2-base/dist/es6/ej2-base.es2015.js","node_modules/@syncfusion/ej2-data/dist/es6/ej2-data.es2015.js","node_modules/@syncfusion/ej2-buttons/dist/es6/ej2-buttons.es2015.js","node_modules/@syncfusion/ej2-lists/dist/es6/ej2-lists.es2015.js","node_modules/@syncfusion/ej2-popups/dist/es6/ej2-popups.es2015.js","node_modules/@syncfusion/ej2-inputs/dist/es6/ej2-inputs.es2015.js","node_modules/@syncfusion/ej2-dropdowns/dist/es6/ej2-dropdowns.es2015.js","node_modules/sweetalert2/dist/sweetalert2.all.js","src/app/themes/sidebar/sidebar.component.html","src/app/themes/sidebar/sidebar.component.ts","src/app/themes/header/header.component.html","src/app/pages/pages.component.ts","src/app/themes/footer/footer.component.ts","src/app/themes/header/header.component.ts","src/app/themes/footer/footer.component.html","src/app/pages/pages.component.html","src/app/pages/update-profile/update-profile.component.html","src/app/pages/update-profile/update-profile.component.ts","src/app/pages/pages-routing.module.ts","src/app/pages/pages.module.ts","src/app/pages/Payment Heads/payment-heads.component.ts","src/app/pages/Payment Heads/payment-heads-service/payment-heads-api.service.ts","src/app/pages/Payment Heads/payment-heads.component.html","src/app/pages/Payment Heads/list-payment-heads/list-payment-heads.component.html","src/app/pages/Payment Heads/list-payment-heads/list-payment-heads.component.ts","src/app/pages/Payment Heads/add-payment-heads/add-payment-heads.component.html","src/app/pages/Payment Heads/update-payment-heads/update-payment-heads.component.html","src/app/pages/Payment Heads/payment-heads-routing.module.ts","src/app/pages/Payment Heads/update-payment-heads/update-payment-heads.component.ts","src/app/pages/Payment Heads/add-payment-heads/add-payment-heads.component.ts","src/app/pages/Payment Heads/payment-heads.module.ts","src/app/pages/employee-wizard/services/employee.service.ts"],"names":["uid","createInstance","classFunction","params","arrayParam","unshift","Function","prototype","bind","apply","getValue","nameSpace","obj","value","splits","replace","split","i","length","isUndefined","setValue","key","keys","start","fromObj","isNullOrUndefined","deleteObject","isObject","constructor","merge","source","destination","temrObj","tempProp","Object","indexOf","Array","isArray","extend","copied","first","second","deep","result","arguments","obj1","forEach","clone","src","copy","hasOwnProperty","getUniqueID","definedName","debounce","eventFunction","delay","out","args","later","this","clearTimeout","setTimeout","compareElementParent","child","parent","document","parentNode","throwError","message","Error","e","stack","formatUnit","isBlazor","getElement","element","Node","getInstance","component","elem","querySelector","inst","HijriParser","defaultNumberingSystem","defaultNumberSymbols","latnNumberSystem","ParserBase","ret","cName","numberingSystems","prop","res","props","regexStr","map","str","join","RegExp","val","len","regex","nSystem","curObj","numberSystem","needSymbols","blazorMode","cur","getDefaultNumberingSystem","digits","numericPair","reverseObject","numberParseRegex","constructRegex","numericRegex","symbolNumberSystem","symbolMatch","getSymbolMatch","isNumber","mapper","numberSymbols","timeSeparator","nPair","nRegex","blazorCurrencyData","dateCorrection","getHijriDate","gDate","day","getDate","month","getMonth","year","getFullYear","tMonth","tYear","yPrefix","Math","floor","julilanOffset","julianNumber","b","c","d","tempMonth","modifiedJulianDate","z","cyc","j","iy","im","tempDay","iln","ii","hYear","hmonth","hDate","date","toGregorian","a","gDay","gMonth","gYear","Date","abbreviateRegexGlobal","weekdayKey","timeSetter","m","h","H","s","f","datePartMatcher","DateFormat","culture","option","cldr","dependable","IntlBase","getDependables","calendar","dateObject","formatOptions","isIslamic","islamicRegex","test","resPattern","format","getResultantPattern","skeleton","type","dateSeperator","getDateSeparator","ConvertDateToWeekFormat","pattern","numMapper","getNumberMapper","parserObject","getNumberingSystem","match","char","weekday","days","monthIndex","designator","era","timeZone","isNaN","intDateFormatter","options","matches","dateParseRegex","dObject","getCurrentDateValue","curval","processNumber","curvalstr","curstr","getDay","curlength","toString","substring","substr","desig","getHours","dec","retu","timezone","getTimezoneOffset","hourFormat","gmtZeroFormat","getTimeZoneValue","gmtFormat","getWeekOfYear","checkTwodigitNumber","convertValueParts","latnParseRegex","tVal","curPattern","no","abs","ishour","errorText","mapper$1","NumberFormat","symbolPattern","fOptions","cOptions","dOptions","numberMapper","currencySymbol","getCurrencySymbol","numericObject","currency","defaultCurrencyCode","altSymbol","percentSymbol","minusSymbol","symbols","formatRegex","customFormat","getProperNumericSkeleton","isCurrency","isPercent","getSymbolPattern","isAccount","groupOne","checkValueRange","maximumSignificantDigits","minimumSignificantDigits","maximumFractionDigits","minimumFractionDigits","fractionDigits","useGrouping","defaultCurrency","nData","getFormatData","pData","groupSeparator","groupData","getGroupingDetails","minimumFraction","mval","maximumFraction","mfrac","lfrac","isFinite","intNumberFormatter","negativeDataRegex","p","lastIndexOf","temp","primary","secondary","val1","val2","checkbothExist","isFraction","decide","dint","str1","str2","checkRange","text","range","curData","zeroData","fValue","processSignificantDigits","processFraction","minimumIntegerDigits","processMinimumIntegers","toExponential","groupNumbers","nlead","nend","min","max","toPrecision","level1","sep","decimalSymbol","level2","flag","prefix","slice","toFixed","lead","latnRegex$1","timeSetter$1","minute","hour","milliseconds","parseRegex","groupRegex","Observer","context","ranArray","boundedEvents","property","handler","id","cntxt","notExist","isHandlerPresent","push","curObject","splice","indexLocation","argument","successHandler","errorHandler","call","name","window","blazorCallback","objs","index","isTrigger","promise","then","data","isJson","JSON","parse","dateReviver","onIntlChange","cldrData","Internationalization","cultureName","dateFormat","getCulture","numberFormatter","hourOnly","numOptions","getCurrentNumericOptions","parseOptions","regexString","evalposition","patternMatch","gmtCorrection","zCorrectTemp","isgmtTraversed","nRegx","canUpdate","charKey","optional","weekData","weekObject","monthData","hour12","periodValur","tzone","hpattern","parseTimeZoneRegx","pos","parserRegex","parsedDateParts","internalDateParse","dobj","tDate","ystrig","is2DigitYear","parseInt","getDateObject","setMilliseconds","y","setFullYear","tValue","setDate","pDate","lDate","lastDay","setHours","tzValue","setMinutes","getMinutes","num","retOptions","matchString","internalNumberParser","toUpperCase","toLowerCase","tmatch","getZoneValue","tZone","splitStr","cRegex","ival","dateParser","symbolpattern","custom","symbolRegex","getSymbolRegex","infinity","getParsedNumber","isNegative","tempValue","end","Infinity","NaN","exponent","parseFloat","numberParser","getNumberFormat","getDateFormat","getDateParser","getNumberParser","isExcelFormat","getActualDateTimeFormat","isExcel","getActualNumberFormat","getWeekData","getNumericObject","locale","numObject","numSystem","symbPattern","blazorCultureFormats","customRegex","fractionRegex","patternRegex","'","dateConverterMapper","firstDayMapper","currencyFormatRegex","curWithoutNumberRegex","typeMapper","0","1","blazorCulture","iType","compareBlazorDateFormats","basicPatterns","dPattern","tPattern","mode","calendartype","getMainObject","defaultObject","curFormatMapper","patternMatcher","needFraction","cSymbol","fractionOnly","changeCurrencySymbol","groupPattern","fraction","fmatch","sym","currencyCode","customNumberFormat","integerPart","fractionPart","isCurrencyPercent","parts","actual","symbol","part","loc","blazorDefaultObject","3","4","5","C","P","N","A","E","formatSplit","dateObj","actualPattern","timeZonePattern","tLength","minFrac","curMatch","curCode","hasNegativePattern","minDigits","maxDigits","diff","integer","x","cPattern","firstDay","iCulture","replaceBlazorCurrency","aCurrency","rCurrency","iCurrency","weeknum","newYear","daynum","getTime","nday","headerRegex","Ajax","async","contentType","emitError","url","header","eventArgs","cancel","httpRequest","Promise","resolve","reject","XMLHttpRequest","onreadystatechange","stateChange","onLoad","onload","onProgress","onprogress","onAbort","onabort","onError","onerror","onUploadProgress","upload","open","setRequestHeader","beforeSend","send","onSuccess","reason","onFailure","responseText","dataType","error","readyState","status","failureHandler","statusText","responseHeaders","headers","exec","getAllResponseHeaders","REGX_MOBILE","REGX_IE","REGX_IE11","REGX_IOS","REGX_IOS7","REGX_ANDROID","REGX_WINDOWS","REGX_VERSION","REGX_BROWSER","OPERA","EDGE","CHROME","PANTHOMEJS","SAFARI","WEBKIT","MSIE","MOZILLA","browserDetails","Browser","touchCancelEvent","browserInfo","clientInfo","userAgent","version","language","navigator","event","events","isPointer","isTouch","isDevice","move","getEvent","regX","uA","info","extractBrowserDetail","maxTouchPoints","isMSPointer","isWebView","cordova","PhoneGap","phonegap","forge","touchStartEvent","getTouchStartEvent","touchMoveEvent","getTouchMoveEvent","touchEndEvent","getTouchEndEvent","getTouchCancelEvent","EventHandler","eventProp","__eventList","eventName","listener","bindTo","intDebounce","debounceListener","eventData","addOrGetEventData","isIE","addEventListener","passive","some","removeEventListener","copyData","shift","LINES","QUOTES","IF_STMT","ELSEIF_STMT","ELSE_STMT","FOR_STMT","IF_OR_FOR","CALL_FUNCTION","NOT_NUMBER","WORD","DBL_QUOTED_STR","WORDIF","exp","ARR_OBJ","SINGLE_SLASH","DOUBLE_SLASH","WORDFUNC","WINDOWFUNC","addNameSpace","addNS","ignoreList","NameSpaceForspecialChar","SlashReplace","tempStr","HandleSpecialCharArrObj","nameSpaceNew","trim","quotes","HAS_ROW","HAS_SVG","blazorTemplates","getRandomId","random","compile$$1","templateString","helper","compiler","engineObj","compile","propName","templateId","isStringTemplate","createElement","innerHTML","childNodes","updateBlazorTemplate","templateName","comp","isEmpty","callBack","resetBlazorTemplate","templateDiv","getElementById","innerTemplates","getElementsByClassName","tempId","getAttribute","tempElement","appendChild","VirtualDOM","template","evalExpResult","varCOunt","localKeys","isClass","singleSpace","cnt","offset","matchStr","rlStr","strs","mtc","fnStr","fNameSpace","ftArray","simpleRegex","multipleSplitRegex","idClassSelector","selectMapper","assigner","className","tagName","emptyElements","blockElements","inlineElement","selfClosingElements","fillAttrs","cspElement","nameMapper","startRegex","endRegex","attributeRegex","assignParent","childrens","detach","children","processSelector","selector","curMapper","filter","canPush","accessElement","ele","selectAll","immediateParent","matched","expected","actualValue","concat","ConvertHTMLToJSon","htmlString","isText","results","tagArray","nodeArray","lastVal","getLastValue","contains","all","iterateText","iterateEndTag","iterateStartTag","tagIndex","rest","isSelfTag","attrs","names","valArr","vObj","styleSplit","tagObject","attributes","node","arr","properties","extended","styles","style","append","fromElements","toElement","prepend","vDomSelector","iSelector","curColl","isDescendant","curSelector","descendent","dParent","sel","descendentChild","iCurSelector","curParent","cloneNode","setStyleAttribute","SVG_REG","createElementNS","setAttribute","addClass","elements","classes","classList","getClassList","curClass","add","removeClass","classArr","remove","isVisible","visibility","offsetWidth","isEval","docFrag","createDocumentFragment","insertBefore","firstElementChild","executeScript","querySelectorAll","script","head","removeChild","clearEvents","iKey","select","needsVDOM","closest","el","nodeType","addClasses","removeClasses","msMatchesSelector","webkitMatchesSelector","isColEName","Base","isRendered","isComplexArraySetter","isServerRendered","allowServerDataBinding","isProtectedOnChange","changedProperties","oldProperties","bulkChanges","refreshing","ignoreCollectionWatch","finalUpdate","childChangedProperties","modelObserver","addInstance","setProperties","isDestroyed","muteOnChange","prevDetection","dataBind","callChildDataBind","getOwnPropertyNames","newChanges","oldChanges","clearChanges","onPropertyChanged","newValue","oldValue","unbind","Uint16Array","msCrypto","crypto","getRandomValues","secret","messageHandler","postMessage","on","off","notify","moduleClass","getModuleName","ej2_instances","destroy","getComponent","instance","getObject","curKey","defaultValue","getObjectArray","isSetter","isFactory","curType","propertyGetter","propertySetter","oldVal","saveChanges","complexGetter","complexSetter","complexArrayGetter","defCollection","ignore","controlParent","extendFunc","descriptor","complexArrayDefinedCallback","configurable","defineProperty","complexArraySetter","oldValueCollection","newValCollection","dFunc","keyString","getParentKey","model","getArrayModel","serverDataBind","ejsAction","isControlParent","arrayFunction","modelObject","Property","target","propertyDescriptor","set","get","enumerable","addPropertyCollection","Complex","Collection","Event$1","eventDescriptor","finalContext","getParentContext","curText","NotifyPropertyChanges","classConstructor","propertyType","propList","complexProps","colProps","propNames","complexPropNames","colPropNames","eventNames","propertyName","Animation_1","__decorate","decorators","desc","r","getOwnPropertyDescriptor","Reflect","decorate","Animation","super","easing","ease","linear","easeIn","easeOut","easeInOut","elasticInOut","elasticIn","elasticOut","getModel","delayAnimation","duration","begin","fail","progress","timingFunction","newProp","oldProp","animation","removeAttribute","animationId","frameId","cancelAnimationFrame","applyAnimation","timeStamp","step","timerId","prevTimeStamp","startAnimation","avg","requestAnimationFrame","performance","now","rippleEffect","rippleOptions","done","rippleModel","rippleFlag","isCenterRipple","isRippleEnabled","rippleHandler","rippleUpHandler","rippleLeaveHandler","getBoundingClientRect","offsetX","pageX","body","scrollLeft","offsetY","pageY","scrollTop","documentElement","left","right","top","bottom","radius","sqrt","diameter","rippleElement","getComputedStyle","getPropertyValue","transform","removeRipple","rippleElements","opacity","enableRipple","isRipple","lastPageID","ModuleLoader","loadedModules","requiredModules","moduleList","reqLength","clearUnusedModule","modl","module","modName","member","isModuleLoaded","moduleObject","memberName","getMemberName","isProperty","loadedModule","clean","modules","usedModules","arg","mod","ChildProperty","parentObj","isParentArray","updateChange","updateTimeOut","changeTime","curIndex","restrictServerDataBind","isSaveChanges","action","valueLength","__decorate$1","componentCount","lastHistoryLen","Component","randomId","needsID","isReactHybrid","enableRtl","moduleLoader","localObserver","detectFunction","appendTo","enablePersistence","setPersistData","trigger","preRender","injectModules","render","mount","actualElement","mergePersistData","accessMount","wrapperElement","injectedModules","isVDOM","setState","currentContext","calls","inject","localStorage","getItem","setItem","getPersistData","isHistoryChanged","pageID","location","href","history","hash","charCodeAt","persistObj","objValue","getActualProperties","stringify","iterateJsonProperties","newObj","newList","Draggable_1","KeyboardEvents_1","__decorate$2","defaultPosition","isDraggedObject","isDragged","Position","Draggable","dragLimit","getDefaultPosition","borderWidth","padding","diffX","prevLeft","prevTop","dragProcessStarted","tapHoldTimer","externalInitialize","diffY","parentScrollX","parentScrollY","droppables","toggleEvents","scope","isUnWire","handle","enableTapHold","mobileInitialize","initialize","evt","currentTarget","removeTapholdTimer","tapHoldThreshold","axis","getScrollableParent","curTarget","currentStateTarget","isDragStarted","abort","abortSelectors","preventDefault","changedTouches","intCoord","getCoordinates","initialPosition","getScrollableValues","clientX","clientY","relativeXPosition","relativeYPosition","intDragStart","intDestroy","isChangeTouch","intCordinate","styleProp","margin","marginLeft","marginTop","marginRight","marginBottom","dragTarget","intClosest","calculateParentPosition","position","getMousePosition","isDragScroll","distance","getHelperElement","dragTargetElement","helperElement","parentClientRect","offsetParent","dragStart","getProperTargetElement","bindEvents","dragElement","dragArea","setDragArea","enableTailMode","posValue","getProcessedPositionValue","dragElePosition","getDragPosition","bindDragEvents","intDrag","intDragStop","setGlobalDroppables","offsetTop","offsetLeft","width","height","offsetHeight","pageYOffset","pageXOffset","innerHeight","innerWidth","queryPositionInfo","rect","docHeight","getDocumentWidthHeight","docWidth","drag","eleObj","checkTargetElement","hoverObject","triggerOutFunction","dragData","intOver","tLeft","tTop","pagex","pagey","dLeft","dTop","skipDistanceCheck","helperWidth","helperHeight","draEleTop","draEleLeft","iTop","iLeft","dragValue","elementInViewport","enableAutoScroll","scrollIntoView","intOut","docBody","docEle","dragStop","dragStopCalled","intDrop","change","eleWidthBound","eleHeightBound","elementArea","scrollWidth","scrollHeight","tborder","tpadding","lowerKey","prevStyle","pointerEvents","elementFromPoint","isdragscroll","dragEle","srcElement","isOffsetParent","cursorAt","sender","reset","draggable","draggedElement","dropIns","getDropInstance","parentElement","drop","eleInst","__decorate$3","Droppable","mouseOver","wireEvents","area","accept","isDrag","isDropArea","canDrop","droppedElement","display","coord","__decorate$4","keyCode","KeyboardEvents","keyPressHandler","isAltKey","altKey","isCtrlKey","ctrlKey","isShiftKey","shiftKey","curkeyCode","which","keyConfigs","rconfig","rKeyObj","getKeyConfigData","keyAction","unwireEvents","config","configCache","keyData","Number","getKeyCode","keyVal","L10n","controlName","localeStrings","setLocale","intLocale","intGetControlConstant","currentLocale","localeObject","__decorate$5","SwipeSettings","swipeRegex","Touch","touchAction","tapCount","startEvent","point","updateChangeTouches","isTouchMoved","movedDirection","startPoint","lastMovedPoint","startEventData","hScrollLocked","vScrollLocked","tStampStart","timeOutTapHold","tapHoldEvent","moveEvent","endEvent","cancelEvent","movedPoint","eScrollArgs","calcScrollPoints","startEvents","originalEvent","startX","startY","distanceX","distanceY","scrollDirection","velocity","getVelocity","timeOutTap","swipeFn","tap","tapThreshold","modeclear","endPoint","calcPoints","swipeArgs","swipeDirection","eSwipeArgs","tDistance","swipeSettings","swipeThresholdDistance","defaultArgs","canTrigger","scrollBool","isScrollable","moved","checkSwipe","modeClear","lastTapTime","eleStyle","overflow","overflowX","overflowY","eTapArgs","pnt","newX","newY","newT","xDist","yDist","interval","removeTags","removeAttrs","attribute","jsEvents","SanitizeHtmlHelper","selectors","tags","item","beforeSanitize","serializeValue","wrapElement","removeXssTags","removeJsEvents","removeXssAttrs","tempEleValue","removeElement","nodes","localName","attr","hasAttribute","DataUtil","Query","from","subQuery","isChild","distincts","queries","fKey","fromTable","lookups","expands","sortedColumns","groupedColumns","field","dataManager","always","executeQuery","executeLocal","cloned","subQuerySelector","isCountRequired","tableName","fn","fields","tables","fieldName","operator","ignoreCase","ignoreAccent","predicate","Predicate","searchKey","fieldNames","comparer","fnOperators","isFromGroup","sorts","order","endsWith","fnSort","filterQueries","direction","sortBy","pageIndex","pageSize","nos","query","selectorFn","q","singles","filtered","isComplex","processOperator","condition","predicates","combine","record","isAnd","validate","toJson","combinePredicates","json","fromJSONData","pred","preds","input","fnAscending","fnDescending","localeCompare","jsonArray","newData","extractFields","aggregates","level","groupDs","jsonData","GroupGuid","items","group","count","indx","childLevels","grouped","groupedArray","records","getVal","tempObj","aggs","lookup","pKey","grp","fKeyData","getFieldList","copyObj","ds","middle","sort","diacritics","current","array","adaptor","fnName","param1","param2","adp","dm","req","callAdaptorFunction","reqParams","xhr","rand","Uint8Array","castRequired","requiresCompleteRecord","tmp","serverTimezoneOffset","timeZoneHandling","sum","average","getItemFromComparer","truecount","where","falsecount","operatorSymbols","odBiOperator","odUniOperator","odv4UniOperator","equal","ignoreDiacritics","notequal","lessthan","greaterthan","lessthanorequal","greaterthanorequal","notnull","isnull","startswith","startsWith","endswith","processSymbols","parseJson","jsonText","jsonReviver","iterateAndReviveArray","iterateAndReviveJson","ms","offSet","dateParse","toTimeZone","isUTC","utcFormat","hrs","mins","addSelfOffset","isGuid","replacer","isPlainObject","jsonReplacer","arrayReplacer","toJSON","jsonDateReplacer","toUTC","utc","unix","toLocalTime","datefn","differenceString","localtimefn","norm","getSeconds","Adaptor","requestType","skip","take","search","expand","dataSource","pvt","countFlg","agg","changes","deletedRecordsLen","deletedRecords","addedRecords","insert","changedRecords","update","fnCompare","aggQuery","size","keyField","hierarchyFilters","getQueryRequest","filterQueryLists","request","groups","filters","searches","onPage","onRange","getFiltersFrom","isNull","getRequestQuery","pvtData","convertToQueryString","request1","selects","onSelect","onSkip","onTake","getResponseHeader","handleTimeZone","requests","getAggregateResult","original","batchUrl","crudUrl","removeUrl","changed","added","deleted","table","getAddParams","insertUrl","keyColumn","updateUrl","predicats","or","aggregateData","aggregate","groupQuery","multipartAccept","batch","changeSet","batchPre","contentId","batchContent","changeSetContent","batchChangeSetContentType","updateType","requiresCast","guid","returnValue","getField","encodeURIComponent","onEachWhere","onComplexPredicate","onPredicate","reverse","settings","overrideMimeType","rootUrl","dataUrls","resourceTableName","dataCopy","metaData","emptyAndBatch","processBatchResponse","versionCheck","requiresFormat","convertObj","localTime","localTimeReplacer","compareAndRemove","initialGuid","getGuid","cid","cSet","generateInsertRequest","generateUpdateRequest","generateDeleteRequest","generateBodyContent","org","o","stat","method","cIdx","jsonObj","exVal","processResponse","valueOf","updateKey","addParams","isCrudAction","isInsertAction","cacheAdaptor","guidId","setInterval","forDel","currentTime","requestTime","removeItem","currentFilter","newQuery","generateKey","cachedItems","processQuery","crossDomain","batchRequest","offline","timeTillExpiration","cachingPageSize","enableCaching","jsonp","isCors","defaultQuery","isDataAvailable","ready","buildHierarchy","using","deffered","Deferred","getDeferedArgs","makeRequest","nextTick","fnSuccess","fnFail","cache","processData","isSelector","process","virtualSelectRecords","fnQueryChild","subDeffer","childArgs","subUrl","childReq","subData","extendRequest","virtualRecords","ajax","pResult","cResult","deff","doAjaxRequest","defer","setImmediate","getTextNode","childnode","Button","popupRect","parentDocument","buttonObserver","disabled","removeRippleEffect","renderComplete","cssClass","isPrimary","content","tempContent","sanitize","setIconCss","controlStatus","iconCss","span","textContent","iconPosition","isToggle","btnClickHandler","unWireEvents","addOnPersist","enableHtmlSanitizer","click","focus","li","ul","icon","check","checked","selected","expanded","hasChild","collapsible","image","iconWrapper","anchorWrap","navigable","getFieldValues","dataItem","fieldData","isHeader","dataField","ListBase","defaultMappedFields","isChecked","enabled","hasChildren","tooltip","htmlAttributes","urlAttributes","imageAttributes","imageUrl","groupBy","defaultAriaAttributes","listRole","itemRole","groupItemRole","itemText","wrapperRole","defaultListBaseOptions","showCheckBox","showIcon","expandCollapse","ariaAttributes","listClass","itemClass","processSubChild","sortOrder","groupTemplate","headerTemplate","expandIconClass","moduleName","expandIconPosition","itemNavigable","createListFromArray","isSingleLevel","generateUL","createListItemFromArray","subChild","curOpt","getModuleClass","generateId","itemCreating","generateSingleLevelLI","generateLI","itemCreated","createListItemFromJson","checkboxElement","anchorElement","typeofData","curItem","innerEle","imageElemnt","insertAdjacentElement","iconElement","createListFromJson","elementArray","addSorting","getDataSource","typeof","elementAttributes","getAllAttributes","attributes$$1","nodeName","nodeValue","subDS","subLi","innerElements","grpLI","elementID","role","innerText","anchorTag","createTextNode","isFullNavigation","anchorWrapper","uID","removeBlazorID","compiledString","groupTemplateID","templateID","innerDiv","liElement","ulElement","createList","getSiblingLI","isPrevious","siblingLI","liIndex","liCollections","groupDataSource","curFields","cusQuery","itemObj","grpItem","hdr","newtext","_id","k","createJsonFromElement","curEle","jsonAr","childs","anchor","hasChildNodes","renderContentTemplate","liCollection","currentID","renderGroupTemplate","headerItems","category","headerData","generateIcon","parentDocument$1","targetContainer","fixedParent","calculatePosition","currentElement","positionX","positionY","targetValues","ownerDocument","posX","posY","setPosx","getElementHCenter","setPosy","getElementTop","getElementRight","getElementVCenter","getElementLeft","getElementBottom","getBodyScrollTop","getBodyScrollLeft","setPosition","eStatus","elementRect","TL","TR","BL","BR","leftCollideCheck","leftSide","rightSide","getBodyScrollLeft$1","ContainerLeft","ContainerRight","topCollideCheck","topSide","bottomSide","getBodyScrollTop$1","ContainerTop","ContainerBottom","getTargetContainerWidth","getTargetContainerHeight","getTargetContainerLeft","getTargetContainerTop","getViewPortWidth","getViewPortHeight","windowWidth","Popup","PositionData","zIndex","setEnableRtl","refreshPosition","setContent","actionOnScroll","wireScrollEvents","unwireScrollEvents","checkCollision","orientationOnChange","getRelateToElement","scrollRefresh","relateToElement","relateTo","hide","targetVisible","isElementOnViewport","targetInvisibleStatus","scrollElement","scrollParents","isElementVisible","checkGetBoundingClientRect","win","windowView","scrollY","scrollX","outerWidth","outerHeight","elementView","reposition","collision","checkFixedParent","X","Y","parentDisplay","getAnchorPosition","anchorEle","eleRect","anchorRect","anchorPos","fixedElement","tempAnchor","targetType","param","viewPortElement","tEdge","eEdge","edge","leftFlip","deepCheck","collideSide","topFlip","elemOffset","yAxis","xAxis","elemData","containerWidth","containerLeft","containerRight","overLeft","overRight","containerHeight","containerTop","containerBottom","overTop","overBottom","viewPortRect","horz","vert","callFlip","callFit","animationOptions","relativeElement","zIndexElement","getZindexPartial","showAnimation","animate","hideAnimation","overflowRegex","parentStyle","parentZindex","defaultView","childrenZindex","isEqualNode","siblingsZindex","finalValue","currentZindexValue","selectedHandler","minHeight","maxHeight","minWidth","maxWidth","containerElement","resizeWestWidth","elementClass","originalWidth","originalHeight","originalX","originalY","originalMouseX","originalMouseY","RESTRICT_LEFT","resizeStart","resize","resizeEnd","setLeft","previousWidth","getDOMElement","domElement","resizers","onMouseDown","onTouchStart","getEventType","calculateValues","onMouseMove","onMouseUp","coordinates","touches","resizeTowards","resizeSouth","resizeNorth","resizeWest","resizeEast","getClientRectValues","containerRectValues","documentHeight","clientHeight","calculateValue","currentpageY","targetRectValues","calculatedHeight","borderValue","topWithoutborder","targetTop","calculatedTop","boundaryRectValues","currentHeight","rectValues","documentWidth","clientWidth","calculatedWidth","removeResize","handlers","AnimationSettings","ButtonProps","Dialog","ROOT","DLG_TARGET","SCROLL_DISABLED","FULLSCREEN","initRender","enableResize","setResize","animationSettings","effect","getMinHeight","headerContent","allowMaxHeight","preventVisibility","clonedEle","closeIconClickEventHandler","dlgOverlayClickEventHandler","focusContent","l10n","close","checkPositionData","prevOnChange","isNumberValue","list","computedHeaderHeight","computedFooterHeight","footerEle","getEle","headerHeight","footerHeight","dialogObj","isBlazorServerRender","computedHeight","computedWidth","isModal","resizeBegin","resizing","resizeComplete","boundary","directions","resizeHandler","proxy","targetEle","onResizeStart","onResizeComplete","onResizing","buttonObj","btnObj","ftrTemplateContent","activeElement","focusableElements","buttonIndex","isTagName","isContentEdit","closeOnEscape","primaryButtonEle","buttons","buttonModel","setCSSClass","setMaxHeight","initialRender","setzIndex","calculatezIndex","contentEle","setTargetContent","setHeader","showCloseIcon","renderCloseIcon","footerTemplate","setButton","setFooterTemplate","allowDragging","setAllowDragging","setIsModal","dlgContainer","dlgOverlay","parentEle","refElement","popupObj","container","preventFocus","resetResizeIcon","openEventArgs","unBindEvent","closeArgs","activeEle","blur","storeActiveElement","positionChange","setEnableRTL","setOverlayZindex","visible","show","dialogConHeight","resizeIcon","zIndexValue","setPopupPosition","dragObj","dragEventArgs","buttonContent","buttonType","btn","outerHTML","footerBtn","innerContentElement","HTMLElement","setTemplate","sanitizeHelper","templateFn","templateProps","templateValue","dialogItem","isContent","headerEle","createHeaderContent","closeIcon","closeIconBtnObj","DLG_CLOSE_ICON","closeIconTitle","getConstant","oldCSSClass","u","tabIndex","disableElement","getValidFocusNode","validNode","t","elementMatch","Element","getAutoFocusNode","bindEvent","keyDown","insertAdjacentHTML","updateSanitizeContent","updateIsModal","buttonCount","setTarget","firstChild","setPopupZindex","classArray","isFullScreen","fullScreen","beforeOpenArgs","openAnimation","dialogOpen","isInteracted","beforeCloseArgs","closeAnimation","DialogUtility","createDialog","dialogObject","formOptions","title","isDraggable","formButtonModel","buttonPropModel","buttonProps","alert","alertDialogObj","dialogElement","alertButtonModel","okButton","confirm","confirmDialogObj","okButtonModel","cancelButtonModel","cancelButton","globalTimeOut","random_generator","charAt","create_fabric_element","innerCon","uniqueID","themeClass","makeElement","svgFabric","fabricCirclePath","fabricCircleArc","create_material_element","innerContainer","cls","svgMaterial","matCirclePath","mat_calculate_attributes","svg","path","strokeSize","getStrokeSize","transformOrigin","PI","getDashOffset","easeAnimation","timestamp","timecount","fb_calculate_attributes","innerConainer","trgClass","centerX","centerY","circle","startArc","endArc","defineArcPoints","angle","radians","cos","sin","showHideSpinner","isHide","spinnerWrap","inner","svgEle","isAnimate","timeOut","globalObject","previousId","animateMaterial","spinnerInfo","globalInfo","startTime","rotate","mat_animation","timeOutVar","series","increment","rotation","formSeries","boot_animate","Search","inputVal","searchType","listItems","itemData","strLength","queryStr","toLocaleLowerCase","itemsData","Input","floatType","bindInitialEvent","checkInputValue","floatLabelType","getParentNode","inputElement","inputValue","_focusFn","label","_blurFn","getElementsByTagName","wireFloatingEvents","createFloatingInput","inputObject","internalCreateElement","floatLinelement","floatLabelElement","createInputContainer","customTag","placeholder","encodePlaceHolder","inputWrap","updateLabelState","checkFloatLabelType","updateIconState","button","wireClearBtnEvents","readOnly","validateLabel","tagClass","tag","spanEle","setCssClass","oldClass","setPlaceholder","setReadonly","isReadonly","readonly","isRtl","setEnabled","isEnable","inputContainer","disabledAttrs","considerWrapper","removeAttributes","addAttributes","setClearButton","isClear","initial","clearButton","_internalRipple","argsButton","_onMouseDownRipple","_onMouseUpRipple","createIconEle","iconClass","prependSpan","innerWrapper","appendSpan","createInput","showClearButton","setWidth","removeFloating","inputEle","addFloating","iconEle","inputObj","isPrependIcon","floatLine","floatText","wrapper","setRipple","addIcon","icons","internalCreate","DropDownBase","FieldSettings","newProperty","oldProperty","listData","checkValueCase","isTextByValue","typeOfData","checkingAccent","String","checkIgnoreCase","getItemValue","checkNonIgnoreCase","itemValue","textItem","typedText","getFormattedValue","baseTemplate","checkTemplate","exception","actionFailure","noRecordsTemplate","actionFailureTemplate","DropDownBaseresetBlazorTemplates","actionFailureTemplateId","noRecordsTemplateId","templateCompiler","DropDownBaseupdateBlazorTemplates","componentLocale","getLocaleName","liElem","enableRtlElements","jsonElement","resetList","renderItemsBySelect","setListData","noRecord","footer","itemTemplate","itemTemplateId","groupTemplateId","valueTemplateId","headerTemplateId","footerTemplateId","invalidAttr","getJSONfromOption","optionGroup","scrollTimer","isRequested","isDataFetched","isActive","showSpinner","emptyDataRequest","getQuery","renderItems","onActionComplete","bindChildItems","onActionFailure","hideSpinner","localDataArgs","childNode","remainingItems","sortedData","updateListValues","raiseDataBound","findNode","listArr","spliceData","listElements","templateListItem","listOption","l10nUpdate","fixedHeaderElement","postRender","listElement","focusItem","selectedItem","listEle","groupValue","getSortedDataSource","fieldValues","setFixedHeader","scrollStop","liHeight","topIndex","round","isTempEmpty","createListItems","firstLi","getItems","createEvent","initEvent","dispatchEvent","selectData","isFiltering","updateData","setFields","updateDataSource","setUpdateInitial","setZIndex","isEmptyData","rippleFun","isGroupChecking","setFloatingHeader","itemIndex","renderList","itemsCount","selectedItemValue","updateActionCompleteData","updateAddItemList","listGroupItem","tempLi","updateDataList","updateSelection","hidden","itemCount","dropDownListClasses","root","hover","rtl","disable","base","inputFocus","iconAnimation","device","backIcon","filterBarClearIcon","filterInput","filterParent","mobileFilter","clearIcon","clearIconHide","popupFullScreen","disableIcon","hiddenElement","LABELTOP","LABELBOTTOM","createFloatLabel","overAllWrapper","searchWrapper","setPlaceHolder","MultiSelect","HIDE_LIST","isValidKey","selectAllEventData","selectAllEventEle","isDynamicDataChange","scrollFocusStatus","keyDownStatus","state","enableGroupCheckBox","enableSelectionOrder","allowCustomValue","hideSelectedItem","closePopupOnSelect","htmlAttr","updatedClassValue","popupWrapper","enable","refreshPlaceHolder","overAllClear","componentWrapper","updatedCssClassValues","allowFiltering","onpopstate","hidePopup","pushState","popup","focusAtFirstListItem","updateListItems","mainList","showDropDownIcon","refreshPopup","isFirstClick","loadTemplate","mainListItems","findGroupStart","deselectHeader","refreshListItems","removeFocus","valueEle","findListElement","scrollBottom","addListFocus","disableStatus","getAriaAttributes","ensureAriaDisabled","chipCollectionWrapper","tempValues","removeValue","removeChipSelection","updateDelimeter","delimiterChar","makeTextBoxEmpty","refreshSelection","checkPlaceholderSize","renderPopup","onPopupShown","targetInputElement","valuecheck","isUpdated","updateSelectElementData","getDataByValue","getForQuery","addItem","updateActionList","updateVal","addValidInputClass","showSelectAll","mainData","mainListCollection","remoteCustomValue","checkForCustomValue","tempQuery","updateListARIA","unwireListEvents","wireListEvents","setInitialValue","selectAllAction","setDynValue","initialTextUpdate","initialValueUpdate","initialUpdate","changeOnBlur","updateValueState","beforePopupOpen","previousSibling","previousElementSibling","nextElementSibling","hideGroupItem","ariaValue","checkSelectAll","checkMaxSelection","element1","temp1","groupItemLength","listItem","searchCount","searchActiveCount","maximumSelectionLength","openOnClick","isPopupOpen","showPopup","targetElement","isWordCharacter","fromCharCode","expandTextbox","showOverAllClear","isFiltered","remoteFilterAction","dataUpdater","filterQuery","filterAction","filterType","backCommand","dataChecks","getValueByText","tempData","eve","isDocClickFromCheck","relatedTarget","updateDelimView","focused","removeChipFocus","refreshInputHight","downIconWidth","dropIcon","setPlaceholderSize","newVal","initStatus","validateValues","updateTempValue","steps","previousItem","collection","getIndexByValue","showDelimWrapper","viewWrapper","delimiterWrapper","mobFilter","calcPopupWidth","resolveCollision","focusedItem","isHome","scrollEle","popupKeyActions","activeIndex","homeNavigation","pageUpSelection","getPagingCount","updateAriaAttribute","pageDownSelection","arrowUp","arrowDown","selectByKey","spaceKeySelection","escapeAction","checkTextLength","keyNavigation","checkBackCommand","moveByList","onKeyDown","focuseElem","moveBy","removelastSelection","removeSelectedChip","focusAtLastListItem","selectListByKey","hideOverAllClear","selectedLI","currentOffset","nextBottom","nextOffset","boxRange","limit","isValidLI","updateListSelection","lastElementChild","selectAllItem","selectedElem","addChipSelection","updateCheck","customVal","setFloatLabelType","isClearAll","removeIndex","removeVal","removedValues","hideElement","updateMainList","removeChip","updateChipStatus","isSelectAll","clearAllCallback","updatedataValueItems","element2","addListSelection","addChip","isNotTrigger","updateListSelectEventCallback","getChip","closeElements","chipElem","chipClose","multiselectTemplate","chip","chipContent","valueTemplate","multiCompiler","setClass","onMobileChipInteraction","chipClick","onChipRemove","popupWidth","fieldProperty","listCurrentOptions","checkboxFilter","overAllHeight","popupHeight","setHeaderTemplate","selectAllHeight","popupElement","searchBoxHeight","setScrollPosition","targetExitViewport","onListMouseDown","selectAllItems","formElement","textVal","getNgDirective","wrapperClick","windowResize","focusInHandler","KeyUp","onInput","onBlur","mouseIn","resetValueHandler","mouseOut","ClearAll","pasteHandler","openClick","preventDefaultAction","initializeData","updateDataAttribute","delim","getTextByValue","updateWrapperText","textArr","childElementCount","removeListSelection","indexItem","noDataEle","replaceChild","removeHover","dispatchSelect","addValue","selectedItems","selectItems","hoveredItem","mainlist","ariaCheck","delimChar","groupValues","findGroupAttrtibutes","updateCheckBox","unChecked","groupHeader","checkBoxElement","currentLi","addListHover","onDocumentClick","onMouseClick","onMouseOver","onMouseLeave","spinnerElement","CLOSEICON_CLASS$1","spinnerContainer","spinnerInnerContainer","wrap","inner_wrap","theme","defaultSize","svgBoot","bootCircle","CLS_SPINCIRCLE","defaultRadius","circleEle","labelEle","spinCSSClass","wrapperType","wrapperData","hideDelimWrapper","wrapperleng","remaining","overAllContainer","tempIndex","overflowCountTemplate","totalCountTemplate","remainContent","raminElement","totalCompiledString","remainSize","getOverflowVal","paddingRight","paddingLeft","pop","totalWidth","updateRemainTemplate","updateRemainWidth","updateRemainingText","newTemp","selectionLimit","focusedElement","textboxValueUpdate","updateValue","updateHTMLAttribute","updateClearButton","filterBarPlaceholder","updateOldPropCssClass","updateCssClass","enableRTL","updateReadonly","dropDownIcon","reInitializePoup","msProps","getPropObject","onLoadSelect","mainLiLength","liLength","SEARCHBOX_WRAPPER","DELIMITER_VIEW","spellcheck","autocomplete","tabindex","validationAttribute","wireEvent","checkInitialValue","isData","optionsElement","valueCol","textCol","optionsLen","opt","checkAutoFocus","placeholderText","placeholderElement","unWireEvent","activeLi","listSelection","setSelectAll","setSearchBox","setDeviceSearchBox","getFocus","setReorder","getActiveList","checboxCreate","setPopupFullScreen","checkboxEle","rippleSpan","frameSpan","labelSpan","checkAllParent","selectAllSpan","nextSibling","clickHandler","isBlazorListbox","checkboxWrapper","frameElm","checkWrapper","checkElement","validateCheckNode","selectAll$$1","checkWrap","isCheck","changeState","isPrevent","ariaState","filterInputObj","clearIconElement","clearText","setSearchBoxPosition","backIconElement","clickOnBackIcon","clearElement","unSelect","selectAllText","unSelectAllText","remLi","activeLiCount","ulEle","exports","_typeof","Symbol","iterator","_classCallCheck","Constructor","TypeError","_defineProperties","writable","_createClass","protoProps","staticProps","_extends","assign","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","isNativeReflectConstruct","construct","sham","Proxy","_construct","Parent","Class","_possibleConstructorReturn","self","ReferenceError","_get","receiver","object","objectValues","toArray","nodeList","warn","console","previousWarnOnceMessages","warnAboutDepreation","deprecatedParam","useInstead","callIfFunction","isPromise","DismissReason","freeze","backdrop","esc","timer","swalClasses","iconTypes","states","previousBodyPadding","hasClass","applyCustomClass","customClass","getInput","inputType","getChildByClass","checkbox","radio","oldInputVal","focusInput","toggleClass","Boolean","applyNumericalStyle","removeProperty","toggle","getClientRects","hasCssAnimation","animDuration","transDuration","getContainer","elementBySelector","selectorString","elementByClass","getPopup","getIcons","getIcon","visibleIcon","getTitle","getContent","getImage","getProgressSteps","getValidationMessage","getConfirmButton","actions","getCancelButton","getActions","getHeader","getFooter","getCloseButton","getFocusableElements","focusableElementsWithTabindex","otherFocusableElements","isToast","isNodeEnv","sweetHTML","question","warning","success","file","textarea","resetValidationMessage","Swal","parseHtmlToContainer","handleJqueryElem","animationEndEvent","testEl","transEndEventNames","WebkitAnimation","OAnimation","renderButton","privateProps","WeakMap","innerParams","domCache","inputTypes","setInputPlaceholder","inputPlaceholder","renderInputType","email","password","number","tel","rangeInput","rangeOutput","checkboxInput","initialPopupWidth","popupPadding","MutationObserver","contentWidth","observe","attributeFilter","renderProgressSteps","progressStepsContainer","progressSteps","currentProgressStep","getQueueStep","stepEl","lineEl","progressStepsDistance","background","toast","modal","noanimation","allowOutsideClick","center","grow","growClass","customContainerClass","popupBackgroundColor","successIconParts","backgroundColor","imageAlt","imageWidth","imageHeight","imageClass","titleText","closeButton","closeButtonHtml","showCloseButton","closeButtonAriaLabel","renderHeader","html","rerender","inputClass","inputAttributes","attrName","renderContent","confirmButton","showConfirmButton","showCancelButton","buttonsStyling","styled","confirmButtonColor","cancelButtonColor","confirmButtonBackgroundColor","borderLeftColor","borderRightColor","reverseButtons","onRender","clickConfirm","currentSteps","showLoading","fire","loading","globalState","defaultParams","heightAuto","allowEscapeKey","allowEnterKey","stopKeydownPropagation","keydownListenerCapture","preConfirm","confirmButtonText","confirmButtonAriaLabel","confirmButtonClass","cancelButtonText","cancelButtonAriaLabel","cancelButtonClass","focusConfirm","focusCancel","showLoaderOnConfirm","inputOptions","inputAutoTrim","inputValidator","validationMessage","onBeforeOpen","onOpen","onClose","onAfterClose","scrollbarPadding","updatableParams","deprecatedParams","toastIncompatibleParams","isValidParameter","paramName","isDeprecatedParameter","checkIfParamIsValid","checkIfToastParamIsValid","checkIfParamIsDeprecated","staticMethods","isUpdatableParameter","argsToParams","clickCancel","isLoading","_len","_key","mixin","mixinParams","_this","MixinSwal","subClass","superClass","create","queue","resetAndResolve","queueResult","callback","dismiss","insertQueueStep","deleteQueueStep","enableLoading","getTimerLeft","timeout","stopTimer","stop","resumeTimer","toggleTimer","running","increaseTimer","n","increase","isTimerRunning","isRunning","hideLoading","isIE11","MSInputMethodContext","documentMode","fixVerticalPositionIE","alignItems","privateMethods","swalPromiseResolve","removePopupAndResetState","triggerOnAfterCloseAndDispose","restoreFocusTimeout","previousActiveElement","scrollTo","keydownTarget","keydownHandler","capture","keydownHandlerAdded","iosfix","shown","resolveValue","handlePopupAnimation","animationIsSupported","animatePopup","swalCloseEventFinishedCallback","unsetWeakMaps","setButtonsDisabled","setInputDisabled","radios","Timer","started","defaultInputValidators","string","swalOpenAnimationFinished","currentInstance","populateInputOptions","inputOption","optionValue","optionLabel","radioValue","radioLabel","radioInput","radioLabelElement","succeedWith","closePopup","preConfirmValue","getCheckboxValue","getRadioValue","getFileValue","files","setFocus","arrowKeys","escKeys","ignoreOutsideClick","swalPromise","dismissWith","setupTimer","onclick","disableButtons","getInputValue","disableInput","enableButtons","enableInput","showValidationMessage","checkValidity","onmousedown","onmouseup","stopPropagation","isComposing","handleEnter","btnIndex","handleTab","handleEsc","processInputOptions","Map","formatInputOptions","err","fade","MSStream","preventTouchMove","ontouchstart","ontouchmove","haystack","needle","msMaxTouchPoints","scrollDiv","scrollbarWidth","fixScrollContainer","initFocus","globalState$$1","blurActiveElement","instanceMethods","disableLoading","closeModal","closeToast","enableConfirmButton","disableConfirmButton","popupComputedStyle","inputerror","setProgressSteps","updatedParams","showProgressSteps","hideProgressSteps","_main","userParams","deferDisposalTimer","oldContainer","oninput","onchange","validUpdatableParams","defineProperties","SweetAlert","outerParams","onFulfilled","onFinally","_currentInstance","factory","Sweetalert2","swal","sweetAlert","styleSheet","cssText","SidebarComponent","api","companyEmployeeListAPI","$","siblings","getListData","subscribe","companyLength","company","sessionId","sessionStorage","sideBarCompanyName","sideBarCompanyLogo","environment","apiBaseUrl","logoUrl","getEmployeeList","employeeLength","isAdmin","adminStatus","PagesComponent","FooterComponent","HeaderComponent","apiService","route","ngZone","navbarOpen","userProfile","getList","getIndividualList","userId","run","navigateByUrl","companyListData","log","companyName","getIndividualData","filterCompanyId","companyId","reload","undefined","filterListData","submitLogout","getUserDetails","avatar","toggleNavbar","logout","UpdateProfileComponent","PagesRoutingModule","PagesModule","fb","APIService","util","router","discardChanges","genderList","cardProfileName","existingUrl","existUpadteProfileForm","loadUpadteProfileForm","userProfileForm","getTimeZone","Inject","multiObj","updateProfileForm","gender","phone","compose","minLength","maxLength","birthday","reader","FileReader","readAsDataURL","userAvatar","cleanUpdateProfileForm","cleanFormLevelOne","updateUSerProfile","uploadProfileImage","updateProfile","onSelectFile","updateProfileData","changeName","routes","canActivate","loadChildren","DashboardModule","SubUserModule","CompanyModule","BranchesModule","LeavetypesModule","EmployeeWizardModule","JobProfileModule","JobCategoryModule","DocumenttypesModule","SkillCategoryModule","HolidayModule","ReportModule","PayrollModule","CalendarModule","DepartmentModule","GraderuleModule","LeaveManagementModule","RolesModule","redirectTo","pathMatch","forChild","PaymentHeadsComponent","paymentHeadApiService","http","endpoint","errorMessage","ErrorEvent","pipe","catchError","errorMgmt","paymentHeadId","post","ListPaymentHeadsComponent","listPaymentHeads","permissionInfo","permissionRoleInfo","getPaymentHeadData","paymentData","swalWithBootstrapButtons","removePaymentHead","paymentHeadStatus","addPaymentHeads","UpdatePaymentHeadsComponent","AddPaymentHeadsComponent","PaymentHeadsModule","PaymentHeadsRoutingModule","successMessage","errorMsg","paymentHeadTypes","isListAvaliable","paymentHeadValidate","paymentHeadForm","cleanPaymentHeadForm","successMsg","handleErrors","errMsg","required","paymentHeadData","snapshot","paramMap","moduleExists","existingDataList","updatePaymentHeadValidation","paymentHeadUpdateForm","paymentHeadDetails","existingData","cleanPaymentHeadUpdateForm","updatePaymentHeads","updatePaymenthead","EmployeeService","parentUserId","companyParentId","branchId","employeeId","addressId","familyId","educationId","workExperienceId","languageId","leaveSettingId","proofId","documentTypeId","formData","FormData"],"mappings":"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O,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,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","sourceRoot":"webpack:///","sourcesContent":["let instances = 'ej2_instances';\nlet uid = 0;\nlet isBlazorPlatform = false;\n/**\n * Function to check whether the platform is blazor or not.\n * @return {boolean} result\n * @private\n */\nfunction disableBlazorMode() {\n    isBlazorPlatform = false;\n}\n/**\n * Create Instance from constructor function with desired parameters.\n * @param {Function} classFunction - Class function to which need to create instance\n * @param {any[]} params - Parameters need to passed while creating instance\n * @return {any}\n * @private\n */\nfunction createInstance(classFunction, params) {\n    let arrayParam = params;\n    arrayParam.unshift(undefined);\n    return new (Function.prototype.bind.apply(classFunction, arrayParam));\n}\n/**\n * To run a callback function immediately after the browser has completed other operations.\n * @param {Function} handler - callback function to be triggered.\n * @return {Function}\n * @private\n */\nfunction setImmediate(handler) {\n    let unbind;\n    let num = new Uint16Array(5);\n    let intCrypto = window.msCrypto || window.crypto;\n    intCrypto.getRandomValues(num);\n    let secret = 'ej2' + combineArray(num);\n    let messageHandler = (event) => {\n        if (event.source === window && typeof event.data === 'string' && event.data.length <= 32 && event.data === secret) {\n            handler();\n            unbind();\n        }\n    };\n    window.addEventListener('message', messageHandler, false);\n    window.postMessage(secret, '*');\n    return unbind = () => {\n        window.removeEventListener('message', messageHandler);\n        handler = messageHandler = secret = undefined;\n    };\n}\n/**\n * To get nameSpace value from the desired object.\n * @param {string} nameSpace - String value to the get the inner object\n * @param {any} obj - Object to get the inner object value.\n * @return {any}\n * @private\n */\nfunction getValue(nameSpace, obj) {\n    /* tslint:disable no-any */\n    let value = obj;\n    let splits = nameSpace.replace(/\\[/g, '.').replace(/\\]/g, '').split('.');\n    for (let i = 0; i < splits.length && !isUndefined(value); i++) {\n        value = value[splits[i]];\n    }\n    return value;\n}\n/**\n * To set value for the nameSpace in desired object.\n * @param {string} nameSpace - String value to the get the inner object\n * @param {any} value - Value that you need to set.\n * @param {any} obj - Object to get the inner object value.\n * @return {void}\n * @private\n */\nfunction setValue(nameSpace, value, obj) {\n    let keys = nameSpace.replace(/\\[/g, '.').replace(/\\]/g, '').split('.');\n    let start = obj || {};\n    let fromObj = start;\n    let i;\n    let length = keys.length;\n    let key;\n    for (i = 0; i < length; i++) {\n        key = keys[i];\n        if (i + 1 === length) {\n            fromObj[key] = value === undefined ? {} : value;\n        }\n        else if (isNullOrUndefined(fromObj[key])) {\n            fromObj[key] = {};\n        }\n        fromObj = fromObj[key];\n    }\n    return start;\n}\n/**\n * Delete an item from Object\n * @param {any} obj - Object in which we need to delete an item.\n * @param {string} params - String value to the get the inner object\n * @return {void}\n * @private\n */\nfunction deleteObject(obj, key) {\n    delete obj[key];\n}\n/**\n * Check weather the given argument is only object.\n * @param {any} obj - Object which is need to check.\n * @return {boolean}\n * @private\n */\nfunction isObject(obj) {\n    let objCon = {};\n    return (!isNullOrUndefined(obj) && obj.constructor === objCon.constructor);\n}\n/**\n * To get enum value by giving the string.\n * @param {any} enumObject - Enum object.\n * @param {string} enumValue - Enum value to be searched\n * @return {any}\n * @private\n */\nfunction getEnumValue(enumObject, enumValue) {\n    return enumObject[enumValue];\n}\n/**\n * Merge the source object into destination object.\n * @param {any} source - source object which is going to merge with destination object\n * @param {any} destination - object need to be merged\n * @return {void}\n * @private\n */\nfunction merge(source, destination) {\n    if (!isNullOrUndefined(destination)) {\n        let temrObj = source;\n        let tempProp = destination;\n        let keys = Object.keys(destination);\n        let deepmerge = 'deepMerge';\n        for (let key of keys) {\n            if (!isNullOrUndefined(temrObj[deepmerge]) && (temrObj[deepmerge].indexOf(key) !== -1) &&\n                (isObject(tempProp[key]) || Array.isArray(tempProp[key]))) {\n                extend(temrObj[key], temrObj[key], tempProp[key], true);\n            }\n            else {\n                temrObj[key] = tempProp[key];\n            }\n        }\n    }\n}\n/**\n * Extend the two object with newer one.\n * @param {any} copied - Resultant object after merged\n * @param {Object} first - First object need to merge\n * @param {Object} second - Second object need to merge\n * @return {Object}\n * @private\n */\nfunction extend(copied, first, second, deep) {\n    let result = copied && typeof copied === 'object' ? copied : {};\n    let length = arguments.length;\n    if (deep) {\n        length = length - 1;\n    }\n    for (let i = 1; i < length; i++) {\n        if (!arguments[i]) {\n            continue;\n        }\n        let obj1 = arguments[i];\n        Object.keys(obj1).forEach((key) => {\n            let src = result[key];\n            let copy = obj1[key];\n            let clone;\n            let isArrayChanged = Array.isArray(copy) && Array.isArray(src) && (copy.length !== src.length);\n            let blazorEventExtend = isBlazor() ? (!(src instanceof Event) && !isArrayChanged) : true;\n            if (deep && blazorEventExtend && (isObject(copy) || Array.isArray(copy))) {\n                if (isObject(copy)) {\n                    clone = src ? src : {};\n                    if (Array.isArray(clone) && clone.hasOwnProperty('isComplexArray')) {\n                        extend(clone, {}, copy, deep);\n                    }\n                    else {\n                        result[key] = extend(clone, {}, copy, deep);\n                    }\n                }\n                else {\n                    /* istanbul ignore next */\n                    clone = isBlazor() ? src && Object.keys(copy).length : src ? src : [];\n                    result[key] = extend([], clone, copy, deep);\n                }\n            }\n            else {\n                result[key] = copy;\n            }\n        });\n    }\n    return result;\n}\n/**\n * To check whether the object is null or undefined.\n * @param {Object} value - To check the object is null or undefined\n * @return {boolean}\n * @private\n */\nfunction isNullOrUndefined(value) {\n    return value === undefined || value === null;\n}\n/**\n * To check whether the object is undefined.\n * @param {Object} value - To check the object is undefined\n * @return {boolean}\n * @private\n */\nfunction isUndefined(value) {\n    return ('undefined' === typeof value);\n}\n/**\n * To return the generated unique name\n * @param {string} definedName - To concatenate the unique id to provided name\n * @return {string}\n * @private\n */\nfunction getUniqueID(definedName) {\n    return definedName + '_' + uid++;\n}\n/**\n * It limits the rate at which a function can fire. The function will fire only once every provided second instead of as quickly.\n * @param {Function} eventFunction - Specifies the function to run when the event occurs\n * @param {number} delay - A number that specifies the milliseconds for function delay call option\n * @return {Function}\n * @private\n */\nfunction debounce(eventFunction, delay) {\n    let out;\n    // tslint:disable-next-line\n    return function () {\n        let args = arguments;\n        let later = () => {\n            out = null;\n            return eventFunction.apply(this, args);\n        };\n        clearTimeout(out);\n        out = setTimeout(later, delay);\n    };\n}\n// Added since lint ignored after added '//tslint:disable-next-line' \n/* tslint:disable:no-any */\n/**\n * To convert the object to string for query url\n * @param  {Object} data\n * @returns string\n * @private\n */\nfunction queryParams(data) {\n    let array = [];\n    let keys = Object.keys(data);\n    for (let key of keys) {\n        array.push(encodeURIComponent(key) + '=' + encodeURIComponent('' + data[key]));\n    }\n    return array.join('&');\n}\n/**\n * To check whether the given array contains object.\n * @param {T[]} value- Specifies the T type array to be checked.\n * @private\n */\nfunction isObjectArray(value) {\n    let parser = Object.prototype.toString;\n    if (parser.call(value) === '[object Array]') {\n        if (parser.call(value[0]) === '[object Object]') {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * To check whether the  child element is descendant to parent element or parent and child are same element.\n * @param{Element} - Specifies the child element to compare with parent.\n * @param{Element} - Specifies the parent element.\n * @return boolean\n * @private\n */\nfunction compareElementParent(child, parent) {\n    let node = child;\n    if (node === parent) {\n        return true;\n    }\n    else if (node === document || !node) {\n        return false;\n    }\n    else {\n        return compareElementParent(node.parentNode, parent);\n    }\n}\n/**\n * To throw custom error message.\n * @param{string} - Specifies the error message to be thrown.\n * @private\n */\nfunction throwError(message) {\n    try {\n        throw new Error(message);\n    }\n    catch (e) {\n        throw e.message + '\\n' + e.stack;\n    }\n}\n/**\n * This function is used to print given element\n * @param{Element} element - Specifies the print content element.\n * @param{Window} printWindow - Specifies the print window.\n * @private\n */\nfunction print(element, printWindow) {\n    let div = document.createElement('div');\n    let links = [].slice.call(document.getElementsByTagName('head')[0].querySelectorAll('base, link, style'));\n    let reference = '';\n    if (isNullOrUndefined(printWindow)) {\n        printWindow = window.open('', 'print', 'height=452,width=1024,tabbar=no');\n    }\n    div.appendChild(element.cloneNode(true));\n    for (let i = 0, len = links.length; i < len; i++) {\n        reference += links[i].outerHTML;\n    }\n    printWindow.document.write('<!DOCTYPE html> <html><head>' + reference + '</head><body>' + div.innerHTML +\n        '<script> (function() { window.ready = true; })(); </script>' + '</body></html>');\n    printWindow.document.close();\n    printWindow.focus();\n    // tslint:disable-next-line\n    let interval = setInterval(() => {\n        if (printWindow.ready) {\n            printWindow.print();\n            printWindow.close();\n            clearInterval(interval);\n        }\n    }, 500);\n    return printWindow;\n}\n/**\n * Function to normalize the units applied to the element.\n * @param  {number|string} value\n * @return {string} result\n * @private\n */\nfunction formatUnit(value) {\n    let result = value + '';\n    if (result === 'auto' || result.indexOf('%') !== -1 || result.indexOf('px') !== -1) {\n        return result;\n    }\n    return result + 'px';\n}\n/**\n * Function to check whether the platform is blazor or not.\n * @return {boolean} result\n * @private\n */\nfunction enableBlazorMode() {\n    isBlazorPlatform = true;\n}\n/**\n * Function to check whether the platform is blazor or not.\n * @return {boolean} result\n * @private\n */\nfunction isBlazor() {\n    return isBlazorPlatform;\n}\n/**\n * Function to convert xPath to DOM element in blazor platform\n * @return {HTMLElement} result\n * @param {HTMLElement | object} element\n * @private\n */\nfunction getElement(element) {\n    let xPath = 'xPath';\n    if (!(element instanceof Node) && isBlazor() && !isNullOrUndefined(element[xPath])) {\n        return document.evaluate(element[xPath], document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n    }\n    return element;\n}\n/**\n * Function to fetch the Instances of a HTML element for the given component.\n * @param {string | HTMLElement} element\n * @param {any} component\n * @return {Object} inst\n * @private\n */\n// tslint:disable-next-line\nfunction getInstance(element, component) {\n    // tslint:disable-next-line:no-any\n    let elem = (typeof (element) === 'string') ? document.querySelector(element) : element;\n    if (elem[instances]) {\n        for (let inst of elem[instances]) {\n            if (inst instanceof component) {\n                return inst;\n            }\n        }\n    }\n    return null;\n}\n/**\n * Function to add instances for the given element.\n * @param {string | HTMLElement} element\n * @param {Object} instance\n * @return {void}\n * @private\n */\nfunction addInstance(element, instance) {\n    // tslint:disable-next-line:no-any\n    let elem = (typeof (element) === 'string') ? document.querySelector(element) : element;\n    if (elem[instances]) {\n        elem[instances].push(instance);\n    }\n    else {\n        elem[instances] = [instance];\n    }\n}\n/**\n * Function to generate the unique id.\n * @return {any}\n * @private\n */\n// tslint:disable-next-line:no-any\nfunction uniqueID() {\n    // tslint:disable-next-line:no-any\n    if ((typeof window) === 'undefined') {\n        return;\n    }\n    // tslint:disable-next-line:no-any\n    let num = new Uint16Array(5);\n    let intCrypto = window.msCrypto || window.crypto;\n    return intCrypto.getRandomValues(num);\n}\nfunction combineArray(num) {\n    let ret = '';\n    for (let i = 0; i < 5; i++) {\n        ret += (i ? ',' : '') + num[i];\n    }\n    return ret;\n}\n\n/**\n * Parser\n */\nconst defaultNumberingSystem = {\n    'latn': {\n        '_digits': '0123456789',\n        '_type': 'numeric'\n    }\n};\nconst defaultNumberSymbols = {\n    'decimal': '.',\n    'group': ',',\n    'percentSign': '%',\n    'plusSign': '+',\n    'minusSign': '-',\n    'infinity': '∞',\n    'nan': 'NaN',\n    'exponential': 'E'\n};\nconst latnNumberSystem = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n/**\n * Interface for parser base\n * @private\n */\nclass ParserBase {\n    /**\n     * Returns the cldr object for the culture specifies\n     * @param {Object} obj - Specifies the object from which culture object to be acquired.\n     * @param {string} cName - Specifies the culture name.\n     * @returns {Object}\n     */\n    static getMainObject(obj, cName) {\n        let value = isBlazor() ? cName : 'main.' + cName;\n        return getValue(value, obj);\n    }\n    /**\n     * Returns the numbering system object from given cldr data.\n     * @param {Object} obj - Specifies the object from which number system is acquired.\n     * @returns {Object}\n     */\n    static getNumberingSystem(obj) {\n        return getValue('supplemental.numberingSystems', obj) || this.numberingSystems;\n    }\n    /**\n     * Returns the reverse of given object keys or keys specified.\n     * @param {Object} prop - Specifies the object to be reversed.\n     * @param {number[]} keys - Optional parameter specifies the custom keyList for reversal.\n     * @returns {Object}\n     */\n    static reverseObject(prop, keys) {\n        let propKeys = keys || Object.keys(prop);\n        let res = {};\n        for (let key of propKeys) {\n            /* tslint:disable no-any */\n            if (!res.hasOwnProperty(prop[key])) {\n                res[prop[key]] = key;\n            }\n        }\n        return res;\n    }\n    /**\n     * Returns the symbol regex by skipping the escape sequence.\n     * @param {string[]} props - Specifies the array values to be skipped.\n     * @returns {RegExp}\n     */\n    static getSymbolRegex(props) {\n        let regexStr = props.map((str) => {\n            return str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n        }).join('|');\n        return new RegExp(regexStr, 'g');\n    }\n    static getSymbolMatch(prop) {\n        let matchKeys = Object.keys(defaultNumberSymbols);\n        let ret = {};\n        for (let key of matchKeys) {\n            ret[prop[key]] = defaultNumberSymbols[key];\n        }\n        return ret;\n    }\n    /**\n     * Returns regex string for provided value\n     * @param {string} val\n     * @returns {string}\n     */\n    static constructRegex(val) {\n        let len = val.length;\n        let ret = '';\n        for (let i = 0; i < len; i++) {\n            if (i !== len - 1) {\n                ret += val[i] + '|';\n            }\n            else {\n                ret += val[i];\n            }\n        }\n        return ret;\n    }\n    /**\n     * Returns the replaced value of matching regex and obj mapper.\n     * @param {string} value - Specifies the  values to be replaced.\n     * @param {RegExp} regex - Specifies the  regex to search.\n     * @param {Object} obj - Specifies the  object matcher to be replace value parts.\n     * @returns {string}\n     */\n    static convertValueParts(value, regex, obj) {\n        return value.replace(regex, (str) => {\n            return obj[str];\n        });\n    }\n    /**\n     * Returns default numbering system object for formatting from cldr data\n     * @param {Object} obj\n     * @returns {NumericObject}\n     */\n    static getDefaultNumberingSystem(obj) {\n        let ret = {};\n        ret.obj = getValue('numbers', obj);\n        ret.nSystem = getValue('defaultNumberingSystem', ret.obj);\n        return ret;\n    }\n    /**\n     * Returns the replaced value of matching regex and obj mapper.\n     */\n    static getCurrentNumericOptions(curObj, numberSystem, needSymbols, blazorMode) {\n        let ret = {};\n        let cur = this.getDefaultNumberingSystem(curObj);\n        if (!isUndefined(cur.nSystem) || blazorMode) {\n            let digits = blazorMode ? getValue('obj.mapperDigits', cur) : getValue(cur.nSystem + '._digits', numberSystem);\n            if (!isUndefined(digits)) {\n                ret.numericPair = this.reverseObject(digits, latnNumberSystem);\n                ret.numberParseRegex = new RegExp(this.constructRegex(digits), 'g');\n                ret.numericRegex = '[' + digits[0] + '-' + digits[9] + ']';\n                if (needSymbols) {\n                    ret.numericRegex = digits[0] + '-' + digits[9];\n                    ret.symbolNumberSystem = getValue(blazorMode ? 'numberSymbols' : 'symbols-numberSystem-' + cur.nSystem, cur.obj);\n                    ret.symbolMatch = this.getSymbolMatch(ret.symbolNumberSystem);\n                    ret.numberSystem = cur.nSystem;\n                }\n            }\n        }\n        return ret;\n    }\n    /**\n     * Returns number mapper object for the provided cldr data\n     * @param {Object} curObj\n     * @param {Object} numberSystem\n     * @param {boolean} isNumber\n     * @returns {NumberMapper}\n     */\n    static getNumberMapper(curObj, numberSystem, isNumber) {\n        let ret = { mapper: {} };\n        let cur = this.getDefaultNumberingSystem(curObj);\n        if (!isUndefined(cur.nSystem)) {\n            ret.numberSystem = cur.nSystem;\n            ret.numberSymbols = getValue('symbols-numberSystem-' + cur.nSystem, cur.obj);\n            ret.timeSeparator = getValue('timeSeparator', ret.numberSymbols);\n            let digits = getValue(cur.nSystem + '._digits', numberSystem);\n            if (!isUndefined(digits)) {\n                for (let i of latnNumberSystem) {\n                    ret.mapper[i] = digits[i];\n                }\n            }\n        }\n        return ret;\n    }\n}\nParserBase.nPair = 'numericPair';\nParserBase.nRegex = 'numericRegex';\nParserBase.numberingSystems = defaultNumberingSystem;\n/**\n * @private\n */\nconst blazorCurrencyData = {\n    'DJF': 'Fdj',\n    'ERN': 'Nfk',\n    'ETB': 'Br',\n    'NAD': '$',\n    'ZAR': 'R',\n    'XAF': 'FCFA',\n    'GHS': 'GH₵',\n    'XDR': 'XDR',\n    'AED': 'د.إ.‏',\n    'BHD': 'د.ب.‏',\n    'DZD': 'د.ج.‏',\n    'EGP': 'ج.م.‏',\n    'ILS': '₪',\n    'IQD': 'د.ع.‏',\n    'JOD': 'د.ا.‏',\n    'KMF': 'CF',\n    'KWD': 'د.ك.‏',\n    'LBP': 'ل.ل.‏',\n    'LYD': 'د.ل.‏',\n    'MAD': 'د.م.‏',\n    'MRU': 'أ.م.',\n    'OMR': 'ر.ع.‏',\n    'QAR': 'ر.ق.‏',\n    'SAR': 'ر.س.‏',\n    'SDG': 'ج.س.',\n    'SOS': 'S',\n    'SSP': '£',\n    'SYP': 'ل.س.‏',\n    'TND': 'د.ت.‏',\n    'YER': 'ر.ي.‏',\n    'CLP': '$',\n    'INR': '₹',\n    'TZS': 'TSh',\n    'EUR': '€',\n    'AZN': '₼',\n    'RUB': '₽',\n    'BYN': 'Br',\n    'ZMW': 'K',\n    'BGN': 'лв.',\n    'NGN': '₦',\n    'XOF': 'CFA',\n    'BDT': '৳',\n    'CNY': '¥',\n    'BAM': 'КМ',\n    'UGX': 'USh',\n    'USD': '$',\n    'CZK': 'Kč',\n    'GBP': '£',\n    'DKK': 'kr.',\n    'KES': 'Ksh',\n    'CHF': 'CHF',\n    'MVR': 'ރ.',\n    'BTN': 'Nu.',\n    'XCD': 'EC$',\n    'AUD': '$',\n    'BBD': '$',\n    'BIF': 'FBu',\n    'BMD': '$',\n    'BSD': '$',\n    'BWP': 'P',\n    'BZD': '$',\n    'CAD': '$',\n    'NZD': '$',\n    'FJD': '$',\n    'FKP': '£',\n    'GIP': '£',\n    'GMD': 'D',\n    'GYD': '$',\n    'HKD': '$',\n    'IDR': 'Rp',\n    'JMD': '$',\n    'KYD': '$',\n    'LRD': '$',\n    'MGA': 'Ar',\n    'MOP': 'MOP$',\n    'MUR': 'Rs',\n    'MWK': 'MK',\n    'MYR': 'RM',\n    'PGK': 'K',\n    'PHP': '₱',\n    'PKR': 'Rs',\n    'RWF': 'RF',\n    'SBD': '$',\n    'SCR': 'SR',\n    'SEK': 'kr',\n    'SGD': '$',\n    'SHP': '£',\n    'SLL': 'Le',\n    'ANG': 'NAf.',\n    'SZL': 'E',\n    'TOP': 'T$',\n    'TTD': '$',\n    'VUV': 'VT',\n    'WST': 'WS$',\n    'ARS': '$',\n    'BOB': 'Bs',\n    'BRL': 'R$',\n    'COP': '$',\n    'CRC': '₡',\n    'CUP': '$',\n    'DOP': '$',\n    'GTQ': 'Q',\n    'HNL': 'L',\n    'MXN': '$',\n    'NIO': 'C$',\n    'PAB': 'B/.',\n    'PEN': 'S/',\n    'PYG': '₲',\n    'UYU': '$',\n    'VES': 'Bs.S',\n    'IRR': 'ريال',\n    'GNF': 'FG',\n    'CDF': 'FC',\n    'HTG': 'G',\n    'XPF': 'FCFP',\n    'HRK': 'kn',\n    'HUF': 'Ft',\n    'AMD': '֏',\n    'ISK': 'kr',\n    'JPY': '¥',\n    'GEL': '₾',\n    'CVE': '​',\n    'KZT': '₸',\n    'KHR': '៛',\n    'KPW': '₩',\n    'KRW': '₩',\n    'KGS': 'сом',\n    'AOA': 'Kz',\n    'LAK': '₭',\n    'MZN': 'MTn',\n    'MKD': 'ден',\n    'MNT': '₮',\n    'BND': '$',\n    'MMK': 'K',\n    'NOK': 'kr',\n    'NPR': 'रु',\n    'AWG': 'Afl.',\n    'SRD': '$',\n    'PLN': 'zł',\n    'AFN': '؋',\n    'STN': 'Db',\n    'MDL': 'L',\n    'RON': 'lei',\n    'UAH': '₴',\n    'LKR': 'රු.',\n    'ALL': 'Lekë',\n    'RSD': 'дин.',\n    'TJS': 'смн',\n    'THB': '฿',\n    'TMT': 'm.',\n    'TRY': '₺',\n    'UZS': 'сўм',\n    'VND': '₫',\n    'TWD': 'NT$'\n};\nfunction getBlazorCurrencySymbol(currencyCode) {\n    return getValue(currencyCode || '', blazorCurrencyData);\n}\n\n/***\n * Hijri parser\n */\nvar HijriParser;\n(function (HijriParser) {\n    /* tslint:disable */\n    const dateCorrection = [28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167,\n        29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759,\n        29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348,\n        30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939,\n        30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530,\n        31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120,\n        32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711,\n        32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302,\n        33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893,\n        33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483,\n        34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074,\n        35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665,\n        35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254,\n        36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845,\n        36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436,\n        37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027,\n        38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617,\n        38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208,\n        39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798,\n        39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389,\n        40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980,\n        41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570,\n        41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161,\n        42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751,\n        42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342,\n        43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932,\n        43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523,\n        44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114,\n        45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704,\n        45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295,\n        46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885,\n        46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476,\n        47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066,\n        48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657,\n        48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248,\n        49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838,\n        49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429,\n        50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019,\n        51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611,\n        51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200,\n        52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792,\n        52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383,\n        53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973,\n        54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564,\n        54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154,\n        55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745,\n        55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335,\n        56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926,\n        56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517,\n        57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107,\n        58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698,\n        58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288,\n        59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879,\n        59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469,\n        60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061,\n        61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651,\n        61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242,\n        62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832,\n        62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423,\n        63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014,\n        64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603,\n        64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195,\n        65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785,\n        65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376,\n        66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967,\n        66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557,\n        67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148,\n        68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738,\n        68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330,\n        69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919,\n        69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510,\n        70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101,\n        71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691,\n        71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282,\n        72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872,\n        72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464,\n        73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053,\n        74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645,\n        74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235,\n        75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826,\n        75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416,\n        76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007,\n        77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598,\n        77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188,\n        78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779,\n        78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369,\n        79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960,\n        79990];\n    /* tslint:enable */\n    function getHijriDate(gDate) {\n        let day = gDate.getDate();\n        let month = gDate.getMonth();\n        let year = gDate.getFullYear();\n        let tMonth = month + 1;\n        let tYear = year;\n        if (tMonth < 3) {\n            tYear -= 1;\n            tMonth += 12;\n        }\n        let yPrefix = Math.floor(tYear / 100.);\n        let julilanOffset = yPrefix - Math.floor(yPrefix / 4.) - 2;\n        let julianNumber = Math.floor(365.25 * (tYear + 4716)) + Math.floor(30.6001 * (tMonth + 1)) + day - julilanOffset - 1524;\n        yPrefix = Math.floor((julianNumber - 1867216.25) / 36524.25);\n        julilanOffset = yPrefix - Math.floor(yPrefix / 4.) + 1;\n        let b = julianNumber + julilanOffset + 1524;\n        let c = Math.floor((b - 122.1) / 365.25);\n        let d = Math.floor(365.25 * c);\n        let tempMonth = Math.floor((b - d) / 30.6001);\n        day = (b - d) - Math.floor(30.6001 * tempMonth);\n        month = Math.floor((b - d) / 20.6001);\n        if (month > 13) {\n            c += 1;\n            month -= 12;\n        }\n        month -= 1;\n        year = c - 4716;\n        let modifiedJulianDate = julianNumber - 2400000;\n        // date calculation for year after 2077\n        let iyear = 10631. / 30.;\n        let z = julianNumber - 1948084;\n        let cyc = Math.floor(z / 10631.);\n        z = z - 10631 * cyc;\n        let j = Math.floor((z - 0.1335) / iyear);\n        let iy = 30 * cyc + j;\n        z = z - Math.floor(j * iyear + 0.1335);\n        let im = Math.floor((z + 28.5001) / 29.5);\n        /* istanbul ignore next */\n        if (im === 13) {\n            im = 12;\n        }\n        let tempDay = z - Math.floor(29.5001 * im - 29);\n        let i = 0;\n        for (; i < dateCorrection.length; i++) {\n            if (dateCorrection[i] > modifiedJulianDate) {\n                break;\n            }\n        }\n        let iln = i + 16260;\n        let ii = Math.floor((iln - 1) / 12);\n        let hYear = ii + 1;\n        let hmonth = iln - 12 * ii;\n        let hDate = modifiedJulianDate - dateCorrection[i - 1] + 1;\n        if ((hDate + '').length > 2) {\n            hDate = tempDay;\n            hmonth = im;\n            hYear = iy;\n        }\n        return { year: hYear, month: hmonth, date: hDate };\n    }\n    HijriParser.getHijriDate = getHijriDate;\n    function toGregorian(year, month, day) {\n        let iy = year;\n        let im = month;\n        let id = day;\n        let ii = iy - 1;\n        let iln = (ii * 12) + 1 + (im - 1);\n        let i = iln - 16260;\n        let mcjdn = id + dateCorrection[i - 1] - 1;\n        let julianDate = mcjdn + 2400000;\n        let z = Math.floor(julianDate + 0.5);\n        let a = Math.floor((z - 1867216.25) / 36524.25);\n        a = z + 1 + a - Math.floor(a / 4);\n        let b = a + 1524;\n        let c = Math.floor((b - 122.1) / 365.25);\n        let d = Math.floor(365.25 * c);\n        let e = Math.floor((b - d) / 30.6001);\n        let gDay = b - d - Math.floor(e * 30.6001);\n        let gMonth = e - (e > 13.5 ? 13 : 1);\n        let gYear = c - (gMonth > 2.5 ? 4716 : 4715);\n        /* istanbul ignore next */\n        if (gYear <= 0) {\n            gMonth--;\n        } // No year zero\n        return new Date(gYear + '/' + (gMonth) + '/' + gDay);\n    }\n    HijriParser.toGregorian = toGregorian;\n})(HijriParser || (HijriParser = {}));\n\nconst abbreviateRegexGlobal = /\\/MMMMM|MMMM|MMM|a|LLLL|LLL|EEEEE|EEEE|E|K|cccc|ccc|WW|W|G+|z+/gi;\nconst standalone = 'stand-alone';\nconst weekdayKey = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n\nconst timeSetter = {\n    m: 'getMinutes',\n    h: 'getHours',\n    H: 'getHours',\n    s: 'getSeconds',\n    d: 'getDate',\n    f: 'getMilliseconds'\n};\nconst datePartMatcher = {\n    'M': 'month',\n    'd': 'day',\n    'E': 'weekday',\n    'c': 'weekday',\n    'y': 'year',\n    'm': 'minute',\n    'h': 'hour',\n    'H': 'hour',\n    's': 'second',\n    'L': 'month',\n    'a': 'designator',\n    'z': 'timeZone',\n    'Z': 'timeZone',\n    'G': 'era',\n    'f': 'milliseconds'\n};\nconst timeSeparator = 'timeSeparator';\n/* tslint:disable no-any */\n/**\n * Date Format is a framework provides support for date formatting.\n * @private\n */\nclass DateFormat {\n    /**\n     * Returns the formatter function for given skeleton.\n     * @param {string} -  Specifies the culture name to be which formatting.\n     * @param {DateFormatOptions} - Specific the format in which date  will format.\n     * @param {cldr} - Specifies the global cldr data collection.\n     * @return Function.\n     */\n    static dateFormat(culture, option, cldr) {\n        let dependable = IntlBase.getDependables(cldr, culture, option.calendar);\n        let numObject = getValue('parserObject.numbers', dependable);\n        let dateObject = dependable.dateObject;\n        let formatOptions = { isIslamic: IntlBase.islamicRegex.test(option.calendar) };\n        if (isBlazor() && option.isServerRendered) {\n            option = IntlBase.compareBlazorDateFormats(option, culture);\n        }\n        let resPattern = option.format ||\n            IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');\n        formatOptions.dateSeperator = isBlazor() ? getValue('dateSeperator', dateObject) : IntlBase.getDateSeparator(dependable.dateObject);\n        if (isUndefined(resPattern)) {\n            throwError('Format options or type given must be invalid');\n        }\n        else {\n            resPattern = IntlBase.ConvertDateToWeekFormat(resPattern);\n            if (isBlazor()) {\n                resPattern = resPattern.replace(/tt/, 'a');\n            }\n            formatOptions.pattern = resPattern;\n            formatOptions.numMapper = isBlazor() ?\n                extend({}, numObject) : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));\n            let patternMatch = resPattern.match(abbreviateRegexGlobal) || [];\n            for (let str of patternMatch) {\n                let len = str.length;\n                let char = str[0];\n                if (char === 'K') {\n                    char = 'h';\n                }\n                /* tslint:disable no-any */\n                switch (char) {\n                    case 'E':\n                    case 'c':\n                        if (isBlazor()) {\n                            formatOptions.weekday = getValue('days.' + IntlBase.monthIndex[len], dateObject);\n                        }\n                        else {\n                            formatOptions.weekday = dependable.dateObject[IntlBase.days][standalone][IntlBase.monthIndex[len]];\n                        }\n                        break;\n                    case 'M':\n                    case 'L':\n                        if (isBlazor()) {\n                            formatOptions.month = getValue('months.' + IntlBase.monthIndex[len], dateObject);\n                        }\n                        else {\n                            formatOptions.month = dependable.dateObject[IntlBase.month][standalone][IntlBase.monthIndex[len]];\n                        }\n                        break;\n                    case 'a':\n                        formatOptions.designator = isBlazor() ?\n                            getValue('dayPeriods', dateObject) : getValue('dayPeriods.format.wide', dateObject);\n                        break;\n                    case 'G':\n                        let eText = (len <= 3) ? 'eraAbbr' : (len === 4) ? 'eraNames' : 'eraNarrow';\n                        formatOptions.era = isBlazor() ? getValue('eras', dateObject) : getValue('eras.' + eText, dependable.dateObject);\n                        break;\n                    case 'z':\n                        formatOptions.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\n                        break;\n                }\n            }\n        }\n        return (value) => {\n            if (isNaN(value.getDate())) {\n                return null;\n            }\n            return this.intDateFormatter(value, formatOptions);\n        };\n    }\n    /**\n     * Returns formatted date string based on options passed.\n     * @param {Date} value\n     * @param {FormatOptions} options\n     */\n    // tslint:disable-next-line:max-func-body-length\n    static intDateFormatter(value, options) {\n        let pattern = options.pattern;\n        let ret = '';\n        let matches = pattern.match(IntlBase.dateParseRegex);\n        let dObject = this.getCurrentDateValue(value, options.isIslamic);\n        for (let match of matches) {\n            let length = match.length;\n            let char = match[0];\n            if (char === 'K') {\n                char = 'h';\n            }\n            let curval;\n            let curvalstr = '';\n            let isNumber;\n            let processNumber;\n            let curstr = '';\n            switch (char) {\n                case 'M':\n                case 'L':\n                    curval = dObject.month;\n                    if (length > 2) {\n                        ret += options.month[curval];\n                    }\n                    else {\n                        isNumber = true;\n                    }\n                    break;\n                case 'E':\n                case 'c':\n                    ret += options.weekday[weekdayKey[value.getDay()]];\n                    break;\n                case 'H':\n                case 'h':\n                case 'm':\n                case 's':\n                case 'd':\n                case 'f':\n                    isNumber = true;\n                    if (char === 'd') {\n                        curval = dObject.date;\n                    }\n                    else if (char === 'f') {\n                        isNumber = false;\n                        processNumber = true;\n                        curvalstr = value[timeSetter[char]]().toString();\n                        curvalstr = curvalstr.substring(0, length);\n                        let curlength = curvalstr.length;\n                        if (length !== curlength) {\n                            if (length > 3) {\n                                continue;\n                            }\n                            for (let i = 0; i < length - curlength; i++) {\n                                curvalstr = '0' + curvalstr.toString();\n                            }\n                        }\n                        curstr += curvalstr;\n                    }\n                    else {\n                        curval = value[timeSetter[char]]();\n                    }\n                    if (char === 'h') {\n                        curval = curval % 12 || 12;\n                    }\n                    break;\n                case 'y':\n                    processNumber = true;\n                    curstr += dObject.year;\n                    if (length === 2) {\n                        curstr = curstr.substr(curstr.length - 2);\n                    }\n                    break;\n                case 'a':\n                    let desig = value.getHours() < 12 ? 'am' : 'pm';\n                    ret += options.designator[desig];\n                    break;\n                case 'G':\n                    let dec = value.getFullYear() < 0 ? 0 : 1;\n                    let retu = options.era[dec];\n                    if (isNullOrUndefined(retu)) {\n                        retu = options.era[dec ? 0 : 1];\n                    }\n                    ret += retu || '';\n                    break;\n                case '\\'':\n                    ret += (match === '\\'\\'') ? '\\'' : match.replace(/\\'/g, '');\n                    break;\n                case 'z':\n                    let timezone = value.getTimezoneOffset();\n                    let pattern = (length < 4) ? '+H;-H' : options.timeZone.hourFormat;\n                    pattern = pattern.replace(/:/g, options.numMapper.timeSeparator);\n                    if (timezone === 0) {\n                        ret += options.timeZone.gmtZeroFormat;\n                    }\n                    else {\n                        processNumber = true;\n                        curstr = this.getTimeZoneValue(timezone, pattern);\n                    }\n                    curstr = options.timeZone.gmtFormat.replace(/\\{0\\}/, curstr);\n                    break;\n                case ':':\n                    ret += options.numMapper.numberSymbols[timeSeparator];\n                    /* tslint:enable no-any */\n                    break;\n                case '/':\n                    ret += options.dateSeperator;\n                    break;\n                case 'W':\n                    isNumber = true;\n                    curval = IntlBase.getWeekOfYear(value);\n                    break;\n                default:\n                    ret += match;\n            }\n            if (isNumber) {\n                processNumber = true;\n                curstr = this.checkTwodigitNumber(curval, length);\n            }\n            if (processNumber) {\n                ret += ParserBase.convertValueParts(curstr, IntlBase.latnParseRegex, options.numMapper.mapper);\n            }\n        }\n        return ret;\n    }\n    static getCurrentDateValue(value, isIslamic) {\n        if (isIslamic) {\n            return HijriParser.getHijriDate(value);\n        }\n        return { year: value.getFullYear(), month: value.getMonth() + 1, date: value.getDate() };\n    }\n    /**\n     * Returns two digit numbers for given value and length\n     */\n    static checkTwodigitNumber(val, len) {\n        let ret = val + '';\n        if (len === 2 && ret.length !== 2) {\n            return '0' + ret;\n        }\n        return ret;\n    }\n    /**\n     * Returns the value of the Time Zone.\n     * @param {number} tVal\n     * @param {string} pattern\n     * @private\n     */\n    static getTimeZoneValue(tVal, pattern) {\n        let splt = pattern.split(';');\n        let curPattern = splt[tVal > 0 ? 1 : 0];\n        let no = Math.abs(tVal);\n        return curPattern = curPattern.replace(/HH?|mm/g, (str) => {\n            let len = str.length;\n            let ishour = str.indexOf('H') !== -1;\n            return this.checkTwodigitNumber(Math.floor(ishour ? (no / 60) : (no % 60)), len);\n        });\n    }\n}\n\nconst errorText = {\n    'ms': 'minimumSignificantDigits',\n    'ls': 'maximumSignificantDigits',\n    'mf': 'minimumFractionDigits',\n    'lf': 'maximumFractionDigits',\n};\nconst percentSign = 'percentSign';\nconst minusSign = 'minusSign';\nconst mapper$1 = ['infinity', 'nan', 'group', 'decimal', 'exponential'];\n/**\n * Module for number formatting.\n * @private\n */\nclass NumberFormat {\n    /**\n     * Returns the formatter function for given skeleton.\n     * @param {string} culture -  Specifies the culture name to be which formatting.\n     * @param {NumberFormatOptions} option - Specific the format in which number  will format.\n     * @param {Object} object- Specifies the global cldr data collection.\n     * @return Function.\n     */\n    static numberFormatter(culture, option, cldr) {\n        let fOptions = extend({}, option);\n        let cOptions = {};\n        let dOptions = {};\n        let symbolPattern;\n        let dependable = IntlBase.getDependables(cldr, culture, '', true);\n        let numObject = dependable.numericObject;\n        dOptions.numberMapper = isBlazor() ? extend({}, numObject) :\n            ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true);\n        dOptions.currencySymbol = isBlazor() ? getValue('currencySymbol', numObject) : IntlBase.getCurrencySymbol(dependable.numericObject, fOptions.currency || defaultCurrencyCode, option.altSymbol);\n        /* tslint:disable no-any */\n        dOptions.percentSymbol = isBlazor() ? getValue('numberSymbols.percentSign', numObject) :\n            dOptions.numberMapper.numberSymbols[percentSign];\n        dOptions.minusSymbol = isBlazor() ? getValue('numberSymbols.minusSign', numObject) :\n            dOptions.numberMapper.numberSymbols[minusSign];\n        let symbols = dOptions.numberMapper.numberSymbols;\n        if ((option.format) && !(IntlBase.formatRegex.test(option.format))) {\n            cOptions = IntlBase.customFormat(option.format, dOptions, dependable.numericObject);\n        }\n        else {\n            extend(fOptions, IntlBase.getProperNumericSkeleton(option.format || 'N'));\n            fOptions.isCurrency = fOptions.type === 'currency';\n            fOptions.isPercent = fOptions.type === 'percent';\n            if (!isBlazor()) {\n                symbolPattern = IntlBase.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount);\n            }\n            fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, true);\n            this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, false, true);\n            if (!isUndefined(fOptions.fractionDigits)) {\n                fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits;\n            }\n            if (isUndefined(fOptions.useGrouping)) {\n                fOptions.useGrouping = true;\n            }\n            if (fOptions.isCurrency && !isBlazor()) {\n                symbolPattern = symbolPattern.replace(/\\u00A4/g, IntlBase.defaultCurrency);\n            }\n            if (!isBlazor()) {\n                let split = symbolPattern.split(';');\n                cOptions.nData = IntlBase.getFormatData(split[1] || '-' + split[0], true, dOptions.currencySymbol);\n                cOptions.pData = IntlBase.getFormatData(split[0], false, dOptions.currencySymbol);\n                if (fOptions.useGrouping) {\n                    fOptions.groupSeparator = symbols[mapper$1[2]];\n                    fOptions.groupData = this.getGroupingDetails(split[0]);\n                }\n            }\n            else {\n                cOptions.nData = extend({}, {}, getValue(fOptions.type + 'nData', numObject));\n                cOptions.pData = extend({}, {}, getValue(fOptions.type + 'pData', numObject));\n                if (fOptions.type === 'currency' && option.currency) {\n                    IntlBase.replaceBlazorCurrency([cOptions.pData, cOptions.nData], dOptions.currencySymbol, option.currency);\n                }\n            }\n            let minFrac = isUndefined(fOptions.minimumFractionDigits);\n            if (minFrac) {\n                fOptions.minimumFractionDigits = cOptions.nData.minimumFraction;\n            }\n            if (isUndefined(fOptions.maximumFractionDigits)) {\n                let mval = cOptions.nData.maximumFraction;\n                fOptions.maximumFractionDigits = isUndefined(mval) && fOptions.isPercent ? 0 : mval;\n            }\n            let mfrac = fOptions.minimumFractionDigits;\n            let lfrac = fOptions.maximumFractionDigits;\n            if (!isUndefined(mfrac) && !isUndefined(lfrac)) {\n                if (mfrac > lfrac) {\n                    fOptions.maximumFractionDigits = mfrac;\n                }\n            }\n        }\n        extend(cOptions.nData, fOptions);\n        extend(cOptions.pData, fOptions);\n        return (value) => {\n            if (isNaN(value)) {\n                return symbols[mapper$1[1]];\n            }\n            else if (!isFinite(value)) {\n                return symbols[mapper$1[0]];\n            }\n            return this.intNumberFormatter(value, cOptions, dOptions);\n        };\n    }\n    /**\n     * Returns grouping details for the pattern provided\n     * @param {string} pattern\n     * @returns {GroupDetails}\n     */\n    static getGroupingDetails(pattern) {\n        let ret = {};\n        let match = pattern.match(IntlBase.negativeDataRegex);\n        if (match && match[4]) {\n            let pattern = match[4];\n            let p = pattern.lastIndexOf(',');\n            if (p !== -1) {\n                let temp = pattern.split('.')[0];\n                ret.primary = (temp.length - p) - 1;\n                let s = pattern.lastIndexOf(',', p - 1);\n                if (s !== -1) {\n                    ret.secondary = p - 1 - s;\n                }\n            }\n        }\n        return ret;\n    }\n    /**\n     * Returns if the provided integer range is valid.\n     * @param {number} val1\n     * @param {number} val2\n     * @param {boolean} checkbothExist\n     * @param {boolean} isFraction\n     * @returns {boolean}\n     */\n    static checkValueRange(val1, val2, checkbothExist, isFraction) {\n        let decide = isFraction ? 'f' : 's';\n        let dint = 0;\n        let str1 = errorText['l' + decide];\n        let str2 = errorText['m' + decide];\n        if (!isUndefined(val1)) {\n            this.checkRange(val1, str1, isFraction);\n            dint++;\n        }\n        if (!isUndefined(val2)) {\n            this.checkRange(val2, str2, isFraction);\n            dint++;\n        }\n        if (dint === 2) {\n            if (val1 < val2) {\n                throwError(str2 + 'specified must be less than the' + str1);\n            }\n            else {\n                return true;\n            }\n        }\n        else if (checkbothExist && dint === 1) {\n            throwError('Both' + str2 + 'and' + str2 + 'must be present');\n        }\n        return false;\n    }\n    /**\n     * Check if the provided fraction range is valid\n     * @param {number} val\n     * @param {string} text\n     * @param {boolean} isFraction\n     * @returns {void}\n     */\n    static checkRange(val, text, isFraction) {\n        let range = isFraction ? [0, 20] : [1, 21];\n        if (val < range[0] || val > range[1]) {\n            throwError(text + 'value must be within the range' + range[0] + 'to' + range[1]);\n        }\n    }\n    /**\n     * Returns formatted numeric string for provided formatting options\n     * @param {number} value\n     * @param {base.GenericFormatOptions} fOptions\n     * @param {CommonOptions} dOptions\n     * @returns {string}\n     */\n    static intNumberFormatter(value, fOptions, dOptions) {\n        let curData;\n        if (isUndefined(fOptions.nData.type)) {\n            return undefined;\n        }\n        else {\n            if (value < 0) {\n                value = value * -1;\n                curData = fOptions.nData;\n            }\n            else if (value === 0) {\n                curData = fOptions.zeroData || fOptions.pData;\n            }\n            else {\n                curData = fOptions.pData;\n            }\n            let fValue = '';\n            if (curData.isPercent) {\n                value = value * 100;\n            }\n            if (curData.groupOne) {\n                fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits);\n            }\n            else {\n                fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits);\n                if (curData.minimumIntegerDigits) {\n                    fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits);\n                }\n            }\n            if (curData.type === 'scientific') {\n                fValue = value.toExponential(curData.maximumFractionDigits);\n                fValue = fValue.replace('e', dOptions.numberMapper.numberSymbols[mapper$1[4]]);\n            }\n            fValue = fValue.replace('.', dOptions.numberMapper.numberSymbols[mapper$1[3]]);\n            if (curData.useGrouping) {\n                fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ',', dOptions.numberMapper.numberSymbols[mapper$1[3]] || '.', curData.groupData.secondary);\n            }\n            fValue = ParserBase.convertValueParts(fValue, IntlBase.latnParseRegex, dOptions.numberMapper.mapper);\n            if (curData.nlead === 'N/A') {\n                return curData.nlead;\n            }\n            else {\n                return curData.nlead + fValue + curData.nend;\n            }\n        }\n    }\n    /**\n     * Returns significant digits processed numeric string\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {string}\n     */\n    static processSignificantDigits(value, min, max) {\n        let temp = value + '';\n        let tn;\n        let length = temp.length;\n        if (length < min) {\n            return value.toPrecision(min);\n        }\n        else {\n            temp = value.toPrecision(max);\n            tn = +temp;\n            return tn + '';\n        }\n    }\n    /**\n     * Returns grouped numeric string\n     * @param {string} val\n     * @param {number} level1\n     * @param {string} sep\n     * @param {string} decimalSymbol\n     * @param {number} level2\n     * @returns {string}\n     */\n    static groupNumbers(val, level1, sep, decimalSymbol, level2) {\n        let flag = !isNullOrUndefined(level2) && level2 !== 0;\n        let split = val.split(decimalSymbol);\n        let prefix = split[0];\n        let length = prefix.length;\n        let str = '';\n        while (length > level1) {\n            str = prefix.slice(length - level1, length) + (str.length ?\n                (sep + str) : '');\n            length -= level1;\n            if (flag) {\n                level1 = level2;\n                flag = false;\n            }\n        }\n        split[0] = prefix.slice(0, length) + (str.length ? sep : '') + str;\n        return split.join(decimalSymbol);\n    }\n    /**\n     * Returns fraction processed numeric string\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {string}\n     */\n    static processFraction(value, min, max) {\n        let temp = (value + '').split('.')[1];\n        let length = temp ? temp.length : 0;\n        if (min && length < min) {\n            let ret = '';\n            if (length === 0) {\n                ret = value.toFixed(min);\n            }\n            else {\n                ret += value;\n                for (let j = 0; j < min - length; j++) {\n                    ret += '0';\n                }\n                return ret;\n            }\n            return value.toFixed(min);\n        }\n        else if (!isNullOrUndefined(max) && (length > max || max === 0)) {\n            return value.toFixed(max);\n        }\n        return value + '';\n    }\n    /**\n     * Returns integer processed numeric string\n     * @param {string} value\n     * @param {number} min\n     * @returns {string}\n     */\n    static processMinimumIntegers(value, min) {\n        let temp = value.split('.');\n        let lead = temp[0];\n        let len = lead.length;\n        if (len < min) {\n            for (let i = 0; i < min - len; i++) {\n                lead = '0' + lead;\n            }\n            temp[0] = lead;\n        }\n        return temp.join('.');\n    }\n}\n\nconst standalone$1 = 'stand-alone';\nconst latnRegex$1 = /^[0-9]*$/;\nconst timeSetter$1 = {\n    minute: 'setMinutes',\n    hour: 'setHours',\n    second: 'setSeconds',\n    day: 'setDate',\n    month: 'setMonth',\n    milliseconds: 'setMilliseconds'\n};\nconst month = 'months';\n/* tslint:disable no-any */\n/**\n * Date Parser.\n * @private\n */\nclass DateParser {\n    /**\n     * Returns the parser function for given skeleton.\n     * @param {string} -  Specifies the culture name to be which formatting.\n     * @param {DateFormatOptions} - Specific the format in which string date  will be parsed.\n     * @param {cldr} - Specifies the global cldr data collection.\n     *  @return Function.\n     */\n    // tslint:disable-next-line:max-func-body-length\n    static dateParser(culture, option, cldr) {\n        let dependable = IntlBase.getDependables(cldr, culture, option.calendar);\n        // tslint:disable-next-line\n        let numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), false, isBlazor());\n        let parseOptions = {};\n        if (isBlazor() && option.isServerRendered) {\n            option = IntlBase.compareBlazorDateFormats(option, culture);\n        }\n        let resPattern = option.format ||\n            IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');\n        let regexString = '';\n        let hourOnly;\n        if (isUndefined(resPattern)) {\n            throwError('Format options or type given must be invalid');\n        }\n        else {\n            resPattern = IntlBase.ConvertDateToWeekFormat(resPattern);\n            parseOptions = { isIslamic: IntlBase.islamicRegex.test(option.calendar), pattern: resPattern, evalposition: {} };\n            let patternMatch = resPattern.match(IntlBase.dateParseRegex) || [];\n            let length = patternMatch.length;\n            let gmtCorrection = 0;\n            let zCorrectTemp = 0;\n            let isgmtTraversed = false;\n            let nRegx = numOptions.numericRegex;\n            // tslint:disable-next-line\n            let numMapper = isBlazor() ? dependable.parserObject.numbers :\n                ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));\n            for (let i = 0; i < length; i++) {\n                let str = patternMatch[i];\n                let len = str.length;\n                let char = (str[0] === 'K') ? 'h' : str[0];\n                let isNumber;\n                let canUpdate;\n                // tslint:disable-next-line\n                let charKey = datePartMatcher[char];\n                let optional = (len === 2) ? '' : '?';\n                if (isgmtTraversed) {\n                    gmtCorrection = zCorrectTemp;\n                    isgmtTraversed = false;\n                }\n                switch (char) {\n                    case 'E':\n                    case 'c':\n                        // tslint:disable\n                        let weekData;\n                        if (isBlazor()) {\n                            weekData = getValue('days.' + IntlBase.monthIndex[len], dependable.dateObject);\n                        }\n                        else {\n                            weekData = dependable.dateObject[IntlBase.days][standalone$1][IntlBase.monthIndex[len]];\n                        }\n                        let weekObject = ParserBase.reverseObject(weekData);\n                        // tslint:enable\n                        regexString += '(' + Object.keys(weekObject).join('|') + ')';\n                        break;\n                    case 'M':\n                    case 'L':\n                    case 'd':\n                    case 'm':\n                    case 's':\n                    case 'h':\n                    case 'H':\n                    case 'f':\n                        canUpdate = true;\n                        if ((char === 'M' || char === 'L') && len > 2) {\n                            let monthData;\n                            if (isBlazor()) {\n                                /* tslint:disable no-any */\n                                monthData = getValue('months.' + IntlBase.monthIndex[len], dependable.dateObject);\n                            }\n                            else {\n                                /* tslint:disable no-any */\n                                monthData = dependable.dateObject[month][standalone$1][IntlBase.monthIndex[len]];\n                            }\n                            // tslint:disable-next-line\n                            parseOptions[charKey] = ParserBase.reverseObject(monthData);\n                            /* tslint:disable no-any */\n                            regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';\n                        }\n                        else if (char === 'f') {\n                            if (len > 3) {\n                                continue;\n                            }\n                            isNumber = true;\n                            regexString += '(' + nRegx + nRegx + '?' + nRegx + '?' + ')';\n                        }\n                        else {\n                            isNumber = true;\n                            regexString += '(' + nRegx + nRegx + optional + ')';\n                        }\n                        if (char === 'h') {\n                            parseOptions.hour12 = true;\n                        }\n                        break;\n                    case 'W':\n                        let opt = len === 1 ? '?' : '';\n                        regexString += '(' + nRegx + opt + nRegx + ')';\n                        break;\n                    case 'y':\n                        canUpdate = isNumber = true;\n                        if (len === 2) {\n                            regexString += '(' + nRegx + nRegx + ')';\n                        }\n                        else {\n                            regexString += '(' + nRegx + '{' + len + ',})';\n                        }\n                        break;\n                    case 'a':\n                        canUpdate = true;\n                        let periodValur = isBlazor() ?\n                            getValue('dayPeriods', dependable.dateObject) :\n                            getValue('dayPeriods.format.wide', dependable.dateObject);\n                        parseOptions[charKey] = ParserBase.reverseObject(periodValur);\n                        regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';\n                        break;\n                    case 'G':\n                        canUpdate = true;\n                        let eText = (len <= 3) ? 'eraAbbr' : (len === 4) ? 'eraNames' : 'eraNarrow';\n                        parseOptions[charKey] = ParserBase.reverseObject(isBlazor() ?\n                            getValue('eras', dependable.dateObject) : getValue('eras.' + eText, dependable.dateObject));\n                        regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + '?)';\n                        break;\n                    case 'z':\n                        let tval = new Date().getTimezoneOffset();\n                        canUpdate = (tval !== 0);\n                        parseOptions[charKey] = getValue('dates.timeZoneNames', dependable.parserObject);\n                        let tzone = parseOptions[charKey];\n                        hourOnly = (len < 4);\n                        let hpattern = hourOnly ? '+H;-H' : tzone.hourFormat;\n                        hpattern = hpattern.replace(/:/g, numMapper.timeSeparator);\n                        regexString += '(' + this.parseTimeZoneRegx(hpattern, tzone, nRegx) + ')?';\n                        isgmtTraversed = true;\n                        zCorrectTemp = hourOnly ? 6 : 12;\n                        break;\n                    case '\\'':\n                        let iString = str.replace(/\\'/g, '');\n                        regexString += '(' + iString + ')?';\n                        break;\n                    default:\n                        regexString += '([\\\\D])';\n                        break;\n                }\n                if (canUpdate) {\n                    parseOptions.evalposition[charKey] = { isNumber: isNumber, pos: i + 1 + gmtCorrection, hourOnly: hourOnly };\n                }\n                if (i === length - 1 && !isNullOrUndefined(regexString)) {\n                    parseOptions.parserRegex = new RegExp('^' + regexString + '$', 'i');\n                }\n            }\n        }\n        return (value) => {\n            let parsedDateParts = this.internalDateParse(value, parseOptions, numOptions);\n            if (isNullOrUndefined(parsedDateParts) || !Object.keys(parsedDateParts).length) {\n                return null;\n            }\n            if (parseOptions.isIslamic) {\n                let dobj = {};\n                let tYear = parsedDateParts.year;\n                let tDate = parsedDateParts.day;\n                let tMonth = parsedDateParts.month;\n                let ystrig = tYear ? (tYear + '') : '';\n                let is2DigitYear = (ystrig.length === 2);\n                if (!tYear || !tMonth || !tDate || is2DigitYear) {\n                    dobj = HijriParser.getHijriDate(new Date());\n                }\n                if (is2DigitYear) {\n                    tYear = parseInt((dobj.year + '').slice(0, 2) + ystrig, 10);\n                }\n                // tslint:disable-next-line\n                let dateObject = HijriParser.toGregorian(tYear || dobj.year, tMonth || dobj.month, tDate || dobj.date);\n                parsedDateParts.year = dateObject.getFullYear();\n                parsedDateParts.month = dateObject.getMonth() + 1;\n                parsedDateParts.day = dateObject.getDate();\n            }\n            return this.getDateObject(parsedDateParts);\n        };\n    }\n    /* tslint:disable */\n    /**\n     * Returns date object for provided date options\n     * @param {DateParts} options\n     * @param {Date} value\n     * @returns {Date}\n     */\n    static getDateObject(options, value) {\n        let res = value || new Date();\n        res.setMilliseconds(0);\n        let tKeys = ['hour', 'minute', 'second', 'milliseconds', 'month', 'day'];\n        let y = options.year;\n        let desig = options.designator;\n        let tzone = options.timeZone;\n        if (!isUndefined(y)) {\n            let len = (y + '').length;\n            if (len <= 2) {\n                let century = Math.floor(res.getFullYear() / 100) * 100;\n                y += century;\n            }\n            res.setFullYear(y);\n        }\n        for (let key of tKeys) {\n            let tValue = options[key];\n            if (isUndefined(tValue) && key === \"day\") {\n                res.setDate(1);\n            }\n            if (!isUndefined(tValue)) {\n                if (key === 'month') {\n                    tValue -= 1;\n                    if (tValue < 0 || tValue > 11) {\n                        return new Date('invalid');\n                    }\n                    let pDate = res.getDate();\n                    res.setDate(1);\n                    res[timeSetter$1[key]](tValue);\n                    let lDate = new Date(res.getFullYear(), tValue + 1, 0).getDate();\n                    res.setDate(pDate < lDate ? pDate : lDate);\n                }\n                else {\n                    if (key === 'day') {\n                        let lastDay = new Date(res.getFullYear(), res.getMonth() + 1, 0).getDate();\n                        if ((tValue < 1 || tValue > lastDay)) {\n                            return null;\n                        }\n                    }\n                    res[timeSetter$1[key]](tValue);\n                }\n            }\n        }\n        if (!isUndefined(desig)) {\n            let hour = res.getHours();\n            if (desig === 'pm') {\n                res.setHours(hour + (hour === 12 ? 0 : 12));\n            }\n            else if (hour === 12) {\n                res.setHours(0);\n            }\n        }\n        if (!isUndefined(tzone)) {\n            let tzValue = tzone - res.getTimezoneOffset();\n            if (tzValue !== 0) {\n                res.setMinutes(res.getMinutes() + tzValue);\n            }\n        }\n        return res;\n    }\n    /**\n     * Returns date parsing options for provided value along with parse and numeric options\n     * @param {string} value\n     * @param {ParseOptions} parseOptions\n     * @param {NumericOptions} num\n     * @returns {DateParts}\n     */\n    static internalDateParse(value, parseOptions, num) {\n        let matches = value.match(parseOptions.parserRegex);\n        let retOptions = { 'hour': 0, 'minute': 0, 'second': 0 };\n        let nRegx = num.numericRegex;\n        if (isNullOrUndefined(matches)) {\n            return null;\n        }\n        else {\n            let props = Object.keys(parseOptions.evalposition);\n            for (let prop of props) {\n                let curObject = parseOptions.evalposition[prop];\n                let matchString = matches[curObject.pos];\n                if (curObject.isNumber) {\n                    retOptions[prop] = this.internalNumberParser(matchString, num);\n                }\n                else {\n                    if (prop === 'timeZone' && !isUndefined(matchString)) {\n                        let pos = curObject.pos;\n                        let val;\n                        let tmatch = matches[pos + 1];\n                        let flag = !isUndefined(tmatch);\n                        if (curObject.hourOnly) {\n                            val = this.getZoneValue(flag, tmatch, matches[pos + 4], num) * 60;\n                        }\n                        else {\n                            val = this.getZoneValue(flag, tmatch, matches[pos + 7], num) * 60;\n                            val += this.getZoneValue(flag, matches[pos + 4], matches[pos + 10], num);\n                        }\n                        if (!isNullOrUndefined(val)) {\n                            retOptions[prop] = val;\n                        }\n                    }\n                    else {\n                        matchString = prop === 'month' ? matchString[0].toUpperCase() + matchString.substring(1).toLowerCase() : matchString;\n                        retOptions[prop] = parseOptions[prop][matchString];\n                    }\n                }\n            }\n            if (parseOptions.hour12) {\n                retOptions.hour12 = true;\n            }\n        }\n        return retOptions;\n    }\n    /**\n     * Returns parsed number for provided Numeric string and Numeric Options\n     * @param {string} value\n     * @param {NumericOptions} option\n     * @returns {number}\n     */\n    static internalNumberParser(value, option) {\n        value = ParserBase.convertValueParts(value, option.numberParseRegex, option.numericPair);\n        if (latnRegex$1.test(value)) {\n            return +value;\n        }\n        return null;\n    }\n    /**\n     * Returns parsed time zone RegExp for provided hour format and time zone\n     * @param {string} hourFormat\n     * @param {base.TimeZoneOptions} tZone\n     * @param {string} nRegex\n     * @returns {string}\n     */\n    static parseTimeZoneRegx(hourFormat, tZone, nRegex) {\n        let pattern = tZone.gmtFormat;\n        let ret;\n        let cRegex = '(' + nRegex + ')' + '(' + nRegex + ')';\n        let splitStr;\n        ret = hourFormat.replace('+', '\\\\+');\n        if (hourFormat.indexOf('HH') !== -1) {\n            ret = ret.replace(/HH|mm/g, '(' + cRegex + ')');\n        }\n        else {\n            ret = ret.replace(/H|m/g, '(' + cRegex + '?)');\n        }\n        splitStr = (ret.split(';').map((str) => {\n            return pattern.replace('{0}', str);\n        }));\n        ret = splitStr.join('|') + '|' + tZone.gmtZeroFormat;\n        return ret;\n    }\n    /**\n     * Returns zone based value.\n     * @param {boolean} flag\n     * @param {string} val1\n     * @param {string} val2\n     * @param {NumericOptions} num\n     * @returns {number}\n     */\n    static getZoneValue(flag, val1, val2, num) {\n        let ival = flag ? val1 : val2;\n        if (!ival) {\n            return 0;\n        }\n        let value = this.internalNumberParser(ival, num);\n        if (flag) {\n            return -value;\n        }\n        return value;\n    }\n}\n/* tslint:enable */\n\nconst parseRegex = /^([^0-9]*)(([0-9,]*[0-9]+)(\\.[0-9]+)?)([Ee][+-]?[0-9]+)?([^0-9]*)$/;\nconst groupRegex = /,/g;\nconst keys = ['minusSign', 'infinity'];\n/**\n * Module for Number Parser.\n * @private\n */\nclass NumberParser {\n    /**\n     * Returns the parser function for given skeleton.\n     * @param {string} -  Specifies the culture name to be which formatting.\n     * @param {NumberFormatOptions} - Specific the format in which number  will parsed.\n     * @param {cldr} - Specifies the global cldr data collection.\n     * @return Function.\n     */\n    static numberParser(culture, option, cldr) {\n        let dependable = IntlBase.getDependables(cldr, culture, '', true);\n        let parseOptions = { custom: true };\n        let numOptions;\n        if ((IntlBase.formatRegex.test(option.format)) || !(option.format)) {\n            extend(parseOptions, IntlBase.getProperNumericSkeleton(option.format || 'N'));\n            parseOptions.custom = false;\n        }\n        else {\n            extend(parseOptions, IntlBase.customFormat(option.format, null, null));\n        }\n        let numbers = getValue('numbers', dependable.parserObject);\n        numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true, isBlazor());\n        parseOptions.symbolRegex = ParserBase.getSymbolRegex(Object.keys(numOptions.symbolMatch));\n        // tslint:disable-next-line:no-any\n        parseOptions.infinity = numOptions.symbolNumberSystem[keys[1]];\n        let symbolpattern;\n        if (!isBlazor()) {\n            symbolpattern = IntlBase.getSymbolPattern(parseOptions.type, numOptions.numberSystem, dependable.numericObject, parseOptions.isAccount);\n            if (symbolpattern) {\n                symbolpattern = symbolpattern.replace(/\\u00A4/g, IntlBase.defaultCurrency);\n                let split = symbolpattern.split(';');\n                parseOptions.nData = IntlBase.getFormatData(split[1] || '-' + split[0], true, '');\n                parseOptions.pData = IntlBase.getFormatData(split[0], true, '');\n            }\n        }\n        else {\n            parseOptions.nData = extend({}, {}, getValue(parseOptions.type + 'nData', numbers));\n            parseOptions.pData = extend({}, {}, getValue(parseOptions.type + 'pData', numbers));\n            if (parseOptions.type === 'currency' && option.currency) {\n                IntlBase.replaceBlazorCurrency([parseOptions.pData, parseOptions.nData], getValue('currencySymbol', numbers), option.currency);\n            }\n        }\n        return (value) => {\n            return this.getParsedNumber(value, parseOptions, numOptions);\n        };\n    }\n    /**\n     * Returns parsed number for the provided formatting options\n     * @param {string} value\n     * @param {NumericParts} options\n     * @param {NumericOptions} numOptions\n     * @returns {number}\n     */\n    static getParsedNumber(value, options, numOptions) {\n        let isNegative;\n        let isPercent;\n        let tempValue;\n        let lead;\n        let end;\n        let ret;\n        if (value.indexOf(options.infinity) !== -1) {\n            return Infinity;\n        }\n        else {\n            value = ParserBase.convertValueParts(value, options.symbolRegex, numOptions.symbolMatch);\n            value = ParserBase.convertValueParts(value, numOptions.numberParseRegex, numOptions.numericPair);\n            if (value.indexOf('.') === 0) {\n                value = '0' + value;\n            }\n            let matches = value.match(parseRegex);\n            if (isNullOrUndefined(matches)) {\n                return NaN;\n            }\n            lead = matches[1];\n            tempValue = matches[2];\n            let exponent = matches[5];\n            end = matches[6];\n            isNegative = options.custom ? ((lead === options.nData.nlead) && (end === options.nData.nend)) :\n                ((lead.indexOf(options.nData.nlead) !== -1) && (end.indexOf(options.nData.nend) !== -1));\n            isPercent = isNegative ?\n                options.nData.isPercent :\n                options.pData.isPercent;\n            tempValue = tempValue.replace(groupRegex, '');\n            if (exponent) {\n                tempValue += exponent;\n            }\n            ret = +tempValue;\n            if (options.type === 'percent' || isPercent) {\n                ret = ret / 100;\n            }\n            if (options.custom || options.fractionDigits) {\n                ret = parseFloat(ret.toFixed(options.custom ?\n                    (isNegative ? options.nData.maximumFractionDigits : options.pData.maximumFractionDigits) : options.fractionDigits));\n            }\n            if (isNegative) {\n                ret *= -1;\n            }\n            return ret;\n        }\n    }\n}\n\nclass Observer {\n    constructor(context) {\n        this.ranArray = [];\n        this.boundedEvents = {};\n        if (isNullOrUndefined(context)) {\n            return;\n        }\n        this.context = context;\n    }\n    ;\n    /**\n     * To attach handler for given property in current context.\n     * @param {string} property - specifies the name of the event.\n     * @param {Function} handler - Specifies the handler function to be called while event notified.\n     * @param {Object} context - Specifies the context binded to the handler.\n     * @param {string} id - specifies the random generated id.\n     * @return {void}\n     */\n    on(property, handler, context, id) {\n        if (isNullOrUndefined(handler)) {\n            return;\n        }\n        let cntxt = context || this.context;\n        if (this.notExist(property)) {\n            this.boundedEvents[property] = [{ handler: handler, context: cntxt }];\n            return;\n        }\n        if (!isNullOrUndefined(id)) {\n            if (this.ranArray.indexOf(id) === -1) {\n                this.ranArray.push(id);\n                this.boundedEvents[property].push({ handler: handler, context: cntxt, id: id });\n            }\n        }\n        else if (!this.isHandlerPresent(this.boundedEvents[property], handler)) {\n            this.boundedEvents[property].push({ handler: handler, context: cntxt });\n        }\n    }\n    /**\n     * To remove handlers from a event attached using on() function.\n     * @param {string} eventName - specifies the name of the event.\n     * @param {Function} handler - Optional argument specifies the handler function to be called while event notified.\n     * @param {string} id - specifies the random generated id.\n     * @return {void}\n     */\n    off(property, handler, id) {\n        if (this.notExist(property)) {\n            return;\n        }\n        let curObject = getValue(property, this.boundedEvents);\n        if (handler) {\n            for (let i = 0; i < curObject.length; i++) {\n                if (id) {\n                    if (curObject[i].id === id) {\n                        curObject.splice(i, 1);\n                        let indexLocation = this.ranArray.indexOf(id);\n                        if (indexLocation !== -1) {\n                            this.ranArray.splice(indexLocation, 1);\n                        }\n                        break;\n                    }\n                }\n                else if (handler === curObject[i].handler) {\n                    curObject.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        else {\n            delete this.boundedEvents[property];\n        }\n    }\n    /**\n     * To notify the handlers in the specified event.\n     * @param {string} property - Specifies the event to be notify.\n     * @param {Object} args - Additional parameters to pass while calling the handler.\n     * @param {Function} successHandler - this function will invoke after event successfully triggered\n     * @param {Function} errorHandler - this function will invoke after event if it was failure to call.\n     * @return {void}\n     */\n    notify(property, argument, successHandler, errorHandler) {\n        if (this.notExist(property)) {\n            if (successHandler) {\n                successHandler.call(this, argument);\n            }\n            return;\n        }\n        if (argument) {\n            argument.name = property;\n        }\n        let blazor = 'Blazor';\n        let curObject = getValue(property, this.boundedEvents).slice(0);\n        if (window[blazor]) {\n            return this.blazorCallback(curObject, argument, successHandler, errorHandler, 0);\n        }\n        else {\n            for (let cur of curObject) {\n                cur.handler.call(cur.context, argument);\n            }\n            if (successHandler) {\n                successHandler.call(this, argument);\n            }\n        }\n    }\n    blazorCallback(objs, argument, successHandler, errorHandler, index) {\n        let isTrigger = index === objs.length - 1;\n        if (index < objs.length) {\n            let obj = objs[index];\n            let promise = obj.handler.call(obj.context, argument);\n            if (promise && typeof promise.then === 'function') {\n                if (!successHandler) {\n                    return promise;\n                }\n                promise.then((data) => {\n                    data = typeof data === 'string' && this.isJson(data) ? JSON.parse(data, this.dateReviver) : data;\n                    extend(argument, argument, data, true);\n                    if (successHandler && isTrigger) {\n                        successHandler.call(obj.context, argument);\n                    }\n                    else {\n                        return this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);\n                    }\n                }).catch((data) => {\n                    if (errorHandler) {\n                        errorHandler.call(obj.context, typeof data === 'string' &&\n                            this.isJson(data) ? JSON.parse(data, this.dateReviver) : data);\n                    }\n                });\n            }\n            else if (successHandler && isTrigger) {\n                successHandler.call(obj.context, argument);\n            }\n            else {\n                return this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);\n            }\n        }\n    }\n    // tslint:disable-next-line:no-any\n    dateReviver(key, value) {\n        let dPattern = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;\n        if (isBlazor && typeof value === 'string' && value.match(dPattern) !== null) {\n            return (new Date(value));\n        }\n        return (value);\n    }\n    isJson(value) {\n        try {\n            JSON.parse(value);\n        }\n        catch (e) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * To destroy handlers in the event\n     */\n    destroy() {\n        this.boundedEvents = this.context = undefined;\n    }\n    /**\n     * Returns if the property exists.\n     */\n    notExist(prop) {\n        return this.boundedEvents.hasOwnProperty(prop) === false || this.boundedEvents[prop].length <= 0;\n    }\n    /**\n     * Returns if the handler is present.\n     */\n    isHandlerPresent(boundedEvents, handler) {\n        for (let cur of boundedEvents) {\n            if (cur.handler === handler) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Specifies the observer used for external change detection.\n */\nlet onIntlChange = new Observer();\n/**\n * Specifies the default rtl status for EJ2 components.\n */\nlet rightToLeft = false;\n/**\n * Specifies the CLDR data loaded for internationalization functionalities.\n * @private\n */\nlet cldrData = {};\n/**\n * Specifies the default culture value to be considered.\n * @private\n */\nlet defaultCulture = 'en-US';\n/**\n * Specifies default currency code to be considered\n * @private\n */\nlet defaultCurrencyCode = 'USD';\nconst mapper = ['numericObject', 'dateObject'];\n/**\n * Internationalization class provides support to parse and format the number and date object to the desired format.\n * ```typescript\n * // To set the culture globally\n * setCulture('en-GB');\n *\n * // To set currency code globally\n * setCurrencyCode('EUR');\n *\n * //Load cldr data\n * loadCldr(gregorainData);\n * loadCldr(timeZoneData);\n * loadCldr(numbersData);\n * loadCldr(numberSystemData);\n *\n * // To use formatter in component side\n * let Intl:Internationalization = new Internationalization();\n *\n * // Date formatting\n * let dateFormatter: Function = Intl.getDateFormat({skeleton:'long',type:'dateTime'});\n * dateFormatter(new Date('11/2/2016'));\n * dateFormatter(new Date('25/2/2030'));\n * Intl.formatDate(new Date(),{skeleton:'E'});\n *\n * //Number formatting\n * let numberFormatter: Function = Intl.getNumberFormat({skeleton:'C5'})\n * numberFormatter(24563334);\n * Intl.formatNumber(123123,{skeleton:'p2'});\n *\n * // Date parser\n * let dateParser: Function = Intl.getDateParser({skeleton:'short',type:'time'});\n * dateParser('10:30 PM');\n * Intl.parseDate('10',{skeleton:'H'});\n * ```\n */\nclass Internationalization {\n    constructor(cultureName) {\n        if (cultureName) {\n            this.culture = cultureName;\n        }\n    }\n    /**\n     * Returns the format function for given options.\n     * @param {DateFormatOptions} options - Specifies the format options in which the format function will return.\n     * @returns {Function}\n     */\n    getDateFormat(options) {\n        return DateFormat.dateFormat(this.getCulture(), options || { type: 'date', skeleton: 'short' }, cldrData);\n    }\n    /**\n     * Returns the format function for given options.\n     * @param {NumberFormatOptions} options - Specifies the format options in which the format function will return.\n     * @returns {Function}\n     */\n    getNumberFormat(options) {\n        if (options && !options.currency) {\n            options.currency = defaultCurrencyCode;\n        }\n        if (isBlazor() && options && !options.format) {\n            options.minimumFractionDigits = 0;\n        }\n        return NumberFormat.numberFormatter(this.getCulture(), options || {}, cldrData);\n    }\n    /**\n     * Returns the parser function for given options.\n     * @param {DateFormatOptions} options - Specifies the format options in which the parser function will return.\n     * @returns {Function}\n     */\n    getDateParser(options) {\n        return DateParser.dateParser(this.getCulture(), options || { skeleton: 'short', type: 'date' }, cldrData);\n    }\n    /**\n     * Returns the parser function for given options.\n     * @param {NumberFormatOptions} options - Specifies the format options in which the parser function will return.\n     * @returns {Function}\n     */\n    getNumberParser(options) {\n        if (isBlazor() && options && !options.format) {\n            options.minimumFractionDigits = 0;\n        }\n        return NumberParser.numberParser(this.getCulture(), options || { format: 'N' }, cldrData);\n    }\n    /**\n     * Returns the formatted string based on format options.\n     * @param {Number} value - Specifies the number to format.\n     * @param {NumberFormatOptions} option - Specifies the format options in which the number will be formatted.\n     * @returns {string}\n     */\n    formatNumber(value, option) {\n        return this.getNumberFormat(option)(value);\n    }\n    /**\n     * Returns the formatted date string based on format options.\n     * @param {Number} value - Specifies the number to format.\n     * @param {DateFormatOptions} option - Specifies the format options in which the number will be formatted.\n     * @returns {string}\n     */\n    formatDate(value, option) {\n        return this.getDateFormat(option)(value);\n    }\n    /**\n     * Returns the date object for given date string and options.\n     * @param {string} value - Specifies the string to parse.\n     * @param {DateFormatOptions} option - Specifies the parse options in which the date string will be parsed.\n     * @returns {Date}\n     */\n    parseDate(value, option) {\n        return this.getDateParser(option)(value);\n    }\n    /**\n     * Returns the number object from the given string value and options.\n     * @param {string} value - Specifies the string to parse.\n     * @param {NumberFormatOptions} option - Specifies the parse options in which the  string number  will be parsed.\n     * @returns {number}\n     */\n    parseNumber(value, option) {\n        return this.getNumberParser(option)(value);\n    }\n    /**\n     * Returns Native Date Time Pattern\n     * @param {DateFormatOptions} option - Specifies the parse options for resultant date time pattern.\n     * @param {boolean} isExcelFormat - Specifies format value to be converted to excel pattern.\n     * @returns {string}\n     * @private\n     */\n    getDatePattern(option, isExcelFormat) {\n        return IntlBase.getActualDateTimeFormat(this.getCulture(), option, cldrData, isExcelFormat);\n    }\n    /**\n     * Returns Native Number Pattern\n     * @param {NumberFormatOptions} option - Specifies the parse options for resultant number pattern.\n     * @returns {string}\n     * @private\n     */\n    getNumberPattern(option, isExcel) {\n        return IntlBase.getActualNumberFormat(this.getCulture(), option, cldrData, isExcel);\n    }\n    /**\n     * Returns the First Day of the Week\n     * @returns {number}\n     */\n    getFirstDayOfWeek() {\n        return IntlBase.getWeekData(this.getCulture(), cldrData);\n    }\n    getCulture() {\n        return this.culture || defaultCulture;\n    }\n}\n/**\n * Set the default culture to all EJ2 components\n * @param {string} cultureName - Specifies the culture name to be set as default culture.\n */\nfunction setCulture(cultureName) {\n    defaultCulture = cultureName;\n    onIntlChange.notify('notifyExternalChange', { 'locale': defaultCulture });\n}\n/**\n * Set the default currency code to all EJ2 components\n * @param {string} currencyCode Specifies the culture name to be set as default culture.\n * @returns {void}\n */\nfunction setCurrencyCode(currencyCode) {\n    defaultCurrencyCode = currencyCode;\n    onIntlChange.notify('notifyExternalChange', { 'currencyCode': defaultCurrencyCode });\n}\n/**\n * Load the CLDR data into context\n * @param {Object[]} obj Specifies the CLDR data's to be used for formatting and parser.\n * @returns {void}\n */\nfunction loadCldr(...data) {\n    for (let obj of data) {\n        extend(cldrData, obj, {}, true);\n    }\n}\n/**\n * To enable or disable RTL functionality for all components globally.\n * @param {boolean} status - Optional argument Specifies the status value to enable or disable rtl option.\n * @returns {void}\n */\nfunction enableRtl(status = true) {\n    rightToLeft = status;\n    onIntlChange.notify('notifyExternalChange', { enableRtl: rightToLeft });\n}\n/**\n * To get the numeric CLDR object for given culture\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\n * @ignore\n * @private\n */\nfunction getNumericObject(locale, type) {\n    /* tslint:disable no-any */\n    let numObject = IntlBase.getDependables(cldrData, locale, '', true)[mapper[0]];\n    let dateObject = IntlBase.getDependables(cldrData, locale, '')[mapper[1]];\n    let numSystem = getValue('defaultNumberingSystem', numObject);\n    let symbPattern = isBlazor() ? getValue('numberSymbols', numObject) : getValue('symbols-numberSystem-' + numSystem, numObject);\n    let pattern = IntlBase.getSymbolPattern(type || 'decimal', numSystem, numObject, false);\n    return extend(symbPattern, IntlBase.getFormatData(pattern, true, '', true), { 'dateSeparator': IntlBase.getDateSeparator(dateObject) });\n}\n/**\n * To get the numeric CLDR  number base object for given culture\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\n * @param {string} currency - Specifies the currency for which numericObject to be returned.\n * @ignore\n * @private\n */\nfunction getNumberDependable(locale, currency) {\n    let numObject = IntlBase.getDependables(cldrData, locale, '', true);\n    return IntlBase.getCurrencySymbol(numObject.numericObject, currency);\n}\n/**\n * To get the default date CLDR object.\n * @ignore\n * @private\n */\nfunction getDefaultDateObject(mode) {\n    return IntlBase.getDependables(cldrData, '', mode, false)[mapper[1]];\n}\n\nconst blazorCultureFormats = {\n    'en-US': {\n        'd': 'M/d/y',\n        'D': 'EEEE, MMMM d, y',\n        'f': 'EEEE, MMMM d, y h:mm a',\n        'F': 'EEEE, MMMM d, y h:mm:s a',\n        'g': 'M/d/y h:mm a',\n        'G': 'M/d/yyyy h:mm:ss tt',\n        'm': 'MMMM d',\n        'M': 'MMMM d',\n        'r': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n        'R': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n        's': 'yyyy\\'-\\'MM\\'-\\'dd\\'T\\'HH\\':\\'mm\\':\\'ss',\n        't': 'h:mm tt',\n        'T': 'h:m:s tt',\n        'u': 'yyyy\\'-\\'MM\\'-\\'dd HH\\':\\'mm\\':\\'ss\\'Z\\'',\n        'U': 'dddd, MMMM d, yyyy h:mm:ss tt',\n        'y': 'MMMM yyyy',\n        'Y': 'MMMM yyyy'\n    }\n};\n/**\n * Date base common constants and function for date parser and formatter.\n */\nvar IntlBase;\n(function (IntlBase) {\n    // tslint:disable-next-line:max-line-length\n    IntlBase.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\\*.)?((([#,]*[0,]*0+)(\\.0*[0-9]*#*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n    IntlBase.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\\*.)?((([0#,]*[0,]*[0#]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n    IntlBase.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;\n    const fractionRegex = /[0-9]/g;\n    IntlBase.defaultCurrency = '$';\n    const mapper = ['infinity', 'nan', 'group', 'decimal'];\n    const patternRegex = /G|M|L|H|c|'| a|yy|y|EEEE|E/g;\n    const patternMatch = {\n        'G': '',\n        'M': 'm',\n        'L': 'm',\n        'H': 'h',\n        'c': 'd',\n        '\\'': '\"',\n        ' a': ' AM/PM',\n        'yy': 'yy',\n        'y': 'yyyy',\n        'EEEE': 'dddd',\n        'E': 'ddd'\n    };\n    IntlBase.dateConverterMapper = /dddd|ddd/ig;\n    const defaultFirstDay = 'sun';\n    IntlBase.islamicRegex = /^islamic/;\n    const firstDayMapper = {\n        'sun': 0,\n        'mon': 1,\n        'tue': 2,\n        'wed': 3,\n        'thu': 4,\n        'fri': 5,\n        'sat': 6\n    };\n    IntlBase.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;\n    IntlBase.currencyFormatRegex = /(^[ca]{1})([0-1]?[0-9]|20)?$/i;\n    IntlBase.curWithoutNumberRegex = /(c|a)$/ig;\n    const typeMapper = {\n        '$': 'isCurrency',\n        '%': 'isPercent',\n        '-': 'isNegative',\n        0: 'nlead',\n        1: 'nend'\n    };\n    IntlBase.dateParseRegex = /([a-z])\\1*|'([^']|'')+'|''|./gi;\n    IntlBase.basicPatterns = ['short', 'medium', 'long', 'full'];\n    /* tslint:disable:quotemark */\n    IntlBase.defaultObject = {\n        'dates': {\n            'calendars': {\n                'gregorian': {\n                    'months': {\n                        'stand-alone': {\n                            'abbreviated': {\n                                '1': 'Jan',\n                                '2': 'Feb',\n                                '3': 'Mar',\n                                '4': 'Apr',\n                                '5': 'May',\n                                '6': 'Jun',\n                                '7': 'Jul',\n                                '8': 'Aug',\n                                '9': 'Sep',\n                                '10': 'Oct',\n                                '11': 'Nov',\n                                '12': 'Dec'\n                            },\n                            'narrow': {\n                                '1': 'J',\n                                '2': 'F',\n                                '3': 'M',\n                                '4': 'A',\n                                '5': 'M',\n                                '6': 'J',\n                                '7': 'J',\n                                '8': 'A',\n                                '9': 'S',\n                                '10': 'O',\n                                '11': 'N',\n                                '12': 'D'\n                            },\n                            'wide': {\n                                '1': 'January',\n                                '2': 'February',\n                                '3': 'March',\n                                '4': 'April',\n                                '5': 'May',\n                                '6': 'June',\n                                '7': 'July',\n                                '8': 'August',\n                                '9': 'September',\n                                '10': 'October',\n                                '11': 'November',\n                                '12': 'December'\n                            }\n                        }\n                    },\n                    \"days\": {\n                        \"stand-alone\": {\n                            \"abbreviated\": {\n                                \"sun\": \"Sun\",\n                                \"mon\": \"Mon\",\n                                \"tue\": \"Tue\",\n                                \"wed\": \"Wed\",\n                                \"thu\": \"Thu\",\n                                \"fri\": \"Fri\",\n                                \"sat\": \"Sat\"\n                            },\n                            \"narrow\": {\n                                \"sun\": \"S\",\n                                \"mon\": \"M\",\n                                \"tue\": \"T\",\n                                \"wed\": \"W\",\n                                \"thu\": \"T\",\n                                \"fri\": \"F\",\n                                \"sat\": \"S\"\n                            },\n                            \"short\": {\n                                \"sun\": \"Su\",\n                                \"mon\": \"Mo\",\n                                \"tue\": \"Tu\",\n                                \"wed\": \"We\",\n                                \"thu\": \"Th\",\n                                \"fri\": \"Fr\",\n                                \"sat\": \"Sa\"\n                            },\n                            \"wide\": {\n                                \"sun\": \"Sunday\",\n                                \"mon\": \"Monday\",\n                                \"tue\": \"Tuesday\",\n                                \"wed\": \"Wednesday\",\n                                \"thu\": \"Thursday\",\n                                \"fri\": \"Friday\",\n                                \"sat\": \"Saturday\"\n                            }\n                        }\n                    },\n                    \"dayPeriods\": {\n                        \"format\": {\n                            \"wide\": {\n                                \"am\": \"AM\",\n                                \"pm\": \"PM\"\n                            }\n                        }\n                    },\n                    'eras': {\n                        'eraNames': {\n                            '0': 'Before Christ',\n                            '0-alt-variant': 'Before Common Era',\n                            '1': 'Anno Domini',\n                            \"1-alt-variant\": \"Common Era\"\n                        },\n                        'eraAbbr': {\n                            '0': 'BC',\n                            '0-alt-variant': 'BCE',\n                            '1': 'AD',\n                            '1-alt-variant': 'CE'\n                        },\n                        'eraNarrow': {\n                            '0': 'B',\n                            '0-alt-variant': 'BCE',\n                            '1': 'A',\n                            '1-alt-variant': 'CE'\n                        }\n                    },\n                    'dateFormats': {\n                        'full': 'EEEE, MMMM d, y',\n                        'long': 'MMMM d, y',\n                        'medium': 'MMM d, y',\n                        'short': 'M/d/yy'\n                    },\n                    'timeFormats': {\n                        'full': 'h:mm:ss a zzzz',\n                        'long': 'h:mm:ss a z',\n                        'medium': 'h:mm:ss a',\n                        'short': 'h:mm a'\n                    },\n                    'dateTimeFormats': {\n                        'full': \"{1} 'at' {0}\",\n                        'long': \"{1} 'at' {0}\",\n                        'medium': '{1}, {0}',\n                        'short': '{1}, {0}',\n                        'availableFormats': {\n                            'd': 'd',\n                            'E': 'ccc',\n                            'Ed': 'd E',\n                            'Ehm': 'E h:mm a',\n                            'EHm': 'E HH:mm',\n                            'Ehms': 'E h:mm:ss a',\n                            'EHms': 'E HH:mm:ss',\n                            'Gy': 'y G',\n                            'GyMMM': 'MMM y G',\n                            'GyMMMd': 'MMM d, y G',\n                            'GyMMMEd': 'E, MMM d, y G',\n                            'h': 'h a',\n                            'H': 'HH',\n                            'hm': 'h:mm a',\n                            'Hm': 'HH:mm',\n                            'hms': 'h:mm:ss a',\n                            'Hms': 'HH:mm:ss',\n                            'hmsv': 'h:mm:ss a v',\n                            'Hmsv': 'HH:mm:ss v',\n                            'hmv': 'h:mm a v',\n                            'Hmv': 'HH:mm v',\n                            'M': 'L',\n                            'Md': 'M/d',\n                            'MEd': 'E, M/d',\n                            'MMM': 'LLL',\n                            'MMMd': 'MMM d',\n                            'MMMEd': 'E, MMM d',\n                            'MMMMd': 'MMMM d',\n                            'ms': 'mm:ss',\n                            'y': 'y',\n                            'yM': 'M/y',\n                            'yMd': 'M/d/y',\n                            'yMEd': 'E, M/d/y',\n                            'yMMM': 'MMM y',\n                            'yMMMd': 'MMM d, y',\n                            'yMMMEd': 'E, MMM d, y',\n                            'yMMMM': 'MMMM y',\n                        },\n                    }\n                },\n                \"islamic\": {\n                    \"months\": {\n                        \"stand-alone\": {\n                            \"abbreviated\": {\n                                \"1\": \"Muh.\",\n                                \"2\": \"Saf.\",\n                                \"3\": \"Rab. I\",\n                                \"4\": \"Rab. II\",\n                                \"5\": \"Jum. I\",\n                                \"6\": \"Jum. II\",\n                                \"7\": \"Raj.\",\n                                \"8\": \"Sha.\",\n                                \"9\": \"Ram.\",\n                                \"10\": \"Shaw.\",\n                                \"11\": \"Dhuʻl-Q.\",\n                                \"12\": \"Dhuʻl-H.\"\n                            },\n                            \"narrow\": {\n                                \"1\": \"1\",\n                                \"2\": \"2\",\n                                \"3\": \"3\",\n                                \"4\": \"4\",\n                                \"5\": \"5\",\n                                \"6\": \"6\",\n                                \"7\": \"7\",\n                                \"8\": \"8\",\n                                \"9\": \"9\",\n                                \"10\": \"10\",\n                                \"11\": \"11\",\n                                \"12\": \"12\"\n                            },\n                            \"wide\": {\n                                \"1\": \"Muharram\",\n                                \"2\": \"Safar\",\n                                \"3\": \"Rabiʻ I\",\n                                \"4\": \"Rabiʻ II\",\n                                \"5\": \"Jumada I\",\n                                \"6\": \"Jumada II\",\n                                \"7\": \"Rajab\",\n                                \"8\": \"Shaʻban\",\n                                \"9\": \"Ramadan\",\n                                \"10\": \"Shawwal\",\n                                \"11\": \"Dhuʻl-Qiʻdah\",\n                                \"12\": \"Dhuʻl-Hijjah\"\n                            }\n                        }\n                    },\n                    \"days\": {\n                        \"stand-alone\": {\n                            \"abbreviated\": {\n                                \"sun\": \"Sun\",\n                                \"mon\": \"Mon\",\n                                \"tue\": \"Tue\",\n                                \"wed\": \"Wed\",\n                                \"thu\": \"Thu\",\n                                \"fri\": \"Fri\",\n                                \"sat\": \"Sat\"\n                            },\n                            \"narrow\": {\n                                \"sun\": \"S\",\n                                \"mon\": \"M\",\n                                \"tue\": \"T\",\n                                \"wed\": \"W\",\n                                \"thu\": \"T\",\n                                \"fri\": \"F\",\n                                \"sat\": \"S\"\n                            },\n                            \"short\": {\n                                \"sun\": \"Su\",\n                                \"mon\": \"Mo\",\n                                \"tue\": \"Tu\",\n                                \"wed\": \"We\",\n                                \"thu\": \"Th\",\n                                \"fri\": \"Fr\",\n                                \"sat\": \"Sa\"\n                            },\n                            \"wide\": {\n                                \"sun\": \"Sunday\",\n                                \"mon\": \"Monday\",\n                                \"tue\": \"Tuesday\",\n                                \"wed\": \"Wednesday\",\n                                \"thu\": \"Thursday\",\n                                \"fri\": \"Friday\",\n                                \"sat\": \"Saturday\"\n                            }\n                        }\n                    },\n                    \"dayPeriods\": {\n                        \"format\": {\n                            \"wide\": {\n                                \"am\": \"AM\",\n                                \"pm\": \"PM\"\n                            }\n                        }\n                    },\n                    \"eras\": {\n                        \"eraNames\": {\n                            \"0\": \"AH\"\n                        },\n                        \"eraAbbr\": {\n                            \"0\": \"AH\"\n                        },\n                        \"eraNarrow\": {\n                            \"0\": \"AH\"\n                        }\n                    },\n                    \"dateFormats\": {\n                        \"full\": \"EEEE, MMMM d, y G\",\n                        \"long\": \"MMMM d, y G\",\n                        \"medium\": \"MMM d, y G\",\n                        \"short\": \"M/d/y GGGGG\"\n                    },\n                    \"timeFormats\": {\n                        \"full\": \"h:mm:ss a zzzz\",\n                        \"long\": \"h:mm:ss a z\",\n                        \"medium\": \"h:mm:ss a\",\n                        \"short\": \"h:mm a\"\n                    },\n                    \"dateTimeFormats\": {\n                        \"full\": \"{1} 'at' {0}\",\n                        \"long\": \"{1} 'at' {0}\",\n                        \"medium\": \"{1}, {0}\",\n                        \"short\": \"{1}, {0}\",\n                        \"availableFormats\": {\n                            \"d\": \"d\",\n                            \"E\": \"ccc\",\n                            \"Ed\": \"d E\",\n                            \"Ehm\": \"E h:mm a\",\n                            \"EHm\": \"E HH:mm\",\n                            \"Ehms\": \"E h:mm:ss a\",\n                            \"EHms\": \"E HH:mm:ss\",\n                            \"Gy\": \"y G\",\n                            \"GyMMM\": \"MMM y G\",\n                            \"GyMMMd\": \"MMM d, y G\",\n                            \"GyMMMEd\": \"E, MMM d, y G\",\n                            \"h\": \"h a\",\n                            \"H\": \"HH\",\n                            \"hm\": \"h:mm a\",\n                            \"Hm\": \"HH:mm\",\n                            \"hms\": \"h:mm:ss a\",\n                            \"Hms\": \"HH:mm:ss\",\n                            \"M\": \"L\",\n                            \"Md\": \"M/d\",\n                            \"MEd\": \"E, M/d\",\n                            \"MMM\": \"LLL\",\n                            \"MMMd\": \"MMM d\",\n                            \"MMMEd\": \"E, MMM d\",\n                            \"MMMMd\": \"MMMM d\",\n                            \"ms\": \"mm:ss\",\n                            \"y\": \"y G\",\n                            \"yyyy\": \"y G\",\n                            \"yyyyM\": \"M/y GGGGG\",\n                            \"yyyyMd\": \"M/d/y GGGGG\",\n                            \"yyyyMEd\": \"E, M/d/y GGGGG\",\n                            \"yyyyMMM\": \"MMM y G\",\n                            \"yyyyMMMd\": \"MMM d, y G\",\n                            \"yyyyMMMEd\": \"E, MMM d, y G\",\n                            \"yyyyMMMM\": \"MMMM y G\",\n                            \"yyyyQQQ\": \"QQQ y G\",\n                            \"yyyyQQQQ\": \"QQQQ y G\"\n                        }\n                    }\n                }\n            },\n            'timeZoneNames': {\n                \"hourFormat\": \"+HH:mm;-HH:mm\",\n                \"gmtFormat\": \"GMT{0}\",\n                \"gmtZeroFormat\": \"GMT\",\n            }\n        },\n        'numbers': {\n            'currencies': {\n                'USD': {\n                    'displayName': 'US Dollar',\n                    'symbol': '$',\n                    'symbol-alt-narrow': '$'\n                },\n                'EUR': {\n                    'displayName': 'Euro',\n                    'symbol': '€',\n                    'symbol-alt-narrow': '€'\n                },\n                'GBP': {\n                    'displayName': 'British Pound',\n                    'symbol-alt-narrow': '£'\n                },\n            },\n            'defaultNumberingSystem': 'latn',\n            'minimumGroupingDigits': '1',\n            'symbols-numberSystem-latn': {\n                'decimal': '.',\n                'group': ',',\n                'list': ';',\n                'percentSign': '%',\n                'plusSign': '+',\n                'minusSign': '-',\n                'exponential': 'E',\n                'superscriptingExponent': '×',\n                'perMille': '‰',\n                'infinity': '∞',\n                'nan': 'NaN',\n                'timeSeparator': ':'\n            },\n            'decimalFormats-numberSystem-latn': {\n                'standard': '#,##0.###',\n            },\n            'percentFormats-numberSystem-latn': {\n                'standard': '#,##0%'\n            },\n            'currencyFormats-numberSystem-latn': {\n                'standard': '¤#,##0.00',\n                'accounting': '¤#,##0.00;(¤#,##0.00)'\n            },\n            'scientificFormats-numberSystem-latn': {\n                'standard': '#E0'\n            }\n        }\n    };\n    IntlBase.blazorDefaultObject = {\n        \"numbers\": {\n            \"mapper\": {\n                \"0\": \"0\",\n                \"1\": \"1\",\n                \"2\": \"2\",\n                \"3\": \"3\",\n                \"4\": \"4\",\n                \"5\": \"5\",\n                \"6\": \"6\",\n                \"7\": \"7\",\n                \"8\": \"8\",\n                \"9\": \"9\"\n            },\n            \"mapperDigits\": \"0123456789\",\n            \"numberSymbols\": {\n                \"decimal\": \".\",\n                \"group\": \",\",\n                \"plusSign\": \"+\",\n                \"minusSign\": \"-\",\n                \"percentSign\": \"%\",\n                \"nan\": \"NaN\",\n                \"timeSeparator\": \":\",\n                \"infinity\": \"∞\"\n            },\n            \"timeSeparator\": \":\",\n            \"currencySymbol\": \"$\",\n            \"currencypData\": {\n                \"nlead\": \"$\",\n                \"nend\": \"\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"percentpData\": {\n                \"nlead\": \"\",\n                \"nend\": \"%\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"percentnData\": {\n                \"nlead\": \"-\",\n                \"nend\": \"%\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"currencynData\": {\n                \"nlead\": \"($\",\n                \"nend\": \")\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"decimalnData\": {\n                \"nlead\": \"-\",\n                \"nend\": \"\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"decimalpData\": {\n                \"nlead\": \"\",\n                \"nend\": \"\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            }\n        },\n        \"dates\": {\n            \"dayPeriods\": {\n                \"am\": \"AM\",\n                \"pm\": \"PM\"\n            },\n            \"dateSeperator\": \"/\",\n            \"days\": {\n                \"abbreviated\": {\n                    \"sun\": \"Sun\",\n                    \"mon\": \"Mon\",\n                    \"tue\": \"Tue\",\n                    \"wed\": \"Wed\",\n                    \"thu\": \"Thu\",\n                    \"fri\": \"Fri\",\n                    \"sat\": \"Sat\"\n                },\n                \"short\": {\n                    \"sun\": \"Su\",\n                    \"mon\": \"Mo\",\n                    \"tue\": \"Tu\",\n                    \"wed\": \"We\",\n                    \"thu\": \"Th\",\n                    \"fri\": \"Fr\",\n                    \"sat\": \"Sa\"\n                },\n                \"wide\": {\n                    \"sun\": \"Sunday\",\n                    \"mon\": \"Monday\",\n                    \"tue\": \"Tuesday\",\n                    \"wed\": \"Wednesday\",\n                    \"thu\": \"Thursday\",\n                    \"fri\": \"Friday\",\n                    \"sat\": \"Saturday\"\n                }\n            },\n            \"months\": {\n                \"abbreviated\": {\n                    \"1\": \"Jan\",\n                    \"2\": \"Feb\",\n                    \"3\": \"Mar\",\n                    \"4\": \"Apr\",\n                    \"5\": \"May\",\n                    \"6\": \"Jun\",\n                    \"7\": \"Jul\",\n                    \"8\": \"Aug\",\n                    \"9\": \"Sep\",\n                    \"10\": \"Oct\",\n                    \"11\": \"Nov\",\n                    \"12\": \"Dec\"\n                },\n                \"wide\": {\n                    \"1\": \"January\",\n                    \"2\": \"February\",\n                    \"3\": \"March\",\n                    \"4\": \"April\",\n                    \"5\": \"May\",\n                    \"6\": \"June\",\n                    \"7\": \"July\",\n                    \"8\": \"August\",\n                    \"9\": \"September\",\n                    \"10\": \"October\",\n                    \"11\": \"November\",\n                    \"12\": \"December\"\n                }\n            },\n            \"eras\": {\n                \"1\": \"AD\"\n            }\n        }\n    };\n    /* tslint:enable:quotemark */\n    IntlBase.monthIndex = {\n        3: 'abbreviated',\n        4: 'wide',\n        5: 'narrow',\n        1: 'abbreviated'\n    };\n    /**\n     *\n     */\n    IntlBase.month = 'months';\n    IntlBase.days = 'days';\n    /**\n     * Default numerber Object\n     */\n    IntlBase.patternMatcher = {\n        C: 'currency',\n        P: 'percent',\n        N: 'decimal',\n        A: 'currency',\n        E: 'scientific'\n    };\n    /**\n     * Returns the resultant pattern based on the skeleton, dateObject and the type provided\n     * @private\n     * @param {string} skeleton\n     * @param {Object} dateObject\n     * @param {string} type\n     * @returns {string}\n     */\n    function getResultantPattern(skeleton, dateObject, type, isIslamic, blazorCulture) {\n        let resPattern;\n        let iType = type || 'date';\n        if (blazorCulture) {\n            resPattern = compareBlazorDateFormats({ skeleton: skeleton }, blazorCulture).format ||\n                compareBlazorDateFormats({ skeleton: 'd' }, 'en-US').format;\n        }\n        else {\n            if (IntlBase.basicPatterns.indexOf(skeleton) !== -1) {\n                resPattern = getValue(iType + 'Formats.' + skeleton, dateObject);\n                if (iType === 'dateTime') {\n                    let dPattern = getValue('dateFormats.' + skeleton, dateObject);\n                    let tPattern = getValue('timeFormats.' + skeleton, dateObject);\n                    resPattern = resPattern.replace('{1}', dPattern).replace('{0}', tPattern);\n                }\n            }\n            else {\n                resPattern = getValue('dateTimeFormats.availableFormats.' + skeleton, dateObject);\n            }\n            if (isUndefined(resPattern) && skeleton === 'yMd') {\n                resPattern = 'M/d/y';\n            }\n        }\n        return resPattern;\n    }\n    IntlBase.getResultantPattern = getResultantPattern;\n    /**\n     * Returns the dependable object for provided cldr data and culture\n     * @private\n     * @param {Object} cldr\n     * @param {string} culture\n     * @param {boolean} isNumber\n     * @returns {Dependables}\n     */\n    function getDependables(cldr, culture, mode, isNumber) {\n        let ret = {};\n        let calendartype = mode || 'gregorian';\n        ret.parserObject = ParserBase.getMainObject(cldr, culture) || (isBlazor() ? IntlBase.blazorDefaultObject : IntlBase.defaultObject);\n        if (isNumber) {\n            ret.numericObject = getValue('numbers', ret.parserObject);\n        }\n        else {\n            let dateString = isBlazor() ? 'dates' : ('dates.calendars.' + calendartype);\n            ret.dateObject = getValue(dateString, ret.parserObject);\n        }\n        return ret;\n    }\n    IntlBase.getDependables = getDependables;\n    /**\n     * Returns the symbol pattern for provided parameters\n     * @private\n     * @param {string} type\n     * @param {string} numSystem\n     * @param {Object} obj\n     * @param {boolean} isAccount\n     * @returns {string}\n     */\n    function getSymbolPattern(type, numSystem, obj, isAccount) {\n        return getValue(type + 'Formats-numberSystem-' +\n            numSystem + (isAccount ? '.accounting' : '.standard'), obj) || (isAccount ? getValue(type + 'Formats-numberSystem-' +\n            numSystem + '.standard', obj) : '');\n    }\n    IntlBase.getSymbolPattern = getSymbolPattern;\n    function ConvertDateToWeekFormat(format) {\n        let convertMapper = format.match(IntlBase.dateConverterMapper);\n        if (convertMapper && isBlazor()) {\n            let tempString = convertMapper[0].length === 3 ? 'EEE' : 'EEEE';\n            return format.replace(IntlBase.dateConverterMapper, tempString);\n        }\n        return format;\n    }\n    IntlBase.ConvertDateToWeekFormat = ConvertDateToWeekFormat;\n    function compareBlazorDateFormats(formatOptions, culture) {\n        let format = formatOptions.format || formatOptions.skeleton;\n        let curFormatMapper = getValue((culture || 'en-US') + '.' + format, blazorCultureFormats);\n        if (!curFormatMapper) {\n            curFormatMapper = getValue('en-US.' + format, blazorCultureFormats);\n        }\n        if (curFormatMapper) {\n            curFormatMapper = ConvertDateToWeekFormat(curFormatMapper);\n            formatOptions.format = curFormatMapper.replace(/tt/, 'a');\n        }\n        return formatOptions;\n    }\n    IntlBase.compareBlazorDateFormats = compareBlazorDateFormats;\n    /**\n     * Returns proper numeric skeleton\n     * @private\n     * @param {string} skeleton\n     * @returns {NumericSkeleton}\n     */\n    function getProperNumericSkeleton(skeleton) {\n        let matches = skeleton.match(IntlBase.formatRegex);\n        let ret = {};\n        let pattern = matches[1].toUpperCase();\n        ret.isAccount = (pattern === 'A');\n        /* tslint:disable no-any */\n        ret.type = IntlBase.patternMatcher[pattern];\n        if (skeleton.length > 1) {\n            ret.fractionDigits = parseInt(matches[2], 10);\n        }\n        return ret;\n    }\n    IntlBase.getProperNumericSkeleton = getProperNumericSkeleton;\n    /**\n     * Returns format data for number formatting like minimum fraction, maximum fraction, etc..,\n     * @private\n     * @param {string} pattern\n     * @param {boolean} needFraction\n     * @param {string} cSymbol\n     * @param {boolean} fractionOnly\n     * @returns {NegativeData}\n     */\n    function getFormatData(pattern, needFraction, cSymbol, fractionOnly) {\n        let nData = fractionOnly ? {} : { nlead: '', nend: '' };\n        let match = pattern.match(IntlBase.customRegex);\n        if (match) {\n            if (!fractionOnly) {\n                nData.nlead = changeCurrencySymbol(match[1], cSymbol);\n                nData.nend = changeCurrencySymbol(match[10], cSymbol);\n                nData.groupPattern = match[4];\n            }\n            let fraction = match[7];\n            if (fraction && needFraction) {\n                let fmatch = fraction.match(fractionRegex);\n                if (!isNullOrUndefined(fmatch)) {\n                    nData.minimumFraction = fmatch.length;\n                }\n                else {\n                    nData.minimumFraction = 0;\n                }\n                nData.maximumFraction = fraction.length - 1;\n            }\n        }\n        return nData;\n    }\n    IntlBase.getFormatData = getFormatData;\n    /**\n     * Changes currency symbol\n     * @private\n     * @param {string} val\n     * @param {string} sym\n     * @returns {string}\n     */\n    function changeCurrencySymbol(val, sym) {\n        if (val) {\n            return val.replace(IntlBase.defaultCurrency, sym);\n        }\n        return '';\n    }\n    /**\n     * Returns currency symbol based on currency code\n     * @private\n     * @param {Object} numericObject\n     * @param {string} currencyCode\n     * @returns {string}\n     */\n    function getCurrencySymbol(numericObject, currencyCode, altSymbol) {\n        let symbol = altSymbol ? ('.' + altSymbol) : '.symbol';\n        let getCurrency = getValue('currencies.' + currencyCode + symbol, numericObject) ||\n            getValue('currencies.' + currencyCode + '.symbol-alt-narrow', numericObject) || '$';\n        return getCurrency;\n    }\n    IntlBase.getCurrencySymbol = getCurrencySymbol;\n    /**\n     * Returns formatting options for custom number format\n     * @private\n     * @param {string} format\n     * @param {CommonOptions} dOptions\n     * @param {Dependables} obj\n     * @returns {GenericFormatOptions}\n     */\n    function customFormat(format, dOptions, obj) {\n        let options = {};\n        let formatSplit = format.split(';');\n        let data = ['pData', 'nData', 'zeroData'];\n        for (let i = 0; i < formatSplit.length; i++) {\n            options[data[i]] = customNumberFormat(formatSplit[i], dOptions, obj);\n        }\n        if (isNullOrUndefined(options.nData)) {\n            options.nData = extend({}, options.pData);\n            options.nData.nlead = isNullOrUndefined(dOptions) ? '-' + options.nData.nlead : dOptions.minusSymbol + options.nData.nlead;\n        }\n        return options;\n    }\n    IntlBase.customFormat = customFormat;\n    /**\n     * Returns custom formatting options\n     * @private\n     * @param {string} format\n     * @param {CommonOptions} dOptions\n     * @param {Object} numObject\n     * @returns {NegativeData}\n     */\n    function customNumberFormat(format, dOptions, numObject) {\n        let cOptions = { type: 'decimal', minimumFractionDigits: 0, maximumFractionDigits: 0 };\n        let pattern = format.match(IntlBase.customRegex);\n        if (isNullOrUndefined(pattern) || (pattern[5] === '' && format !== 'N/A')) {\n            cOptions.type = undefined;\n            return cOptions;\n        }\n        cOptions.nlead = pattern[1];\n        cOptions.nend = pattern[10];\n        let integerPart = pattern[6];\n        cOptions.useGrouping = integerPart.indexOf(',') !== -1;\n        integerPart = integerPart.replace(/,/g, '');\n        let fractionPart = pattern[7];\n        if (integerPart.indexOf('0') !== -1) {\n            cOptions.minimumIntegerDigits = integerPart.length - integerPart.indexOf('0');\n        }\n        if (!isNullOrUndefined(fractionPart)) {\n            cOptions.minimumFractionDigits = fractionPart.lastIndexOf('0');\n            cOptions.maximumFractionDigits = fractionPart.lastIndexOf('#');\n            if (cOptions.minimumFractionDigits === -1) {\n                cOptions.minimumFractionDigits = 0;\n            }\n            if (cOptions.maximumFractionDigits === -1 || cOptions.maximumFractionDigits < cOptions.minimumFractionDigits) {\n                cOptions.maximumFractionDigits = cOptions.minimumFractionDigits;\n            }\n        }\n        if (!isNullOrUndefined(dOptions)) {\n            extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '$', dOptions.currencySymbol));\n            if (!cOptions.isCurrency) {\n                extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', dOptions.percentSymbol));\n            }\n        }\n        else {\n            extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', '%'));\n        }\n        if (!isNullOrUndefined(numObject)) {\n            let symbolPattern = getSymbolPattern(cOptions.type, dOptions.numberMapper.numberSystem, numObject, false);\n            if (cOptions.useGrouping) {\n                cOptions.groupSeparator = dOptions.numberMapper.numberSymbols[mapper[2]];\n                cOptions.groupData = NumberFormat.getGroupingDetails(symbolPattern.split(';')[0]);\n            }\n            cOptions.nlead = cOptions.nlead.replace(/\\'/g, '');\n            cOptions.nend = cOptions.nend.replace(/\\'/g, '');\n        }\n        return cOptions;\n    }\n    /**\n     * Returns formatting options for currency or percent type\n     * @private\n     * @param {string[]} parts\n     * @param {string} actual\n     * @param {string} symbol\n     * @returns {NegativeData}\n     */\n    function isCurrencyPercent(parts, actual, symbol) {\n        let options = { nlead: parts[0], nend: parts[1] };\n        for (let i = 0; i < 2; i++) {\n            let part = parts[i];\n            let loc = part.indexOf(actual);\n            if ((loc !== -1) && ((loc < part.indexOf('\\'')) || (loc > part.lastIndexOf('\\'')))) {\n                options[typeMapper[i]] = part.substr(0, loc) + symbol + part.substr(loc + 1);\n                options[typeMapper[actual]] = true;\n                options.type = options.isCurrency ? 'currency' : 'percent';\n                break;\n            }\n        }\n        return options;\n    }\n    IntlBase.isCurrencyPercent = isCurrencyPercent;\n    /**\n     * Returns culture based date separator\n     * @private\n     * @param {Object} dateObj\n     * @returns {string}\n     */\n    function getDateSeparator(dateObj) {\n        let value = (getValue('dateFormats.short', dateObj) || '').match(/[d‏M‏]([^d‏M])[d‏M‏]/i);\n        return value ? value[1] : '/';\n    }\n    IntlBase.getDateSeparator = getDateSeparator;\n    /**\n     * Returns Native Date Time pattern\n     * @private\n     * @param {string} culture\n     * @param {DateFormatOptions} options\n     * @param {Object} cldr\n     * @returns {string}\n     */\n    function getActualDateTimeFormat(culture, options, cldr, isExcelFormat) {\n        let dependable = getDependables(cldr, culture, options.calendar);\n        if (isBlazor()) {\n            options = compareBlazorDateFormats(options, culture);\n        }\n        let actualPattern = options.format || getResultantPattern(options.skeleton, dependable.dateObject, options.type);\n        if (isExcelFormat) {\n            actualPattern = actualPattern.replace(patternRegex, (pattern) => {\n                return patternMatch[pattern];\n            });\n            if (actualPattern.indexOf('z') !== -1) {\n                let tLength = actualPattern.match(/z/g).length;\n                let timeZonePattern;\n                let options = { 'timeZone': {} };\n                options.numMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));\n                options.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\n                let value = new Date();\n                let timezone = value.getTimezoneOffset();\n                let pattern = (tLength < 4) ? '+H;-H' : options.timeZone.hourFormat;\n                pattern = pattern.replace(/:/g, options.numMapper.timeSeparator);\n                if (timezone === 0) {\n                    timeZonePattern = options.timeZone.gmtZeroFormat;\n                }\n                else {\n                    timeZonePattern = DateFormat.getTimeZoneValue(timezone, pattern);\n                    timeZonePattern = options.timeZone.gmtFormat.replace(/\\{0\\}/, timeZonePattern);\n                }\n                actualPattern = actualPattern.replace(/[z]+/, '\"' + timeZonePattern + '\"');\n            }\n            actualPattern = actualPattern.replace(/ $/, '');\n        }\n        return actualPattern;\n    }\n    IntlBase.getActualDateTimeFormat = getActualDateTimeFormat;\n    // tslint:disable-next-line:no-any\n    function processSymbol(actual, option) {\n        if (actual.indexOf(',') !== -1) {\n            // tslint:disable-next-line:no-any\n            let split = actual.split(',');\n            actual = (split[0] + getValue('numberMapper.numberSymbols.group', option) +\n                split[1].replace('.', getValue('numberMapper.numberSymbols.decimal', option)));\n        }\n        else {\n            actual = actual.replace('.', getValue('numberMapper.numberSymbols.decimal', option));\n        }\n        return actual;\n    }\n    /**\n     * Returns Native Number pattern\n     * @private\n     * @param {string} culture\n     * @param {NumberFormatOptions} options\n     * @param {Object} cldr\n     * @returns {string}\n     */\n    function getActualNumberFormat(culture, options, cldr, isExcel) {\n        let dependable = getDependables(cldr, culture, '', true);\n        let parseOptions = { custom: true };\n        let numrericObject = dependable.numericObject;\n        let minFrac;\n        let curObj = {};\n        let curMatch = (options.format || '').match(IntlBase.currencyFormatRegex);\n        let type = IntlBase.formatRegex.test(options.format) ? getProperNumericSkeleton(options.format || 'N') : {};\n        let dOptions = {};\n        if (curMatch) {\n            dOptions.numberMapper = isBlazor() ?\n                extend({}, dependable.numericObject) :\n                ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true);\n            let curCode = isBlazor() ? getValue('currencySymbol', dependable.numericObject) :\n                getCurrencySymbol(dependable.numericObject, options.currency || defaultCurrencyCode, options.altSymbol);\n            let symbolPattern = getSymbolPattern('currency', dOptions.numberMapper.numberSystem, dependable.numericObject, (/a/i).test(options.format));\n            symbolPattern = symbolPattern.replace(/\\u00A4/g, curCode);\n            let split = symbolPattern.split(';');\n            curObj.hasNegativePattern = isBlazor() ? true : (split.length > 1);\n            curObj.nData = isBlazor() ? getValue(type.type + 'nData', numrericObject) :\n                getFormatData(split[1] || '-' + split[0], true, curCode);\n            curObj.pData = isBlazor() ? getValue(type.type + 'pData', numrericObject) :\n                getFormatData(split[0], false, curCode);\n            if (!curMatch[2] && !options.minimumFractionDigits && !options.maximumFractionDigits) {\n                minFrac = getFormatData(symbolPattern.split(';')[0], true, '', true).minimumFraction;\n            }\n        }\n        let actualPattern;\n        if ((IntlBase.formatRegex.test(options.format)) || !(options.format)) {\n            extend(parseOptions, getProperNumericSkeleton(options.format || 'N'));\n            parseOptions.custom = false;\n            actualPattern = '###0';\n            if (parseOptions.fractionDigits || options.minimumFractionDigits || options.maximumFractionDigits || minFrac) {\n                let defaultMinimum = 0;\n                if (parseOptions.fractionDigits) {\n                    options.minimumFractionDigits = options.maximumFractionDigits = parseOptions.fractionDigits;\n                }\n                actualPattern = fractionDigitsPattern(actualPattern, minFrac || parseOptions.fractionDigits ||\n                    options.minimumFractionDigits || defaultMinimum, options.maximumFractionDigits || defaultMinimum);\n            }\n            if (options.minimumIntegerDigits) {\n                actualPattern = minimumIntegerPattern(actualPattern, options.minimumIntegerDigits);\n            }\n            if (options.useGrouping) {\n                actualPattern = groupingPattern(actualPattern);\n            }\n            if (parseOptions.type === 'currency' || (parseOptions.type && isBlazor())) {\n                if (isBlazor() && parseOptions.type !== 'currency') {\n                    curObj.pData = getValue(parseOptions.type + 'pData', numrericObject);\n                    curObj.nData = getValue(parseOptions.type + 'nData', numrericObject);\n                }\n                let cPattern = actualPattern;\n                actualPattern = curObj.pData.nlead + cPattern + curObj.pData.nend;\n                if (curObj.hasNegativePattern || isBlazor()) {\n                    actualPattern += ';' + curObj.nData.nlead + cPattern + curObj.nData.nend;\n                }\n            }\n            if (parseOptions.type === 'percent' && !isBlazor()) {\n                actualPattern += ' %';\n            }\n        }\n        else {\n            actualPattern = options.format.replace(/\\'/g, '\"');\n        }\n        if (Object.keys(dOptions).length > 0) {\n            actualPattern = !isExcel ? processSymbol(actualPattern, dOptions) : actualPattern;\n        }\n        return actualPattern;\n    }\n    IntlBase.getActualNumberFormat = getActualNumberFormat;\n    function fractionDigitsPattern(pattern, minDigits, maxDigits) {\n        pattern += '.';\n        for (let a = 0; a < minDigits; a++) {\n            pattern += '0';\n        }\n        if (minDigits < maxDigits) {\n            let diff = maxDigits - minDigits;\n            for (let b = 0; b < diff; b++) {\n                pattern += '#';\n            }\n        }\n        return pattern;\n    }\n    function minimumIntegerPattern(pattern, digits) {\n        let temp = pattern.split('.');\n        let integer = '';\n        for (let x = 0; x < digits; x++) {\n            integer += '0';\n        }\n        return temp[1] ? (integer + '.' + temp[1]) : integer;\n    }\n    function groupingPattern(pattern) {\n        let temp = pattern.split('.');\n        let integer = temp[0];\n        let no = 3 - integer.length % 3;\n        let hash = (no && no === 1) ? '#' : (no === 2 ? '##' : '');\n        integer = hash + integer;\n        pattern = '';\n        for (let x = integer.length - 1; x > 0; x = x - 3) {\n            pattern = ',' + integer[x - 2] + integer[x - 1] + integer[x] + pattern;\n        }\n        pattern = pattern.slice(1);\n        return temp[1] ? (pattern + '.' + temp[1]) : pattern;\n    }\n    function getWeekData(culture, cldr) {\n        let firstDay = defaultFirstDay;\n        let mapper = getValue('supplemental.weekData.firstDay', cldr);\n        let iCulture = culture;\n        if ((/en-/).test(iCulture)) {\n            iCulture = iCulture.slice(3);\n        }\n        iCulture = iCulture.slice(0, 2).toUpperCase() + iCulture.substr(2);\n        if (mapper) {\n            firstDay = mapper[iCulture] || defaultFirstDay;\n        }\n        return firstDayMapper[firstDay];\n    }\n    IntlBase.getWeekData = getWeekData;\n    /**\n     * @private\n     * @param pData\n     * @param aCurrency\n     * @param rCurrency\n     */\n    function replaceBlazorCurrency(pData, aCurrency, rCurrency) {\n        let iCurrency = getBlazorCurrencySymbol(rCurrency);\n        if (aCurrency !== iCurrency) {\n            for (let data of pData) {\n                data.nend = data.nend.replace(aCurrency, iCurrency);\n                data.nlead = data.nlead.replace(aCurrency, iCurrency);\n            }\n        }\n    }\n    IntlBase.replaceBlazorCurrency = replaceBlazorCurrency;\n    /**\n     * @private\n     */\n    function getWeekOfYear(date) {\n        let newYear = new Date(date.getFullYear(), 0, 1);\n        let day = newYear.getDay();\n        let weeknum;\n        day = (day >= 0 ? day : day + 7);\n        let daynum = Math.floor((date.getTime() - newYear.getTime() -\n            (date.getTimezoneOffset() - newYear.getTimezoneOffset()) * 60000) / 86400000) + 1;\n        if (day < 4) {\n            weeknum = Math.floor((daynum + day - 1) / 7) + 1;\n            if (weeknum > 52) {\n                let nYear = new Date(this.getFullYear() + 1, 0, 1);\n                let nday = nYear.getDay();\n                nday = nday >= 0 ? nday : nday + 7;\n                weeknum = nday < 4 ? 1 : 53;\n            }\n        }\n        else {\n            weeknum = Math.floor((daynum + day - 1) / 7);\n        }\n        return weeknum;\n    }\n    IntlBase.getWeekOfYear = getWeekOfYear;\n})(IntlBase || (IntlBase = {}));\n\nconst headerRegex = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm;\nconst defaultType = 'GET';\n/**\n * Ajax class provides ability to make asynchronous HTTP request to the server\n * ```typescript\n *   var ajax = new Ajax(\"index.html\", \"GET\", true);\n *   ajax.send().then(\n *               function (value) {\n *                   console.log(value);\n *               },\n *               function (reason) {\n *                   console.log(reason);\n *               });\n * ```\n */\nclass Ajax {\n    /**\n     * Constructor for Ajax class\n     * @param  {string|Object} options?\n     * @param  {string} type?\n     * @param  {boolean} async?\n     * @returns defaultType\n     */\n    constructor(options, type, async, contentType) {\n        /**\n         * A boolean value indicating whether the request should be sent asynchronous or not.\n         * @default true\n         */\n        this.mode = true;\n        /**\n         * A boolean value indicating whether to ignore the promise reject.\n         * @private\n         * @default true\n         */\n        this.emitError = true;\n        this.options = {};\n        if (typeof options === 'string') {\n            this.url = options;\n            this.type = type ? type.toUpperCase() : defaultType;\n            this.mode = !isNullOrUndefined(async) ? async : true;\n        }\n        else if (typeof options === 'object') {\n            this.options = options;\n            merge(this, this.options);\n        }\n        this.type = this.type ? this.type.toUpperCase() : defaultType;\n        this.contentType = (this.contentType !== undefined) ? this.contentType : contentType;\n    }\n    /**\n     * Send the request to server.\n     * @param {any} data - To send the user data\n     * @return {Promise}\n     */\n    send(data) {\n        this.data = isNullOrUndefined(data) ? this.data : data;\n        let eventArgs = {\n            cancel: false,\n            httpRequest: null\n        };\n        let promise = new Promise((resolve, reject) => {\n            this.httpRequest = new XMLHttpRequest();\n            this.httpRequest.onreadystatechange = () => { this.stateChange(resolve, reject); };\n            if (!isNullOrUndefined(this.onLoad)) {\n                this.httpRequest.onload = this.onLoad;\n            }\n            if (!isNullOrUndefined(this.onProgress)) {\n                this.httpRequest.onprogress = this.onProgress;\n            }\n            /* istanbul ignore next */\n            if (!isNullOrUndefined(this.onAbort)) {\n                this.httpRequest.onabort = this.onAbort;\n            }\n            /* istanbul ignore next */\n            if (!isNullOrUndefined(this.onError)) {\n                this.httpRequest.onerror = this.onError;\n            }\n            //** Upload Events **/\n            /* istanbul ignore next */\n            if (!isNullOrUndefined(this.onUploadProgress)) {\n                this.httpRequest.upload.onprogress = this.onUploadProgress;\n            }\n            this.httpRequest.open(this.type, this.url, this.mode);\n            // Set default headers\n            if (!isNullOrUndefined(this.data) && this.contentType !== null) {\n                this.httpRequest.setRequestHeader('Content-Type', this.contentType || 'application/json; charset=utf-8');\n            }\n            if (this.beforeSend) {\n                eventArgs.httpRequest = this.httpRequest;\n                this.beforeSend(eventArgs);\n            }\n            if (!eventArgs.cancel) {\n                this.httpRequest.send(!isNullOrUndefined(this.data) ? this.data : null);\n            }\n        });\n        return promise;\n    }\n    successHandler(data) {\n        if (this.onSuccess) {\n            this.onSuccess(data, this);\n        }\n        return data;\n    }\n    failureHandler(reason) {\n        if (this.onFailure) {\n            this.onFailure(this.httpRequest);\n        }\n        return reason;\n    }\n    stateChange(resolve, reject) {\n        let data = this.httpRequest.responseText;\n        if (this.dataType && this.dataType.toLowerCase() === 'json') {\n            if (data === '') {\n                data = undefined;\n            }\n            else {\n                try {\n                    data = JSON.parse(data);\n                }\n                catch (error) {\n                    // no exception handle\n                }\n            }\n        }\n        if (this.httpRequest.readyState === 4) {\n            //success range should be 200 to 299\n            if ((this.httpRequest.status >= 200 && this.httpRequest.status <= 299) || this.httpRequest.status === 304) {\n                resolve(this.successHandler(data));\n            }\n            else {\n                if (this.emitError) {\n                    reject(new Error(this.failureHandler(this.httpRequest.statusText)));\n                }\n                else {\n                    resolve();\n                }\n            }\n        }\n    }\n    /**\n     * To get the response header from XMLHttpRequest\n     * @param  {string} key Key to search in the response header\n     * @returns {string}\n     */\n    getResponseHeader(key) {\n        let responseHeaders;\n        let header;\n        responseHeaders = {};\n        let headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n        while (headers) {\n            responseHeaders[headers[1].toLowerCase()] = headers[2];\n            headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n        }\n        header = responseHeaders[key.toLowerCase()];\n        return isNullOrUndefined(header) ? null : header;\n    }\n}\n\nconst REGX_MOBILE = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobile/i;\nconst REGX_IE = /msie|trident/i;\nconst REGX_IE11 = /Trident\\/7\\./;\nconst REGX_IOS = /(ipad|iphone|ipod touch)/i;\nconst REGX_IOS7 = /(ipad|iphone|ipod touch);.*os 7_\\d|(ipad|iphone|ipod touch);.*os 8_\\d/i;\nconst REGX_ANDROID = /android/i;\nconst REGX_WINDOWS = /trident|windows phone|edge/i;\nconst REGX_VERSION = /(version)[ \\/]([\\w.]+)/i;\nconst REGX_BROWSER = {\n    OPERA: /(opera|opr)(?:.*version|)[ \\/]([\\w.]+)/i,\n    EDGE: /(edge)(?:.*version|)[ \\/]([\\w.]+)/i,\n    CHROME: /(chrome|crios)[ \\/]([\\w.]+)/i,\n    PANTHOMEJS: /(phantomjs)[ \\/]([\\w.]+)/i,\n    SAFARI: /(safari)[ \\/]([\\w.]+)/i,\n    WEBKIT: /(webkit)[ \\/]([\\w.]+)/i,\n    MSIE: /(msie|trident) ([\\w.]+)/i,\n    MOZILLA: /(mozilla)(?:.*? rv:([\\w.]+)|)/i\n};\n/* istanbul ignore else  */\nif (typeof window !== 'undefined') {\n    window.browserDetails = window.browserDetails || {};\n}\n/**\n * Get configuration details for Browser\n * @private\n */\nclass Browser {\n    static extractBrowserDetail() {\n        let browserInfo = { culture: {} };\n        let keys = Object.keys(REGX_BROWSER);\n        let clientInfo = [];\n        for (let key of keys) {\n            clientInfo = Browser.userAgent.match(REGX_BROWSER[key]);\n            if (clientInfo) {\n                browserInfo.name = (clientInfo[1].toLowerCase() === 'opr' ? 'opera' : clientInfo[1].toLowerCase());\n                browserInfo.name = (clientInfo[1].toLowerCase() === 'crios' ? 'chrome' : browserInfo.name);\n                browserInfo.version = clientInfo[2];\n                browserInfo.culture.name = browserInfo.culture.language = navigator.language;\n                if (!!Browser.userAgent.match(REGX_IE11)) {\n                    browserInfo.name = 'msie';\n                    break;\n                }\n                let version = Browser.userAgent.match(REGX_VERSION);\n                if (browserInfo.name === 'safari' && version) {\n                    browserInfo.version = version[2];\n                }\n                break;\n            }\n        }\n        return browserInfo;\n    }\n    /**\n     * To get events from the browser\n     * @param {string} event - type of event triggered.\n     * @returns {Boolean}\n     */\n    static getEvent(event) {\n        // tslint:disable-next-line:no-any\n        let events = {\n            start: {\n                isPointer: 'pointerdown', isTouch: 'touchstart', isDevice: 'mousedown'\n            },\n            move: {\n                isPointer: 'pointermove', isTouch: 'touchmove', isDevice: 'mousemove'\n            },\n            end: {\n                isPointer: 'pointerup', isTouch: 'touchend', isDevice: 'mouseup'\n            },\n            cancel: {\n                isPointer: 'pointercancel', isTouch: 'touchcancel', isDevice: 'mouseleave'\n            }\n        };\n        return (Browser.isPointer ? events[event].isPointer :\n            (Browser.isTouch ? events[event].isTouch + (!Browser.isDevice ? ' ' + events[event].isDevice : '')\n                : events[event].isDevice));\n    }\n    /**\n     * To get the Touch start event from browser\n     * @returns {string}\n     */\n    static getTouchStartEvent() {\n        return Browser.getEvent('start');\n    }\n    /**\n     * To get the Touch end event from browser\n     * @returns {string}\n     */\n    static getTouchEndEvent() {\n        return Browser.getEvent('end');\n    }\n    /**\n     * To get the Touch move event from browser\n     * @returns {string}\n     */\n    static getTouchMoveEvent() {\n        return Browser.getEvent('move');\n    }\n    /**\n     * To cancel the touch event from browser\n     * @returns {string}\n     */\n    static getTouchCancelEvent() {\n        return Browser.getEvent('cancel');\n    }\n    /**\n     * To get the value based on provided key and regX\n     * @param {string} key\n     * @param {RegExp} regX\n     * @returns {Object}\n     */\n    static getValue(key, regX) {\n        let browserDetails = window.browserDetails;\n        if ('undefined' === typeof browserDetails[key]) {\n            return browserDetails[key] = regX.test(Browser.userAgent);\n        }\n        return browserDetails[key];\n    }\n    //Properties \n    /**\n     * Property specifies the userAgent of the browser. Default userAgent value is based on the browser.\n     * Also we can set our own userAgent.\n     */\n    static set userAgent(uA) {\n        Browser.uA = uA;\n        window.browserDetails = {};\n    }\n    static get userAgent() {\n        return Browser.uA;\n    }\n    //Read Only Properties\n    /**\n     * Property is to get the browser information like Name, Version and Language\n     * @returns BrowserInfo\n     */\n    static get info() {\n        if (isUndefined(window.browserDetails.info)) {\n            return window.browserDetails.info = Browser.extractBrowserDetail();\n        }\n        return window.browserDetails.info;\n    }\n    /**\n     * Property is to get whether the userAgent is based IE.\n     */\n    static get isIE() {\n        return Browser.getValue('isIE', REGX_IE);\n    }\n    /**\n     * Property is to get whether the browser has touch support.\n     */\n    static get isTouch() {\n        if (isUndefined(window.browserDetails.isTouch)) {\n            return (window.browserDetails.isTouch =\n                ('ontouchstart' in window.navigator) ||\n                    (window &&\n                        window.navigator &&\n                        (window.navigator.maxTouchPoints > 0)) || ('ontouchstart' in window));\n        }\n        return window.browserDetails.isTouch;\n    }\n    /**\n     * Property is to get whether the browser has Pointer support.\n     */\n    static get isPointer() {\n        if (isUndefined(window.browserDetails.isPointer)) {\n            return window.browserDetails.isPointer = ('pointerEnabled' in window.navigator);\n        }\n        return window.browserDetails.isPointer;\n    }\n    /**\n     * Property is to get whether the browser has MSPointer support.\n     */\n    static get isMSPointer() {\n        if (isUndefined(window.browserDetails.isMSPointer)) {\n            return window.browserDetails.isMSPointer = ('msPointerEnabled' in window.navigator);\n        }\n        return window.browserDetails.isMSPointer;\n    }\n    /**\n     * Property is to get whether the userAgent is device based.\n     */\n    static get isDevice() {\n        return Browser.getValue('isDevice', REGX_MOBILE);\n    }\n    /**\n     * Property is to get whether the userAgent is IOS.\n     */\n    static get isIos() {\n        return Browser.getValue('isIos', REGX_IOS);\n    }\n    /**\n     * Property is to get whether the userAgent is Ios7.\n     */\n    static get isIos7() {\n        return Browser.getValue('isIos7', REGX_IOS7);\n    }\n    /**\n     * Property is to get whether the userAgent is Android.\n     */\n    static get isAndroid() {\n        return Browser.getValue('isAndroid', REGX_ANDROID);\n    }\n    /**\n     * Property is to identify whether application ran in web view.\n     */\n    static get isWebView() {\n        if (isUndefined(window.browserDetails.isWebView)) {\n            window.browserDetails.isWebView = !(isUndefined(window.cordova) && isUndefined(window.PhoneGap)\n                && isUndefined(window.phonegap) && window.forge !== 'object');\n            return window.browserDetails.isWebView;\n        }\n        return window.browserDetails.isWebView;\n    }\n    /**\n     * Property is to get whether the userAgent is Windows.\n     */\n    static get isWindows() {\n        return Browser.getValue('isWindows', REGX_WINDOWS);\n    }\n    /**\n     * Property is to get the touch start event. It returns event name based on browser.\n     */\n    static get touchStartEvent() {\n        if (isUndefined(window.browserDetails.touchStartEvent)) {\n            return window.browserDetails.touchStartEvent = Browser.getTouchStartEvent();\n        }\n        return window.browserDetails.touchStartEvent;\n    }\n    /**\n     * Property is to get the touch move event. It returns event name based on browser.\n     */\n    static get touchMoveEvent() {\n        if (isUndefined(window.browserDetails.touchMoveEvent)) {\n            return window.browserDetails.touchMoveEvent = Browser.getTouchMoveEvent();\n        }\n        return window.browserDetails.touchMoveEvent;\n    }\n    /**\n     * Property is to get the touch end event. It returns event name based on browser.\n     */\n    static get touchEndEvent() {\n        if (isUndefined(window.browserDetails.touchEndEvent)) {\n            return window.browserDetails.touchEndEvent = Browser.getTouchEndEvent();\n        }\n        return window.browserDetails.touchEndEvent;\n    }\n    /**\n     * Property is to cancel the touch end event.\n     */\n    static get touchCancelEvent() {\n        if (isUndefined(window.browserDetails.touchCancelEvent)) {\n            return window.browserDetails.touchCancelEvent = Browser.getTouchCancelEvent();\n        }\n        return window.browserDetails.touchCancelEvent;\n    }\n}\n/* istanbul ignore next */\nBrowser.uA = typeof navigator !== 'undefined' ? navigator.userAgent : '';\n\n/**\n * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element\n * @private\n * ```html\n * <div id=\"Eventdiv\">  </div>\n * <script>\n *   let node: HTMLElement = document.querySelector(\"#Eventdiv\");\n *   EventHandler.addEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   EventHandler.addEventListener(node, \"onmouseover\", function(){\n *       // mouseover handler function code\n *   });\n *   EventHandler.removeEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   eventObj.clearEvents();\n * </script>\n * ```\n */\nclass EventHandler {\n    // to get the event data based on element\n    static addOrGetEventData(element) {\n        if ('__eventList' in element) {\n            return element.__eventList.events;\n        }\n        else {\n            element.__eventList = {};\n            return element.__eventList.events = [];\n        }\n    }\n    /**\n     * Add an event to the specified DOM element.\n     * @param {any} element - Target HTML DOM element\n     * @param {string} eventName - A string that specifies the name of the event\n     * @param {Function} listener - Specifies the function to run when the event occurs\n     * @param {Object} bindTo - A object that binds 'this' variable in the event handler\n     * @param {number} debounce - Specifies at what interval given event listener should be triggered.\n     * @return {Function}\n     */\n    static add(element, eventName, listener, bindTo, intDebounce) {\n        let eventData = EventHandler.addOrGetEventData(element);\n        let debounceListener;\n        if (intDebounce) {\n            debounceListener = debounce(listener, intDebounce);\n        }\n        else {\n            debounceListener = listener;\n        }\n        if (bindTo) {\n            debounceListener = debounceListener.bind(bindTo);\n        }\n        let event = eventName.split(' ');\n        for (let i = 0; i < event.length; i++) {\n            eventData.push({\n                name: event[i],\n                listener: listener,\n                debounce: debounceListener\n            });\n            if (Browser.isIE) {\n                element.addEventListener(event[i], debounceListener);\n            }\n            else {\n                element.addEventListener(event[i], debounceListener, { passive: false });\n            }\n        }\n        return debounceListener;\n    }\n    /**\n     * Remove an event listener that has been attached before.\n     * @param {any} element - Specifies the target html element to remove the event\n     * @param {string} eventName - A string that specifies the name of the event to remove\n     * @param {Function} listener - Specifies the function to remove\n     * @return {void}\n     */\n    static remove(element, eventName, listener) {\n        let eventData = EventHandler.addOrGetEventData(element);\n        let event = eventName.split(' ');\n        for (let j = 0; j < event.length; j++) {\n            let index = -1;\n            let debounceListener;\n            if (eventData && eventData.length !== 0) {\n                eventData.some((x, i) => {\n                    return x.name === event[j] && x.listener === listener ?\n                        (index = i, debounceListener = x.debounce, true) : false;\n                });\n            }\n            if (index !== -1) {\n                eventData.splice(index, 1);\n            }\n            if (debounceListener) {\n                element.removeEventListener(event[j], debounceListener);\n            }\n        }\n    }\n    /**\n     * Clear all the event listeners that has been previously attached to the element.\n     * @param {any} element - Specifies the target html element to clear the events\n     * @return {void}\n     */\n    static clearEvents(element) {\n        let eventData;\n        let copyData;\n        eventData = EventHandler.addOrGetEventData(element);\n        copyData = extend([], copyData, eventData);\n        for (let i = 0; i < copyData.length; i++) {\n            element.removeEventListener(copyData[i].name, copyData[i].debounce);\n            eventData.shift();\n        }\n    }\n    /**\n     * Trigger particular event of the element.\n     * @param {any} element - Specifies the target html element to trigger the events\n     * @param {string} eventName - Specifies the event to trigger for the specified element.\n     * Can be a custom event, or any of the standard events.\n     * @param {any} eventProp - Additional parameters to pass on to the event properties\n     * @return {void}\n     */\n    static trigger(element, eventName, eventProp) {\n        let eventData = EventHandler.addOrGetEventData(element);\n        for (let event of eventData) {\n            if (event.name === eventName) {\n                event.debounce.call(this, eventProp);\n            }\n        }\n    }\n}\n\n/**\n * Template Engine\n */\nconst LINES = new RegExp('\\\\n|\\\\r|\\\\s\\\\s+', 'g');\nconst QUOTES = new RegExp(/'|\"/g);\nconst IF_STMT = new RegExp('if ?\\\\(');\nconst ELSEIF_STMT = new RegExp('else if ?\\\\(');\nconst ELSE_STMT = new RegExp('else');\nconst FOR_STMT = new RegExp('for ?\\\\(');\nconst IF_OR_FOR = new RegExp('(\\/if|\\/for)');\nconst CALL_FUNCTION = new RegExp('\\\\((.*)\\\\)', '');\nconst NOT_NUMBER = new RegExp('^[0-9]+$', 'g');\nconst WORD = new RegExp('[\\\\w\"\\'.\\\\s+]+', 'g');\nconst DBL_QUOTED_STR = new RegExp('\"(.*?)\"', 'g');\nconst WORDIF = new RegExp('[\\\\w\"\\'@#$.\\\\s+]+', 'g');\nlet exp = new RegExp('\\\\${([^}]*)}', 'g');\n// let cachedTemplate: Object = {};\nlet ARR_OBJ = /^\\..*/gm;\nlet SINGLE_SLASH = /\\\\/gi;\nlet DOUBLE_SLASH = /\\\\\\\\/gi;\nconst WORDFUNC = new RegExp('[\\\\w\"\\'@#$.\\\\s+]+', 'g');\nconst WINDOWFUNC = /\\window\\./gm;\n/**\n * The function to set regular expression for template expression string.\n * @param  {RegExp} value - Value expression.\n * @private\n */\n\n// /**\n//  * To render the template string from the given data.\n//  * @param  {string} template - String Template.\n//  * @param  {Object[]|JSON} data - DataSource for the template.\n//  * @param  {Object} helper? - custom helper object.\n//  */\n// export function template(template: string, data: JSON, helper?: Object): string {\n//     let hash: string = hashCode(template);\n//     let tmpl: Function;\n//     if (!cachedTemplate[hash]) {\n//         tmpl = cachedTemplate[hash] = compile(template, helper);\n//     } else {\n//         tmpl = cachedTemplate[hash];\n//     }\n//     return tmpl(data);\n// }\n/**\n * Compile the template string into template function.\n * @param  {string} template - The template string which is going to convert.\n * @param  {Object} helper? - Helper functions as an object.\n * @private\n */\nfunction compile$1(template, helper) {\n    let argName = 'data';\n    let evalExpResult = evalExp(template, argName, helper);\n    let fnCode = `var str=\"${evalExpResult}\"; return str;`;\n    // tslint:disable-next-line:no-function-constructor-with-string-args\n    let fn = new Function(argName, fnCode);\n    return fn.bind(helper);\n}\n// function used to evaluate the function expression\nfunction evalExp(str, nameSpace, helper) {\n    let varCOunt = 0;\n    /**\n     * Variable containing Local Keys\n     */\n    let localKeys = [];\n    let isClass = str.match(/class=\"([^\\\"]+|)\\s{2}/g);\n    let singleSpace = '';\n    if (isClass) {\n        isClass.forEach((value) => {\n            singleSpace = value.replace(/\\s\\s+/g, ' ');\n            str = str.replace(value, singleSpace);\n        });\n    }\n    return str.replace(LINES, '').replace(DBL_QUOTED_STR, '\\'$1\\'').replace(exp, (match, cnt, offset, matchStr) => {\n        const SPECIAL_CHAR = /\\@|\\#|\\$/gm;\n        let matches = cnt.match(CALL_FUNCTION);\n        // matches to detect any function calls\n        if (matches) {\n            let rlStr = matches[1];\n            if (ELSEIF_STMT.test(cnt)) {\n                //handling else-if condition\n                cnt = '\";} ' + cnt.replace(matches[1], rlStr.replace(WORD, (str) => {\n                    str = str.trim();\n                    return addNameSpace(str, !(QUOTES.test(str)) && (localKeys.indexOf(str) === -1), nameSpace, localKeys);\n                })) + '{ \\n str = str + \"';\n            }\n            else if (IF_STMT.test(cnt)) {\n                //handling if condition\n                cnt = '\"; ' + cnt.replace(matches[1], rlStr.replace(WORDIF, (strs) => {\n                    return HandleSpecialCharArrObj(strs, nameSpace, localKeys);\n                })) + '{ \\n str = str + \"';\n            }\n            else if (FOR_STMT.test(cnt)) {\n                //handling for condition\n                let rlStr = matches[1].split(' of ');\n                // replace for each into actual JavaScript\n                cnt = '\"; ' + cnt.replace(matches[1], (mtc) => {\n                    localKeys.push(rlStr[0]);\n                    localKeys.push(rlStr[0] + 'Index');\n                    varCOunt = varCOunt + 1;\n                    // tslint:disable-next-line\n                    return 'var i' + varCOunt + '=0; i' + varCOunt + ' < ' + addNameSpace(rlStr[1], true, nameSpace, localKeys) + '.length; i' + varCOunt + '++';\n                }) + '{ \\n ' + rlStr[0] + '= ' + addNameSpace(rlStr[1], true, nameSpace, localKeys)\n                    + '[i' + varCOunt + ']; \\n var ' + rlStr[0] + 'Index=i' + varCOunt + '; \\n str = str + \"';\n            }\n            else {\n                //helper function handling\n                let fnStr = cnt.split('(');\n                let fNameSpace = (helper && helper.hasOwnProperty(fnStr[0]) ? 'this.' : 'global');\n                fNameSpace = (/\\./.test(fnStr[0]) ? '' : fNameSpace);\n                let ftArray = matches[1].split(',');\n                if (matches[1].length !== 0 && !(/data/).test(ftArray[0]) && !(/window./).test(ftArray[0])) {\n                    matches[1] = (fNameSpace === 'global' ? nameSpace + '.' + matches[1] : matches[1]);\n                }\n                let splRegexp = /\\@|\\$|\\#/gm;\n                let arrObj = /\\]\\./gm;\n                if (WINDOWFUNC.test(cnt) && arrObj.test(cnt) || splRegexp.test(cnt)) {\n                    let splArrRegexp = /\\@|\\$|\\#|\\]\\./gm;\n                    if (splArrRegexp.test(cnt)) {\n                        // tslint:disable-next-line\n                        cnt = '\"+ ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(matches[1], rlStr.replace(WORDFUNC, (strs) => {\n                            return HandleSpecialCharArrObj(strs, nameSpace, localKeys);\n                        })) + '+ \"';\n                    }\n                }\n                else {\n                    cnt = '\" + ' + (fNameSpace === 'global' ? '' : fNameSpace) +\n                        cnt.replace(rlStr, addNameSpace(matches[1].replace(/,( |)data.|,/gi, ',' + nameSpace + '.').replace(/,( |)data.window/gi, ',window'), (fNameSpace === 'global' ? false : true), nameSpace, localKeys)) +\n                        '+\"';\n                }\n            }\n        }\n        else if (ELSE_STMT.test(cnt)) {\n            // handling else condition\n            cnt = '\"; ' + cnt.replace(ELSE_STMT, '} else { \\n str = str + \"');\n        }\n        else if (!!cnt.match(IF_OR_FOR)) {\n            // close condition \n            cnt = cnt.replace(IF_OR_FOR, '\"; \\n } \\n str = str + \"');\n        }\n        else if (SPECIAL_CHAR.test(cnt)) {\n            // template string with double slash with special character\n            if (cnt.match(SINGLE_SLASH)) {\n                cnt = SlashReplace(cnt);\n            }\n            cnt = '\"+' + NameSpaceForspecialChar(cnt, (localKeys.indexOf(cnt) === -1), nameSpace, localKeys) + '\"]+\"';\n        }\n        else {\n            // template string with double slash\n            if (cnt.match(SINGLE_SLASH)) {\n                cnt = SlashReplace(cnt);\n                cnt = '\"+' + NameSpaceForspecialChar(cnt, (localKeys.indexOf(cnt) === -1), nameSpace, localKeys) + '\"]+\"';\n            }\n            else {\n                // evaluate normal expression\n                cnt = '\"+' + addNameSpace(cnt.replace(/\\,/gi, '+' + nameSpace + '.'), (localKeys.indexOf(cnt) === -1), nameSpace, localKeys) + '+\"';\n            }\n        }\n        return cnt;\n    });\n}\nfunction addNameSpace(str, addNS, nameSpace, ignoreList) {\n    return ((addNS && !(NOT_NUMBER.test(str)) && ignoreList.indexOf(str.split('.')[0]) === -1) ? nameSpace + '.' + str : str);\n}\nfunction NameSpaceArrObj(str, addNS, nameSpace, ignoreList) {\n    let arrObjReg = /^\\..*/gm;\n    return ((addNS && !(NOT_NUMBER.test(str)) &&\n        ignoreList.indexOf(str.split('.')[0]) === -1 && !(arrObjReg.test(str))) ? nameSpace + '.' + str : str);\n}\n// // Create hashCode for template string to storeCached function\n// function hashCode(str: string): string {\n//     return str.split('').reduce((a: number, b: string) => { a = ((a << 5) - a) + b.charCodeAt(0); return a & a; }, 0).toString();\n// }\nfunction NameSpaceForspecialChar(str, addNS, nameSpace, ignoreList) {\n    return ((addNS && !(NOT_NUMBER.test(str)) && ignoreList.indexOf(str.split('.')[0]) === -1) ? nameSpace + '[\"' + str : str);\n}\n// tslint:disable-next-line\nfunction SlashReplace(tempStr) {\n    // tslint:disable-next-line\n    let double = `\\\\\\\\`;\n    if (tempStr.match(DOUBLE_SLASH)) {\n        tempStr = tempStr;\n    }\n    else {\n        tempStr = tempStr.replace(SINGLE_SLASH, double);\n    }\n    return tempStr;\n}\nfunction HandleSpecialCharArrObj(str, nameSpaceNew, keys) {\n    str = str.trim();\n    let windowFunc = /\\window\\./gm;\n    if (!windowFunc.test(str)) {\n        let quotes = /'|\"/gm;\n        let splRegexp = /\\@|\\$|\\#/gm;\n        if (splRegexp.test(str)) {\n            str = NameSpaceForspecialChar(str, (keys.indexOf(str) === -1), nameSpaceNew, keys) + '\"]';\n        }\n        if (ARR_OBJ.test(str)) {\n            return NameSpaceArrObj(str, !(quotes.test(str)) && (keys.indexOf(str) === -1), nameSpaceNew, keys);\n        }\n        else {\n            return addNameSpace(str, !(quotes.test(str)) && (keys.indexOf(str) === -1), nameSpaceNew, keys);\n        }\n    }\n    else {\n        return str;\n    }\n}\n\n/**\n * Template Engine Bridge\n */\nconst HAS_ROW = /^[\\n\\r.]+\\<tr|^\\<tr/;\nconst HAS_SVG = /^[\\n\\r.]+\\<svg|^\\<path|^\\<g/;\nlet blazorTemplates = {};\nfunction getRandomId() {\n    return '-' + Math.random().toString(36).substr(2, 5);\n}\n/**\n * Compile the template string into template function.\n * @param  {string} templateString - The template string which is going to convert.\n * @param  {Object} helper? - Helper functions as an object.\n * @private\n */\n//tslint:disable-next-line\nfunction compile$$1(templateString, helper) {\n    let compiler = engineObj.compile(templateString, helper);\n    //tslint:disable-next-line\n    return (data, component, propName, templateId, isStringTemplate, index) => {\n        let result = compiler(data, component, propName);\n        let blazorTemplateId = 'BlazorTemplateId';\n        if (isBlazor() && !isStringTemplate) {\n            let randomId = getRandomId();\n            let blazorId = templateId + randomId;\n            if (!blazorTemplates[templateId]) {\n                blazorTemplates[templateId] = [];\n            }\n            if (!isNullOrUndefined(index)) {\n                let keys = Object.keys(blazorTemplates[templateId][index]);\n                for (let key of keys) {\n                    if (key !== blazorTemplateId && data[key]) {\n                        blazorTemplates[templateId][index][key] = data[key];\n                    }\n                    if (key === blazorTemplateId) {\n                        blazorId = blazorTemplates[templateId][index][key];\n                    }\n                }\n            }\n            else {\n                data[blazorTemplateId] = blazorId;\n                blazorTemplates[templateId].push(data);\n            }\n            // tslint:disable-next-line:no-any\n            return propName === 'rowTemplate' ? [createElement('tr', { id: blazorId, className: 'e-blazor-template' })] :\n                // tslint:disable-next-line:no-any\n                [createElement('div', { id: blazorId, className: 'e-blazor-template' })];\n        }\n        if (typeof result === 'string') {\n            if (HAS_SVG.test(result)) {\n                let ele = createElement('svg', { innerHTML: result });\n                return ele.childNodes;\n            }\n            else {\n                let ele = createElement((HAS_ROW.test(result) ? 'table' : 'div'), { innerHTML: result });\n                return ele.childNodes;\n            }\n        }\n        else {\n            return result;\n        }\n    };\n}\nfunction updateBlazorTemplate(templateId, templateName, comp, isEmpty, callBack) {\n    if (isBlazor()) {\n        let ejsIntrop = 'sfBlazor';\n        window[ejsIntrop].updateTemplate(templateName, blazorTemplates[templateId], templateId, comp, callBack);\n        if (isEmpty !== false) {\n            blazorTemplates[templateId] = [];\n        }\n    }\n}\nfunction resetBlazorTemplate(templateId, templateName, index) {\n    let templateDiv = document.getElementById(templateId);\n    if (templateDiv) {\n        // tslint:disable-next-line:no-any\n        let innerTemplates = templateDiv.getElementsByClassName('blazor-inner-template');\n        for (let i = 0; i < innerTemplates.length; i++) {\n            let tempId = ' ';\n            if (!isNullOrUndefined(index)) {\n                tempId = innerTemplates[index].getAttribute('data-templateId');\n            }\n            else {\n                tempId = innerTemplates[i].getAttribute('data-templateId');\n            }\n            let tempElement = document.getElementById(tempId);\n            if (tempElement) {\n                let length = tempElement.childNodes.length;\n                for (let j = 0; j < length; j++) {\n                    if (!isNullOrUndefined(index)) {\n                        innerTemplates[index].appendChild(tempElement.childNodes[0]);\n                        i = innerTemplates.length;\n                    }\n                    else {\n                        innerTemplates[i].appendChild(tempElement.childNodes[0]);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * Set your custom template engine for template rendering.\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @private\n */\nfunction setTemplateEngine(classObj) {\n    engineObj.compile = classObj.compile;\n}\n/**\n * Get current template engine for template rendering\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @private\n */\nfunction getTemplateEngine() {\n    return engineObj.compile;\n}\n//Default Engine Class\nclass Engine {\n    compile(templateString, helper = {}) {\n        return compile$1(templateString, helper);\n    }\n}\nlet engineObj = { compile: new Engine().compile };\n\nconst simpleRegex = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/;\nconst multipleSplitRegex = /(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))/g;\nconst idClassSelector = /^(\\.|#)/;\nconst selectMapper = {\n    '.': 'className',\n    '#': 'id'\n};\nconst classRegexString = '(?=.*?\\\\b{value}\\\\b)';\nconst assigner = { className: 'attributes.className', id: 'attributes.id', tagName: 'tagName' };\nconst emptyElements = ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input',\n    'link', 'meta', 'param', 'embed', 'command', 'keygen', 'source', 'track', 'wbr'];\nconst blockElements = ['a', 'address', 'article', 'applet', 'aside', 'audio', 'blockquote',\n    'button', 'canvas', 'center', 'dd', 'del', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure',\n    'footer', 'form', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'iframe', 'ins',\n    'isindex', 'li', 'map', 'menu', 'noframes', 'noscript', 'object', 'ol', 'output', 'p', 'pre', 'section',\n    'script', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video'];\nconst inlineElement = ['abbr', 'acronym', 'applet', 'b', 'basefont', 'bdo', 'big', 'br', 'button',\n    'cite', 'code', 'del', 'dfn', 'em', 'font', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map',\n    'object', 'q', 's', 'samp', 'script', 'select', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'textarea',\n    'tt', 'u', 'var'];\nconst selfClosingElements = ['colgroup', 'dd', 'dt', 'li', 'options', 'p', 'td', 'tfoot', 'th',\n    'thead', 'tr'];\nconst fillAttrs = ['checked', 'compact', 'declare', 'defer', 'disabled', 'ismap', 'multiple',\n    'nohref', 'noresize', 'noshade', 'nowrap', 'readonly', 'selected'];\nconst cspElement = ['Script', 'style'];\nconst nameMapper = { 'tabindex': 'tabIndex' };\nconst startRegex = /^<([-A-Za-z0-9_]+)((?:\\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\nconst endRegex = /^<\\/([-A-Za-z0-9_]+)[^>]*>/;\nconst attributeRegex = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\n/**\n * Namespace for VirtualDOM\n * @private\n */\nvar VirtualDOM;\n(function (VirtualDOM) {\n    //tslint:disable:no-any\n    function createElement(tagName, properties) {\n        let children = [];\n        let extended = extend({}, {}, properties, true);\n        if (!isNullOrUndefined(properties)) {\n            let keys = Object.keys(properties);\n            if (keys.length) {\n                if (extended.innerHTML) {\n                    children = ConvertHTMLToJSon(extended.innerHTML);\n                    delete extended.innerHTML;\n                }\n                if (extended.attrs) {\n                    extend(extended, extended.attrs);\n                    delete extended.attrs;\n                }\n                if (extended.styles) {\n                    let valArr = extended.styles.split(';');\n                    let vObj = {};\n                    for (let i = 0, length = valArr.length; i < length; i++) {\n                        let cVal = valArr[i];\n                        let styleSplit = cVal.split(':');\n                        vObj[styleSplit[0]] = styleSplit[1];\n                    }\n                    delete extended.styles;\n                    extended.style = vObj;\n                }\n            }\n        }\n        return {\n            tagName: tagName,\n            attributes: extended || {},\n            children: children\n        };\n    }\n    VirtualDOM.createElement = createElement;\n    function assignParent(childrens, parent) {\n        if (parent && childrens) {\n            childrens.forEach((child) => {\n                if (isObject(child)) {\n                    if (child.parent) {\n                        detach(child);\n                    }\n                    child.parent = parent;\n                }\n                return child;\n            });\n        }\n    }\n    VirtualDOM.assignParent = assignParent;\n    function append(fromElements, toElement) {\n        assignParent(fromElements, toElement);\n        if (toElement.children) {\n            toElement.children = toElement.children.concat(fromElements);\n        }\n        else {\n            toElement.children = [].concat(fromElements);\n        }\n    }\n    VirtualDOM.append = append;\n    function prepend(child, toElement) {\n        assignParent(child, toElement);\n        if (!toElement.children || !toElement.children.length) {\n            toElement.children = [];\n            toElement.children.concat(child);\n        }\n        else {\n            for (let i = child.length - 1; i >= 0; i--) {\n                toElement.children.unshift(child[i]);\n            }\n        }\n    }\n    VirtualDOM.prepend = prepend;\n    function detach(element) {\n        let parent = element.parent;\n        if (parent) {\n            let index = parent.children.indexOf(element);\n            if (index !== -1) {\n                parent.children.splice(index);\n            }\n        }\n        return parent;\n    }\n    VirtualDOM.detach = detach;\n    //tslint:disable-next-line\n    function vDomSelector({ ele, selector, selectAll, immediateParent }) {\n        let iSelector = selector.split(' ');\n        let curColl = ele;\n        for (let i = 0, length = iSelector.length; i < length; i++) {\n            let isDescendant = false;\n            let parent = curColl;\n            let curSelector = iSelector[i];\n            let mapper = [];\n            if (simpleRegex.test(curSelector)) {\n                processSelector(curSelector, mapper);\n            }\n            else if (curSelector.indexOf('>') === -1) {\n                let splitSelector = curSelector.match(multipleSplitRegex);\n                for (let curMap of splitSelector) {\n                    processSelector(curMap, mapper);\n                }\n            }\n            else if (curSelector.indexOf('>') !== -1) {\n                isDescendant = true;\n                let dSelector = curSelector.split('>');\n                //tslint:disable-next-line\n                let dParent = ele;\n                let descendent;\n                let flag = 0;\n                for (let sel of dSelector) {\n                    if (!dParent) {\n                        break;\n                    }\n                    if (dParent.length) {\n                        let descendentChild = [];\n                        for (let child of dParent) {\n                            descendentChild = descendentChild.concat(vDomSelector({\n                                ele: child, selector: sel,\n                                selectAll, immediateParent: !!flag\n                            }));\n                        }\n                        descendent = descendentChild;\n                    }\n                    else {\n                        descendent = vDomSelector({ ele: dParent, selector: sel, selectAll, immediateParent: !!flag });\n                    }\n                    flag++;\n                    dParent = descendent;\n                }\n                if (descendent) {\n                    curColl = descendent;\n                }\n            }\n            if (!isDescendant) {\n                if (parent.length) {\n                    let iCurSelector = [];\n                    for (let curParent of parent) {\n                        iCurSelector = iCurSelector.concat(accessElement(curParent, mapper, selectAll, immediateParent));\n                    }\n                    curColl = iCurSelector;\n                }\n                else {\n                    curColl = accessElement(parent, mapper, selectAll, immediateParent);\n                }\n            }\n        }\n        if (selectAll) {\n            return curColl;\n        }\n        else {\n            return curColl[0] || null;\n        }\n    }\n    VirtualDOM.vDomSelector = vDomSelector;\n    function processSelector(selector, mapper) {\n        let match = selector.match(idClassSelector);\n        let obj = {};\n        if (match) {\n            let curMapper = selectMapper[match[0]];\n            if (curMapper === 'className') {\n                let curObj = mapper.filter((obj) => { return obj.hasOwnProperty('className'); })[0];\n                let canPush = false;\n                if (!curObj) {\n                    canPush = true;\n                    curObj = {};\n                }\n                let existValue = curObj[curMapper] || '';\n                curObj[curMapper] = existValue + classRegexString.replace('{value}', selector.replace('.', ''));\n                if (canPush) {\n                    mapper.push(curObj);\n                }\n            }\n            else {\n                obj[curMapper] = selector.replace(match[0], '');\n                mapper.push(obj);\n            }\n        }\n        else {\n            mapper.push({ tagName: selector });\n        }\n    }\n    //tslint:disable-next-line\n    function accessElement(ele, mapper, selectAll, immediateParent) {\n        if (ele.children) {\n            //tslint:disable-next-line\n            let temp = ele.children.filter(function (child) {\n                if (typeof (child) !== 'string') {\n                    let matched = true;\n                    for (let map of mapper) {\n                        let key = Object.keys(map)[0];\n                        let expected = map[key];\n                        let actualValue = getValue(assigner[key], child);\n                        if (key === 'className') {\n                            if (!(new RegExp('^' + expected + '.*$').test(actualValue))) {\n                                matched = false;\n                                break;\n                            }\n                        }\n                        else if (actualValue !== expected) {\n                            matched = false;\n                            break;\n                        }\n                    }\n                    return matched;\n                }\n                else {\n                    return false;\n                }\n            });\n            if (!immediateParent && (!temp.length || selectAll)) {\n                ele.children.forEach((child) => {\n                    if (isObject(child)) {\n                        temp = temp.concat(accessElement(child, mapper, selectAll));\n                    }\n                });\n            }\n            return temp;\n        }\n        else {\n            return [];\n        }\n    }\n    VirtualDOM.accessElement = accessElement;\n    function ConvertHTMLToJSon(htmlString) {\n        let results = [];\n        let isText;\n        let tagArray = [];\n        let nodeArray = [];\n        while (htmlString) {\n            isText = true;\n            let lastVal = getLastValue(tagArray);\n            if (!lastVal || !contains(cspElement, lastVal)) {\n                if (htmlString.indexOf('</') === 0) {\n                    let match = htmlString.match(endRegex);\n                    if (match) {\n                        htmlString = htmlString.substring(match[0].length);\n                        //tslint:disable-next-line\n                        match[0].replace(endRegex, iterateEndTag);\n                    }\n                    isText = false;\n                }\n                else if (htmlString.indexOf('<') === 0) {\n                    let match = htmlString.match(startRegex);\n                    if (match) {\n                        htmlString = htmlString.substring(match[0].length);\n                        //tslint:disable-next-line\n                        match[0].replace(startRegex, iterateStartTag);\n                    }\n                    isText = false;\n                }\n                if (isText) {\n                    let tagIndex = htmlString.indexOf('<');\n                    let text = tagIndex < 0 ? htmlString : htmlString.substring(0, tagIndex);\n                    htmlString = tagIndex < 0 ? '' : htmlString.substring(tagIndex);\n                    iterateText(text);\n                }\n            }\n            else {\n                //tslint:disable-next-line\n                htmlString = htmlString.replace(new RegExp('([\\\\s\\\\S]*?)<\\/' + getLastValue(nodeArray) + '[^>]*>'), (all, text) => {\n                    text = text.replace(/<!--([\\s\\S]*?)-->|<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1$2');\n                    iterateText(text);\n                    return '';\n                });\n                iterateEndTag('', getLastValue(tagArray));\n            }\n            \n        }\n        function iterateStartTag(start, tagName, rest) {\n            tagName = tagName.toLowerCase();\n            if (contains(blockElements, tagName)) {\n                while (getLastValue(tagArray) && contains(inlineElement, getLastValue(tagArray))) {\n                    iterateEndTag('', getLastValue(tagArray));\n                }\n            }\n            if (contains(selfClosingElements, tagName) && getLastValue(tagArray)) {\n                iterateEndTag('', tagName);\n            }\n            let isSelfTag = contains(emptyElements, tagName);\n            if (!isSelfTag) {\n                tagArray.push(tagName);\n            }\n            let attrs = {};\n            //tslint:disable-next-line\n            rest.replace(attributeRegex, function (match, name, ...names) {\n                //tslint:disable-next-line\n                let val = names[2] ? names[2] :\n                    names[3] ? names[3] :\n                        names[4] ? names[4] :\n                            contains(fillAttrs, name) ? name : '';\n                if (name === 'style') {\n                    let valArr = val.split(';');\n                    let vObj = {};\n                    for (let i = 0, length = valArr.length; i < length; i++) {\n                        let cVal = valArr[i];\n                        let styleSplit = cVal.split(':');\n                        vObj[styleSplit[0]] = styleSplit[1];\n                    }\n                    val = vObj;\n                }\n                name = nameMapper[name] || name;\n                attrs[name] = val;\n                //tslint:disable-next-line\n            });\n            attrs['data-id'] = getRandomId();\n            let tagObject = {\n                tagName: tagName,\n                attributes: attrs\n            };\n            if (isSelfTag) {\n                let parent = (nodeArray[0] || results);\n                if (parent.children === undefined) {\n                    parent.children = [];\n                }\n                tagObject.parent = parent;\n                parent.children.push(tagObject);\n            }\n            else {\n                nodeArray.unshift(tagObject);\n            }\n        }\n        function iterateEndTag(start, tagName) {\n            let pos;\n            if (!tagName) {\n                pos = 0;\n            }\n            else {\n                for (pos = tagArray.length - 1; pos >= 0; pos--) {\n                    if (tagArray[pos] === tagName) {\n                        break;\n                    }\n                }\n            }\n            if (pos >= 0) {\n                for (let j = nodeArray.length - 1; j >= pos; j--) {\n                    //tslint:disable-next-line\n                    let node = nodeArray.shift();\n                    if (nodeArray.length === 0) {\n                        results.push(node);\n                    }\n                    else {\n                        let parent = nodeArray[0];\n                        if (parent.children === undefined) {\n                            parent.children = [];\n                        }\n                        node.parent = parent;\n                        parent.children.push(node);\n                    }\n                }\n                tagArray.length = pos;\n            }\n        }\n        function iterateText(text) {\n            if (nodeArray.length === 0) {\n                results.push(text);\n            }\n            else {\n                let parent = nodeArray[0];\n                if (parent.children === undefined) {\n                    parent.children = [];\n                }\n                parent.children.push(text);\n            }\n        }\n        return results;\n    }\n    VirtualDOM.ConvertHTMLToJSon = ConvertHTMLToJSon;\n    //tslint:disable-next-line \n    function getLastValue(arr) {\n        return arr[arr.length - 1];\n    }\n    function contains(arr, key) {\n        return arr.indexOf(key) !== -1;\n    }\n    //tslint:disable-next-line\n    function cloneNode(ele, deep) {\n        if (isObject(ele)) {\n            if (deep) {\n                return extend({}, {}, ele, true);\n            }\n            else {\n                return { tagName: ele.tagName, attributes: ele.attributes };\n            }\n        }\n        else {\n            return ele.cloneNode(deep);\n        }\n    }\n    VirtualDOM.cloneNode = cloneNode;\n    function setStyleAttribute(element, attrs) {\n        if (element.attributes.style) {\n            (element.attributes).style = extend({}, attrs);\n        }\n        else {\n            element.attributes.style = extend(element.attributes.style, attrs);\n        }\n    }\n    VirtualDOM.setStyleAttribute = setStyleAttribute;\n    //tslint:enable:no-any\n})(VirtualDOM || (VirtualDOM = {}));\n\n/**\n * Functions related to dom operations.\n */\nconst SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n * @param tagName - Name of the tag, id and class names.\n * @param properties - Object to set properties in the element.\n * @param properties.id - To set the id to the created element.\n * @param properties.className - To add classes to the element.\n * @param properties.innerHTML - To set the innerHTML to element.\n * @param properties.styles - To set the some custom styles to element.\n * @param properties.attrs - To set the attributes to element.\n * @private\n */\nfunction createElement(tagName, properties) {\n    //tslint:disable-next-line\n    let element = (SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName));\n    if (typeof (properties) === 'undefined') {\n        return element;\n    }\n    element.innerHTML = (properties.innerHTML ? properties.innerHTML : '');\n    if (properties.className !== undefined) {\n        element.className = properties.className;\n    }\n    if (properties.id !== undefined) {\n        element.id = properties.id;\n    }\n    if (properties.styles !== undefined) {\n        element.setAttribute('style', properties.styles);\n    }\n    if (properties.attrs !== undefined) {\n        attributes(element, properties.attrs);\n    }\n    return element;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nfunction addClass(elements, classes) {\n    let classList = getClassList(classes);\n    for (let ele of elements) {\n        for (let className of classList) {\n            if (isObject(ele)) {\n                let curClass = getValue('attributes.className', ele);\n                if (isNullOrUndefined(curClass)) {\n                    setValue('attributes.className', className, ele);\n                }\n                else if (!new RegExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n                    setValue('attributes.className', curClass + ' ' + className, ele);\n                }\n            }\n            else {\n                if (!ele.classList.contains(className)) {\n                    ele.classList.add(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nfunction removeClass(elements, classes) {\n    let classList = getClassList(classes);\n    for (let ele of elements) {\n        let flag = isObject(ele);\n        let canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n        if (canRemove) {\n            for (let className of classList) {\n                if (flag) {\n                    let classes = getValue('attributes.className', ele);\n                    let classArr = classes.split(' ');\n                    let index = classArr.indexOf(className);\n                    if (index !== -1) {\n                        classArr.splice(index, 1);\n                    }\n                    setValue('attributes.className', classArr.join(' '), ele);\n                }\n                else {\n                    ele.classList.remove(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\nfunction getClassList(classes) {\n    let classList = [];\n    if (typeof classes === 'string') {\n        classList.push(classes);\n    }\n    else {\n        classList = classes;\n    }\n    return classList;\n}\n/**\n * The function used to check element is visible or not.\n * @param  {Element|Node} element - An element the need to check visibility\n * @private\n */\nfunction isVisible(element) {\n    let ele = element;\n    return (ele.style.visibility === '' && ele.offsetWidth > 0);\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nfunction prepend(fromElements, toElement, isEval) {\n    //tslint:disable:no-any\n    if (isObject(toElement)) {\n        VirtualDOM.prepend(fromElements, toElement);\n    }\n    else {\n        let docFrag = document.createDocumentFragment();\n        for (let ele of fromElements) {\n            docFrag.appendChild(ele);\n        }\n        toElement.insertBefore(docFrag, toElement.firstElementChild);\n        if (isEval) {\n            executeScript(toElement);\n        }\n    }\n    return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nfunction append(fromElements, toElement, isEval) {\n    if (isObject(toElement)) {\n        VirtualDOM.append(fromElements, toElement);\n    }\n    else {\n        let docFrag = document.createDocumentFragment();\n        for (let ele of fromElements) {\n            docFrag.appendChild(ele);\n        }\n        toElement.appendChild(docFrag);\n        if (isEval) {\n            executeScript(toElement);\n        }\n    }\n    return fromElements;\n}\n//tslint: enable:no-any\n/**\n * The function is used to evaluate script from Ajax request\n * @param ele - An element is going to evaluate the script\n */\nfunction executeScript(ele) {\n    let eleArray = ele.querySelectorAll('script');\n    eleArray.forEach((element) => {\n        let script = document.createElement('script');\n        script.text = element.innerHTML;\n        document.head.appendChild(script);\n        detach(script);\n    });\n}\n/**\n * The function used to remove the element from the\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @private\n */\nfunction detach(element) {\n    if (isObject(element)) {\n        return VirtualDOM.detach(element);\n    }\n    else {\n        let parentNode = element.parentNode;\n        return parentNode.removeChild(element);\n    }\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @private\n */\nfunction remove(element) {\n    if (isObject(element)) {\n        VirtualDOM.detach(element);\n    }\n    else {\n        let parentNode = element.parentNode;\n        EventHandler.clearEvents(element);\n        parentNode.removeChild(element);\n    }\n}\n/**\n * The function helps to set multiple attributes to an element\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.\n * @private\n */\nfunction attributes(element, attributes) {\n    let keys = Object.keys(attributes);\n    let ele = element;\n    for (let key of keys) {\n        if (isObject(ele)) {\n            let iKey = key;\n            if (key === 'tabindex') {\n                iKey = 'tabIndex';\n            }\n            ele.attributes[iKey] = attributes[key];\n        }\n        else {\n            ele.setAttribute(key, attributes[key]);\n        }\n    }\n    return ele;\n}\n/**\n * The function selects the element from giving context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n//tslint:disable-next-line\nfunction select(selector, context = document, needsVDOM) {\n    if (isObject(context) && needsVDOM) {\n        //tslint:disable-next-line\n        return VirtualDOM.vDomSelector({ ele: context, selector, selectAll: false });\n    }\n    else {\n        return context.querySelector(selector);\n    }\n}\n/**\n * The function selects an array of element from the given context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\nfunction selectAll(selector, context = document, needsVDOM) {\n    if (isObject(context) && !needsVDOM) {\n        //tslint:disable-next-line\n        return VirtualDOM.vDomSelector({ ele: context, selector, selectAll: true });\n    }\n    else {\n        let nodeList = context.querySelectorAll(selector);\n        return nodeList;\n    }\n}\n/**\n * Returns single closest parent element based on class selector.\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @private\n */\nfunction closest(element, selector) {\n    let el = element;\n    if (typeof el.closest === 'function') {\n        return el.closest(selector);\n    }\n    while (el && el.nodeType === 1) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentNode;\n    }\n    return null;\n}\n/**\n * Returns all sibling elements of the given element.\n * @param  {Element|Node} element - An element that need to get siblings.\n * @private\n */\nfunction siblings(element) {\n    let siblings = [];\n    let childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n    for (let curNode of childNodes) {\n        if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n            siblings.push(curNode);\n        }\n    }\n    return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @private\n */\nfunction getAttributeOrDefault(element, property, value) {\n    let attrVal;\n    let isObj = isObject(element);\n    if (isObj) {\n        attrVal = getValue('attributes.' + property, element);\n    }\n    else {\n        attrVal = element.getAttribute(property);\n    }\n    if (isNullOrUndefined(attrVal) && value) {\n        if (!isObj) {\n            element.setAttribute(property, value.toString());\n        }\n        else {\n            element.attributes[property] = value;\n        }\n        attrVal = value;\n    }\n    return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @return {void}\n * @private\n */\nfunction setStyleAttribute(element, attrs) {\n    if (attrs !== undefined) {\n        if (isObject(element)) {\n            // tslint:disable-next-line:no-any\n            VirtualDOM.setStyleAttribute(element, attrs);\n        }\n        else {\n            Object.keys(attrs).forEach((key) => {\n                // tslint:disable-next-line:no-any\n                element.style[key] = attrs[key];\n            });\n        }\n    }\n}\n/**\n * Method for add and remove classes to a dom element.\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @return {void}\n * @private\n */\nfunction classList(element, addClasses, removeClasses) {\n    addClass([element], addClasses);\n    removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {void}\n * @private\n */\nfunction matches(element, selector) {\n    //tslint:disable-next-line\n    let matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n    if (matches) {\n        return matches.call(element, selector);\n    }\n    else {\n        return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n    }\n}\nfunction includeInnerHTML(ele, innerHTML) {\n    if (isObject(ele)) {\n        if (innerHTML === '') {\n            ele.children = [];\n        }\n        else {\n            let res = VirtualDOM.ConvertHTMLToJSon(innerHTML);\n            if (res.length) {\n                VirtualDOM.assignParent(res, ele);\n                ele.children = res;\n            }\n        }\n    }\n    else {\n        ele.innerHTML = innerHTML;\n    }\n}\n//tslint:disable-next-line\nfunction containsClass(ele, className) {\n    if (isObject(ele)) {\n        // tslint:disable-next-line:no-any\n        return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n    }\n    else {\n        return ele.classList.contains(className);\n    }\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {Element | VirtualObject}\n * @private\n */\n//tslint:disable:no-any\nfunction cloneNode(element, deep) {\n    if (isObject(element)) {\n        if (deep) {\n            return extend({}, {}, element, true);\n        }\n        else {\n            return { tagName: element.tagName, attributes: element.attributes };\n        }\n    }\n    else {\n        return element.cloneNode(deep);\n    }\n}\n\nconst isColEName = new RegExp('\\]');\n/* tslint:enable:no-any */\n/**\n * Base library module is common module for Framework modules like touch,keyboard and etc.,\n * @private\n */\nclass Base {\n    /**\n     * Base constructor accept options and element\n     */\n    constructor(options, element) {\n        this.isRendered = false;\n        this.isComplexArraySetter = false;\n        this.isServerRendered = false;\n        this.allowServerDataBinding = true;\n        this.isProtectedOnChange = true;\n        this.properties = {};\n        this.changedProperties = {};\n        this.oldProperties = {};\n        this.bulkChanges = {};\n        this.refreshing = false;\n        this.ignoreCollectionWatch = false;\n        // tslint:disable-next-line:no-empty\n        this.finalUpdate = () => { };\n        this.childChangedProperties = {};\n        this.modelObserver = new Observer(this);\n        if (!isUndefined(element)) {\n            if ('string' === typeof (element)) {\n                this.element = document.querySelector(element);\n            }\n            else {\n                this.element = element;\n            }\n            if (!isNullOrUndefined(this.element)) {\n                this.isProtectedOnChange = false;\n                this.addInstance();\n            }\n        }\n        if (!isUndefined(options)) {\n            this.setProperties(options, true);\n        }\n        this.isDestroyed = false;\n    }\n    /** Property base section */\n    /**\n     * Function used to set bunch of property at a time.\n     * @private\n     * @param  {Object} prop - JSON object which holds components properties.\n     * @param  {boolean} muteOnChange? - Specifies to true when we set properties.\n     */\n    setProperties(prop, muteOnChange) {\n        let prevDetection = this.isProtectedOnChange;\n        this.isProtectedOnChange = !!muteOnChange;\n        merge(this, prop);\n        if (muteOnChange !== true) {\n            merge(this.changedProperties, prop);\n            this.dataBind();\n        }\n        else if (isBlazor() && this.isRendered) {\n            this.serverDataBind(prop);\n        }\n        this.finalUpdate();\n        this.changedProperties = {};\n        this.oldProperties = {};\n        this.isProtectedOnChange = prevDetection;\n    }\n    ;\n    /**\n     * Calls for child element data bind\n     * @param {Object} obj\n     * @param {Object} parent\n     * @returns {void}\n     */\n    // tslint:disable-next-line:no-any\n    static callChildDataBind(obj, parent) {\n        let keys = Object.keys(obj);\n        for (let key of keys) {\n            if (parent[key] instanceof Array) {\n                for (let obj of parent[key]) {\n                    if (obj.dataBind !== undefined) {\n                        obj.dataBind();\n                    }\n                }\n            }\n            else {\n                parent[key].dataBind();\n            }\n        }\n    }\n    clearChanges() {\n        this.finalUpdate();\n        this.changedProperties = {};\n        this.oldProperties = {};\n        this.childChangedProperties = {};\n    }\n    /**\n     * Bind property changes immediately to components\n     */\n    dataBind() {\n        Base.callChildDataBind(this.childChangedProperties, this);\n        if (Object.getOwnPropertyNames(this.changedProperties).length) {\n            let prevDetection = this.isProtectedOnChange;\n            let newChanges = this.changedProperties;\n            let oldChanges = this.oldProperties;\n            this.clearChanges();\n            this.isProtectedOnChange = true;\n            this.onPropertyChanged(newChanges, oldChanges);\n            this.isProtectedOnChange = prevDetection;\n        }\n    }\n    ;\n    /* tslint:disable:no-any */\n    serverDataBind(newChanges) {\n        if (!isBlazor()) {\n            return;\n        }\n        newChanges = newChanges ? newChanges : {};\n        extend(this.bulkChanges, {}, newChanges, true);\n        if (this.allowServerDataBinding) {\n            let sfBlazor = 'sfBlazor';\n            window[sfBlazor].updateModel(this);\n            this.bulkChanges = {};\n        }\n    }\n    /* tslint:enable:no-any */\n    saveChanges(key, newValue, oldValue) {\n        if (isBlazor()) {\n            // tslint:disable-next-line:no-any\n            let newChanges = {};\n            newChanges[key] = newValue;\n            this.serverDataBind(newChanges);\n        }\n        if (this.isProtectedOnChange) {\n            return;\n        }\n        this.oldProperties[key] = oldValue;\n        this.changedProperties[key] = newValue;\n        this.finalUpdate();\n        this.finalUpdate = setImmediate(this.dataBind.bind(this));\n    }\n    ;\n    /** Event Base Section */\n    /**\n     * Adds the handler to the given event listener.\n     * @param {string} eventName - A String that specifies the name of the event\n     * @param {Function} listener - Specifies the call to run when the event occurs.\n     * @return {void}\n     */\n    addEventListener(eventName, handler) {\n        this.modelObserver.on(eventName, handler);\n    }\n    /**\n     * Removes the handler from the given event listener.\n     * @param {string} eventName - A String that specifies the name of the event to remove\n     * @param {Function} listener - Specifies the function to remove\n     * @return {void}\n     */\n    removeEventListener(eventName, handler) {\n        this.modelObserver.off(eventName, handler);\n    }\n    /**\n     * Triggers the handlers in the specified event.\n     * @private\n     * @param {string} eventName - Specifies the event to trigger for the specified component properties.\n     * Can be a custom event, or any of the standard events.\n     * @param {Event} eventProp - Additional parameters to pass on to the event properties\n     * @param {Function} successHandler - this function will invoke after event successfully triggered\n     * @param {Function} errorHandler - this function will invoke after event if it failured to call.\n     * @return {void}\n     */\n    trigger(eventName, eventProp, successHandler, errorHandler) {\n        if (this.isDestroyed !== true) {\n            let prevDetection = this.isProtectedOnChange;\n            this.isProtectedOnChange = false;\n            let data = this.modelObserver.notify(eventName, eventProp, successHandler, errorHandler);\n            if (isColEName.test(eventName)) {\n                let handler = getValue(eventName, this);\n                if (handler) {\n                    let blazor = 'Blazor';\n                    if (window[blazor]) {\n                        let promise = handler.call(this, eventProp);\n                        if (promise && typeof promise.then === 'function') {\n                            if (!successHandler) {\n                                data = promise;\n                            }\n                            else {\n                                promise.then((data) => {\n                                    if (successHandler) {\n                                        data = typeof data === 'string' && this.modelObserver.isJson(data) ?\n                                            JSON.parse(data) : data;\n                                        successHandler.call(this, data);\n                                    }\n                                }).catch((data) => {\n                                    if (errorHandler) {\n                                        data = typeof data === 'string' && this.modelObserver.isJson(data) ? JSON.parse(data) : data;\n                                        errorHandler.call(this, data);\n                                    }\n                                });\n                            }\n                        }\n                        else if (successHandler) {\n                            successHandler.call(this, eventProp);\n                        }\n                    }\n                    else {\n                        handler.call(this, eventProp);\n                        if (successHandler) {\n                            successHandler.call(this, eventProp);\n                        }\n                    }\n                }\n                else if (successHandler) {\n                    successHandler.call(this, eventProp);\n                }\n            }\n            this.isProtectedOnChange = prevDetection;\n            return data;\n        }\n    }\n    /**\n     * To maintain instance in base class\n     */\n    addInstance() {\n        // Add module class to the root element\n        let moduleClass = 'e-' + this.getModuleName().toLowerCase();\n        addClass([this.element], ['e-lib', moduleClass]);\n        if (!isNullOrUndefined(this.element.ej2_instances)) {\n            this.element.ej2_instances.push(this);\n        }\n        else {\n            setValue('ej2_instances', [this], this.element);\n        }\n    }\n    /**\n     * To remove the instance from the element\n     */\n    destroy() {\n        this.element.ej2_instances =\n            this.element.ej2_instances.filter((i) => { return i !== this; });\n        removeClass([this.element], ['e-' + this.getModuleName()]);\n        if (this.element.ej2_instances.length === 0) {\n            // Remove module class from the root element\n            removeClass([this.element], ['e-lib']);\n        }\n        this.clearChanges();\n        this.modelObserver.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * Global function to get the component instance from the rendered element.\n * @param elem Specifies the HTMLElement or element id string.\n * @param comp Specifies the component module name or Component.\n */\n// tslint:disable-next-line:no-any\nfunction getComponent(elem, comp) {\n    let instance;\n    let i;\n    let ele = typeof elem === 'string' ? document.getElementById(elem) : elem;\n    for (i = 0; i < ele.ej2_instances.length; i++) {\n        instance = ele.ej2_instances[i];\n        if (typeof comp === 'string') {\n            let compName = instance.getModuleName();\n            if (comp === compName) {\n                return instance;\n            }\n        }\n        else {\n            // tslint:disable-next-line:no-any\n            if (instance instanceof comp) {\n                return instance;\n            }\n        }\n    }\n    return undefined;\n}\n/**\n * Function to remove the child instances.\n * @return {void}\n * @private\n */\n// tslint:disable-next-line:no-any\nfunction removeChildInstance(element) {\n    // tslint:disable-next-line:no-any\n    let childEle = [].slice.call(element.getElementsByClassName('e-control'));\n    for (let i = 0; i < childEle.length; i++) {\n        let compName = childEle[i].classList[1].split('e-')[1];\n        // tslint:disable-next-line:no-any\n        let compInstance = getComponent(childEle[i], compName);\n        if (!isUndefined(compInstance)) {\n            compInstance.destroy();\n        }\n    }\n}\n\n/**\n * Returns the Class Object\n * @param {ClassObject} instance - instance of ClassObject\n * @param {string} curKey - key of the current instance\n * @param {Object} defaultValue - default Value\n * @param {Object[]} type\n */\nfunction getObject(instance, curKey, defaultValue, type) {\n    if (!instance.properties.hasOwnProperty(curKey) || !(instance.properties[curKey] instanceof type)) {\n        instance.properties[curKey] = createInstance(type, [instance, curKey, defaultValue]);\n    }\n    return instance.properties[curKey];\n}\n/**\n * Returns object array\n * @param {ClassObject} instance\n * @param {string} curKey\n * @param {Object[]} defaultValue\n * @param type\n * @param {boolean} isSetter\n * @returns {Object[]}\n */\nfunction getObjectArray(instance, curKey, defaultValue, type, isSetter, isFactory) {\n    let result = [];\n    let len = defaultValue ? defaultValue.length : 0;\n    for (let i = 0; i < len; i++) {\n        let curType = type;\n        if (isFactory) {\n            curType = type(defaultValue[i], instance);\n        }\n        if (isSetter) {\n            let inst = createInstance(curType, [instance, curKey, {}, true]);\n            inst.setProperties(defaultValue[i], true);\n            result.push(inst);\n        }\n        else {\n            result.push(createInstance(curType, [instance, curKey, defaultValue[i], false]));\n        }\n    }\n    return result;\n}\n/**\n * Returns the properties of the object\n * @param {Object} defaultValue\n * @param {string} curKey\n */\nfunction propertyGetter(defaultValue, curKey) {\n    return function () {\n        if (!this.properties.hasOwnProperty(curKey)) {\n            this.properties[curKey] = defaultValue;\n        }\n        return this.properties[curKey];\n    };\n}\n/**\n * Set the properties for the object\n * @param {Object} defaultValue\n * @param {string} curKey\n */\nfunction propertySetter(defaultValue, curKey) {\n    return function (newValue) {\n        if (this.properties[curKey] !== newValue) {\n            let oldVal = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;\n            this.saveChanges(curKey, newValue, oldVal);\n            this.properties[curKey] = newValue;\n        }\n    };\n}\n/**\n * Returns complex objects\n */\nfunction complexGetter(defaultValue, curKey, type) {\n    return function () {\n        return getObject(this, curKey, defaultValue, type);\n    };\n}\n/**\n * Sets complex objects\n */\nfunction complexSetter(defaultValue, curKey, type) {\n    return function (newValue) {\n        getObject(this, curKey, defaultValue, type).setProperties(newValue);\n    };\n}\nfunction complexFactoryGetter(defaultValue, curKey, type) {\n    return function () {\n        let curType = type({});\n        if (this.properties.hasOwnProperty(curKey)) {\n            return this.properties[curKey];\n        }\n        else {\n            return getObject(this, curKey, defaultValue, curType);\n        }\n    };\n}\nfunction complexFactorySetter(defaultValue, curKey, type) {\n    return function (newValue) {\n        let curType = type(newValue, this);\n        getObject(this, curKey, defaultValue, curType).setProperties(newValue);\n    };\n}\nfunction complexArrayGetter(defaultValue, curKey, type) {\n    return function () {\n        if (!this.properties.hasOwnProperty(curKey)) {\n            let defCollection = getObjectArray(this, curKey, defaultValue, type, false);\n            this.properties[curKey] = defCollection;\n        }\n        let ignore = ((this.controlParent !== undefined && this.controlParent.ignoreCollectionWatch)\n            || this.ignoreCollectionWatch);\n        if (!this.properties[curKey].hasOwnProperty('push') && !ignore) {\n            ['push', 'pop'].forEach((extendFunc) => {\n                let descriptor = {\n                    value: complexArrayDefinedCallback(extendFunc, curKey, type, this.properties[curKey]).bind(this),\n                    configurable: true\n                };\n                Object.defineProperty(this.properties[curKey], extendFunc, descriptor);\n            });\n        }\n        if (!this.properties[curKey].hasOwnProperty('isComplexArray')) {\n            Object.defineProperty(this.properties[curKey], 'isComplexArray', { value: true });\n        }\n        return this.properties[curKey];\n    };\n}\nfunction complexArraySetter(defaultValue, curKey, type) {\n    return function (newValue) {\n        this.isComplexArraySetter = true;\n        let oldValueCollection = getObjectArray(this, curKey, defaultValue, type, false);\n        let newValCollection = getObjectArray(this, curKey, newValue, type, true);\n        this.isComplexArraySetter = false;\n        this.saveChanges(curKey, newValCollection, oldValueCollection);\n        this.properties[curKey] = newValCollection;\n    };\n}\nfunction complexArrayFactorySetter(defaultValue, curKey, type) {\n    return function (newValue) {\n        let oldValueCollection = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;\n        let newValCollection = getObjectArray(this, curKey, newValue, type, true, true);\n        this.saveChanges(curKey, newValCollection, oldValueCollection);\n        this.properties[curKey] = newValCollection;\n    };\n}\nfunction complexArrayFactoryGetter(defaultValue, curKey, type) {\n    return function () {\n        let curType = type({});\n        if (!this.properties.hasOwnProperty(curKey)) {\n            let defCollection = getObjectArray(this, curKey, defaultValue, curType, false);\n            this.properties[curKey] = defCollection;\n        }\n        return this.properties[curKey];\n    };\n}\nfunction complexArrayDefinedCallback(dFunc, curKey, type, prop) {\n    /* tslint:disable no-function-expression */\n    return function (...newValue) {\n        let keyString = this.propName ? this.getParentKey() + '.' + curKey + '-' : curKey + '-';\n        switch (dFunc) {\n            case 'push':\n                for (let i = 0; i < newValue.length; i++) {\n                    Array.prototype[dFunc].apply(prop, [newValue[i]]);\n                    let model = getArrayModel(keyString + (prop.length - 1), newValue[i], !this.controlParent, dFunc);\n                    this.serverDataBind(model, newValue[i], false, dFunc);\n                }\n                break;\n            case 'pop':\n                Array.prototype[dFunc].apply(prop);\n                let model = getArrayModel(keyString + prop.length, null, !this.controlParent, dFunc);\n                this.serverDataBind(model, { ejsAction: 'pop' }, false, dFunc);\n                break;\n        }\n        return prop;\n    };\n    /* tslint:enable no-function-expression */\n}\nfunction getArrayModel(keyString, value, isControlParent, arrayFunction) {\n    let modelObject = keyString;\n    if (isControlParent) {\n        modelObject = {};\n        modelObject[keyString] = value;\n        if (value && typeof value === 'object') {\n            let action = 'ejsAction';\n            modelObject[keyString][action] = arrayFunction;\n        }\n    }\n    return modelObject;\n}\n/**\n * Method used to create property. General syntax below.\n * @param  {T} defaultValue? - Specifies the default value of property.\n * ```\n * @Property('TypeScript')\n * propertyName: Type;\n * ```\n * @private\n */\nfunction Property(defaultValue) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: propertySetter(defaultValue, key),\n            get: propertyGetter(defaultValue, key),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'prop', defaultValue);\n    };\n}\n/**\n * Method used to create complex property. General syntax below.\n * @param  {T} defaultValue - Specifies the default value of property.\n * @param  {Function} type - Specifies the class type of complex object.\n * ```\n * @Complex<Type>({},Type)\n * propertyName: Type;\n * ```\n * @private\n */\nfunction Complex(defaultValue, type) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: complexSetter(defaultValue, key, type),\n            get: complexGetter(defaultValue, key, type),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'complexProp', defaultValue, type);\n    };\n}\n/**\n * Method used to create complex Factory property. General syntax below.\n * @param  {Function} defaultType - Specifies the default value of property.\n * @param  {Function} type - Specifies the class factory type of complex object.\n * ```\n * @ComplexFactory(defaultType, factoryFunction)\n * propertyName: Type1 | Type2;\n * ```\n * @private\n */\nfunction ComplexFactory(type) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: complexFactorySetter({}, key, type),\n            get: complexFactoryGetter({}, key, type),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'complexProp', {}, type);\n    };\n}\n/**\n * Method used to create complex array property. General syntax below.\n * @param  {T[]} defaultValue - Specifies the default value of property.\n * @param  {Function} type - Specifies the class type of complex object.\n * ```\n * @Collection([], Type);\n * propertyName: Type;\n * ```\n * @private\n */\nfunction Collection(defaultValue, type) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: complexArraySetter(defaultValue, key, type),\n            get: complexArrayGetter(defaultValue, key, type),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'colProp', defaultValue, type);\n    };\n}\n/**\n * Method used to create complex factory array property. General syntax below.\n * @param  {T[]} defaultType - Specifies the default type of property.\n * @param  {Function} type - Specifies the class type of complex object.\n * ```\n * @Collection([], Type);\n * propertyName: Type;\n * ```\n * @private\n */\nfunction CollectionFactory(type) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: complexArrayFactorySetter([], key, type),\n            get: complexArrayFactoryGetter([], key, type),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'colProp', {}, type);\n    };\n}\n/**\n * Method used to create event property. General syntax below.\n * @param  {Function} defaultValue? - Specifies the default value of property.\n * @param  {boolean} isComplex? - Specifies the whether it is complex object.\n * ```\n * @Event(()=>{return true;})\n * ```\n * @private\n */\nfunction Event$1() {\n    return (target, key) => {\n        let eventDescriptor = {\n            set: function (newValue) {\n                let oldValue = this.properties[key];\n                if (oldValue !== newValue) {\n                    let finalContext = getParentContext(this, key);\n                    if (isUndefined(oldValue) === false) {\n                        finalContext.context.removeEventListener(finalContext.prefix, oldValue);\n                    }\n                    finalContext.context.addEventListener(finalContext.prefix, newValue);\n                    this.properties[key] = newValue;\n                }\n            },\n            get: propertyGetter(undefined, key),\n            enumerable: true,\n            configurable: true\n        };\n        Object.defineProperty(target, key, eventDescriptor);\n        addPropertyCollection(target, key, 'event');\n    };\n}\n/**\n * NotifyPropertyChanges is triggers the call back when the property has been changed.\n *\n * ```\n *  @NotifyPropertyChanges\n * class DemoClass implements INotifyPropertyChanged {\n *\n *     @Property()\n *     property1: string;\n *\n *     dataBind: () => void;\n *\n *     constructor() { }\n *\n *     onPropertyChanged(newProp: any, oldProp: any) {\n *         // Called when property changed\n *     }\n * }\n * ```\n * @private\n */\nfunction NotifyPropertyChanges(classConstructor) {\n    /** Need to code */\n}\n/**\n * Method  used to create the builderObject for the target component.\n * @private\n */\nfunction addPropertyCollection(target, key, propertyType, defaultValue, type) {\n    if (isUndefined(target.propList)) {\n        target.propList = {\n            props: [],\n            complexProps: [],\n            colProps: [],\n            events: [],\n            propNames: [],\n            complexPropNames: [],\n            colPropNames: [],\n            eventNames: []\n        };\n    }\n    /* tslint:disable no-any */\n    target.propList[propertyType + 's'].push({\n        propertyName: key,\n        defaultValue: defaultValue,\n        type: type\n    });\n    target.propList[propertyType + 'Names'].push(key);\n    /* tslint:enable no-any */\n}\n/**\n * Returns an object containing the builder properties\n * @param {Function} component\n * @private\n */\nfunction getBuilderProperties(component) {\n    if (isUndefined(component.prototype.builderObject)) {\n        component.prototype.builderObject = {\n            properties: {}, propCollections: [], add: function () {\n                this.isPropertyArray = true;\n                this.propCollections.push(extend({}, this.properties, {}));\n            }\n        };\n        let rex = /complex/;\n        for (let key of Object.keys(component.prototype.propList)) {\n            for (let prop of component.prototype.propList[key]) {\n                if (rex.test(key)) {\n                    component.prototype.builderObject[prop.propertyName] = function (value) {\n                        let childType = {};\n                        merge(childType, getBuilderProperties(prop.type));\n                        value(childType);\n                        let tempValue;\n                        if (!childType.isPropertyArray) {\n                            tempValue = extend({}, childType.properties, {});\n                        }\n                        else {\n                            tempValue = childType.propCollections;\n                        }\n                        this.properties[prop.propertyName] = tempValue;\n                        childType.properties = {};\n                        childType.propCollections = [];\n                        childType.isPropertyArray = false;\n                        return this;\n                    };\n                }\n                else {\n                    component.prototype.builderObject[prop.propertyName] = function (value) {\n                        this.properties[prop.propertyName] = value;\n                        return this;\n                    };\n                }\n            }\n        }\n    }\n    return component.prototype.builderObject;\n}\n/**\n * Method used to create builder for the components\n * @param {any} component -specifies the target component for which builder to be created.\n * @private\n */\nfunction CreateBuilder(component) {\n    let builderFunction = function (element) {\n        this.element = element;\n        return this;\n    };\n    let instanceFunction = (element) => {\n        if (!builderFunction.prototype.hasOwnProperty('create')) {\n            builderFunction.prototype = getBuilderProperties(component);\n            builderFunction.prototype.create = function () {\n                let temp = extend({}, {}, this.properties);\n                this.properties = {};\n                return new component(temp, this.element);\n            };\n        }\n        return new builderFunction(element);\n    };\n    return instanceFunction;\n}\n/**\n * Returns parent options for the object\n * @param {Object} context\n * @param {string} prefix\n * @private\n */\nfunction getParentContext(context, prefix) {\n    if (context.hasOwnProperty('parentObj') === false) {\n        return { context: context, prefix: prefix };\n    }\n    else {\n        let curText = getValue('propName', context);\n        if (curText) {\n            prefix = curText + '-' + prefix;\n        }\n        return getParentContext(getValue('parentObj', context), prefix);\n    }\n}\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Animation_1;\n/**\n * The Animation framework provide options to animate the html DOM elements\n * ```typescript\n *   let animeObject = new Animation({\n *      name: 'SlideLeftIn',\n *      duration: 1000\n *   });\n *   animeObject.animate('#anime1');\n *   animeObject.animate('#anime2', { duration: 500 });\n * ```\n */\nlet Animation = Animation_1 = class Animation extends Base {\n    constructor(options) {\n        super(options, undefined);\n        /**\n         * @private\n         */\n        this.easing = {\n            ease: 'cubic-bezier(0.250, 0.100, 0.250, 1.000)',\n            linear: 'cubic-bezier(0.250, 0.250, 0.750, 0.750)',\n            easeIn: 'cubic-bezier(0.420, 0.000, 1.000, 1.000)',\n            easeOut: 'cubic-bezier(0.000, 0.000, 0.580, 1.000)',\n            easeInOut: 'cubic-bezier(0.420, 0.000, 0.580, 1.000)',\n            elasticInOut: 'cubic-bezier(0.5,-0.58,0.38,1.81)',\n            elasticIn: 'cubic-bezier(0.17,0.67,0.59,1.81)',\n            elasticOut: 'cubic-bezier(0.7,-0.75,0.99,1.01)'\n        };\n    }\n    /**\n     * Applies animation to the current element.\n     * @param {string | HTMLElement} element - Element which needs to be animated.\n     * @param {AnimationModel} options - Overriding default animation settings.\n     * @return {void}\n     */\n    animate(element, options) {\n        options = !options ? {} : options;\n        let model = this.getModel(options);\n        if (typeof element === 'string') {\n            let elements = Array.prototype.slice.call(selectAll(element, document));\n            for (let element of elements) {\n                model.element = element;\n                Animation_1.delayAnimation(model);\n            }\n        }\n        else {\n            model.element = element;\n            Animation_1.delayAnimation(model);\n        }\n    }\n    /**\n     * Stop the animation effect on animated element.\n     * @param {HTMLElement} element - Element which needs to be stop the animation.\n     * @param {AnimationOptions} model - Handling the animation model at stop function.\n     * @return {void}\n     */\n    static stop(element, model) {\n        element.style.animation = '';\n        element.removeAttribute('e-animate');\n        let animationId = element.getAttribute('e-animation-id');\n        if (animationId) {\n            let frameId = parseInt(animationId, 10);\n            cancelAnimationFrame(frameId);\n            element.removeAttribute('e-animation-id');\n        }\n        if (model && model.end) {\n            model.end.call(this, model);\n        }\n    }\n    /**\n     * Set delay to animation element\n     * @param {AnimationModel} model\n     * @returns {void}\n     */\n    static delayAnimation(model) {\n        if (model.delay) {\n            setTimeout(() => { Animation_1.applyAnimation(model); }, model.delay);\n        }\n        else {\n            Animation_1.applyAnimation(model);\n        }\n    }\n    /**\n     * Triggers animation\n     * @param {AnimationModel} model\n     * @returns {void}\n     */\n    static applyAnimation(model) {\n        model.timeStamp = 0;\n        let step = 0;\n        let timerId = 0;\n        let startTime = 0;\n        let prevTimeStamp = 0;\n        let duration = model.duration;\n        model.element.setAttribute('e-animate', 'true');\n        let startAnimation = (timeStamp) => {\n            try {\n                if (timeStamp) {\n                    // let step: number = model.timeStamp = timeStamp - startTime;\n                    /** phantomjs workaround for timestamp fix */\n                    prevTimeStamp = prevTimeStamp === 0 ? timeStamp : prevTimeStamp;\n                    model.timeStamp = (timeStamp + model.timeStamp) - prevTimeStamp;\n                    prevTimeStamp = timeStamp;\n                    /** phantomjs workaround end */\n                    // trigger animation begin event\n                    if (!step && model.begin) {\n                        model.begin.call(this, model);\n                    }\n                    step = step + 1;\n                    let avg = model.timeStamp / step;\n                    if (model.timeStamp < duration && model.timeStamp + avg < duration && model.element.getAttribute('e-animate')) {\n                        // apply animation effect to the current element                \n                        model.element.style.animation = model.name + ' ' + model.duration + 'ms ' + model.timingFunction;\n                        if (model.progress) {\n                            model.progress.call(this, model);\n                        }\n                        // repeat requestAnimationFrame \n                        requestAnimationFrame(startAnimation);\n                    }\n                    else {\n                        // clear requestAnimationFrame\n                        cancelAnimationFrame(timerId);\n                        model.element.removeAttribute('e-animation-id');\n                        model.element.removeAttribute('e-animate');\n                        model.element.style.animation = '';\n                        if (model.end) {\n                            model.end.call(this, model);\n                        }\n                    }\n                }\n                else {\n                    startTime = performance.now();\n                    // set initial requestAnimationFrame\n                    timerId = requestAnimationFrame(startAnimation);\n                    model.element.setAttribute('e-animation-id', timerId.toString());\n                }\n            }\n            catch (e) {\n                cancelAnimationFrame(timerId);\n                model.element.removeAttribute('e-animation-id');\n                if (model.fail) {\n                    model.fail.call(this, e);\n                }\n            }\n        };\n        startAnimation();\n    }\n    /**\n     * Returns Animation Model\n     * @param {AnimationModel} options\n     * @returns {AnimationModel}\n     */\n    getModel(options) {\n        return {\n            name: options.name || this.name,\n            delay: options.delay || this.delay,\n            duration: (options.duration !== undefined ? options.duration : this.duration),\n            begin: options.begin || this.begin,\n            end: options.end || this.end,\n            fail: options.fail || this.fail,\n            progress: options.progress || this.progress,\n            timingFunction: this.easing[options.timingFunction] ? this.easing[options.timingFunction] :\n                (options.timingFunction || this.easing[this.timingFunction])\n        };\n    }\n    /**\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        // no code needed\n    }\n    /**\n     * Returns module name as animation\n     * @private\n     */\n    getModuleName() {\n        return 'animation';\n    }\n    /**\n     * @private\n     */\n    destroy() {\n        //Override base destroy;\n    }\n};\n__decorate([\n    Property('FadeIn')\n], Animation.prototype, \"name\", void 0);\n__decorate([\n    Property(400)\n], Animation.prototype, \"duration\", void 0);\n__decorate([\n    Property('ease')\n], Animation.prototype, \"timingFunction\", void 0);\n__decorate([\n    Property(0)\n], Animation.prototype, \"delay\", void 0);\n__decorate([\n    Event$1()\n], Animation.prototype, \"progress\", void 0);\n__decorate([\n    Event$1()\n], Animation.prototype, \"begin\", void 0);\n__decorate([\n    Event$1()\n], Animation.prototype, \"end\", void 0);\n__decorate([\n    Event$1()\n], Animation.prototype, \"fail\", void 0);\nAnimation = Animation_1 = __decorate([\n    NotifyPropertyChanges\n], Animation);\n/**\n * Ripple provides material theme's wave effect when an element is clicked\n * ```html\n * <div id='ripple'></div>\n * <script>\n *   rippleEffect(document.getElementById('ripple'));\n * </script>\n * ```\n * @private\n * @param HTMLElement element - Target element\n * @param RippleOptions rippleOptions - Ripple options .\n */\nfunction rippleEffect(element, rippleOptions, done) {\n    let rippleModel = getRippleModel(rippleOptions);\n    if (rippleModel.rippleFlag === false || (rippleModel.rippleFlag === undefined && !isRippleEnabled)) {\n        return Function;\n    }\n    element.setAttribute('data-ripple', 'true');\n    EventHandler.add(element, 'mousedown', rippleHandler, { parent: element, rippleOptions: rippleModel });\n    EventHandler.add(element, 'mouseup', rippleUpHandler, { parent: element, rippleOptions: rippleModel, done: done });\n    EventHandler.add(element, 'mouseleave', rippleLeaveHandler, { parent: element, rippleOptions: rippleModel });\n    if (Browser.isPointer) {\n        EventHandler.add(element, 'transitionend', rippleLeaveHandler, { parent: element, rippleOptions: rippleModel });\n    }\n    return (() => {\n        element.removeAttribute('data-ripple');\n        EventHandler.remove(element, 'mousedown', rippleHandler);\n        EventHandler.remove(element, 'mouseup', rippleUpHandler);\n        EventHandler.remove(element, 'mouseleave', rippleLeaveHandler);\n        EventHandler.remove(element, 'transitionend', rippleLeaveHandler);\n    });\n}\nfunction getRippleModel(rippleOptions) {\n    let rippleModel = {\n        selector: rippleOptions && rippleOptions.selector ? rippleOptions.selector : null,\n        ignore: rippleOptions && rippleOptions.ignore ? rippleOptions.ignore : null,\n        rippleFlag: rippleOptions && rippleOptions.rippleFlag,\n        isCenterRipple: rippleOptions && rippleOptions.isCenterRipple,\n        duration: rippleOptions && rippleOptions.duration ? rippleOptions.duration : 350\n    };\n    return rippleModel;\n}\n/**\n * Handler for ripple event\n * @param {MouseEvent} e\n * @returns {void}\n * @private\n */\nfunction rippleHandler(e) {\n    let target = (e.target);\n    let selector = this.rippleOptions.selector;\n    let element = selector ? closest(target, selector) : target;\n    if (!element || (this.rippleOptions && closest(target, this.rippleOptions.ignore))) {\n        return;\n    }\n    let offset = element.getBoundingClientRect();\n    let offsetX = e.pageX - document.body.scrollLeft;\n    let offsetY = e.pageY - ((!document.body.scrollTop && document.documentElement) ?\n        document.documentElement.scrollTop : document.body.scrollTop);\n    let pageX = Math.max(Math.abs(offsetX - offset.left), Math.abs(offsetX - offset.right));\n    let pageY = Math.max(Math.abs(offsetY - offset.top), Math.abs(offsetY - offset.bottom));\n    let radius = Math.sqrt(pageX * pageX + pageY * pageY);\n    let diameter = radius * 2 + 'px';\n    let x = offsetX - offset.left - radius;\n    let y = offsetY - offset.top - radius;\n    if (this.rippleOptions && this.rippleOptions.isCenterRipple) {\n        x = 0;\n        y = 0;\n        diameter = '100%';\n    }\n    element.classList.add('e-ripple');\n    let duration = this.rippleOptions.duration.toString();\n    let styles = 'width: ' + diameter + ';height: ' + diameter + ';left: ' + x + 'px;top: ' + y + 'px;' +\n        'transition-duration: ' + duration + 'ms;';\n    let rippleElement = createElement('div', { className: 'e-ripple-element', styles: styles });\n    element.appendChild(rippleElement);\n    window.getComputedStyle(rippleElement).getPropertyValue('opacity');\n    rippleElement.style.transform = 'scale(1)';\n    if (element !== this.parent) {\n        EventHandler.add(element, 'mouseleave', rippleLeaveHandler, { parent: this.parent, rippleOptions: this.rippleOptions });\n    }\n}\n/**\n * Handler for ripple element mouse up event\n * @param {MouseEvent} e\n * @returns {void}\n * @private\n */\nfunction rippleUpHandler(e) {\n    removeRipple(e, this);\n}\n/**\n * Handler for ripple element mouse move event\n * @param {MouseEvent} e\n * @returns {void}\n * @private\n */\nfunction rippleLeaveHandler(e) {\n    removeRipple(e, this);\n}\n/**\n * Handler for removing ripple element\n * @param {MouseEvent} e\n * @param {rippleArgs} eventArgs\n * @returns {void}\n * @private\n */\nfunction removeRipple(e, eventArgs) {\n    let duration = eventArgs.rippleOptions.duration;\n    let target = (e.target);\n    let selector = eventArgs.rippleOptions.selector;\n    let element = selector ? closest(target, selector) : target;\n    if (!element || (element && element.className.indexOf('e-ripple') === -1)) {\n        return;\n    }\n    let rippleElements = selectAll('.e-ripple-element', element);\n    let rippleElement = rippleElements[rippleElements.length - 1];\n    if (rippleElement) {\n        rippleElement.style.opacity = '0.5';\n    }\n    if (eventArgs.parent !== element) {\n        EventHandler.remove(element, 'mouseleave', rippleLeaveHandler);\n    }\n    /* tslint:disable:align */\n    setTimeout(() => {\n        if (rippleElement && rippleElement.parentNode) {\n            rippleElement.parentNode.removeChild(rippleElement);\n        }\n        if (!element.getElementsByClassName('e-ripple-element').length) {\n            element.classList.remove('e-ripple');\n        }\n        if (eventArgs.done) {\n            eventArgs.done(e);\n        }\n    }, duration);\n}\nlet isRippleEnabled = false;\n/**\n * Animation Module provides support to enable ripple effect functionality to Essential JS 2 components.\n * @param {boolean} isRipple Specifies the boolean value to enable or disable ripple effect.\n * @returns {boolean}\n */\nfunction enableRipple(isRipple) {\n    isRippleEnabled = isRipple;\n    return isRippleEnabled;\n}\n\n/**\n * Module loading operations\n */\nconst MODULE_SUFFIX = 'Module';\nclass ModuleLoader {\n    constructor(parent) {\n        this.loadedModules = [];\n        this.parent = parent;\n    }\n    ;\n    /**\n     * Inject required modules in component library\n     * @return {void}\n     * @param {ModuleDeclaration[]} requiredModules - Array of modules to be required\n     * @param {Function[]} moduleList - Array of modules to be injected from sample side\n     */\n    inject(requiredModules, moduleList) {\n        let reqLength = requiredModules.length;\n        if (reqLength === 0) {\n            this.clean();\n            return;\n        }\n        if (this.loadedModules.length) {\n            this.clearUnusedModule(requiredModules);\n        }\n        for (let i = 0; i < reqLength; i++) {\n            let modl = requiredModules[i];\n            for (let module of moduleList) {\n                let modName = modl.member;\n                if (module.prototype.getModuleName() === modl.member && !this.isModuleLoaded(modName)) {\n                    let moduleObject = createInstance(module, modl.args);\n                    let memberName = this.getMemberName(modName);\n                    if (modl.isProperty) {\n                        setValue(memberName, module, this.parent);\n                    }\n                    else {\n                        setValue(memberName, moduleObject, this.parent);\n                    }\n                    let loadedModule = modl;\n                    loadedModule.member = memberName;\n                    this.loadedModules.push(loadedModule);\n                }\n            }\n        }\n    }\n    /**\n     * To remove the created object while destroying the control\n     * @return {void}\n     */\n    clean() {\n        for (let modules of this.loadedModules) {\n            if (!modules.isProperty) {\n                getValue(modules.member, this.parent).destroy();\n            }\n        }\n        this.loadedModules = [];\n    }\n    /**\n     * Removes all unused modules\n     * @param {ModuleDeclaration[]} moduleList\n     * @returns {void}\n     */\n    clearUnusedModule(moduleList) {\n        let usedModules = moduleList.map((arg) => { return this.getMemberName(arg.member); });\n        let removableModule = this.loadedModules.filter((module) => {\n            return usedModules.indexOf(module.member) === -1;\n        });\n        for (let mod of removableModule) {\n            if (!mod.isProperty) {\n                getValue(mod.member, this.parent).destroy();\n            }\n            this.loadedModules.splice(this.loadedModules.indexOf(mod), 1);\n            deleteObject(this.parent, mod.member);\n        }\n    }\n    /**\n     * To get the name of the member.\n     * @param {string} name\n     * @returns {string}\n     */\n    getMemberName(name) {\n        return name[0].toLowerCase() + name.substring(1) + MODULE_SUFFIX;\n    }\n    /**\n     * Returns boolean based on whether the module specified is loaded or not\n     * @param {string} modName\n     * @returns {boolean}\n     */\n    isModuleLoaded(modName) {\n        for (let mod of this.loadedModules) {\n            if (mod.member === this.getMemberName(modName)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * To detect the changes for inner properties.\n * @private\n */\nclass ChildProperty {\n    constructor(parent, propName, defaultValue, isArray) {\n        this.isComplexArraySetter = false;\n        this.properties = {};\n        this.changedProperties = {};\n        this.childChangedProperties = {};\n        this.oldProperties = {};\n        // tslint:disable-next-line:no-empty\n        this.finalUpdate = () => { };\n        this.callChildDataBind = getValue('callChildDataBind', Base);\n        this.parentObj = parent;\n        this.controlParent = this.parentObj.controlParent || this.parentObj;\n        this.propName = propName;\n        this.isParentArray = isArray;\n        this.setProperties(defaultValue, true);\n    }\n    /**\n     * Updates the property changes\n     * @param {boolean} val\n     * @param {string} propName\n     * @returns {void}\n     */\n    updateChange(val, propName) {\n        if (val === true) {\n            this.parentObj.childChangedProperties[propName] = val;\n        }\n        else {\n            delete this.parentObj.childChangedProperties[propName];\n        }\n        if (this.parentObj.updateChange) {\n            this.parentObj.updateChange(val, this.parentObj.propName);\n        }\n    }\n    /**\n     * Updates time out duration\n     */\n    updateTimeOut() {\n        if (this.parentObj.updateTimeOut) {\n            this.parentObj.finalUpdate();\n            this.parentObj.updateTimeOut();\n        }\n        else {\n            let changeTime = setTimeout(this.parentObj.dataBind.bind(this.parentObj));\n            let clearUpdate = () => {\n                clearTimeout(changeTime);\n            };\n            this.finalUpdate = clearUpdate;\n        }\n    }\n    /**\n     * Clears changed properties\n     */\n    clearChanges() {\n        this.finalUpdate();\n        this.updateChange(false, this.propName);\n        this.oldProperties = {};\n        this.changedProperties = {};\n    }\n    /**\n     * Set property changes\n     * @param {Object} prop\n     * @param {boolean} muteOnChange\n     * {void}\n     */\n    setProperties(prop, muteOnChange) {\n        if (muteOnChange === true) {\n            merge(this, prop);\n            this.updateChange(false, this.propName);\n            this.clearChanges();\n        }\n        else {\n            merge(this, prop);\n        }\n    }\n    /**\n     * Binds data\n     */\n    dataBind() {\n        this.callChildDataBind(this.childChangedProperties, this);\n        if (this.isParentArray) {\n            let curIndex = this.parentObj[this.propName].indexOf(this);\n            if (Object.keys(this.changedProperties).length) {\n                setValue(this.propName + '.' + curIndex, this.changedProperties, this.parentObj.changedProperties);\n                setValue(this.propName + '.' + curIndex, this.oldProperties, this.parentObj.oldProperties);\n            }\n        }\n        else {\n            this.parentObj.changedProperties[this.propName] = this.changedProperties;\n            this.parentObj.oldProperties[this.propName] = this.oldProperties;\n        }\n        this.clearChanges();\n    }\n    /**\n     * Saves changes to newer values\n     * @param {string} key\n     * @param {Object} newValue\n     * @param {Object} oldValue\n     * @returns {void}\n     */\n    saveChanges(key, newValue, oldValue, restrictServerDataBind) {\n        if (this.controlParent.isProtectedOnChange) {\n            return;\n        }\n        if (!restrictServerDataBind) {\n            this.serverDataBind(key, newValue, true);\n        }\n        this.oldProperties[key] = oldValue;\n        this.changedProperties[key] = newValue;\n        this.updateChange(true, this.propName);\n        this.finalUpdate();\n        this.updateTimeOut();\n    }\n    serverDataBind(key, value, isSaveChanges, action) {\n        if (isBlazor() && !this.parentObj.isComplexArraySetter) {\n            // tslint:disable-next-line:no-any\n            let parent;\n            let newChanges = {};\n            let parentKey = isSaveChanges ? this.getParentKey(true) + '.' + key : key;\n            /* istanbul ignore else  */\n            if (parentKey.indexOf('.') !== -1) {\n                let complexKeys = parentKey.split('.');\n                parent = newChanges;\n                for (let i = 0; i < complexKeys.length; i++) {\n                    let isFinal = i === complexKeys.length - 1;\n                    parent[complexKeys[i]] = isFinal ? value : {};\n                    parent = isFinal ? parent : parent[complexKeys[i]];\n                }\n            }\n            else {\n                newChanges[parentKey] = {};\n                parent = newChanges[parentKey];\n                newChanges[parentKey][key] = value;\n            }\n            /* istanbul ignore next */\n            if (this.isParentArray) {\n                let actionProperty = 'ejsAction';\n                parent[actionProperty] = action ? action : 'none';\n            }\n            this.controlParent.serverDataBind(newChanges);\n        }\n    }\n    getParentKey(isSaveChanges) {\n        // tslint:disable-next-line:no-any\n        let index = '';\n        let propName = this.propName;\n        /* istanbul ignore next */\n        if (this.isParentArray) {\n            index = this.parentObj[this.propName].indexOf(this);\n            let valueLength = this.parentObj[this.propName].length;\n            valueLength = isSaveChanges ? valueLength : (valueLength > 0 ? valueLength - 1 : 0);\n            index = index !== -1 ? '-' + index : '-' + valueLength;\n            propName = propName + index;\n        }\n        if (this.controlParent !== this.parentObj) {\n            propName = this.parentObj.getParentKey() + '.' + this.propName + index;\n        }\n        return propName;\n    }\n}\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet componentCount = 0;\nlet lastPageID;\nlet lastHistoryLen = 0;\n/**\n * Base class for all Essential JavaScript components\n */\nlet Component = class Component extends Base {\n    /**\n     * Initialize the constructor for component base\n     */\n    constructor(options, selector) {\n        super(options, selector);\n        this.randomId = uniqueID();\n        /**\n         * string template option for Blazor template rendering\n         * @private\n         */\n        this.isStringTemplate = false;\n        this.needsID = false;\n        this.isReactHybrid = false;\n        if (isNullOrUndefined(this.enableRtl)) {\n            this.setProperties({ 'enableRtl': rightToLeft }, true);\n        }\n        if (isNullOrUndefined(this.locale)) {\n            this.setProperties({ 'locale': defaultCulture }, true);\n        }\n        this.moduleLoader = new ModuleLoader(this);\n        this.localObserver = new Observer(this);\n        // tslint:disable-next-line:no-function-constructor-with-string-args\n        onIntlChange.on('notifyExternalChange', this.detectFunction, this, this.randomId);\n        if (!isUndefined(selector)) {\n            this.appendTo();\n        }\n    }\n    requiredModules() {\n        return [];\n    }\n    ;\n    /**\n     * Destroys the sub modules while destroying the widget\n     */\n    destroy() {\n        if (this.isDestroyed) {\n            return;\n        }\n        if (this.enablePersistence) {\n            this.setPersistData();\n        }\n        this.localObserver.destroy();\n        if (this.refreshing) {\n            return;\n        }\n        removeClass([this.element], ['e-control']);\n        this.trigger('destroyed', { cancel: false });\n        super.destroy();\n        this.moduleLoader.clean();\n        onIntlChange.off('notifyExternalChange', this.detectFunction, this.randomId);\n    }\n    /**\n     * Applies all the pending property changes and render the component again.\n     */\n    refresh() {\n        this.refreshing = true;\n        this.moduleLoader.clean();\n        this.destroy();\n        this.clearChanges();\n        this.localObserver = new Observer(this);\n        this.preRender();\n        this.injectModules();\n        this.render();\n        this.refreshing = false;\n    }\n    accessMount() {\n        if (this.mount && !this.isReactHybrid) {\n            this.mount();\n        }\n    }\n    /**\n     * Returns the route element of the component\n     */\n    getRootElement() {\n        if (this.isReactHybrid) {\n            return this.actualElement;\n        }\n        else {\n            return this.element;\n        }\n    }\n    /**\n     * Appends the control within the given HTML element\n     * @param {string | HTMLElement} selector - Target element where control needs to be appended\n     */\n    appendTo(selector) {\n        if (!isNullOrUndefined(selector) && typeof (selector) === 'string') {\n            this.element = document.querySelector(selector);\n        }\n        else if (!isNullOrUndefined(selector)) {\n            this.element = selector;\n        }\n        if (!isNullOrUndefined(this.element)) {\n            let moduleClass = 'e-' + this.getModuleName().toLowerCase();\n            addClass([this.element], ['e-control', moduleClass]);\n            this.isProtectedOnChange = false;\n            if (this.needsID && !this.element.id) {\n                this.element.id = this.getUniqueID(this.getModuleName());\n            }\n            if (this.enablePersistence) {\n                this.mergePersistData();\n                window.addEventListener('unload', this.setPersistData.bind(this));\n            }\n            let inst = getValue('ej2_instances', this.element);\n            if (!inst || inst.indexOf(this) === -1) {\n                super.addInstance();\n            }\n            this.preRender();\n            this.injectModules();\n            this.render();\n            if (!this.mount) {\n                this.trigger('created');\n            }\n            else {\n                this.accessMount();\n            }\n        }\n    }\n    /**\n     * It is used to process the post rendering functionalities to a component.\n     */\n    renderComplete(wrapperElement) {\n        if (isBlazor()) {\n            let sfBlazor = 'sfBlazor';\n            // tslint:disable-next-line:no-any\n            window[sfBlazor].renderComplete(this.element, wrapperElement);\n        }\n        this.isRendered = true;\n    }\n    /**\n     * When invoked, applies the pending property changes immediately to the component.\n     */\n    dataBind() {\n        this.injectModules();\n        super.dataBind();\n    }\n    ;\n    /**\n     * Attach one or more  event handler to the current component context.\n     * It is used for internal handling event internally within the component only.\n     * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.\n     * @param {Function} handler - optional parameter Specifies the handler to run when the event occurs\n     * @param {Object} context - optional parameter Specifies the context to be bind in the handler.\n     * @return {void}\n     * @private\n     */\n    on(event, handler, context) {\n        if (typeof event === 'string') {\n            this.localObserver.on(event, handler, context);\n        }\n        else {\n            for (let arg of event) {\n                this.localObserver.on(arg.event, arg.handler, arg.context);\n            }\n        }\n    }\n    /**\n     * To remove one or more event handler that has been attached with the on() method.\n     * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.\n     * @param {Function} handler - optional parameter Specifies the function to run when the event occurs\n     * @return {void}\n     * @private\n     */\n    off(event, handler) {\n        if (typeof event === 'string') {\n            this.localObserver.off(event, handler);\n        }\n        else {\n            for (let arg of event) {\n                this.localObserver.off(arg.event, arg.handler);\n            }\n        }\n    }\n    /**\n     * To notify the handlers in the specified event.\n     * @param {string} property - Specifies the event to be notify.\n     * @param {Object} argument - Additional parameters to pass while calling the handler.\n     * @return {void}\n     * @private\n     */\n    notify(property, argument) {\n        if (this.isDestroyed !== true) {\n            this.localObserver.notify(property, argument);\n        }\n    }\n    /**\n     * Get injected modules\n     * @private\n     */\n    getInjectedModules() {\n        return this.injectedModules;\n    }\n    ;\n    /**\n     * Dynamically injects the required modules to the component.\n     */\n    static Inject(...moduleList) {\n        if (!this.prototype.injectedModules) {\n            this.prototype.injectedModules = [];\n        }\n        for (let i = 0; i < moduleList.length; i++) {\n            if (this.prototype.injectedModules.indexOf(moduleList[i]) === -1) {\n                this.prototype.injectedModules.push(moduleList[i]);\n            }\n        }\n    }\n    /**\n     * This is a instance method to create an element.\n     * @private\n     */\n    //tslint:disable:no-any\n    createElement(tagName, prop, isVDOM) {\n        if (isVDOM && this.isReactHybrid) {\n            if (prop) {\n                prop = {};\n            }\n            prop['data-id'] = getRandomId();\n            return VirtualDOM.createElement(tagName, prop);\n        }\n        else {\n            return createElement(tagName, prop);\n        }\n    }\n    /**\n     *\n     * @param handler - handler to be triggered after state Updated.\n     * @param argument - Arguments to be passed to caller.\n     * @private\n     */\n    //tslint:disable:no-any\n    triggerStateChange(handler, argument) {\n        if (this.isReactHybrid) {\n            //tslint:disable:no-any\n            this.setState();\n            this.currentContext = { calls: handler, args: argument };\n        }\n    }\n    // tslint: enable: no-any\n    injectModules() {\n        if (this.injectedModules && this.injectedModules.length) {\n            this.moduleLoader.inject(this.requiredModules(), this.injectedModules);\n        }\n    }\n    detectFunction(args) {\n        let prop = Object.keys(args);\n        if (prop.length) {\n            this[prop[0]] = args[prop[0]];\n        }\n    }\n    mergePersistData() {\n        let data = window.localStorage.getItem(this.getModuleName() + this.element.id);\n        if (!(isNullOrUndefined(data) || (data === ''))) {\n            this.setProperties(JSON.parse(data), true);\n        }\n    }\n    setPersistData() {\n        if (!this.isDestroyed) {\n            window.localStorage.setItem(this.getModuleName() + this.element.id, this.getPersistData());\n        }\n    }\n    //tslint:disable-next-line\n    clearTemplate(templateName, index) {\n        //No Code\n    }\n    getUniqueID(definedName) {\n        if (this.isHistoryChanged()) {\n            componentCount = 0;\n        }\n        lastPageID = this.pageID(location.href);\n        lastHistoryLen = history.length;\n        return definedName + '_' + lastPageID + '_' + componentCount++;\n    }\n    pageID(url) {\n        let hash = 0;\n        if (url.length === 0) {\n            return hash;\n        }\n        for (let i = 0; i < url.length; i++) {\n            let char = url.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32bit integer\n        }\n        return Math.abs(hash);\n    }\n    isHistoryChanged() {\n        return lastPageID !== this.pageID(location.href) || lastHistoryLen !== history.length;\n    }\n    addOnPersist(options) {\n        let persistObj = {};\n        for (let key of options) {\n            let objValue;\n            objValue = getValue(key, this);\n            if (!isUndefined(objValue)) {\n                setValue(key, this.getActualProperties(objValue), persistObj);\n            }\n        }\n        return JSON.stringify(persistObj, (key, value) => {\n            return this.getActualProperties(value);\n        });\n    }\n    getActualProperties(obj) {\n        if (obj instanceof ChildProperty) {\n            return getValue('properties', obj);\n        }\n        else {\n            return obj;\n        }\n    }\n    ignoreOnPersist(options) {\n        return JSON.stringify(this.iterateJsonProperties(this.properties, options));\n    }\n    iterateJsonProperties(obj, ignoreList) {\n        let newObj = {};\n        for (let key of Object.keys(obj)) {\n            if (ignoreList.indexOf(key) === -1) {\n                // tslint:disable-next-line:no-any\n                let value = obj[key];\n                if (typeof value === 'object' && !(value instanceof Array)) {\n                    let newList = ignoreList.filter((str) => {\n                        return new RegExp(key + '.').test(str);\n                    }).map((str) => {\n                        return str.replace(key + '.', '');\n                    });\n                    newObj[key] = this.iterateJsonProperties(this.getActualProperties(value), newList);\n                }\n                else {\n                    newObj[key] = value;\n                }\n            }\n        }\n        return newObj;\n    }\n};\n__decorate$1([\n    Property(false)\n], Component.prototype, \"enablePersistence\", void 0);\n__decorate$1([\n    Property()\n], Component.prototype, \"enableRtl\", void 0);\n__decorate$1([\n    Property()\n], Component.prototype, \"locale\", void 0);\nComponent = __decorate$1([\n    NotifyPropertyChanges\n], Component);\n//Function handling for page navigation detection \n/* istanbul ignore next */\n(() => {\n    if (typeof window !== 'undefined') {\n        window.addEventListener('popstate', \n        /* istanbul ignore next */\n        () => {\n            componentCount = 0;\n        });\n    }\n})();\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Draggable_1;\nconst defaultPosition = { left: 0, top: 0, bottom: 0, right: 0 };\nconst isDraggedObject = { isDragged: false };\n/**\n * Specifies the position coordinates\n */\nclass Position extends ChildProperty {\n}\n__decorate$2([\n    Property(0)\n], Position.prototype, \"left\", void 0);\n__decorate$2([\n    Property(0)\n], Position.prototype, \"top\", void 0);\n/**\n * Draggable Module provides support to enable draggable functionality in Dom Elements.\n * ```html\n * <div id='drag'>Draggable</div>\n * <script>\n * var ele = document.getElementById('drag');\n * var drag:Draggable = new Draggable(ele,{\n *     clone:false,\n *     drag: function(e) {\n *      //drag handler code.\n *      },\n *     handle:'.class'\n * });\n * </script>\n * ```\n */\nlet Draggable = Draggable_1 = class Draggable extends Base {\n    constructor(element, options) {\n        super(options, element);\n        this.dragLimit = Draggable_1.getDefaultPosition();\n        this.borderWidth = Draggable_1.getDefaultPosition();\n        this.padding = Draggable_1.getDefaultPosition();\n        this.diffX = 0;\n        this.prevLeft = 0;\n        this.prevTop = 0;\n        this.dragProcessStarted = false;\n        /* tslint:disable no-any */\n        this.tapHoldTimer = 0;\n        this.externalInitialize = false;\n        this.diffY = 0;\n        this.parentScrollX = 0;\n        this.parentScrollY = 0;\n        this.droppables = {};\n        this.bind();\n    }\n    bind() {\n        this.toggleEvents();\n        if (Browser.isIE) {\n            addClass([this.element], 'e-block-touch');\n        }\n        this.droppables[this.scope] = {};\n    }\n    static getDefaultPosition() {\n        return extend({}, defaultPosition);\n    }\n    toggleEvents(isUnWire) {\n        let ele;\n        if (!isUndefined(this.handle)) {\n            ele = select(this.handle, this.element);\n        }\n        let handler = (this.enableTapHold && Browser.isDevice && Browser.isTouch) ? this.mobileInitialize : this.initialize;\n        if (isUnWire) {\n            EventHandler.remove(ele || this.element, Browser.touchStartEvent, handler);\n        }\n        else {\n            EventHandler.add(ele || this.element, Browser.touchStartEvent, handler, this);\n        }\n    }\n    /* istanbul ignore next */\n    mobileInitialize(evt) {\n        let target = evt.currentTarget;\n        this.tapHoldTimer = setTimeout(() => {\n            this.externalInitialize = true;\n            this.removeTapholdTimer();\n            this.initialize(evt, target);\n        }, this.tapHoldThreshold);\n        EventHandler.add(document, Browser.touchMoveEvent, this.removeTapholdTimer, this);\n        EventHandler.add(document, Browser.touchEndEvent, this.removeTapholdTimer, this);\n    }\n    /* istanbul ignore next */\n    removeTapholdTimer() {\n        clearTimeout(this.tapHoldTimer);\n        EventHandler.remove(document, Browser.touchMoveEvent, this.removeTapholdTimer);\n        EventHandler.remove(document, Browser.touchEndEvent, this.removeTapholdTimer);\n    }\n    /* istanbul ignore next */\n    getScrollableParent(element, axis) {\n        let scroll = { 'vertical': 'scrollHeight', 'horizontal': 'scrollWidth' };\n        let client = { 'vertical': 'clientHeight', 'horizontal': 'clientWidth' };\n        if (isNullOrUndefined(element)) {\n            return null;\n        }\n        if (element[scroll[axis]] > element[client[axis]]) {\n            if (axis === 'vertical' ? element.scrollTop > 0 : element.scrollLeft > 0) {\n                if (axis === 'vertical') {\n                    this.parentScrollY = this.parentScrollY +\n                        (this.parentScrollY === 0 ? element.scrollTop : element.scrollTop - this.parentScrollY);\n                }\n                else {\n                    this.parentScrollX = this.parentScrollX +\n                        (this.parentScrollX === 0 ? element.scrollLeft : element.scrollLeft - this.parentScrollX);\n                }\n                if (!isNullOrUndefined(element)) {\n                    return this.getScrollableParent(element.parentNode, axis);\n                }\n                else {\n                    return element;\n                }\n            }\n            else {\n                return this.getScrollableParent(element.parentNode, axis);\n            }\n        }\n        else {\n            return this.getScrollableParent(element.parentNode, axis);\n        }\n    }\n    getScrollableValues() {\n        this.parentScrollX = 0;\n        this.parentScrollY = 0;\n        let isModalDialog = this.element.classList.contains('e-dialog') && this.element.classList.contains('e-dlg-modal');\n        let verticalScrollParent = this.getScrollableParent(this.element.parentNode, 'vertical');\n        let horizontalScrollParent = this.getScrollableParent(this.element.parentNode, 'horizontal');\n    }\n    initialize(evt, curTarget) {\n        this.currentStateTarget = evt.target;\n        if (this.isDragStarted()) {\n            return;\n        }\n        else {\n            this.isDragStarted(true);\n            this.externalInitialize = false;\n        }\n        this.target = (evt.currentTarget || curTarget);\n        this.dragProcessStarted = false;\n        if (this.abort) {\n            /* tslint:disable no-any */\n            let abortSelectors = this.abort;\n            if (typeof abortSelectors === 'string') {\n                abortSelectors = [abortSelectors];\n            }\n            for (let i = 0; i < abortSelectors.length; i++) {\n                if (!isNullOrUndefined(closest(evt.target, abortSelectors[i]))) {\n                    /* istanbul ignore next */\n                    if (this.isDragStarted()) {\n                        this.isDragStarted(true);\n                    }\n                    return;\n                }\n            }\n        }\n        if (this.preventDefault && !isUndefined(evt.changedTouches)) {\n            evt.preventDefault();\n        }\n        this.element.setAttribute('aria-grabbed', 'true');\n        let intCoord = this.getCoordinates(evt);\n        this.initialPosition = { x: intCoord.pageX, y: intCoord.pageY };\n        if (!this.clone) {\n            let pos = this.element.getBoundingClientRect();\n            this.getScrollableValues();\n            if (evt.clientX === evt.pageX) {\n                this.parentScrollX = 0;\n            }\n            if (evt.clientY === evt.pageY) {\n                this.parentScrollY = 0;\n            }\n            this.relativeXPosition = intCoord.pageX - (pos.left + this.parentScrollX);\n            this.relativeYPosition = intCoord.pageY - (pos.top + this.parentScrollY);\n        }\n        if (this.externalInitialize) {\n            this.intDragStart(evt);\n        }\n        else {\n            EventHandler.add(document, Browser.touchMoveEvent, this.intDragStart, this);\n            EventHandler.add(document, Browser.touchEndEvent, this.intDestroy, this);\n        }\n        this.toggleEvents(true);\n        document.body.classList.add('e-prevent-select');\n        this.externalInitialize = false;\n        EventHandler.trigger(document.documentElement, Browser.touchStartEvent, evt);\n    }\n    intDragStart(evt) {\n        this.removeTapholdTimer();\n        let isChangeTouch = !isUndefined(evt.changedTouches);\n        if (isChangeTouch && (evt.changedTouches.length !== 1)) {\n            return;\n        }\n        if (isChangeTouch) {\n            evt.preventDefault();\n        }\n        let intCordinate = this.getCoordinates(evt);\n        let pos;\n        let styleProp = getComputedStyle(this.element);\n        this.margin = {\n            left: parseInt(styleProp.marginLeft, 10),\n            top: parseInt(styleProp.marginTop, 10),\n            right: parseInt(styleProp.marginRight, 10),\n            bottom: parseInt(styleProp.marginBottom, 10),\n        };\n        let element = this.element;\n        if (this.clone && this.dragTarget) {\n            let intClosest = closest(evt.target, this.dragTarget);\n            if (!isNullOrUndefined(intClosest)) {\n                element = intClosest;\n            }\n        }\n        this.offset = this.calculateParentPosition(element);\n        this.position = this.getMousePosition(evt, this.isDragScroll);\n        let x = this.initialPosition.x - intCordinate.pageX;\n        let y = this.initialPosition.y - intCordinate.pageY;\n        let distance = Math.sqrt((x * x) + (y * y));\n        if ((distance >= this.distance || this.externalInitialize)) {\n            let ele = this.getHelperElement(evt);\n            if (!ele || isNullOrUndefined(ele)) {\n                return;\n            }\n            let dragTargetElement = this.helperElement = ele;\n            this.parentClientRect = this.calculateParentPosition(dragTargetElement.offsetParent);\n            if (this.dragStart) {\n                let curTarget = this.getProperTargetElement(evt);\n                let args = {\n                    event: evt,\n                    element: element,\n                    target: curTarget,\n                    bindEvents: isBlazor() ? this.bindDragEvents.bind(this) : null,\n                    dragElement: dragTargetElement\n                };\n                this.trigger('dragStart', args);\n            }\n            if (this.dragArea) {\n                this.setDragArea();\n            }\n            else {\n                this.dragLimit = { left: 0, right: 0, bottom: 0, top: 0 };\n                this.borderWidth = { top: 0, left: 0 };\n            }\n            pos = { left: this.position.left - this.parentClientRect.left, top: this.position.top - this.parentClientRect.top };\n            if (this.clone && !this.enableTailMode) {\n                this.diffX = this.position.left - this.offset.left;\n                this.diffY = this.position.top - this.offset.top;\n            }\n            this.getScrollableValues();\n            let posValue = this.getProcessedPositionValue({\n                top: (pos.top - this.diffY) + 'px',\n                left: (pos.left - this.diffX) + 'px'\n            });\n            this.dragElePosition = { top: pos.top, left: pos.left };\n            setStyleAttribute(dragTargetElement, this.getDragPosition({ position: 'absolute', left: posValue.left, top: posValue.top }));\n            EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);\n            EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);\n            if (!isBlazor()) {\n                this.bindDragEvents(dragTargetElement);\n            }\n        }\n    }\n    bindDragEvents(dragTargetElement) {\n        if (isVisible(dragTargetElement)) {\n            EventHandler.add(document, Browser.touchMoveEvent, this.intDrag, this);\n            EventHandler.add(document, Browser.touchEndEvent, this.intDragStop, this);\n            this.setGlobalDroppables(false, this.element, dragTargetElement);\n        }\n        else {\n            this.toggleEvents();\n            document.body.classList.remove('e-prevent-select');\n        }\n    }\n    elementInViewport(el) {\n        this.top = el.offsetTop;\n        this.left = el.offsetLeft;\n        this.width = el.offsetWidth;\n        this.height = el.offsetHeight;\n        while (el.offsetParent) {\n            el = el.offsetParent;\n            this.top += el.offsetTop;\n            this.left += el.offsetLeft;\n        }\n        return (this.top >= window.pageYOffset &&\n            this.left >= window.pageXOffset &&\n            (this.top + this.height) <= (window.pageYOffset + window.innerHeight) &&\n            (this.left + this.width) <= (window.pageXOffset + window.innerWidth));\n    }\n    getProcessedPositionValue(value) {\n        if (this.queryPositionInfo) {\n            return this.queryPositionInfo(value);\n        }\n        return value;\n    }\n    calculateParentPosition(ele) {\n        if (isNullOrUndefined(ele)) {\n            return { left: 0, top: 0 };\n        }\n        let rect = ele.getBoundingClientRect();\n        let style = getComputedStyle(ele);\n        return {\n            left: (rect.left + window.pageXOffset) - parseInt(style.marginLeft, 10),\n            top: (rect.top + window.pageYOffset) - parseInt(style.marginTop, 10)\n        };\n    }\n    // tslint:disable-next-line:max-func-body-length\n    intDrag(evt) {\n        if (!isUndefined(evt.changedTouches) && (evt.changedTouches.length !== 1)) {\n            return;\n        }\n        let left;\n        let top;\n        this.position = this.getMousePosition(evt, this.isDragScroll);\n        let docHeight = this.getDocumentWidthHeight('Height');\n        if (docHeight < this.position.top) {\n            this.position.top = docHeight;\n        }\n        let docWidth = this.getDocumentWidthHeight('Width');\n        if (docWidth < this.position.left) {\n            this.position.left = docWidth;\n        }\n        if (this.drag) {\n            let curTarget = this.getProperTargetElement(evt);\n            this.trigger('drag', { event: evt, element: this.element, target: curTarget });\n        }\n        let eleObj = this.checkTargetElement(evt);\n        if (eleObj.target && eleObj.instance) {\n            /* tslint:disable no-any */\n            let flag = true;\n            if (this.hoverObject) {\n                if (this.hoverObject.instance !== eleObj.instance) {\n                    this.triggerOutFunction(evt, eleObj);\n                }\n                else {\n                    flag = false;\n                }\n            }\n            if (flag) {\n                eleObj.instance.dragData[this.scope] = this.droppables[this.scope];\n                eleObj.instance.intOver(evt, eleObj.target);\n                this.hoverObject = eleObj;\n            }\n        }\n        else if (this.hoverObject) {\n            this.triggerOutFunction(evt, eleObj);\n        }\n        let helperElement = this.droppables[this.scope].helper;\n        this.parentClientRect = this.calculateParentPosition(this.helperElement.offsetParent);\n        let tLeft = this.parentClientRect.left;\n        let tTop = this.parentClientRect.top;\n        let intCoord = this.getCoordinates(evt);\n        let pagex = intCoord.pageX;\n        let pagey = intCoord.pageY;\n        let dLeft = this.position.left - this.diffX;\n        let dTop = this.position.top - this.diffY;\n        if (this.dragArea) {\n            let styles = getComputedStyle(helperElement);\n            if (this.pageX !== pagex || this.skipDistanceCheck) {\n                let helperWidth = helperElement.offsetWidth + (parseFloat(styles.marginLeft)\n                    + parseFloat(styles.marginRight));\n                if (this.dragLimit.left > dLeft && dLeft > 0) {\n                    left = this.dragLimit.left;\n                }\n                else if (this.dragLimit.right + window.pageXOffset < dLeft + helperWidth && dLeft > 0) {\n                    left = dLeft - (dLeft - this.dragLimit.right) + window.pageXOffset - helperWidth;\n                }\n                else {\n                    left = dLeft < 0 ? this.dragLimit.left : dLeft;\n                }\n            }\n            if (this.pageY !== pagey || this.skipDistanceCheck) {\n                let helperHeight = helperElement.offsetHeight + (parseFloat(styles.marginTop)\n                    + parseFloat(styles.marginBottom));\n                if (this.dragLimit.top > dTop && dTop > 0) {\n                    top = this.dragLimit.top;\n                }\n                else if (this.dragLimit.bottom + window.pageYOffset < dTop + helperHeight && dTop > 0) {\n                    top = dTop - (dTop - this.dragLimit.bottom) + window.pageYOffset - helperHeight;\n                }\n                else {\n                    top = dTop < 0 ? this.dragLimit.top : dTop;\n                }\n            }\n        }\n        else {\n            left = dLeft;\n            top = dTop;\n        }\n        let iTop = tTop + this.borderWidth.top;\n        let iLeft = tLeft + this.borderWidth.left;\n        if (this.dragProcessStarted) {\n            if (isNullOrUndefined(top)) {\n                top = this.prevTop;\n            }\n            if (isNullOrUndefined(left)) {\n                left = this.prevLeft;\n            }\n        }\n        let draEleTop;\n        let draEleLeft;\n        if (this.dragArea) {\n            draEleTop = (top - iTop) < 0 ? this.dragLimit.top : (top - iTop);\n            draEleLeft = (left - iLeft) < 0 ? this.dragElePosition.left : (left - iLeft);\n        }\n        else {\n            draEleTop = top - iTop;\n            draEleLeft = left - iLeft;\n        }\n        let dragValue = this.getProcessedPositionValue({ top: draEleTop + 'px', left: draEleLeft + 'px' });\n        setStyleAttribute(helperElement, this.getDragPosition(dragValue));\n        if (!this.elementInViewport(helperElement) && this.enableAutoScroll) {\n            this.helperElement.scrollIntoView();\n        }\n        this.dragProcessStarted = true;\n        this.prevLeft = left;\n        this.prevTop = top;\n        this.position.left = left;\n        this.position.top = top;\n        this.pageX = pagex;\n        this.pageY = pagey;\n    }\n    triggerOutFunction(evt, eleObj) {\n        this.hoverObject.instance.intOut(evt, eleObj.target);\n        this.hoverObject.instance.dragData[this.scope] = null;\n        this.hoverObject = null;\n    }\n    getDragPosition(dragValue) {\n        let temp = extend({}, dragValue);\n        if (this.axis) {\n            if (this.axis === 'x') {\n                delete temp.top;\n            }\n            else if (this.axis === 'y') {\n                delete temp.left;\n            }\n        }\n        return temp;\n    }\n    getDocumentWidthHeight(str) {\n        let docBody = document.body;\n        let docEle = document.documentElement;\n        let returnValue = Math.max(docBody['scroll' + str], docEle['scroll' + str], docBody['offset' + str], docEle['offset' + str], docEle['client' + str]);\n        return returnValue;\n    }\n    intDragStop(evt) {\n        this.dragProcessStarted = false;\n        if (!isUndefined(evt.changedTouches) && (evt.changedTouches.length !== 1)) {\n            return;\n        }\n        let type = ['touchend', 'pointerup', 'mouseup'];\n        if (type.indexOf(evt.type) !== -1) {\n            if (this.dragStop) {\n                let curTarget = this.getProperTargetElement(evt);\n                this.trigger('dragStop', { event: evt, element: this.element, target: curTarget, helper: this.helperElement });\n            }\n            this.intDestroy(evt);\n        }\n        else {\n            this.element.setAttribute('aria-grabbed', 'false');\n        }\n        let eleObj = this.checkTargetElement(evt);\n        if (eleObj.target && eleObj.instance) {\n            eleObj.instance.dragStopCalled = true;\n            eleObj.instance.dragData[this.scope] = this.droppables[this.scope];\n            eleObj.instance.intDrop(evt, eleObj.target);\n        }\n        this.setGlobalDroppables(true);\n        document.body.classList.remove('e-prevent-select');\n    }\n    /**\n     * @private\n     */\n    intDestroy(evt) {\n        this.dragProcessStarted = false;\n        this.toggleEvents();\n        document.body.classList.remove('e-prevent-select');\n        this.element.setAttribute('aria-grabbed', 'false');\n        EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);\n        EventHandler.remove(document, Browser.touchEndEvent, this.intDragStop);\n        EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);\n        EventHandler.remove(document, Browser.touchMoveEvent, this.intDrag);\n        if (this.isDragStarted()) {\n            this.isDragStarted(true);\n        }\n    }\n    // triggers when property changed\n    onPropertyChanged(newProp, oldProp) {\n        //No Code to handle\n    }\n    getModuleName() {\n        return 'draggable';\n    }\n    isDragStarted(change) {\n        if (change) {\n            isDraggedObject.isDragged = !isDraggedObject.isDragged;\n        }\n        return isDraggedObject.isDragged;\n    }\n    setDragArea() {\n        let eleWidthBound;\n        let eleHeightBound;\n        let top = 0;\n        let left = 0;\n        let ele;\n        let type = typeof this.dragArea;\n        if (type === 'string') {\n            ele = select(this.dragArea);\n        }\n        else {\n            ele = this.dragArea;\n        }\n        if (ele) {\n            let elementArea = ele.getBoundingClientRect();\n            eleWidthBound = ele.scrollWidth ? ele.scrollWidth : elementArea.right - elementArea.left;\n            eleHeightBound = ele.scrollHeight ? ele.scrollHeight : elementArea.bottom - elementArea.top;\n            let keys = ['Top', 'Left', 'Bottom', 'Right'];\n            let styles = getComputedStyle(ele);\n            for (let i = 0; i < keys.length; i++) {\n                let key = keys[i];\n                let tborder = styles['border' + key + 'Width'];\n                let tpadding = styles['padding' + key];\n                let lowerKey = key.toLowerCase();\n                this.borderWidth[lowerKey] = isNaN(parseFloat(tborder)) ? 0 : parseFloat(tborder);\n                this.padding[lowerKey] = isNaN(parseFloat(tpadding)) ? 0 : parseFloat(tpadding);\n            }\n            top = elementArea.top;\n            left = elementArea.left;\n            this.dragLimit.left = left + this.borderWidth.left + this.padding.left;\n            this.dragLimit.top = ele.offsetTop + this.borderWidth.top + this.padding.top;\n            this.dragLimit.right = left + eleWidthBound - (this.borderWidth.right + this.padding.right);\n            this.dragLimit.bottom = top + eleHeightBound - (this.borderWidth.bottom + this.padding.bottom);\n        }\n    }\n    getProperTargetElement(evt) {\n        let intCoord = this.getCoordinates(evt);\n        let ele;\n        let prevStyle = this.helperElement.style.pointerEvents || '';\n        if (compareElementParent(evt.target, this.helperElement) || evt.type.indexOf('touch') !== -1) {\n            this.helperElement.style.pointerEvents = 'none';\n            ele = document.elementFromPoint(intCoord.clientX, intCoord.clientY);\n            this.helperElement.style.pointerEvents = prevStyle;\n        }\n        else {\n            ele = evt.target;\n        }\n        return ele;\n    }\n    getMousePosition(evt, isdragscroll) {\n        /* tslint:disable no-any */\n        let dragEle = evt.srcElement !== undefined ? evt.srcElement : evt.target;\n        let intCoord = this.getCoordinates(evt);\n        let pageX;\n        let pageY;\n        let isOffsetParent = isNullOrUndefined(dragEle.offsetParent);\n        /* istanbul ignore next */\n        if (isdragscroll) {\n            pageX = this.clone ? intCoord.pageX :\n                (intCoord.pageX + (isOffsetParent ? 0 : dragEle.offsetParent.scrollLeft)) - this.relativeXPosition;\n            pageY = this.clone ? intCoord.pageY :\n                (intCoord.pageY + (isOffsetParent ? 0 : dragEle.offsetParent.scrollTop)) - this.relativeYPosition;\n        }\n        else {\n            pageX = this.clone ? intCoord.pageX : (intCoord.pageX + window.pageXOffset) - this.relativeXPosition;\n            pageY = this.clone ? intCoord.pageY : (intCoord.pageY + window.pageYOffset) - this.relativeYPosition;\n        }\n        return {\n            left: pageX - (this.margin.left + this.cursorAt.left),\n            top: pageY - (this.margin.top + this.cursorAt.top)\n        };\n    }\n    getCoordinates(evt) {\n        if (evt.type.indexOf('touch') > -1) {\n            return evt.changedTouches[0];\n        }\n        return evt;\n    }\n    getHelperElement(evt) {\n        let element;\n        if (this.clone) {\n            if (this.helper) {\n                element = this.helper({ sender: evt, element: this.target });\n            }\n            else {\n                element = createElement('div', { className: 'e-drag-helper e-block-touch', innerHTML: 'Draggable' });\n                document.body.appendChild(element);\n            }\n        }\n        else {\n            element = this.element;\n        }\n        return element;\n    }\n    setGlobalDroppables(reset, drag, helper) {\n        this.droppables[this.scope] = reset ? null : {\n            draggable: drag,\n            helper: helper,\n            draggedElement: this.element\n        };\n    }\n    checkTargetElement(evt) {\n        let target = this.getProperTargetElement(evt);\n        let dropIns = this.getDropInstance(target);\n        if (!dropIns && target && !isNullOrUndefined(target.parentNode)) {\n            let parent = closest(target.parentNode, '.e-droppable') || target.parentElement;\n            if (parent) {\n                dropIns = this.getDropInstance(parent);\n            }\n        }\n        return { target: target, instance: dropIns };\n    }\n    getDropInstance(ele) {\n        let name = 'getModuleName';\n        let drop;\n        let eleInst = ele && ele.ej2_instances;\n        if (eleInst) {\n            for (let inst of eleInst) {\n                if (inst[name]() === 'droppable') {\n                    drop = inst;\n                    break;\n                }\n            }\n        }\n        return drop;\n    }\n    destroy() {\n        this.toggleEvents(true);\n        super.destroy();\n    }\n};\n__decorate$2([\n    Complex({}, Position)\n], Draggable.prototype, \"cursorAt\", void 0);\n__decorate$2([\n    Property(true)\n], Draggable.prototype, \"clone\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"dragArea\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"isDragScroll\", void 0);\n__decorate$2([\n    Event$1()\n], Draggable.prototype, \"drag\", void 0);\n__decorate$2([\n    Event$1()\n], Draggable.prototype, \"dragStart\", void 0);\n__decorate$2([\n    Event$1()\n], Draggable.prototype, \"dragStop\", void 0);\n__decorate$2([\n    Property(1)\n], Draggable.prototype, \"distance\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"handle\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"abort\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"helper\", void 0);\n__decorate$2([\n    Property('default')\n], Draggable.prototype, \"scope\", void 0);\n__decorate$2([\n    Property('')\n], Draggable.prototype, \"dragTarget\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"axis\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"queryPositionInfo\", void 0);\n__decorate$2([\n    Property(false)\n], Draggable.prototype, \"enableTailMode\", void 0);\n__decorate$2([\n    Property(false)\n], Draggable.prototype, \"skipDistanceCheck\", void 0);\n__decorate$2([\n    Property(true)\n], Draggable.prototype, \"preventDefault\", void 0);\n__decorate$2([\n    Property(false)\n], Draggable.prototype, \"enableAutoScroll\", void 0);\n__decorate$2([\n    Property(false)\n], Draggable.prototype, \"enableTapHold\", void 0);\n__decorate$2([\n    Property(750)\n], Draggable.prototype, \"tapHoldThreshold\", void 0);\nDraggable = Draggable_1 = __decorate$2([\n    NotifyPropertyChanges\n], Draggable);\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Droppable Module provides support to enable droppable functionality in Dom Elements.\n * ```html\n * <div id='drop'>Droppable</div>\n * <script>\n * let ele:HTMLElement = document.getElementById('drop');\n * var drag:Droppable = new Droppable(ele,{\n *     accept:'.drop',\n *     drop: function(e) {\n *      //drop handler code.\n *     }\n * });\n * </script>\n * ```\n */\nlet Droppable = class Droppable extends Base {\n    constructor(element, options) {\n        super(options, element);\n        this.mouseOver = false;\n        this.dragData = {};\n        this.dragStopCalled = false;\n        this.bind();\n    }\n    bind() {\n        this.wireEvents();\n    }\n    wireEvents() {\n        EventHandler.add(this.element, Browser.touchEndEvent, this.intDrop, this);\n    }\n    // triggers when property changed\n    onPropertyChanged(newProp, oldProp) {\n        //No Code to handle\n    }\n    getModuleName() {\n        return 'droppable';\n    }\n    intOver(event, element) {\n        if (!this.mouseOver) {\n            let drag = this.dragData[this.scope];\n            this.trigger('over', { event: event, target: element, dragData: drag });\n            this.mouseOver = true;\n        }\n    }\n    intOut(event, element) {\n        if (this.mouseOver) {\n            this.trigger('out', { evt: event, target: element });\n            this.mouseOver = false;\n        }\n    }\n    intDrop(evt, element) {\n        if (!this.dragStopCalled) {\n            return;\n        }\n        else {\n            this.dragStopCalled = false;\n        }\n        let accept = true;\n        let drag = this.dragData[this.scope];\n        let isDrag = drag ? (drag.helper && isVisible(drag.helper)) : false;\n        let area;\n        if (isDrag) {\n            area = this.isDropArea(evt, drag.helper, element);\n            if (this.accept) {\n                accept = matches(drag.helper, this.accept);\n            }\n        }\n        if (isDrag && this.drop && area.canDrop && accept) {\n            this.trigger('drop', { event: evt, target: area.target, droppedElement: drag.helper, dragData: drag });\n        }\n        this.mouseOver = false;\n    }\n    isDropArea(evt, helper, element) {\n        let area = { canDrop: true, target: element || evt.target };\n        let isTouch = evt.type === 'touchend';\n        if (isTouch || area.target === helper) {\n            helper.style.display = 'none';\n            let coord = isTouch ? (evt.changedTouches[0]) : evt;\n            let ele = document.elementFromPoint(coord.clientX, coord.clientY);\n            area.canDrop = false;\n            area.canDrop = compareElementParent(ele, this.element);\n            if (area.canDrop) {\n                area.target = ele;\n            }\n            helper.style.display = '';\n        }\n        return area;\n    }\n    destroy() {\n        EventHandler.remove(this.element, Browser.touchEndEvent, this.intDrop);\n        super.destroy();\n    }\n};\n__decorate$3([\n    Property()\n], Droppable.prototype, \"accept\", void 0);\n__decorate$3([\n    Property('default')\n], Droppable.prototype, \"scope\", void 0);\n__decorate$3([\n    Event$1()\n], Droppable.prototype, \"drop\", void 0);\n__decorate$3([\n    Event$1()\n], Droppable.prototype, \"over\", void 0);\n__decorate$3([\n    Event$1()\n], Droppable.prototype, \"out\", void 0);\nDroppable = __decorate$3([\n    NotifyPropertyChanges\n], Droppable);\n\nvar __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar KeyboardEvents_1;\nlet keyCode = {\n    'backspace': 8,\n    'tab': 9,\n    'enter': 13,\n    'shift': 16,\n    'control': 17,\n    'alt': 18,\n    'pause': 19,\n    'capslock': 20,\n    'space': 32,\n    'escape': 27,\n    'pageup': 33,\n    'pagedown': 34,\n    'end': 35,\n    'home': 36,\n    'leftarrow': 37,\n    'uparrow': 38,\n    'rightarrow': 39,\n    'downarrow': 40,\n    'insert': 45,\n    'delete': 46,\n    'f1': 112,\n    'f2': 113,\n    'f3': 114,\n    'f4': 115,\n    'f5': 116,\n    'f6': 117,\n    'f7': 118,\n    'f8': 119,\n    'f9': 120,\n    'f10': 121,\n    'f11': 122,\n    'f12': 123,\n    'semicolon': 186,\n    'plus': 187,\n    'comma': 188,\n    'minus': 189,\n    'dot': 190,\n    'forwardslash': 191,\n    'graveaccent': 192,\n    'openbracket': 219,\n    'backslash': 220,\n    'closebracket': 221,\n    'singlequote': 222\n};\n/**\n * KeyboardEvents class enables you to bind key action desired key combinations for ex., Ctrl+A, Delete, Alt+Space etc.\n * ```html\n * <div id='testEle'>  </div>;\n * <script>\n *   let node: HTMLElement = document.querySelector('#testEle');\n *   let kbInstance = new KeyboardEvents({\n *       element: node,\n *       keyConfigs:{ selectAll : 'ctrl+a' },\n *       keyAction: function (e:KeyboardEvent, action:string) {\n *           // handler function code\n *       }\n *   });\n * </script>\n * ```\n */\nlet KeyboardEvents = KeyboardEvents_1 = class KeyboardEvents extends Base {\n    /**\n     * Initializes the KeyboardEvents\n     * @param {HTMLElement} element\n     * @param {KeyboardEventsModel} options\n     */\n    constructor(element, options) {\n        super(options, element);\n        /**\n         * To handle a key press event returns null\n         */\n        this.keyPressHandler = (e) => {\n            let isAltKey = e.altKey;\n            let isCtrlKey = e.ctrlKey;\n            let isShiftKey = e.shiftKey;\n            let curkeyCode = e.which;\n            let keys = Object.keys(this.keyConfigs);\n            for (let key of keys) {\n                let configCollection = this.keyConfigs[key].split(',');\n                for (let rconfig of configCollection) {\n                    let rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());\n                    if (isAltKey === rKeyObj.altKey && isCtrlKey === rKeyObj.ctrlKey &&\n                        isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode) {\n                        e.action = key;\n                        if (this.keyAction) {\n                            this.keyAction(e);\n                        }\n                    }\n                }\n            }\n        };\n        this.bind();\n    }\n    /**\n     * Unwire bound events and destroy the instance.\n     * @return {void}\n     */\n    destroy() {\n        this.unwireEvents();\n        super.destroy();\n    }\n    /**\n     * Function can be used to specify certain action if a property is changed\n     * @param newProp\n     * @param oldProp\n     * @returns {void}\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        // No code are needed\n    }\n    ;\n    bind() {\n        this.wireEvents();\n    }\n    /**\n     * To get the module name, returns 'keyboard'.\n     * @private\n     */\n    getModuleName() {\n        return 'keyboard';\n    }\n    /**\n     * Wiring event handlers to events\n     */\n    wireEvents() {\n        this.element.addEventListener(this.eventName, this.keyPressHandler);\n    }\n    /**\n     * Unwiring event handlers to events\n     */\n    unwireEvents() {\n        this.element.removeEventListener(this.eventName, this.keyPressHandler);\n    }\n    /**\n     * To get the key configuration data\n     * @param {string} config - configuration data\n     * returns {KeyData}\n     */\n    static getKeyConfigData(config) {\n        if (config in this.configCache) {\n            return this.configCache[config];\n        }\n        let keys = config.toLowerCase().split('+');\n        let keyData = {\n            altKey: (keys.indexOf('alt') !== -1 ? true : false),\n            ctrlKey: (keys.indexOf('ctrl') !== -1 ? true : false),\n            shiftKey: (keys.indexOf('shift') !== -1 ? true : false),\n            keyCode: null\n        };\n        if (keys[keys.length - 1].length > 1 && !!Number(keys[keys.length - 1])) {\n            keyData.keyCode = Number(keys[keys.length - 1]);\n        }\n        else {\n            keyData.keyCode = KeyboardEvents_1.getKeyCode(keys[keys.length - 1]);\n        }\n        KeyboardEvents_1.configCache[config] = keyData;\n        return keyData;\n    }\n    // Return the keycode value as string \n    static getKeyCode(keyVal) {\n        return keyCode[keyVal] || keyVal.toUpperCase().charCodeAt(0);\n    }\n};\nKeyboardEvents.configCache = {};\n__decorate$4([\n    Property({})\n], KeyboardEvents.prototype, \"keyConfigs\", void 0);\n__decorate$4([\n    Property('keyup')\n], KeyboardEvents.prototype, \"eventName\", void 0);\n__decorate$4([\n    Event$1()\n], KeyboardEvents.prototype, \"keyAction\", void 0);\nKeyboardEvents = KeyboardEvents_1 = __decorate$4([\n    NotifyPropertyChanges\n], KeyboardEvents);\n\n/**\n * L10n modules provides localized text for different culture.\n * ```typescript\n * import {setCulture} from '@syncfusion/ts-base-library';\n * //load global locale object common for all components.\n * L10n.load({\n *    'fr-BE': {\n *       'button': {\n *            'check': 'vérifié'\n *        }\n *    }\n * });\n * //set globale default locale culture.\n * setCulture('fr-BE');\n * let instance: L10n = new L10n('button', {\n *    check: 'checked'\n * });\n * //Get locale text for current property.\n * instance.getConstant('check');\n * //Change locale culture in a component.\n * instance.setLocale('en-US');\n * ```\n */\nclass L10n {\n    /**\n     * Constructor\n     */\n    constructor(controlName, localeStrings, locale) {\n        this.controlName = controlName;\n        this.localeStrings = localeStrings;\n        this.setLocale(locale || defaultCulture);\n    }\n    /**\n     * Sets the locale text\n     * @param {string} locale\n     * @returns {void}\n     */\n    setLocale(locale) {\n        let intLocale = this.intGetControlConstant(L10n.locale, locale);\n        this.currentLocale = intLocale || this.localeStrings;\n    }\n    /**\n     * Sets the global locale for all components.\n     * @param {Object} localeObject - specifies the localeObject to be set as global locale.\n     */\n    static load(localeObject) {\n        this.locale = extend(this.locale, localeObject, {}, true);\n    }\n    /**\n     * Returns current locale text for the property based on the culture name and control name.\n     * @param {string} propertyName - specifies the property for which localize text to be returned.\n     * @return string\n     */\n    getConstant(prop) {\n        // Removed conditional operator because this method does not return correct value when passing 0 as value in localization\n        if (!isNullOrUndefined(this.currentLocale[prop])) {\n            return this.currentLocale[prop];\n        }\n        else {\n            return this.localeStrings[prop] || '';\n        }\n    }\n    /**\n     * Returns the control constant object for current object and the locale specified.\n     * @param {Object} curObject\n     * @param {string} locale\n     * @returns {Object}\n     */\n    intGetControlConstant(curObject, locale) {\n        if ((curObject)[locale]) {\n            return (curObject)[locale][this.controlName];\n        }\n        return null;\n    }\n}\nL10n.locale = {};\n\nvar __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * SwipeSettings is a framework module that provides support to handle swipe event like swipe up, swipe right, etc..,\n */\nclass SwipeSettings extends ChildProperty {\n}\n__decorate$5([\n    Property(50)\n], SwipeSettings.prototype, \"swipeThresholdDistance\", void 0);\nconst swipeRegex = /(Up|Down)/;\n/**\n * Touch class provides support to handle the touch event like tap, double tap, tap hold, etc..,\n * ```typescript\n *    let node: HTMLElement;\n * let touchObj: Touch = new Touch({\n *    element: node,\n *    tap: function (e) {\n *        // tap handler function code\n *    }\n *    tapHold: function (e) {\n *        // tap hold handler function code\n *    }\n *    scroll: function (e) {\n *        // scroll handler function code\n *    }\n *    swipe: function (e) {\n *        // swipe handler function code\n *    }\n * });\n * ```\n */\nlet Touch = class Touch extends Base {\n    /* End-Properties */\n    constructor(element, options) {\n        super(options, element);\n        this.touchAction = true;\n        this.tapCount = 0;\n        this.startEvent = (evt) => {\n            if (this.touchAction === true) {\n                let point = this.updateChangeTouches(evt);\n                if (evt.changedTouches !== undefined) {\n                    this.touchAction = false;\n                }\n                this.isTouchMoved = false;\n                this.movedDirection = '';\n                this.startPoint = this.lastMovedPoint = { clientX: point.clientX, clientY: point.clientY };\n                this.startEventData = point;\n                this.hScrollLocked = this.vScrollLocked = false;\n                this.tStampStart = Date.now();\n                this.timeOutTapHold = setTimeout(() => { this.tapHoldEvent(evt); }, this.tapHoldThreshold);\n                EventHandler.add(this.element, Browser.touchMoveEvent, this.moveEvent, this);\n                EventHandler.add(this.element, Browser.touchEndEvent, this.endEvent, this);\n                EventHandler.add(this.element, Browser.touchCancelEvent, this.cancelEvent, this);\n            }\n        };\n        this.moveEvent = (evt) => {\n            let point = this.updateChangeTouches(evt);\n            this.movedPoint = point;\n            this.isTouchMoved = !(point.clientX === this.startPoint.clientX && point.clientY === this.startPoint.clientY);\n            let eScrollArgs = {};\n            if (this.isTouchMoved) {\n                clearTimeout(this.timeOutTapHold);\n                this.calcScrollPoints(evt);\n                let scrollArg = {\n                    startEvents: this.startEventData,\n                    originalEvent: evt, startX: this.startPoint.clientX,\n                    startY: this.startPoint.clientY, distanceX: this.distanceX,\n                    distanceY: this.distanceY, scrollDirection: this.scrollDirection,\n                    velocity: this.getVelocity(point)\n                };\n                eScrollArgs = extend(eScrollArgs, {}, scrollArg);\n                this.trigger('scroll', eScrollArgs);\n                this.lastMovedPoint = { clientX: point.clientX, clientY: point.clientY };\n            }\n        };\n        this.cancelEvent = (evt) => {\n            clearTimeout(this.timeOutTapHold);\n            clearTimeout(this.timeOutTap);\n            this.tapCount = 0;\n            this.swipeFn(evt);\n            EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);\n        };\n        this.endEvent = (evt) => {\n            this.swipeFn(evt);\n            if (!this.isTouchMoved) {\n                if (typeof this.tap === 'function') {\n                    this.trigger('tap', { originalEvent: evt, tapCount: ++this.tapCount });\n                    this.timeOutTap = setTimeout(() => {\n                        this.tapCount = 0;\n                    }, this.tapThreshold);\n                }\n            }\n            this.modeclear();\n        };\n        this.swipeFn = (evt) => {\n            clearTimeout(this.timeOutTapHold);\n            clearTimeout(this.timeOutTap);\n            let point = this.updateChangeTouches(evt);\n            let diffX = point.clientX - this.startPoint.clientX;\n            let diffY = point.clientY - this.startPoint.clientY;\n            diffX = Math.floor(diffX < 0 ? -1 * diffX : diffX);\n            diffY = Math.floor(diffY < 0 ? -1 * diffY : diffX);\n            this.isTouchMoved = diffX > 1 || diffY > 1;\n            this.endPoint = point;\n            this.calcPoints(evt);\n            let swipeArgs = {\n                originalEvent: evt,\n                startEvents: this.startEventData,\n                startX: this.startPoint.clientX,\n                startY: this.startPoint.clientY,\n                distanceX: this.distanceX, distanceY: this.distanceY, swipeDirection: this.movedDirection,\n                velocity: this.getVelocity(point)\n            };\n            if (this.isTouchMoved) {\n                let eSwipeArgs;\n                let tDistance = this.swipeSettings.swipeThresholdDistance;\n                eSwipeArgs = extend(eSwipeArgs, this.defaultArgs, swipeArgs);\n                let canTrigger = false;\n                let ele = this.element;\n                let scrollBool = this.isScrollable(ele);\n                let moved = swipeRegex.test(this.movedDirection);\n                if ((tDistance < this.distanceX && !moved) || (tDistance < this.distanceY && moved)) {\n                    if (!scrollBool) {\n                        canTrigger = true;\n                    }\n                    else {\n                        canTrigger = this.checkSwipe(ele, moved);\n                    }\n                }\n                if (canTrigger) {\n                    this.trigger('swipe', eSwipeArgs);\n                }\n            }\n            this.modeclear();\n        };\n        this.modeclear = () => {\n            this.modeClear = setTimeout(() => {\n                this.touchAction = true;\n            }, (typeof this.tap !== 'function' ? 0 : 20));\n            this.lastTapTime = new Date().getTime();\n            EventHandler.remove(this.element, Browser.touchMoveEvent, this.moveEvent);\n            EventHandler.remove(this.element, Browser.touchEndEvent, this.endEvent);\n            EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);\n        };\n        this.bind();\n    }\n    // triggers when property changed \n    /**\n     * @private\n     * @param newProp\n     * @param oldProp\n     */\n    onPropertyChanged(newProp, oldProp) {\n        //No Code to handle\n    }\n    bind() {\n        this.wireEvents();\n        if (Browser.isIE) {\n            this.element.classList.add('e-block-touch');\n        }\n    }\n    /**\n     * To destroy the touch instance.\n     * @return {void}\n     */\n    destroy() {\n        this.unwireEvents();\n        super.destroy();\n    }\n    // Need to changes the event binding once we updated the event handler.\n    wireEvents() {\n        EventHandler.add(this.element, Browser.touchStartEvent, this.startEvent, this);\n    }\n    unwireEvents() {\n        EventHandler.remove(this.element, Browser.touchStartEvent, this.startEvent);\n    }\n    /**\n     * Returns module name as touch\n     * @returns {string}\n     * @private\n     */\n    getModuleName() {\n        return 'touch';\n    }\n    /**\n     * Returns if the HTML element is Scrollable.\n     * @param {HTMLElement} element - HTML Element to check if Scrollable.\n     * @returns {boolean}\n     */\n    isScrollable(element) {\n        let eleStyle = getComputedStyle(element);\n        let style = eleStyle.overflow + eleStyle.overflowX + eleStyle.overflowY;\n        if ((/(auto|scroll)/).test(style)) {\n            return true;\n        }\n        return false;\n    }\n    tapHoldEvent(evt) {\n        this.tapCount = 0;\n        this.touchAction = true;\n        let eTapArgs;\n        EventHandler.remove(this.element, Browser.touchMoveEvent, this.moveEvent);\n        EventHandler.remove(this.element, Browser.touchEndEvent, this.endEvent);\n        eTapArgs = { originalEvent: evt };\n        this.trigger('tapHold', eTapArgs);\n        EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);\n    }\n    calcPoints(evt) {\n        let point = this.updateChangeTouches(evt);\n        this.defaultArgs = { originalEvent: evt };\n        this.distanceX = Math.abs((Math.abs(point.clientX) - Math.abs(this.startPoint.clientX)));\n        this.distanceY = Math.abs((Math.abs(point.clientY) - Math.abs(this.startPoint.clientY)));\n        if (this.distanceX > this.distanceY) {\n            this.movedDirection = (point.clientX > this.startPoint.clientX) ? 'Right' : 'Left';\n        }\n        else {\n            this.movedDirection = (point.clientY < this.startPoint.clientY) ? 'Up' : 'Down';\n        }\n    }\n    calcScrollPoints(evt) {\n        let point = this.updateChangeTouches(evt);\n        this.defaultArgs = { originalEvent: evt };\n        this.distanceX = Math.abs((Math.abs(point.clientX) - Math.abs(this.lastMovedPoint.clientX)));\n        this.distanceY = Math.abs((Math.abs(point.clientY) - Math.abs(this.lastMovedPoint.clientY)));\n        if ((this.distanceX > this.distanceY || this.hScrollLocked === true) && this.vScrollLocked === false) {\n            this.scrollDirection = (point.clientX > this.lastMovedPoint.clientX) ? 'Right' : 'Left';\n            this.hScrollLocked = true;\n        }\n        else {\n            this.scrollDirection = (point.clientY < this.lastMovedPoint.clientY) ? 'Up' : 'Down';\n            this.vScrollLocked = true;\n        }\n    }\n    getVelocity(pnt) {\n        let newX = pnt.clientX;\n        let newY = pnt.clientY;\n        let newT = Date.now();\n        let xDist = newX - this.startPoint.clientX;\n        let yDist = newY - this.startPoint.clientX;\n        let interval = newT - this.tStampStart;\n        return Math.sqrt(xDist * xDist + yDist * yDist) / interval;\n    }\n    // tslint:disable-next-line:no-any\n    checkSwipe(ele, flag) {\n        let keys = ['scroll', 'offset'];\n        let temp = flag ? ['Height', 'Top'] : ['Width', 'Left'];\n        if ((ele[keys[0] + temp[0]] <= ele[keys[1] + temp[0]])) {\n            return true;\n        }\n        return (ele[keys[0] + temp[1]] === 0) ||\n            (ele[keys[1] + temp[0]] + ele[keys[0] + temp[1]] >= ele[keys[0] + temp[0]]);\n    }\n    updateChangeTouches(evt) {\n        // tslint:disable-next-line:max-line-length\n        let point = evt.changedTouches && evt.changedTouches.length !== 0 ? evt.changedTouches[0] : evt;\n        return point;\n    }\n};\n__decorate$5([\n    Event$1()\n], Touch.prototype, \"tap\", void 0);\n__decorate$5([\n    Event$1()\n], Touch.prototype, \"tapHold\", void 0);\n__decorate$5([\n    Event$1()\n], Touch.prototype, \"swipe\", void 0);\n__decorate$5([\n    Event$1()\n], Touch.prototype, \"scroll\", void 0);\n__decorate$5([\n    Property(350)\n], Touch.prototype, \"tapThreshold\", void 0);\n__decorate$5([\n    Property(750)\n], Touch.prototype, \"tapHoldThreshold\", void 0);\n__decorate$5([\n    Complex({}, SwipeSettings)\n], Touch.prototype, \"swipeSettings\", void 0);\nTouch = __decorate$5([\n    NotifyPropertyChanges\n], Touch);\n\n/**\n * SanitizeHtmlHelper for sanitize the value.\n */\nconst removeTags = [\n    'script',\n    'style',\n    'iframe[src]',\n    'link[href*=\"javascript:\"]',\n    'object[type=\"text/x-scriptlet\"]',\n    'object[data^=\"data:text/html;base64\"]',\n    'img[src^=\"data:text/html;base64\"]',\n    '[src^=\"javascript:\"]',\n    '[dynsrc^=\"javascript:\"]',\n    '[lowsrc^=\"javascript:\"]',\n    '[type^=\"application/x-shockwave-flash\"]'\n];\nconst removeAttrs = [\n    { attribute: 'href', selector: '[href*=\"javascript:\"]' },\n    { attribute: 'background', selector: '[background^=\"javascript:\"]' },\n    { attribute: 'style', selector: '[style*=\"javascript:\"]' },\n    { attribute: 'style', selector: '[style*=\"expression(\"]' },\n    { attribute: 'href', selector: 'a[href^=\"data:text/html;base64\"]' }\n];\nconst jsEvents = ['onchange',\n    'onclick',\n    'onmouseover',\n    'onmouseout',\n    'onkeydown',\n    'onload',\n    'onerror',\n    'onblur',\n    'onfocus',\n    'onbeforeload',\n    'onbeforeunload',\n    'onkeyup',\n    'onsubmit',\n    'onafterprint',\n    'onbeforeonload',\n    'onbeforeprint',\n    'onblur',\n    'oncanplay',\n    'oncanplaythrough',\n    'onchange',\n    'onclick',\n    'oncontextmenu',\n    'ondblclick',\n    'ondrag',\n    'ondragend',\n    'ondragenter',\n    'ondragleave',\n    'ondragover',\n    'ondragstart',\n    'ondrop',\n    'ondurationchange',\n    'onemptied',\n    'onended',\n    'onerror',\n    'onerror',\n    'onfocus',\n    'onformchange',\n    'onforminput',\n    'onhaschange',\n    'oninput',\n    'oninvalid',\n    'onkeydown',\n    'onkeypress',\n    'onkeyup',\n    'onload',\n    'onloadeddata',\n    'onloadedmetadata',\n    'onloadstart',\n    'onmessage',\n    'onmousedown',\n    'onmousemove',\n    'onmouseout',\n    'onmouseover',\n    'onmouseup',\n    'onmousewheel',\n    'onoffline',\n    'onoine',\n    'ononline',\n    'onpagehide',\n    'onpageshow',\n    'onpause',\n    'onplay',\n    'onplaying',\n    'onpopstate',\n    'onprogress',\n    'onratechange',\n    'onreadystatechange',\n    'onredo',\n    'onresize',\n    'onscroll',\n    'onseeked',\n    'onseeking',\n    'onselect',\n    'onstalled',\n    'onstorage',\n    'onsubmit',\n    'onsuspend',\n    'ontimeupdate',\n    'onundo',\n    'onunload',\n    'onvolumechange',\n    'onwaiting',\n    'onmouseenter',\n    'onmouseleave',\n    'onmousewheel',\n    'onstart',\n    'onpropertychange'\n];\nclass SanitizeHtmlHelper {\n    static beforeSanitize() {\n        return {\n            selectors: {\n                tags: removeTags,\n                attributes: removeAttrs\n            }\n        };\n    }\n    ;\n    static sanitize(value) {\n        let item = this.beforeSanitize();\n        let output = this.serializeValue(item, value);\n        return output;\n    }\n    static serializeValue(item, value) {\n        this.removeAttrs = item.selectors.attributes;\n        this.removeTags = item.selectors.tags;\n        this.wrapElement = document.createElement('div');\n        this.wrapElement.innerHTML = value;\n        this.removeXssTags();\n        this.removeJsEvents();\n        this.removeXssAttrs();\n        let tempEleValue = this.wrapElement.innerHTML;\n        this.removeElement();\n        return tempEleValue;\n    }\n    static removeElement() {\n        // Removes an element's attibute to avoid html tag validation\n        let nodes = this.wrapElement.children;\n        for (let j = 0; j < nodes.length; j++) {\n            let attribute = nodes[j].attributes;\n            for (let i = 0; i < attribute.length; i++) {\n                this.wrapElement.children[j].removeAttribute(attribute[i].localName);\n            }\n        }\n    }\n    static removeXssTags() {\n        let elements = this.wrapElement.querySelectorAll(this.removeTags.join(','));\n        if (elements.length > 0) {\n            elements.forEach((element) => {\n                detach(element);\n            });\n        }\n        else {\n            return;\n        }\n    }\n    static removeJsEvents() {\n        let elements = this.wrapElement.querySelectorAll('[' + jsEvents.join('],[') + ']');\n        if (elements.length > 0) {\n            elements.forEach((element) => {\n                jsEvents.forEach((attr) => {\n                    if (element.hasAttribute(attr)) {\n                        element.removeAttribute(attr);\n                    }\n                });\n            });\n        }\n        else {\n            return;\n        }\n    }\n    static removeXssAttrs() {\n        this.removeAttrs.forEach((item, index) => {\n            let elements = this.wrapElement.querySelectorAll(item.selector);\n            if (elements.length > 0) {\n                elements.forEach((element) => {\n                    element.removeAttribute(item.attribute);\n                });\n            }\n        });\n    }\n}\n\n/**\n * Base modules\n */\n\nexport { blazorCultureFormats, IntlBase, Ajax, Animation, rippleEffect, isRippleEnabled, enableRipple, Base, getComponent, removeChildInstance, Browser, Component, ChildProperty, Position, Draggable, Droppable, EventHandler, onIntlChange, rightToLeft, cldrData, defaultCulture, defaultCurrencyCode, Internationalization, setCulture, setCurrencyCode, loadCldr, enableRtl, getNumericObject, getNumberDependable, getDefaultDateObject, KeyboardEvents, L10n, ModuleLoader, Property, Complex, ComplexFactory, Collection, CollectionFactory, Event$1 as Event, NotifyPropertyChanges, CreateBuilder, SwipeSettings, Touch, HijriParser, blazorTemplates, getRandomId, compile$$1 as compile, updateBlazorTemplate, resetBlazorTemplate, setTemplateEngine, getTemplateEngine, disableBlazorMode, createInstance, setImmediate, getValue, setValue, deleteObject, isObject, getEnumValue, merge, extend, isNullOrUndefined, isUndefined, getUniqueID, debounce, queryParams, isObjectArray, compareElementParent, throwError, print, formatUnit, enableBlazorMode, isBlazor, getElement, getInstance, addInstance, uniqueID, createElement, addClass, removeClass, isVisible, prepend, append, detach, remove, attributes, select, selectAll, closest, siblings, getAttributeOrDefault, setStyleAttribute, classList, matches, includeInnerHTML, containsClass, cloneNode, Observer, SanitizeHtmlHelper };\n//# sourceMappingURL=ej2-base.es2015.js.map\n","import { Ajax, extend, getValue, isNullOrUndefined, merge, setValue } from '@syncfusion/ej2-base';\n\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\nclass Query {\n    /**\n     * Constructor for Query class.\n     * @param  {string|string[]} from?\n     * @hidden\n     */\n    constructor(from) {\n        /** @hidden */\n        this.subQuery = null;\n        /** @hidden */\n        this.isChild = false;\n        /** @hidden */\n        this.distincts = [];\n        this.queries = [];\n        this.key = '';\n        this.fKey = '';\n        if (typeof from === 'string') {\n            this.fromTable = from;\n        }\n        else if (from && from instanceof Array) {\n            this.lookups = from;\n        }\n        this.expands = [];\n        this.sortedColumns = [];\n        this.groupedColumns = [];\n        this.subQuery = null;\n        this.isChild = false;\n        this.params = [];\n        return this;\n    }\n    /**\n     * Sets the primary key.\n     * @param  {string} field - Defines the column field.\n     */\n    setKey(field) {\n        this.key = field;\n        return this;\n    }\n    /**\n     * Sets default DataManager to execute query.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    using(dataManager) {\n        this.dataManager = dataManager;\n        return this;\n    }\n    /**\n     * Executes query with the given DataManager.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     * @param  {Function} done - Defines the success callback.\n     * @param  {Function} fail - Defines the failure callback.\n     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n     *\n     * <pre>\n     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n     * let query: Query = new Query();\n     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n     * let promise: Promise< Object > = query.execute(dataManager);\n     * promise.then((e: { result: Object }) => { });\n     * </pre>\n     */\n    execute(dataManager, done, fail, always) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeQuery(this, done, fail, always);\n        }\n        return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Executes query with the local datasource.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    executeLocal(dataManager) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeLocal(this);\n        }\n        return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Creates deep copy of the Query object.\n     */\n    clone() {\n        let cloned = new Query();\n        cloned.queries = this.queries.slice(0);\n        cloned.key = this.key;\n        cloned.isChild = this.isChild;\n        cloned.dataManager = this.dataManager;\n        cloned.fromTable = this.fromTable;\n        cloned.params = this.params.slice(0);\n        cloned.expands = this.expands.slice(0);\n        cloned.sortedColumns = this.sortedColumns.slice(0);\n        cloned.groupedColumns = this.groupedColumns.slice(0);\n        cloned.subQuerySelector = this.subQuerySelector;\n        cloned.subQuery = this.subQuery;\n        cloned.fKey = this.fKey;\n        cloned.isCountRequired = this.isCountRequired;\n        cloned.distincts = this.distincts.slice(0);\n        return cloned;\n    }\n    /**\n     * Specifies the name of table to retrieve data in query execution.\n     * @param  {string} tableName - Defines the table name.\n     */\n    from(tableName) {\n        this.fromTable = tableName;\n        return this;\n    }\n    /**\n     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n     * @param  {string} key - Defines the key of additional parameter.\n     * @param  {Function|string} value - Defines the value for the key.\n     */\n    addParams(key, value) {\n        if (typeof value === 'function') {\n            this.params.push({ key: key, fn: value });\n        }\n        else {\n            this.params.push({ key: key, value: value });\n        }\n        return this;\n    }\n    /**\n     * @hidden\n     */\n    distinct(fields) {\n        if (typeof fields === 'string') {\n            this.distincts = [].slice.call([fields], 0);\n        }\n        else {\n            this.distincts = fields.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Expands the related table.\n     * @param  {string|Object[]} tables\n     */\n    expand(tables) {\n        if (typeof tables === 'string') {\n            this.expands = [].slice.call([tables], 0);\n        }\n        else {\n            this.expands = tables.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Filter data with given filter criteria.\n     * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string|number|boolean} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    where(fieldName, operator, value, ignoreCase, ignoreAccent) {\n        operator = operator ? (operator).toLowerCase() : null;\n        let predicate = null;\n        if (typeof fieldName === 'string') {\n            predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\n        }\n        else if (fieldName instanceof Predicate) {\n            predicate = fieldName;\n        }\n        this.queries.push({\n            fn: 'onWhere',\n            e: predicate\n        });\n        return this;\n    }\n    /**\n     * Search data with given search criteria.\n     * @param  {string|number|boolean} searchKey - Defines the search key.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     * @param  {string} operator - Defines the operator how to search data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    search(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [fieldNames];\n        }\n        if (!operator || operator === 'none') {\n            operator = 'contains';\n        }\n        let comparer = DataUtil.fnOperators[operator];\n        this.queries.push({\n            fn: 'onSearch',\n            e: {\n                fieldNames: fieldNames,\n                operator: operator,\n                searchKey: searchKey,\n                ignoreCase: ignoreCase,\n                ignoreAccent: ignoreAccent,\n                comparer: comparer\n            }\n        });\n        return this;\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     */\n    sortBy(fieldName, comparer, isFromGroup) {\n        let order = 'ascending';\n        let sorts;\n        let temp;\n        if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n            fieldName = fieldName.replace(/ desc$/i, '');\n            comparer = 'descending';\n        }\n        if (!comparer || typeof comparer === 'string') {\n            order = comparer ? comparer.toLowerCase() : 'ascending';\n            comparer = DataUtil.fnSort(comparer);\n        }\n        if (isFromGroup) {\n            sorts = Query.filterQueries(this.queries, 'onSortBy');\n            for (let i = 0; i < sorts.length; i++) {\n                temp = sorts[i].e.fieldName;\n                if (typeof temp === 'string') {\n                    if (temp === fieldName) {\n                        return this;\n                    }\n                }\n                else if (temp instanceof Array) {\n                    for (let j = 0; j < temp.length; j++) {\n                        if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n                            return this;\n                        }\n                    }\n                }\n            }\n        }\n        this.queries.push({\n            fn: 'onSortBy',\n            e: {\n                fieldName: fieldName,\n                comparer: comparer,\n                direction: order\n            }\n        });\n        return this;\n    }\n    /**\n     * Sorts data in descending order.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    sortByDesc(fieldName) {\n        return this.sortBy(fieldName, 'descending');\n    }\n    /**\n     * Groups data with the given field name.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    group(fieldName, fn, format) {\n        this.sortBy(fieldName, null, true);\n        this.queries.push({\n            fn: 'onGroup',\n            e: {\n                fieldName: fieldName,\n                comparer: fn ? fn : null,\n                format: format ? format : null\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given page index and size.\n     * @param  {number} pageIndex - Defines the current page index.\n     * @param  {number} pageSize - Defines the no of records per page.\n     */\n    page(pageIndex, pageSize) {\n        this.queries.push({\n            fn: 'onPage',\n            e: {\n                pageIndex: pageIndex,\n                pageSize: pageSize\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given start and end index.\n     * @param  {number} start - Defines the start index of the datasource.\n     * @param  {number} end - Defines the end index of the datasource.\n     */\n    range(start, end) {\n        this.queries.push({\n            fn: 'onRange',\n            e: {\n                start: start,\n                end: end\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data from the top of the data source based on given number of records count.\n     * @param  {number} nos - Defines the no of records to retrieve from datasource.\n     */\n    take(nos) {\n        this.queries.push({\n            fn: 'onTake',\n            e: {\n                nos: nos\n            }\n        });\n        return this;\n    }\n    /**\n     * Skips data with given number of records count from the top of the data source.\n     * @param  {number} nos - Defines the no of records skip in the datasource.\n     */\n    skip(nos) {\n        this.queries.push({\n            fn: 'onSkip',\n            e: { nos: nos }\n        });\n        return this;\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     */\n    select(fieldNames) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [].slice.call([fieldNames], 0);\n        }\n        this.queries.push({\n            fn: 'onSelect',\n            e: { fieldNames: fieldNames }\n        });\n        return this;\n    }\n    /**\n     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n     * @param  {Query} query - Defines the query to relate two tables.\n     * @param  {Function} selectorFn - Defines the custom function to select records.\n     */\n    hierarchy(query, selectorFn) {\n        this.subQuerySelector = selectorFn;\n        this.subQuery = query;\n        return this;\n    }\n    /**\n     * Sets the foreign key which is used to get data from the related table.\n     * @param  {string} key - Defines the foreign key.\n     */\n    foreignKey(key) {\n        this.fKey = key;\n        return this;\n    }\n    /**\n     * It is used to get total number of records in the DataManager execution result.\n     */\n    requiresCount() {\n        this.isCountRequired = true;\n        return this;\n    }\n    //type - sum, avg, min, max\n    /**\n     * Aggregate the data with given type and field name.\n     * @param  {string} type - Defines the aggregate type.\n     * @param  {string} field - Defines the column field to aggregate.\n     */\n    aggregate(type, field) {\n        this.queries.push({\n            fn: 'onAggregates',\n            e: { field: field, type: type }\n        });\n        return this;\n    }\n    /**\n     * Pass array of filterColumn query for performing filter operation.\n     * @param  {QueryOptions[]} queries\n     * @param  {string} name\n     * @hidden\n     */\n    static filterQueries(queries, name) {\n        return queries.filter((q) => {\n            return q.fn === name;\n        });\n    }\n    /**\n     * To get the list of queries which is already filtered in current data source.\n     * @param  {Object[]} queries\n     * @param  {string[]} singles\n     * @hidden\n     */\n    static filterQueryLists(queries, singles) {\n        let filtered = queries.filter((q) => {\n            return singles.indexOf(q.fn) !== -1;\n        });\n        let res = {};\n        for (let i = 0; i < filtered.length; i++) {\n            if (!res[filtered[i].fn]) {\n                res[filtered[i].fn] = filtered[i].e;\n            }\n        }\n        return res;\n    }\n}\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\nclass Predicate {\n    /**\n     * Constructor for Predicate class.\n     * @param  {string|Predicate} field\n     * @param  {string} operator\n     * @param  {string|number|boolean|Predicate|Predicate[]} value\n     * @param  {boolean=false} ignoreCase\n     * @hidden\n     */\n    constructor(field, operator, value, ignoreCase = false, ignoreAccent) {\n        /** @hidden */\n        this.ignoreAccent = false;\n        /** @hidden */\n        this.isComplex = false;\n        if (typeof field === 'string') {\n            this.field = field;\n            this.operator = operator.toLowerCase();\n            this.value = value;\n            this.ignoreCase = ignoreCase;\n            this.ignoreAccent = ignoreAccent;\n            this.isComplex = false;\n            this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n        }\n        else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n            this.isComplex = true;\n            this.condition = operator.toLowerCase();\n            this.predicates = [field];\n            if (value instanceof Array) {\n                [].push.apply(this.predicates, value);\n            }\n            else {\n                this.predicates.push(value);\n            }\n        }\n        return this;\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “and” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static and(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n    }\n    /**\n     * Adds new predicate on existing predicate with “and” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    and(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “or” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static or(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n    }\n    /**\n     * Adds new predicate on existing predicate with “or” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    or(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Converts plain JavaScript object to Predicate object.\n     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n     */\n    static fromJson(json) {\n        if (json instanceof Array) {\n            let res = [];\n            for (let i = 0, len = json.length; i < len; i++) {\n                res.push(this.fromJSONData(json[i]));\n            }\n            return res;\n        }\n        let pred = json;\n        return this.fromJSONData(pred);\n    }\n    /**\n     * Validate the record based on the predicates.\n     * @param  {Object} record - Defines the datasource record.\n     */\n    validate(record) {\n        let predicate = this.predicates ? this.predicates : [];\n        let isAnd;\n        let ret;\n        if (!this.isComplex && this.comparer) {\n            return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n        }\n        isAnd = this.condition === 'and';\n        for (let i = 0; i < predicate.length; i++) {\n            ret = predicate[i].validate(record);\n            if (isAnd) {\n                if (!ret) {\n                    return false;\n                }\n            }\n            else {\n                if (ret) {\n                    return true;\n                }\n            }\n        }\n        return isAnd;\n    }\n    /**\n     * Converts predicates to plain JavaScript.\n     * This method is uses Json stringify when serializing Predicate object.\n     */\n    toJson() {\n        let predicates;\n        let p;\n        if (this.isComplex) {\n            predicates = [];\n            p = this.predicates;\n            for (let i = 0; i < p.length; i++) {\n                predicates.push(p[i].toJson());\n            }\n        }\n        return {\n            isComplex: this.isComplex,\n            field: this.field,\n            operator: this.operator,\n            value: this.value,\n            ignoreCase: this.ignoreCase,\n            ignoreAccent: this.ignoreAccent,\n            condition: this.condition,\n            predicates: predicates\n        };\n    }\n    static combinePredicates(predicates, operator) {\n        if (predicates.length === 1) {\n            if (!(predicates[0] instanceof Array)) {\n                return predicates[0];\n            }\n            predicates = predicates[0];\n        }\n        return new Predicate(predicates[0], operator, predicates.slice(1));\n    }\n    static combine(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n        if (field instanceof Predicate) {\n            return Predicate[condition](pred, field);\n        }\n        if (typeof field === 'string') {\n            return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n        }\n        return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n    }\n    static fromJSONData(json) {\n        let preds = json.predicates || [];\n        let len = preds.length;\n        let predicates = [];\n        let result;\n        for (let i = 0; i < len; i++) {\n            predicates.push(this.fromJSONData(preds[i]));\n        }\n        if (!json.isComplex) {\n            result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n        }\n        else {\n            result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n        }\n        return result;\n    }\n}\n\nconst consts = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Data manager common utility methods.\n * @hidden\n */\nclass DataUtil {\n    /**\n     * Returns the value by invoking the provided parameter function.\n     * If the paramater is not of type function then it will be returned as it is.\n     * @param  {Function|string|string[]|number} value\n     * @param  {Object} inst?\n     * @hidden\n     */\n    static getValue(value, inst) {\n        if (typeof value === 'function') {\n            return value.call(inst || {});\n        }\n        return value;\n    }\n    /**\n     * Returns true if the input string ends with given string.\n     * @param  {string} input\n     * @param  {string} substr\n     */\n    static endsWith(input, substr) {\n        return input.slice && input.slice(-substr.length) === substr;\n    }\n    /**\n     * Returns true if the input string starts with given string.\n     * @param  {string} str\n     * @param  {string} startstr\n     */\n    static startsWith(input, start) {\n        return input.slice(0, start.length) === start;\n    }\n    /**\n     * To return the sorting function based on the string.\n     * @param  {string} order\n     * @hidden\n     */\n    static fnSort(order) {\n        order = order ? DataUtil.toLowerCase(order) : 'ascending';\n        if (order === 'ascending') {\n            return this.fnAscending;\n        }\n        return this.fnDescending;\n    }\n    /**\n     * Comparer function which is used to sort the data in ascending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnAscending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return -1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y);\n        }\n        if (x === null || x === undefined) {\n            return 1;\n        }\n        return x - y;\n    }\n    /**\n     * Comparer function which is used to sort the data in descending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnDescending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return 1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y) * -1;\n        }\n        if (x === null || x === undefined) {\n            return -1;\n        }\n        return y - x;\n    }\n    static extractFields(obj, fields) {\n        let newObj = {};\n        for (let i = 0; i < fields.length; i++) {\n            newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);\n        }\n        return newObj;\n    }\n    /**\n     * Select objects by given fields from jsonArray.\n     * @param  {Object[]} jsonArray\n     * @param  {string[]} fields\n     */\n    static select(jsonArray, fields) {\n        let newData = [];\n        for (let i = 0; i < jsonArray.length; i++) {\n            newData.push(this.extractFields(jsonArray[i], fields));\n        }\n        return newData;\n    }\n    /**\n     * Group the input data based on the field name.\n     * It also performs aggregation of the grouped records based on the aggregates paramater.\n     * @param  {Object[]} jsonArray\n     * @param  {string} field?\n     * @param  {Object[]} agg?\n     * @param  {number} level?\n     * @param  {Object[]} groupDs?\n     */\n    static group(jsonArray, field, aggregates, level, groupDs, format) {\n        level = level || 1;\n        let jsonData = jsonArray;\n        let guid = 'GroupGuid';\n        if (jsonData.GroupGuid === consts[guid]) {\n            for (let j = 0; j < jsonData.length; j++) {\n                if (!isNullOrUndefined(groupDs)) {\n                    let indx = -1;\n                    let temp = groupDs.filter((e) => { return e.key === jsonData[j].key; });\n                    indx = groupDs.indexOf(temp[0]);\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format);\n                    jsonData[j].count = groupDs[indx].count;\n                }\n                else {\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format);\n                    jsonData[j].count = jsonData[j].items.length;\n                }\n            }\n            jsonData.childLevels += 1;\n            return jsonData;\n        }\n        let grouped = {};\n        let groupedArray = [];\n        groupedArray.GroupGuid = consts[guid];\n        groupedArray.level = level;\n        groupedArray.childLevels = 0;\n        groupedArray.records = jsonData;\n        for (let i = 0; i < jsonData.length; i++) {\n            let val = this.getVal(jsonData, i, field);\n            if (!isNullOrUndefined(format)) {\n                val = format(val, field);\n            }\n            if (!grouped[val]) {\n                grouped[val] = {\n                    key: val,\n                    count: 0,\n                    items: [],\n                    aggregates: {},\n                    field: field\n                };\n                groupedArray.push(grouped[val]);\n                if (!isNullOrUndefined(groupDs)) {\n                    let tempObj = groupDs.filter((e) => { return e.key === grouped[val].key; });\n                    grouped[val].count = tempObj[0].count;\n                }\n            }\n            grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;\n            grouped[val].items.push(jsonData[i]);\n        }\n        if (aggregates && aggregates.length) {\n            for (let i = 0; i < groupedArray.length; i++) {\n                let res = {};\n                let fn;\n                let aggs = aggregates;\n                for (let j = 0; j < aggregates.length; j++) {\n                    fn = DataUtil.aggregates[aggregates[j].type];\n                    if (!isNullOrUndefined(groupDs)) {\n                        let temp = groupDs.filter((e) => { return e.key === groupedArray[i].key; });\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);\n                        }\n                    }\n                    else {\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);\n                        }\n                    }\n                }\n                groupedArray[i].aggregates = res;\n            }\n        }\n        return jsonData.length && groupedArray || jsonData;\n    }\n    /**\n     * It is used to categorize the multiple items based on a specific field in jsonArray.\n     * The hierarchical queries are commonly required when you use foreign key binding.\n     * @param  {string} fKey\n     * @param  {string} from\n     * @param  {Object[]} source\n     * @param  {Group} lookup?\n     * @param  {string} pKey?\n     * @hidden\n     */\n    static buildHierarchy(fKey, from, source, lookup, pKey) {\n        let i;\n        let grp = {};\n        let temp;\n        if (lookup.result) {\n            lookup = lookup.result;\n        }\n        if (lookup.GroupGuid) {\n            this.throwError('DataManager: Do not have support Grouping in hierarchy');\n        }\n        for (i = 0; i < lookup.length; i++) {\n            let fKeyData = this.getObject(fKey, lookup[i]);\n            temp = grp[fKeyData] || (grp[fKeyData] = []);\n            temp.push(lookup[i]);\n        }\n        for (i = 0; i < source.length; i++) {\n            let fKeyData = this.getObject(pKey || fKey, source[i]);\n            source[i][from] = grp[fKeyData];\n        }\n    }\n    /**\n     * The method used to get the field names which started with specified characters.\n     * @param  {Object} obj\n     * @param  {string[]} fields?\n     * @param  {string} prefix?\n     * @hidden\n     */\n    static getFieldList(obj, fields, prefix) {\n        if (prefix === undefined) {\n            prefix = '';\n        }\n        if (fields === undefined || fields === null) {\n            return this.getFieldList(obj, [], prefix);\n        }\n        let copyObj = obj;\n        let keys = Object.keys(obj);\n        for (let prop of keys) {\n            if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {\n                this.getFieldList(copyObj[prop], fields, prefix + prop + '.');\n            }\n            else {\n                fields.push(prefix + prop);\n            }\n        }\n        return fields;\n    }\n    /**\n     * Gets the value of the property in the given object.\n     * The complex object can be accessed by providing the field names concatenated with dot(.).\n     * @param  {string} nameSpace - The name of the property to be accessed.\n     * @param  {Object} from - Defines the source object.\n     */\n    static getObject(nameSpace, from) {\n        if (!nameSpace) {\n            return from;\n        }\n        if (!from) {\n            return undefined;\n        }\n        if (nameSpace.indexOf('.') === -1) {\n            return from[nameSpace];\n        }\n        let value = from;\n        let splits = nameSpace.split('.');\n        for (let i = 0; i < splits.length; i++) {\n            if (value == null) {\n                break;\n            }\n            value = value[splits[i]];\n        }\n        return value;\n    }\n    /**\n     * To set value for the nameSpace in desired object.\n     * @param {string} nameSpace - String value to the get the inner object.\n     * @param {Object} value - Value that you need to set.\n     * @param {Object} obj - Object to get the inner object value.\n     * @return { [key: string]: Object; } | Object\n     * @hidden\n     */\n    static setValue(nameSpace, value, obj) {\n        let keys = nameSpace.toString().split('.');\n        let start = obj || {};\n        let fromObj = start;\n        let i;\n        let length = keys.length;\n        let key;\n        for (i = 0; i < length; i++) {\n            key = keys[i];\n            if (i + 1 === length) {\n                fromObj[key] = value === undefined ? undefined : value;\n            }\n            else if (isNullOrUndefined(fromObj[key])) {\n                fromObj[key] = {};\n            }\n            fromObj = fromObj[key];\n        }\n        return start;\n    }\n    /**\n     * Sort the given data based on the field and comparer.\n     * @param  {Object[]} ds - Defines the input data.\n     * @param  {string} field - Defines the field to be sorted.\n     * @param  {Function} comparer - Defines the comparer function used to sort the records.\n     */\n    static sort(ds, field, comparer) {\n        if (ds.length <= 1) {\n            return ds;\n        }\n        let middle = parseInt((ds.length / 2).toString(), 10);\n        let left = ds.slice(0, middle);\n        let right = ds.slice(middle);\n        left = this.sort(left, field, comparer);\n        right = this.sort(right, field, comparer);\n        return this.merge(left, right, field, comparer);\n    }\n    static ignoreDiacritics(value) {\n        if (typeof value !== 'string') {\n            return value;\n        }\n        let result = value.split('');\n        let newValue = result.map((temp) => temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp);\n        return newValue.join('');\n    }\n    static merge(left, right, fieldName, comparer) {\n        let result = [];\n        let current;\n        while (left.length > 0 || right.length > 0) {\n            if (left.length > 0 && right.length > 0) {\n                if (comparer) {\n                    current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;\n                }\n                else {\n                    current = left[0][fieldName] < left[0][fieldName] ? left : right;\n                }\n            }\n            else {\n                current = left.length > 0 ? left : right;\n            }\n            result.push(current.shift());\n        }\n        return result;\n    }\n    static getVal(array, index, field) {\n        return field ? this.getObject(field, array[index]) : array[index];\n    }\n    static toLowerCase(val) {\n        return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : (val === 0 || val === false) ? val.toString() : '';\n    }\n    /**\n     * To perform the filter operation with specified adaptor and returns the result.\n     * @param  {Object} adaptor\n     * @param  {string} fnName\n     * @param  {Object} param1?\n     * @param  {Object} param2?\n     * @hidden\n     */\n    static callAdaptorFunction(adaptor, fnName, param1, param2) {\n        if (fnName in adaptor) {\n            let res = adaptor[fnName](param1, param2);\n            if (!isNullOrUndefined(res)) {\n                param1 = res;\n            }\n        }\n        return param1;\n    }\n    static getAddParams(adp, dm, query) {\n        let req = {};\n        DataUtil.callAdaptorFunction(adp, 'addParams', {\n            dm: dm,\n            query: query,\n            params: query.params,\n            reqParams: req\n        });\n        return req;\n    }\n    /**\n     * Checks wheather the given input is a plain object or not.\n     * @param  {Object|Object[]} obj\n     */\n    static isPlainObject(obj) {\n        return (!!obj) && (obj.constructor === Object);\n    }\n    /**\n     * Returns true when the browser cross origin request.\n     */\n    static isCors() {\n        let xhr = null;\n        let request = 'XMLHttpRequest';\n        try {\n            xhr = new window[request]();\n        }\n        catch (e) {\n            // No exception handling\n        }\n        return !!xhr && ('withCredentials' in xhr);\n    }\n    /**\n     * Generate random GUID value which will be prefixed with the given value.\n     * @param  {string} prefix\n     */\n    static getGuid(prefix) {\n        let hexs = '0123456789abcdef';\n        let rand;\n        return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, (val, i) => {\n            if ('crypto' in window && 'getRandomValues' in crypto) {\n                let arr = new Uint8Array(1);\n                window.crypto.getRandomValues(arr);\n                rand = arr[0] % 16 | 0;\n            }\n            else {\n                rand = Math.random() * 16 | 0;\n            }\n            return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];\n        });\n    }\n    /**\n     * Checks wheather the given value is null or not.\n     * @param  {string|Object} val\n     * @returns boolean\n     */\n    static isNull(val) {\n        return val === undefined || val === null;\n    }\n    /**\n     * To get the required items from collection of objects.\n     * @param  {Object[]} array\n     * @param  {string} field\n     * @param  {Function} comparer\n     * @returns Object\n     * @hidden\n     */\n    static getItemFromComparer(array, field, comparer) {\n        let keyVal;\n        let current;\n        let key;\n        let i = 0;\n        let castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';\n        if (array.length) {\n            while (isNullOrUndefined(keyVal) && i < array.length) {\n                keyVal = DataUtil.getVal(array, i, field);\n                key = array[i++];\n            }\n        }\n        for (; i < array.length; i++) {\n            current = DataUtil.getVal(array, i, field);\n            if (isNullOrUndefined(current)) {\n                continue;\n            }\n            if (castRequired) {\n                keyVal = +keyVal;\n                current = +current;\n            }\n            if (comparer(keyVal, current) > 0) {\n                keyVal = current;\n                key = array[i];\n            }\n        }\n        return key;\n    }\n    /**\n     * To get distinct values of Array or Array of Objects.\n     * @param  {Object[]} json\n     * @param  {string} field\n     * @param  {boolean} requiresCompleteRecord\n     * @returns Object[]\n     * * distinct array of objects is return when requiresCompleteRecord set as true.\n     * @hidden\n     */\n    static distinct(json, fieldName, requiresCompleteRecord) {\n        requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;\n        let result = [];\n        let val;\n        let tmp = {};\n        json.forEach((data, index) => {\n            val = typeof (json[index]) === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];\n            if (!(val in tmp)) {\n                result.push(!requiresCompleteRecord ? val : json[index]);\n                tmp[val] = 1;\n            }\n        });\n        return result;\n    }\n}\n/**\n * Specifies the value which will be used to adjust the date value to server timezone.\n * @default null\n */\nDataUtil.serverTimezoneOffset = null;\n/**\n * Species whether are not to be parsed with serverTimezoneOffset value.\n * @hidden\n */\nDataUtil.timeZoneHandling = true;\n/**\n * Throw error with the given string as message.\n * @param  {string} er\n */\nDataUtil.throwError = (error) => {\n    try {\n        throw new Error(error);\n    }\n    catch (e) {\n        throw e.message + '\\n' + e.stack;\n    }\n};\nDataUtil.aggregates = {\n    /**\n     * Calculate sum of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    sum: (ds, field) => {\n        let result = 0;\n        let val;\n        let castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';\n        for (let i = 0; i < ds.length; i++) {\n            val = DataUtil.getVal(ds, i, field);\n            if (!isNaN(val) && val !== null) {\n                if (castRequired) {\n                    val = +val;\n                }\n                result += val;\n            }\n        }\n        return result;\n    },\n    /**\n     * Calculate average value of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    average: (ds, field) => {\n        return DataUtil.aggregates.sum(ds, field) / ds.length;\n    },\n    /**\n     * Returns the min value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string|Function} field\n     */\n    min: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));\n    },\n    /**\n     * Returns the max value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     * @returns number\n     */\n    max: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));\n    },\n    /**\n     * Returns the total number of true value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    truecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;\n    },\n    /**\n     * Returns the total number of false value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    falsecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;\n    },\n    /**\n     * Returns the length of the given data.\n     * @param  {Object[]} ds\n     * @param  {string} field?\n     * @returns number\n     */\n    count: (ds, field) => {\n        return ds.length;\n    }\n};\n/**\n * Specifies the Object with filter operators.\n */\nDataUtil.operatorSymbols = {\n    '<': 'lessthan',\n    '>': 'greaterthan',\n    '<=': 'lessthanorequal',\n    '>=': 'greaterthanorequal',\n    '==': 'equal',\n    '!=': 'notequal',\n    '*=': 'contains',\n    '$=': 'endswith',\n    '^=': 'startswith'\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * * It will be used for date/number type filter query.\n */\nDataUtil.odBiOperator = {\n    '<': ' lt ',\n    '>': ' gt ',\n    '<=': ' le ',\n    '>=': ' ge ',\n    '==': ' eq ',\n    '!=': ' ne ',\n    'lessthan': ' lt ',\n    'lessthanorequal': ' le ',\n    'greaterthan': ' gt ',\n    'greaterthanorequal': ' ge ',\n    'equal': ' eq ',\n    'notequal': ' ne '\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odUniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'substringof',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'substringof'\n};\n/**\n * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odv4UniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'contains',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'contains'\n};\nDataUtil.diacritics = {\n    '\\u24B6': 'A',\n    '\\uFF21': 'A',\n    '\\u00C0': 'A',\n    '\\u00C1': 'A',\n    '\\u00C2': 'A',\n    '\\u1EA6': 'A',\n    '\\u1EA4': 'A',\n    '\\u1EAA': 'A',\n    '\\u1EA8': 'A',\n    '\\u00C3': 'A',\n    '\\u0100': 'A',\n    '\\u0102': 'A',\n    '\\u1EB0': 'A',\n    '\\u1EAE': 'A',\n    '\\u1EB4': 'A',\n    '\\u1EB2': 'A',\n    '\\u0226': 'A',\n    '\\u01E0': 'A',\n    '\\u00C4': 'A',\n    '\\u01DE': 'A',\n    '\\u1EA2': 'A',\n    '\\u00C5': 'A',\n    '\\u01FA': 'A',\n    '\\u01CD': 'A',\n    '\\u0200': 'A',\n    '\\u0202': 'A',\n    '\\u1EA0': 'A',\n    '\\u1EAC': 'A',\n    '\\u1EB6': 'A',\n    '\\u1E00': 'A',\n    '\\u0104': 'A',\n    '\\u023A': 'A',\n    '\\u2C6F': 'A',\n    '\\uA732': 'AA',\n    '\\u00C6': 'AE',\n    '\\u01FC': 'AE',\n    '\\u01E2': 'AE',\n    '\\uA734': 'AO',\n    '\\uA736': 'AU',\n    '\\uA738': 'AV',\n    '\\uA73A': 'AV',\n    '\\uA73C': 'AY',\n    '\\u24B7': 'B',\n    '\\uFF22': 'B',\n    '\\u1E02': 'B',\n    '\\u1E04': 'B',\n    '\\u1E06': 'B',\n    '\\u0243': 'B',\n    '\\u0182': 'B',\n    '\\u0181': 'B',\n    '\\u24B8': 'C',\n    '\\uFF23': 'C',\n    '\\u0106': 'C',\n    '\\u0108': 'C',\n    '\\u010A': 'C',\n    '\\u010C': 'C',\n    '\\u00C7': 'C',\n    '\\u1E08': 'C',\n    '\\u0187': 'C',\n    '\\u023B': 'C',\n    '\\uA73E': 'C',\n    '\\u24B9': 'D',\n    '\\uFF24': 'D',\n    '\\u1E0A': 'D',\n    '\\u010E': 'D',\n    '\\u1E0C': 'D',\n    '\\u1E10': 'D',\n    '\\u1E12': 'D',\n    '\\u1E0E': 'D',\n    '\\u0110': 'D',\n    '\\u018B': 'D',\n    '\\u018A': 'D',\n    '\\u0189': 'D',\n    '\\uA779': 'D',\n    '\\u01F1': 'DZ',\n    '\\u01C4': 'DZ',\n    '\\u01F2': 'Dz',\n    '\\u01C5': 'Dz',\n    '\\u24BA': 'E',\n    '\\uFF25': 'E',\n    '\\u00C8': 'E',\n    '\\u00C9': 'E',\n    '\\u00CA': 'E',\n    '\\u1EC0': 'E',\n    '\\u1EBE': 'E',\n    '\\u1EC4': 'E',\n    '\\u1EC2': 'E',\n    '\\u1EBC': 'E',\n    '\\u0112': 'E',\n    '\\u1E14': 'E',\n    '\\u1E16': 'E',\n    '\\u0114': 'E',\n    '\\u0116': 'E',\n    '\\u00CB': 'E',\n    '\\u1EBA': 'E',\n    '\\u011A': 'E',\n    '\\u0204': 'E',\n    '\\u0206': 'E',\n    '\\u1EB8': 'E',\n    '\\u1EC6': 'E',\n    '\\u0228': 'E',\n    '\\u1E1C': 'E',\n    '\\u0118': 'E',\n    '\\u1E18': 'E',\n    '\\u1E1A': 'E',\n    '\\u0190': 'E',\n    '\\u018E': 'E',\n    '\\u24BB': 'F',\n    '\\uFF26': 'F',\n    '\\u1E1E': 'F',\n    '\\u0191': 'F',\n    '\\uA77B': 'F',\n    '\\u24BC': 'G',\n    '\\uFF27': 'G',\n    '\\u01F4': 'G',\n    '\\u011C': 'G',\n    '\\u1E20': 'G',\n    '\\u011E': 'G',\n    '\\u0120': 'G',\n    '\\u01E6': 'G',\n    '\\u0122': 'G',\n    '\\u01E4': 'G',\n    '\\u0193': 'G',\n    '\\uA7A0': 'G',\n    '\\uA77D': 'G',\n    '\\uA77E': 'G',\n    '\\u24BD': 'H',\n    '\\uFF28': 'H',\n    '\\u0124': 'H',\n    '\\u1E22': 'H',\n    '\\u1E26': 'H',\n    '\\u021E': 'H',\n    '\\u1E24': 'H',\n    '\\u1E28': 'H',\n    '\\u1E2A': 'H',\n    '\\u0126': 'H',\n    '\\u2C67': 'H',\n    '\\u2C75': 'H',\n    '\\uA78D': 'H',\n    '\\u24BE': 'I',\n    '\\uFF29': 'I',\n    '\\u00CC': 'I',\n    '\\u00CD': 'I',\n    '\\u00CE': 'I',\n    '\\u0128': 'I',\n    '\\u012A': 'I',\n    '\\u012C': 'I',\n    '\\u0130': 'I',\n    '\\u00CF': 'I',\n    '\\u1E2E': 'I',\n    '\\u1EC8': 'I',\n    '\\u01CF': 'I',\n    '\\u0208': 'I',\n    '\\u020A': 'I',\n    '\\u1ECA': 'I',\n    '\\u012E': 'I',\n    '\\u1E2C': 'I',\n    '\\u0197': 'I',\n    '\\u24BF': 'J',\n    '\\uFF2A': 'J',\n    '\\u0134': 'J',\n    '\\u0248': 'J',\n    '\\u24C0': 'K',\n    '\\uFF2B': 'K',\n    '\\u1E30': 'K',\n    '\\u01E8': 'K',\n    '\\u1E32': 'K',\n    '\\u0136': 'K',\n    '\\u1E34': 'K',\n    '\\u0198': 'K',\n    '\\u2C69': 'K',\n    '\\uA740': 'K',\n    '\\uA742': 'K',\n    '\\uA744': 'K',\n    '\\uA7A2': 'K',\n    '\\u24C1': 'L',\n    '\\uFF2C': 'L',\n    '\\u013F': 'L',\n    '\\u0139': 'L',\n    '\\u013D': 'L',\n    '\\u1E36': 'L',\n    '\\u1E38': 'L',\n    '\\u013B': 'L',\n    '\\u1E3C': 'L',\n    '\\u1E3A': 'L',\n    '\\u0141': 'L',\n    '\\u023D': 'L',\n    '\\u2C62': 'L',\n    '\\u2C60': 'L',\n    '\\uA748': 'L',\n    '\\uA746': 'L',\n    '\\uA780': 'L',\n    '\\u01C7': 'LJ',\n    '\\u01C8': 'Lj',\n    '\\u24C2': 'M',\n    '\\uFF2D': 'M',\n    '\\u1E3E': 'M',\n    '\\u1E40': 'M',\n    '\\u1E42': 'M',\n    '\\u2C6E': 'M',\n    '\\u019C': 'M',\n    '\\u24C3': 'N',\n    '\\uFF2E': 'N',\n    '\\u01F8': 'N',\n    '\\u0143': 'N',\n    '\\u00D1': 'N',\n    '\\u1E44': 'N',\n    '\\u0147': 'N',\n    '\\u1E46': 'N',\n    '\\u0145': 'N',\n    '\\u1E4A': 'N',\n    '\\u1E48': 'N',\n    '\\u0220': 'N',\n    '\\u019D': 'N',\n    '\\uA790': 'N',\n    '\\uA7A4': 'N',\n    '\\u01CA': 'NJ',\n    '\\u01CB': 'Nj',\n    '\\u24C4': 'O',\n    '\\uFF2F': 'O',\n    '\\u00D2': 'O',\n    '\\u00D3': 'O',\n    '\\u00D4': 'O',\n    '\\u1ED2': 'O',\n    '\\u1ED0': 'O',\n    '\\u1ED6': 'O',\n    '\\u1ED4': 'O',\n    '\\u00D5': 'O',\n    '\\u1E4C': 'O',\n    '\\u022C': 'O',\n    '\\u1E4E': 'O',\n    '\\u014C': 'O',\n    '\\u1E50': 'O',\n    '\\u1E52': 'O',\n    '\\u014E': 'O',\n    '\\u022E': 'O',\n    '\\u0230': 'O',\n    '\\u00D6': 'O',\n    '\\u022A': 'O',\n    '\\u1ECE': 'O',\n    '\\u0150': 'O',\n    '\\u01D1': 'O',\n    '\\u020C': 'O',\n    '\\u020E': 'O',\n    '\\u01A0': 'O',\n    '\\u1EDC': 'O',\n    '\\u1EDA': 'O',\n    '\\u1EE0': 'O',\n    '\\u1EDE': 'O',\n    '\\u1EE2': 'O',\n    '\\u1ECC': 'O',\n    '\\u1ED8': 'O',\n    '\\u01EA': 'O',\n    '\\u01EC': 'O',\n    '\\u00D8': 'O',\n    '\\u01FE': 'O',\n    '\\u0186': 'O',\n    '\\u019F': 'O',\n    '\\uA74A': 'O',\n    '\\uA74C': 'O',\n    '\\u01A2': 'OI',\n    '\\uA74E': 'OO',\n    '\\u0222': 'OU',\n    '\\u24C5': 'P',\n    '\\uFF30': 'P',\n    '\\u1E54': 'P',\n    '\\u1E56': 'P',\n    '\\u01A4': 'P',\n    '\\u2C63': 'P',\n    '\\uA750': 'P',\n    '\\uA752': 'P',\n    '\\uA754': 'P',\n    '\\u24C6': 'Q',\n    '\\uFF31': 'Q',\n    '\\uA756': 'Q',\n    '\\uA758': 'Q',\n    '\\u024A': 'Q',\n    '\\u24C7': 'R',\n    '\\uFF32': 'R',\n    '\\u0154': 'R',\n    '\\u1E58': 'R',\n    '\\u0158': 'R',\n    '\\u0210': 'R',\n    '\\u0212': 'R',\n    '\\u1E5A': 'R',\n    '\\u1E5C': 'R',\n    '\\u0156': 'R',\n    '\\u1E5E': 'R',\n    '\\u024C': 'R',\n    '\\u2C64': 'R',\n    '\\uA75A': 'R',\n    '\\uA7A6': 'R',\n    '\\uA782': 'R',\n    '\\u24C8': 'S',\n    '\\uFF33': 'S',\n    '\\u1E9E': 'S',\n    '\\u015A': 'S',\n    '\\u1E64': 'S',\n    '\\u015C': 'S',\n    '\\u1E60': 'S',\n    '\\u0160': 'S',\n    '\\u1E66': 'S',\n    '\\u1E62': 'S',\n    '\\u1E68': 'S',\n    '\\u0218': 'S',\n    '\\u015E': 'S',\n    '\\u2C7E': 'S',\n    '\\uA7A8': 'S',\n    '\\uA784': 'S',\n    '\\u24C9': 'T',\n    '\\uFF34': 'T',\n    '\\u1E6A': 'T',\n    '\\u0164': 'T',\n    '\\u1E6C': 'T',\n    '\\u021A': 'T',\n    '\\u0162': 'T',\n    '\\u1E70': 'T',\n    '\\u1E6E': 'T',\n    '\\u0166': 'T',\n    '\\u01AC': 'T',\n    '\\u01AE': 'T',\n    '\\u023E': 'T',\n    '\\uA786': 'T',\n    '\\uA728': 'TZ',\n    '\\u24CA': 'U',\n    '\\uFF35': 'U',\n    '\\u00D9': 'U',\n    '\\u00DA': 'U',\n    '\\u00DB': 'U',\n    '\\u0168': 'U',\n    '\\u1E78': 'U',\n    '\\u016A': 'U',\n    '\\u1E7A': 'U',\n    '\\u016C': 'U',\n    '\\u00DC': 'U',\n    '\\u01DB': 'U',\n    '\\u01D7': 'U',\n    '\\u01D5': 'U',\n    '\\u01D9': 'U',\n    '\\u1EE6': 'U',\n    '\\u016E': 'U',\n    '\\u0170': 'U',\n    '\\u01D3': 'U',\n    '\\u0214': 'U',\n    '\\u0216': 'U',\n    '\\u01AF': 'U',\n    '\\u1EEA': 'U',\n    '\\u1EE8': 'U',\n    '\\u1EEE': 'U',\n    '\\u1EEC': 'U',\n    '\\u1EF0': 'U',\n    '\\u1EE4': 'U',\n    '\\u1E72': 'U',\n    '\\u0172': 'U',\n    '\\u1E76': 'U',\n    '\\u1E74': 'U',\n    '\\u0244': 'U',\n    '\\u24CB': 'V',\n    '\\uFF36': 'V',\n    '\\u1E7C': 'V',\n    '\\u1E7E': 'V',\n    '\\u01B2': 'V',\n    '\\uA75E': 'V',\n    '\\u0245': 'V',\n    '\\uA760': 'VY',\n    '\\u24CC': 'W',\n    '\\uFF37': 'W',\n    '\\u1E80': 'W',\n    '\\u1E82': 'W',\n    '\\u0174': 'W',\n    '\\u1E86': 'W',\n    '\\u1E84': 'W',\n    '\\u1E88': 'W',\n    '\\u2C72': 'W',\n    '\\u24CD': 'X',\n    '\\uFF38': 'X',\n    '\\u1E8A': 'X',\n    '\\u1E8C': 'X',\n    '\\u24CE': 'Y',\n    '\\uFF39': 'Y',\n    '\\u1EF2': 'Y',\n    '\\u00DD': 'Y',\n    '\\u0176': 'Y',\n    '\\u1EF8': 'Y',\n    '\\u0232': 'Y',\n    '\\u1E8E': 'Y',\n    '\\u0178': 'Y',\n    '\\u1EF6': 'Y',\n    '\\u1EF4': 'Y',\n    '\\u01B3': 'Y',\n    '\\u024E': 'Y',\n    '\\u1EFE': 'Y',\n    '\\u24CF': 'Z',\n    '\\uFF3A': 'Z',\n    '\\u0179': 'Z',\n    '\\u1E90': 'Z',\n    '\\u017B': 'Z',\n    '\\u017D': 'Z',\n    '\\u1E92': 'Z',\n    '\\u1E94': 'Z',\n    '\\u01B5': 'Z',\n    '\\u0224': 'Z',\n    '\\u2C7F': 'Z',\n    '\\u2C6B': 'Z',\n    '\\uA762': 'Z',\n    '\\u24D0': 'a',\n    '\\uFF41': 'a',\n    '\\u1E9A': 'a',\n    '\\u00E0': 'a',\n    '\\u00E1': 'a',\n    '\\u00E2': 'a',\n    '\\u1EA7': 'a',\n    '\\u1EA5': 'a',\n    '\\u1EAB': 'a',\n    '\\u1EA9': 'a',\n    '\\u00E3': 'a',\n    '\\u0101': 'a',\n    '\\u0103': 'a',\n    '\\u1EB1': 'a',\n    '\\u1EAF': 'a',\n    '\\u1EB5': 'a',\n    '\\u1EB3': 'a',\n    '\\u0227': 'a',\n    '\\u01E1': 'a',\n    '\\u00E4': 'a',\n    '\\u01DF': 'a',\n    '\\u1EA3': 'a',\n    '\\u00E5': 'a',\n    '\\u01FB': 'a',\n    '\\u01CE': 'a',\n    '\\u0201': 'a',\n    '\\u0203': 'a',\n    '\\u1EA1': 'a',\n    '\\u1EAD': 'a',\n    '\\u1EB7': 'a',\n    '\\u1E01': 'a',\n    '\\u0105': 'a',\n    '\\u2C65': 'a',\n    '\\u0250': 'a',\n    '\\uA733': 'aa',\n    '\\u00E6': 'ae',\n    '\\u01FD': 'ae',\n    '\\u01E3': 'ae',\n    '\\uA735': 'ao',\n    '\\uA737': 'au',\n    '\\uA739': 'av',\n    '\\uA73B': 'av',\n    '\\uA73D': 'ay',\n    '\\u24D1': 'b',\n    '\\uFF42': 'b',\n    '\\u1E03': 'b',\n    '\\u1E05': 'b',\n    '\\u1E07': 'b',\n    '\\u0180': 'b',\n    '\\u0183': 'b',\n    '\\u0253': 'b',\n    '\\u24D2': 'c',\n    '\\uFF43': 'c',\n    '\\u0107': 'c',\n    '\\u0109': 'c',\n    '\\u010B': 'c',\n    '\\u010D': 'c',\n    '\\u00E7': 'c',\n    '\\u1E09': 'c',\n    '\\u0188': 'c',\n    '\\u023C': 'c',\n    '\\uA73F': 'c',\n    '\\u2184': 'c',\n    '\\u24D3': 'd',\n    '\\uFF44': 'd',\n    '\\u1E0B': 'd',\n    '\\u010F': 'd',\n    '\\u1E0D': 'd',\n    '\\u1E11': 'd',\n    '\\u1E13': 'd',\n    '\\u1E0F': 'd',\n    '\\u0111': 'd',\n    '\\u018C': 'd',\n    '\\u0256': 'd',\n    '\\u0257': 'd',\n    '\\uA77A': 'd',\n    '\\u01F3': 'dz',\n    '\\u01C6': 'dz',\n    '\\u24D4': 'e',\n    '\\uFF45': 'e',\n    '\\u00E8': 'e',\n    '\\u00E9': 'e',\n    '\\u00EA': 'e',\n    '\\u1EC1': 'e',\n    '\\u1EBF': 'e',\n    '\\u1EC5': 'e',\n    '\\u1EC3': 'e',\n    '\\u1EBD': 'e',\n    '\\u0113': 'e',\n    '\\u1E15': 'e',\n    '\\u1E17': 'e',\n    '\\u0115': 'e',\n    '\\u0117': 'e',\n    '\\u00EB': 'e',\n    '\\u1EBB': 'e',\n    '\\u011B': 'e',\n    '\\u0205': 'e',\n    '\\u0207': 'e',\n    '\\u1EB9': 'e',\n    '\\u1EC7': 'e',\n    '\\u0229': 'e',\n    '\\u1E1D': 'e',\n    '\\u0119': 'e',\n    '\\u1E19': 'e',\n    '\\u1E1B': 'e',\n    '\\u0247': 'e',\n    '\\u025B': 'e',\n    '\\u01DD': 'e',\n    '\\u24D5': 'f',\n    '\\uFF46': 'f',\n    '\\u1E1F': 'f',\n    '\\u0192': 'f',\n    '\\uA77C': 'f',\n    '\\u24D6': 'g',\n    '\\uFF47': 'g',\n    '\\u01F5': 'g',\n    '\\u011D': 'g',\n    '\\u1E21': 'g',\n    '\\u011F': 'g',\n    '\\u0121': 'g',\n    '\\u01E7': 'g',\n    '\\u0123': 'g',\n    '\\u01E5': 'g',\n    '\\u0260': 'g',\n    '\\uA7A1': 'g',\n    '\\u1D79': 'g',\n    '\\uA77F': 'g',\n    '\\u24D7': 'h',\n    '\\uFF48': 'h',\n    '\\u0125': 'h',\n    '\\u1E23': 'h',\n    '\\u1E27': 'h',\n    '\\u021F': 'h',\n    '\\u1E25': 'h',\n    '\\u1E29': 'h',\n    '\\u1E2B': 'h',\n    '\\u1E96': 'h',\n    '\\u0127': 'h',\n    '\\u2C68': 'h',\n    '\\u2C76': 'h',\n    '\\u0265': 'h',\n    '\\u0195': 'hv',\n    '\\u24D8': 'i',\n    '\\uFF49': 'i',\n    '\\u00EC': 'i',\n    '\\u00ED': 'i',\n    '\\u00EE': 'i',\n    '\\u0129': 'i',\n    '\\u012B': 'i',\n    '\\u012D': 'i',\n    '\\u00EF': 'i',\n    '\\u1E2F': 'i',\n    '\\u1EC9': 'i',\n    '\\u01D0': 'i',\n    '\\u0209': 'i',\n    '\\u020B': 'i',\n    '\\u1ECB': 'i',\n    '\\u012F': 'i',\n    '\\u1E2D': 'i',\n    '\\u0268': 'i',\n    '\\u0131': 'i',\n    '\\u24D9': 'j',\n    '\\uFF4A': 'j',\n    '\\u0135': 'j',\n    '\\u01F0': 'j',\n    '\\u0249': 'j',\n    '\\u24DA': 'k',\n    '\\uFF4B': 'k',\n    '\\u1E31': 'k',\n    '\\u01E9': 'k',\n    '\\u1E33': 'k',\n    '\\u0137': 'k',\n    '\\u1E35': 'k',\n    '\\u0199': 'k',\n    '\\u2C6A': 'k',\n    '\\uA741': 'k',\n    '\\uA743': 'k',\n    '\\uA745': 'k',\n    '\\uA7A3': 'k',\n    '\\u24DB': 'l',\n    '\\uFF4C': 'l',\n    '\\u0140': 'l',\n    '\\u013A': 'l',\n    '\\u013E': 'l',\n    '\\u1E37': 'l',\n    '\\u1E39': 'l',\n    '\\u013C': 'l',\n    '\\u1E3D': 'l',\n    '\\u1E3B': 'l',\n    '\\u017F': 'l',\n    '\\u0142': 'l',\n    '\\u019A': 'l',\n    '\\u026B': 'l',\n    '\\u2C61': 'l',\n    '\\uA749': 'l',\n    '\\uA781': 'l',\n    '\\uA747': 'l',\n    '\\u01C9': 'lj',\n    '\\u24DC': 'm',\n    '\\uFF4D': 'm',\n    '\\u1E3F': 'm',\n    '\\u1E41': 'm',\n    '\\u1E43': 'm',\n    '\\u0271': 'm',\n    '\\u026F': 'm',\n    '\\u24DD': 'n',\n    '\\uFF4E': 'n',\n    '\\u01F9': 'n',\n    '\\u0144': 'n',\n    '\\u00F1': 'n',\n    '\\u1E45': 'n',\n    '\\u0148': 'n',\n    '\\u1E47': 'n',\n    '\\u0146': 'n',\n    '\\u1E4B': 'n',\n    '\\u1E49': 'n',\n    '\\u019E': 'n',\n    '\\u0272': 'n',\n    '\\u0149': 'n',\n    '\\uA791': 'n',\n    '\\uA7A5': 'n',\n    '\\u01CC': 'nj',\n    '\\u24DE': 'o',\n    '\\uFF4F': 'o',\n    '\\u00F2': 'o',\n    '\\u00F3': 'o',\n    '\\u00F4': 'o',\n    '\\u1ED3': 'o',\n    '\\u1ED1': 'o',\n    '\\u1ED7': 'o',\n    '\\u1ED5': 'o',\n    '\\u00F5': 'o',\n    '\\u1E4D': 'o',\n    '\\u022D': 'o',\n    '\\u1E4F': 'o',\n    '\\u014D': 'o',\n    '\\u1E51': 'o',\n    '\\u1E53': 'o',\n    '\\u014F': 'o',\n    '\\u022F': 'o',\n    '\\u0231': 'o',\n    '\\u00F6': 'o',\n    '\\u022B': 'o',\n    '\\u1ECF': 'o',\n    '\\u0151': 'o',\n    '\\u01D2': 'o',\n    '\\u020D': 'o',\n    '\\u020F': 'o',\n    '\\u01A1': 'o',\n    '\\u1EDD': 'o',\n    '\\u1EDB': 'o',\n    '\\u1EE1': 'o',\n    '\\u1EDF': 'o',\n    '\\u1EE3': 'o',\n    '\\u1ECD': 'o',\n    '\\u1ED9': 'o',\n    '\\u01EB': 'o',\n    '\\u01ED': 'o',\n    '\\u00F8': 'o',\n    '\\u01FF': 'o',\n    '\\u0254': 'o',\n    '\\uA74B': 'o',\n    '\\uA74D': 'o',\n    '\\u0275': 'o',\n    '\\u01A3': 'oi',\n    '\\u0223': 'ou',\n    '\\uA74F': 'oo',\n    '\\u24DF': 'p',\n    '\\uFF50': 'p',\n    '\\u1E55': 'p',\n    '\\u1E57': 'p',\n    '\\u01A5': 'p',\n    '\\u1D7D': 'p',\n    '\\uA751': 'p',\n    '\\uA753': 'p',\n    '\\uA755': 'p',\n    '\\u24E0': 'q',\n    '\\uFF51': 'q',\n    '\\u024B': 'q',\n    '\\uA757': 'q',\n    '\\uA759': 'q',\n    '\\u24E1': 'r',\n    '\\uFF52': 'r',\n    '\\u0155': 'r',\n    '\\u1E59': 'r',\n    '\\u0159': 'r',\n    '\\u0211': 'r',\n    '\\u0213': 'r',\n    '\\u1E5B': 'r',\n    '\\u1E5D': 'r',\n    '\\u0157': 'r',\n    '\\u1E5F': 'r',\n    '\\u024D': 'r',\n    '\\u027D': 'r',\n    '\\uA75B': 'r',\n    '\\uA7A7': 'r',\n    '\\uA783': 'r',\n    '\\u24E2': 's',\n    '\\uFF53': 's',\n    '\\u00DF': 's',\n    '\\u015B': 's',\n    '\\u1E65': 's',\n    '\\u015D': 's',\n    '\\u1E61': 's',\n    '\\u0161': 's',\n    '\\u1E67': 's',\n    '\\u1E63': 's',\n    '\\u1E69': 's',\n    '\\u0219': 's',\n    '\\u015F': 's',\n    '\\u023F': 's',\n    '\\uA7A9': 's',\n    '\\uA785': 's',\n    '\\u1E9B': 's',\n    '\\u24E3': 't',\n    '\\uFF54': 't',\n    '\\u1E6B': 't',\n    '\\u1E97': 't',\n    '\\u0165': 't',\n    '\\u1E6D': 't',\n    '\\u021B': 't',\n    '\\u0163': 't',\n    '\\u1E71': 't',\n    '\\u1E6F': 't',\n    '\\u0167': 't',\n    '\\u01AD': 't',\n    '\\u0288': 't',\n    '\\u2C66': 't',\n    '\\uA787': 't',\n    '\\uA729': 'tz',\n    '\\u24E4': 'u',\n    '\\uFF55': 'u',\n    '\\u00F9': 'u',\n    '\\u00FA': 'u',\n    '\\u00FB': 'u',\n    '\\u0169': 'u',\n    '\\u1E79': 'u',\n    '\\u016B': 'u',\n    '\\u1E7B': 'u',\n    '\\u016D': 'u',\n    '\\u00FC': 'u',\n    '\\u01DC': 'u',\n    '\\u01D8': 'u',\n    '\\u01D6': 'u',\n    '\\u01DA': 'u',\n    '\\u1EE7': 'u',\n    '\\u016F': 'u',\n    '\\u0171': 'u',\n    '\\u01D4': 'u',\n    '\\u0215': 'u',\n    '\\u0217': 'u',\n    '\\u01B0': 'u',\n    '\\u1EEB': 'u',\n    '\\u1EE9': 'u',\n    '\\u1EEF': 'u',\n    '\\u1EED': 'u',\n    '\\u1EF1': 'u',\n    '\\u1EE5': 'u',\n    '\\u1E73': 'u',\n    '\\u0173': 'u',\n    '\\u1E77': 'u',\n    '\\u1E75': 'u',\n    '\\u0289': 'u',\n    '\\u24E5': 'v',\n    '\\uFF56': 'v',\n    '\\u1E7D': 'v',\n    '\\u1E7F': 'v',\n    '\\u028B': 'v',\n    '\\uA75F': 'v',\n    '\\u028C': 'v',\n    '\\uA761': 'vy',\n    '\\u24E6': 'w',\n    '\\uFF57': 'w',\n    '\\u1E81': 'w',\n    '\\u1E83': 'w',\n    '\\u0175': 'w',\n    '\\u1E87': 'w',\n    '\\u1E85': 'w',\n    '\\u1E98': 'w',\n    '\\u1E89': 'w',\n    '\\u2C73': 'w',\n    '\\u24E7': 'x',\n    '\\uFF58': 'x',\n    '\\u1E8B': 'x',\n    '\\u1E8D': 'x',\n    '\\u24E8': 'y',\n    '\\uFF59': 'y',\n    '\\u1EF3': 'y',\n    '\\u00FD': 'y',\n    '\\u0177': 'y',\n    '\\u1EF9': 'y',\n    '\\u0233': 'y',\n    '\\u1E8F': 'y',\n    '\\u00FF': 'y',\n    '\\u1EF7': 'y',\n    '\\u1E99': 'y',\n    '\\u1EF5': 'y',\n    '\\u01B4': 'y',\n    '\\u024F': 'y',\n    '\\u1EFF': 'y',\n    '\\u24E9': 'z',\n    '\\uFF5A': 'z',\n    '\\u017A': 'z',\n    '\\u1E91': 'z',\n    '\\u017C': 'z',\n    '\\u017E': 'z',\n    '\\u1E93': 'z',\n    '\\u1E95': 'z',\n    '\\u01B6': 'z',\n    '\\u0225': 'z',\n    '\\u0240': 'z',\n    '\\u2C6C': 'z',\n    '\\uA763': 'z',\n    '\\u0386': '\\u0391',\n    '\\u0388': '\\u0395',\n    '\\u0389': '\\u0397',\n    '\\u038A': '\\u0399',\n    '\\u03AA': '\\u0399',\n    '\\u038C': '\\u039F',\n    '\\u038E': '\\u03A5',\n    '\\u03AB': '\\u03A5',\n    '\\u038F': '\\u03A9',\n    '\\u03AC': '\\u03B1',\n    '\\u03AD': '\\u03B5',\n    '\\u03AE': '\\u03B7',\n    '\\u03AF': '\\u03B9',\n    '\\u03CA': '\\u03B9',\n    '\\u0390': '\\u03B9',\n    '\\u03CC': '\\u03BF',\n    '\\u03CD': '\\u03C5',\n    '\\u03CB': '\\u03C5',\n    '\\u03B0': '\\u03C5',\n    '\\u03C9': '\\u03C9',\n    '\\u03C2': '\\u03C3'\n};\nDataUtil.fnOperators = {\n    /**\n     * Returns true when the actual input is equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     * @param  {boolean} ignoreAccent?\n     */\n    equal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);\n        }\n        return actual === expected;\n    },\n    /**\n     * Returns true when the actual input is not equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    notequal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);\n    },\n    /**\n     * Returns true when the actual input is less than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);\n        }\n        return actual < expected;\n    },\n    /**\n     * Returns true when the actual input is greater than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);\n        }\n        return actual > expected;\n    },\n    /**\n     * Returns true when the actual input is less than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);\n        }\n        return actual <= expected;\n    },\n    /**\n     * Returns true when the actual input is greater than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);\n        }\n        return actual >= expected;\n    },\n    /**\n     * Returns true when the actual input contains the given string.\n     * @param  {string|number} actual\n     * @param  {string|number} expected\n     * @param  {boolean} ignoreCase?\n     */\n    contains: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n                DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;\n        }\n        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n            actual.toString().indexOf(expected) !== -1;\n    },\n    /**\n     * Returns true when the given input value is not null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    notnull: (actual) => {\n        return actual !== null;\n    },\n    /**\n     * Returns true when the given input value is null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    isnull: (actual) => {\n        return actual === null;\n    },\n    /**\n     * Returns true when the actual input starts with the given string\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    startswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.startsWith(actual, expected);\n    },\n    /**\n     * Returns true when the actual input ends with the given string.\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    endswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.endsWith(actual, expected);\n    },\n    /**\n     * It will return the filter operator based on the filter symbol.\n     * @param  {string} operator\n     * @hidden\n     */\n    processSymbols: (operator) => {\n        let fnName = DataUtil.operatorSymbols[operator];\n        if (fnName) {\n            let fn = DataUtil.fnOperators[fnName];\n            return fn;\n        }\n        return DataUtil.throwError('Query - Process Operator : Invalid operator');\n    },\n    /**\n     * It will return the valid filter operator based on the specified operators.\n     * @param  {string} operator\n     * @hidden\n     */\n    processOperator: (operator) => {\n        let fn = DataUtil.fnOperators[operator];\n        if (fn) {\n            return fn;\n        }\n        return DataUtil.fnOperators.processSymbols(operator);\n    }\n};\n/**\n * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.\n */\nDataUtil.parse = {\n    /**\n     * Parse the given string to the plain JavaScript object.\n     * @param  {string|Object|Object[]} jsonText\n     */\n    parseJson: (jsonText) => {\n        if (typeof jsonText === 'string') {\n            jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);\n        }\n        else if (jsonText instanceof Array) {\n            DataUtil.parse.iterateAndReviveArray(jsonText);\n        }\n        else if (typeof jsonText === 'object' && jsonText !== null) {\n            DataUtil.parse.iterateAndReviveJson(jsonText);\n        }\n        return jsonText;\n    },\n    /**\n     * It will perform on array of values.\n     * @param  {string[]|Object[]} array\n     * @hidden\n     */\n    iterateAndReviveArray: (array) => {\n        for (let i = 0; i < array.length; i++) {\n            if (typeof array[i] === 'object' && array[i] !== null) {\n                DataUtil.parse.iterateAndReviveJson(array[i]);\n            }\n            else if (typeof array[i] === 'string' && !/^[\\s]*\\[|^[\\s]*\\{(.)+:|\\\"/g.test(array[i])) {\n                array[i] = DataUtil.parse.jsonReviver('', array[i]);\n            }\n            else {\n                array[i] = DataUtil.parse.parseJson(array[i]);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {JSON} json\n     * @hidden\n     */\n    iterateAndReviveJson: (json) => {\n        let value;\n        let keys = Object.keys(json);\n        for (let prop of keys) {\n            if (DataUtil.startsWith(prop, '__')) {\n                continue;\n            }\n            value = json[prop];\n            if (typeof value === 'object') {\n                if (value instanceof Array) {\n                    DataUtil.parse.iterateAndReviveArray(value);\n                }\n                else if (value) {\n                    DataUtil.parse.iterateAndReviveJson(value);\n                }\n            }\n            else {\n                json[prop] = DataUtil.parse.jsonReviver(json[prop], value);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {string} field\n     * @param  {string|Date} value\n     * @hidden\n     */\n    jsonReviver: (field, value) => {\n        if (typeof value === 'string') {\n            let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n            let offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;\n            if (ms) {\n                return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);\n            }\n            else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                let isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;\n                let arr = value.split(/[^0-9.]/);\n                if (isUTC) {\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, false);\n                }\n                else {\n                    let utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));\n                    let hrs = parseInt(arr[6], 10);\n                    let mins = parseInt(arr[7], 10);\n                    if (isNaN(hrs) && isNaN(mins)) {\n                        return utcFormat;\n                    }\n                    if (value.indexOf('+') > -1) {\n                        utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);\n                    }\n                    else {\n                        utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);\n                    }\n                    value = DataUtil.dateParse\n                        .toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);\n                }\n                if (DataUtil.serverTimezoneOffset == null) {\n                    value = DataUtil.dateParse.addSelfOffset(value);\n                }\n            }\n        }\n        return value;\n    },\n    /**\n     * Check wheather the given value is JSON or not.\n     * @param  {Object[]} jsonData\n     */\n    isJson: (jsonData) => {\n        if (typeof jsonData[0] === 'string') {\n            return jsonData;\n        }\n        return DataUtil.parse.parseJson(jsonData);\n    },\n    /**\n     * Checks wheather the given value is GUID or not.\n     * @param  {string} value\n     */\n    isGuid: (value) => {\n        let regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;\n        let match = regex.exec(value);\n        return match != null;\n    },\n    /**\n     * The method used to replace the value based on the type.\n     * @param  {Object} value\n     * @param  {boolean} stringify\n     * @hidden\n     */\n    replacer: (value, stringify) => {\n        if (DataUtil.isPlainObject(value)) {\n            return DataUtil.parse.jsonReplacer(value, stringify);\n        }\n        if (value instanceof Array) {\n            return DataUtil.parse.arrayReplacer(value);\n        }\n        if (value instanceof Date) {\n            return DataUtil.parse.jsonReplacer({ val: value }, stringify).val;\n        }\n        return value;\n    },\n    /**\n     * It will replace the JSON value.\n     * @param  {string} key\n     * @param  {Object} val\n     * @hidden\n     */\n    jsonReplacer: (val, stringify) => {\n        let value;\n        let keys = Object.keys(val);\n        for (let prop of keys) {\n            value = val[prop];\n            if (!(value instanceof Date)) {\n                continue;\n            }\n            let d = value;\n            if (DataUtil.serverTimezoneOffset == null) {\n                val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();\n            }\n            else {\n                d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);\n                val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Array of value.\n     * @param  {string} key\n     * @param  {Object[]} val\n     * @hidden\n     */\n    arrayReplacer: (val) => {\n        for (let i = 0; i < val.length; i++) {\n            if (DataUtil.isPlainObject(val[i])) {\n                val[i] = DataUtil.parse.jsonReplacer(val[i]);\n            }\n            else if (val[i] instanceof Date) {\n                val[i] = DataUtil.parse.jsonReplacer({ date: val[i] }).date;\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Date object with respective to UTC format value.\n     * @param  {string} key\n     * @param  {any} value\n     * @hidden\n     */\n    /* tslint:disable-next-line:no-any */\n    jsonDateReplacer: (key, value) => {\n        if (key === 'value' && value) {\n            if (typeof value === 'string') {\n                let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n                if (ms) {\n                    value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);\n                }\n                else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                    let arr = value.split(/[^0-9]/);\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);\n                }\n            }\n            if (value instanceof Date) {\n                value = DataUtil.dateParse.addSelfOffset(value);\n                if (DataUtil.serverTimezoneOffset === null) {\n                    return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();\n                }\n                else {\n                    value = DataUtil.dateParse.toTimeZone(value, (((value.getTimezoneOffset() / 60) * 2)\n                        - DataUtil.serverTimezoneOffset), false);\n                    return value.toJSON();\n                }\n            }\n        }\n        return value;\n    }\n};\n/**\n * @hidden\n */\nDataUtil.dateParse = {\n    addSelfOffset: (input) => {\n        return new Date(+input - (input.getTimezoneOffset() * 60000));\n    },\n    toUTC: (input) => {\n        return new Date(+input + (input.getTimezoneOffset() * 60000));\n    },\n    toTimeZone: (input, offset, utc) => {\n        if (offset === null) {\n            return input;\n        }\n        let unix = utc ? DataUtil.dateParse.toUTC(input) : input;\n        return new Date(+unix - (offset * 3600000));\n    },\n    toLocalTime: (input) => {\n        let datefn = input;\n        let timeZone = -datefn.getTimezoneOffset();\n        let differenceString = timeZone >= 0 ? '+' : '-';\n        let localtimefn = (num) => {\n            let norm = Math.floor(Math.abs(num));\n            return (norm < 10 ? '0' : '') + norm;\n        };\n        let val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) +\n            'T' + localtimefn(datefn.getHours()) +\n            ':' + localtimefn(datefn.getMinutes()) +\n            ':' + localtimefn(datefn.getSeconds()) +\n            differenceString + localtimefn(timeZone / 60) +\n            ':' + localtimefn(timeZone % 60);\n        return val;\n    }\n};\n\n/**\n * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.\n * This is the base adaptor class that other adaptors can extend.\n * @hidden\n */\nclass Adaptor {\n    /**\n     * Constructor for Adaptor class\n     * @param  {DataOptions} ds?\n     * @hidden\n     * @returns aggregates\n     */\n    constructor(ds) {\n        // common options for all the adaptors \n        this.options = {\n            from: 'table',\n            requestType: 'json',\n            sortBy: 'sorted',\n            select: 'select',\n            skip: 'skip',\n            group: 'group',\n            take: 'take',\n            search: 'search',\n            count: 'requiresCounts',\n            where: 'where',\n            aggregates: 'aggregates',\n            expand: 'expand'\n        };\n        /**\n         * Specifies the type of adaptor.\n         * @default Adaptor\n         */\n        this.type = Adaptor;\n        this.dataSource = ds;\n        this.pvt = {};\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {Object} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @returns Object\n     */\n    processResponse(data, ds, query, xhr) {\n        return data;\n    }\n}\n/**\n * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.\n * @hidden\n */\nclass JsonAdaptor extends Adaptor {\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dataManager\n     * @param  {Query} query\n     * @returns Object\n     */\n    processQuery(dataManager, query) {\n        let result = dataManager.dataSource.json.slice(0);\n        let count = result.length;\n        let countFlg = true;\n        let ret;\n        let key;\n        let agg = {};\n        for (let i = 0; i < query.queries.length; i++) {\n            key = query.queries[i];\n            ret = this[key.fn].call(this, result, key.e, query);\n            if (key.fn === 'onAggregates') {\n                agg[key.e.field + ' - ' + key.e.type] = ret;\n            }\n            else {\n                result = ret !== undefined ? ret : result;\n            }\n            if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {\n                countFlg = false;\n            }\n            if (countFlg) {\n                count = result.length;\n            }\n        }\n        if (query.isCountRequired) {\n            result = {\n                result: result,\n                count: count,\n                aggregates: agg\n            };\n        }\n        return result;\n    }\n    /**\n     * Performs batch update in the JSON array which add, remove and update records.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        let i;\n        let deletedRecordsLen = changes.deletedRecords.length;\n        for (i = 0; i < changes.addedRecords.length; i++) {\n            this.insert(dm, changes.addedRecords[i]);\n        }\n        for (i = 0; i < changes.changedRecords.length; i++) {\n            this.update(dm, e.key, changes.changedRecords[i]);\n        }\n        for (i = 0; i < deletedRecordsLen; i++) {\n            this.remove(dm, e.key, changes.deletedRecords[i]);\n        }\n        return changes;\n    }\n    /**\n     * Performs filter operation with the given data and where query.\n     * @param  {Object[]} ds\n     * @param  {{validate:Function}} e\n     */\n    onWhere(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.filter((obj) => {\n            if (e) {\n                return e.validate(obj);\n            }\n        });\n    }\n    /**\n     * Returns aggregate function based on the aggregate type.\n     * @param  {Object[]} ds\n     * @param  {{field:string} e\n     * @param  {string}} type\n     */\n    onAggregates(ds, e) {\n        let fn = DataUtil.aggregates[e.type];\n        if (!ds || !fn || ds.length === 0) {\n            return null;\n        }\n        return fn(ds, e.field);\n    }\n    /**\n     * Performs search operation based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     */\n    onSearch(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        if (e.fieldNames.length === 0) {\n            DataUtil.getFieldList(ds[0], e.fieldNames);\n        }\n        return ds.filter((obj) => {\n            for (let j = 0; j < e.fieldNames.length; j++) {\n                if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    }\n    /**\n     * Sort the data with given direction and field.\n     * @param  {Object[]} ds\n     * @param  {{comparer:(a:Object} e\n     * @param  {Object} b\n     */\n    onSortBy(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let fnCompare;\n        let field = DataUtil.getValue(e.fieldName, query);\n        if (!field) {\n            return ds.sort(e.comparer);\n        }\n        if (field instanceof Array) {\n            field = field.slice(0);\n            for (let i = field.length - 1; i >= 0; i--) {\n                if (!field[i]) {\n                    continue;\n                }\n                fnCompare = e.comparer;\n                if (DataUtil.endsWith(field[i], ' desc')) {\n                    fnCompare = DataUtil.fnSort('descending');\n                    field[i] = field[i].replace(' desc', '');\n                }\n                ds = DataUtil.sort(ds, field[i], fnCompare);\n            }\n            return ds;\n        }\n        return DataUtil.sort(ds, field, e.comparer);\n    }\n    /**\n     * Group the data based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     * @param  {Query} query\n     */\n    onGroup(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let aggQuery = Query.filterQueries(query.queries, 'onAggregates');\n        let agg = [];\n        if (aggQuery.length) {\n            let tmp;\n            for (let i = 0; i < aggQuery.length; i++) {\n                tmp = aggQuery[i].e;\n                agg.push({ type: tmp.type, field: DataUtil.getValue(tmp.field, query) });\n            }\n        }\n        return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);\n    }\n    /**\n     * Retrieves records based on the given page index and size.\n     * @param  {Object[]} ds\n     * @param  {{pageSize:number} e\n     * @param  {number}} pageIndex\n     * @param  {Query} query\n     */\n    onPage(ds, e, query) {\n        let size = DataUtil.getValue(e.pageSize, query);\n        let start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;\n        let end = start + size;\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(start, end);\n    }\n    /**\n     * Retrieves records based on the given start and end index from query.\n     * @param  {Object[]} ds\n     * @param  {{start:number} e\n     * @param  {number}} end\n     */\n    onRange(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));\n    }\n    /**\n     * Picks the given count of records from the top of the datasource.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onTake(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(0, DataUtil.getValue(e.nos));\n    }\n    /**\n     * Skips the given count of records from the data source.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onSkip(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.nos));\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {Object[]} ds\n     * @param  {{fieldNames:string}} e\n     */\n    onSelect(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));\n    }\n    /**\n     * Inserts new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {number} position\n     */\n    insert(dm, data, tableName, query, position) {\n        if (isNullOrUndefined(position)) {\n            return dm.dataSource.json.push(data);\n        }\n        else {\n            return dm.dataSource.json.splice(position, 0, data);\n        }\n    }\n    /**\n     * Remove the data from the dataSource based on the key field value.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    remove(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        if (typeof value === 'object' && !(value instanceof Date)) {\n            value = DataUtil.getObject(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (DataUtil.getObject(keyField, ds[i]) === value) {\n                break;\n            }\n        }\n        return i !== ds.length ? ds.splice(i, 1) : null;\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    update(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        let key;\n        if (!isNullOrUndefined(keyField)) {\n            key = getValue(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (!isNullOrUndefined(keyField) && (getValue(keyField, ds[i])) === key) {\n                break;\n            }\n        }\n        return i < ds.length ? merge(ds[i], value) : null;\n    }\n}\n/**\n * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.\n * It interacts with server-side for all DataManager Queries and CRUD operations.\n * @hidden\n */\nclass UrlAdaptor extends Adaptor {\n    /**\n     * Process the query to generate request body.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns p\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let params = query.params;\n        let url = dm.dataSource.url;\n        let temp;\n        let skip;\n        let take = null;\n        let options = this.options;\n        let request = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        // calc Paging & Range\n        if ('onPage' in singles) {\n            temp = singles.onPage;\n            skip = DataUtil.getValue(temp.pageIndex, query);\n            take = DataUtil.getValue(temp.pageSize, query);\n            skip = (skip - 1) * take;\n        }\n        else if ('onRange' in singles) {\n            temp = singles.onRange;\n            skip = temp.start;\n            take = temp.end - temp.start;\n        }\n        // Sorting\n        for (let i = 0; i < queries.sorts.length; i++) {\n            temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);\n            request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', { name: temp, direction: queries.sorts[i].e.direction }, query));\n        }\n        // hierarchy\n        if (hierarchyFilters) {\n            temp = this.getFiltersFrom(hierarchyFilters, query);\n            if (temp) {\n                request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));\n            }\n        }\n        // Filters\n        for (let i = 0; i < queries.filters.length; i++) {\n            request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query));\n            let keys = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];\n            for (let prop of keys) {\n                if (DataUtil.isNull((request)[prop])) {\n                    delete request[prop];\n                }\n            }\n        }\n        // Searches\n        for (let i = 0; i < queries.searches.length; i++) {\n            temp = queries.searches[i].e;\n            request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {\n                fields: temp.fieldNames,\n                operator: temp.operator,\n                key: temp.searchKey,\n                ignoreCase: temp.ignoreCase\n            }, query));\n        }\n        // Grouping\n        for (let i = 0; i < queries.groups.length; i++) {\n            request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));\n        }\n        // aggregates\n        for (let i = 0; i < queries.aggregates.length; i++) {\n            temp = queries.aggregates[i].e;\n            request.aggregates.push({ type: temp.type, field: DataUtil.getValue(temp.field, query) });\n        }\n        let req = {};\n        this.getRequestQuery(options, query, singles, request, req);\n        // Params\n        DataUtil.callAdaptorFunction(this, 'addParams', { dm: dm, query: query, params: params, reqParams: req });\n        // cleanup\n        let keys = Object.keys(req);\n        for (let prop of keys) {\n            if (DataUtil.isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {\n                delete req[prop];\n            }\n        }\n        if (!(options.skip in req && options.take in req) && take !== null) {\n            req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);\n            req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);\n        }\n        let p = this.pvt;\n        this.pvt = {};\n        if (this.options.requestType === 'json') {\n            return {\n                data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),\n                url: url,\n                pvtData: p,\n                type: 'POST',\n                contentType: 'application/json; charset=utf-8'\n            };\n        }\n        temp = this.convertToQueryString(req, query, dm);\n        temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;\n        return {\n            type: 'GET', url: temp.length ? url.replace(/\\/*$/, temp) : url, pvtData: p\n        };\n    }\n    getRequestQuery(options, query, singles, request, request1) {\n        let param = 'param';\n        let req = request1;\n        req[options.from] = query.fromTable;\n        if (options.apply && query.distincts.length) {\n            req[options.apply] = 'onDistinct' in this ? DataUtil.callAdaptorFunction(this, 'onDistinct', query.distincts) : '';\n        }\n        if (!query.distincts.length && options.expand) {\n            req[options.expand] = 'onExpand' in this && 'onSelect' in singles ?\n                DataUtil.callAdaptorFunction(this, 'onExpand', { selects: DataUtil.getValue(singles.onSelect.fieldNames, query), expands: query.expands }, query) : query.expands;\n        }\n        req[options.select] = 'onSelect' in singles && !query.distincts.length ?\n            DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';\n        req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';\n        req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';\n        req[options.skip] = 'onSkip' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';\n        req[options.take] = 'onTake' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';\n        req[options.where] = request.filters.length || request.searches.length ?\n            DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';\n        req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';\n        req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';\n        req[options.aggregates] = request.aggregates.length ?\n            DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';\n        req[param] = [];\n    }\n    /**\n     * Convert the object from processQuery to string which can be added query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     */\n    convertToQueryString(request, query, dm) {\n        return '';\n        // this needs to be overridden\n    }\n    /**\n     * Return the data from the data manager processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('application/json') !== -1) {\n            let handleTimeZone = DataUtil.timeZoneHandling;\n            if (ds && !ds.timeZoneHandling) {\n                DataUtil.timeZoneHandling = false;\n            }\n            data = DataUtil.parse.parseJson(data);\n            DataUtil.timeZoneHandling = handleTimeZone;\n        }\n        let requests = request;\n        let pvt = requests.pvtData || {};\n        let groupDs = data ? data.groupDs : [];\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        let d = JSON.parse(requests.data);\n        if (d && d.action === 'batch' && data && data.addedRecords) {\n            changes.addedRecords = data.addedRecords;\n            return changes;\n        }\n        if (data && data.d) {\n            data = data.d;\n        }\n        let args = {};\n        if (data && 'count' in data) {\n            args.count = data.count;\n        }\n        args.result = data && data.result ? data.result : data;\n        this.getAggregateResult(pvt, data, args, groupDs, query);\n        return DataUtil.isNull(args.count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    /**\n     * Add the group query to the adaptor`s option.\n     * @param  {Object[]} e\n     * @returns void\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return e;\n    }\n    /**\n     * Add the aggregate query to the adaptor`s option.\n     * @param  {Aggregates[]} e\n     * @returns void\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let url;\n        let key;\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e[url],\n                key: e[key]\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @returns void\n     */\n    beforeSend(dm, request) {\n        // need to extend this method\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName\n     */\n    insert(dm, data, tableName, query) {\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number|string} value\n     * @param  {string} tableName\n     */\n    remove(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: value,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: value,\n                action: 'update',\n                keyColumn: keyField,\n                key: DataUtil.getObject(keyField, value),\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * To generate the predicate based on the filtered query.\n     * @param  {Object[]|string[]|number[]} data\n     * @param  {Query} query\n     * @hidden\n     */\n    getFiltersFrom(data, query) {\n        let key = query.fKey;\n        let value;\n        let prop = key;\n        let pKey = query.key;\n        let predicats = [];\n        if (typeof data[0] !== 'object') {\n            prop = null;\n        }\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[0] === 'object') {\n                value = DataUtil.getObject(pKey || prop, data[i]);\n            }\n            else {\n                value = data[i];\n            }\n            predicats.push(new Predicate(key, 'equal', value));\n        }\n        return Predicate.or(predicats);\n    }\n    getAggregateResult(pvt, data, args, groupDs, query) {\n        let pData = data;\n        if (data && data.result) {\n            pData = data.result;\n        }\n        if (pvt && pvt.aggregates && pvt.aggregates.length) {\n            let agg = pvt.aggregates;\n            let fn;\n            let aggregateData = pData;\n            let res = {};\n            if (data.aggregate) {\n                aggregateData = data.aggregate;\n            }\n            for (let i = 0; i < agg.length; i++) {\n                fn = DataUtil.aggregates[agg[i].type];\n                if (fn) {\n                    res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);\n                }\n            }\n            args.aggregates = res;\n        }\n        if (pvt && pvt.groups && pvt.groups.length) {\n            let groups = pvt.groups;\n            for (let i = 0; i < groups.length; i++) {\n                let level = null;\n                if (!isNullOrUndefined(groupDs)) {\n                    groupDs = DataUtil.group(groupDs, groups[i]);\n                }\n                let groupQuery = Query.filterQueries(query.queries, 'onGroup')[i].e;\n                pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);\n            }\n            args.result = pData;\n        }\n        return args;\n    }\n    getQueryRequest(query) {\n        let req = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        req.sorts = Query.filterQueries(query.queries, 'onSortBy');\n        req.groups = Query.filterQueries(query.queries, 'onGroup');\n        req.filters = Query.filterQueries(query.queries, 'onWhere');\n        req.searches = Query.filterQueries(query.queries, 'onSearch');\n        req.aggregates = Query.filterQueries(query.queries, 'onAggregates');\n        return req;\n    }\n    addParams(options) {\n        let req = options.reqParams;\n        if (options.params.length) {\n            req.params = {};\n        }\n        for (let tmp of options.params) {\n            if (req[tmp.key]) {\n                throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');\n            }\n            req[tmp.key] = tmp.value;\n            if (tmp.fn) {\n                req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);\n            }\n            req.params[tmp.key] = req[tmp.key];\n        }\n    }\n}\n/**\n * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.\n * @hidden\n */\nclass ODataAdaptor extends UrlAdaptor {\n    constructor(props) {\n        super();\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$inlinecount',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PUT'\n        });\n        extend(this.options, props || {});\n    }\n    getModuleName() {\n        return 'ODataAdaptor';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let operator;\n        let guid;\n        let val = predicate.value;\n        let type = typeof val;\n        let field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;\n        if (val instanceof Date) {\n            val = 'datetime\\'' + DataUtil.parse.replacer(val) + '\\'';\n        }\n        if (type === 'string') {\n            val = encodeURIComponent(val);\n            val = '\\'' + val + '\\'';\n            if (requiresCast) {\n                field = 'cast(' + field + ', \\'Edm.String\\')';\n            }\n            if (DataUtil.parse.isGuid(val)) {\n                guid = 'guid';\n            }\n            if (predicate.ignoreCase) {\n                if (!guid) {\n                    field = 'tolower(' + field + ')';\n                }\n                val = val.toLowerCase();\n            }\n        }\n        operator = DataUtil.odBiOperator[predicate.operator];\n        if (operator) {\n            returnValue += field;\n            returnValue += operator;\n            if (guid) {\n                returnValue += guid;\n            }\n            return returnValue + val;\n        }\n        if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {\n            operator = DataUtil.odv4UniOperator[predicate.operator];\n        }\n        else {\n            operator = DataUtil.odUniOperator[predicate.operator];\n        }\n        if (operator === 'substringof') {\n            let temp = val;\n            val = field;\n            field = temp;\n        }\n        returnValue += operator + '(';\n        returnValue += field + ',';\n        if (guid) {\n            returnValue += guid;\n        }\n        returnValue += val + ')';\n        return returnValue;\n    }\n    addParams(options) {\n        super.addParams(options);\n        delete options.reqParams.params;\n    }\n    /**\n     * Generate request string based on the multiple filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onComplexPredicate(predicate, query, requiresCast) {\n        let res = [];\n        for (let i = 0; i < predicate.predicates.length; i++) {\n            res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');\n        }\n        return res.join(' ' + predicate.condition + ' ');\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {Predicate} filter\n     * @param  {boolean} requiresCast?\n     */\n    onEachWhere(filter, query, requiresCast) {\n        return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {string[]} filters\n     */\n    onWhere(filters) {\n        if (this.pvt.search) {\n            filters.push(this.onEachWhere(this.pvt.search, null, true));\n        }\n        return filters.join(' and ');\n    }\n    /**\n     * Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        if (e.fields && e.fields.length === 0) {\n            DataUtil.throwError('Query() - Search : oData search requires list of field names to search');\n        }\n        let filter = this.pvt.search || [];\n        for (let i = 0; i < e.fields.length; i++) {\n            filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));\n        }\n        this.pvt.search = filter;\n    }\n    /**\n     * Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        this.pvt.search = Predicate.or(this.pvt.search);\n        return '';\n    }\n    /**\n     * Generate query string based on multiple sort criteria from query.\n     * @param  {QueryOptions} e\n     */\n    onEachSort(e) {\n        let res = [];\n        if (e.name instanceof Array) {\n            for (let i = 0; i < e.name.length; i++) {\n                res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));\n            }\n        }\n        else {\n            res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));\n        }\n        return res.join(',');\n    }\n    /**\n     * Returns sort query string.\n     * @param  {string[]} e\n     */\n    onSortBy(e) {\n        return e.reverse().join(',');\n    }\n    /**\n     * Adds the group query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return [];\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        for (let i = 0; i < e.length; i++) {\n            e[i] = ODataAdaptor.getField(e[i]);\n        }\n        return e.join(',');\n    }\n    /**\n     * Add the aggregate query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n        return '';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'allpages' : '';\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.options.multipartAccept);\n            request.setRequestHeader('DataServiceVersion', '2.0');\n            request.overrideMimeType('text/plain; charset=x-user-defined');\n        }\n        else {\n            request.setRequestHeader('Accept', this.options.accept);\n        }\n        request.setRequestHeader('DataServiceVersion', '2.0');\n        request.setRequestHeader('MaxDataServiceVersion', '2.0');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaCheck = 'odata.metadata';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaCheck]) {\n            let dataUrls = data[metaCheck].split('/$metadata#');\n            this.rootUrl = dataUrls[0];\n            this.resourceTableName = dataUrls[1];\n        }\n        let pvtData = 'pvtData';\n        if (!isNullOrUndefined(data.d)) {\n            let dataCopy = ((query && query.isCountRequired) ? data.d.results : data.d);\n            let metaData = '__metadata';\n            if (!isNullOrUndefined(dataCopy)) {\n                for (let i = 0; i < dataCopy.length; i++) {\n                    if (!isNullOrUndefined(dataCopy[i][metaData])) {\n                        delete dataCopy[i][metaData];\n                    }\n                }\n            }\n        }\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n        let count = null;\n        let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n        if (query && query.isCountRequired) {\n            let oDataCount = '__count';\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n            if (data.d) {\n                data = data.d;\n            }\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n        }\n        if (version === 3 && data.value) {\n            data = data.value;\n        }\n        if (data.d) {\n            data = data.d;\n        }\n        if (version < 3 && data.results) {\n            data = data.results;\n        }\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    /**\n     * Converts the request object to query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     * @returns tableName\n     */\n    convertToQueryString(request, query, dm) {\n        let res = [];\n        let table = 'table';\n        let tableName = request[table] || '';\n        let format = '$format';\n        delete request[table];\n        if (dm.dataSource.requiresFormat) {\n            request[format] = 'json';\n        }\n        let keys = Object.keys(request);\n        for (let prop of keys) {\n            res.push(prop + '=' + request[prop]);\n        }\n        res = res.join('&');\n        if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {\n            return res;\n        }\n        return res.length ? tableName + '?' + res : tableName || '';\n    }\n    localTimeReplacer(key, convertObj) {\n        for (let prop of !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []) {\n            if ((convertObj[prop] instanceof Date)) {\n                convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);\n            }\n        }\n        return convertObj;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : ''),\n            data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        let url;\n        if (typeof value === 'string' && !DataUtil.parse.isGuid(value)) {\n            url = `('${value}')`;\n        }\n        else {\n            url = `(${value})`;\n        }\n        return {\n            type: 'DELETE',\n            url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url\n        };\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns this\n     */\n    update(dm, keyField, value, tableName, query, original) {\n        if (this.options.updateType === 'PATCH' && !isNullOrUndefined(original)) {\n            value = this.compareAndRemove(value, original, keyField);\n        }\n        let url;\n        if (typeof value[keyField] === 'string' && !DataUtil.parse.isGuid(value[keyField])) {\n            url = `('${value[keyField]}')`;\n        }\n        else {\n            url = `(${value[keyField]})`;\n        }\n        return {\n            type: this.options.updateType,\n            url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url,\n            data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),\n            accept: this.options.accept\n        };\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     * @returns {Object}\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = this.rootUrl ? this.rootUrl + '/' + this.options.batch :\n            dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let args = {\n            url: e.url,\n            key: e.key,\n            cid: 1,\n            cSet: DataUtil.getGuid(this.options.changeSet)\n        };\n        let req = '--' + initialGuid + '\\n';\n        req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\\n';\n        this.pvt.changeSet = 0;\n        req += this.generateInsertRequest(changes.addedRecords, args, dm);\n        req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);\n        req += this.generateDeleteRequest(changes.deletedRecords, args, dm);\n        req += args.cSet + '--\\n';\n        req += '--' + initialGuid + '--';\n        return {\n            type: 'POST',\n            url: url,\n            dataType: 'json',\n            contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,\n            data: req\n        };\n    }\n    /**\n     * Generate the string content from the removed records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     * @returns this\n     */\n    generateDeleteRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'DELETE ',\n            'url': (data, i, key) => {\n                let url = DataUtil.getObject(key, data[i]);\n                if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                    return '(' + url + ')';\n                }\n                else if (url instanceof Date) {\n                    let dateTime = data[i][key];\n                    return '(' + dateTime.toJSON() + ')';\n                }\n                else {\n                    return `('${url}')`;\n                }\n            },\n            'data': (data, i) => ''\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req + '\\n';\n    }\n    /**\n     * Generate the string content from the inserted records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateInsertRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'POST ',\n            'url': (data, i, key) => '',\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    /**\n     * Generate the string content from the updated records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateUpdateRequest(arr, e, dm, org) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        arr.forEach((change) => change = this.compareAndRemove(change, org.filter((o) => DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change))[0], e.key));\n        let stat = {\n            'method': this.options.updateType + ' ',\n            'url': (data, i, key) => {\n                if (typeof data[i][key] === 'number' || DataUtil.parse.isGuid(data[i][key])) {\n                    return '(' + data[i][key] + ')';\n                }\n                else if (data[i][key] instanceof Date) {\n                    let date = data[i][key];\n                    return '(' + date.toJSON() + ')';\n                }\n                else {\n                    return `('${data[i][key]}')`;\n                }\n            },\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    static getField(prop) {\n        return prop.replace(/\\./g, '/');\n    }\n    generateBodyContent(arr, e, stat, dm) {\n        let req = '';\n        for (let i = 0; i < arr.length; i++) {\n            req += '\\n' + e.cSet + '\\n';\n            req += this.options.changeSetContent + '\\n\\n';\n            req += stat.method;\n            if (stat.method === 'POST ') {\n                req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {\n                req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'DELETE ') {\n                req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            req += 'Accept: ' + this.options.accept + '\\n';\n            req += 'Content-Id: ' + this.pvt.changeSet++ + '\\n';\n            req += this.options.batchChangeSetContentType + '\\n';\n            if (!isNullOrUndefined(arr[i]['@odata.etag'])) {\n                req += 'If-Match: ' + arr[i]['@odata.etag'] + '\\n\\n';\n                delete arr[i]['@odata.etag'];\n            }\n            else {\n                req += '\\n';\n            }\n            req += stat.data(arr, i);\n        }\n        return req;\n    }\n    processBatchResponse(data, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {\n            let guid = xhr.getResponseHeader('Content-Type');\n            let cIdx;\n            let jsonObj;\n            let d = data + '';\n            guid = guid.substring(guid.indexOf('=batchresponse') + 1);\n            d = d.split(guid);\n            if (d.length < 2) {\n                return {};\n            }\n            d = d[1];\n            let exVal = /(?:\\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);\n            if (exVal) {\n                d.replace(exVal[0], '');\n            }\n            let changeGuid = exVal ? exVal[1] : '';\n            d = d.split(changeGuid);\n            for (let i = d.length; i > -1; i--) {\n                if (!/\\bContent-ID:/i.test(d[i]) || !/\\bHTTP.+201/.test(d[i])) {\n                    continue;\n                }\n                cIdx = parseInt(/\\bContent-ID: (\\d+)/i.exec(d[i])[1], 10);\n                if (changes.addedRecords[cIdx]) {\n                    jsonObj = DataUtil.parse.parseJson(/^\\{.+\\}/m.exec(d[i])[0]);\n                    extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));\n                }\n            }\n            return changes;\n        }\n        return null;\n    }\n    compareAndRemove(data, original, key) {\n        if (isNullOrUndefined(original)) {\n            return data;\n        }\n        Object.keys(data).forEach((prop) => {\n            if (prop !== key && prop !== '@odata.etag') {\n                if (DataUtil.isPlainObject(data[prop])) {\n                    this.compareAndRemove(data[prop], original[prop]);\n                    let final = Object.keys(data[prop]).filter((data) => data !== '@odata.etag');\n                    if (final.length === 0) {\n                        delete data[prop];\n                    }\n                }\n                else if (data[prop] === original[prop]) {\n                    delete data[prop];\n                }\n                else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {\n                    delete data[prop];\n                }\n            }\n        });\n        return data;\n    }\n}\n/**\n * The OData v4 is an improved version of OData protocols.\n * The DataManager uses the ODataV4Adaptor to consume OData v4 services.\n * @hidden\n */\nclass ODataV4Adaptor extends ODataAdaptor {\n    constructor(props) {\n        super(props);\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json, text/javascript, */*; q=0.01',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$count',\n            search: '$search',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PATCH',\n            localTime: false,\n            apply: '$apply'\n        });\n        extend(this.options, props || {});\n    }\n    /**\n     * @hidden\n     */\n    getModuleName() {\n        return 'ODataV4Adaptor';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'true' : '';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let val = predicate.value;\n        let isDate = val instanceof Date;\n        if (query instanceof Query) {\n            let queries = this.getQueryRequest(query);\n            for (let i = 0; i < queries.filters.length; i++) {\n                if (queries.filters[i].e.key === predicate.value) {\n                    requiresCast = true;\n                }\n            }\n        }\n        returnValue = super.onPredicate.call(this, predicate, query, requiresCast);\n        if (isDate) {\n            returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');\n        }\n        if (DataUtil.parse.isGuid(val)) {\n            returnValue = returnValue.replace('guid', '').replace(/'/g, '');\n        }\n        return returnValue;\n    }\n    /**\n     *  Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        let search = this.pvt.searches || [];\n        search.push(e.key);\n        this.pvt.searches = search;\n    }\n    /**\n     *  Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        return this.pvt.searches.join(' OR ');\n    }\n    /**\n     * Returns the expand query string.\n     * @param  {string} e\n     */\n    onExpand(e) {\n        let selected = {};\n        let expanded = {};\n        let expands = e.expands.slice();\n        let exArr = [];\n        let selects = e.selects.filter((item) => item.indexOf('.') > -1);\n        selects.forEach((select) => {\n            let splits = select.split('.');\n            if (!(splits[0] in selected)) {\n                selected[splits[0]] = [];\n            }\n            selected[splits[0]].push(splits[1]);\n        });\n        //Auto expand from select query\n        Object.keys(selected).forEach((expand) => {\n            if ((expands.indexOf(expand) === -1)) {\n                expands.push(expand);\n            }\n        });\n        expands.forEach((expand) => {\n            expanded[expand] = expand in selected ? `${expand}(${this.options.select}=${selected[expand].join(',')})` : expand;\n        });\n        Object.keys(expanded).forEach((ex) => exArr.push(expanded[ex]));\n        return exArr.join(',');\n    }\n    /**\n     * Returns the groupby query string.\n     * @param  {string} e\n     */\n    onDistinct(distinctFields) {\n        let fields = distinctFields.map((field) => ODataAdaptor.getField(field)).join(',');\n        return `groupby((${fields}))`;\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        return super.onSelect(e.filter((item) => item.indexOf('.') === -1));\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {\n            request.setRequestHeader('Prefer', 'return=representation');\n        }\n        request.setRequestHeader('Accept', this.options.accept);\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaName = '@odata.context';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaName]) {\n            let dataUrl = data[metaName].split('/$metadata#');\n            this.rootUrl = dataUrl[0];\n            this.resourceTableName = dataUrl[1];\n        }\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = super.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let count = null;\n        let dataCount = '@odata.count';\n        if (query && query.isCountRequired) {\n            if (dataCount in data) {\n                count = data[dataCount];\n            }\n        }\n        data = !isNullOrUndefined(data.value) ? data.value : data;\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: count, aggregates: args.aggregates };\n    }\n}\n/**\n * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.\n * The DataManager uses the WebApiAdaptor to consume Web API.\n * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n * @hidden\n */\nclass WebApiAdaptor extends ODataAdaptor {\n    getModuleName() {\n        return 'WebApiAdaptor';\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.url,\n            data: JSON.stringify(data)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        return {\n            type: 'DELETE',\n            url: dm.dataSource.url + '/' + value,\n            data: JSON.stringify(value)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    update(dm, keyField, value, tableName) {\n        return {\n            type: 'PUT',\n            url: dm.dataSource.url,\n            data: JSON.stringify(value)\n        };\n    }\n    batchRequest(dm, changes, e) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let req = [];\n        //insertion\n        for (let i = 0, x = changes.addedRecords.length; i < x; i++) {\n            changes.addedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': 'POST ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //updation \n        for (let i = 0, x = changes.changedRecords.length; i < x; i++) {\n            changes.changedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': this.options.updateType + ' ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.changedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //deletion\n        for (let i = 0, x = changes.deletedRecords.length; i < x; i++) {\n            changes.deletedRecords.forEach((j, d) => {\n                let state = {\n                    'mtd': 'DELETE ',\n                    'url': (data, i, key) => {\n                        let url = DataUtil.getObject(key, data[i]);\n                        if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                            return '/' + url;\n                        }\n                        else if (url instanceof Date) {\n                            let datTime = data[i][key];\n                            return '/' + datTime.toJSON();\n                        }\n                        else {\n                            return `/'${url}'`;\n                        }\n                    },\n                    'data': (data, i) => ''\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url)\n                    + state.url(changes.deletedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        req.push('--' + initialGuid + '--', '');\n        return {\n            type: 'POST',\n            url: url,\n            contentType: 'multipart/mixed; boundary=' + initialGuid,\n            data: req.join('\\r\\n')\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let count = null;\n        let args = {};\n        if (request && request.type.toLowerCase() !== 'post') {\n            let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n            let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n            if (query && query.isCountRequired) {\n                if (!DataUtil.isNull(data.Count)) {\n                    count = data.Count;\n                }\n            }\n            if (version < 3 && data.Items) {\n                data = data.Items;\n            }\n            args.count = count;\n            args.result = data;\n            this.getAggregateResult(pvt, data, args, null, query);\n        }\n        args.result = args.result || data;\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n}\n/**\n * WebMethodAdaptor can be used by DataManager to interact with web method.\n * @hidden\n */\nclass WebMethodAdaptor extends UrlAdaptor {\n    /**\n     * Prepare the request body based on the query.\n     * The query information can be accessed at the WebMethod using variable named `value`.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns application\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);\n        let getData = 'data';\n        let data = DataUtil.parse.parseJson(obj[getData]);\n        let result = {};\n        let value = 'value';\n        if (data.param) {\n            for (let i = 0; i < data.param.length; i++) {\n                let param = data.param[i];\n                let key = Object.keys(param)[0];\n                result[key] = param[key];\n            }\n        }\n        result[value] = data;\n        let pvtData = 'pvtData';\n        let url = 'url';\n        return {\n            data: JSON.stringify(result),\n            url: obj[url],\n            pvtData: obj[pvtData],\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8'\n        };\n    }\n}\n/**\n * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.\n * It interacts with server-side only for CRUD operations.\n * @hidden\n */\nclass RemoteSaveAdaptor extends JsonAdaptor {\n    /**\n     * @hidden\n     */\n    constructor() {\n        super();\n        setValue('beforeSend', UrlAdaptor.prototype.beforeSend, this);\n    }\n    insert(dm, data, tableName, query, position) {\n        this.pvt.position = position;\n        this.updateType = 'add';\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    remove(dm, keyField, val, tableName, query) {\n        super.remove(dm, keyField, val);\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: val,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    update(dm, keyField, val, tableName, query) {\n        this.updateType = 'update';\n        this.updateKey = keyField;\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: val,\n                action: 'update',\n                keyColumn: keyField,\n                key: val[keyField],\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    processResponse(data, ds, query, xhr, request, changes, e) {\n        let i;\n        if (this.updateType === 'add') {\n            super.insert(ds, data, null, null, this.pvt.position);\n        }\n        if (this.updateType === 'update') {\n            super.update(ds, this.updateKey, data);\n        }\n        this.updateType = undefined;\n        if (data.added) {\n            for (i = 0; i < data.added.length; i++) {\n                super.insert(ds, data.added[i]);\n            }\n        }\n        if (data.changed) {\n            for (i = 0; i < data.changed.length; i++) {\n                super.update(ds, e.key, data.changed[i]);\n            }\n        }\n        if (data.deleted) {\n            for (i = 0; i < data.deleted.length; i++) {\n                super.remove(ds, e.key, data.deleted[i]);\n            }\n        }\n        return data;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * Also perform the changes in the locally cached data to sync with the remote data.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e.url,\n                key: e.key\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    addParams(options) {\n        let urlParams = new UrlAdaptor();\n        urlParams.addParams(options);\n    }\n}\n/**\n * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.\n * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager\n * @hidden\n */\nclass CacheAdaptor extends UrlAdaptor {\n    /**\n     * Constructor for CacheAdaptor class.\n     * @param  {CacheAdaptor} adaptor?\n     * @param  {number} timeStamp?\n     * @param  {number} pageSize?\n     * @hidden\n     */\n    constructor(adaptor, timeStamp, pageSize) {\n        super();\n        this.isCrudAction = false;\n        this.isInsertAction = false;\n        if (!isNullOrUndefined(adaptor)) {\n            this.cacheAdaptor = adaptor;\n        }\n        this.pageSize = pageSize;\n        this.guidId = DataUtil.getGuid('cacheAdaptor');\n        let obj = { keys: [], results: [] };\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        let guid = this.guidId;\n        if (!isNullOrUndefined(timeStamp)) {\n            setInterval(() => {\n                let data;\n                data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));\n                let forDel = [];\n                for (let i = 0; i < data.results.length; i++) {\n                    let currentTime = +new Date();\n                    let requestTime = +new Date(data.results[i].timeStamp);\n                    data.results[i].timeStamp = currentTime - requestTime;\n                    if (currentTime - requestTime > timeStamp) {\n                        forDel.push(i);\n                    }\n                }\n                for (let i = 0; i < forDel.length; i++) {\n                    data.results.splice(forDel[i], 1);\n                    data.keys.splice(forDel[i], 1);\n                }\n                window.localStorage.removeItem(guid);\n                window.localStorage.setItem(guid, JSON.stringify(data));\n            }, timeStamp);\n        }\n    }\n    /**\n     * It will generate the key based on the URL when we send a request to server.\n     * @param  {string} url\n     * @param  {Query} query?\n     * @hidden\n     */\n    generateKey(url, query) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let key = url;\n        let page = 'onPage';\n        if (page in singles) {\n            key += singles[page].pageIndex;\n        }\n        queries.sorts.forEach((obj) => {\n            key += obj.e.direction + obj.e.fieldName;\n        });\n        queries.groups.forEach((obj) => {\n            key += obj.e.fieldName;\n        });\n        queries.searches.forEach((obj) => {\n            key += obj.e.searchKey;\n        });\n        for (let filter = 0; filter < queries.filters.length; filter++) {\n            let currentFilter = queries.filters[filter];\n            if (currentFilter.e.isComplex) {\n                let newQuery = query.clone();\n                newQuery.queries = [];\n                for (let i = 0; i < currentFilter.e.predicates.length; i++) {\n                    newQuery.queries.push({ fn: 'onWhere', e: currentFilter.e.predicates[i], filter: query.queries.filter });\n                }\n                key += currentFilter.e.condition + this.generateKey(url, newQuery);\n            }\n            else {\n                key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n            }\n        }\n        return key;\n    }\n    /**\n     * Process the query to generate request body.\n     * If the data is already cached, it will return the cached data.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     * @param  {Object[]} hierarchyFilters?\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let key = this.generateKey(dm.dataSource.url, query);\n        let cachedItems;\n        cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n        if (data != null && !this.isCrudAction && !this.isInsertAction) {\n            return data;\n        }\n        this.isCrudAction = null;\n        this.isInsertAction = null;\n        return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (this.isInsertAction || (request && this.cacheAdaptor.options.batch &&\n            DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post')) {\n            return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);\n        }\n        data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n        let key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;\n        let obj = {};\n        obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let index = obj.keys.indexOf(key);\n        if (index !== -1) {\n            obj.results.splice(index, 1);\n            obj.keys.splice(index, 1);\n        }\n        obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: new Date(), count: data.count };\n        while (obj.results.length > this.pageSize) {\n            obj.results.splice(0, 1);\n            obj.keys.splice(0, 1);\n        }\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        return data;\n    }\n    /**\n     * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch)\n            && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);\n        }\n        if (!dm.dataSource.crossDomain) {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);\n        }\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.update(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        this.isInsertAction = true;\n        return this.cacheAdaptor.insert(dm, data, tableName);\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.remove(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        return this.cacheAdaptor.batchRequest(dm, changes, e);\n    }\n}\n\n/**\n * DataManager is used to manage and manipulate relational data.\n */\nclass DataManager {\n    /**\n     * Constructor for DataManager class\n     * @param  {DataOptions|JSON[]} dataSource?\n     * @param  {Query} query?\n     * @param  {AdaptorOptions|string} adaptor?\n     * @hidden\n     */\n    constructor(dataSource, query, adaptor) {\n        /** @hidden */\n        this.dateParse = true;\n        /** @hidden */\n        this.timeZoneHandling = true;\n        this.requests = [];\n        if (!dataSource && !this.dataSource) {\n            dataSource = [];\n        }\n        adaptor = adaptor || dataSource.adaptor;\n        if (dataSource && dataSource.timeZoneHandling === false) {\n            this.timeZoneHandling = dataSource.timeZoneHandling;\n        }\n        let data;\n        if (dataSource instanceof Array) {\n            data = {\n                json: dataSource,\n                offline: true\n            };\n        }\n        else if (typeof dataSource === 'object') {\n            if (!dataSource.json) {\n                dataSource.json = [];\n            }\n            data = {\n                url: dataSource.url,\n                insertUrl: dataSource.insertUrl,\n                removeUrl: dataSource.removeUrl,\n                updateUrl: dataSource.updateUrl,\n                crudUrl: dataSource.crudUrl,\n                batchUrl: dataSource.batchUrl,\n                json: dataSource.json,\n                headers: dataSource.headers,\n                accept: dataSource.accept,\n                data: dataSource.data,\n                timeTillExpiration: dataSource.timeTillExpiration,\n                cachingPageSize: dataSource.cachingPageSize,\n                enableCaching: dataSource.enableCaching,\n                requestType: dataSource.requestType,\n                key: dataSource.key,\n                crossDomain: dataSource.crossDomain,\n                jsonp: dataSource.jsonp,\n                dataType: dataSource.dataType,\n                offline: dataSource.offline !== undefined ? dataSource.offline\n                    : dataSource.adaptor instanceof RemoteSaveAdaptor ? false : dataSource.url ? false : true,\n                requiresFormat: dataSource.requiresFormat\n            };\n        }\n        else {\n            DataUtil.throwError('DataManager: Invalid arguments');\n        }\n        if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n            data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n        }\n        if (data.dataType === undefined) {\n            data.dataType = 'json';\n        }\n        this.dataSource = data;\n        this.defaultQuery = query;\n        if (data.url && data.offline && !data.json.length) {\n            this.isDataAvailable = false;\n            this.adaptor = adaptor || new ODataAdaptor();\n            this.dataSource.offline = false;\n            this.ready = this.executeQuery(query || new Query());\n            this.ready.then((e) => {\n                this.dataSource.offline = true;\n                this.isDataAvailable = true;\n                data.json = e.result;\n                this.adaptor = new JsonAdaptor();\n            });\n        }\n        else {\n            this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n        }\n        if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n            data.jsonp = 'callback';\n        }\n        this.adaptor = adaptor || this.adaptor;\n        if (data.enableCaching) {\n            this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n        }\n        return this;\n    }\n    /**\n     * Overrides DataManager's default query with given query.\n     * @param  {Query} query - Defines the new default query.\n     */\n    setDefaultQuery(query) {\n        this.defaultQuery = query;\n        return this;\n    }\n    /**\n     * Executes the given query with local data source.\n     * @param  {Query} query - Defines the query to retrieve data.\n     */\n    executeLocal(query) {\n        if (!this.defaultQuery && !(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n        }\n        if (!this.dataSource.json) {\n            DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n        }\n        query = query || this.defaultQuery;\n        let result = this.adaptor.processQuery(this, query);\n        if (query.subQuery) {\n            let from = query.subQuery.fromTable;\n            let lookup = query.subQuery.lookups;\n            let res = query.isCountRequired ? result.result :\n                result;\n            if (lookup && lookup instanceof Array) {\n                DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n            }\n            for (let j = 0; j < res.length; j++) {\n                if (res[j][from] instanceof Array) {\n                    res[j] = extend({}, {}, res[j]);\n                    res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n                }\n            }\n        }\n        return this.adaptor.processResponse(result, this, query);\n    }\n    /**\n     * Executes the given query with either local or remote data source.\n     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n     * @param  {Query|Function} query - Defines the query to retrieve data.\n     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n     */\n    executeQuery(query, done, fail, always) {\n        let makeRequest = 'makeRequest';\n        if (typeof query === 'function') {\n            always = fail;\n            fail = done;\n            done = query;\n            query = null;\n        }\n        if (!query) {\n            query = this.defaultQuery;\n        }\n        if (!(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n        }\n        let deffered = new Deferred();\n        let args = { query: query };\n        if (!this.dataSource.offline && (this.dataSource.url !== undefined && this.dataSource.url !== '')\n            || (!isNullOrUndefined(this.adaptor[makeRequest]))) {\n            let result = this.adaptor.processQuery(this, query);\n            if (!isNullOrUndefined(this.adaptor[makeRequest])) {\n                this.adaptor[makeRequest](result, deffered, args, query);\n            }\n            else if (!isNullOrUndefined(result.url)) {\n                this.makeRequest(result, deffered, args, query);\n            }\n            else {\n                args = DataManager.getDeferedArgs(query, result, args);\n                deffered.resolve(args);\n            }\n        }\n        else {\n            DataManager.nextTick(() => {\n                let res = this.executeLocal(query);\n                args = DataManager.getDeferedArgs(query, res, args);\n                deffered.resolve(args);\n            });\n        }\n        if (done || fail) {\n            deffered.promise.then(done, fail);\n        }\n        if (always) {\n            deffered.promise.then(always, always);\n        }\n        return deffered.promise;\n    }\n    static getDeferedArgs(query, result, args) {\n        if (query.isCountRequired) {\n            args.result = result.result;\n            args.count = result.count;\n            args.aggregates = result.aggregates;\n        }\n        else {\n            args.result = result;\n        }\n        return args;\n    }\n    static nextTick(fn) {\n        (window.setImmediate || window.setTimeout)(fn, 0);\n    }\n    extendRequest(url, fnSuccess, fnFail) {\n        return extend({}, {\n            type: 'GET',\n            dataType: this.dataSource.dataType,\n            crossDomain: this.dataSource.crossDomain,\n            jsonp: this.dataSource.jsonp,\n            cache: true,\n            processData: false,\n            onSuccess: fnSuccess,\n            onFailure: fnFail\n        }, url);\n    }\n    makeRequest(url, deffered, args, query) {\n        let isSelector = !!query.subQuerySelector;\n        let fnFail = (e) => {\n            args.error = e;\n            deffered.reject(args);\n        };\n        let process = (data, count, xhr, request, actual, aggregates, virtualSelectRecords) => {\n            args.xhr = xhr;\n            args.count = count ? parseInt(count.toString(), 10) : 0;\n            args.result = data;\n            args.request = request;\n            args.aggregates = aggregates;\n            args.actual = actual;\n            args.virtualSelectRecords = virtualSelectRecords;\n            deffered.resolve(args);\n        };\n        let fnQueryChild = (data, selector) => {\n            let subDeffer = new Deferred();\n            let childArgs = { parent: args };\n            query.subQuery.isChild = true;\n            let subUrl = this.adaptor.processQuery(this, query.subQuery, data ? this.adaptor.processResponse(data) : selector);\n            let childReq = this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n            if (!isSelector) {\n                subDeffer.then((subData) => {\n                    if (data) {\n                        DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n                        process(data, subData.count, subData.xhr);\n                    }\n                }, fnFail);\n            }\n            return childReq;\n        };\n        let fnSuccess = (data, request) => {\n            if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && this.dateParse) {\n                data = DataUtil.parse.parseJson(data);\n            }\n            let result = this.adaptor.processResponse(data, this, query, request.httpRequest, request);\n            let count = 0;\n            let aggregates = null;\n            let virtualSelectRecords = 'virtualSelectRecords';\n            let virtualRecords = data[virtualSelectRecords];\n            if (query.isCountRequired) {\n                count = result.count;\n                aggregates = result.aggregates;\n                result = result.result;\n            }\n            if (!query.subQuery) {\n                process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n                return;\n            }\n            if (!isSelector) {\n                fnQueryChild(result, request);\n            }\n        };\n        let req = this.extendRequest(url, fnSuccess, fnFail);\n        let ajax = new Ajax(req);\n        ajax.beforeSend = () => {\n            this.beforeSend(ajax.httpRequest, ajax);\n        };\n        req = ajax.send();\n        req.catch((e) => true); // to handle failure remote requests.        \n        this.requests.push(ajax);\n        if (isSelector) {\n            let promise;\n            let res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });\n            if (res && res.length) {\n                promise = Promise.all([req, fnQueryChild(null, res)]);\n                promise.then((...args) => {\n                    let result = args[0];\n                    let pResult = this.adaptor.processResponse(result[0], this, query, this.requests[0].httpRequest, this.requests[0]);\n                    let count = 0;\n                    if (query.isCountRequired) {\n                        count = pResult.count;\n                        pResult = pResult.result;\n                    }\n                    let cResult = this.adaptor.processResponse(result[1], this, query.subQuery, this.requests[1].httpRequest, this.requests[1]);\n                    count = 0;\n                    if (query.subQuery.isCountRequired) {\n                        count = cResult.count;\n                        cResult = cResult.result;\n                    }\n                    DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n                    isSelector = false;\n                    process(pResult, count, this.requests[0].httpRequest);\n                });\n            }\n            else {\n                isSelector = false;\n            }\n        }\n        return req;\n    }\n    beforeSend(request, settings) {\n        this.adaptor.beforeSend(this, request, settings);\n        let headers = this.dataSource.headers;\n        let props;\n        for (let i = 0; headers && i < headers.length; i++) {\n            props = [];\n            let keys = Object.keys(headers[i]);\n            for (let prop of keys) {\n                props.push(prop);\n                request.setRequestHeader(prop, headers[i][prop]);\n            }\n        }\n    }\n    /**\n     * Save bulk changes to the given table name.\n     * User can add a new record, edit an existing record, and delete a record at the same time.\n     * If the datasource from remote, then updated in a single post.\n     * @param  {Object} changes - Defines the CrudOptions.\n     * @param  {string} key - Defines the column field.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    saveChanges(changes, key, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let args = {\n            url: tableName,\n            key: key || this.dataSource.key\n        };\n        let req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else {\n            let deff = new Deferred();\n            let ajax = new Ajax(req);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            ajax.onSuccess = (data, request) => {\n                deff.resolve(this.adaptor.processResponse(data, this, null, request.httpRequest, request, changes, args));\n            };\n            ajax.onFailure = (e) => {\n                deff.reject([{ error: e }]);\n            };\n            ajax.send().catch((e) => true); // to handle the failure requests.        \n            return deff.promise;\n        }\n    }\n    /**\n     * Inserts new record in the given table.\n     * @param  {Object} data - Defines the data to insert.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    insert(data, tableName, query, position) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let req = this.adaptor.insert(this, data, tableName, query, position);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else {\n            return this.doAjaxRequest(req);\n        }\n    }\n    /**\n     * Removes data from the table with the given key.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    remove(keyField, value, tableName, query) {\n        if (typeof value === 'object') {\n            value = DataUtil.getObject(keyField, value);\n        }\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.remove(this, keyField, value, tableName, query);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            return this.doAjaxRequest(res);\n        }\n    }\n    /**\n     * Updates existing record in the given table.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    update(keyField, value, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.update(this, keyField, value, tableName, query, original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            return this.doAjaxRequest(res);\n        }\n    }\n    doAjaxRequest(res) {\n        let defer = new Deferred();\n        res = extend({}, {\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8',\n            processData: false\n        }, res);\n        let ajax = new Ajax(res);\n        ajax.beforeSend = () => {\n            this.beforeSend(ajax.httpRequest, ajax);\n        };\n        ajax.onSuccess = (record, request) => {\n            try {\n                DataUtil.parse.parseJson(record);\n            }\n            catch (e) {\n                record = [];\n            }\n            record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);\n            defer.resolve(record);\n        };\n        ajax.onFailure = (e) => {\n            defer.reject([{ error: e }]);\n        };\n        ajax.send().catch((e) => true); // to handle the failure requests.\n        return defer.promise;\n    }\n}\n/**\n * Deferred is used to handle asynchronous operation.\n */\nclass Deferred {\n    constructor() {\n        /**\n         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n         */\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        /**\n         * Defines the callback function triggers when the Deferred object is resolved.\n         */\n        this.then = this.promise.then.bind(this.promise);\n        /**\n         * Defines the callback function triggers when the Deferred object is rejected.\n         */\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n}\n\n/**\n * Data modules\n */\n\nexport { DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CacheAdaptor, DataUtil };\n//# sourceMappingURL=ej2-data.es2015.js.map\n","import { Component, Event, EventHandler, NotifyPropertyChanges, Observer, Property, SanitizeHtmlHelper, addClass, append, attributes, closest, deleteObject, detach, getElement, getInstance, getUniqueID, getValue, isBlazor, isNullOrUndefined, isRippleEnabled, removeClass, rippleEffect, setValue } from '@syncfusion/ej2-base';\n\n/**\n * Initialize wrapper element for angular.\n * @private\n */\nfunction wrapperInitialize(createElement, tag, type, element, WRAPPER, role) {\n    let input = element;\n    if (element.tagName === tag) {\n        let ejInstance = getValue('ej2_instances', element);\n        input = createElement('input', { attrs: { 'type': type } });\n        let props = ['change', 'cssClass', 'label', 'labelPosition', 'id'];\n        for (let index = 0, len = element.attributes.length; index < len; index++) {\n            if (props.indexOf(element.attributes[index].nodeName) === -1) {\n                input.setAttribute(element.attributes[index].nodeName, element.attributes[index].nodeValue);\n            }\n        }\n        attributes(element, { 'class': WRAPPER, 'role': role, 'aria-checked': 'false' });\n        element.appendChild(input);\n        setValue('ej2_instances', ejInstance, input);\n        deleteObject(element, 'ej2_instances');\n    }\n    return input;\n}\nfunction getTextNode(element) {\n    let node;\n    let childnode = element.childNodes;\n    for (let i = 0; i < childnode.length; i++) {\n        node = childnode[i];\n        if (node.nodeType === 3) {\n            return node;\n        }\n    }\n    return null;\n}\n/**\n * Destroy the button components.\n * @private\n */\nfunction destroy(ejInst, wrapper, tagName) {\n    if (tagName === 'INPUT') {\n        wrapper.parentNode.insertBefore(ejInst.element, wrapper);\n        detach(wrapper);\n        ejInst.element.checked = false;\n        ['name', 'value', 'disabled'].forEach((key) => {\n            ejInst.element.removeAttribute(key);\n        });\n    }\n    else {\n        ['role', 'aria-checked', 'class'].forEach((key) => {\n            wrapper.removeAttribute(key);\n        });\n        wrapper.innerHTML = '';\n    }\n}\nfunction preRender(proxy, control, wrapper, element, moduleName) {\n    element = wrapperInitialize(proxy.createElement, control, 'checkbox', element, wrapper, moduleName);\n    proxy.element = element;\n    if (proxy.element.getAttribute('type') !== 'checkbox') {\n        proxy.element.setAttribute('type', 'checkbox');\n    }\n    if (!proxy.element.id) {\n        proxy.element.id = getUniqueID('e-' + moduleName);\n    }\n}\n/**\n * Creates CheckBox component UI with theming and ripple support.\n * @private\n */\nfunction createCheckBox(createElement, enableRipple = false, options = {}) {\n    let wrapper = createElement('div', { className: 'e-checkbox-wrapper e-css' });\n    if (options.cssClass) {\n        addClass([wrapper], options.cssClass.split(' '));\n    }\n    if (options.enableRtl) {\n        wrapper.classList.add('e-rtl');\n    }\n    if (enableRipple) {\n        let rippleSpan = createElement('span', { className: 'e-ripple-container' });\n        rippleEffect(rippleSpan, { isCenterRipple: true, duration: 400 });\n        wrapper.appendChild(rippleSpan);\n    }\n    let frameSpan = createElement('span', { className: 'e-frame e-icons' });\n    if (options.checked) {\n        frameSpan.classList.add('e-check');\n    }\n    wrapper.appendChild(frameSpan);\n    if (options.label) {\n        let labelSpan = createElement('span', { className: 'e-label', innerHTML: options.label });\n        wrapper.appendChild(labelSpan);\n    }\n    return wrapper;\n}\nfunction rippleMouseHandler(e, rippleSpan) {\n    if (rippleSpan) {\n        let event = document.createEvent('MouseEvents');\n        event.initEvent(e.type, false, true);\n        rippleSpan.dispatchEvent(event);\n    }\n}\n/**\n * Append hidden input to given element\n * @private\n */\nfunction setHiddenInput(proxy, wrap) {\n    if (proxy.element.getAttribute('ejs-for')) {\n        wrap.appendChild(proxy.createElement('input', {\n            attrs: { 'name': proxy.name || proxy.element.name, 'value': 'false', 'type': 'hidden' }\n        }));\n    }\n}\n\n/**\n * Common modules\n */\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst buttonObserver = new Observer();\nconst cssClassName = {\n    RTL: 'e-rtl',\n    BUTTON: 'e-btn',\n    PRIMARY: 'e-primary',\n    ICONBTN: 'e-icon-btn'\n};\n/**\n * The Button is a graphical user interface element that triggers an event on its click action. It can contain a text, an image, or both.\n * ```html\n * <button id=\"button\">Button</button>\n * ```\n * ```typescript\n * <script>\n * var btnObj = new Button();\n * btnObj.appendTo(\"#button\");\n * </script>\n * ```\n */\nlet Button = class Button extends Component {\n    /**\n     * Constructor for creating the widget\n     * @param  {ButtonModel} options?\n     * @param  {string|HTMLButtonElement} element?\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    preRender() {\n        // pre render code snippets\n    }\n    /**\n     * Initialize the control rendering\n     * @returns void\n     * @private\n     */\n    render() {\n        if (isBlazor() && this.isServerRendered) {\n            if (!this.disabled) {\n                this.wireEvents();\n            }\n            buttonObserver.notify('component-rendered', { id: this.element.id, instance: this });\n        }\n        else {\n            this.initialize();\n        }\n        this.removeRippleEffect = rippleEffect(this.element, { selector: '.' + cssClassName.BUTTON });\n        this.renderComplete();\n    }\n    initialize() {\n        if (this.cssClass) {\n            addClass([this.element], this.cssClass.split(' '));\n        }\n        if (this.isPrimary) {\n            this.element.classList.add(cssClassName.PRIMARY);\n        }\n        if (!isBlazor() || (isBlazor() && this.getModuleName() !== 'progress-btn')) {\n            if (this.content) {\n                let tempContent = (this.enableHtmlSanitizer) ? SanitizeHtmlHelper.sanitize(this.content) : this.content;\n                this.element.innerHTML = tempContent;\n            }\n            this.setIconCss();\n        }\n        if (this.enableRtl) {\n            this.element.classList.add(cssClassName.RTL);\n        }\n        if (this.disabled) {\n            this.controlStatus(this.disabled);\n        }\n        else {\n            this.wireEvents();\n        }\n    }\n    controlStatus(disabled) {\n        this.element.disabled = disabled;\n    }\n    setIconCss() {\n        if (this.iconCss) {\n            let span = this.createElement('span', { className: 'e-btn-icon ' + this.iconCss });\n            if (!this.element.textContent.trim()) {\n                this.element.classList.add(cssClassName.ICONBTN);\n            }\n            else {\n                span.classList.add('e-icon-' + this.iconPosition.toLowerCase());\n                if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {\n                    this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');\n                }\n            }\n            let node = this.element.childNodes[0];\n            if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {\n                this.element.insertBefore(span, node);\n            }\n            else {\n                this.element.appendChild(span);\n            }\n        }\n    }\n    wireEvents() {\n        if (this.isToggle) {\n            EventHandler.add(this.element, 'click', this.btnClickHandler, this);\n        }\n    }\n    unWireEvents() {\n        if (this.isToggle) {\n            EventHandler.remove(this.element, 'click', this.btnClickHandler);\n        }\n    }\n    btnClickHandler() {\n        if (this.element.classList.contains('e-active')) {\n            this.element.classList.remove('e-active');\n        }\n        else {\n            this.element.classList.add('e-active');\n        }\n    }\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    destroy() {\n        if (!(isBlazor() && this.isServerRendered)) {\n            let span;\n            let classList = [cssClassName.PRIMARY, cssClassName.RTL, cssClassName.ICONBTN, 'e-success', 'e-info', 'e-danger',\n                'e-warning', 'e-flat', 'e-outline', 'e-small', 'e-bigger', 'e-active', 'e-round',\n                'e-top-icon-btn', 'e-bottom-icon-btn'];\n            if (this.cssClass) {\n                classList = classList.concat(this.cssClass.split(' '));\n            }\n            super.destroy();\n            removeClass([this.element], classList);\n            if (!this.element.getAttribute('class')) {\n                this.element.removeAttribute('class');\n            }\n            if (this.disabled) {\n                this.element.removeAttribute('disabled');\n            }\n            if (this.content) {\n                this.element.innerHTML = this.element.innerHTML.replace(this.content, '');\n            }\n            span = this.element.querySelector('span.e-btn-icon');\n            if (span) {\n                detach(span);\n            }\n        }\n        this.unWireEvents();\n        if (isRippleEnabled) {\n            this.removeRippleEffect();\n        }\n    }\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'btn';\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @returns string\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * Dynamically injects the required modules to the component.\n     * @private\n     */\n    static Inject() {\n        // Inject code snippets\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {ButtonModel} newProp\n     * @param  {ButtonModel} oldProp\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'isPrimary':\n                    if (newProp.isPrimary) {\n                        this.element.classList.add(cssClassName.PRIMARY);\n                    }\n                    else {\n                        this.element.classList.remove(cssClassName.PRIMARY);\n                    }\n                    break;\n                case 'disabled':\n                    this.controlStatus(newProp.disabled);\n                    break;\n                case 'iconCss':\n                    let span = this.element.querySelector('span.e-btn-icon');\n                    if (span) {\n                        if (newProp.iconCss) {\n                            span.className = 'e-btn-icon ' + newProp.iconCss;\n                            if (this.element.textContent.trim()) {\n                                if (this.iconPosition === 'Left') {\n                                    span.classList.add('e-icon-left');\n                                }\n                                else {\n                                    span.classList.add('e-icon-right');\n                                }\n                            }\n                        }\n                        else {\n                            detach(span);\n                        }\n                    }\n                    else {\n                        this.setIconCss();\n                    }\n                    break;\n                case 'iconPosition':\n                    removeClass([this.element], ['e-top-icon-btn', 'e-bottom-icon-btn']);\n                    span = this.element.querySelector('span.e-btn-icon');\n                    if (span) {\n                        detach(span);\n                    }\n                    this.setIconCss();\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([this.element], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([this.element], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        this.element.classList.add(cssClassName.RTL);\n                    }\n                    else {\n                        this.element.classList.remove(cssClassName.RTL);\n                    }\n                    break;\n                case 'content':\n                    let node = getTextNode(this.element);\n                    if (!node) {\n                        this.element.classList.remove(cssClassName.ICONBTN);\n                    }\n                    if (!isBlazor() || (isBlazor() && !this.isServerRendered && this.getModuleName() !== 'progress-btn')) {\n                        if (this.enableHtmlSanitizer) {\n                            newProp.content = SanitizeHtmlHelper.sanitize(newProp.content);\n                        }\n                        this.element.innerHTML = newProp.content;\n                        this.setIconCss();\n                    }\n                    break;\n                case 'isToggle':\n                    if (newProp.isToggle) {\n                        EventHandler.add(this.element, 'click', this.btnClickHandler, this);\n                    }\n                    else {\n                        EventHandler.remove(this.element, 'click', this.btnClickHandler);\n                        removeClass([this.element], ['e-active']);\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Click the button element\n     * its native method\n     * @public\n     */\n    click() {\n        this.element.click();\n    }\n    /**\n     * Sets the focus to Button\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate([\n    Property('Left')\n], Button.prototype, \"iconPosition\", void 0);\n__decorate([\n    Property('')\n], Button.prototype, \"iconCss\", void 0);\n__decorate([\n    Property(false)\n], Button.prototype, \"disabled\", void 0);\n__decorate([\n    Property(false)\n], Button.prototype, \"isPrimary\", void 0);\n__decorate([\n    Property('')\n], Button.prototype, \"cssClass\", void 0);\n__decorate([\n    Property('')\n], Button.prototype, \"content\", void 0);\n__decorate([\n    Property(false)\n], Button.prototype, \"isToggle\", void 0);\n__decorate([\n    Property()\n], Button.prototype, \"locale\", void 0);\n__decorate([\n    Property(false)\n], Button.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate([\n    Event()\n], Button.prototype, \"created\", void 0);\nButton = __decorate([\n    NotifyPropertyChanges\n], Button);\n\n/**\n * Button modules\n */\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CHECK = 'e-check';\nconst DISABLED = 'e-checkbox-disabled';\nconst FRAME = 'e-frame';\nconst INDETERMINATE = 'e-stop';\nconst LABEL = 'e-label';\nconst RIPPLE = 'e-ripple-container';\nconst RIPPLECHECK = 'e-ripple-check';\nconst RIPPLEINDETERMINATE = 'e-ripple-stop';\nconst RTL = 'e-rtl';\nconst WRAPPER = 'e-checkbox-wrapper';\nconst containerAttr = ['title', 'class', 'style', 'disabled', 'readonly', 'name', 'value'];\n/**\n * The CheckBox is a graphical user interface element that allows you to select one or more options from the choices.\n * It contains checked, unchecked, and indeterminate states.\n * ```html\n * <input type=\"checkbox\" id=\"checkbox\"/>\n * <script>\n * var checkboxObj = new CheckBox({ label: \"Default\" });\n * checkboxObj.appendTo(\"#checkbox\");\n * </script>\n * ```\n */\nlet CheckBox = class CheckBox extends Component {\n    /**\n     * Constructor for creating the widget\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isFocused = false;\n        this.isMouseClick = false;\n    }\n    changeState(state) {\n        let ariaState;\n        let rippleSpan;\n        let frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];\n        if (isRippleEnabled) {\n            rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n        }\n        if (state === 'check') {\n            frameSpan.classList.remove(INDETERMINATE);\n            frameSpan.classList.add(CHECK);\n            if (rippleSpan) {\n                rippleSpan.classList.remove(RIPPLEINDETERMINATE);\n                rippleSpan.classList.add(RIPPLECHECK);\n            }\n            ariaState = 'true';\n            this.element.checked = true;\n        }\n        else if (state === 'uncheck') {\n            removeClass([frameSpan], [CHECK, INDETERMINATE]);\n            if (rippleSpan) {\n                removeClass([rippleSpan], [RIPPLECHECK, RIPPLEINDETERMINATE]);\n            }\n            ariaState = 'false';\n            this.element.checked = false;\n        }\n        else {\n            frameSpan.classList.remove(CHECK);\n            frameSpan.classList.add(INDETERMINATE);\n            if (rippleSpan) {\n                rippleSpan.classList.remove(RIPPLECHECK);\n                rippleSpan.classList.add(RIPPLEINDETERMINATE);\n            }\n            ariaState = 'mixed';\n            this.element.indeterminate = true;\n        }\n        this.getWrapper().setAttribute('aria-checked', ariaState);\n    }\n    clickHandler(event) {\n        if (this.isMouseClick) {\n            this.focusOutHandler();\n            this.isMouseClick = false;\n        }\n        if (this.indeterminate) {\n            this.changeState(this.checked ? 'check' : 'uncheck');\n            this.indeterminate = false;\n            this.element.indeterminate = false;\n        }\n        else if (this.checked) {\n            this.changeState('uncheck');\n            this.checked = false;\n        }\n        else {\n            this.changeState('check');\n            this.checked = true;\n        }\n        let changeEventArgs = { checked: this.element.checked, event: event };\n        this.trigger('change', changeEventArgs);\n    }\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    destroy() {\n        let wrapper = this.getWrapper();\n        if (isBlazor() && this.isServerRendered) {\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n        }\n        else {\n            super.destroy();\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n            if (this.tagName === 'INPUT') {\n                wrapper.parentNode.insertBefore(this.element, wrapper);\n                detach(wrapper);\n                this.element.checked = false;\n                if (this.indeterminate) {\n                    this.element.indeterminate = false;\n                }\n                ['name', 'value', 'disabled'].forEach((key) => {\n                    this.element.removeAttribute(key);\n                });\n            }\n            else {\n                ['role', 'aria-checked', 'class'].forEach((key) => {\n                    wrapper.removeAttribute(key);\n                });\n                wrapper.innerHTML = '';\n            }\n        }\n    }\n    focusHandler() {\n        this.isFocused = true;\n    }\n    focusOutHandler() {\n        this.getWrapper().classList.remove('e-focus');\n        this.isFocused = false;\n    }\n    /**\n     * Gets the module name.\n     * @private\n     */\n    getModuleName() {\n        return 'checkbox';\n    }\n    /**\n     * Gets the properties to be maintained in the persistence state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist(['checked', 'indeterminate']);\n    }\n    getWrapper() {\n        return this.element.parentElement.parentElement;\n    }\n    initialize() {\n        if (isNullOrUndefined(this.initialCheckedValue)) {\n            this.initialCheckedValue = this.checked;\n        }\n        if (this.name) {\n            this.element.setAttribute('name', this.name);\n        }\n        if (this.value) {\n            this.element.setAttribute('value', this.value);\n        }\n        if (this.checked) {\n            this.changeState('check');\n        }\n        if (this.indeterminate) {\n            this.changeState();\n        }\n        if (this.disabled) {\n            this.setDisabled();\n        }\n    }\n    initWrapper() {\n        let wrapper = this.element.parentElement;\n        if (!wrapper.classList.contains(WRAPPER)) {\n            wrapper = this.createElement('div', {\n                className: WRAPPER, attrs: { 'role': 'checkbox', 'aria-checked': 'false' }\n            });\n            this.element.parentNode.insertBefore(wrapper, this.element);\n        }\n        let label = this.createElement('label', { attrs: { for: this.element.id } });\n        let frameSpan = this.createElement('span', { className: 'e-icons ' + FRAME });\n        wrapper.classList.add('e-wrapper');\n        if (this.enableRtl) {\n            wrapper.classList.add(RTL);\n        }\n        if (this.cssClass) {\n            addClass([wrapper], this.cssClass.split(' '));\n        }\n        wrapper.appendChild(label);\n        label.appendChild(this.element);\n        setHiddenInput(this, label);\n        label.appendChild(frameSpan);\n        if (isRippleEnabled) {\n            let rippleSpan = this.createElement('span', { className: RIPPLE });\n            if (this.labelPosition === 'Before') {\n                label.appendChild(rippleSpan);\n            }\n            else {\n                label.insertBefore(rippleSpan, frameSpan);\n            }\n            rippleEffect(rippleSpan, { duration: 400, isCenterRipple: true });\n        }\n        if (this.label) {\n            this.setText(this.label);\n        }\n    }\n    keyUpHandler() {\n        if (this.isFocused) {\n            this.getWrapper().classList.add('e-focus');\n        }\n    }\n    labelMouseHandler(e) {\n        this.isMouseClick = true;\n        let rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n        rippleMouseHandler(e, rippleSpan);\n    }\n    /**\n     * Called internally if any of the property value changes.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let wrapper = this.getWrapper();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'checked':\n                    this.indeterminate = false;\n                    this.element.indeterminate = false;\n                    this.changeState(newProp.checked ? 'check' : 'uncheck');\n                    break;\n                case 'indeterminate':\n                    if (newProp.indeterminate) {\n                        this.changeState();\n                    }\n                    else {\n                        this.element.indeterminate = false;\n                        this.changeState(this.checked ? 'check' : 'uncheck');\n                    }\n                    break;\n                case 'disabled':\n                    if (newProp.disabled) {\n                        this.setDisabled();\n                        this.unWireEvents();\n                    }\n                    else {\n                        this.element.disabled = false;\n                        wrapper.classList.remove(DISABLED);\n                        wrapper.setAttribute('aria-disabled', 'false');\n                        this.wireEvents();\n                    }\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([wrapper], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([wrapper], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        wrapper.classList.add(RTL);\n                    }\n                    else {\n                        wrapper.classList.remove(RTL);\n                    }\n                    break;\n                case 'label':\n                    this.setText(newProp.label);\n                    break;\n                case 'labelPosition':\n                    let label = wrapper.getElementsByClassName(LABEL)[0];\n                    let labelWrap = wrapper.getElementsByTagName('label')[0];\n                    detach(label);\n                    if (newProp.labelPosition === 'After') {\n                        labelWrap.appendChild(label);\n                    }\n                    else {\n                        labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);\n                    }\n                    break;\n                case 'name':\n                    this.element.setAttribute('name', newProp.name);\n                    break;\n                case 'value':\n                    this.element.setAttribute('value', newProp.value);\n                    break;\n                case 'htmlAttributes':\n                    this.updateHtmlAttributeToWrapper();\n                    break;\n            }\n        }\n    }\n    /**\n     * Initialize Angular, React and Unique ID support.\n     * @private\n     */\n    preRender() {\n        if (isBlazor() && this.isServerRendered) {\n            return;\n        }\n        let element = this.element;\n        this.formElement = closest(this.element, 'form');\n        this.tagName = this.element.tagName;\n        element = wrapperInitialize(this.createElement, 'EJS-CHECKBOX', 'checkbox', element, WRAPPER, 'checkbox');\n        this.element = element;\n        if (this.element.getAttribute('type') !== 'checkbox') {\n            this.element.setAttribute('type', 'checkbox');\n        }\n        if (!this.element.id) {\n            this.element.id = getUniqueID('e-' + this.getModuleName());\n        }\n    }\n    /**\n     * Initialize the control rendering.\n     * @private\n     */\n    render() {\n        if (isBlazor() && this.isServerRendered) {\n            if (isRippleEnabled) {\n                rippleEffect(this.getWrapper().getElementsByClassName(RIPPLE)[0], { duration: 400, isCenterRipple: true });\n            }\n        }\n        else {\n            this.initWrapper();\n            this.initialize();\n        }\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.updateHtmlAttributeToWrapper();\n        this.renderComplete();\n    }\n    setDisabled() {\n        let wrapper = this.getWrapper();\n        this.element.disabled = true;\n        wrapper.classList.add(DISABLED);\n        wrapper.setAttribute('aria-disabled', 'true');\n    }\n    setText(text) {\n        let label = this.getWrapper().getElementsByClassName(LABEL)[0];\n        if (label) {\n            label.textContent = text;\n        }\n        else {\n            text = (this.enableHtmlSanitizer) ? SanitizeHtmlHelper.sanitize(text) : text;\n            label = this.createElement('span', { className: LABEL, innerHTML: text });\n            let labelWrap = this.getWrapper().getElementsByTagName('label')[0];\n            if (this.labelPosition === 'Before') {\n                labelWrap.insertBefore(label, this.getWrapper().getElementsByClassName(FRAME)[0]);\n            }\n            else {\n                labelWrap.appendChild(label);\n            }\n        }\n    }\n    changeHandler(e) {\n        e.stopPropagation();\n    }\n    formResetHandler() {\n        this.checked = this.initialCheckedValue;\n        this.element.checked = this.initialCheckedValue;\n    }\n    unWireEvents() {\n        let wrapper = this.getWrapper();\n        EventHandler.remove(this.element, 'click', this.clickHandler);\n        EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n        let label = wrapper.getElementsByTagName('label')[0];\n        EventHandler.remove(label, 'mousedown', this.labelMouseHandler);\n        EventHandler.remove(label, 'mouseup', this.labelMouseHandler);\n        if (this.formElement) {\n            EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n        }\n        if (this.tagName === 'EJS-CHECKBOX') {\n            EventHandler.remove(this.element, 'change', this.changeHandler);\n        }\n    }\n    wireEvents() {\n        let wrapper = this.getWrapper();\n        EventHandler.add(this.element, 'click', this.clickHandler, this);\n        EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n        let label = wrapper.getElementsByTagName('label')[0];\n        EventHandler.add(label, 'mousedown', this.labelMouseHandler, this);\n        EventHandler.add(label, 'mouseup', this.labelMouseHandler, this);\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n        }\n        if (this.tagName === 'EJS-CHECKBOX') {\n            EventHandler.add(this.element, 'change', this.changeHandler, this);\n        }\n    }\n    updateHtmlAttributeToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (containerAttr.indexOf(key) > -1) {\n                    let wrapper = this.getWrapper();\n                    if (key === 'class') {\n                        addClass([wrapper], this.htmlAttributes[key].split(' '));\n                    }\n                    else if (key === 'title') {\n                        wrapper.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                    else if (key === 'style') {\n                        let frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];\n                        frameSpan.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                    else {\n                        this.element.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Click the CheckBox element\n     * its native method\n     * @public\n     */\n    click() {\n        this.element.click();\n    }\n    /**\n     * Sets the focus to CheckBox\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate$1([\n    Event()\n], CheckBox.prototype, \"change\", void 0);\n__decorate$1([\n    Event()\n], CheckBox.prototype, \"created\", void 0);\n__decorate$1([\n    Property(false)\n], CheckBox.prototype, \"checked\", void 0);\n__decorate$1([\n    Property('')\n], CheckBox.prototype, \"cssClass\", void 0);\n__decorate$1([\n    Property(false)\n], CheckBox.prototype, \"disabled\", void 0);\n__decorate$1([\n    Property(false)\n], CheckBox.prototype, \"indeterminate\", void 0);\n__decorate$1([\n    Property('')\n], CheckBox.prototype, \"label\", void 0);\n__decorate$1([\n    Property('After')\n], CheckBox.prototype, \"labelPosition\", void 0);\n__decorate$1([\n    Property('')\n], CheckBox.prototype, \"name\", void 0);\n__decorate$1([\n    Property('')\n], CheckBox.prototype, \"value\", void 0);\n__decorate$1([\n    Property(false)\n], CheckBox.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$1([\n    Property({})\n], CheckBox.prototype, \"htmlAttributes\", void 0);\nCheckBox = __decorate$1([\n    NotifyPropertyChanges\n], CheckBox);\n\n/**\n * CheckBox modules\n */\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar RadioButton_1;\nconst LABEL$1 = 'e-label';\nconst RIPPLE$1 = 'e-ripple-container';\nconst RTL$1 = 'e-rtl';\nconst WRAPPER$1 = 'e-radio-wrapper';\n/**\n * The RadioButton is a graphical user interface element that allows you to select one option from the choices.\n * It contains checked and unchecked states.\n * ```html\n * <input type=\"radio\" id=\"radio\"/>\n * <script>\n * var radioObj = new RadioButton({ label: \"Default\" });\n * radioObj.appendTo(\"#radio\");\n * </script>\n * ```\n */\nlet RadioButton = RadioButton_1 = class RadioButton extends Component {\n    /**\n     * Constructor for creating the widget\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isFocused = false;\n    }\n    changeHandler(event) {\n        this.checked = true;\n        this.dataBind();\n        let changeEventArgs = { value: this.value, event: event };\n        this.trigger('change', changeEventArgs);\n        if (this.tagName === 'EJS-RADIOBUTTON') {\n            event.stopPropagation();\n        }\n    }\n    updateChange(state) {\n        let input;\n        let instance;\n        let radioGrp = this.getRadioGroup();\n        for (let i = 0; i < radioGrp.length; i++) {\n            input = radioGrp[i];\n            if (input !== this.element) {\n                instance = getInstance(input, RadioButton_1);\n                instance.checked = false;\n                if (this.tagName === 'EJS-RADIOBUTTON') {\n                    instance.angularValue = this.value;\n                }\n            }\n        }\n    }\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    destroy() {\n        if (isBlazor() && this.isServerRendered) {\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n        }\n        else {\n            let radioWrap = this.element.parentElement;\n            super.destroy();\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n            if (this.tagName === 'INPUT') {\n                radioWrap.parentNode.insertBefore(this.element, radioWrap);\n                detach(radioWrap);\n                this.element.checked = false;\n                ['name', 'value', 'disabled'].forEach((key) => {\n                    this.element.removeAttribute(key);\n                });\n            }\n            else {\n                ['role', 'aria-checked', 'class'].forEach((key) => {\n                    radioWrap.removeAttribute(key);\n                });\n                radioWrap.innerHTML = '';\n            }\n        }\n    }\n    focusHandler() {\n        this.isFocused = true;\n    }\n    focusOutHandler() {\n        this.getLabel().classList.remove('e-focus');\n    }\n    getModuleName() {\n        return 'radio';\n    }\n    /**\n     * To get the value of selected radio button in a group.\n     * @method getSelectedValue\n     * @return {string}\n     */\n    getSelectedValue() {\n        let input;\n        let radioGrp = this.getRadioGroup();\n        for (let i = 0, len = radioGrp.length; i < len; i++) {\n            input = radioGrp[i];\n            if (input.checked) {\n                return input.value;\n            }\n        }\n        return '';\n    }\n    getRadioGroup() {\n        return document.querySelectorAll('input.e-radio[name=\"' + this.element.getAttribute('name') + '\"]');\n    }\n    /**\n     * Gets the properties to be maintained in the persistence state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist(['checked']);\n    }\n    getLabel() {\n        return this.element.nextElementSibling;\n    }\n    initialize() {\n        if (isNullOrUndefined(this.initialCheckedValue)) {\n            this.initialCheckedValue = this.checked;\n        }\n        this.initWrapper();\n        if (this.name) {\n            this.element.setAttribute('name', this.name);\n        }\n        if (this.value) {\n            this.element.setAttribute('value', this.value);\n        }\n        if (this.checked) {\n            this.element.checked = true;\n        }\n        if (this.disabled) {\n            this.setDisabled();\n        }\n    }\n    initWrapper() {\n        let rippleSpan;\n        let wrapper = this.element.parentElement;\n        if (!wrapper.classList.contains(WRAPPER$1)) {\n            wrapper = this.createElement('div', { className: WRAPPER$1 });\n            this.element.parentNode.insertBefore(wrapper, this.element);\n        }\n        let label = this.createElement('label', { attrs: { for: this.element.id } });\n        wrapper.appendChild(this.element);\n        wrapper.appendChild(label);\n        if (isRippleEnabled) {\n            rippleSpan = this.createElement('span', { className: (RIPPLE$1) });\n            label.appendChild(rippleSpan);\n            rippleEffect(rippleSpan, {\n                duration: 400,\n                isCenterRipple: true\n            });\n        }\n        wrapper.classList.add('e-wrapper');\n        if (this.enableRtl) {\n            label.classList.add(RTL$1);\n        }\n        if (this.cssClass) {\n            addClass([label], this.cssClass.split(' '));\n        }\n        if (this.label) {\n            this.setText(this.label);\n        }\n    }\n    keyUpHandler() {\n        if (this.isFocused) {\n            this.getLabel().classList.add('e-focus');\n        }\n    }\n    labelRippleHandler(e) {\n        let ripple = this.getLabel().getElementsByClassName(RIPPLE$1)[0];\n        rippleMouseHandler(e, ripple);\n    }\n    formResetHandler() {\n        this.checked = this.initialCheckedValue;\n        if (this.initialCheckedValue) {\n            attributes(this.element, { 'checked': 'true' });\n        }\n    }\n    /**\n     * Called internally if any of the property value changes.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let label = this.getLabel();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'checked':\n                    if (newProp.checked) {\n                        this.updateChange(newProp.checked);\n                    }\n                    this.element.checked = newProp.checked;\n                    break;\n                case 'disabled':\n                    if (newProp.disabled) {\n                        this.setDisabled();\n                        this.unWireEvents();\n                    }\n                    else {\n                        this.element.disabled = false;\n                        this.wireEvents();\n                    }\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([label], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([label], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        label.classList.add(RTL$1);\n                    }\n                    else {\n                        label.classList.remove(RTL$1);\n                    }\n                    break;\n                case 'label':\n                    this.setText(newProp.label);\n                    break;\n                case 'labelPosition':\n                    if (newProp.labelPosition === 'Before') {\n                        label.classList.add('e-right');\n                    }\n                    else {\n                        label.classList.remove('e-right');\n                    }\n                    break;\n                case 'name':\n                    this.element.setAttribute('name', newProp.name);\n                    break;\n                case 'value':\n                    this.element.setAttribute('value', newProp.value);\n                    break;\n            }\n        }\n    }\n    /**\n     * Initialize checked Property, Angular and React and Unique ID support.\n     * @private\n     */\n    preRender() {\n        if (isBlazor() && this.isServerRendered) {\n            return;\n        }\n        let element = this.element;\n        this.formElement = closest(this.element, 'form');\n        this.tagName = this.element.tagName;\n        element = wrapperInitialize(this.createElement, 'EJS-RADIOBUTTON', 'radio', element, WRAPPER$1, 'radio');\n        this.element = element;\n        if (this.element.getAttribute('type') !== 'radio') {\n            this.element.setAttribute('type', 'radio');\n        }\n        if (!this.element.id) {\n            this.element.id = getUniqueID('e-' + this.getModuleName());\n        }\n        if (this.tagName === 'EJS-RADIOBUTTON') {\n            let formControlName = this.element.getAttribute('formcontrolname');\n            if (formControlName) {\n                this.setProperties({ 'name': formControlName }, true);\n                this.element.setAttribute('name', formControlName);\n            }\n        }\n    }\n    /**\n     * Initialize the control rendering\n     * @private\n     */\n    render() {\n        if (isBlazor() && this.isServerRendered) {\n            if (isRippleEnabled) {\n                let rippleSpan = this.element.parentElement.getElementsByClassName(RIPPLE$1)[0];\n                rippleEffect(rippleSpan, { duration: 400, isCenterRipple: true });\n            }\n        }\n        else {\n            this.initialize();\n        }\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.renderComplete();\n    }\n    setDisabled() {\n        this.element.disabled = true;\n    }\n    setText(text) {\n        let label = this.getLabel();\n        let textLabel = label.getElementsByClassName(LABEL$1)[0];\n        if (textLabel) {\n            textLabel.textContent = text;\n        }\n        else {\n            text = (this.enableHtmlSanitizer) ? SanitizeHtmlHelper.sanitize(text) : text;\n            textLabel = this.createElement('span', { className: LABEL$1, innerHTML: text });\n            label.appendChild(textLabel);\n        }\n        if (this.labelPosition === 'Before') {\n            this.getLabel().classList.add('e-right');\n        }\n        else {\n            this.getLabel().classList.remove('e-right');\n        }\n    }\n    unWireEvents() {\n        let label = this.getLabel();\n        EventHandler.remove(this.element, 'change', this.changeHandler);\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n        EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n        let rippleLabel = label.getElementsByClassName(LABEL$1)[0];\n        if (rippleLabel) {\n            EventHandler.remove(rippleLabel, 'mousedown', this.labelRippleHandler);\n            EventHandler.remove(rippleLabel, 'mouseup', this.labelRippleHandler);\n        }\n        if (this.formElement) {\n            EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n        }\n    }\n    wireEvents() {\n        let label = this.getLabel();\n        EventHandler.add(this.element, 'change', this.changeHandler, this);\n        EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n        let rippleLabel = label.getElementsByClassName(LABEL$1)[0];\n        if (rippleLabel) {\n            EventHandler.add(rippleLabel, 'mousedown', this.labelRippleHandler, this);\n            EventHandler.add(rippleLabel, 'mouseup', this.labelRippleHandler, this);\n        }\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n        }\n    }\n    /**\n     * Click the RadioButton element\n     * its native method\n     * @public\n     */\n    click() {\n        this.element.click();\n    }\n    /**\n     * Sets the focus to RadioButton\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate$2([\n    Event()\n], RadioButton.prototype, \"change\", void 0);\n__decorate$2([\n    Event()\n], RadioButton.prototype, \"created\", void 0);\n__decorate$2([\n    Property(false)\n], RadioButton.prototype, \"checked\", void 0);\n__decorate$2([\n    Property('')\n], RadioButton.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property(false)\n], RadioButton.prototype, \"disabled\", void 0);\n__decorate$2([\n    Property('')\n], RadioButton.prototype, \"label\", void 0);\n__decorate$2([\n    Property('After')\n], RadioButton.prototype, \"labelPosition\", void 0);\n__decorate$2([\n    Property('')\n], RadioButton.prototype, \"name\", void 0);\n__decorate$2([\n    Property('')\n], RadioButton.prototype, \"value\", void 0);\n__decorate$2([\n    Property(false)\n], RadioButton.prototype, \"enableHtmlSanitizer\", void 0);\nRadioButton = RadioButton_1 = __decorate$2([\n    NotifyPropertyChanges\n], RadioButton);\n\n/**\n * RadioButton modules\n */\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst DISABLED$1 = 'e-switch-disabled';\nconst RIPPLE$2 = 'e-ripple-container';\nconst RIPPLE_CHECK = 'e-ripple-check';\nconst RTL$2 = 'e-rtl';\nconst WRAPPER$2 = 'e-switch-wrapper';\nconst ACTIVE = 'e-switch-active';\n/**\n * The Switch is a graphical user interface element that allows you to toggle between checked and unchecked states.\n * ```html\n * <input type=\"checkbox\" id=\"switch\"/>\n * <script>\n * var switchObj = new Switch({});\n * switchObj.appendTo(\"#switch\");\n * </script>\n * ```\n */\nlet Switch = class Switch extends Component {\n    /**\n     * Constructor for creating the widget.\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isFocused = false;\n        this.isDrag = false;\n    }\n    changeState(state) {\n        let ariaState;\n        let rippleSpan;\n        let wrapper = this.getWrapper();\n        let bar = wrapper.querySelector('.e-switch-inner');\n        let handle = wrapper.querySelector('.e-switch-handle');\n        if (isRippleEnabled) {\n            rippleSpan = wrapper.getElementsByClassName(RIPPLE$2)[0];\n        }\n        if (state) {\n            addClass([bar, handle], ACTIVE);\n            ariaState = 'true';\n            this.element.checked = true;\n            this.checked = true;\n            if (rippleSpan) {\n                addClass([rippleSpan], [RIPPLE_CHECK]);\n            }\n        }\n        else {\n            removeClass([bar, handle], ACTIVE);\n            ariaState = 'false';\n            this.element.checked = false;\n            this.checked = false;\n            if (rippleSpan) {\n                removeClass([rippleSpan], [RIPPLE_CHECK]);\n            }\n        }\n        wrapper.setAttribute('aria-checked', ariaState);\n    }\n    clickHandler(evt) {\n        this.isDrag = false;\n        this.focusOutHandler();\n        this.changeState(!this.checked);\n        this.element.focus();\n        let changeEventArgs = { checked: this.element.checked, event: evt };\n        this.trigger('change', changeEventArgs);\n    }\n    /**\n     * Destroys the Switch widget.\n     * @returns void\n     */\n    destroy() {\n        if (isBlazor() && this.isServerRendered) {\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n        }\n        else {\n            super.destroy();\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n            destroy(this, this.getWrapper(), this.tagName);\n        }\n    }\n    focusHandler() {\n        this.isFocused = true;\n    }\n    focusOutHandler() {\n        this.getWrapper().classList.remove('e-focus');\n    }\n    /**\n     * Gets the module name.\n     * @private\n     */\n    getModuleName() {\n        return 'switch';\n    }\n    /**\n     * Gets the properties to be maintained in the persistence state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist(['checked']);\n    }\n    getWrapper() {\n        return this.element.parentElement;\n    }\n    initialize() {\n        if (isNullOrUndefined(this.initialSwitchCheckedValue)) {\n            this.initialSwitchCheckedValue = this.checked;\n        }\n        if (this.name) {\n            this.element.setAttribute('name', this.name);\n        }\n        if (this.value) {\n            this.element.setAttribute('value', this.value);\n        }\n        if (this.checked) {\n            this.changeState(true);\n        }\n        if (this.disabled) {\n            this.setDisabled();\n        }\n        if (this.onLabel || this.offLabel) {\n            this.setLabel(this.onLabel, this.offLabel);\n        }\n    }\n    initWrapper() {\n        let wrapper = this.element.parentElement;\n        if (!wrapper.classList.contains(WRAPPER$2)) {\n            wrapper = this.createElement('div', {\n                className: WRAPPER$2, attrs: { 'role': 'switch', 'aria-checked': 'false' }\n            });\n            this.element.parentNode.insertBefore(wrapper, this.element);\n        }\n        let switchInner = this.createElement('span', { className: 'e-switch-inner' });\n        let onLabel = this.createElement('span', { className: 'e-switch-on' });\n        let offLabel = this.createElement('span', { className: 'e-switch-off' });\n        let handle = this.createElement('span', { className: 'e-switch-handle' });\n        wrapper.appendChild(this.element);\n        setHiddenInput(this, wrapper);\n        switchInner.appendChild(onLabel);\n        switchInner.appendChild(offLabel);\n        wrapper.appendChild(switchInner);\n        wrapper.appendChild(handle);\n        if (isRippleEnabled) {\n            let rippleSpan = this.createElement('span', { className: RIPPLE$2 });\n            handle.appendChild(rippleSpan);\n            rippleEffect(rippleSpan, { duration: 400, isCenterRipple: true });\n        }\n        wrapper.classList.add('e-wrapper');\n        if (this.enableRtl) {\n            wrapper.classList.add(RTL$2);\n        }\n        if (this.cssClass) {\n            addClass([wrapper], this.cssClass.split(' '));\n        }\n    }\n    /**\n     * Called internally if any of the property value changes.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let wrapper = this.getWrapper();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'checked':\n                    this.changeState(newProp.checked);\n                    break;\n                case 'disabled':\n                    if (newProp.disabled) {\n                        this.setDisabled();\n                        this.unWireEvents();\n                    }\n                    else {\n                        this.element.disabled = false;\n                        wrapper.classList.remove(DISABLED$1);\n                        wrapper.setAttribute('aria-disabled', 'false');\n                        this.wireEvents();\n                    }\n                    break;\n                case 'value':\n                    this.element.setAttribute('value', newProp.value);\n                    break;\n                case 'name':\n                    this.element.setAttribute('name', newProp.name);\n                    break;\n                case 'onLabel':\n                case 'offLabel':\n                    this.setLabel(newProp.onLabel, newProp.offLabel);\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        wrapper.classList.add(RTL$2);\n                    }\n                    else {\n                        wrapper.classList.remove(RTL$2);\n                    }\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([wrapper], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([wrapper], newProp.cssClass.split(' '));\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Initialize Angular, React and Unique ID support.\n     * @private\n     */\n    preRender() {\n        if (isBlazor() && this.isServerRendered) {\n            return;\n        }\n        let element = this.element;\n        this.formElement = closest(this.element, 'form');\n        this.tagName = this.element.tagName;\n        preRender(this, 'EJS-SWITCH', WRAPPER$2, element, this.getModuleName());\n    }\n    /**\n     * Initialize control rendering.\n     * @private\n     */\n    render() {\n        if (isBlazor() && this.isServerRendered) {\n            if (isRippleEnabled) {\n                rippleEffect(this.element.parentElement, { duration: 400, isCenterRipple: true });\n            }\n        }\n        else {\n            this.initWrapper();\n            this.initialize();\n        }\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.renderComplete();\n    }\n    rippleHandler(e) {\n        let rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];\n        rippleMouseHandler(e, rippleSpan);\n        if (e.type === 'mousedown' && e.currentTarget.classList.contains('e-switch-wrapper') && e.which === 1) {\n            this.isDrag = true;\n            this.isFocused = false;\n        }\n    }\n    rippleTouchHandler(eventType) {\n        let rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];\n        if (rippleSpan) {\n            let event = document.createEvent('MouseEvents');\n            event.initEvent(eventType, false, true);\n            rippleSpan.dispatchEvent(event);\n        }\n    }\n    setDisabled() {\n        let wrapper = this.getWrapper();\n        this.element.disabled = true;\n        wrapper.classList.add(DISABLED$1);\n        wrapper.setAttribute('aria-disabled', 'true');\n    }\n    setLabel(onText, offText) {\n        let wrapper = this.getWrapper();\n        if (onText) {\n            wrapper.querySelector('.e-switch-on').textContent = onText;\n        }\n        if (offText) {\n            wrapper.querySelector('.e-switch-off').textContent = offText;\n        }\n    }\n    switchFocusHandler() {\n        if (this.isFocused) {\n            this.getWrapper().classList.add('e-focus');\n        }\n    }\n    switchMouseUp(e) {\n        let target = e.target;\n        let rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];\n        if (e.type === 'touchmove') {\n            e.preventDefault();\n        }\n        if (e.type === 'touchstart') {\n            this.isDrag = true;\n            this.rippleTouchHandler('mousedown');\n        }\n        if (this.isDrag) {\n            if ((e.type === 'mouseup' && target.className.indexOf('e-switch') < 0) || e.type === 'touchend') {\n                this.clickHandler(e);\n                this.rippleTouchHandler('mouseup');\n                e.preventDefault();\n            }\n        }\n    }\n    formResetHandler() {\n        this.checked = this.initialSwitchCheckedValue;\n        this.element.checked = this.initialSwitchCheckedValue;\n    }\n    /**\n     * Toggle the Switch component state into checked/unchecked.\n     * @returns void\n     */\n    toggle() {\n        this.clickHandler();\n    }\n    wireEvents() {\n        let wrapper = this.getWrapper();\n        let handle = wrapper.querySelector('.e-switch-handle');\n        this.delegateMouseUpHandler = this.switchMouseUp.bind(this);\n        this.delegateKeyUpHandler = this.switchFocusHandler.bind(this);\n        EventHandler.add(wrapper, 'click', this.clickHandler, this);\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n        EventHandler.add(this.element, 'mouseup', this.delegateMouseUpHandler, this);\n        EventHandler.add(this.element, 'keyup', this.delegateKeyUpHandler, this);\n        EventHandler.add(wrapper, 'mousedown mouseup', this.rippleHandler, this);\n        EventHandler.add(wrapper, 'touchstart touchmove touchend', this.switchMouseUp, this);\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n        }\n    }\n    unWireEvents() {\n        let wrapper = this.getWrapper();\n        let handle = wrapper.querySelector('.e-switch-handle');\n        EventHandler.remove(wrapper, 'click', this.clickHandler);\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n        EventHandler.remove(this.element, 'mouseup', this.delegateMouseUpHandler);\n        EventHandler.remove(this.element, 'keyup', this.delegateKeyUpHandler);\n        EventHandler.remove(wrapper, 'mousedown mouseup', this.rippleHandler);\n        EventHandler.remove(wrapper, 'touchstart touchmove touchend', this.switchMouseUp);\n        if (this.formElement) {\n            EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n        }\n    }\n    /**\n     * Click the switch element\n     * its native method\n     * @public\n     */\n    click() {\n        this.element.click();\n    }\n    /**\n     * Sets the focus to Switch\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate$3([\n    Event()\n], Switch.prototype, \"change\", void 0);\n__decorate$3([\n    Event()\n], Switch.prototype, \"created\", void 0);\n__decorate$3([\n    Property(false)\n], Switch.prototype, \"checked\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"cssClass\", void 0);\n__decorate$3([\n    Property(false)\n], Switch.prototype, \"disabled\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"name\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"onLabel\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"offLabel\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"value\", void 0);\nSwitch = __decorate$3([\n    NotifyPropertyChanges\n], Switch);\n\n/**\n * Switch modules\n */\n\nvar __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst classNames = {\n    chipSet: 'e-chip-set',\n    chip: 'e-chip',\n    avatar: 'e-chip-avatar',\n    text: 'e-chip-text',\n    icon: 'e-chip-icon',\n    delete: 'e-chip-delete',\n    deleteIcon: 'e-dlt-btn',\n    multiSelection: 'e-multi-selection',\n    singleSelection: 'e-selection',\n    active: 'e-active',\n    chipWrapper: 'e-chip-avatar-wrap',\n    iconWrapper: 'e-chip-icon-wrap',\n    focused: 'e-focused',\n    disabled: 'e-disabled',\n    rtl: 'e-rtl',\n};\n/**\n * A chip component is a small block of essential information, mostly used on contacts or filter tags.\n * ```html\n * <div id=\"chip\"></div>\n * ```\n * ```typescript\n * <script>\n * var chipObj = new ChipList();\n * chipObj.appendTo(\"#chip\");\n * </script>\n * ```\n */\nlet ChipList = class ChipList extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.multiSelectedChip = [];\n    }\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        //prerender\n    }\n    /**\n     * To find the chips length.\n     * @returns boolean\n     * @private\n     */\n    chipType() {\n        return (this.chips && this.chips.length && this.chips.length > 0);\n    }\n    /**\n     * To Initialize the control rendering.\n     * @returns void\n     * @private\n     */\n    render() {\n        this.type = this.chips.length ? 'chipset' : (this.text || this.element.innerText ? 'chip' : 'chipset');\n        if (!isBlazor() || !this.isServerRendered) {\n            this.setAttributes();\n            this.createChip();\n            this.setRtl();\n            this.select(this.selectedChips);\n        }\n        this.wireEvent(false);\n        this.rippleFunction = rippleEffect(this.element, {\n            selector: '.e-chip'\n        });\n        this.renderComplete();\n    }\n    createChip() {\n        this.innerText = this.element.innerText.trim();\n        if (isBlazor()) {\n            let childElement = this.element.querySelectorAll('.e-chip');\n            for (let i = 0; i < childElement.length; i++) {\n                if (childElement[i] != null) {\n                    detach(childElement[i]);\n                }\n            }\n        }\n        else {\n            this.element.innerHTML = '';\n        }\n        this.chipCreation(this.type === 'chip' ? [this.innerText ? this.innerText : this.text] : this.chips);\n    }\n    setAttributes() {\n        if (this.type === 'chip') {\n            this.element.tabIndex = 0;\n            this.element.setAttribute('role', 'option');\n        }\n        else {\n            this.element.classList.add(classNames.chipSet);\n            this.element.setAttribute('role', 'listbox');\n            if (this.selection === 'Multiple') {\n                this.element.classList.add(classNames.multiSelection);\n                this.element.setAttribute('aria-multiselectable', 'true');\n            }\n            else if (this.selection === 'Single') {\n                this.element.classList.add(classNames.singleSelection);\n                this.element.setAttribute('aria-multiselectable', 'false');\n            }\n            else {\n                this.element.setAttribute('aria-multiselectable', 'false');\n            }\n        }\n    }\n    setRtl() {\n        this.element.classList[this.enableRtl ? 'add' : 'remove'](classNames.rtl);\n    }\n    chipCreation(data) {\n        let chipListArray = [];\n        for (let i = 0; i < data.length; i++) {\n            let fieldsData = this.getFieldValues(data[i]);\n            let chipArray = this.elementCreation(fieldsData);\n            let className = (classNames.chip + ' ' + (fieldsData.enabled ? ' ' : classNames.disabled) + ' ' +\n                (fieldsData.avatarIconCss || fieldsData.avatarText ? classNames.chipWrapper : (fieldsData.leadingIconCss ?\n                    classNames.iconWrapper : ' ')) + ' ' + fieldsData.cssClass).split(' ').filter((css) => css);\n            if (!this.chipType()) {\n                chipListArray = chipArray;\n                addClass([this.element], className);\n                this.element.setAttribute('aria-label', fieldsData.text);\n                if (fieldsData.value) {\n                    this.element.setAttribute('data-value', fieldsData.value.toString());\n                }\n            }\n            else {\n                let wrapper = this.createElement('DIV', {\n                    className: className.join(' '), attrs: {\n                        tabIndex: '0', role: 'option',\n                        'aria-label': fieldsData.text, 'aria-selected': 'false'\n                    }\n                });\n                if (fieldsData.value) {\n                    wrapper.setAttribute('data-value', fieldsData.value.toString());\n                }\n                append(chipArray, wrapper);\n                chipListArray.push(wrapper);\n            }\n        }\n        append(chipListArray, this.element);\n    }\n    getFieldValues(data) {\n        let chipEnabled = !(this.enabled.toString() === 'false');\n        let fields = {\n            text: typeof data === 'object' ? (data.text ? data.text.toString() : this.text.toString()) :\n                (!this.chipType() ? (this.innerText ? this.innerText : this.text.toString()) : data.toString()),\n            cssClass: typeof data === 'object' ? (data.cssClass ? data.cssClass.toString() : this.cssClass.toString()) :\n                (this.cssClass.toString()),\n            leadingIconCss: typeof data === 'object' ? (data.leadingIconCss ? data.leadingIconCss.toString() :\n                this.leadingIconCss.toString()) : (this.leadingIconCss.toString()),\n            avatarIconCss: typeof data === 'object' ? (data.avatarIconCss ? data.avatarIconCss.toString() :\n                this.avatarIconCss.toString()) : (this.avatarIconCss.toString()),\n            avatarText: typeof data === 'object' ? (data.avatarText ? data.avatarText.toString() : this.avatarText.toString()) :\n                (this.avatarText.toString()),\n            trailingIconCss: typeof data === 'object' ? (data.trailingIconCss ? data.trailingIconCss.toString() :\n                this.trailingIconCss.toString()) : (this.trailingIconCss.toString()),\n            enabled: typeof data === 'object' ? (!isNullOrUndefined(data.enabled) ? (data.enabled.toString() === 'false' ? false : true) :\n                chipEnabled) : (chipEnabled),\n            value: typeof data === 'object' ? ((data.value ? data.value.toString() : null)) : null,\n            leadingIconUrl: typeof data === 'object' ? (data.leadingIconUrl ? data.leadingIconUrl.toString() : this.leadingIconUrl) :\n                this.leadingIconUrl,\n            trailingIconUrl: typeof data === 'object' ? (data.trailingIconUrl ? data.trailingIconUrl.toString() : this.trailingIconUrl) :\n                this.trailingIconUrl\n        };\n        return fields;\n    }\n    elementCreation(fields) {\n        let chipArray = [];\n        if (fields.avatarText || fields.avatarIconCss) {\n            let className = (classNames.avatar + ' ' + fields.avatarIconCss).trim();\n            let chipAvatarElement = this.createElement('span', { className: className });\n            chipAvatarElement.innerText = fields.avatarText;\n            chipArray.push(chipAvatarElement);\n        }\n        else if (fields.leadingIconCss) {\n            let className = (classNames.icon + ' ' + fields.leadingIconCss).trim();\n            let chipIconElement = this.createElement('span', { className: className });\n            chipArray.push(chipIconElement);\n        }\n        else if (fields.leadingIconUrl) {\n            let className = (classNames.avatar + ' ' + 'image-url').trim();\n            let chipIconElement = this.createElement('span', { className: className });\n            chipIconElement.style.backgroundImage = 'url(' + fields.leadingIconUrl + ')';\n            chipArray.push(chipIconElement);\n        }\n        let chipTextElement = this.createElement('span', { className: classNames.text });\n        chipTextElement.innerText = fields.text;\n        chipArray.push(chipTextElement);\n        if (fields.trailingIconCss || (this.chipType() && this.enableDelete)) {\n            let className = (classNames.delete + ' ' +\n                (fields.trailingIconCss ? fields.trailingIconCss : classNames.deleteIcon)).trim();\n            let chipdeleteElement = this.createElement('span', { className: className });\n            chipArray.push(chipdeleteElement);\n        }\n        else if (fields.trailingIconUrl) {\n            let className = ('trailing-icon-url').trim();\n            let chipIconsElement = this.createElement('span', { className: className });\n            chipIconsElement.style.backgroundImage = 'url(' + fields.trailingIconUrl + ')';\n            chipArray.push(chipIconsElement);\n        }\n        return chipArray;\n    }\n    /**\n     * A function that finds chip based on given input.\n     * @param  {number | HTMLElement } fields - We can pass index number or element of chip.\n     */\n    find(fields) {\n        let chipData;\n        let chipElement = fields instanceof HTMLElement ?\n            fields : this.element.querySelectorAll('.' + classNames.chip)[fields];\n        if (chipElement && this.chipType()) {\n            chipData = { text: undefined, index: undefined, element: undefined, data: undefined };\n            chipData.index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipElement);\n            chipData.text = typeof this.chips[chipData.index] === 'object' ?\n                (this.chips[chipData.index].text ?\n                    this.chips[chipData.index].text.toString() : '') :\n                this.chips[chipData.index].toString();\n            chipData.data = this.chips[chipData.index];\n            chipData.element = chipElement;\n        }\n        return chipData;\n    }\n    /**\n     * Allows adding the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     * @param  {string[] | number[] | ChipModel[] | string | number | ChipModel} chipsData - We can pass array of string or\n     *  array of number or array of chip model or string data or number data or chip model.\n     * @deprecated\n     */\n    add(chipsData) {\n        if (this.type !== 'chip') {\n            let fieldData = chipsData instanceof Array ?\n                chipsData : [chipsData];\n            this.chips.push(...fieldData);\n            this.chipCreation(fieldData);\n        }\n    }\n    /**\n     * Allows selecting the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n     *  or chip element or array of chip element.\n     */\n    select(fields) {\n        this.onSelect(fields, false);\n    }\n    multiSelection(newProp) {\n        const items = this.element.querySelectorAll('.' + 'e-chip');\n        for (let j = 0; j < newProp.length; j++) {\n            if (typeof newProp[j] === 'string') {\n                for (let k = 0; k < items.length; k++) {\n                    if (newProp[j] !== k) {\n                        if (newProp[j] === items[k].attributes[5].value) {\n                            this.multiSelectedChip.push(k);\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                this.multiSelectedChip.push(newProp[j]);\n            }\n        }\n    }\n    onSelect(fields, callFromProperty) {\n        if (this.chipType() && this.selection !== 'None') {\n            if (callFromProperty) {\n                let chipElements = this.element.querySelectorAll('.' + classNames.chip);\n                for (let i = 0; i < chipElements.length; i++) {\n                    chipElements[i].setAttribute('aria-selected', 'false');\n                    chipElements[i].classList.remove(classNames.active);\n                }\n            }\n            let fieldData = fields instanceof Array ? fields : [fields];\n            for (let i = 0; i < fieldData.length; i++) {\n                let chipElement = fieldData[i] instanceof HTMLElement ? fieldData[i]\n                    : this.element.querySelectorAll('.' + classNames.chip)[fieldData[i]];\n                if (chipElement instanceof HTMLElement) {\n                    this.selectionHandler(chipElement);\n                }\n            }\n        }\n    }\n    /**\n     * Allows removing the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n     *  or chip element or array of chip element.\n     */\n    remove(fields) {\n        if (this.chipType()) {\n            let fieldData = fields instanceof Array ? fields : [fields];\n            let chipElements = [];\n            let chipCollection = this.element.querySelectorAll('.' + classNames.chip);\n            fieldData.forEach((data) => {\n                let chipElement = data instanceof HTMLElement ? data\n                    : chipCollection[data];\n                if (chipElement instanceof HTMLElement) {\n                    chipElements.push(chipElement);\n                }\n            });\n            chipElements.forEach((element) => {\n                let chips = this.element.querySelectorAll('.' + classNames.chip);\n                let index = Array.prototype.slice.call(chips).indexOf(element);\n                this.deleteHandler(element, index);\n            });\n        }\n    }\n    /**\n     * Returns the selected chip(s) data.\n     */\n    getSelectedChips() {\n        let selectedChips;\n        if (this.chipType() && this.selection !== 'None') {\n            let selectedItems = { texts: [], Indexes: [], data: [], elements: [] };\n            const items = this.element.querySelectorAll('.' + classNames.active);\n            for (let i = 0; i < items.length; i++) {\n                const chip = items[i];\n                selectedItems.elements.push(chip);\n                let index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chip);\n                selectedItems.Indexes.push(index);\n                selectedItems.data.push(this.chips[index]);\n                let text = typeof this.chips[index] === 'object' ?\n                    this.chips[index].text ? this.chips[index].text.toString()\n                        : null : this.chips[index].toString();\n                selectedItems.texts.push(text);\n            }\n            let selectedItem = {\n                text: selectedItems.texts[0], index: selectedItems.Indexes[0],\n                data: selectedItems.data[0], element: selectedItems.elements[0]\n            };\n            selectedChips = !isNullOrUndefined(selectedItem.index) ?\n                (this.selection === 'Multiple' ? selectedItems : selectedItem) : undefined;\n        }\n        return selectedChips;\n    }\n    wireEvent(unWireEvent) {\n        if (!unWireEvent) {\n            EventHandler.add(this.element, 'click', this.clickHandler, this);\n            EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n            EventHandler.add(this.element, 'keydown', this.keyHandler, this);\n            EventHandler.add(this.element, 'keyup', this.keyHandler, this);\n        }\n        else {\n            EventHandler.remove(this.element, 'click', this.clickHandler);\n            EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n            EventHandler.remove(this.element, 'keydown', this.keyHandler);\n            EventHandler.remove(this.element, 'keyup', this.keyHandler);\n        }\n    }\n    keyHandler(e) {\n        if (e.target.classList.contains(classNames.chip)) {\n            if (e.type === 'keydown') {\n                if (e.keyCode === 13) {\n                    this.clickHandler(e);\n                }\n                else if (e.keyCode === 46 && this.enableDelete) {\n                    this.clickHandler(e, true);\n                }\n            }\n            else if (e.keyCode === 9) {\n                this.focusInHandler(e.target);\n            }\n        }\n    }\n    focusInHandler(chipWrapper) {\n        if (!chipWrapper.classList.contains(classNames.focused)) {\n            chipWrapper.classList.add(classNames.focused);\n        }\n    }\n    focusOutHandler(e) {\n        let chipWrapper = closest(e.target, '.' + classNames.chip);\n        let focusedElement = !this.chipType() ? (this.element.classList.contains(classNames.focused) ?\n            this.element : null) : this.element.querySelector('.' + classNames.focused);\n        if (chipWrapper && focusedElement) {\n            focusedElement.classList.remove(classNames.focused);\n        }\n    }\n    clickHandler(e, del = false) {\n        let chipWrapper = closest(e.target, '.' + classNames.chip);\n        if (chipWrapper) {\n            let chipDataArgs;\n            if (this.chipType()) {\n                chipDataArgs = this.find(chipWrapper);\n            }\n            else {\n                let index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipWrapper);\n                chipDataArgs = {\n                    text: this.innerText ? this.innerText : this.text,\n                    element: chipWrapper, data: this.text, index: index\n                };\n            }\n            chipDataArgs.event = e;\n            chipDataArgs.cancel = false;\n            this.trigger('beforeClick', chipDataArgs, (observedArgs) => {\n                if (!observedArgs.cancel) {\n                    observedArgs.element = isBlazor() ? getElement(observedArgs.element) : observedArgs.element;\n                    this.clickEventHandler(observedArgs.element, e, del);\n                }\n            });\n        }\n    }\n    clickEventHandler(chipWrapper, e, del) {\n        if (this.chipType()) {\n            let chipData = this.find(chipWrapper);\n            chipData.event = e;\n            let deleteElement = e.target.classList.contains(classNames.deleteIcon) ?\n                e.target : (del ? chipWrapper.querySelector('.' + classNames.deleteIcon) : undefined);\n            if (deleteElement && this.enableDelete) {\n                chipData.cancel = false;\n                let deletedItemArgs = chipData;\n                this.trigger('delete', deletedItemArgs, (observedArgs) => {\n                    if (!observedArgs.cancel) {\n                        observedArgs.element = isBlazor() ? getElement(observedArgs.element) : observedArgs.element;\n                        this.deleteHandler(observedArgs.element, observedArgs.index);\n                    }\n                });\n            }\n            else if (this.selection !== 'None') {\n                this.selectionHandler(chipWrapper);\n                chipData.selected = chipWrapper.classList.contains(classNames.active);\n                let selectedItemArgs = chipData;\n                this.trigger('click', selectedItemArgs);\n            }\n            else {\n                this.focusInHandler(chipWrapper);\n                let clickedItemArgs = chipData;\n                this.trigger('click', clickedItemArgs);\n            }\n        }\n        else {\n            this.focusInHandler(chipWrapper);\n            let clickedItemArgs = {\n                text: this.innerText ? this.innerText : this.text,\n                element: chipWrapper, data: this.text, event: e\n            };\n            this.trigger('click', clickedItemArgs);\n        }\n    }\n    selectionHandler(chipWrapper) {\n        if (this.selection === 'Single') {\n            let activeElement = this.element.querySelector('.' + classNames.active);\n            if (activeElement && activeElement !== chipWrapper) {\n                activeElement.classList.remove(classNames.active);\n                activeElement.setAttribute('aria-selected', 'false');\n            }\n            this.setProperties({ selectedChips: null }, true);\n        }\n        else {\n            this.setProperties({ selectedChips: [] }, true);\n        }\n        if (chipWrapper.classList.contains(classNames.active)) {\n            chipWrapper.classList.remove(classNames.active);\n            chipWrapper.setAttribute('aria-selected', 'false');\n        }\n        else {\n            chipWrapper.classList.add(classNames.active);\n            chipWrapper.setAttribute('aria-selected', 'true');\n        }\n        this.updateSelectedChips();\n    }\n    updateSelectedChips() {\n        let chipListEle = this.element.querySelectorAll('.e-chip');\n        let chipCollIndex = [];\n        let chipCollValue = [];\n        let chip = null;\n        let value;\n        for (let i = 0; i < chipListEle.length; i++) {\n            let selectedEle = this.element.querySelectorAll('.e-chip')[i];\n            if (selectedEle.getAttribute('aria-selected') === 'true') {\n                value = selectedEle.getAttribute('data-value');\n                if (this.selection === 'Single' && selectedEle.classList.contains('e-active')) {\n                    chip = value ? value : i;\n                    break;\n                }\n                else {\n                    value ? chipCollValue.push(value) : chipCollIndex.push(i);\n                }\n            }\n        }\n        this.setProperties({ selectedChips: this.selection === 'Single' ? chip : value ? chipCollValue : chipCollIndex }, true);\n    }\n    deleteHandler(chipWrapper, index) {\n        this.allowServerDataBinding = true;\n        this.chips.splice(index, 1);\n        this.setProperties({ chips: this.chips }, true);\n        this.serverDataBind();\n        this.allowServerDataBinding = false;\n        if (!(isBlazor() && this.isServerRendered)) {\n            detach(chipWrapper);\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.\n     */\n    destroy() {\n        removeClass([this.element], [classNames.chipSet, classNames.chip, classNames.rtl,\n            classNames.multiSelection, classNames.singleSelection, classNames.disabled, classNames.chipWrapper, classNames.iconWrapper,\n            classNames.active, classNames.focused].concat(this.cssClass.toString().split(' ').filter((css) => css)));\n        this.removeMultipleAttributes(['tabindex', 'role', 'aria-label', 'aria-multiselectable'], this.element);\n        this.wireEvent(true);\n        this.rippleFunction();\n        if (isBlazor()) {\n            let chipChildElement = !this.chipType() ? this.element.querySelectorAll('.e-chip-text') :\n                this.element.querySelectorAll('.e-chip');\n            for (let i = 0; i < chipChildElement.length; i++) {\n                if (chipChildElement[i] != null) {\n                    detach(chipChildElement[i]);\n                }\n            }\n        }\n        else {\n            super.destroy();\n            this.element.innerHTML = '';\n            this.element.innerText = this.innerText;\n        }\n    }\n    removeMultipleAttributes(attributes$$1, element) {\n        attributes$$1.forEach((attr) => {\n            element.removeAttribute(attr);\n        });\n    }\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    getModuleName() {\n        return 'chip-list';\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'chips':\n                case 'text':\n                case 'avatarText':\n                case 'avatarIconCss':\n                case 'leadingIconCss':\n                case 'trailingIconCss':\n                case 'selection':\n                case 'enableDelete':\n                case 'enabled':\n                    if (!(isBlazor() && this.isServerRendered)) {\n                        this.isServerRendered = false;\n                        this.refresh();\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'cssClass':\n                    if (!(isBlazor() && this.isServerRendered)) {\n                        if (!this.chipType()) {\n                            removeClass([this.element], oldProp.cssClass.toString().split(' ').filter((css) => css));\n                            addClass([this.element], newProp.cssClass.toString().split(' ').filter((css) => css));\n                        }\n                        else {\n                            this.isServerRendered = false;\n                            this.refresh();\n                            this.isServerRendered = true;\n                        }\n                    }\n                    break;\n                case 'selectedChips':\n                    removeClass(this.element.querySelectorAll('.e-active'), 'e-active');\n                    if (this.selection === 'Multiple') {\n                        this.multiSelectedChip = [];\n                        this.multiSelection(newProp.selectedChips);\n                        this.onSelect(this.multiSelectedChip, true);\n                        this.updateSelectedChips();\n                    }\n                    else {\n                        this.onSelect(newProp.selectedChips, true);\n                    }\n                    break;\n                case 'enableRtl':\n                    this.setRtl();\n                    break;\n            }\n        }\n    }\n};\n__decorate$4([\n    Property([])\n], ChipList.prototype, \"chips\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"text\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"avatarText\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"avatarIconCss\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"leadingIconCss\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"trailingIconCss\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"leadingIconUrl\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"trailingIconUrl\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"cssClass\", void 0);\n__decorate$4([\n    Property(true)\n], ChipList.prototype, \"enabled\", void 0);\n__decorate$4([\n    Property([])\n], ChipList.prototype, \"selectedChips\", void 0);\n__decorate$4([\n    Property('None')\n], ChipList.prototype, \"selection\", void 0);\n__decorate$4([\n    Property(false)\n], ChipList.prototype, \"enableDelete\", void 0);\n__decorate$4([\n    Event()\n], ChipList.prototype, \"created\", void 0);\n__decorate$4([\n    Event()\n], ChipList.prototype, \"click\", void 0);\n__decorate$4([\n    Event()\n], ChipList.prototype, \"beforeClick\", void 0);\n__decorate$4([\n    Event()\n], ChipList.prototype, \"delete\", void 0);\nChipList = __decorate$4([\n    NotifyPropertyChanges\n], ChipList);\n\n/**\n * Represents ChipList `Chip` model class.\n */\nclass Chip {\n}\n\n/**\n * Chip modules\n */\n\n/**\n * Button all modules\n */\n\nexport { wrapperInitialize, getTextNode, destroy, preRender, createCheckBox, rippleMouseHandler, setHiddenInput, buttonObserver, Button, CheckBox, RadioButton, Switch, classNames, ChipList, Chip };\n//# sourceMappingURL=ej2-buttons.es2015.js.map\n","import { Animation, Base, ChildProperty, Complex, Component, Draggable, Event, EventHandler, NotifyPropertyChanges, Property, SanitizeHtmlHelper, Touch, addClass, append, attributes, blazorTemplates, closest, compareElementParent, compile, debounce, detach, extend, formatUnit, getComponent, getUniqueID, getValue, isBlazor, isNullOrUndefined, isVisible, merge, prepend, remove, removeClass, resetBlazorTemplate, rippleEffect, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\n\nlet cssClass = {\n    li: 'e-list-item',\n    ul: 'e-list-parent e-ul',\n    group: 'e-list-group-item',\n    icon: 'e-list-icon',\n    text: 'e-list-text',\n    check: 'e-list-check',\n    checked: 'e-checked',\n    selected: 'e-selected',\n    expanded: 'e-expanded',\n    textContent: 'e-text-content',\n    hasChild: 'e-has-child',\n    level: 'e-level',\n    url: 'e-list-url',\n    collapsible: 'e-icon-collapsible',\n    disabled: 'e-disabled',\n    image: 'e-list-img',\n    iconWrapper: 'e-icon-wrapper',\n    anchorWrap: 'e-anchor-wrap',\n    navigable: 'e-navigable'\n};\n/**\n * Base List Generator\n */\nvar ListBase;\n(function (ListBase) {\n    /**\n     * Default mapped fields.\n     */\n    ListBase.defaultMappedFields = {\n        id: 'id',\n        text: 'text',\n        url: 'url',\n        value: 'value',\n        isChecked: 'isChecked',\n        enabled: 'enabled',\n        expanded: 'expanded',\n        selected: 'selected',\n        iconCss: 'iconCss',\n        child: 'child',\n        isVisible: 'isVisible',\n        hasChildren: 'hasChildren',\n        tooltip: 'tooltip',\n        htmlAttributes: 'htmlAttributes',\n        urlAttributes: 'urlAttributes',\n        imageAttributes: 'imageAttributes',\n        imageUrl: 'imageUrl',\n        groupBy: null\n    };\n    let defaultAriaAttributes = {\n        level: 1,\n        listRole: 'presentation',\n        itemRole: 'presentation',\n        groupItemRole: 'group',\n        itemText: 'list-item',\n        wrapperRole: 'presentation'\n    };\n    let defaultListBaseOptions = {\n        showCheckBox: false,\n        showIcon: false,\n        enableHtmlSanitizer: false,\n        expandCollapse: false,\n        fields: ListBase.defaultMappedFields,\n        ariaAttributes: defaultAriaAttributes,\n        listClass: '',\n        itemClass: '',\n        processSubChild: false,\n        sortOrder: 'None',\n        template: null,\n        groupTemplate: null,\n        headerTemplate: null,\n        expandIconClass: 'e-icon-collapsible',\n        moduleName: 'list',\n        expandIconPosition: 'Right',\n        itemNavigable: false\n    };\n    /**\n     * Function helps to created and return the UL Li element based on your data.\n     * @param  {{[key:string]:Object}[]|string[]} dataSource - Specifies an array of JSON or String data.\n     * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n     */\n    function createList(createElement, dataSource, options, isSingleLevel) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        let type = typeofData(dataSource).typeof;\n        if (type === 'string' || type === 'number') {\n            return createListFromArray(createElement, dataSource, isSingleLevel, options);\n        }\n        else {\n            return createListFromJson(createElement, dataSource, options, ariaAttributes.level, isSingleLevel);\n        }\n    }\n    ListBase.createList = createList;\n    /**\n     * Function helps to created an element list based on string array input .\n     * @param  {string[]} dataSource - Specifies an array of string data\n     */\n    function createListFromArray(createElement, dataSource, isSingleLevel, options) {\n        let subChild = createListItemFromArray(createElement, dataSource, isSingleLevel, options);\n        return generateUL(createElement, subChild, null, options);\n    }\n    ListBase.createListFromArray = createListFromArray;\n    /**\n     * Function helps to created an element list based on string array input .\n     * @param  {string[]} dataSource - Specifies an array of string data\n     */\n    function createListItemFromArray(createElement, dataSource, isSingleLevel, options) {\n        let subChild = [];\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        cssClass = getModuleClass(curOpt.moduleName);\n        let id = generateId(); // generate id for drop-down-list option.\n        for (let i = 0; i < dataSource.length; i++) {\n            if (isNullOrUndefined(dataSource[i])) {\n                continue;\n            }\n            let li;\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: dataSource[i],\n                    options: curOpt\n                };\n                curOpt.itemCreating(curData);\n            }\n            if (isSingleLevel) {\n                li = generateSingleLevelLI(createElement, dataSource[i], undefined, null, null, [], null, id, i, options);\n            }\n            else {\n                li = generateLI(createElement, dataSource[i], undefined, null, null, options);\n            }\n            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: dataSource[i],\n                    item: li,\n                    options: curOpt\n                };\n                curOpt.itemCreated(curData);\n            }\n            subChild.push(li);\n        }\n        return subChild;\n    }\n    ListBase.createListItemFromArray = createListItemFromArray;\n    /**\n     * Function helps to created an element list based on array of JSON input .\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies an array of JSON data.\n     * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n     */\n    // tslint:disable-next-line:max-func-body-length\n    function createListItemFromJson(createElement, dataSource, options, level, isSingleLevel) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        cssClass = getModuleClass(curOpt.moduleName);\n        let fields = extend({}, ListBase.defaultMappedFields, curOpt.fields);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        let id;\n        let checkboxElement = [];\n        if (level) {\n            ariaAttributes.level = level;\n        }\n        let child = [];\n        let li;\n        let anchorElement;\n        if (dataSource && dataSource.length && !isNullOrUndefined(typeofData(dataSource).item) &&\n            !typeofData(dataSource).item.hasOwnProperty(fields.id)) {\n            id = generateId(); // generate id for drop-down-list option.\n        }\n        for (let i = 0; i < dataSource.length; i++) {\n            let fieldData = getFieldValues(dataSource[i], fields);\n            if (isNullOrUndefined(dataSource[i])) {\n                continue;\n            }\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: fieldData[fields.text],\n                    options: curOpt,\n                    fields: fields\n                };\n                curOpt.itemCreating(curData);\n            }\n            let curItem = dataSource[i];\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                fieldData = getFieldValues(dataSource[i], fields);\n            }\n            if (fieldData.hasOwnProperty(fields.id) && !isNullOrUndefined(fieldData[fields.id])) {\n                id = fieldData[fields.id];\n            }\n            let innerEle = [];\n            if (curOpt.showCheckBox) {\n                if (curOpt.itemNavigable && (fieldData[fields.url] || fieldData[fields.urlAttributes])) {\n                    checkboxElement.push(createElement('input', { className: cssClass.check, attrs: { type: 'checkbox' } }));\n                }\n                else {\n                    innerEle.push(createElement('input', { className: cssClass.check, attrs: { type: 'checkbox' } }));\n                }\n            }\n            if (isSingleLevel === true) {\n                if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss])) {\n                    innerEle.push(createElement('span', { className: cssClass.icon + ' ' + fieldData[fields.iconCss] }));\n                }\n                li = generateSingleLevelLI(createElement, curItem, fieldData, fields, curOpt.itemClass, innerEle, (curItem.hasOwnProperty('isHeader') &&\n                    curItem.isHeader) ? true : false, id, i, options);\n                anchorElement = li.querySelector('.' + cssClass.anchorWrap);\n                if (curOpt.itemNavigable && checkboxElement.length) {\n                    prepend(checkboxElement, li.firstElementChild);\n                }\n            }\n            else {\n                li = generateLI(createElement, curItem, fieldData, fields, curOpt.itemClass, options);\n                li.classList.add(cssClass.level + '-' + ariaAttributes.level);\n                li.setAttribute('aria-level', ariaAttributes.level.toString());\n                anchorElement = li.querySelector('.' + cssClass.anchorWrap);\n                if (fieldData.hasOwnProperty(fields.tooltip)) {\n                    li.setAttribute('title', fieldData[fields.tooltip]);\n                }\n                if (fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {\n                    setAttribute(li, fieldData[fields.htmlAttributes]);\n                }\n                if (fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled] === false) {\n                    li.classList.add(cssClass.disabled);\n                }\n                if (fieldData.hasOwnProperty(fields.isVisible) && fieldData[fields.isVisible] === false) {\n                    li.style.display = 'none';\n                }\n                if (fieldData.hasOwnProperty(fields.imageUrl) && !isNullOrUndefined(fieldData[fields.imageUrl])\n                    && !curOpt.template) {\n                    let attr = { src: fieldData[fields.imageUrl] };\n                    merge(attr, fieldData[fields.imageAttributes]);\n                    let imageElemnt = createElement('img', { className: cssClass.image, attrs: attr });\n                    if (anchorElement) {\n                        anchorElement.insertAdjacentElement('afterbegin', imageElemnt);\n                    }\n                    else {\n                        prepend([imageElemnt], li.firstElementChild);\n                    }\n                }\n                if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) &&\n                    !isNullOrUndefined(fieldData[fields.iconCss]) && !curOpt.template) {\n                    let iconElement;\n                    iconElement = createElement('div', { className: cssClass.icon + ' ' + fieldData[fields.iconCss] });\n                    if (anchorElement) {\n                        anchorElement.insertAdjacentElement('afterbegin', iconElement);\n                    }\n                    else {\n                        prepend([iconElement], li.firstElementChild);\n                    }\n                }\n                if (innerEle.length) {\n                    prepend(innerEle, li.firstElementChild);\n                }\n                if (curOpt.itemNavigable && checkboxElement.length) {\n                    prepend(checkboxElement, li.firstElementChild);\n                }\n                processSubChild(createElement, fieldData, fields, dataSource, curOpt, li, ariaAttributes.level);\n            }\n            if (anchorElement) {\n                addClass([li], [cssClass.navigable]);\n            }\n            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: fieldData[fields.text],\n                    item: li,\n                    options: curOpt,\n                    fields: fields\n                };\n                curOpt.itemCreated(curData);\n            }\n            checkboxElement = [];\n            child.push(li);\n        }\n        return child;\n    }\n    ListBase.createListItemFromJson = createListItemFromJson;\n    /**\n     * Function helps to created an element list based on array of JSON input .\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies an array of JSON data.\n     * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n     */\n    function createListFromJson(createElement, dataSource, options, level, isSingleLevel) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let li = createListItemFromJson(createElement, dataSource, options, level, isSingleLevel);\n        return generateUL(createElement, li, curOpt.listClass, options);\n    }\n    ListBase.createListFromJson = createListFromJson;\n    /**\n     * Return the next or previous visible element.\n     * @param  {Element[]|NodeList} elementArray - An element array to find next or previous element.\n     * @param  {Element} li - An element to find next or previous after this element.\n     * @param  {boolean} isPrevious? - Specify when the need get previous element from array.\n     */\n    function getSiblingLI(elementArray, element, isPrevious) {\n        cssClass = getModuleClass(defaultListBaseOptions.moduleName);\n        if (!elementArray || !elementArray.length) {\n            return void 0;\n        }\n        let siblingLI;\n        let liIndex;\n        let liCollections = Array.prototype.slice.call(elementArray);\n        if (element) {\n            liIndex = indexOf(element, liCollections);\n        }\n        else {\n            liIndex = (isPrevious === true ? liCollections.length : -1);\n        }\n        siblingLI = liCollections[liIndex + (isPrevious === true ? -1 : 1)];\n        while (siblingLI && (!isVisible(siblingLI) || siblingLI.classList.contains(cssClass.disabled))) {\n            liIndex = liIndex + (isPrevious === true ? -1 : 1);\n            siblingLI = liCollections[liIndex];\n        }\n        return siblingLI;\n    }\n    ListBase.getSiblingLI = getSiblingLI;\n    /**\n     * Return the index of the li element\n     * @param  {Element} item - An element to find next or previous after this element.\n     * @param  {Element[]|NodeList} elementArray - An element array to find index of given li.\n     */\n    function indexOf(item, elementArray) {\n        if (!elementArray || !item) {\n            return void 0;\n        }\n        else {\n            let liCollections = elementArray;\n            liCollections = Array.prototype.slice.call(elementArray);\n            return liCollections.indexOf(item);\n        }\n    }\n    ListBase.indexOf = indexOf;\n    /**\n     * Returns the grouped data from given dataSource.\n     * @param  {{[key:string]:Object}[]} dataSource - The JSON data which is necessary to process.\n     * @param  {FieldsMapping} fields - Fields that are mapped from the data source.\n     * @param  {SortOrder='None'} sortOrder- Specifies final result sort order.\n     */\n    function groupDataSource(dataSource, fields, sortOrder = 'None') {\n        let curFields = extend({}, ListBase.defaultMappedFields, fields);\n        let cusQuery = new Query().group(curFields.groupBy);\n        // need to remove once sorting issues fixed in DataManager\n        cusQuery = addSorting(sortOrder, 'key', cusQuery);\n        let ds = getDataSource(dataSource, cusQuery);\n        dataSource = [];\n        for (let j = 0; j < ds.length; j++) {\n            let itemObj = ds[j].items;\n            let grpItem = {};\n            let hdr = 'isHeader';\n            grpItem[curFields.text] = ds[j].key;\n            grpItem[hdr] = true;\n            let newtext = curFields.text;\n            if (newtext === 'id') {\n                newtext = 'text';\n                grpItem[newtext] = ds[j].key;\n            }\n            grpItem._id = 'group-list-item-' + (ds[j].key ?\n                ds[j].key.toString().trim() : 'undefined');\n            grpItem.items = itemObj;\n            dataSource.push(grpItem);\n            for (let k = 0; k < itemObj.length; k++) {\n                dataSource.push(itemObj[k]);\n            }\n        }\n        return dataSource;\n    }\n    ListBase.groupDataSource = groupDataSource;\n    /**\n     * Returns a sorted query object.\n     * @param  {SortOrder} sortOrder - Specifies that sort order.\n     * @param  {string} sortBy - Specifies sortBy fields.\n     * @param  {Query=new Query()} query - Pass if any existing query.\n     */\n    function addSorting(sortOrder, sortBy, query = new Query()) {\n        if (sortOrder === 'Ascending') {\n            query.sortBy(sortBy, 'ascending', true);\n        }\n        else if (sortOrder === 'Descending') {\n            query.sortBy(sortBy, 'descending', true);\n        }\n        else {\n            for (let i = 0; i < query.queries.length; i++) {\n                if (query.queries[i].fn === 'onSortBy') {\n                    query.queries.splice(i, 1);\n                }\n            }\n        }\n        return query;\n    }\n    ListBase.addSorting = addSorting;\n    /**\n     * Return an array of JSON Data that processed based on queries.\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.\n     * @param  {Query} query - Specifies query that need to process.\n     */\n    function getDataSource(dataSource, query) {\n        // tslint:disable-next-line\n        return new DataManager(dataSource)\n            .executeLocal(query);\n    }\n    ListBase.getDataSource = getDataSource;\n    /**\n     * Created JSON data based the UL and LI element\n     * @param  {HTMLElement|Element} element - UL element that need to convert as a JSON\n     * @param  {ListBaseOptions} options? - Specifies listbase option for fields.\n     */\n    function createJsonFromElement(element, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let fields = extend({}, ListBase.defaultMappedFields, curOpt.fields);\n        let curEle = element.cloneNode(true);\n        let jsonAr = [];\n        curEle.classList.add('json-parent');\n        let childs = curEle.querySelectorAll('.json-parent>li');\n        curEle.classList.remove('json-parent');\n        for (let i = 0; i < childs.length; i++) {\n            let li = childs[i];\n            let anchor = li.querySelector('a');\n            let ul = li.querySelector('ul');\n            let json = {};\n            let childNodes = anchor ? anchor.childNodes : li.childNodes;\n            let keys = Object.keys(childNodes);\n            for (let i = 0; i < childNodes.length; i++) {\n                if (!(childNodes[Number(keys[i])]).hasChildNodes()) {\n                    json[fields.text] = childNodes[Number(keys[i])].textContent;\n                }\n            }\n            let attributes$$1 = getAllAttributes(li);\n            if (attributes$$1.id) {\n                json[fields.id] = attributes$$1.id;\n                delete attributes$$1.id;\n            }\n            else {\n                json[fields.id] = generateId();\n            }\n            if (Object.keys(attributes$$1).length) {\n                json[fields.htmlAttributes] = attributes$$1;\n            }\n            if (anchor) {\n                attributes$$1 = getAllAttributes(anchor);\n                if (Object.keys(attributes$$1).length) {\n                    json[fields.urlAttributes] = attributes$$1;\n                }\n            }\n            if (ul) {\n                json[fields.child] = createJsonFromElement(ul, options);\n            }\n            jsonAr.push(json);\n        }\n        return jsonAr;\n    }\n    ListBase.createJsonFromElement = createJsonFromElement;\n    function typeofData(data) {\n        let match = { typeof: null, item: null };\n        for (let i = 0; i < data.length; i++) {\n            if (!isNullOrUndefined(data[i])) {\n                return match = { typeof: typeof data[i], item: data[i] };\n            }\n        }\n        return match;\n    }\n    function setAttribute(element, elementAttributes) {\n        let attr = {};\n        merge(attr, elementAttributes);\n        if (attr.class) {\n            addClass([element], attr.class.split(' '));\n            delete attr.class;\n        }\n        attributes(element, attr);\n    }\n    function getAllAttributes(element) {\n        let attributes$$1 = {};\n        let attr = element.attributes;\n        for (let index = 0; index < attr.length; index++) {\n            attributes$$1[attr[index].nodeName] = attr[index].nodeValue;\n        }\n        return attributes$$1;\n    }\n    /**\n     * Created UL element from content template.\n     * @param  {string} template - that need to convert and generate li element.\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.\n     * @param  {ListBaseOptions} options? - Specifies listbase option for fields.\n     */\n    function renderContentTemplate(createElement, template, dataSource, fields, options) {\n        cssClass = getModuleClass(defaultListBaseOptions.moduleName);\n        let ulElement = createElement('ul', { className: cssClass.ul, attrs: { role: 'presentation' } });\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let curFields = extend({}, ListBase.defaultMappedFields, fields);\n        let compiledString = compile(template);\n        let liCollection = [];\n        let id = generateId(); // generate id for drop-down-list option.\n        for (let i = 0; i < dataSource.length; i++) {\n            let fieldData = getFieldValues(dataSource[i], curFields);\n            let curItem = dataSource[i];\n            let isHeader = curItem.isHeader;\n            let value = fieldData[curFields.value];\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: curItem,\n                    text: value,\n                    options: curOpt,\n                    fields: curFields\n                };\n                curOpt.itemCreating(curData);\n            }\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                fieldData = getFieldValues(dataSource[i], curFields);\n                value = fieldData[curFields.value];\n            }\n            let li = createElement('li', {\n                id: id + '-' + i,\n                className: isHeader ? cssClass.group : cssClass.li, attrs: { role: 'presentation' }\n            });\n            if (isHeader) {\n                li.innerText = fieldData[curFields.text];\n            }\n            else {\n                const currentID = isHeader ? curOpt.groupTemplateID : curOpt.templateID;\n                append(compiledString(curItem, null, null, currentID, !!curOpt.isStringTemplate), li);\n                li.setAttribute('data-value', isNullOrUndefined(value) ? 'null' : value);\n                li.setAttribute('role', 'option');\n            }\n            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: curItem,\n                    text: value,\n                    item: li,\n                    options: curOpt,\n                    fields: curFields\n                };\n                curOpt.itemCreated(curData);\n            }\n            liCollection.push(li);\n        }\n        append(liCollection, ulElement);\n        return ulElement;\n    }\n    ListBase.renderContentTemplate = renderContentTemplate;\n    /**\n     * Created header items from group template.\n     * @param  {string} template - that need to convert and generate li element.\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.\n     * @param  {FieldsMapping} fields - Specifies fields for mapping the dataSource.\n     * @param  {Element[]} headerItems? - Specifies listbase header items.\n     */\n    function renderGroupTemplate(groupTemplate, groupDataSource, fields, headerItems, options) {\n        let compiledString = compile(groupTemplate);\n        let curFields = extend({}, ListBase.defaultMappedFields, fields);\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let category = curFields.groupBy;\n        for (let header of headerItems) {\n            let headerData = {};\n            headerData[category] = header.textContent;\n            header.innerHTML = '';\n            append(compiledString(headerData, null, null, curOpt.groupTemplateID, !!curOpt.isStringTemplate), header);\n        }\n        return headerItems;\n    }\n    ListBase.renderGroupTemplate = renderGroupTemplate;\n    function generateId() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    }\n    ListBase.generateId = generateId;\n    function processSubChild(createElement, fieldData, fields, ds, options, element, level) {\n        // Get SubList\n        let subDS = fieldData[fields.child] || [];\n        let hasChildren = fieldData[fields.hasChildren];\n        //Create Sub child\n        if (subDS.length) {\n            hasChildren = true;\n            element.classList.add(cssClass.hasChild);\n            if (options.processSubChild) {\n                let subLi = createListFromJson(createElement, subDS, options, ++level);\n                element.appendChild(subLi);\n            }\n        }\n        // Create expand and collapse node\n        if (!!options.expandCollapse && hasChildren && !options.template) {\n            element.firstElementChild.classList.add(cssClass.iconWrapper);\n            let expandElement = options.expandIconPosition === 'Left' ? prepend : append;\n            expandElement([createElement('div', { className: 'e-icons ' + options.expandIconClass })], element.querySelector('.' + cssClass.textContent));\n        }\n    }\n    function generateSingleLevelLI(createElement, item, fieldData, fields, className, innerElements, grpLI, id, index, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        let text = item;\n        let value = item;\n        let dataSource;\n        if (typeof item !== 'string' && typeof item !== 'number' && typeof item !== 'boolean') {\n            dataSource = item;\n            text = (typeof fieldData[fields.text] === 'boolean' || typeof fieldData[fields.text] === 'number') ?\n                fieldData[fields.text] : (fieldData[fields.text] || '');\n            value = fieldData[fields.value];\n        }\n        let elementID;\n        if (!isNullOrUndefined(dataSource) && !isNullOrUndefined(fieldData[fields.id])\n            && fieldData[fields.id] !== '') {\n            elementID = id;\n        }\n        else {\n            elementID = id + '-' + index;\n        }\n        let li = createElement('li', {\n            className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (isNullOrUndefined(className) ? '' : className),\n            id: elementID, attrs: (ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ?\n                { role: (grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole) } : {})\n        });\n        if (dataSource && fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled].toString() === 'false') {\n            li.classList.add(cssClass.disabled);\n        }\n        if (grpLI) {\n            li.innerText = text;\n        }\n        else {\n            li.setAttribute('data-value', isNullOrUndefined(value) ? 'null' : value);\n            li.setAttribute('role', 'option');\n            if (dataSource && fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {\n                setAttribute(li, fieldData[fields.htmlAttributes]);\n            }\n            if (innerElements.length && !curOpt.itemNavigable) {\n                append(innerElements, li);\n            }\n            if (dataSource && (fieldData[fields.url] || (fieldData[fields.urlAttributes] &&\n                fieldData[fields.urlAttributes].href))) {\n                li.appendChild(anchorTag(createElement, dataSource, fields, text, innerElements, curOpt.itemNavigable));\n            }\n            else {\n                if (innerElements.length && curOpt.itemNavigable) {\n                    append(innerElements, li);\n                }\n                li.appendChild(document.createTextNode(text));\n            }\n        }\n        return li;\n    }\n    function getModuleClass(moduleName) {\n        let moduleClass;\n        return moduleClass = {\n            li: `e-${moduleName}-item`,\n            ul: `e-${moduleName}-parent e-ul`,\n            group: `e-${moduleName}-group-item`,\n            icon: `e-${moduleName}-icon`,\n            text: `e-${moduleName}-text`,\n            check: `e-${moduleName}-check`,\n            checked: 'e-checked',\n            selected: 'e-selected',\n            expanded: 'e-expanded',\n            textContent: 'e-text-content',\n            hasChild: 'e-has-child',\n            level: 'e-level',\n            url: `e-${moduleName}-url`,\n            collapsible: 'e-icon-collapsible',\n            disabled: 'e-disabled',\n            image: `e-${moduleName}-img`,\n            iconWrapper: 'e-icon-wrapper',\n            anchorWrap: 'e-anchor-wrap',\n            navigable: 'e-navigable',\n        };\n    }\n    function anchorTag(createElement, dataSource, fields, text, innerElements, isFullNavigation) {\n        let fieldData = getFieldValues(dataSource, fields);\n        let attr = { href: fieldData[fields.url] };\n        if (fieldData.hasOwnProperty(fields.urlAttributes) && fieldData[fields.urlAttributes]) {\n            merge(attr, fieldData[fields.urlAttributes]);\n            attr.href = fieldData[fields.url] ? fieldData[fields.url] :\n                fieldData[fields.urlAttributes].href;\n        }\n        let anchorTag;\n        if (!isFullNavigation) {\n            anchorTag = createElement('a', { className: cssClass.text + ' ' + cssClass.url, innerHTML: text });\n        }\n        else {\n            anchorTag = createElement('a', { className: cssClass.text + ' ' + cssClass.url });\n            let anchorWrapper = createElement('div', { className: cssClass.anchorWrap });\n            if (innerElements && innerElements.length) {\n                append(innerElements, anchorWrapper);\n            }\n            anchorWrapper.appendChild(document.createTextNode(text));\n            append([anchorWrapper], anchorTag);\n        }\n        setAttribute(anchorTag, attr);\n        return anchorTag;\n    }\n    /* tslint:disable:align */\n    function generateLI(createElement, item, fieldData, fields, className, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        let text = item;\n        let uID;\n        let grpLI;\n        let dataSource;\n        if (typeof item !== 'string' && typeof item !== 'number') {\n            dataSource = item;\n            text = fieldData[fields.text] || '';\n            // tslint:disable-next-line\n            uID = (isNullOrUndefined(fieldData['_id'])) ? fieldData[fields.id] : fieldData['_id'];\n            grpLI = (item.hasOwnProperty('isHeader') && item.isHeader)\n                ? true : false;\n        }\n        if (options && options.enableHtmlSanitizer) {\n            text = SanitizeHtmlHelper.sanitize(text);\n        }\n        let li = createElement('li', {\n            className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (isNullOrUndefined(className) ? '' : className),\n            attrs: (ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ?\n                { role: (grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole) } : {})\n        });\n        !isNullOrUndefined(uID) ? li.setAttribute('data-uid', uID) : li.setAttribute('data-uid', generateId());\n        const blazId = 'BlazId';\n        if (options && !!options.removeBlazorID\n            && typeof item === 'object'\n            && item.hasOwnProperty(blazId)) {\n            delete item[blazId];\n        }\n        if (grpLI && options && options.groupTemplate) {\n            let compiledString = compile(options.groupTemplate);\n            append(compiledString(item, null, null, curOpt.groupTemplateID, !!curOpt.isStringTemplate), li);\n        }\n        else if (!grpLI && options && options.template) {\n            let compiledString = compile(options.template);\n            append(compiledString(item, null, null, curOpt.templateID, !!curOpt.isStringTemplate), li);\n        }\n        else {\n            let innerDiv = createElement('div', {\n                className: cssClass.textContent,\n                attrs: (ariaAttributes.wrapperRole !== '' ? { role: ariaAttributes.wrapperRole } : {})\n            });\n            if (dataSource && (fieldData[fields.url] || (fieldData[fields.urlAttributes] &&\n                fieldData[fields.urlAttributes].href))) {\n                innerDiv.appendChild(anchorTag(createElement, dataSource, fields, text, null, curOpt.itemNavigable));\n            }\n            else {\n                let element = createElement('span', {\n                    className: cssClass.text,\n                    attrs: (ariaAttributes.itemText !== '' ? { role: ariaAttributes.itemText } : {})\n                });\n                if (options && options.enableHtmlSanitizer) {\n                    element.innerText = SanitizeHtmlHelper.sanitize(text);\n                }\n                else {\n                    element.innerHTML = text;\n                }\n                innerDiv.appendChild(element);\n            }\n            li.appendChild(innerDiv);\n        }\n        return li;\n    }\n    /**\n     * Returns UL element based on the given LI element.\n     * @param  {HTMLElement[]} liElement - Specifies array of LI element.\n     * @param  {string} className? - Specifies class name that need to be added in UL element.\n     * @param  {ListBaseOptions} options? - Specifies ListBase options.\n     */\n    function generateUL(createElement, liElement, className, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        cssClass = getModuleClass(curOpt.moduleName);\n        let ulElement = createElement('ul', {\n            className: cssClass.ul + ' ' + (isNullOrUndefined(className) ? '' : className),\n            attrs: (ariaAttributes.listRole !== '' ? { role: ariaAttributes.listRole } : {})\n        });\n        append(liElement, ulElement);\n        return ulElement;\n    }\n    ListBase.generateUL = generateUL;\n    /**\n     * Returns LI element with additional DIV tag based on the given LI element.\n     * @param  {liElement} liElement - Specifies LI element.\n     * @param  {string} className? - Specifies class name that need to be added in created DIV element.\n     * @param  {ListBaseOptions} options? - Specifies ListBase options.\n     */\n    function generateIcon(createElement, liElement, className, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        cssClass = getModuleClass(curOpt.moduleName);\n        let expandElement = curOpt.expandIconPosition === 'Left' ? prepend : append;\n        expandElement([createElement('div', {\n                className: 'e-icons ' + curOpt.expandIconClass + ' ' +\n                    (isNullOrUndefined(className) ? '' : className)\n            })], liElement.querySelector('.' + cssClass.textContent));\n        return liElement;\n    }\n    ListBase.generateIcon = generateIcon;\n})(ListBase || (ListBase = {}));\n/**\n * Used to get dataSource item from complex data using fields.\n * @param {{[key:string]:Object}|string[]|string} dataSource - Specifies an  JSON or String data.\n * @param {FieldsMapping} fields - Fields that are mapped from the dataSource.\n */\nfunction getFieldValues(dataItem, fields) {\n    let fieldData = {};\n    if (isNullOrUndefined(dataItem) || typeof (dataItem) === 'string' || typeof (dataItem) === 'number'\n        || !isNullOrUndefined(dataItem.isHeader)) {\n        return dataItem;\n    }\n    else {\n        for (let field of Object.keys(fields)) {\n            let dataField = fields[field];\n            let value = !isNullOrUndefined(dataField) &&\n                typeof (dataField) === 'string' ? getValue(dataField, dataItem) : undefined;\n            if (!isNullOrUndefined(value)) {\n                fieldData[dataField] = value;\n            }\n        }\n    }\n    return fieldData;\n}\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n// Effect Configuration Effect[] =  [fromViewBackward,fromViewForward,toViewBackward,toviewForward];\nconst effectsConfig = {\n    'None': [],\n    'SlideLeft': ['SlideRightOut', 'SlideLeftOut', 'SlideLeftIn', 'SlideRightIn'],\n    'SlideDown': ['SlideTopOut', 'SlideBottomOut', 'SlideBottomIn', 'SlideTopIn'],\n    'Zoom': ['FadeOut', 'FadeZoomOut', 'FadeZoomIn', 'FadeIn'],\n    'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']\n};\nconst effectsRTLConfig = {\n    'None': [],\n    'SlideLeft': ['SlideLeftOut', 'SlideRightOut', 'SlideRightIn', 'SlideLeftIn'],\n    'SlideDown': ['SlideBottomOut', 'SlideTopOut', 'SlideTopIn', 'SlideBottomIn'],\n    'Zoom': ['FadeZoomOut', 'FadeOut', 'FadeIn', 'FadeZoomIn'],\n    'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']\n};\n// don't use space in classnames.\nconst classNames = {\n    root: 'e-listview',\n    hover: 'e-hover',\n    selected: 'e-active',\n    focused: 'e-focused',\n    parentItem: 'e-list-parent',\n    listItem: 'e-list-item',\n    listIcon: 'e-list-icon',\n    textContent: 'e-text-content',\n    listItemText: 'e-list-text',\n    groupListItem: 'e-list-group-item',\n    hasChild: 'e-has-child',\n    view: 'e-view',\n    header: 'e-list-header',\n    headerText: 'e-headertext',\n    headerTemplateText: 'e-headertemplate-text',\n    text: 'e-text',\n    disable: 'e-disabled',\n    content: 'e-content',\n    icon: 'e-icons',\n    backIcon: 'e-icon-back',\n    checkboxWrapper: 'e-checkbox-wrapper',\n    checkbox: 'e-checkbox',\n    checked: 'e-check',\n    checklist: 'e-checklist',\n    checkboxIcon: 'e-frame',\n    checkboxRight: 'e-checkbox-right',\n    checkboxLeft: 'e-checkbox-left',\n    listviewCheckbox: 'e-listview-checkbox',\n    itemCheckList: 'e-checklist',\n    virtualElementContainer: 'e-list-virtualcontainer'\n};\nconst LISTVIEW_TEMPLATE_PROPERTY = 'Template';\nconst LISTVIEW_GROUPTEMPLATE_PROPERTY = 'GroupTemplate';\nconst LISTVIEW_HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';\nconst swipeVelocity = 0.5;\n/**\n * Represents the field settings of the ListView.\n */\nclass FieldSettings extends ChildProperty {\n}\n__decorate([\n    Property('id')\n], FieldSettings.prototype, \"id\", void 0);\n__decorate([\n    Property('text')\n], FieldSettings.prototype, \"text\", void 0);\n__decorate([\n    Property('isChecked')\n], FieldSettings.prototype, \"isChecked\", void 0);\n__decorate([\n    Property('isVisible')\n], FieldSettings.prototype, \"isVisible\", void 0);\n__decorate([\n    Property('enabled')\n], FieldSettings.prototype, \"enabled\", void 0);\n__decorate([\n    Property('iconCss')\n], FieldSettings.prototype, \"iconCss\", void 0);\n__decorate([\n    Property('child')\n], FieldSettings.prototype, \"child\", void 0);\n__decorate([\n    Property('tooltip')\n], FieldSettings.prototype, \"tooltip\", void 0);\n__decorate([\n    Property('groupBy')\n], FieldSettings.prototype, \"groupBy\", void 0);\n__decorate([\n    Property('text')\n], FieldSettings.prototype, \"sortBy\", void 0);\n__decorate([\n    Property('htmlAttributes')\n], FieldSettings.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property('tableName')\n], FieldSettings.prototype, \"tableName\", void 0);\n/**\n * Represents the EJ2 ListView control.\n * ```html\n * <div id=\"listview\">\n * <ul>\n * <li>Favorite</li>\n * <li>Documents</li>\n * <li>Downloads</li>\n * </ul>\n * </div>\n * ```\n * ```typescript\n *   var listviewObject = new ListView({});\n *   listviewObject.appendTo(\"#listview\");\n * ```\n */\nlet ListView = class ListView extends Component {\n    /**\n     * Constructor for creating the widget\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.itemReRender = false;\n        this.previousSelectedItems = [];\n        this.hiddenItems = [];\n        this.enabledItems = [];\n        this.disabledItems = [];\n    }\n    /**\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'htmlAttributes':\n                    this.setHTMLAttribute();\n                    break;\n                case 'cssClass':\n                    this.setCSSClass(oldProp.cssClass);\n                    break;\n                case 'enable':\n                    this.setEnable();\n                    break;\n                case 'width':\n                case 'height':\n                    this.setSize();\n                    break;\n                case 'enableRtl':\n                    this.setEnableRTL();\n                    break;\n                case 'fields':\n                    this.listBaseOption.fields = this.fields.properties;\n                    if (this.enableVirtualization) {\n                        if (!(this.isServerRendered && isBlazor())) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                    }\n                    else {\n                        if (isBlazor() && this.isServerRendered && !this.enableVirtualization) {\n                            this.itemReRender = true;\n                        }\n                        this.reRender();\n                    }\n                    break;\n                case 'headerTitle':\n                    if (!this.curDSLevel.length) {\n                        this.header(this.headerTitle, false);\n                    }\n                    break;\n                case 'query':\n                    if (this.enableVirtualization) {\n                        if (!(isBlazor() && this.isServerRendered)) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                    }\n                    else {\n                        if (isBlazor() && this.isServerRendered && !this.enableVirtualization) {\n                            this.itemReRender = true;\n                        }\n                        this.reRender();\n                    }\n                    break;\n                case 'showHeader':\n                    this.header(this.headerTitle, false);\n                    break;\n                case 'enableVirtualization':\n                    if (!isNullOrUndefined(this.contentContainer)) {\n                        detach(this.contentContainer);\n                    }\n                    this.refresh();\n                    break;\n                case 'showCheckBox':\n                case 'checkBoxPosition':\n                    if (!isBlazor() || !this.isServerRendered) {\n                        if (this.enableVirtualization) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                        else {\n                            this.setCheckbox();\n                        }\n                    }\n                    break;\n                case 'dataSource':\n                    if (this.enableVirtualization) {\n                        if (!(this.isServerRendered && isBlazor())) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                    }\n                    else {\n                        if (isBlazor() && this.isServerRendered && !this.enableVirtualization) {\n                            this.itemReRender = true;\n                        }\n                        this.reRender();\n                    }\n                    break;\n                case 'sortOrder':\n                case 'showIcon':\n                    if (isBlazor() && this.isServerRendered) {\n                        // tslint:disable\n                        this.interopAdaptor.invokeMethodAsync('ItemSorting');\n                        //tslint:enable\n                    }\n                    else {\n                        if (this.enableVirtualization) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                        else {\n                            this.listBaseOption.showIcon = this.showIcon;\n                            this.curViewDS = this.getSubDS();\n                            this.resetCurrentList();\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    // Model Changes\n    setHTMLAttribute() {\n        if (Object.keys(this.htmlAttributes).length) {\n            attributes(this.element, this.htmlAttributes);\n        }\n    }\n    setCSSClass(oldCSSClass) {\n        if (this.cssClass) {\n            addClass([this.element], this.cssClass.split(' ').filter((css) => css));\n        }\n        if (oldCSSClass) {\n            removeClass([this.element], oldCSSClass.split(' ').filter((css) => css));\n        }\n    }\n    setSize() {\n        this.element.style.height = formatUnit(this.height);\n        this.element.style.width = formatUnit(this.width);\n        this.isWindow = this.element.clientHeight ? false : true;\n    }\n    setEnable() {\n        this.enableElement(this.element, this.enable);\n    }\n    setEnableRTL() {\n        if (this.enableRtl) {\n            this.element.classList.add('e-rtl');\n        }\n        else {\n            this.element.classList.remove('e-rtl');\n        }\n    }\n    enableElement(element, isEnabled) {\n        if (isEnabled) {\n            element.classList.remove(classNames.disable);\n        }\n        else {\n            element.classList.add(classNames.disable);\n        }\n    }\n    // Support Component Functions\n    header(text, showBack) {\n        if (isBlazor() && this.isServerRendered) {\n            let args = { HeaderText: text, BackButton: showBack };\n            // tslint:disable\n            this.interopAdaptor.invokeMethodAsync('HeaderTitle', args);\n            // tslint:disable\n        }\n        else {\n            if (this.headerEle === undefined && this.showHeader) {\n                if (this.enableHtmlSanitizer) {\n                    this.setProperties({ headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle) }, true);\n                }\n                this.headerEle = this.createElement('div', { className: classNames.header });\n                let innerHeaderEle = this.createElement('span', { className: classNames.headerText, innerHTML: this.headerTitle });\n                let textEle = this.createElement('div', { className: classNames.text, innerHTML: innerHeaderEle.outerHTML });\n                let hedBackButton = this.createElement('div', {\n                    className: classNames.icon + ' ' + classNames.backIcon + ' e-but-back',\n                    attrs: { style: 'display:none;' }\n                });\n                this.headerEle.appendChild(hedBackButton);\n                this.headerEle.appendChild(textEle);\n                if (this.headerTemplate) {\n                    let compiledString = compile(this.headerTemplate);\n                    let headerTemplateEle = this.createElement('div', { className: classNames.headerTemplateText });\n                    append(compiledString({}, null, null, this.LISTVIEW_HEADERTEMPLATE_ID), headerTemplateEle);\n                    append([headerTemplateEle], this.headerEle);\n                    this.updateBlazorTemplates(false, true, true);\n                }\n                if (this.headerTemplate && this.headerTitle) {\n                    textEle.classList.add('header');\n                }\n                this.element.classList.add('e-has-header');\n                prepend([this.headerEle], this.element);\n            }\n            else if (this.headerEle) {\n                if (this.showHeader) {\n                    this.headerEle.style.display = '';\n                    let textEle = this.headerEle.querySelector('.' + classNames.headerText);\n                    let hedBackButton = this.headerEle.querySelector('.' + classNames.backIcon);\n                    if (this.enableHtmlSanitizer) {\n                        text = SanitizeHtmlHelper.sanitize(text);\n                    }\n                    textEle.innerHTML = text;\n                    if (this.headerTemplate && showBack) {\n                        textEle.parentElement.classList.remove('header');\n                        this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('nested-header');\n                    }\n                    if (this.headerTemplate && !showBack) {\n                        textEle.parentElement.classList.add('header');\n                        this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.remove('nested-header');\n                        this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('header');\n                    }\n                    if (showBack === true) {\n                        hedBackButton.style.display = '';\n                    }\n                    else {\n                        hedBackButton.style.display = 'none';\n                    }\n                }\n                else {\n                    this.headerEle.style.display = 'none';\n                }\n            }\n        }\n    }\n    // Animation Related Functions\n    switchView(fromView, toView, reverse) {\n        if (fromView && toView) {\n            let fPos = fromView.style.position;\n            let overflow = (this.element.style.overflow !== 'hidden') ? this.element.style.overflow : '';\n            fromView.style.position = 'absolute';\n            fromView.classList.add('e-view');\n            let anim;\n            let duration = this.animation.duration;\n            if (this.animation.effect) {\n                anim = (this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect]);\n            }\n            else {\n                let slideLeft = 'SlideLeft';\n                anim = effectsConfig[slideLeft];\n                reverse = this.enableRtl;\n                duration = 0;\n            }\n            this.element.style.overflow = 'hidden';\n            this.aniObj.animate(fromView, {\n                name: (reverse === true ? anim[0] : anim[1]),\n                duration: duration,\n                timingFunction: this.animation.easing,\n                end: (model) => {\n                    fromView.style.display = 'none';\n                    this.element.style.overflow = overflow;\n                    fromView.style.position = fPos;\n                    fromView.classList.remove('e-view');\n                }\n            });\n            toView.style.display = '';\n            this.aniObj.animate(toView, {\n                name: (reverse === true ? anim[2] : anim[3]),\n                duration: duration,\n                timingFunction: this.animation.easing,\n                end: () => {\n                    this.trigger('actionComplete');\n                }\n            });\n            this.curUL = toView;\n        }\n    }\n    preRender() {\n        this.listBaseOption = {\n            template: this.template,\n            headerTemplate: this.headerTemplate,\n            groupTemplate: this.groupTemplate, expandCollapse: true, listClass: '',\n            ariaAttributes: {\n                itemRole: 'option', listRole: 'presentation', itemText: '',\n                groupItemRole: 'group', wrapperRole: 'presentation'\n            },\n            fields: this.fields.properties, sortOrder: this.sortOrder, showIcon: this.showIcon,\n            itemCreated: this.renderCheckbox.bind(this),\n            templateID: `${this.element.id}${LISTVIEW_TEMPLATE_PROPERTY}`,\n            groupTemplateID: `${this.element.id}${LISTVIEW_GROUPTEMPLATE_PROPERTY}`,\n            enableHtmlSanitizer: this.enableHtmlSanitizer,\n            removeBlazorID: true\n        };\n        this.initialization();\n    }\n    updateLiElementHeight() {\n        let liContainer = this.element.querySelector('.' + classNames.virtualElementContainer);\n        if (liContainer.children[0]) {\n            this.liElementHeight = liContainer.children[0].getBoundingClientRect().height;\n            // tslint:disable\n            this.interopAdaptor.invokeMethodAsync('LiElementHeight', this.liElementHeight);\n            // tslint:enable\n        }\n    }\n    initialization() {\n        if (isBlazor() && this.isServerRendered && this.enableVirtualization) {\n            let ulContainer = this.element.querySelector('.' + classNames.virtualElementContainer);\n            if (ulContainer !== null) {\n                if (this.height === '') {\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('SetComponentHeight', window.innerHeight);\n                    // tslint:enable\n                    this.isWindow = true;\n                    ulContainer.scrollIntoView();\n                }\n                if (this.height.toString().indexOf('%') !== -1) {\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('SetContainerHeight', this.element.getBoundingClientRect().height.toString());\n                    // tslint:enable\n                }\n                if (ulContainer.children[0]) {\n                    this.liElementHeight = ulContainer.children[0].getBoundingClientRect().height;\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('LiElementHeight', this.liElementHeight);\n                    // tslint:enable\n                }\n            }\n        }\n        this.curDSLevel = [];\n        this.animateOptions = {};\n        this.curViewDS = [];\n        this.currentLiElements = [];\n        this.isNestedList = false;\n        this.selectedData = [];\n        this.selectedId = [];\n        this.LISTVIEW_TEMPLATE_ID = `${this.element.id}${LISTVIEW_TEMPLATE_PROPERTY}`;\n        this.LISTVIEW_GROUPTEMPLATE_ID = `${this.element.id}${LISTVIEW_GROUPTEMPLATE_PROPERTY}`;\n        this.LISTVIEW_HEADERTEMPLATE_ID = `${this.element.id}${LISTVIEW_HEADERTEMPLATE_PROPERTY}`;\n        this.aniObj = new Animation(this.animateOptions);\n        this.removeElement(this.curUL);\n        this.removeElement(this.ulElement);\n        this.removeElement(this.headerEle);\n        this.removeElement(this.contentContainer);\n        this.curUL = this.ulElement = this.liCollection = this.headerEle = this.contentContainer = undefined;\n    }\n    renderCheckbox(args) {\n        if (args.item.classList.contains(classNames.hasChild)) {\n            this.isNestedList = true;\n        }\n        if (this.showCheckBox && this.isValidLI(args.item)) {\n            let checkboxElement;\n            let fieldData;\n            checkboxElement = createCheckBox(this.createElement, false, {\n                checked: false, enableRtl: this.enableRtl,\n                cssClass: classNames.listviewCheckbox\n            });\n            checkboxElement.setAttribute('role', 'checkbox');\n            let frameElement = checkboxElement.querySelector('.' + classNames.checkboxIcon);\n            args.item.classList.add(classNames.itemCheckList);\n            args.item.firstElementChild.classList.add(classNames.checkbox);\n            if (typeof this.dataSource[0] !== 'string' && typeof this.dataSource[0] !== 'number') {\n                fieldData = getFieldValues(args.curData, this.listBaseOption.fields);\n                if (fieldData[this.listBaseOption.fields.isChecked]) {\n                    this.checkInternally(args, checkboxElement);\n                }\n            }\n            else if (((typeof this.dataSource[0] === 'string' ||\n                typeof this.dataSource[0] === 'number') && this.selectedData.indexOf(args.text) !== -1)) {\n                this.checkInternally(args, checkboxElement);\n            }\n            checkboxElement.setAttribute('aria-checked', frameElement.classList.contains(classNames.checked) ? 'true' : 'false');\n            if (this.checkBoxPosition === 'Left') {\n                checkboxElement.classList.add(classNames.checkboxLeft);\n                args.item.firstElementChild.classList.add(classNames.checkboxLeft);\n                args.item.firstElementChild.insertBefore(checkboxElement, args.item.firstElementChild.childNodes[0]);\n            }\n            else {\n                checkboxElement.classList.add(classNames.checkboxRight);\n                args.item.firstElementChild.classList.add(classNames.checkboxRight);\n                args.item.firstElementChild.appendChild(checkboxElement);\n            }\n            this.currentLiElements.push(args.item);\n            this.checkBoxPosition === 'Left' ? this.virtualCheckBox = args.item.firstElementChild.children[0] :\n                this.virtualCheckBox = args.item.firstElementChild.lastElementChild;\n        }\n    }\n    checkInternally(args, checkboxElement) {\n        args.item.classList.add(classNames.selected);\n        args.item.setAttribute('aria-selected', 'true');\n        checkboxElement.querySelector('.' + classNames.checkboxIcon).classList.add(classNames.checked);\n        checkboxElement.setAttribute('aria-checked', 'true');\n    }\n    /**\n     * Checks the specific list item by passing the unchecked fields as an argument to this method.\n     * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.\n     */\n    checkItem(item) {\n        this.toggleCheckBase(item, true);\n    }\n    toggleCheckBase(item, checked) {\n        if (this.showCheckBox) {\n            let liElement = item;\n            if (item instanceof Object && item.constructor !== HTMLLIElement) {\n                liElement = this.getLiFromObjOrElement(item);\n            }\n            if (!isNullOrUndefined(liElement)) {\n                let checkboxIcon = liElement.querySelector('.' + classNames.checkboxIcon);\n                checked ? liElement.classList.add(classNames.selected) : liElement.classList.remove(classNames.selected);\n                liElement.setAttribute('aria-selected', checked ? 'true' : 'false');\n                checked ? checkboxIcon.classList.add(classNames.checked) : checkboxIcon.classList.remove(classNames.checked);\n                checkboxIcon.parentElement.setAttribute('aria-checked', checked ? 'true' : 'false');\n            }\n            this.setSelectedItemData(liElement);\n        }\n    }\n    /**\n     * Uncheck the specific list item by passing the checked fields as an argument to this method.\n     * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.\n     */\n    uncheckItem(item) {\n        this.toggleCheckBase(item, false);\n    }\n    /**\n     * Checks all the unchecked items in the ListView.\n     */\n    checkAllItems() {\n        this.toggleAllCheckBase(true);\n    }\n    /**\n     * Uncheck all the checked items in ListView.\n     */\n    uncheckAllItems() {\n        this.toggleAllCheckBase(false);\n    }\n    toggleAllCheckBase(checked) {\n        if (this.showCheckBox) {\n            for (let i = 0; i < this.liCollection.length; i++) {\n                let checkIcon = this.liCollection[i].querySelector('.' + classNames.checkboxIcon);\n                if (checkIcon) {\n                    if (checked) {\n                        if (!checkIcon.classList.contains(classNames.checked)) {\n                            this.checkItem(this.liCollection[i]);\n                        }\n                    }\n                    else {\n                        if (checkIcon.classList.contains(classNames.checked)) {\n                            this.uncheckItem(this.liCollection[i]);\n                        }\n                    }\n                }\n            }\n            if (this.enableVirtualization) {\n                this.virtualizationModule.checkedItem(checked);\n            }\n        }\n    }\n    setCheckbox() {\n        if (this.showCheckBox) {\n            let liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));\n            let args = {\n                item: undefined, curData: undefined, dataSource: undefined, fields: undefined,\n                options: undefined, text: ''\n            };\n            for (let i = 0; i < liCollection.length; i++) {\n                let element = liCollection[i];\n                args.item = element;\n                args.curData = this.getItemData(element);\n                if (element.querySelector('.' + classNames.checkboxWrapper)) {\n                    this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));\n                }\n                this.renderCheckbox(args);\n                if (args.item.classList.contains(classNames.selected)) {\n                    this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n                }\n            }\n        }\n        else {\n            let liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.itemCheckList));\n            for (let i = 0; i < liCollection.length; i++) {\n                let element = liCollection[i];\n                element.classList.remove(classNames.selected);\n                element.firstElementChild.classList.remove(classNames.checkbox);\n                this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));\n            }\n            if (this.selectedItems) {\n                this.selectedItems.item.classList.add(classNames.selected);\n            }\n        }\n    }\n    /**\n     * Refresh the height of the list item.\n     */\n    refreshItemHeight() {\n        this.virtualizationModule.refreshItemHeight();\n    }\n    clickHandler(e) {\n        let target = e.target;\n        let classList = target.classList;\n        let closestElement;\n        if (classList.contains(classNames.backIcon) || classList.contains(classNames.headerText)) {\n            if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n                this.uncheckAllItems();\n            }\n            this.back();\n        }\n        else {\n            let li = closest(target.parentNode, '.' + classNames.listItem);\n            if (li === null) {\n                li = target;\n            }\n            this.removeFocus();\n            if (this.enable && this.showCheckBox && this.isValidLI(li)) {\n                if (e.target.classList.contains(classNames.checkboxIcon)) {\n                    li.classList.add(classNames.focused);\n                    if (isNullOrUndefined(li.querySelector('.' + classNames.checked))) {\n                        let args = {\n                            curData: undefined, dataSource: undefined, fields: undefined, options: undefined,\n                            text: undefined, item: li\n                        };\n                        this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n                    }\n                    else {\n                        this.uncheckItem(li);\n                        li.classList.add(classNames.focused);\n                    }\n                    if (this.enableVirtualization) {\n                        this.virtualizationModule.setCheckboxLI(li, e);\n                    }\n                    if (e) {\n                        let eventArgs = this.selectEventData(li, e);\n                        let checkIcon = li.querySelector('.' + classNames.checkboxIcon);\n                        merge(eventArgs, { isChecked: checkIcon.classList.contains(classNames.checked) });\n                        this.trigger('select', eventArgs);\n                    }\n                }\n                else if (li.classList.contains(classNames.hasChild)) {\n                    this.removeHover();\n                    this.removeSelect();\n                    this.removeSelect(li);\n                    this.setSelectLI(li, e);\n                    li.classList.remove(classNames.selected);\n                }\n                else {\n                    this.setCheckboxLI(li, e);\n                }\n            }\n            else {\n                this.setSelectLI(li, e);\n            }\n            closestElement = closest(e.target, 'li');\n            if (closestElement !== undefined) {\n                if (closestElement.classList.contains('e-has-child') &&\n                    !e.target.parentElement.classList.contains('e-listview-checkbox')) {\n                    closestElement.classList.add(classNames.disable);\n                }\n            }\n        }\n        if (isBlazor() && this.isServerRendered && this.enableVirtualization) {\n            let ulElementContainer = this.element.querySelector('.' + classNames.virtualElementContainer);\n            if (ulElementContainer.querySelector('.e-active')) {\n                // tslint:disable-next-line:no-any\n                let selectedElements = ulElementContainer.querySelectorAll('.e-active');\n                // tslint:enable-next-line:no-any\n                if (this.showCheckBox) {\n                    for (let i = 0; i < selectedElements.length; i++) {\n                        // tslint:disable-next-line:no-any\n                        if (!this.previousSelectedItems.includes(selectedElements[i].getAttribute('data-uid'))) {\n                            this.previousSelectedItems.push(selectedElements[i].getAttribute('data-uid'));\n                        }\n                        // tslint:enable-next-line:no-any\n                    }\n                }\n                else {\n                    this.previousSelectedItems[0] = (ulElementContainer.querySelector('.e-active').getAttribute('data-uid'));\n                }\n            }\n            if (ulElementContainer.querySelector('.e-focused')) {\n                // tslint:disable-next-line:no-any\n                let focusElement = ulElementContainer.querySelector('.e-focused');\n                // tslint:enable-next-line:no-any\n                if (!focusElement.classList.contains('e-active')) {\n                    let focusElementId = focusElement.getAttribute('data-uid');\n                    // tslint:disable-next-line:no-any\n                    if (this.previousSelectedItems.includes(focusElementId)) {\n                        let selectedElement1 = this.previousSelectedItems.slice(0, this.previousSelectedItems.indexOf(focusElementId));\n                        let selectedElement2 = this.previousSelectedItems.\n                            slice(this.previousSelectedItems.indexOf(focusElementId) + 1, this.previousSelectedItems.length);\n                        this.previousSelectedItems = selectedElement1.concat(selectedElement2);\n                    }\n                    // tslint:enable-next-line:no-any\n                }\n            }\n        }\n    }\n    removeElement(element) {\n        return element && element.parentNode && element.parentNode.removeChild(element);\n    }\n    hoverHandler(e) {\n        let curLi = closest(e.target.parentNode, '.' + classNames.listItem);\n        this.setHoverLI(curLi);\n    }\n    leaveHandler(e) {\n        this.removeHover();\n    }\n    ;\n    homeKeyHandler(e, end) {\n        if (Object.keys(this.dataSource).length && this.curUL) {\n            if (this.selectedItems) {\n                (this.selectedItems.item).setAttribute('aria-selected', 'false');\n            }\n            let li = this.curUL.querySelectorAll('.' + classNames.listItem);\n            let focusedElement = this.curUL.querySelector('.' + classNames.focused) ||\n                this.curUL.querySelector('.' + classNames.selected);\n            if (focusedElement) {\n                focusedElement.classList.remove(classNames.focused);\n                if (!this.showCheckBox) {\n                    focusedElement.classList.remove(classNames.selected);\n                }\n            }\n            let index = !end ? 0 : li.length - 1;\n            if (li[index].classList.contains(classNames.hasChild) || this.showCheckBox) {\n                li[index].classList.add(classNames.focused);\n            }\n            else {\n                this.setSelectLI(li[index], e);\n            }\n            if (li[index]) {\n                this.element.setAttribute('aria-activedescendant', li[index].id.toString());\n            }\n            else {\n                this.element.removeAttribute('aria-activedescendant');\n            }\n        }\n    }\n    onArrowKeyDown(e, prev) {\n        let siblingLI;\n        let li;\n        let hasChild = !isNullOrUndefined(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;\n        if (hasChild || this.showCheckBox) {\n            li = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);\n            siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);\n            if (!isNullOrUndefined(siblingLI)) {\n                if (li) {\n                    li.classList.remove(classNames.focused);\n                    if (!this.showCheckBox) {\n                        li.classList.remove(classNames.selected);\n                    }\n                }\n                if (siblingLI.classList.contains(classNames.hasChild) || this.showCheckBox) {\n                    siblingLI.classList.add(classNames.focused);\n                }\n                else {\n                    this.setSelectLI(siblingLI, e);\n                }\n            }\n        }\n        else {\n            li = this.curUL.querySelector('.' + classNames.selected);\n            siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);\n            this.setSelectLI(siblingLI, e);\n        }\n        if (siblingLI) {\n            this.element.setAttribute('aria-activedescendant', siblingLI.id.toString());\n        }\n        else {\n            this.element.removeAttribute('aria-activedescendant');\n        }\n        return siblingLI;\n    }\n    arrowKeyHandler(e, prev) {\n        e.preventDefault();\n        if (Object.keys(this.dataSource).length && this.curUL) {\n            let siblingLI = this.onArrowKeyDown(e, prev);\n            let elementTop = this.element.getBoundingClientRect().top;\n            let elementHeight = this.element.getBoundingClientRect().height;\n            let firstItemBounds = this.curUL.querySelector('.' + classNames.listItem).getBoundingClientRect();\n            let heightDiff;\n            let groupItemBounds;\n            if (this.fields.groupBy) {\n                groupItemBounds = this.curUL.querySelector('.' + classNames.groupListItem).getBoundingClientRect();\n            }\n            if (siblingLI) {\n                let siblingTop = siblingLI.getBoundingClientRect().top;\n                let siblingHeight = siblingLI.getBoundingClientRect().height;\n                if (!prev) {\n                    let height = this.isWindow ? window.innerHeight : elementHeight;\n                    heightDiff = this.isWindow ? (siblingTop + siblingHeight) :\n                        ((siblingTop - elementTop) + siblingHeight);\n                    if (heightDiff > height) {\n                        this.isWindow ? window.scroll(0, pageYOffset + (heightDiff - height)) :\n                            this.element.scrollTop = this.element.scrollTop + (heightDiff - height);\n                    }\n                }\n                else {\n                    heightDiff = this.isWindow ? siblingTop : (siblingTop - elementTop);\n                    if (heightDiff < 0) {\n                        this.isWindow ? window.scroll(0, pageYOffset + heightDiff) :\n                            this.element.scrollTop = this.element.scrollTop + heightDiff;\n                    }\n                }\n            }\n            else if (this.enableVirtualization && prev && this.virtualizationModule.uiFirstIndex) {\n                this.onUIScrolled = () => {\n                    this.onArrowKeyDown(e, prev);\n                    this.onUIScrolled = undefined;\n                };\n                heightDiff = this.virtualizationModule.listItemHeight;\n                this.isWindow ? window.scroll(0, pageYOffset - heightDiff) :\n                    this.element.scrollTop = this.element.scrollTop - heightDiff;\n            }\n            else if (prev) {\n                if (this.showHeader && this.headerEle) {\n                    let topHeight = groupItemBounds ? groupItemBounds.top : firstItemBounds.top;\n                    let headerBounds = this.headerEle.getBoundingClientRect();\n                    heightDiff = headerBounds.top < 0 ? (headerBounds.height - topHeight) : 0;\n                    this.isWindow ? window.scroll(0, pageYOffset - heightDiff)\n                        : this.element.scrollTop = 0;\n                }\n                else if (this.fields.groupBy) {\n                    heightDiff = this.isWindow ? (groupItemBounds.top < 0 ? groupItemBounds.top : 0) :\n                        (elementTop - firstItemBounds.top) + groupItemBounds.height;\n                    this.isWindow ? window.scroll(0, pageYOffset + heightDiff) :\n                        this.element.scrollTop = this.element.scrollTop - heightDiff;\n                }\n            }\n        }\n    }\n    enterKeyHandler(e) {\n        if (Object.keys(this.dataSource).length && this.curUL) {\n            let hasChild = !isNullOrUndefined(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;\n            let li = this.curUL.querySelector('.' + classNames.focused);\n            if (hasChild && li) {\n                li.classList.remove(classNames.focused);\n                if (this.showCheckBox) {\n                    this.removeSelect();\n                    this.removeSelect(li);\n                    this.removeHover();\n                }\n                this.setSelectLI(li, e);\n            }\n        }\n    }\n    spaceKeyHandler(e) {\n        if (this.enable && this.showCheckBox && Object.keys(this.dataSource).length && this.curUL) {\n            let li = this.curUL.querySelector('.' + classNames.focused);\n            if (!isNullOrUndefined(li) && isNullOrUndefined(li.querySelector('.' + classNames.checked))) {\n                let args = {\n                    curData: undefined, dataSource: undefined, fields: undefined, options: undefined,\n                    text: undefined, item: li\n                };\n                this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n            }\n            else {\n                this.uncheckItem(li);\n            }\n        }\n    }\n    keyActionHandler(e) {\n        switch (e.keyCode) {\n            case 36:\n                this.homeKeyHandler(e);\n                break;\n            case 35:\n                this.homeKeyHandler(e, true);\n                break;\n            case 40:\n                this.arrowKeyHandler(e);\n                break;\n            case 38:\n                this.arrowKeyHandler(e, true);\n                break;\n            case 13:\n                this.enterKeyHandler(e);\n                break;\n            case 8:\n                if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n                    this.uncheckAllItems();\n                }\n                this.back();\n                break;\n            case 32:\n                this.spaceKeyHandler(e);\n                break;\n        }\n    }\n    swipeActionHandler(e) {\n        if (e.swipeDirection === 'Right' && e.velocity > swipeVelocity && e.originalEvent.type === 'touchend') {\n            if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n                this.uncheckAllItems();\n            }\n            this.back();\n        }\n    }\n    focusout() {\n        if (Object.keys(this.dataSource).length && this.curUL) {\n            let focusedElement = this.curUL.querySelector('.' + classNames.focused);\n            let activeElement = this.curUL.querySelector('[aria-selected = true]');\n            if (focusedElement) {\n                focusedElement.classList.remove(classNames.focused);\n                if (activeElement && !this.showCheckBox) {\n                    activeElement.classList.add(classNames.selected);\n                }\n            }\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.element, 'keydown', this.keyActionHandler, this);\n        EventHandler.add(this.element, 'click', this.clickHandler, this);\n        if (!this.enableVirtualization) {\n            EventHandler.add(this.element, 'mouseover', this.hoverHandler, this);\n            EventHandler.add(this.element, 'mouseout', this.leaveHandler, this);\n        }\n        EventHandler.add(this.element, 'focusout', this.focusout, this);\n        this.touchModule = new Touch(this.element, { swipe: this.swipeActionHandler.bind(this) });\n    }\n    unWireEvents() {\n        EventHandler.remove(this.element, 'click', this.clickHandler);\n        if (!this.enableVirtualization) {\n            EventHandler.remove(this.element, 'mouseover', this.hoverHandler);\n            EventHandler.remove(this.element, 'mouseout', this.leaveHandler);\n        }\n        EventHandler.remove(this.element, 'mouseover', this.hoverHandler);\n        EventHandler.remove(this.element, 'mouseout', this.leaveHandler);\n        this.touchModule.destroy();\n    }\n    removeFocus() {\n        let focusedLI = this.element.querySelectorAll('.' + classNames.focused);\n        for (let ele of focusedLI) {\n            ele.classList.remove(classNames.focused);\n        }\n    }\n    removeHover() {\n        let hoverLI = this.element.querySelector('.' + classNames.hover);\n        if (hoverLI) {\n            hoverLI.classList.remove(classNames.hover);\n        }\n    }\n    removeSelect(li) {\n        if (isNullOrUndefined(li)) {\n            let selectedLI = this.element.querySelectorAll('.' + classNames.selected);\n            for (let ele of selectedLI) {\n                if (this.showCheckBox && ele.querySelector('.' + classNames.checked)) {\n                    continue;\n                }\n                else {\n                    ele.setAttribute('aria-selected', 'false');\n                    ele.classList.remove(classNames.selected);\n                }\n            }\n        }\n        else {\n            li.classList.remove(classNames.selected);\n            li.setAttribute('aria-selected', 'false');\n        }\n    }\n    isValidLI(li) {\n        return (li && li.classList.contains(classNames.listItem)\n            && !li.classList.contains(classNames.groupListItem)\n            && !li.classList.contains(classNames.disable));\n    }\n    setCheckboxLI(li, e) {\n        if (this.isValidLI(li) && this.enable && this.showCheckBox) {\n            if (this.curUL.querySelector('.' + classNames.focused)) {\n                this.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);\n            }\n            li.classList.add(classNames.focused);\n            let checkboxElement = li.querySelector('.' + classNames.checkboxWrapper);\n            let checkIcon = checkboxElement.querySelector('.' + classNames.checkboxIcon + '.' + classNames.icon);\n            this.removeHover();\n            if (!checkIcon.classList.contains(classNames.checked)) {\n                checkIcon.classList.add(classNames.checked);\n                li.classList.add(classNames.selected);\n                li.setAttribute('aria-selected', 'true');\n            }\n            else {\n                checkIcon.classList.remove(classNames.checked);\n                li.classList.remove(classNames.selected);\n                li.setAttribute('aria-selected', 'false');\n            }\n            checkboxElement.setAttribute('aria-checked', checkIcon.classList.contains(classNames.checked) ?\n                'true' : 'false');\n            let eventArgs = this.selectEventData(li, e);\n            merge(eventArgs, { isChecked: checkIcon.classList.contains(classNames.checked) });\n            if (this.enableVirtualization) {\n                this.virtualizationModule.setCheckboxLI(li, e);\n            }\n            this.trigger('select', eventArgs);\n            this.setSelectedItemData(li);\n            this.renderSubList(li);\n        }\n    }\n    selectEventData(li, e) {\n        let data = this.getItemData(li);\n        let fieldData = getFieldValues(data, this.listBaseOption.fields);\n        let selectedItem;\n        if (!isNullOrUndefined(data)\n            && typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number') {\n            selectedItem = { item: li, text: li && li.innerText.trim(), data: this.dataSource };\n        }\n        else {\n            selectedItem = { item: li, text: fieldData && fieldData[this.listBaseOption.fields.text], data: data };\n        }\n        let eventArgs = {};\n        merge(eventArgs, selectedItem);\n        if (e) {\n            merge(eventArgs, { isInteracted: true, event: e, index: this.curUL && Array.prototype.indexOf.call(this.curUL.children, li) });\n        }\n        return eventArgs;\n    }\n    setSelectedItemData(li) {\n        let data = this.getItemData(li);\n        let fieldData = getFieldValues(data, this.listBaseOption.fields);\n        if (!isNullOrUndefined(data) && ((typeof this.dataSource[0] === 'string') ||\n            (typeof this.dataSource[0] === 'number'))) {\n            this.selectedItems = {\n                item: li,\n                text: li && li.innerText.trim(),\n                data: this.dataSource\n            };\n        }\n        else {\n            this.selectedItems = {\n                item: li,\n                text: fieldData && fieldData[this.listBaseOption.fields.text],\n                data: data\n            };\n        }\n    }\n    setSelectLI(li, e) {\n        if (this.isValidLI(li) && !li.classList.contains(classNames.selected) && this.enable) {\n            if (!this.showCheckBox) {\n                this.removeSelect();\n            }\n            li.classList.add(classNames.selected);\n            li.setAttribute('aria-selected', 'true');\n            this.removeHover();\n            this.setSelectedItemData(li);\n            if (this.enableVirtualization) {\n                this.virtualizationModule.setSelectLI(li, e);\n            }\n            let eventArgs = this.selectEventData(li, e);\n            this.trigger('select', eventArgs);\n            this.selectedLI = li;\n            this.renderSubList(li);\n        }\n    }\n    setHoverLI(li) {\n        if (this.isValidLI(li) && !li.classList.contains(classNames.hover) && this.enable) {\n            let lastLi = this.element.querySelectorAll('.' + classNames.hover);\n            if (lastLi && lastLi.length) {\n                removeClass(lastLi, classNames.hover);\n            }\n            if (!li.classList.contains(classNames.selected) || this.showCheckBox) {\n                li.classList.add(classNames.hover);\n            }\n        }\n    }\n    //Data Source Related Functions\n    getSubDS() {\n        let levelKeys = this.curDSLevel;\n        if (levelKeys.length) {\n            let ds = this.localData;\n            for (let key of levelKeys) {\n                let field = {};\n                field[this.fields.id] = key;\n                this.curDSJSON = this.findItemFromDS(ds, field);\n                let fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);\n                ds = this.curDSJSON ? fieldData[this.fields.child] : ds;\n            }\n            return ds;\n        }\n        return this.localData;\n    }\n    getItemData(li) {\n        let dataSource = this.dataSource instanceof DataManager ?\n            this.localData : this.dataSource;\n        let fields = this.getElementUID(li);\n        let curDS;\n        if (isNullOrUndefined(this.element.querySelector('.' + classNames.hasChild)) && this.fields.groupBy) {\n            curDS = this.curViewDS;\n        }\n        else {\n            curDS = dataSource;\n        }\n        return this.findItemFromDS(curDS, fields);\n    }\n    findItemFromDS(dataSource, fields, parent) {\n        let resultJSON;\n        if (dataSource && dataSource.length && fields) {\n            dataSource.some((data) => {\n                let fieldData = getFieldValues(data, this.listBaseOption.fields);\n                //(!(fid) || id === fid) && (!(ftext) || text === ftext) && (!!fid || !!ftext)\n                if ((fields[this.fields.id] || fields[this.fields.text]) &&\n                    (!fields[this.fields.id] || (!isNullOrUndefined(fieldData[this.fields.id]) &&\n                        fieldData[this.fields.id].toString()) === fields[this.fields.id].toString()) &&\n                    (!fields[this.fields.text] || fieldData[this.fields.text] === fields[this.fields.text])) {\n                    resultJSON = (parent ? dataSource : data);\n                }\n                else if (typeof data !== 'object' && dataSource.indexOf(data) !== -1) {\n                    resultJSON = (parent ? dataSource : data);\n                }\n                else if (!isNullOrUndefined(fields[this.fields.id]) && isNullOrUndefined(fieldData[this.fields.id])) {\n                    let li = this.element.querySelector('[data-uid=\"'\n                        + fields[this.fields.id] + '\"]');\n                    if (li && li.innerText.trim() === fieldData[this.fields.text]) {\n                        resultJSON = data;\n                    }\n                }\n                else if (fieldData.hasOwnProperty(this.fields.child) && fieldData[this.fields.child].length) {\n                    resultJSON = this.findItemFromDS(fieldData[this.fields.child], fields, parent);\n                }\n                return !!resultJSON;\n            });\n        }\n        else {\n            resultJSON = dataSource;\n        }\n        return resultJSON;\n    }\n    getQuery() {\n        let columns = [];\n        let query = (this.query ? this.query : new Query());\n        if (!this.query) {\n            for (let column of Object.keys(this.fields.properties)) {\n                if (column !== 'tableName' && !!(this.fields[column]) &&\n                    this.fields[column] !==\n                        ListBase.defaultMappedFields[column]\n                    && columns.indexOf(this.fields[column]) === -1) {\n                    columns.push(this.fields[column]);\n                }\n            }\n            query.select(columns);\n            if (this.fields.properties.hasOwnProperty('tableName')) {\n                query.from(this.fields.tableName);\n            }\n        }\n        return query;\n    }\n    setViewDataSource(dataSource = this.localData) {\n        if (dataSource && this.fields.groupBy) {\n            if (this.sortOrder !== 'None') {\n                this.curViewDS = ListBase.groupDataSource(ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, this.fields.sortBy)), this.listBaseOption.fields, this.sortOrder);\n            }\n            else {\n                this.curViewDS = ListBase.groupDataSource(dataSource, this.listBaseOption.fields, this.sortOrder);\n            }\n        }\n        else if (dataSource && this.sortOrder !== 'None') {\n            this.curViewDS = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, this.fields.sortBy));\n        }\n        else {\n            this.curViewDS = dataSource;\n        }\n    }\n    isInAnimation() {\n        return this.curUL.classList.contains('.e-animate');\n    }\n    setLocalData() {\n        this.trigger('actionBegin');\n        let listViewComponent = this;\n        if (this.dataSource instanceof DataManager) {\n            this.dataSource.executeQuery(this.getQuery()).then((e) => {\n                if (this.isDestroyed) {\n                    return;\n                }\n                this.localData = e.result;\n                if (!this.isServerRendered || (!isBlazor())) {\n                    listViewComponent.removeElement(listViewComponent.contentContainer);\n                }\n                this.renderList();\n                this.trigger('actionComplete', e);\n            }).catch((e) => {\n                if (this.isDestroyed) {\n                    return;\n                }\n                this.trigger('actionFailure', e);\n            });\n        }\n        else if (!this.dataSource || !this.dataSource.length) {\n            let ul = this.element.querySelector('ul');\n            if (ul) {\n                remove(ul);\n                this.setProperties({ dataSource: ListBase.createJsonFromElement(ul) }, true);\n                this.localData = this.dataSource;\n                this.renderList();\n                this.trigger('actionComplete', { data: this.localData });\n            }\n        }\n        else {\n            this.localData = this.dataSource;\n            this.renderList();\n            this.trigger('actionComplete', { data: this.localData });\n        }\n    }\n    reRender() {\n        if (!isBlazor() || !this.isServerRendered || this.enableVirtualization) {\n            this.resetBlazorTemplates();\n            this.removeElement(this.headerEle);\n            this.removeElement(this.ulElement);\n            this.removeElement(this.contentContainer);\n            if (Object.keys(window).indexOf('ejsInterop') === -1) {\n                this.element.innerHTML = '';\n            }\n            this.headerEle = this.ulElement = this.liCollection = undefined;\n            this.header();\n        }\n        this.setLocalData();\n    }\n    resetCurrentList() {\n        this.resetBlazorTemplates();\n        this.setViewDataSource(this.curViewDS);\n        this.contentContainer.innerHTML = '';\n        this.createList();\n        this.renderIntoDom(this.curUL);\n    }\n    setAttributes(liElements) {\n        for (let i = 0; i < liElements.length; i++) {\n            let element = liElements[i];\n            if (element.classList.contains('e-list-item')) {\n                element.setAttribute('id', this.element.id + '_' + element.getAttribute('data-uid'));\n                element.setAttribute('aria-selected', 'false');\n                element.setAttribute('tabindex', '-1');\n            }\n        }\n    }\n    createList() {\n        this.currentLiElements = [];\n        this.isNestedList = false;\n        this.ulElement = this.curUL = ListBase.createList(this.createElement, this.curViewDS, this.listBaseOption);\n        this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n        this.setAttributes(this.liCollection);\n        this.updateBlazorTemplates(true);\n    }\n    resetBlazorTemplates() {\n        // tslint:disable-next-line:no-any\n        let templateCollection = blazorTemplates;\n        if (this.template) {\n            templateCollection[this.LISTVIEW_TEMPLATE_ID] = [];\n            resetBlazorTemplate(this.LISTVIEW_TEMPLATE_ID, LISTVIEW_TEMPLATE_PROPERTY);\n        }\n        if (this.groupTemplate) {\n            templateCollection[this.LISTVIEW_GROUPTEMPLATE_ID] = [];\n            resetBlazorTemplate(this.LISTVIEW_GROUPTEMPLATE_ID, LISTVIEW_GROUPTEMPLATE_PROPERTY);\n        }\n        if (this.headerTemplate) {\n            resetBlazorTemplate(this.LISTVIEW_HEADERTEMPLATE_ID, LISTVIEW_HEADERTEMPLATE_PROPERTY);\n        }\n    }\n    updateBlazorTemplates(template = false, headerTemplate = false, resetExistingElements = false) {\n        if (this.template && template && !this.enableVirtualization) {\n            updateBlazorTemplate(this.LISTVIEW_TEMPLATE_ID, LISTVIEW_TEMPLATE_PROPERTY, this, resetExistingElements);\n        }\n        if (this.groupTemplate && template && !this.enableVirtualization) {\n            updateBlazorTemplate(this.LISTVIEW_GROUPTEMPLATE_ID, LISTVIEW_GROUPTEMPLATE_PROPERTY, this, resetExistingElements);\n        }\n        if (this.headerTemplate && headerTemplate) {\n            updateBlazorTemplate(this.LISTVIEW_HEADERTEMPLATE_ID, LISTVIEW_HEADERTEMPLATE_PROPERTY, this, resetExistingElements);\n        }\n    }\n    exceptionEvent(e) {\n        this.trigger('actionFailure', e);\n    }\n    UpdateCurrentUL() {\n        this.ulElement = this.curUL = this.element.querySelector('.' + classNames.parentItem);\n        if (this.curUL) {\n            // tslint:disable\n            this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n            // tslint:enable\n        }\n    }\n    removeActiveClass() {\n        let listViewComponent = this;\n        setTimeout(() => {\n            let ulContainer = listViewComponent.element.querySelector('.' + classNames.virtualElementContainer);\n            for (let i = 0; i < ulContainer.childElementCount; i++) {\n                let selectedElement = ulContainer.children[i];\n                let elementIndex;\n                let hiddenElementIndex;\n                if (listViewComponent.showCheckBox) {\n                    if (listViewComponent.previousSelectedItems.length > 0) {\n                        for (let j = 0; j < listViewComponent.previousSelectedItems.length; j++) {\n                            if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[j]) {\n                                selectedElement.classList.add('e-active');\n                                selectedElement.setAttribute('aria-selected', 'true');\n                                if (selectedElement.querySelector('.e-frame.e-icons')) {\n                                    selectedElement.querySelector('.e-frame.e-icons').classList.add('e-check');\n                                }\n                                elementIndex = i;\n                            }\n                            else {\n                                if (elementIndex !== i) {\n                                    selectedElement.classList.remove('e-active');\n                                    selectedElement.removeAttribute('aria-selected');\n                                    if (selectedElement.querySelector('.e-check')) {\n                                        selectedElement.querySelector('.e-check').classList.remove('e-check');\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        selectedElement.classList.remove('e-active');\n                        selectedElement.removeAttribute('aria-selected');\n                        if (selectedElement.querySelector('.e-check')) {\n                            selectedElement.querySelector('.e-check').classList.remove('e-check');\n                        }\n                    }\n                }\n                else {\n                    if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[0]) {\n                        selectedElement.classList.add('e-active');\n                        selectedElement.setAttribute('aria-selected', 'true');\n                    }\n                    else {\n                        selectedElement.classList.remove('e-active');\n                        selectedElement.removeAttribute('aria-selected');\n                    }\n                }\n                if (listViewComponent.hiddenItems.length > 0) {\n                    for (let k = 0; k < listViewComponent.hiddenItems.length; k++) {\n                        if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[k]) {\n                            selectedElement.style.display = 'none';\n                            hiddenElementIndex = i;\n                        }\n                        else {\n                            if (hiddenElementIndex !== i) {\n                                selectedElement.style.display = null;\n                            }\n                        }\n                    }\n                }\n                if (listViewComponent.enabledItems.length > 0) {\n                    for (let x = 0; x < listViewComponent.enabledItems.length; x++) {\n                        if (selectedElement.getAttribute('data-uid') === listViewComponent.enabledItems[x]) {\n                            if (selectedElement.classList.contains('e-disabled')) {\n                                selectedElement.classList.remove('e-disabled');\n                            }\n                        }\n                    }\n                }\n                if (listViewComponent.disabledItems.length > 0) {\n                    for (let y = 0; y < listViewComponent.disabledItems.length; y++) {\n                        if (selectedElement.getAttribute('data-uid') === listViewComponent.disabledItems[y]) {\n                            if (!selectedElement.classList.contains('e-disabled')) {\n                                selectedElement.classList.add('e-disabled');\n                            }\n                        }\n                    }\n                }\n            }\n        }, 200);\n    }\n    renderingNestedList() {\n        let ul = closest(this.liElement.parentNode, '.' + classNames.parentItem);\n        let ctrlId = this.element.id;\n        let ulElement = document.getElementById(ctrlId);\n        let currentListItem = ulElement.getElementsByTagName('UL')[ulElement.getElementsByTagName('UL').length - 1];\n        this.switchView(ul, currentListItem);\n        this.liElement = null;\n    }\n    renderSubList(li) {\n        this.liElement = li;\n        let uID = li.getAttribute('data-uid');\n        if (li.classList.contains(classNames.hasChild) && uID) {\n            let ul = closest(li.parentNode, '.' + classNames.parentItem);\n            let ele = this.element.querySelector('[pid=\\'' + uID + '\\']');\n            this.curDSLevel.push(uID);\n            this.setViewDataSource(this.getSubDS());\n            if (!ele) {\n                let data = this.curViewDS;\n                if (isBlazor() && this.isServerRendered) {\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('ListChildDataSource', data);\n                    // tslint:enable\n                }\n                else {\n                    ele = ListBase.createListFromJson(this.createElement, data, this.listBaseOption, this.curDSLevel.length);\n                    let lists = ele.querySelectorAll('.' + classNames.listItem);\n                    this.setAttributes(lists);\n                    ele.setAttribute('pID', uID);\n                    ele.style.display = 'none';\n                    this.renderIntoDom(ele);\n                    this.updateBlazorTemplates(true);\n                }\n            }\n            if (!isBlazor() || !this.isServerRendered || this.enableVirtualization) {\n                this.switchView(ul, ele);\n            }\n            this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n            if (this.selectedItems) {\n                let fieldData = getFieldValues(this.selectedItems.data, this.listBaseOption.fields);\n                this.header((fieldData[this.listBaseOption.fields.text]), true);\n            }\n            this.selectedLI = undefined;\n        }\n    }\n    renderIntoDom(ele) {\n        this.contentContainer.appendChild(ele);\n    }\n    renderList(data) {\n        this.setViewDataSource(data);\n        if (!isBlazor() || !this.isServerRendered || this.enableVirtualization) {\n            if (this.enableVirtualization) {\n                if (Object.keys(this.dataSource).length) {\n                    if (!(isBlazor() && this.isServerRendered)) {\n                        if ((this.template || this.groupTemplate) && !this.virtualizationModule.isNgTemplate()) {\n                            this.listBaseOption.template = null;\n                            this.listBaseOption.groupTemplate = null;\n                            this.listBaseOption.itemCreated = this.virtualizationModule.createUIItem.bind(this.virtualizationModule);\n                        }\n                    }\n                }\n                this.virtualizationModule.uiVirtualization();\n            }\n            else {\n                this.createList();\n                this.contentContainer = this.createElement('div', { className: classNames.content });\n                this.element.appendChild(this.contentContainer);\n                this.renderIntoDom(this.ulElement);\n            }\n        }\n    }\n    getElementUID(obj) {\n        let fields = {};\n        if (obj instanceof Element) {\n            fields[this.fields.id] = obj.getAttribute('data-uid');\n        }\n        else {\n            fields = obj;\n        }\n        return fields;\n    }\n    /**\n     * Initializes the ListView component rendering.\n     */\n    render() {\n        if (!isBlazor() || !this.isServerRendered) {\n            this.element.classList.add(classNames.root);\n            attributes(this.element, { role: 'list', tabindex: '0' });\n            this.setCSSClass();\n            this.setEnableRTL();\n            this.setEnable();\n            this.setSize();\n            this.wireEvents();\n            this.header();\n            this.setLocalData();\n            this.setHTMLAttribute();\n        }\n        else {\n            this.initBlazor(true);\n        }\n        this.rippleFn = rippleEffect(this.element, {\n            selector: '.' + classNames.listItem\n        });\n        this.renderComplete();\n    }\n    initBlazor(firstRender) {\n        if (firstRender === null) {\n            firstRender = false;\n        }\n        this.setLocalData();\n        this.setViewDataSource(this.localData);\n        this.contentContainer = this.element.querySelector('.' + classNames.content);\n        if (firstRender) {\n            this.wireEvents();\n        }\n    }\n    /**\n     * It is used to destroy the ListView component.\n     */\n    destroy() {\n        this.resetBlazorTemplates();\n        this.unWireEvents();\n        let classAr = [classNames.root, classNames.disable, 'e-rtl',\n            'e-has-header', 'e-lib'].concat(this.cssClass.split(' ').filter((css) => css));\n        removeClass([this.element], classAr);\n        this.element.removeAttribute('role');\n        this.element.removeAttribute('tabindex');\n        this.curUL = this.ulElement = this.liCollection = this.headerEle = undefined;\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.element.innerHTML = '';\n            super.destroy();\n        }\n        else {\n            this.element.style.display = 'none';\n        }\n    }\n    /**\n     * Switches back from the navigated sub list item.\n     */\n    back() {\n        let pID = this.curDSLevel[this.curDSLevel.length - 1];\n        if (pID === undefined || this.isInAnimation()) {\n            return;\n        }\n        this.curDSLevel.pop();\n        this.setViewDataSource(this.getSubDS());\n        let toUL = this.element.querySelector('[data-uid=\\'' + pID + '\\']');\n        let fromUL = this.curUL;\n        if (!toUL) {\n            this.createList();\n            this.renderIntoDom(this.ulElement);\n            toUL = this.curUL;\n        }\n        else {\n            if (isBlazor() && this.isServerRendered && this.enableVirtualization) {\n                toUL = toUL.parentElement.parentElement.parentElement;\n            }\n            else {\n                toUL = toUL.parentElement;\n            }\n        }\n        let fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);\n        let text = fieldData[this.fields.text];\n        this.switchView(fromUL, toUL, true);\n        this.removeFocus();\n        let li = this.element.querySelector('[data-uid=\\'' + pID + '\\']');\n        li.classList.remove(classNames.disable);\n        li.classList.add(classNames.focused);\n        if (this.showCheckBox && li.querySelector('.' + classNames.checkboxIcon).classList.contains(classNames.checked)) {\n            li.setAttribute('aria-selected', 'true');\n        }\n        else {\n            li.classList.remove(classNames.selected);\n            li.setAttribute('aria-selected', 'false');\n        }\n        this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n        if (this.enableHtmlSanitizer) {\n            this.setProperties({ headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle) }, true);\n        }\n        this.header((this.curDSLevel.length ? text : this.headerTitle), (this.curDSLevel.length ? true : false));\n    }\n    /**\n     * Selects the list item from the ListView by passing the elements or field object.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    selectItem(item) {\n        if (this.enableVirtualization) {\n            this.virtualizationModule.selectItem(item);\n        }\n        else if (this.showCheckBox) {\n            this.setCheckboxLI(this.getLiFromObjOrElement(item));\n        }\n        else {\n            isNullOrUndefined(item) ? this.removeSelect() : this.setSelectLI(this.getLiFromObjOrElement(item));\n        }\n    }\n    getLiFromObjOrElement(obj) {\n        let li;\n        let dataSource = this.dataSource instanceof DataManager ?\n            this.localData : this.dataSource;\n        if (!isNullOrUndefined(obj)) {\n            if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {\n                if (obj instanceof Element) {\n                    let uid = obj.getAttribute('data-uid').toString();\n                    for (let i = 0; i < this.liCollection.length; i++) {\n                        if (this.liCollection[i].getAttribute('data-uid').toString() === uid) {\n                            li = this.liCollection[i];\n                            break;\n                        }\n                    }\n                }\n                else {\n                    Array.prototype.some.call(this.curUL.querySelectorAll('.' + classNames.listItem), (item) => {\n                        if (item.innerText.trim() === obj.toString()) {\n                            li = item;\n                            return true;\n                        }\n                        else {\n                            return false;\n                        }\n                    });\n                }\n            }\n            else {\n                let resultJSON = this.getItemData(obj);\n                let fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n                if (resultJSON) {\n                    li = this.element.querySelector('[data-uid=\"'\n                        + fieldData[this.fields.id] + '\"]');\n                    if (!this.enableVirtualization && isNullOrUndefined(li)) {\n                        let curLi = this.element.querySelectorAll('.' + classNames.listItem);\n                        for (let i = 0; i < curLi.length; i++) {\n                            if (curLi[i].innerText.trim() === fieldData[this.fields.text]) {\n                                li = curLi[i];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return li;\n    }\n    /**\n     * Selects multiple list items from the ListView.\n     * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of\n     *  elements or array of fields Object with ID and Text fields.\n     */\n    selectMultipleItems(item) {\n        if (!isNullOrUndefined(item)) {\n            for (let i = 0; i < item.length; i++) {\n                if (!isNullOrUndefined(item[i])) {\n                    this.selectItem(item[i]);\n                }\n            }\n        }\n    }\n    getParentId() {\n        let parentId = [];\n        if (this.isNestedList) {\n            for (let i = this.curDSLevel.length - 1; i >= 0; i--) {\n                parentId.push(this.curDSLevel[i]);\n            }\n        }\n        return parentId;\n    }\n    /**\n     * Gets the details of the currently selected item from the list items.\n     * @blazorType ListSelectedItem<TValue>\n     */\n    getSelectedItems() {\n        // tslint:disable-next-line:no-any\n        let finalValue;\n        let isCompleted = false;\n        this.selectedId = [];\n        let dataSource = this.dataSource instanceof DataManager ?\n            this.localData : this.dataSource;\n        if (this.enableVirtualization && !isCompleted) {\n            finalValue = this.virtualizationModule.getSelectedItems();\n            isCompleted = true;\n        }\n        else if (this.showCheckBox && !isCompleted) {\n            // tslint:disable-next-line:no-any\n            let liCollection = this.curUL.getElementsByClassName(classNames.selected);\n            let liTextCollection = [];\n            let liDataCollection = [];\n            this.selectedId = [];\n            let dataParent = [];\n            for (let i = 0; i < liCollection.length; i++) {\n                if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {\n                    liTextCollection.push(liCollection[i].innerText.trim());\n                }\n                else {\n                    let tempData = this.getItemData(liCollection[i]);\n                    let fieldData = getFieldValues(tempData, this.listBaseOption.fields);\n                    if (this.isNestedList) {\n                        dataParent.push({ data: tempData, parentId: this.getParentId() });\n                    }\n                    else {\n                        liDataCollection.push(tempData);\n                    }\n                    if (fieldData) {\n                        liTextCollection.push(fieldData[this.listBaseOption.fields.text]);\n                        this.selectedId.push(fieldData[this.listBaseOption.fields.id]);\n                    }\n                    else {\n                        liTextCollection.push(undefined);\n                        this.selectedId.push(undefined);\n                    }\n                }\n            }\n            if ((typeof dataSource[0] === 'string'\n                || typeof dataSource[0] === 'number')\n                && !isCompleted) {\n                finalValue = { item: liCollection, data: dataSource, text: liTextCollection };\n                isCompleted = true;\n            }\n            if (this.isNestedList && !isCompleted) {\n                finalValue = { item: liCollection, data: dataParent, text: liTextCollection };\n                isCompleted = true;\n            }\n            else if (!isCompleted) {\n                finalValue = { item: liCollection, data: liDataCollection, text: liTextCollection };\n                isCompleted = true;\n            }\n        }\n        else if (!isCompleted) {\n            let liElement = this.element.getElementsByClassName(classNames.selected)[0];\n            let fieldData = getFieldValues(this.getItemData(liElement), this.listBaseOption.fields);\n            if ((typeof dataSource[0] === 'string'\n                || typeof dataSource[0] === 'number')\n                && !isCompleted) {\n                finalValue = (!isNullOrUndefined(liElement)) ? {\n                    item: liElement, data: dataSource,\n                    text: liElement.innerText.trim()\n                } : undefined;\n                isCompleted = true;\n            }\n            else if (!isCompleted) {\n                if (isNullOrUndefined(fieldData) || isNullOrUndefined(liElement)) {\n                    finalValue = undefined;\n                    isCompleted = true;\n                }\n                else {\n                    this.selectedId.push(fieldData[this.listBaseOption.fields.id]);\n                    finalValue = {\n                        text: fieldData[this.listBaseOption.fields.text], item: liElement,\n                        data: this.getItemData(liElement)\n                    };\n                    isCompleted = true;\n                }\n            }\n        }\n        if (isBlazor()) {\n            // tslint:disable-next-line:no-any\n            return this.blazorGetSelectedItems(finalValue);\n        }\n        else {\n            return finalValue;\n        }\n    }\n    // tslint:disable-next-line:no-any\n    blazorGetSelectedItems(finalGetSelectedItem) {\n        let blazorSelectedItem = {\n            data: [],\n            index: [],\n            parentId: [],\n            text: []\n        };\n        if (!isNullOrUndefined(finalGetSelectedItem)) {\n            if (!isNullOrUndefined(finalGetSelectedItem.data)) {\n                if (this.showCheckBox && this.isNestedList) {\n                    for (let i = 0; i < finalGetSelectedItem.data.length; i++) {\n                        blazorSelectedItem.data.push(finalGetSelectedItem.data[i].data);\n                    }\n                    if (!isNullOrUndefined(finalGetSelectedItem.data[0])\n                        && !isNullOrUndefined(finalGetSelectedItem.data[0].parentId)) {\n                        blazorSelectedItem.parentId = finalGetSelectedItem.data[0].parentId;\n                    }\n                }\n                else {\n                    blazorSelectedItem.data = this.convertItemsToArray(finalGetSelectedItem.data);\n                }\n            }\n            if (!isNullOrUndefined(finalGetSelectedItem.text)) {\n                blazorSelectedItem.text = this.convertItemsToArray(finalGetSelectedItem.text);\n            }\n            if (!isNullOrUndefined(finalGetSelectedItem.index)) {\n                blazorSelectedItem.index = this.convertItemsToArray(finalGetSelectedItem.index);\n            }\n        }\n        return blazorSelectedItem;\n    }\n    // tslint:disable-next-line:no-any\n    convertItemsToArray(items) {\n        return Array.isArray(items) ? [...items] : [items];\n    }\n    /**\n     * Finds out an item details from the current list.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     * @blazorType TValue\n     */\n    findItem(item) {\n        return this.getItemData(item);\n    }\n    /**\n     * Enables the disabled list items by passing the Id and text fields.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    enableItem(item) {\n        this.setItemState(item, true);\n        if (this.enableVirtualization) {\n            this.virtualizationModule.enableItem(item);\n        }\n    }\n    /**\n     * Disables the list items by passing the Id and text fields.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    disableItem(item) {\n        this.setItemState(item, false);\n        if (this.enableVirtualization) {\n            this.virtualizationModule.disableItem(item);\n        }\n    }\n    //A function that used to set state of the list item like enable, disable.\n    setItemState(item, isEnable) {\n        let resultJSON = this.getItemData(item);\n        let fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n        if (resultJSON) {\n            let li = this.element.querySelector('[data-uid=\"' + fieldData[this.fields.id] + '\"]');\n            if (isEnable) {\n                if (li) {\n                    li.classList.remove(classNames.disable);\n                }\n                delete resultJSON[this.fields.enabled];\n            }\n            else if (!isEnable) {\n                if (li) {\n                    li.classList.add(classNames.disable);\n                }\n                resultJSON[this.fields.enabled] = false;\n            }\n        }\n    }\n    /**\n     * Shows the hide list item from the ListView.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    showItem(item) {\n        this.showHideItem(item, false, '');\n        if (this.enableVirtualization) {\n            this.virtualizationModule.showItem(item);\n        }\n    }\n    /**\n     * Hides an list item from the ListView.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    hideItem(item) {\n        this.showHideItem(item, true, 'none');\n        if (this.enableVirtualization) {\n            this.virtualizationModule.hideItem(item);\n        }\n    }\n    showHideItem(obj, isHide, display) {\n        let resultJSON = this.getItemData(obj);\n        let fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n        if (resultJSON) {\n            let li = this.element.querySelector('[data-uid=\"' + fieldData[this.fields.id] + '\"]');\n            if (li) {\n                li.style.display = display;\n            }\n            if (isHide) {\n                resultJSON[this.fields.isVisible] = false;\n            }\n            else {\n                delete resultJSON[this.fields.isVisible];\n            }\n        }\n    }\n    /**\n     * Adds the new list item(s) to the current ListView.\n     * To add a new list item(s) in the ListView, we need to pass the `data` as an array of items that need\n     * to be added and `fields` as the target item to which we need to add the given item(s) as its children.\n     * For example fields: { text: 'Name', tooltip: 'Name', id:'id'}\n     * @param  {{[key:string]:Object}[]} data - JSON Array Data that need to add.\n     * @param  {Fields} fields - Target item to add the given data as its children (can be null).\n     * @blazorArgsType data|object,fields|object\n     */\n    addItem(data, fields = undefined) {\n        const dataSource = this.dataSource instanceof DataManager\n            ? this.localData : this.dataSource;\n        this.addItemInternally(data, fields, dataSource);\n    }\n    addItemInternally(data, fields, dataSource) {\n        if (data instanceof Array) {\n            if (this.enableVirtualization) {\n                this.virtualizationModule.addItem(data, fields, dataSource);\n            }\n            else {\n                const ds = this.findItemFromDS(dataSource, fields);\n                let child;\n                if (ds) {\n                    const fieldData = getFieldValues(ds, this.listBaseOption.fields);\n                    child = fieldData[this.fields.child];\n                    if (!child) {\n                        child = [];\n                    }\n                    child = child.concat(data);\n                }\n                // check for whether target is nested level or top level in list\n                if (ds instanceof Array) {\n                    for (let i = 0; i < data.length; i++) {\n                        dataSource.push(data[i]);\n                        this.setViewDataSource(dataSource);\n                        // since it is top level target, get the content container's first child\n                        // as it is always the top level UL\n                        const targetUL = this.contentContainer\n                            ? this.contentContainer.children[0]\n                            : null;\n                        // check for whether the list was previously empty or not, if it is\n                        // proceed to call initial render\n                        if (this.contentContainer && targetUL) {\n                            this.addItemIntoDom(data[i], targetUL, this.curViewDS);\n                        }\n                        else {\n                            this.reRender();\n                        }\n                    }\n                    if (this.curUL) {\n                        this.updateBlazorTemplates(true);\n                    }\n                    this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n                }\n                else {\n                    // proceed as target item is in nested level, only if it is a valid target ds\n                    if (ds) {\n                        ds[this.fields.child] = child;\n                        this.addItemInNestedList(ds, data);\n                    }\n                }\n            }\n        }\n    }\n    addItemInNestedList(targetItemData, itemQueue) {\n        const targetItemId = targetItemData[this.fields.id];\n        const targetChildDS = targetItemData[this.fields.child];\n        const isAlreadyRenderedUL = this.element.querySelector('[pid=\\'' + targetItemId + '\\']');\n        const targetLi = this.element.querySelector('[data-uid=\\'' + targetItemId + '\\']');\n        const targetUL = isAlreadyRenderedUL\n            ? isAlreadyRenderedUL\n            : targetLi\n                ? closest(targetLi, 'ul')\n                : null;\n        const targetDS = isAlreadyRenderedUL ? targetChildDS : [targetItemData];\n        const isTargetEmptyChild = targetLi ? !targetLi.classList.contains(classNames.hasChild) : false;\n        let isRefreshTemplateNeeded = false;\n        // if li element is already rendered, that element needs to be refreshed so that\n        // it becomes child viewable due to new child items are added now\n        if (isTargetEmptyChild) {\n            const targetRefreshedElement = ListBase.createListItemFromJson(this.createElement, targetDS, this.listBaseOption);\n            this.setAttributes(targetRefreshedElement);\n            targetUL.insertBefore(targetRefreshedElement[0], targetLi);\n            detach(targetLi);\n            isRefreshTemplateNeeded = true;\n        }\n        // if it is already rendered element, we need to create and append new elements\n        if (isAlreadyRenderedUL && itemQueue) {\n            for (let i = 0; i < itemQueue.length; i++) {\n                targetDS.push(itemQueue[i]);\n                this.addItemIntoDom(itemQueue[i], targetUL, targetDS);\n            }\n            isRefreshTemplateNeeded = true;\n        }\n        if (isRefreshTemplateNeeded) {\n            this.updateBlazorTemplates(true);\n        }\n    }\n    addItemIntoDom(currentItem, targetUL, curViewDS) {\n        let index = curViewDS.indexOf(currentItem);\n        this.addListItem(currentItem, index, targetUL, curViewDS);\n        let curItemDS = curViewDS[index - 1];\n        if (curItemDS && curItemDS.isHeader && curItemDS.items.length === 1) {\n            this.addListItem(curItemDS, (index - 1), targetUL, curViewDS);\n        }\n    }\n    addListItem(dataSource, index, ulElement, curViewDS) {\n        let target = this.getLiFromObjOrElement(curViewDS[index + 1]) ||\n            this.getLiFromObjOrElement(curViewDS[index + 2]) || null;\n        let li = ListBase.createListItemFromJson(this.createElement, [dataSource], this.listBaseOption);\n        this.setAttributes(li);\n        ulElement.insertBefore(li[0], target);\n    }\n    /**\n     * Removes the list item from the data source based on a passed\n     *  element like fields: { text: 'Name', tooltip: 'Name', id:'id'}\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    removeItem(item) {\n        const listDataSource = this.dataSource instanceof DataManager\n            ? this.localData : this.dataSource;\n        if (this.enableVirtualization) {\n            this.virtualizationModule.removeItem(item);\n        }\n        else {\n            this.removeItemFromList(item, listDataSource);\n            this.updateBlazorTemplates(true);\n        }\n    }\n    removeItemFromList(obj, listDataSource) {\n        const curViewDS = this.curViewDS;\n        let fields = obj instanceof Element ? this.getElementUID(obj) : obj;\n        let dataSource;\n        dataSource = this.findItemFromDS(listDataSource, fields, true);\n        if (dataSource) {\n            let data;\n            data = this.findItemFromDS(dataSource, fields);\n            let index = curViewDS.indexOf(data);\n            let li = this.getLiFromObjOrElement(obj);\n            let groupLi;\n            this.validateNestedView(li);\n            if (this.fields.groupBy && this.curViewDS[index - 1] &&\n                curViewDS[index - 1].isHeader &&\n                curViewDS[index - 1].items.length === 1) {\n                if (li && li.previousElementSibling.classList.contains(classNames.groupListItem) &&\n                    (isNullOrUndefined(li.nextElementSibling) || (li.nextElementSibling &&\n                        li.nextElementSibling.classList.contains(classNames.groupListItem)))) {\n                    groupLi = li.previousElementSibling;\n                }\n            }\n            if (li) {\n                detach(li);\n            }\n            if (groupLi) {\n                detach(groupLi);\n            }\n            // tslint:disable-next-line:no-any\n            const foundData = (dataSource.length - 1) <= 0\n                ? this.findParent(this.localData, this.fields.id, (value) => value === data[this.fields.id], null) : null;\n            let dsIndex = dataSource.indexOf(data);\n            dataSource.splice(dsIndex, 1);\n            this.setViewDataSource(listDataSource);\n            if (foundData\n                && foundData.parent\n                && Array.isArray(foundData.parent[this.fields.child])\n                && foundData.parent[this.fields.child].length <= 0) {\n                const parentLi = this.getLiFromObjOrElement(foundData.parent);\n                if (parentLi) {\n                    let li = ListBase.createListItemFromJson(this.createElement, [foundData.parent], this.listBaseOption);\n                    this.setAttributes(li);\n                    parentLi.parentElement.insertBefore(li[0], parentLi);\n                    parentLi.parentElement.removeChild(parentLi);\n                }\n            }\n            if (dataSource.length <= 0) {\n                this.back();\n            }\n            this.liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));\n        }\n    }\n    // validate before removing an element whether the current view is inside target element's child view\n    validateNestedView(li) {\n        const liID = li ? li.getAttribute('data-uid').toString().toLowerCase() : null;\n        if (liID && this.curDSLevel && this.curDSLevel.length > 0) {\n            while (this.curDSLevel.some((id) => id.toString().toLowerCase() === liID)) {\n                this.back();\n            }\n        }\n    }\n    /**\n     * Removes multiple items from the ListView by passing the array of elements or array of field objects.\n     * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of elements or array of field Object with ID and Text fields.\n     */\n    removeMultipleItems(item) {\n        if (item.length) {\n            for (let i = 0; i < item.length; i++) {\n                this.removeItem(item[i]);\n            }\n            this.updateBlazorTemplates(true);\n        }\n    }\n    // tslint:disable-next-line:no-any\n    findParent(dataSource, id, callback, parent) {\n        if (dataSource.hasOwnProperty(id) && callback(dataSource[id]) === true) {\n            return extend({}, dataSource);\n        }\n        for (let i = 0; i < Object.keys(dataSource).length; i++) {\n            if (dataSource[Object.keys(dataSource)[i]]\n                && typeof dataSource[Object.keys(dataSource)[i]] === 'object') {\n                // tslint:disable-next-line:no-any\n                let result = this.findParent(dataSource[Object.keys(dataSource)[i]], id, callback, dataSource);\n                if (result != null) {\n                    if (!result.parent) {\n                        result.parent = parent;\n                    }\n                    return result;\n                }\n            }\n        }\n        return null;\n    }\n    // Module Required function\n    getModuleName() {\n        return 'listview';\n    }\n    requiredModules() {\n        let modules = [];\n        if (this.enableVirtualization) {\n            modules.push({ args: [this], member: 'virtualization' });\n        }\n        return modules;\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     */\n    getPersistData() {\n        return this.addOnPersist(['cssClass', 'enableRtl', 'htmlAttributes',\n            'enable', 'fields', 'animation', 'headerTitle',\n            'sortOrder', 'showIcon', 'height', 'width', 'showCheckBox', 'checkBoxPosition']);\n    }\n};\n__decorate([\n    Property('')\n], ListView.prototype, \"cssClass\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"enableVirtualization\", void 0);\n__decorate([\n    Property({})\n], ListView.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property(true)\n], ListView.prototype, \"enable\", void 0);\n__decorate([\n    Property([])\n], ListView.prototype, \"dataSource\", void 0);\n__decorate([\n    Property()\n], ListView.prototype, \"query\", void 0);\n__decorate([\n    Complex(ListBase.defaultMappedFields, FieldSettings)\n], ListView.prototype, \"fields\", void 0);\n__decorate([\n    Property({ effect: 'SlideLeft', duration: 400, easing: 'ease' })\n], ListView.prototype, \"animation\", void 0);\n__decorate([\n    Property('None')\n], ListView.prototype, \"sortOrder\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"showIcon\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"showCheckBox\", void 0);\n__decorate([\n    Property('Left')\n], ListView.prototype, \"checkBoxPosition\", void 0);\n__decorate([\n    Property('')\n], ListView.prototype, \"headerTitle\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"showHeader\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate([\n    Property('')\n], ListView.prototype, \"height\", void 0);\n__decorate([\n    Property('')\n], ListView.prototype, \"width\", void 0);\n__decorate([\n    Property(null)\n], ListView.prototype, \"template\", void 0);\n__decorate([\n    Property(null)\n], ListView.prototype, \"headerTemplate\", void 0);\n__decorate([\n    Property(null)\n], ListView.prototype, \"groupTemplate\", void 0);\n__decorate([\n    Event()\n], ListView.prototype, \"select\", void 0);\n__decorate([\n    Event()\n], ListView.prototype, \"actionBegin\", void 0);\n__decorate([\n    Event()\n], ListView.prototype, \"actionComplete\", void 0);\n__decorate([\n    Event()\n], ListView.prototype, \"actionFailure\", void 0);\nListView = __decorate([\n    NotifyPropertyChanges\n], ListView);\n\nconst listElementCount = 1.5;\nconst windowElementCount = 3;\nclass Virtualization {\n    constructor(instance) {\n        this.elementDifference = 0;\n        this.listViewInstance = instance;\n    }\n    /**\n     * For internal use only.\n     * @private\n     */\n    isNgTemplate() {\n        return !isNullOrUndefined(this.listViewInstance.templateRef) && typeof this.listViewInstance.templateRef !== 'string';\n    }\n    /**\n     * For internal use only.\n     * @private\n     */\n    uiVirtualization() {\n        this.wireScrollEvent(false);\n        let curViewDS = this.listViewInstance.curViewDS;\n        let firstDs = curViewDS.slice(0, 1);\n        if (!(isBlazor() || this.listViewInstance.isServerRendered)) {\n            this.listViewInstance.ulElement = this.listViewInstance.curUL = ListBase.createList(this.listViewInstance.createElement, firstDs, this.listViewInstance.listBaseOption);\n            this.listViewInstance.contentContainer = this.listViewInstance.createElement('div', { className: classNames.content });\n            this.listViewInstance.element.appendChild(this.listViewInstance.contentContainer);\n            this.listViewInstance.contentContainer.appendChild(this.listViewInstance.ulElement);\n        }\n        this.listItemHeight = this.listViewInstance.ulElement.firstElementChild.getBoundingClientRect().height;\n        this.expectedDomItemCount = this.ValidateItemCount(10000);\n        this.domItemCount = this.ValidateItemCount(Object.keys(this.listViewInstance.curViewDS).length);\n        this.uiFirstIndex = 0;\n        this.uiLastIndex = this.domItemCount - 1;\n        let otherDs = curViewDS.slice(1, this.domItemCount);\n        if (!(isBlazor() || this.listViewInstance.isServerRendered)) {\n            let listItems = ListBase.createListItemFromJson(this.listViewInstance.createElement, otherDs, this.listViewInstance.listBaseOption);\n            append(listItems, this.listViewInstance.ulElement);\n            this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\n            this.topElement = this.listViewInstance.createElement('div');\n            this.listViewInstance.ulElement.insertBefore(this.topElement, this.listViewInstance.ulElement.firstElementChild);\n            this.bottomElement = this.listViewInstance.createElement('div');\n            this.listViewInstance.ulElement.insertBefore(this.bottomElement, null);\n            this.totalHeight = (Object.keys(curViewDS).length * this.listItemHeight) - (this.domItemCount * this.listItemHeight);\n            this.topElement.style.height = 0 + 'px';\n            this.bottomElement.style.height = this.totalHeight + 'px';\n            this.topElementHeight = 0;\n            this.bottomElementHeight = this.totalHeight;\n        }\n        else {\n            this.listViewInstance.contentContainer = this.listViewInstance.element.querySelector('.e-content');\n            this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\n        }\n        this.listDiff = 0;\n        this.uiIndicesInitialization();\n    }\n    wireScrollEvent(destroy) {\n        if (!destroy) {\n            if (!(isBlazor() && this.listViewInstance.isServerRendered)) {\n                if (this.listViewInstance.isWindow) {\n                    this.onVirtualScroll = this.onVirtualUiScroll.bind(this);\n                    window.addEventListener('scroll', this.onVirtualScroll);\n                }\n                else {\n                    EventHandler.add(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll, this);\n                }\n            }\n            else {\n                if (this.listViewInstance.isWindow) {\n                    // tslint:disable-next-line:no-any\n                    this.onVirtualScroll = debounce(this.onVirtualUiScroll.bind(this), 350);\n                    // tslint:enable-next-line:no-any      \n                    this.updateUl = this.updateUlContainer.bind(this);\n                    window.addEventListener('scroll', this.onVirtualScroll);\n                    window.addEventListener('scroll', this.updateUl);\n                }\n                else {\n                    EventHandler.add(this.listViewInstance.element, 'scroll', debounce(this.onVirtualUiScroll, 350), this);\n                    EventHandler.add(this.listViewInstance.element, 'scroll', this.updateUlContainer, this);\n                }\n            }\n        }\n        else {\n            this.listViewInstance.isWindow ? window.removeEventListener('scroll', this.onVirtualScroll) :\n                EventHandler.remove(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll);\n            this.listViewInstance.isWindow ? window.removeEventListener('scroll', this.updateUl) :\n                EventHandler.remove(this.listViewInstance.element, 'scroll', this.updateUlContainer);\n        }\n    }\n    updateUlContainer(e) {\n        let listDiff;\n        let virtualElementContainer = this.listViewInstance.ulElement.querySelector('.' + classNames.virtualElementContainer);\n        if (isNullOrUndefined(this.listViewInstance.liElementHeight)) {\n            this.listViewInstance.updateLiElementHeight();\n        }\n        if (this.listViewInstance.isWindow) {\n            // tslint:disable-next-line:no-any\n            listDiff = Math.round(e.target.documentElement.scrollTop / this.listViewInstance.liElementHeight) - 2;\n            // tslint:enable-next-line:no-any  \n        }\n        else {\n            // tslint:disable-next-line:no-any\n            listDiff = Math.round(e.target.scrollTop / this.listViewInstance.liElementHeight) - 2;\n            // tslint:enable-next-line:no-any  \n        }\n        if (((listDiff - 1) * this.listViewInstance.liElementHeight) < 0) {\n            virtualElementContainer.style.top = '0px';\n        }\n        else {\n            virtualElementContainer.style.top = (listDiff) * this.listViewInstance.liElementHeight + 'px';\n        }\n    }\n    ValidateItemCount(dataSourceLength) {\n        const height = parseFloat(formatUnit(this.listViewInstance.height));\n        let itemCount;\n        if (this.listViewInstance.isWindow) {\n            itemCount = Math.round((window.innerHeight / this.listItemHeight) * windowElementCount);\n        }\n        else {\n            if (typeof this.listViewInstance.height === 'string' && this.listViewInstance.height.indexOf('%') !== -1) {\n                // tslint:disable-next-line:max-line-length\n                itemCount = Math.round((this.listViewInstance.element.getBoundingClientRect().height / this.listItemHeight) * listElementCount);\n            }\n            else {\n                itemCount = Math.round((height / this.listItemHeight) * listElementCount);\n            }\n        }\n        if (itemCount > dataSourceLength) {\n            itemCount = dataSourceLength;\n        }\n        return itemCount;\n    }\n    uiIndicesInitialization() {\n        this.uiIndices = { 'activeIndices': [], 'disabledItemIndices': [], 'hiddenItemIndices': [] };\n        let data = this.listViewInstance.curViewDS;\n        for (let i = 0; i < data.length; i++) {\n            if (this.listViewInstance.showCheckBox && data[i][this.listViewInstance.fields.isChecked]) {\n                this.uiIndices.activeIndices.push(i);\n            }\n            if (!isNullOrUndefined(data[i][this.listViewInstance.fields.enabled]) && !data[i][this.listViewInstance.fields.enabled]) {\n                this.uiIndices.disabledItemIndices.push(i);\n            }\n        }\n        if (this.isNgTemplate()) {\n            let items = this.listViewInstance.element.querySelectorAll('.' + classNames.listItem);\n            for (let index = 0; index < items.length; index++) {\n                items[index].context = this.listViewInstance.viewContainerRef.get(index).context;\n            }\n        }\n    }\n    refreshItemHeight() {\n        if (this.listViewInstance.curViewDS.length) {\n            let curViewDS = this.listViewInstance.curViewDS;\n            if (isBlazor() && this.listViewInstance.isServerRendered) {\n                this.listViewInstance.ulElement.children[0].style.height =\n                    (this.listViewInstance.liElementHeight * (Object.keys(curViewDS).length)) + 'px';\n            }\n            else {\n                this.listItemHeight = this.topElement.nextSibling.getBoundingClientRect().height;\n                this.totalHeight = (Object.keys(curViewDS).length * this.listItemHeight) - (this.domItemCount * this.listItemHeight);\n                this.bottomElementHeight = this.totalHeight;\n                this.bottomElement.style.height = this.totalHeight + 'px';\n            }\n        }\n    }\n    getscrollerHeight(startingHeight) {\n        return this.listViewInstance.isWindow ? (((pageYOffset - startingHeight) <= 0) ? 0 :\n            (pageYOffset - startingHeight)) : ((this.listViewInstance.element.scrollTop - startingHeight) <= 0) ? 0 :\n            (this.listViewInstance.element.scrollTop - startingHeight);\n    }\n    onVirtualUiScroll(e) {\n        let startingHeight;\n        if (this.listViewInstance.isWindow) {\n            startingHeight = this.listViewInstance.ulElement.getBoundingClientRect().top -\n                document.documentElement.getBoundingClientRect().top;\n        }\n        else {\n            startingHeight = this.listViewInstance.headerEle ? this.listViewInstance.headerEle.getBoundingClientRect().height : 0;\n        }\n        this.scrollPosition = isNullOrUndefined(this.scrollPosition) ? 0 : this.scrollPosition;\n        let scroll = this.getscrollerHeight(startingHeight);\n        this.topElementHeight = this.listItemHeight * Math.floor(scroll / this.listItemHeight);\n        this.bottomElementHeight = this.totalHeight - this.topElementHeight;\n        [this.topElementHeight, this.bottomElementHeight] = scroll <= this.totalHeight ?\n            [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0];\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            let listDiff;\n            if (isNullOrUndefined(this.listViewInstance.liElementHeight)) {\n                this.listViewInstance.updateLiElementHeight();\n            }\n            if (this.listViewInstance.isWindow) {\n                listDiff = Math.round(document.documentElement.scrollTop / this.listViewInstance.liElementHeight);\n            }\n            else {\n                // tslint:disable-next-line:no-any\n                listDiff = Math.round(e.target.scrollTop / this.listViewInstance.liElementHeight);\n                // tslint:enable-next-line:no-any\n            }\n            if ((listDiff - 2) - this.elementDifference >= 3 || (listDiff - 2) - this.elementDifference <= -1) {\n                let args = { listDiff: listDiff - 2, selectedItems: this.listViewInstance.previousSelectedItems };\n                this.listViewInstance.interopAdaptor.invokeMethodAsync('VirtalScrolling', args);\n                if (this.listViewInstance.ulElement.querySelector('.e-focused')) {\n                    this.listViewInstance.ulElement.querySelector('.e-focused').classList.remove('e-focused');\n                }\n                this.elementDifference = listDiff - 2;\n            }\n        }\n        else {\n            if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {\n                this.topElement.style.height = this.topElementHeight + 'px';\n                this.bottomElement.style.height = this.bottomElementHeight + 'px';\n                if (scroll > this.scrollPosition) {\n                    let listDiff = Math.round(((this.topElementHeight / this.listItemHeight) - this.listDiff));\n                    if (listDiff > (this.expectedDomItemCount + 5)) {\n                        this.onLongScroll(listDiff, true);\n                    }\n                    else {\n                        this.onNormalScroll(listDiff, true);\n                    }\n                }\n                else {\n                    let listDiff = Math.round((this.listDiff - (this.topElementHeight / this.listItemHeight)));\n                    if (listDiff > (this.expectedDomItemCount + 5)) {\n                        this.onLongScroll(listDiff, false);\n                    }\n                    else {\n                        this.onNormalScroll(listDiff, false);\n                    }\n                }\n            }\n            this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);\n            if (typeof this.listViewInstance.onUIScrolled === 'function') {\n                this.listViewInstance.onUIScrolled();\n            }\n        }\n        this.scrollPosition = scroll;\n    }\n    onLongScroll(listDiff, isScrollingDown) {\n        let index = isScrollingDown ? (this.uiFirstIndex + listDiff) : (this.uiFirstIndex - listDiff);\n        let elements = this.listViewInstance.ulElement.querySelectorAll('li');\n        for (let i = 0; i < elements.length; i++) {\n            this.updateUI(elements[i], index);\n            index++;\n        }\n        this.uiLastIndex = isScrollingDown ? (this.uiLastIndex + listDiff) : (this.uiLastIndex - listDiff);\n        this.uiFirstIndex = isScrollingDown ? (this.uiFirstIndex + listDiff) : (this.uiFirstIndex - listDiff);\n    }\n    onNormalScroll(listDiff, isScrollingDown) {\n        if (isScrollingDown) {\n            for (let i = 0; i < listDiff; i++) {\n                let index = ++this.uiLastIndex;\n                this.updateUI(this.topElement.nextElementSibling, index, this.bottomElement);\n                this.uiFirstIndex++;\n            }\n        }\n        else {\n            for (let i = 0; i < listDiff; i++) {\n                let index = --this.uiFirstIndex;\n                let target = this.topElement.nextSibling;\n                this.updateUI(this.bottomElement.previousElementSibling, index, target);\n                this.uiLastIndex--;\n            }\n        }\n    }\n    updateUiContent(element, index) {\n        let curViewDs = this.listViewInstance.curViewDS;\n        if (typeof this.listViewInstance.dataSource[0] === 'string' ||\n            typeof this.listViewInstance.dataSource[0] === 'number') {\n            element.dataset.uid = ListBase.generateId();\n            element.getElementsByClassName(classNames.listItemText)[0].innerHTML =\n                this.listViewInstance.curViewDS[index].toString();\n        }\n        else {\n            element.dataset.uid = curViewDs[index][this.listViewInstance.fields.id] ?\n                curViewDs[index][this.listViewInstance.fields.id].toString() : ListBase.generateId();\n            element.getElementsByClassName(classNames.listItemText)[0].innerHTML =\n                curViewDs[index][this.listViewInstance.fields.text].toString();\n        }\n        if (this.listViewInstance.showIcon) {\n            if (element.querySelector('.' + classNames.listIcon)) {\n                detach(element.querySelector('.' + classNames.listIcon));\n            }\n            if (this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]) {\n                let textContent = element.querySelector('.' + classNames.textContent);\n                let target = this.listViewInstance.createElement('div', {\n                    className: classNames.listIcon + ' ' +\n                        this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]\n                });\n                textContent.insertBefore(target, element.querySelector('.' + classNames.listItemText));\n            }\n        }\n        if (this.listViewInstance.showCheckBox && this.listViewInstance.fields.groupBy) {\n            if (!this.checkListWrapper) {\n                this.checkListWrapper = this.listViewInstance.curUL.querySelector('.' + classNames.checkboxWrapper).cloneNode(true);\n            }\n            let textContent = element.querySelector('.' + classNames.textContent);\n            if (this.listViewInstance.curViewDS[index].isHeader) {\n                if (element.querySelector('.' + classNames.checkboxWrapper)) {\n                    element.classList.remove(classNames.checklist);\n                    textContent.classList.remove(classNames.checkbox);\n                    detach(element.querySelector('.' + classNames.checkboxWrapper));\n                }\n            }\n            else {\n                if (!element.querySelector('.' + classNames.checkboxWrapper)) {\n                    element.classList.add(classNames.checklist);\n                    textContent.classList.add(classNames.checkbox);\n                    textContent.insertBefore(this.checkListWrapper.cloneNode(true), element.querySelector('.' + classNames.listItemText));\n                }\n            }\n        }\n    }\n    changeElementAttributes(element, index) {\n        element.classList.remove(classNames.disable);\n        if (this.uiIndices.disabledItemIndices.length && this.uiIndices.disabledItemIndices.indexOf(index) !== -1) {\n            element.classList.add(classNames.disable);\n        }\n        element.style.display = '';\n        if (this.uiIndices.hiddenItemIndices.length && this.uiIndices.hiddenItemIndices.indexOf(index) !== -1) {\n            element.style.display = 'none';\n        }\n        if (this.listViewInstance.showCheckBox) {\n            let checklistElement = element.querySelector('.' + classNames.checkboxWrapper);\n            element.classList.remove(classNames.selected);\n            element.classList.remove(classNames.focused);\n            if (checklistElement) {\n                checklistElement.removeAttribute('aria-checked');\n                checklistElement.firstElementChild.classList.remove(classNames.checked);\n            }\n            if (this.uiIndices.activeIndices.length && this.uiIndices.activeIndices.indexOf(index) !== -1 &&\n                !this.listViewInstance.curUL.querySelector(classNames.selected)) {\n                element.classList.add(classNames.selected);\n                checklistElement.firstElementChild.classList.add(classNames.checked);\n                checklistElement.setAttribute('aria-checked', 'true');\n                if (this.activeIndex === index) {\n                    element.classList.add(classNames.focused);\n                }\n            }\n        }\n        else {\n            element.classList.remove(classNames.selected);\n            element.removeAttribute('aria-selected');\n            if (!isNullOrUndefined(this.activeIndex) && this.activeIndex === index &&\n                !this.listViewInstance.curUL.querySelector(classNames.selected)) {\n                element.classList.add(classNames.selected);\n                element.setAttribute('aria-selected', 'true');\n            }\n        }\n        if (this.listViewInstance.fields.groupBy) {\n            if (this.listViewInstance.curViewDS[index].isHeader) {\n                if (element.classList.contains(classNames.listItem)) {\n                    element.classList.remove(classNames.listItem);\n                    element.setAttribute('role', 'group');\n                    element.classList.add(classNames.groupListItem);\n                }\n            }\n            else {\n                if (element.classList.contains(classNames.groupListItem)) {\n                    element.classList.remove(classNames.groupListItem);\n                    element.setAttribute('role', 'listitem');\n                    element.classList.add(classNames.listItem);\n                }\n            }\n        }\n    }\n    findDSAndIndexFromId(ds, fields) {\n        let resultJSON = {};\n        fields = this.listViewInstance.getElementUID(fields);\n        if (!isNullOrUndefined(fields)) {\n            ds.some((data, index) => {\n                if ((fields[this.listViewInstance.fields.id] &&\n                    fields[this.listViewInstance.fields.id].toString()\n                        === (data[this.listViewInstance.fields.id] && data[this.listViewInstance.fields.id].toString())) || fields === data) {\n                    resultJSON.index = index;\n                    resultJSON.data = data;\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            });\n        }\n        return resultJSON;\n    }\n    getSelectedItems() {\n        if (!isNullOrUndefined(this.activeIndex) || (this.listViewInstance.showCheckBox && this.uiIndices.activeIndices.length)) {\n            let dataCollection = [];\n            let textCollection = [];\n            if (typeof this.listViewInstance.dataSource[0] === 'string' ||\n                typeof this.listViewInstance.dataSource[0] === 'number') {\n                let curViewDS = this.listViewInstance.curViewDS;\n                if (this.listViewInstance.showCheckBox) {\n                    let indices = this.uiIndices.activeIndices;\n                    for (let i = 0; i < indices.length; i++) {\n                        dataCollection.push(curViewDS[indices[i]]);\n                    }\n                    return {\n                        text: dataCollection,\n                        data: dataCollection,\n                        index: this.uiIndices.activeIndices.map((index) => this.listViewInstance.dataSource.indexOf(curViewDS[index]))\n                    };\n                }\n                else {\n                    return {\n                        text: curViewDS[this.activeIndex],\n                        data: curViewDS[this.activeIndex],\n                        index: this.listViewInstance.dataSource.indexOf(curViewDS[this.activeIndex])\n                    };\n                }\n            }\n            else {\n                if (isBlazor() && this.listViewInstance.isServerRendered) {\n                    let scrollDiff = Math.round(this.listViewInstance.element.scrollTop /\n                        this.listViewInstance.liElementHeight) - 2;\n                    if (scrollDiff < 0) {\n                        scrollDiff = 0;\n                    }\n                    this.activeIndex += scrollDiff;\n                }\n                let curViewDS = this.listViewInstance.curViewDS;\n                let text = this.listViewInstance.fields.text;\n                if (this.listViewInstance.showCheckBox) {\n                    let indexArray = this.uiIndices.activeIndices;\n                    for (let i = 0; i < indexArray.length; i++) {\n                        textCollection.push(curViewDS[indexArray[i]][text]);\n                        dataCollection.push(curViewDS[indexArray[i]]);\n                    }\n                    let dataSource = this.listViewInstance.dataSource instanceof DataManager\n                        ? curViewDS : this.listViewInstance.dataSource;\n                    return {\n                        text: textCollection,\n                        data: dataCollection,\n                        index: this.uiIndices.activeIndices.map((index) => dataSource.indexOf(curViewDS[index]))\n                    };\n                }\n                else {\n                    let dataSource = this.listViewInstance.dataSource instanceof DataManager\n                        ? curViewDS : this.listViewInstance.dataSource;\n                    return {\n                        text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],\n                        data: curViewDS[this.activeIndex],\n                        index: dataSource.indexOf(curViewDS[this.activeIndex])\n                    };\n                }\n            }\n        }\n        else {\n            return undefined;\n        }\n    }\n    selectItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (Object.keys(resutJSON).length) {\n            let isSelected = this.activeIndex === resutJSON.index;\n            let isChecked;\n            this.activeIndex = resutJSON.index;\n            if (this.listViewInstance.showCheckBox) {\n                if (this.uiIndices.activeIndices.indexOf(resutJSON.index) === -1) {\n                    isChecked = true;\n                    this.uiIndices.activeIndices.push(resutJSON.index);\n                }\n                else {\n                    isChecked = false;\n                    this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(resutJSON.index), 1);\n                }\n                if (this.listViewInstance.curUL.querySelector('.' + classNames.focused)) {\n                    this.listViewInstance.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);\n                }\n            }\n            if (this.listViewInstance.getLiFromObjOrElement(obj)) {\n                if (this.listViewInstance.showCheckBox) {\n                    this.listViewInstance.setCheckboxLI(this.listViewInstance.getLiFromObjOrElement(obj));\n                }\n                else {\n                    this.listViewInstance.setSelectLI(this.listViewInstance.getLiFromObjOrElement(obj));\n                }\n            }\n            else {\n                let eventArgs;\n                if (typeof this.listViewInstance.dataSource[0] === 'string' ||\n                    typeof this.listViewInstance.dataSource[0] === 'number') {\n                    eventArgs = {\n                        text: this.listViewInstance.curViewDS[this.activeIndex],\n                        data: this.listViewInstance.curViewDS[this.activeIndex],\n                        index: this.activeIndex\n                    };\n                }\n                else {\n                    let curViewDS = this.listViewInstance.curViewDS;\n                    eventArgs = {\n                        text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],\n                        data: curViewDS[this.activeIndex],\n                        index: this.activeIndex\n                    };\n                }\n                if (this.listViewInstance.showCheckBox) {\n                    eventArgs.isChecked = isChecked;\n                    this.listViewInstance.trigger('select', eventArgs);\n                }\n                else if (!isSelected) {\n                    this.listViewInstance.removeSelect();\n                    this.listViewInstance.trigger('select', eventArgs);\n                }\n            }\n        }\n        else if (isNullOrUndefined(obj) && !this.listViewInstance.showCheckBox) {\n            this.listViewInstance.removeSelect();\n            this.activeIndex = undefined;\n        }\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            // tslint:disable-next-line:no-any\n            let elementId = resutJSON.data[this.listViewInstance.fields.id];\n            // tslint:enable-next-line:no-any\n            if (this.listViewInstance.showCheckBox) {\n                if (!this.listViewInstance.previousSelectedItems.includes(elementId)) {\n                    this.listViewInstance.previousSelectedItems.push(elementId);\n                }\n                else {\n                    let indexPosition = this.listViewInstance.previousSelectedItems.indexOf(elementId);\n                    if (indexPosition > -1) {\n                        this.listViewInstance.previousSelectedItems.splice(indexPosition, 1);\n                    }\n                }\n            }\n            else {\n                this.listViewInstance.previousSelectedItems[0] = elementId;\n            }\n            this.listViewInstance.removeActiveClass();\n        }\n    }\n    enableItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            let itemId = resutJSON.data[this.listViewInstance.fields.id];\n            if (!this.listViewInstance.enabledItems.includes(itemId)) {\n                this.listViewInstance.enabledItems.push(itemId);\n                this.listViewInstance.removeActiveClass();\n            }\n            if (this.listViewInstance.disabledItems.includes(itemId)) {\n                let indexPosition = this.listViewInstance.disabledItems.indexOf(itemId);\n                if (indexPosition > -1) {\n                    this.listViewInstance.disabledItems.splice(indexPosition, 1);\n                }\n            }\n        }\n        else {\n            if (Object.keys(resutJSON).length) {\n                this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(resutJSON.index), 1);\n            }\n        }\n    }\n    disableItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            let liElementId = resutJSON.data[this.listViewInstance.fields.id];\n            if (!this.listViewInstance.disabledItems.includes(liElementId)) {\n                this.listViewInstance.disabledItems.push(liElementId);\n                this.listViewInstance.removeActiveClass();\n            }\n            if (this.listViewInstance.enabledItems.includes(liElementId)) {\n                let indexPosition = this.listViewInstance.enabledItems.indexOf(liElementId);\n                if (indexPosition > -1) {\n                    this.listViewInstance.enabledItems.splice(indexPosition, 1);\n                }\n            }\n        }\n        else {\n            if (Object.keys(resutJSON).length && this.uiIndices.disabledItemIndices.indexOf(resutJSON.index) === -1) {\n                this.uiIndices.disabledItemIndices.push(resutJSON.index);\n            }\n        }\n    }\n    showItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            // tslint:disable-next-line:no-any\n            let hiddenElementId = resutJSON.data[this.listViewInstance.fields.id];\n            // tslint:enable-next-line:no-any\n            if (this.listViewInstance.hiddenItems.includes(hiddenElementId)) {\n                let indexPosition = this.listViewInstance.hiddenItems.indexOf(hiddenElementId);\n                if (indexPosition > -1) {\n                    this.listViewInstance.previousSelectedItems.splice(indexPosition, 1);\n                    this.listViewInstance.removeActiveClass();\n                }\n            }\n        }\n        else {\n            if (Object.keys(resutJSON).length) {\n                this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index), 1);\n            }\n        }\n    }\n    hideItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            // tslint:disable-next-line:no-any\n            let elementId = resutJSON.data[this.listViewInstance.fields.id];\n            // tslint:enable-next-line:no-any\n            if (!this.listViewInstance.hiddenItems.includes(elementId)) {\n                this.listViewInstance.hiddenItems.push(elementId);\n                this.listViewInstance.removeActiveClass();\n            }\n        }\n        else {\n            if (Object.keys(resutJSON).length && this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index) === -1) {\n                this.uiIndices.hiddenItemIndices.push(resutJSON.index);\n            }\n        }\n    }\n    removeItem(obj) {\n        let dataSource;\n        const curViewDS = this.listViewInstance.curViewDS;\n        let resutJSON = this.findDSAndIndexFromId(curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            if (resutJSON.index !== undefined) {\n                // tslint:disable\n                this.listViewInstance.interopAdaptor.invokeMethodAsync('RemoveItemPosition', resutJSON.index);\n                // tslint:enable\n            }\n        }\n        if (Object.keys(resutJSON).length) {\n            dataSource = resutJSON.data;\n            if (curViewDS[resutJSON.index - 1] &&\n                curViewDS[resutJSON.index - 1].isHeader &&\n                (curViewDS[resutJSON.index - 1])\n                    .items.length === 1) {\n                this.removeUiItem(resutJSON.index - 1);\n                this.removeUiItem(resutJSON.index - 1);\n            }\n            else {\n                if (!(isBlazor() && this.listViewInstance.isServerRendered)) {\n                    this.removeUiItem(resutJSON.index);\n                }\n            }\n        }\n        const listDataSource = this.listViewInstance.dataSource instanceof DataManager\n            ? this.listViewInstance.localData : this.listViewInstance.dataSource;\n        let index = listDataSource.indexOf(dataSource);\n        if (index !== -1) {\n            listDataSource.splice(index, 1);\n            this.listViewInstance.setViewDataSource(listDataSource);\n        }\n        // recollect all the list item into collection\n        this.listViewInstance.liCollection =\n            this.listViewInstance.curUL.querySelectorAll('li');\n    }\n    setCheckboxLI(li, e) {\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            this.uiFirstIndex = Math.round(this.listViewInstance.element.scrollTop / 36) - 4;\n            if (this.uiFirstIndex < 0) {\n                this.uiFirstIndex = 0;\n            }\n        }\n        let index = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n        this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n        if (li.classList.contains(classNames.selected)) {\n            if (this.uiIndices.activeIndices.indexOf(index) === -1) {\n                this.uiIndices.activeIndices.push(index);\n            }\n        }\n        else {\n            this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);\n        }\n    }\n    setSelectLI(li, e) {\n        this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n    }\n    checkedItem(checked) {\n        if (checked) {\n            this.uiIndices.activeIndices = [];\n            this.activeIndex = undefined;\n            let data = this.listViewInstance.curViewDS;\n            for (let index = 0; index < data.length; index++) {\n                if (!data[index].isHeader) {\n                    this.uiIndices.activeIndices.push(index);\n                }\n            }\n        }\n        else {\n            this.activeIndex = undefined;\n            this.uiIndices.activeIndices = [];\n        }\n    }\n    addUiItem(index) {\n        // virtually new add list item based on the scollbar position\n        // if the scroll bar is at the top, just pretend the new item has been added since no UI\n        // change is required for the item that has been added at last but when scroll bar is at the bottom\n        // just detach top and inject into bottom to mimic new item is added\n        let curViewDs = this.listViewInstance.curViewDS;\n        this.changeUiIndices(index, true);\n        if (this.activeIndex && this.activeIndex >= index) {\n            this.activeIndex++;\n        }\n        if (this.listViewInstance.showCheckBox &&\n            curViewDs[index][this.listViewInstance.fields.isChecked]) {\n            this.uiIndices.activeIndices.push(index);\n        }\n        if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {\n            this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';\n        }\n        if (parseFloat(this.bottomElement.style.height)) {\n            let liItem = this.listViewInstance.curUL.lastElementChild.previousSibling;\n            let target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) ||\n                this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);\n            if (target) {\n                this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';\n                this.updateUI(liItem, index, target);\n            }\n        }\n        else {\n            let liItem = this.listViewInstance.curUL.firstElementChild.nextSibling;\n            let target;\n            if ((Object.keys(this.listViewInstance.curViewDS).length - 1) === index) {\n                target = this.listViewInstance.curUL.lastElementChild;\n            }\n            else {\n                target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) ||\n                    this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);\n            }\n            this.topElement.style.height = parseFloat(this.topElement.style.height) + this.listItemHeight + 'px';\n            this.uiFirstIndex++;\n            this.uiLastIndex++;\n            if (target) {\n                this.updateUI(liItem, index, target);\n                this.listViewInstance.isWindow ? window.scrollTo(0, (pageYOffset + this.listItemHeight)) :\n                    this.listViewInstance.element.scrollTop += this.listItemHeight;\n            }\n        }\n        this.totalHeight += this.listItemHeight;\n        this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);\n    }\n    removeUiItem(index) {\n        this.totalHeight -= this.listItemHeight;\n        let curViewDS = this.listViewInstance.curViewDS[index];\n        let liItem = this.listViewInstance.getLiFromObjOrElement(curViewDS);\n        this.listViewInstance.curViewDS.splice(index, 1);\n        if (this.activeIndex && this.activeIndex >= index) {\n            this.activeIndex--;\n        }\n        if (liItem) {\n            if (this.domItemCount > Object.keys(this.listViewInstance.curViewDS).length) {\n                detach(liItem);\n                this.domItemCount--;\n                this.uiLastIndex--;\n                this.totalHeight = 0;\n            }\n            else {\n                if (liItem.classList.contains(classNames.disable)) {\n                    liItem.classList.remove(classNames.disable);\n                    this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(index), 1);\n                }\n                if (liItem.style.display === 'none') {\n                    liItem.style.display = '';\n                    this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(index), 1);\n                }\n                if (this.listViewInstance.showCheckBox && liItem.classList.contains(classNames.selected)) {\n                    this.listViewInstance.removeSelect();\n                    this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);\n                    let checklistElement = liItem.querySelector('.' + classNames.checkboxWrapper);\n                    checklistElement.removeAttribute('aria-checked');\n                    checklistElement.firstElementChild.classList.remove(classNames.checked);\n                    if (liItem.classList.contains(classNames.focused)) {\n                        liItem.classList.remove(classNames.focused);\n                        this.activeIndex = undefined;\n                    }\n                }\n                else if (liItem.classList.contains(classNames.selected)) {\n                    this.listViewInstance.removeSelect();\n                    this.activeIndex = undefined;\n                }\n                if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {\n                    this.updateUI(liItem, this.uiLastIndex, this.bottomElement);\n                }\n                else if (parseFloat(this.bottomElement.style.height)) {\n                    this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) - this.listItemHeight + 'px';\n                    this.updateUI(liItem, this.uiLastIndex, this.bottomElement);\n                }\n                else {\n                    this.topElement.style.height = parseFloat(this.topElement.style.height) - this.listItemHeight + 'px';\n                    this.updateUI(liItem, (this.uiFirstIndex - 1), this.topElement.nextSibling);\n                    this.uiLastIndex--;\n                    this.uiFirstIndex--;\n                }\n            }\n        }\n        this.changeUiIndices(index, false);\n        this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);\n    }\n    changeUiIndices(index, increment) {\n        let keys = Object.keys(this.uiIndices);\n        for (let ind = 0; ind < keys.length; ind++) {\n            this.uiIndices[keys[ind]] = this.uiIndices[keys[ind]].map((i) => {\n                if (i >= index) {\n                    return increment ? ++i : --i;\n                }\n                else {\n                    return i;\n                }\n            });\n        }\n    }\n    addItem(data, fields, dataSource) {\n        for (let i = 0; i < data.length; i++) {\n            let currentItem = data[i];\n            // push the given data to main data array\n            dataSource.push(currentItem);\n            // recalculate all the group data or other datasource related things\n            this.listViewInstance.setViewDataSource(dataSource);\n            // render list items for first time due to no datasource present earlier\n            if (!this.domItemCount) {\n                // fresh rendering for first time\n                if ((this.listViewInstance.template || this.listViewInstance.groupTemplate) && !this.isNgTemplate()) {\n                    this.listViewInstance.listBaseOption.template = null;\n                    this.listViewInstance.listBaseOption.groupTemplate = null;\n                    this.listViewInstance.listBaseOption.itemCreated = this.createUIItem.bind(this);\n                }\n                this.uiVirtualization();\n                // when expected expected DOM count doesn't meet the condition we need to create and inject new item into DOM\n            }\n            else if (this.domItemCount < this.expectedDomItemCount) {\n                let ds = this.listViewInstance.findItemFromDS(dataSource, fields);\n                if (ds instanceof Array) {\n                    if (this.listViewInstance.ulElement) {\n                        let index = this.listViewInstance.curViewDS.indexOf(currentItem);\n                        // inject new list item into DOM\n                        this.createAndInjectNewItem(currentItem, index);\n                        // check for group header item\n                        let curViewDS = this.listViewInstance.curViewDS[index - 1];\n                        if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {\n                            // target group item index in datasource\n                            --index;\n                            // inject new group header into DOM for previously created list item\n                            this.createAndInjectNewItem(curViewDS, index);\n                        }\n                    }\n                    // recollect all the list item into collection\n                    this.listViewInstance.liCollection =\n                        this.listViewInstance.curUL.querySelectorAll('li');\n                }\n            }\n            else {\n                let index = this.listViewInstance.curViewDS.indexOf(currentItem);\n                // virtually new add list item based on the scollbar position\n                this.addUiItem(index);\n                // check for group header item needs to be added\n                let curViewDS = this.listViewInstance.curViewDS[index - 1];\n                if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {\n                    this.addUiItem(index - 1);\n                }\n            }\n        }\n    }\n    createAndInjectNewItem(itemData, index) {\n        // generate li item for given datasource\n        let target;\n        let li = ListBase.createListItemFromJson(this.listViewInstance.createElement, [itemData], this.listViewInstance.listBaseOption);\n        // check for target element whether to insert before last item or group item\n        if ((Object.keys(this.listViewInstance.curViewDS).length - 1) === index) {\n            target = this.listViewInstance.curUL.lastElementChild;\n        }\n        else {\n            // target group header's first child item to append its header\n            target = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 1]) ||\n                this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 2]);\n        }\n        // insert before the target element\n        this.listViewInstance.ulElement.insertBefore(li[0], target);\n        // increment internal DOM count, last index count for new element\n        this.domItemCount++;\n        if (this.bottomElementHeight <= 0) {\n            this.uiLastIndex++;\n        }\n        // recalculate the current item height, to avoid jumpy scroller\n        this.refreshItemHeight();\n    }\n    createUIItem(args) {\n        let virtualTemplate = this.listViewInstance.template;\n        let template = this.listViewInstance.createElement('div');\n        let commonTemplate = '<div class=\"e-text-content\" role=\"presentation\"> ' +\n            '<span class=\"e-list-text\"> ${' + this.listViewInstance.fields.text + '} </span></div>';\n        if (this.listViewInstance.showCheckBox) {\n            // tslint:disable-next-line:no-any\n            this.listViewInstance.renderCheckbox(args);\n            // tslint:enable-next-line:no-any\n            if ((!isNullOrUndefined(this.listViewInstance.virtualCheckBox)) &&\n                (!isNullOrUndefined(this.listViewInstance.virtualCheckBox.outerHTML))) {\n                let div = document.createElement('div');\n                div.innerHTML = this.listViewInstance.template || commonTemplate;\n                div.children[0].classList.add('e-checkbox');\n                this.listViewInstance.checkBoxPosition === 'Left' ? div.children[0].classList.add('e-checkbox-left') :\n                    div.children[0].classList.add('e-checkbox-right');\n                if (this.listViewInstance.checkBoxPosition === 'Left') {\n                    div.children[0].insertBefore(this.listViewInstance.virtualCheckBox, div.childNodes[0].children[0]);\n                }\n                else {\n                    div.children[0].appendChild(this.listViewInstance.virtualCheckBox);\n                }\n                this.listViewInstance.template = div.innerHTML;\n            }\n            template.innerHTML = this.listViewInstance.template;\n            this.listViewInstance.template = virtualTemplate;\n        }\n        else {\n            template.innerHTML = this.listViewInstance.template || commonTemplate;\n        }\n        // tslint:disable-next-line:no-any\n        let templateElements = template.getElementsByTagName('*');\n        let groupTemplate = this.listViewInstance.createElement('div');\n        if (this.listViewInstance.fields.groupBy) {\n            groupTemplate.innerHTML = this.listViewInstance.groupTemplate || commonTemplate;\n        }\n        // tslint:disable-next-line:no-any\n        let groupTemplateElements = groupTemplate.getElementsByTagName('*');\n        if (args.curData.isHeader) {\n            this.headerData = args.curData;\n        }\n        this.templateData = args.curData.isHeader ? args.curData.items[0] :\n            args.curData;\n        args.item.innerHTML = '';\n        args.item.context = { data: args.curData, nodes: { flatTemplateNodes: [], groupTemplateNodes: [] } };\n        for (let i = 0; i < templateElements.length; i++) {\n            this.compileTemplate(templateElements[i], args.item, false);\n        }\n        for (let i = 0; i < groupTemplateElements.length; i++) {\n            this.compileTemplate(groupTemplateElements[i], args.item, true);\n        }\n        args.item.context.template = args.curData.isHeader ? template.firstElementChild :\n            groupTemplate.firstElementChild;\n        args.item.context.type = args.curData.isHeader ? 'flatList' : 'groupList';\n        let element = args.curData.isHeader ? groupTemplate : template;\n        args.item.insertBefore(element.firstElementChild, null);\n    }\n    compileTemplate(element, item, isHeader) {\n        this.textProperty(element, item, isHeader);\n        this.classProperty(element, item, isHeader);\n        this.attributeProperty(element, item, isHeader);\n    }\n    onChange(newData, listElement) {\n        listElement.context.data = newData;\n        let groupTemplateNodes = listElement.context.nodes.groupTemplateNodes;\n        let flatTemplateNodes = listElement.context.nodes.flatTemplateNodes;\n        if (!isNullOrUndefined(newData.isHeader) && newData.isHeader && listElement.context.type === 'groupList') {\n            let element = listElement.firstElementChild;\n            detach(listElement.firstElementChild);\n            listElement.insertBefore(listElement.context.template, null);\n            listElement.context.template = element;\n            listElement.context.type = 'flatList';\n            for (let i = 0; i < groupTemplateNodes.length; i++) {\n                groupTemplateNodes[i].onChange(newData);\n            }\n        }\n        else if (!newData.isHeader && listElement.context.type === 'flatList') {\n            let element = listElement.firstElementChild;\n            detach(listElement.firstElementChild);\n            listElement.insertBefore(listElement.context.template, null);\n            listElement.context.template = element;\n            listElement.context.type = 'groupList';\n            for (let i = 0; i < flatTemplateNodes.length; i++) {\n                flatTemplateNodes[i].onChange(newData);\n            }\n        }\n        else if (!newData.isHeader) {\n            for (let i = 0; i < flatTemplateNodes.length; i++) {\n                flatTemplateNodes[i].onChange(newData);\n            }\n        }\n        else {\n            for (let i = 0; i < groupTemplateNodes.length; i++) {\n                groupTemplateNodes[i].onChange(newData);\n            }\n        }\n    }\n    updateContextData(listElement, node, isHeader) {\n        if (isHeader) {\n            listElement.context.nodes.groupTemplateNodes.push(node);\n        }\n        else {\n            listElement.context.nodes.flatTemplateNodes.push(node);\n        }\n    }\n    classProperty(element, listElement, isHeader) {\n        let regex = new RegExp('\\\\${([^}]*)}', 'g');\n        let resultantOutput = [];\n        let regexMatch;\n        while (regexMatch !== null) {\n            let match = regex.exec(element.className);\n            resultantOutput.push(match);\n            regexMatch = match;\n            if (regexMatch === null) {\n                resultantOutput.pop();\n            }\n        }\n        if (resultantOutput && resultantOutput.length) {\n            for (let i = 0; i < resultantOutput.length; i++) {\n                let classNameMatch = resultantOutput[i];\n                let classFunction;\n                if (classNameMatch[1].indexOf('?') !== -1 && classNameMatch[1].indexOf(':') !== -1) {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    classFunction = new Function('data', 'return ' + classNameMatch[1].replace(/\\$/g, 'data.'));\n                }\n                else {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    classFunction = new Function('data', 'return ' + 'data.' + classNameMatch[1]);\n                }\n                let subNode = {};\n                if (isHeader) {\n                    subNode.bindedvalue = classFunction(this.headerData);\n                }\n                else {\n                    subNode.bindedvalue = classFunction(this.templateData);\n                }\n                subNode.onChange = (value) => {\n                    if (subNode.bindedvalue) {\n                        removeClass([element], subNode.bindedvalue.split(' ').filter((css) => css));\n                    }\n                    let newCss = classFunction(value);\n                    if (newCss) {\n                        addClass([element], (newCss).split(' ').filter((css) => css));\n                    }\n                    subNode.bindedvalue = newCss;\n                };\n                let className = classNameMatch[0].split(' ');\n                for (let i = 0; i < className.length; i++) {\n                    element.classList.remove(className[i]);\n                }\n                if (subNode.bindedvalue) {\n                    addClass([element], subNode.bindedvalue.split(' ').filter((css) => css));\n                }\n                this.updateContextData(listElement, subNode, isHeader);\n            }\n        }\n    }\n    attributeProperty(element, listElement, isHeader) {\n        let attributeNames = [];\n        for (let i = 0; i < element.attributes.length; i++) {\n            attributeNames.push(element.attributes[i].nodeName);\n        }\n        if (attributeNames.indexOf('class') !== -1) {\n            attributeNames.splice(attributeNames.indexOf('class'), 1);\n        }\n        for (let i = 0; i < attributeNames.length; i++) {\n            let attributeName = attributeNames[i];\n            let attrNameMatch = new RegExp('\\\\${([^}]*)}', 'g').exec(attributeName) || [];\n            let attrValueMatch = new RegExp('\\\\${([^}]*)}', 'g').exec(element.getAttribute(attributeName))\n                || [];\n            let attributeNameFunction;\n            let attributeValueFunction;\n            if (attrNameMatch.length || attrValueMatch.length) {\n                if (attrNameMatch[1]) {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    attributeNameFunction = new Function('data', 'return ' + 'data.' + attrNameMatch[1]);\n                }\n                if (attrValueMatch[1]) {\n                    if (attrValueMatch[1].indexOf('?') !== -1 && attrValueMatch[1].indexOf(':') !== -1) {\n                        // tslint:disable-next-line:no-function-constructor-with-string-args\n                        attributeValueFunction = new Function('data', 'return ' + attrValueMatch[1].replace(/\\$/g, 'data.'));\n                    }\n                    else {\n                        // tslint:disable-next-line:no-function-constructor-with-string-args\n                        attributeValueFunction = new Function('data', 'return ' + 'data.' + attrValueMatch[1]);\n                    }\n                }\n                let subNode = {};\n                if (isHeader) {\n                    subNode.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(this.headerData),\n                        attrValueMatch[1] === undefined ? undefined : attributeValueFunction(this.headerData)];\n                }\n                else {\n                    subNode.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(this.templateData),\n                        attrValueMatch[1] === undefined ? undefined : attributeValueFunction(this.templateData)];\n                }\n                subNode.attrName = subNode.bindedvalue[0] === undefined ?\n                    attributeName : subNode.bindedvalue[0];\n                subNode.onChange = (value) => {\n                    let bindedvalue = subNode.bindedvalue[1] === undefined ?\n                        element.getAttribute(subNode.attrName) : attributeValueFunction(value);\n                    element.removeAttribute(subNode.attrName);\n                    subNode.attrName = subNode.bindedvalue[0] === undefined ? subNode.attrName : attributeNameFunction(value);\n                    element.setAttribute(subNode.attrName, bindedvalue);\n                    subNode.bindedvalue = [subNode.bindedvalue[0] === undefined ? undefined : attributeNameFunction(value),\n                        subNode.bindedvalue[1] === undefined ? undefined : attributeValueFunction(value)];\n                };\n                let attributeValue = subNode.bindedvalue[1] === undefined ? element.getAttribute(attributeName) :\n                    subNode.bindedvalue[1];\n                element.removeAttribute(attributeName);\n                element.setAttribute(subNode.attrName, attributeValue);\n                this.updateContextData(listElement, subNode, isHeader);\n            }\n        }\n    }\n    textProperty(element, listElement, isHeader) {\n        let regex = new RegExp('\\\\${([^}]*)}', 'g');\n        let resultantOutput = [];\n        let regexMatch;\n        while (regexMatch !== null) {\n            let match = regex.exec(element.innerText);\n            resultantOutput.push(match);\n            regexMatch = match;\n            if (regexMatch === null) {\n                resultantOutput.pop();\n            }\n        }\n        let isChildHasTextContent = Array.prototype.some.call(element.children, (element) => {\n            if (new RegExp('\\\\${([^}]*)}', 'g').exec(element.innerText)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        if (resultantOutput && resultantOutput.length && !isChildHasTextContent) {\n            for (let i = 0; i < resultantOutput.length; i++) {\n                let textPropertyMatch = resultantOutput[i];\n                let subNode = {};\n                let textFunction;\n                if (textPropertyMatch[1].indexOf('?') !== -1 && textPropertyMatch[1].indexOf(':') !== -1) {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    textFunction = new Function('data', 'return ' + textPropertyMatch[1].replace(/\\$/g, 'data.'));\n                }\n                else {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    textFunction = new Function('data', 'return ' + 'data.' + textPropertyMatch[1]);\n                }\n                if (isHeader) {\n                    subNode.bindedvalue = textFunction(this.headerData);\n                }\n                else {\n                    subNode.bindedvalue = textFunction(this.templateData);\n                }\n                subNode.onChange = (value) => {\n                    element.innerText = element.innerText.replace(subNode.bindedvalue, textFunction(value));\n                    subNode.bindedvalue = textFunction(value);\n                };\n                element.innerText = element.innerText.replace(textPropertyMatch[0], subNode.bindedvalue);\n                this.updateContextData(listElement, subNode, isHeader);\n            }\n        }\n    }\n    reRenderUiVirtualization() {\n        this.wireScrollEvent(true);\n        if (this.listViewInstance.contentContainer) {\n            detach(this.listViewInstance.contentContainer);\n        }\n        this.listViewInstance.preRender();\n        // resetting the dom count to 0, to avoid edge case of dataSource suddenly becoming zero\n        // and then manually adding item using addItem API\n        this.domItemCount = 0;\n        this.listViewInstance.header();\n        this.listViewInstance.setLocalData();\n    }\n    updateUI(element, index, targetElement) {\n        let onChange = this.isNgTemplate() ? this.onNgChange : this.onChange;\n        if (this.listViewInstance.template || this.listViewInstance.groupTemplate) {\n            let curViewDS = this.listViewInstance.curViewDS[index];\n            element.dataset.uid = curViewDS[this.listViewInstance.fields.id] ?\n                curViewDS[this.listViewInstance.fields.id].toString() : ListBase.generateId();\n            onChange(curViewDS, element, this);\n        }\n        else {\n            this.updateUiContent(element, index);\n        }\n        this.changeElementAttributes(element, index);\n        if (targetElement) {\n            this.listViewInstance.ulElement.insertBefore(element, targetElement);\n        }\n    }\n    onNgChange(newData, listElement, virtualThis) {\n        // compile given target element with template for new data\n        let templateCompiler = compile(virtualThis.listViewInstance.template);\n        let resultElement = templateCompiler(newData);\n        while (listElement.lastChild) {\n            listElement.removeChild(listElement.lastChild);\n        }\n        listElement.appendChild(resultElement[0]);\n    }\n    getModuleName() {\n        return 'virtualization';\n    }\n    destroy() {\n        this.wireScrollEvent(true);\n    }\n}\n\n/**\n * Listview Component\n */\n\n/**\n * Listview Component\n */\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Sortable_1;\n/**\n * Sortable Module provides support to enable sortable functionality in Dom Elements.\n * ```html\n * <div id=\"sortable\">\n *   <div>Item 1</div>\n *   <div>Item 2</div>\n *   <div>Item 3</div>\n *   <div>Item 4</div>\n *   <div>Item 5</div>\n * </div>\n * ```\n * ```typescript\n *   let ele: HTMLElement = document.getElementById('sortable');\n *   let sortObj: Sortable = new Sortable(ele, {});\n * ```\n */\nlet Sortable = Sortable_1 = class Sortable extends Base {\n    constructor(element, options) {\n        super(options, element);\n        this.getHelper = (e) => {\n            let target = this.getSortableElement(e.sender.target);\n            if (!this.isValidTarget(target, this)) {\n                return false;\n            }\n            let element;\n            if (this.helper) {\n                element = this.helper({ sender: target, element: e.element });\n            }\n            else {\n                element = target.cloneNode(true);\n                element.style.width = `${target.offsetWidth}px`;\n                element.style.height = `${target.offsetHeight}px`;\n            }\n            addClass([element], ['e-sortableclone']);\n            document.body.appendChild(element);\n            return element;\n        };\n        this.onDrag = (e) => {\n            this.trigger('drag', { event: e.event, element: this.element, target: e.target });\n            let newInst = this.getSortableInstance(e.target);\n            let target = this.getSortableElement(e.target, newInst);\n            if ((this.isValidTarget(target, newInst) || e.target.className.indexOf('e-list-group-item') > -1) && this.curTarget !== target &&\n                (newInst.placeHolderElement ? newInst.placeHolderElement !== e.target : true)) {\n                if (e.target.className.indexOf('e-list-group-item') > -1) {\n                    target = e.target;\n                }\n                this.curTarget = target;\n                let oldIdx = this.getIndex(newInst.placeHolderElement, newInst);\n                oldIdx = isNullOrUndefined(oldIdx) ? this.getIndex(this.target) :\n                    this.getIndex(target, newInst) < oldIdx || !oldIdx ? oldIdx : oldIdx - 1;\n                newInst.placeHolderElement = this.getPlaceHolder(target, newInst);\n                let newIdx = this.getIndex(target, newInst);\n                let idx = newInst.element !== this.element ? newIdx : oldIdx < newIdx ? newIdx + 1 : newIdx;\n                if (newInst.placeHolderElement) {\n                    if (e.target.className.indexOf('e-list-group-item') > -1) {\n                        newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);\n                    }\n                    else if (newInst.element !== this.element && idx === newInst.element.childElementCount - 1) {\n                        newInst.element.appendChild(newInst.placeHolderElement);\n                    }\n                    else {\n                        newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[idx]);\n                    }\n                    this.refreshDisabled(oldIdx, newIdx, newInst);\n                }\n                else {\n                    this.updateItemClass(newInst);\n                    newInst.element.insertBefore(this.target, newInst.element.children[idx]);\n                    this.refreshDisabled(oldIdx, newIdx, newInst);\n                    this.curTarget = this.target;\n                    this.trigger('drop', { droppedElement: this.target, element: newInst.element, previousIndex: oldIdx, currentIndex: newIdx,\n                        target: e.target, helper: document.getElementsByClassName('e-sortableclone')[0], event: e.event, scope: this.scope });\n                }\n            }\n            newInst = this.getSortableInstance(this.curTarget);\n            if (isNullOrUndefined(target) && e.target !== newInst.placeHolderElement) {\n                if (this.isPlaceHolderPresent(newInst)) {\n                    this.removePlaceHolder(newInst);\n                }\n            }\n            else {\n                let placeHolders = [].slice.call(document.getElementsByClassName('e-sortable-placeholder'));\n                let inst;\n                placeHolders.forEach((placeHolder) => {\n                    inst = this.getSortableInstance(placeHolder);\n                    if (inst.element && inst !== newInst) {\n                        this.removePlaceHolder(inst);\n                    }\n                });\n            }\n        };\n        this.onDragStart = (e) => {\n            this.target = this.getSortableElement(e.target);\n            let cancelDrag = false;\n            this.target.classList.add('e-grabbed');\n            this.curTarget = this.target;\n            e.helper = document.getElementsByClassName('e-sortableclone')[0];\n            let args = { cancel: false, element: this.element, target: this.target };\n            this.trigger('beforeDragStart', args, (observedArgs) => {\n                if (observedArgs.cancel) {\n                    cancelDrag = observedArgs.cancel;\n                    this.onDragStop(e);\n                }\n            });\n            if (cancelDrag) {\n                return;\n            }\n            if (isBlazor) {\n                this.trigger('dragStart', { event: e.event, element: this.element, target: this.target,\n                    bindEvents: e.bindEvents, dragElement: e.dragElement });\n            }\n            else {\n                this.trigger('dragStart', { event: e.event, element: this.element, target: this.target });\n            }\n        };\n        this.onDragStop = (e) => {\n            let dropInst = this.getSortableInstance(this.curTarget);\n            let prevIdx;\n            let curIdx;\n            let handled;\n            prevIdx = this.getIndex(this.target);\n            if (this.isPlaceHolderPresent(dropInst)) {\n                let curIdx = this.getIndex(dropInst.placeHolderElement, dropInst);\n                let args = { previousIndex: prevIdx, currentIndex: curIdx, target: e.target, droppedElement: this.target,\n                    helper: e.helper, cancel: false, handled: false };\n                this.trigger('beforeDrop', args, (observedArgs) => {\n                    if (!observedArgs.cancel) {\n                        handled = observedArgs.handled;\n                        this.updateItemClass(dropInst);\n                        if (observedArgs.handled) {\n                            let ele = this.target.cloneNode(true);\n                            this.target.classList.remove('e-grabbed');\n                            this.target = ele;\n                        }\n                        dropInst.element.insertBefore(this.target, dropInst.placeHolderElement);\n                        let curIdx = this.getIndex(this.target, dropInst);\n                        prevIdx = this === dropInst && (prevIdx - curIdx) > 1 ? prevIdx - 1 : prevIdx;\n                        this.trigger('drop', { event: e.event, element: dropInst.element, previousIndex: prevIdx, currentIndex: curIdx,\n                            target: e.target, helper: e.helper, droppedElement: this.target, scopeName: this.scope, handled: handled });\n                    }\n                    remove(dropInst.placeHolderElement);\n                });\n            }\n            dropInst = this.getSortableInstance(e.target);\n            curIdx = dropInst.element.childElementCount;\n            prevIdx = this.getIndex(this.target);\n            if (dropInst.element === e.target) {\n                let beforeDropArgs = { previousIndex: prevIdx, currentIndex: curIdx, target: e.target,\n                    droppedElement: this.target, helper: e.helper, cancel: false };\n                this.trigger('beforeDrop', beforeDropArgs, (observedArgs) => {\n                    if (!observedArgs.cancel) {\n                        this.updateItemClass(dropInst);\n                        dropInst.element.appendChild(this.target);\n                        this.trigger('drop', { event: e.event, element: dropInst.element, previousIndex: prevIdx, currentIndex: curIdx,\n                            target: e.target, helper: e.helper, droppedElement: this.target, scopeName: this.scope });\n                    }\n                });\n            }\n            this.target.classList.remove('e-grabbed');\n            this.target = null;\n            this.curTarget = null;\n            remove(e.helper);\n            getComponent(this.element, Draggable).intDestroy(e.event);\n        };\n        this.bind();\n    }\n    bind() {\n        if (!this.element.id) {\n            this.element.id = getUniqueID('sortable');\n        }\n        if (!this.itemClass) {\n            this.itemClass = 'e-sort-item';\n            this.dataBind();\n        }\n        this.initializeDraggable();\n    }\n    initializeDraggable() {\n        new Draggable(this.element, {\n            helper: this.getHelper,\n            dragStart: this.onDragStart,\n            drag: this.onDrag,\n            dragStop: this.onDragStop,\n            dragTarget: `.${this.itemClass}`,\n            enableTapHold: true,\n            tapHoldThreshold: 200,\n            queryPositionInfo: this.queryPositionInfo\n        });\n    }\n    getPlaceHolder(target, instance) {\n        if (instance.placeHolder) {\n            if (this.isPlaceHolderPresent(instance)) {\n                remove(instance.placeHolderElement);\n            }\n            instance.placeHolderElement = instance.placeHolder({ element: instance.element, grabbedElement: this.target, target: target });\n            instance.placeHolderElement.classList.add('e-sortable-placeholder');\n            return instance.placeHolderElement;\n        }\n        return null;\n    }\n    isValidTarget(target, instance) {\n        return target && compareElementParent(target, instance.element) && target.classList.contains(instance.itemClass) &&\n            !target.classList.contains('e-disabled');\n    }\n    removePlaceHolder(instance) {\n        remove(instance.placeHolderElement);\n        instance.placeHolderElement = null;\n    }\n    updateItemClass(instance) {\n        if (this !== instance) {\n            this.target.classList.remove(this.itemClass);\n            this.target.classList.add(instance.itemClass);\n        }\n    }\n    getSortableInstance(element) {\n        element = closest(element, `.e-${this.getModuleName()}`);\n        if (element) {\n            let inst = getComponent(element, Sortable_1);\n            return inst.scope && this.scope && inst.scope === this.scope ? inst : this;\n        }\n        else {\n            return this;\n        }\n    }\n    refreshDisabled(oldIdx, newIdx, instance) {\n        if (instance === this) {\n            let element;\n            let increased = oldIdx < newIdx;\n            let disabledIdx;\n            let start = increased ? oldIdx : newIdx;\n            let end = increased ? newIdx : oldIdx;\n            while (start <= end) {\n                element = this.element.children[start];\n                if (element.classList.contains('e-disabled')) {\n                    disabledIdx = this.getIndex(element);\n                    this.element.insertBefore(element, this.element.children[increased ? disabledIdx + 2 : disabledIdx - 1]);\n                    start = increased ? disabledIdx + 2 : disabledIdx + 1;\n                }\n                else {\n                    start++;\n                }\n            }\n        }\n    }\n    getIndex(target, instance = this) {\n        let idx;\n        [].slice.call(instance.element.children).forEach((element, index) => {\n            if (element === target) {\n                idx = index;\n            }\n        });\n        return idx;\n    }\n    getSortableElement(element, instance = this) {\n        return closest(element, `.${instance.itemClass}`);\n    }\n    queryPositionInfo(value) {\n        value.left = pageXOffset ? `${parseFloat(value.left) - pageXOffset}px` : value.left;\n        value.top = pageYOffset ? `${parseFloat(value.top) - pageYOffset}px` : value.top;\n        return value;\n    }\n    isPlaceHolderPresent(instance) {\n        return instance.placeHolderElement && !!closest(instance.placeHolderElement, `#${instance.element.id}`);\n    }\n    /**\n     * It is used to sort array of elements from source element to destination element.\n     * @param destination - Defines the destination element to which the sortable elements needs to be appended.\n     * If it is null, then the Sortable library element will be considered as destination.\n     * @param targetIndexes - Specifies the sortable elements indexes which needs to be sorted.\n     * @param insertBefore - Specifies the index before which the sortable elements needs to be appended.\n     * If it is null, elements will be appended as last child.\n     * @method moveTo\n     * @return {void}\n     */\n    moveTo(destination, targetIndexes, insertBefore) {\n        moveTo(this.element, destination, targetIndexes, insertBefore);\n    }\n    /**\n     * It is used to destroy the Sortable library.\n     */\n    destroy() {\n        if (this.itemClass === 'e-sort-item') {\n            this.itemClass = null;\n            this.dataBind();\n        }\n        getComponent(this.element, Draggable).destroy();\n        super.destroy();\n    }\n    getModuleName() {\n        return 'sortable';\n    }\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'itemClass':\n                    [].slice.call(this.element.children).forEach((element) => {\n                        if (element.classList.contains(oldProp.itemClass)) {\n                            element.classList.remove(oldProp.itemClass);\n                        }\n                        if (newProp.itemClass) {\n                            element.classList.add(newProp.itemClass);\n                        }\n                    });\n                    break;\n            }\n        }\n    }\n};\n__decorate$1([\n    Property(false)\n], Sortable.prototype, \"enableAnimation\", void 0);\n__decorate$1([\n    Property(null)\n], Sortable.prototype, \"itemClass\", void 0);\n__decorate$1([\n    Property(null)\n], Sortable.prototype, \"scope\", void 0);\n__decorate$1([\n    Property()\n], Sortable.prototype, \"helper\", void 0);\n__decorate$1([\n    Property()\n], Sortable.prototype, \"placeHolder\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"drag\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"beforeDragStart\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"dragStart\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"beforeDrop\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"drop\", void 0);\nSortable = Sortable_1 = __decorate$1([\n    NotifyPropertyChanges\n], Sortable);\n/**\n * It is used to sort array of elements from source element to destination element.\n * @private\n */\nfunction moveTo(from, to, targetIndexes, insertBefore) {\n    let targetElements = [];\n    if (!to) {\n        to = from;\n    }\n    if (targetIndexes && targetIndexes.length) {\n        targetIndexes.forEach((index) => {\n            targetElements.push(from.children[index]);\n        });\n    }\n    else {\n        targetElements = [].slice.call(from.children);\n    }\n    if (isNullOrUndefined(insertBefore)) {\n        targetElements.forEach((target) => {\n            to.appendChild(target);\n        });\n    }\n    else {\n        let insertElement = to.children[insertBefore];\n        targetElements.forEach((target) => {\n            to.insertBefore(target, insertElement);\n        });\n    }\n}\n\n/**\n * Sortable Module\n */\n\n/**\n * List Components\n */\n\nexport { classNames, FieldSettings, ListView, Virtualization, cssClass, ListBase, getFieldValues, Sortable, moveTo };\n//# sourceMappingURL=ej2-lists.es2015.js.map\n","import { Animation, Browser, ChildProperty, Collection, Complex, Component, Draggable, Event, EventHandler, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, Touch, addClass, append, attributes, classList, closest, compile, createElement, detach, extend, formatUnit, getUniqueID, isBlazor, isNullOrUndefined, prepend, remove, removeClass, resetBlazorTemplate, setStyleAttribute, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\n\n/**\n * Position library\n */\nlet elementRect;\nlet popupRect;\nlet element;\nlet parentDocument;\nlet fixedParent = false;\nfunction calculateRelativeBasedPosition(anchor, element) {\n    let fixedElement = false;\n    let anchorPos = { left: 0, top: 0 };\n    let tempAnchor = anchor;\n    if (!anchor || !element) {\n        return anchorPos;\n    }\n    if (isNullOrUndefined(element.offsetParent) && element.style.position === 'fixed') {\n        fixedElement = true;\n    }\n    while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {\n        anchorPos.left += anchor.offsetLeft;\n        anchorPos.top += anchor.offsetTop;\n        anchor = anchor.offsetParent;\n    }\n    anchor = tempAnchor;\n    while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {\n        anchorPos.left -= anchor.scrollLeft;\n        anchorPos.top -= anchor.scrollTop;\n        anchor = anchor.parentElement;\n    }\n    return anchorPos;\n}\nfunction calculatePosition(currentElement, positionX, positionY, parentElement, targetValues) {\n    (positionY + positionX === 'topright') ? popupRect = undefined : popupRect = targetValues;\n    popupRect = targetValues;\n    fixedParent = parentElement ? true : false;\n    if (!currentElement) {\n        return { left: 0, top: 0 };\n    }\n    if (!positionX) {\n        positionX = 'left';\n    }\n    if (!positionY) {\n        positionY = 'top';\n    }\n    parentDocument = currentElement.ownerDocument;\n    element = currentElement;\n    let pos = { left: 0, top: 0 };\n    return updatePosition(positionX.toLowerCase(), positionY.toLowerCase(), pos);\n}\nfunction setPosx(value, pos) {\n    pos.left = value;\n}\nfunction setPosy(value, pos) {\n    pos.top = value;\n}\nfunction updatePosition(posX, posY, pos) {\n    elementRect = element.getBoundingClientRect();\n    switch (posY + posX) {\n        case 'topcenter':\n            setPosx(getElementHCenter(), pos);\n            setPosy(getElementTop(), pos);\n            break;\n        case 'topright':\n            setPosx(getElementRight(), pos);\n            setPosy(getElementTop(), pos);\n            break;\n        case 'centercenter':\n            setPosx(getElementHCenter(), pos);\n            setPosy(getElementVCenter(), pos);\n            break;\n        case 'centerright':\n            setPosx(getElementRight(), pos);\n            setPosy(getElementVCenter(), pos);\n            break;\n        case 'centerleft':\n            setPosx(getElementLeft(), pos);\n            setPosy(getElementVCenter(), pos);\n            break;\n        case 'bottomcenter':\n            setPosx(getElementHCenter(), pos);\n            setPosy(getElementBottom(), pos);\n            break;\n        case 'bottomright':\n            setPosx(getElementRight(), pos);\n            setPosy(getElementBottom(), pos);\n            break;\n        case 'bottomleft':\n            setPosx(getElementLeft(), pos);\n            setPosy(getElementBottom(), pos);\n            break;\n        default:\n        case 'topleft':\n            setPosx(getElementLeft(), pos);\n            setPosy(getElementTop(), pos);\n            break;\n    }\n    return pos;\n}\nfunction getBodyScrollTop() {\n    return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;\n}\nfunction getBodyScrollLeft() {\n    return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;\n}\nfunction getElementBottom() {\n    return fixedParent ? elementRect.bottom : elementRect.bottom + getBodyScrollTop();\n}\nfunction getElementVCenter() {\n    return getElementTop() + (elementRect.height / 2);\n}\nfunction getElementTop() {\n    return fixedParent ? elementRect.top : elementRect.top + getBodyScrollTop();\n}\nfunction getElementLeft() {\n    return elementRect.left + getBodyScrollLeft();\n}\nfunction getElementRight() {\n    return elementRect.right + getBodyScrollLeft() - (popupRect ? popupRect.width : 0);\n}\nfunction getElementHCenter() {\n    return getElementLeft() + (elementRect.width / 2);\n}\n\n/**\n * Collision module.\n */\nlet parentDocument$1;\nlet targetContainer;\nfunction fit(element, viewPortElement = null, axis = { X: false, Y: false }, position) {\n    if (!axis.Y && !axis.X) {\n        return { left: 0, top: 0 };\n    }\n    let elemData = element.getBoundingClientRect();\n    targetContainer = viewPortElement;\n    parentDocument$1 = element.ownerDocument;\n    if (!position) {\n        position = calculatePosition(element, 'left', 'top');\n    }\n    if (axis.X) {\n        let containerWidth = targetContainer ? getTargetContainerWidth() : getViewPortWidth();\n        let containerLeft = ContainerLeft();\n        let containerRight = ContainerRight();\n        let overLeft = containerLeft - position.left;\n        let overRight = position.left + elemData.width - containerRight;\n        if (elemData.width > containerWidth) {\n            if (overLeft > 0 && overRight <= 0) {\n                position.left = containerRight - elemData.width;\n            }\n            else if (overRight > 0 && overLeft <= 0) {\n                position.left = containerLeft;\n            }\n            else {\n                position.left = overLeft > overRight ? (containerRight - elemData.width) : containerLeft;\n            }\n        }\n        else if (overLeft > 0) {\n            position.left += overLeft;\n        }\n        else if (overRight > 0) {\n            position.left -= overRight;\n        }\n    }\n    if (axis.Y) {\n        let containerHeight = targetContainer ? getTargetContainerHeight() : getViewPortHeight();\n        let containerTop = ContainerTop();\n        let containerBottom = ContainerBottom();\n        let overTop = containerTop - position.top;\n        let overBottom = position.top + elemData.height - containerBottom;\n        if (elemData.height > containerHeight) {\n            if (overTop > 0 && overBottom <= 0) {\n                position.top = containerBottom - elemData.height;\n            }\n            else if (overBottom > 0 && overTop <= 0) {\n                position.top = containerTop;\n            }\n            else {\n                position.top = overTop > overBottom ? (containerBottom - elemData.height) : containerTop;\n            }\n        }\n        else if (overTop > 0) {\n            position.top += overTop;\n        }\n        else if (overBottom > 0) {\n            position.top -= overBottom;\n        }\n    }\n    return position;\n}\nfunction isCollide(element, viewPortElement = null, x, y) {\n    let elemOffset = calculatePosition(element, 'left', 'top');\n    if (x) {\n        elemOffset.left = x;\n    }\n    if (y) {\n        elemOffset.top = y;\n    }\n    let data = [];\n    targetContainer = viewPortElement;\n    parentDocument$1 = element.ownerDocument;\n    let elementRect = element.getBoundingClientRect();\n    let top = elemOffset.top;\n    let left = elemOffset.left;\n    let right = elemOffset.left + elementRect.width;\n    let bottom = elemOffset.top + elementRect.height;\n    let yAxis = topCollideCheck(top, bottom);\n    let xAxis = leftCollideCheck(left, right);\n    if (yAxis.topSide) {\n        data.push('top');\n    }\n    if (xAxis.rightSide) {\n        data.push('right');\n    }\n    if (xAxis.leftSide) {\n        data.push('left');\n    }\n    if (yAxis.bottomSide) {\n        data.push('bottom');\n    }\n    return data;\n}\nfunction flip(element, target, offsetX, offsetY, positionX, positionY, viewPortElement = null, axis = { X: true, Y: true }, fixedParent) {\n    if (!target || !element || !positionX || !positionY || (!axis.X && !axis.Y)) {\n        return;\n    }\n    let tEdge = { TL: null,\n        TR: null,\n        BL: null,\n        BR: null };\n    let eEdge = {\n        TL: null,\n        TR: null,\n        BL: null,\n        BR: null\n    };\n    let elementRect = element.getBoundingClientRect();\n    let pos = {\n        posX: positionX, posY: positionY, offsetX: offsetX, offsetY: offsetY, position: { left: 0, top: 0 }\n    };\n    targetContainer = viewPortElement;\n    parentDocument$1 = target.ownerDocument;\n    updateElementData(target, tEdge, pos, fixedParent, elementRect);\n    setPosition(eEdge, pos, elementRect);\n    if (axis.X) {\n        leftFlip(target, eEdge, tEdge, pos, elementRect, true);\n    }\n    if (axis.Y && tEdge.TL.top > -1) {\n        topFlip(target, eEdge, tEdge, pos, elementRect, true);\n    }\n    setPopup(element, pos, elementRect);\n}\nfunction setPopup(element, pos, elementRect) {\n    let left = 0;\n    let top = 0;\n    if (element.offsetParent != null\n        && (getComputedStyle(element.offsetParent).position === 'absolute' ||\n            getComputedStyle(element.offsetParent).position === 'relative')) {\n        let data = calculatePosition(element.offsetParent, 'left', 'top', false, elementRect);\n        left = data.left;\n        top = data.top;\n    }\n    element.style.top = (pos.position.top + pos.offsetY - (top)) + 'px';\n    element.style.left = (pos.position.left + pos.offsetX - (left)) + 'px';\n}\nfunction updateElementData(target, edge, pos, fixedParent, elementRect) {\n    pos.position = calculatePosition(target, pos.posX, pos.posY, fixedParent, elementRect);\n    edge.TL = calculatePosition(target, 'left', 'top', fixedParent, elementRect);\n    edge.TR = calculatePosition(target, 'right', 'top', fixedParent, elementRect);\n    edge.BR = calculatePosition(target, 'left', 'bottom', fixedParent, elementRect);\n    edge.BL = calculatePosition(target, 'right', 'bottom', fixedParent, elementRect);\n}\nfunction setPosition(eStatus, pos, elementRect) {\n    eStatus.TL = { top: pos.position.top + pos.offsetY, left: pos.position.left + pos.offsetX };\n    eStatus.TR = { top: eStatus.TL.top, left: eStatus.TL.left + elementRect.width };\n    eStatus.BL = { top: eStatus.TL.top + elementRect.height,\n        left: eStatus.TL.left };\n    eStatus.BR = { top: eStatus.TL.top + elementRect.height,\n        left: eStatus.TL.left + elementRect.width };\n}\nfunction leftCollideCheck(left, right) {\n    let leftSide = false;\n    let rightSide = false;\n    if (((left - getBodyScrollLeft$1()) < ContainerLeft())) {\n        leftSide = true;\n    }\n    if (right > ContainerRight()) {\n        rightSide = true;\n    }\n    return { leftSide: leftSide, rightSide: rightSide };\n}\nfunction leftFlip(target, edge, tEdge, pos, elementRect, deepCheck) {\n    let collideSide = leftCollideCheck(edge.TL.left, edge.TR.left);\n    if ((tEdge.TL.left - getBodyScrollLeft$1()) <= ContainerLeft()) {\n        collideSide.leftSide = false;\n    }\n    if (tEdge.TR.left >= ContainerRight()) {\n        collideSide.rightSide = false;\n    }\n    if ((collideSide.leftSide && !collideSide.rightSide) || (!collideSide.leftSide && collideSide.rightSide)) {\n        if (pos.posX === 'right') {\n            pos.posX = 'left';\n        }\n        else {\n            pos.posX = 'right';\n        }\n        pos.offsetX = pos.offsetX + elementRect.width;\n        pos.offsetX = -1 * pos.offsetX;\n        pos.position = calculatePosition(target, pos.posX, pos.posY, false);\n        setPosition(edge, pos, elementRect);\n        if (deepCheck) {\n            leftFlip(target, edge, tEdge, pos, elementRect, false);\n        }\n    }\n}\nfunction topFlip(target, edge, tEdge, pos, elementRect, deepCheck) {\n    let collideSide = topCollideCheck(edge.TL.top, edge.BL.top);\n    if ((tEdge.TL.top - getBodyScrollTop$1()) <= ContainerTop()) {\n        collideSide.topSide = false;\n    }\n    if (tEdge.BL.top >= ContainerBottom()) {\n        collideSide.bottomSide = false;\n    }\n    if ((collideSide.topSide && !collideSide.bottomSide) || (!collideSide.topSide && collideSide.bottomSide)) {\n        if (pos.posY === 'top') {\n            pos.posY = 'bottom';\n        }\n        else {\n            pos.posY = 'top';\n        }\n        pos.offsetY = pos.offsetY + elementRect.height;\n        pos.offsetY = -1 * pos.offsetY;\n        pos.position = calculatePosition(target, pos.posX, pos.posY, false, elementRect);\n        setPosition(edge, pos, elementRect);\n        if (deepCheck) {\n            topFlip(target, edge, tEdge, pos, elementRect, false);\n        }\n    }\n}\nfunction topCollideCheck(top, bottom) {\n    let topSide = false;\n    let bottomSide = false;\n    if ((top - getBodyScrollTop$1()) < ContainerTop()) {\n        topSide = true;\n    }\n    if (bottom > ContainerBottom()) {\n        bottomSide = true;\n    }\n    return { topSide: topSide, bottomSide: bottomSide };\n}\nfunction getTargetContainerWidth() {\n    return targetContainer.getBoundingClientRect().width;\n}\nfunction getTargetContainerHeight() {\n    return targetContainer.getBoundingClientRect().height;\n}\nfunction getTargetContainerLeft() {\n    return targetContainer.getBoundingClientRect().left;\n}\nfunction getTargetContainerTop() {\n    return targetContainer.getBoundingClientRect().top;\n}\nfunction ContainerTop() {\n    if (targetContainer) {\n        return getTargetContainerTop();\n    }\n    return 0;\n}\nfunction ContainerLeft() {\n    if (targetContainer) {\n        return getTargetContainerLeft();\n    }\n    return 0;\n}\nfunction ContainerRight() {\n    if (targetContainer) {\n        return (getBodyScrollLeft$1() + getTargetContainerLeft() + getTargetContainerWidth());\n    }\n    return (getBodyScrollLeft$1() + getViewPortWidth());\n}\nfunction ContainerBottom() {\n    if (targetContainer) {\n        return (getBodyScrollTop$1() + getTargetContainerTop() + getTargetContainerHeight());\n    }\n    return (getBodyScrollTop$1() + getViewPortHeight());\n}\nfunction getBodyScrollTop$1() {\n    // if(targetContainer)\n    //     return targetContainer.scrollTop;\n    return parentDocument$1.documentElement.scrollTop || parentDocument$1.body.scrollTop;\n}\nfunction getBodyScrollLeft$1() {\n    // if(targetContainer)\n    //     return targetContainer.scrollLeft;\n    return parentDocument$1.documentElement.scrollLeft || parentDocument$1.body.scrollLeft;\n}\nfunction getViewPortHeight() {\n    return window.innerHeight;\n}\nfunction getViewPortWidth() {\n    let windowWidth = window.innerWidth;\n    let offsetWidth = (isNullOrUndefined(document.documentElement)) ? 0 : document.documentElement.offsetWidth;\n    return windowWidth - (windowWidth - offsetWidth);\n}\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Specifies the offset position values.\n */\nclass PositionData extends ChildProperty {\n}\n__decorate([\n    Property('left')\n], PositionData.prototype, \"X\", void 0);\n__decorate([\n    Property('top')\n], PositionData.prototype, \"Y\", void 0);\n// don't use space in classNames\nconst CLASSNAMES = {\n    ROOT: 'e-popup',\n    RTL: 'e-rtl',\n    OPEN: 'e-popup-open',\n    CLOSE: 'e-popup-close'\n};\n/**\n * Represents the Popup Component\n * ```html\n * <div id=\"popup\" style=\"position:absolute;height:100px;width:100px;\">\n * <div style=\"margin:35px 25px;\">Popup Content</div></div>\n * ```\n * ```typescript\n * <script>\n *   var popupObj = new Popup();\n *   popupObj.appendTo(\"#popup\");\n * </script>\n * ```\n */\nlet Popup = class Popup extends Component {\n    constructor(element, options) {\n        super(options, element);\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'width':\n                    setStyleAttribute(this.element, { 'width': formatUnit(newProp.width) });\n                    break;\n                case 'height':\n                    setStyleAttribute(this.element, { 'height': formatUnit(newProp.height) });\n                    break;\n                case 'zIndex':\n                    setStyleAttribute(this.element, { 'zIndex': newProp.zIndex });\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'position':\n                case 'relateTo':\n                    this.refreshPosition();\n                    break;\n                case 'offsetX':\n                    let x = newProp.offsetX - oldProp.offsetX;\n                    this.element.style.left = (parseInt(this.element.style.left, 10) + (x)).toString() + 'px';\n                    break;\n                case 'offsetY':\n                    let y = newProp.offsetY - oldProp.offsetY;\n                    this.element.style.top = (parseInt(this.element.style.top, 10) + (y)).toString() + 'px';\n                    break;\n                case 'content':\n                    this.setContent();\n                    break;\n                case 'actionOnScroll':\n                    if (newProp.actionOnScroll !== 'none') {\n                        this.wireScrollEvents();\n                    }\n                    else {\n                        this.unwireScrollEvents();\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * gets the Component module name.\n     * @private\n     */\n    getModuleName() {\n        return 'popup';\n    }\n    /**\n     * To resolve if any collision occurs.\n     */\n    resolveCollision() {\n        this.checkCollision();\n    }\n    /**\n     * gets the persisted state properties of the Component.\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * To destroy the control.\n     */\n    destroy() {\n        this.element.classList.remove(CLASSNAMES.ROOT, CLASSNAMES.RTL, CLASSNAMES.OPEN, CLASSNAMES.CLOSE);\n        this.unwireEvents();\n        super.destroy();\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.element.classList.add(CLASSNAMES.ROOT);\n        let styles = {};\n        if (this.zIndex !== 1000) {\n            styles.zIndex = this.zIndex;\n        }\n        if (this.width !== 'auto') {\n            styles.width = formatUnit(this.width);\n        }\n        if (this.height !== 'auto') {\n            styles.height = formatUnit(this.height);\n        }\n        setStyleAttribute(this.element, styles);\n        this.fixedParent = false;\n        this.setEnableRtl();\n        this.setContent();\n    }\n    wireEvents() {\n        if (Browser.isDevice) {\n            EventHandler.add(window, 'orientationchange', this.orientationOnChange, this);\n        }\n        if (this.actionOnScroll !== 'none') {\n            this.wireScrollEvents();\n        }\n    }\n    wireScrollEvents() {\n        if (this.getRelateToElement()) {\n            for (let parent of this.getScrollableParent(this.getRelateToElement())) {\n                EventHandler.add(parent, 'scroll', this.scrollRefresh, this);\n            }\n        }\n    }\n    unwireEvents() {\n        if (Browser.isDevice) {\n            EventHandler.remove(window, 'orientationchange', this.orientationOnChange);\n        }\n        if (this.actionOnScroll !== 'none') {\n            this.unwireScrollEvents();\n        }\n    }\n    unwireScrollEvents() {\n        if (this.getRelateToElement()) {\n            for (let parent of this.getScrollableParent(this.getRelateToElement())) {\n                EventHandler.remove(parent, 'scroll', this.scrollRefresh);\n            }\n        }\n    }\n    getRelateToElement() {\n        let relateToElement = this.relateTo === '' || isNullOrUndefined(this.relateTo) ?\n            document.body : this.relateTo;\n        this.setProperties({ relateTo: relateToElement }, true);\n        return ((typeof this.relateTo) === 'string') ?\n            document.querySelector(this.relateTo) : this.relateTo;\n    }\n    scrollRefresh(e) {\n        if (this.actionOnScroll === 'reposition') {\n            if (!(this.element.offsetParent === e.target ||\n                (this.element.offsetParent && this.element.offsetParent.tagName === 'BODY' &&\n                    e.target.parentElement == null))) {\n                this.refreshPosition();\n            }\n        }\n        else if (this.actionOnScroll === 'hide') {\n            this.hide();\n        }\n        if (this.actionOnScroll !== 'none') {\n            if (this.getRelateToElement()) {\n                let targetVisible = this.isElementOnViewport(this.getRelateToElement(), e.target);\n                if (!targetVisible && !this.targetInvisibleStatus) {\n                    this.trigger('targetExitViewport');\n                    this.targetInvisibleStatus = true;\n                }\n                else if (targetVisible) {\n                    this.targetInvisibleStatus = false;\n                }\n            }\n        }\n    }\n    /**\n     * This method is to get the element visibility on viewport when scroll\n     * the page. This method will returns true even though 1 px of element\n     * part is in visible.\n     */\n    isElementOnViewport(relateToElement, scrollElement) {\n        let scrollParents = this.getScrollableParent(relateToElement);\n        for (let parent = 0; parent < scrollParents.length; parent++) {\n            if (this.isElementVisible(relateToElement, scrollParents[parent])) {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    isElementVisible(relateToElement, scrollElement) {\n        let rect = this.checkGetBoundingClientRect(relateToElement);\n        if (!rect.height || !rect.width) {\n            return false;\n        }\n        if (!isNullOrUndefined(this.checkGetBoundingClientRect(scrollElement))) {\n            let parent = scrollElement.getBoundingClientRect();\n            return !(rect.bottom < parent.top) &&\n                (!(rect.bottom > parent.bottom) &&\n                    (!(rect.right > parent.right) &&\n                        !(rect.left < parent.left)));\n        }\n        else {\n            let win = window;\n            let windowView = {\n                top: win.scrollY,\n                left: win.scrollX,\n                right: win.scrollX + win.outerWidth,\n                bottom: win.scrollY + win.outerHeight\n            };\n            let off = calculatePosition(relateToElement);\n            let ele = {\n                top: off.top,\n                left: off.left,\n                right: off.left + rect.width,\n                bottom: off.top + rect.height\n            };\n            let elementView = {\n                top: windowView.bottom - ele.top,\n                left: windowView.right - ele.left,\n                bottom: ele.bottom - windowView.top,\n                right: ele.right - windowView.left\n            };\n            return elementView.top > 0\n                && elementView.left > 0\n                && elementView.right > 0\n                && elementView.bottom > 0;\n        }\n    }\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        //There is no event handler\n    }\n    setEnableRtl() {\n        this.reposition();\n        this.enableRtl ? this.element.classList.add(CLASSNAMES.RTL) : this.element.classList.remove(CLASSNAMES.RTL);\n    }\n    setContent() {\n        if (!isNullOrUndefined(this.content)) {\n            this.element.innerHTML = '';\n            if (typeof (this.content) === 'string') {\n                this.element.textContent = this.content;\n            }\n            else {\n                this.element.appendChild(this.content);\n            }\n        }\n    }\n    orientationOnChange() {\n        setTimeout(() => {\n            this.refreshPosition();\n        }, 200);\n    }\n    /**\n     * Based on the `relative` element and `offset` values, `Popup` element position will refreshed.\n     */\n    refreshPosition(target, collision) {\n        if (!isNullOrUndefined(target)) {\n            this.checkFixedParent(target);\n        }\n        this.reposition();\n        if (!collision) {\n            this.checkCollision();\n        }\n    }\n    reposition() {\n        let pos;\n        let position;\n        let relateToElement = this.getRelateToElement();\n        if (typeof this.position.X === 'number' && typeof this.position.Y === 'number') {\n            pos = { left: this.position.X, top: this.position.Y };\n        }\n        else if ((typeof this.position.X === 'string' && typeof this.position.Y === 'number') ||\n            (typeof this.position.X === 'number' && typeof this.position.Y === 'string')) {\n            let display = this.element.style.display;\n            let parentDisplay;\n            this.element.style.display = 'block';\n            if (this.element.classList.contains('e-dlg-modal')) {\n                parentDisplay = this.element.parentElement.style.display;\n                this.element.parentElement.style.display = 'block';\n            }\n            position = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);\n            if (typeof this.position.X === 'string') {\n                pos = { left: position.left, top: this.position.Y };\n            }\n            else {\n                pos = { left: this.position.X, top: position.top };\n            }\n            this.element.style.display = display;\n            if (this.element.classList.contains('e-dlg-modal')) {\n                this.element.parentElement.style.display = parentDisplay;\n            }\n        }\n        else if (relateToElement) {\n            let display = this.element.style.display;\n            this.element.style.display = 'block';\n            pos = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);\n            this.element.style.display = display;\n        }\n        else {\n            pos = { left: 0, top: 0 };\n        }\n        if (!isNullOrUndefined(pos)) {\n            this.element.style.left = pos.left + 'px';\n            this.element.style.top = pos.top + 'px';\n        }\n    }\n    checkGetBoundingClientRect(ele) {\n        let eleRect;\n        try {\n            eleRect = ele.getBoundingClientRect();\n            return eleRect;\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    getAnchorPosition(anchorEle, ele, position, offsetX, offsetY) {\n        let eleRect = this.checkGetBoundingClientRect(ele);\n        let anchorRect = this.checkGetBoundingClientRect(anchorEle);\n        if (isNullOrUndefined(eleRect) || isNullOrUndefined(anchorRect)) {\n            return null;\n        }\n        let anchor = anchorEle;\n        let anchorPos = { left: 0, top: 0 };\n        if (ele.offsetParent && ele.offsetParent.tagName === 'BODY' && anchorEle.tagName === 'BODY') {\n            anchorPos = calculatePosition(anchorEle);\n        }\n        else {\n            if ((ele.classList.contains('e-dlg-modal') && anchor.tagName !== 'BODY')) {\n                ele = ele.parentElement;\n            }\n            anchorPos = calculateRelativeBasedPosition(anchor, ele);\n        }\n        switch (position.X) {\n            default:\n            case 'left':\n                break;\n            case 'center':\n                if ((ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container')) {\n                    anchorPos.left += (window.innerWidth / 2 - eleRect.width / 2);\n                }\n                else if (this.targetType === 'container') {\n                    anchorPos.left += (anchorRect.width / 2 - eleRect.width / 2);\n                }\n                else {\n                    anchorPos.left += (anchorRect.width / 2);\n                }\n                break;\n            case 'right':\n                if ((ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container')) {\n                    anchorPos.left += (window.innerWidth - eleRect.width);\n                }\n                else if (this.targetType === 'container') {\n                    anchorPos.left += (anchorRect.width - eleRect.width);\n                }\n                else {\n                    anchorPos.left += (anchorRect.width);\n                }\n                break;\n        }\n        switch (position.Y) {\n            default:\n            case 'top':\n                break;\n            case 'center':\n                if ((ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container')) {\n                    anchorPos.top += (window.innerHeight / 2 - eleRect.height / 2);\n                }\n                else if (this.targetType === 'container') {\n                    anchorPos.top += (anchorRect.height / 2 - eleRect.height / 2);\n                }\n                else {\n                    anchorPos.top += (anchorRect.height / 2);\n                }\n                break;\n            case 'bottom':\n                if ((ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container')) {\n                    anchorPos.top += (window.innerHeight - eleRect.height);\n                }\n                else if (this.targetType === 'container') {\n                    anchorPos.top += (anchorRect.height - eleRect.height);\n                }\n                else {\n                    anchorPos.top += (anchorRect.height);\n                }\n                break;\n        }\n        anchorPos.left += offsetX;\n        anchorPos.top += offsetY;\n        return anchorPos;\n    }\n    callFlip(param) {\n        let relateToElement = this.getRelateToElement();\n        flip(this.element, relateToElement, this.offsetX, this.offsetY, this.position.X, this.position.Y, this.viewPortElement, param, this.fixedParent);\n    }\n    callFit(param) {\n        if (isCollide(this.element, this.viewPortElement).length !== 0) {\n            if (isNullOrUndefined(this.viewPortElement)) {\n                let data = fit(this.element, this.viewPortElement, param);\n                if (param.X) {\n                    this.element.style.left = data.left + 'px';\n                }\n                if (param.Y) {\n                    this.element.style.top = data.top + 'px';\n                }\n            }\n            else {\n                let elementRect = this.checkGetBoundingClientRect(this.element);\n                let viewPortRect = this.checkGetBoundingClientRect(this.viewPortElement);\n                if (isNullOrUndefined(elementRect) || isNullOrUndefined(viewPortRect)) {\n                    return null;\n                }\n                if (param && param.Y === true) {\n                    if (viewPortRect.top > elementRect.top) {\n                        this.element.style.top = '0px';\n                    }\n                    else if (viewPortRect.bottom < elementRect.bottom) {\n                        this.element.style.top = parseInt(this.element.style.top, 10) - (elementRect.bottom - viewPortRect.bottom) + 'px';\n                    }\n                }\n                if (param && param.X === true) {\n                    if (viewPortRect.right < elementRect.right) {\n                        this.element.style.left = parseInt(this.element.style.left, 10) - (elementRect.right - viewPortRect.right) + 'px';\n                    }\n                    else if (viewPortRect.left > elementRect.left) {\n                        this.element.style.left = parseInt(this.element.style.left, 10) + (viewPortRect.left - elementRect.left) + 'px';\n                    }\n                }\n            }\n        }\n    }\n    checkCollision() {\n        let horz = this.collision.X;\n        let vert = this.collision.Y;\n        if (horz === 'none' && vert === 'none') {\n            return;\n        }\n        if (horz === 'flip' && vert === 'flip') {\n            this.callFlip({ X: true, Y: true });\n        }\n        else if (horz === 'fit' && vert === 'fit') {\n            this.callFit({ X: true, Y: true });\n        }\n        else {\n            if (horz === 'flip') {\n                this.callFlip({ X: true, Y: false });\n            }\n            else if (vert === 'flip') {\n                this.callFlip({ Y: true, X: false });\n            }\n            if (horz === 'fit') {\n                this.callFit({ X: true, Y: false });\n            }\n            else if (vert === 'fit') {\n                this.callFit({ X: false, Y: true });\n            }\n        }\n    }\n    /**\n     * Shows the popup element from screen.\n     * @param { AnimationModel | Function } collisionOrAnimationOptions? - To pass animation options or collision function.\n     * @param { Function } collision? - To pass the collision function.\n     * @param { HTMLElement } relativeElement? - To calculate the zIndex value dynamically.\n     */\n    show(animationOptions, relativeElement) {\n        this.wireEvents();\n        if (this.zIndex === 1000 || !isNullOrUndefined(relativeElement)) {\n            let zIndexElement = (isNullOrUndefined(relativeElement)) ? this.element : relativeElement;\n            this.zIndex = getZindexPartial(zIndexElement);\n            setStyleAttribute(this.element, { 'zIndex': this.zIndex });\n        }\n        animationOptions = (!isNullOrUndefined(animationOptions) && typeof animationOptions === 'object') ?\n            animationOptions : this.showAnimation;\n        if (this.collision.X !== 'none' || this.collision.Y !== 'none') {\n            removeClass([this.element], CLASSNAMES.CLOSE);\n            addClass([this.element], CLASSNAMES.OPEN);\n            this.checkCollision();\n            removeClass([this.element], CLASSNAMES.OPEN);\n            addClass([this.element], CLASSNAMES.CLOSE);\n        }\n        if (!isNullOrUndefined(animationOptions)) {\n            animationOptions.begin = () => {\n                if (!this.isDestroyed) {\n                    removeClass([this.element], CLASSNAMES.CLOSE);\n                    addClass([this.element], CLASSNAMES.OPEN);\n                }\n            };\n            animationOptions.end = () => {\n                if (!this.isDestroyed) {\n                    this.trigger('open');\n                }\n            };\n            new Animation(animationOptions).animate(this.element);\n        }\n        else {\n            removeClass([this.element], CLASSNAMES.CLOSE);\n            addClass([this.element], CLASSNAMES.OPEN);\n            this.trigger('open');\n        }\n    }\n    /**\n     * Hides the popup element from screen.\n     * @param { AnimationModel } animationOptions? - To give the animation options.\n     */\n    hide(animationOptions) {\n        animationOptions = (!isNullOrUndefined(animationOptions) && typeof animationOptions === 'object') ?\n            animationOptions : this.hideAnimation;\n        if (!isNullOrUndefined(animationOptions)) {\n            animationOptions.end = () => {\n                if (!this.isDestroyed) {\n                    removeClass([this.element], CLASSNAMES.OPEN);\n                    addClass([this.element], CLASSNAMES.CLOSE);\n                    this.trigger('close');\n                }\n            };\n            new Animation(animationOptions).animate(this.element);\n        }\n        else {\n            removeClass([this.element], CLASSNAMES.OPEN);\n            addClass([this.element], CLASSNAMES.CLOSE);\n            this.trigger('close');\n        }\n        this.unwireEvents();\n    }\n    /**\n     * Gets scrollable parent elements for the given element.\n     * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.\n     */\n    getScrollableParent(element) {\n        this.checkFixedParent(element);\n        return getScrollableParent(element, this.fixedParent);\n    }\n    checkFixedParent(element) {\n        let parent = element.parentElement;\n        while (parent && parent.tagName !== 'HTML') {\n            let parentStyle = getComputedStyle(parent);\n            if (parentStyle.position === 'fixed' && this.element.offsetParent && this.element.offsetParent.tagName === 'BODY') {\n                this.element.style.position = 'fixed';\n                this.fixedParent = true;\n            }\n            parent = parent.parentElement;\n            if (isNullOrUndefined(this.element.offsetParent) && parentStyle.position === 'fixed'\n                && this.element.style.position === 'fixed') {\n                this.fixedParent = true;\n            }\n        }\n    }\n};\n__decorate([\n    Property('auto')\n], Popup.prototype, \"height\", void 0);\n__decorate([\n    Property('auto')\n], Popup.prototype, \"width\", void 0);\n__decorate([\n    Property(null)\n], Popup.prototype, \"content\", void 0);\n__decorate([\n    Property('container')\n], Popup.prototype, \"targetType\", void 0);\n__decorate([\n    Property(null)\n], Popup.prototype, \"viewPortElement\", void 0);\n__decorate([\n    Property({ X: 'none', Y: 'none' })\n], Popup.prototype, \"collision\", void 0);\n__decorate([\n    Property('')\n], Popup.prototype, \"relateTo\", void 0);\n__decorate([\n    Complex({}, PositionData)\n], Popup.prototype, \"position\", void 0);\n__decorate([\n    Property(0)\n], Popup.prototype, \"offsetX\", void 0);\n__decorate([\n    Property(0)\n], Popup.prototype, \"offsetY\", void 0);\n__decorate([\n    Property(1000)\n], Popup.prototype, \"zIndex\", void 0);\n__decorate([\n    Property(false)\n], Popup.prototype, \"enableRtl\", void 0);\n__decorate([\n    Property('reposition')\n], Popup.prototype, \"actionOnScroll\", void 0);\n__decorate([\n    Property(null)\n], Popup.prototype, \"showAnimation\", void 0);\n__decorate([\n    Property(null)\n], Popup.prototype, \"hideAnimation\", void 0);\n__decorate([\n    Event()\n], Popup.prototype, \"open\", void 0);\n__decorate([\n    Event()\n], Popup.prototype, \"close\", void 0);\n__decorate([\n    Event()\n], Popup.prototype, \"targetExitViewport\", void 0);\nPopup = __decorate([\n    NotifyPropertyChanges\n], Popup);\n/**\n * Gets scrollable parent elements for the given element.\n * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.\n * @private\n */\nfunction getScrollableParent(element, fixedParent) {\n    let eleStyle = getComputedStyle(element);\n    let scrollParents = [];\n    let overflowRegex = /(auto|scroll)/;\n    let parent = element.parentElement;\n    while (parent && parent.tagName !== 'HTML') {\n        let parentStyle = getComputedStyle(parent);\n        if (!(eleStyle.position === 'absolute' && parentStyle.position === 'static')\n            && overflowRegex.test(parentStyle.overflow + parentStyle.overflowY + parentStyle.overflowX)) {\n            scrollParents.push(parent);\n        }\n        parent = parent.parentElement;\n    }\n    if (!fixedParent) {\n        scrollParents.push(document);\n    }\n    return scrollParents;\n}\n/**\n * Gets the maximum z-index of the given element.\n * @param { HTMLElement } element - Specify the element to get the maximum z-index of it.\n * @private\n */\nfunction getZindexPartial(element) {\n    // upto body traversal\n    let parent = element.parentElement;\n    let parentZindex = [];\n    while (parent) {\n        if (parent.tagName !== 'BODY') {\n            let index = document.defaultView.getComputedStyle(parent, null).getPropertyValue('z-index');\n            let position = document.defaultView.getComputedStyle(parent, null).getPropertyValue('position');\n            if (index !== 'auto' && position !== 'static') {\n                parentZindex.push(index);\n            }\n            parent = parent.parentElement;\n        }\n        else {\n            break;\n        }\n    }\n    //Body direct children element traversal\n    let childrenZindex = [];\n    for (let i = 0; i < document.body.children.length; i++) {\n        if (!element.isEqualNode(document.body.children[i])) {\n            let index = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('z-index');\n            let position = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('position');\n            if (index !== 'auto' && position !== 'static') {\n                childrenZindex.push(index);\n            }\n        }\n    }\n    childrenZindex.push('999');\n    let siblingsZindex = [];\n    if (!isNullOrUndefined(element.parentElement) && element.parentElement.tagName !== 'BODY') {\n        let childNodes = [].slice.call(element.parentElement.children);\n        for (let i = 0; i < childNodes.length; i++) {\n            let index = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('z-index');\n            let position = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('position');\n            if (index !== 'auto' && position !== 'static') {\n                siblingsZindex.push(index);\n            }\n        }\n    }\n    let finalValue = parentZindex.concat(childrenZindex, siblingsZindex);\n    let currentZindexValue = Math.max.apply(Math, finalValue) + 1;\n    // Checking the max-zindex value\n    return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;\n}\n/**\n * Gets the maximum z-index of the page.\n * @param { HTMLElement } tagName - Specify the tagName to get the maximum z-index of it.\n * @private\n */\nfunction getMaxZindex(tagName = ['*']) {\n    let maxZindex = [];\n    for (let i = 0; i < tagName.length; i++) {\n        let elements = document.getElementsByTagName(tagName[i]);\n        for (let i = 0; i < elements.length; i++) {\n            let index = document.defaultView.getComputedStyle(elements[i], null).getPropertyValue('z-index');\n            let position = document.defaultView.getComputedStyle(elements[i], null).getPropertyValue('position');\n            if (index !== 'auto' && position !== 'static') {\n                maxZindex.push(index);\n            }\n        }\n    }\n    let currentZindexValue = Math.max.apply(Math, maxZindex) + 1;\n    return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;\n}\n\n/**\n * Popup Components\n */\n\n/**\n * Popup Components\n */\n\n/**\n * Resize library\n */\nlet elementClass = ['north-west', 'north', 'north-east', 'west', 'east', 'south-west', 'south', 'south-east'];\nlet targetElement;\nlet selectedHandler;\nlet originalWidth = 0;\nlet originalHeight = 0;\nlet originalX = 0;\nlet originalY = 0;\nlet originalMouseX = 0;\nlet originalMouseY = 0;\nconst RESIZE_HANDLER = 'e-resize-handle';\nconst FOCUSED_HANDLER = 'e-focused-handle';\nlet RESTRICT_LEFT = ['e-restrict-left'];\nconst RESIZE_WITHIN_VIEWPORT = 'e-resize-viewport';\nlet minHeight;\nlet maxHeight;\nlet minWidth;\nlet maxWidth;\nlet containerElement;\nlet resizeStart = null;\nlet resize = null;\nlet resizeEnd = null;\nlet resizeWestWidth;\nlet setLeft = true;\nlet previousWidth = 0;\nlet setWidth = true;\n// tslint:disable-next-line\nlet proxy;\nfunction createResize(args) {\n    resizeStart = args.resizeBegin;\n    resize = args.resizing;\n    resizeEnd = args.resizeComplete;\n    targetElement = getDOMElement(args.element);\n    containerElement = getDOMElement(args.boundary);\n    let directions = args.direction.split(' ');\n    for (let i = 0; i < directions.length; i++) {\n        let resizeHandler = createElement('div', { className: 'e-icons ' + RESIZE_HANDLER + ' ' + 'e-' + directions[i] });\n        targetElement.appendChild(resizeHandler);\n    }\n    minHeight = args.minHeight;\n    minWidth = args.minWidth;\n    maxWidth = args.maxWidth;\n    maxHeight = args.maxHeight;\n    if (args.proxy && args.proxy.element && args.proxy.element.classList.contains('e-dialog')) {\n        wireEvents(args.proxy);\n    }\n    else {\n        wireEvents();\n    }\n}\nfunction getDOMElement(element) {\n    let domElement;\n    if (!isNullOrUndefined(element)) {\n        if (typeof (element) === 'string') {\n            domElement = document.querySelector(element);\n        }\n        else {\n            domElement = element;\n        }\n    }\n    return domElement;\n}\n// tslint:disable-next-line\nfunction wireEvents(args) {\n    if (isNullOrUndefined(args)) {\n        args = this;\n    }\n    let resizers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);\n    for (let i = 0; i < resizers.length; i++) {\n        selectedHandler = resizers[i];\n        EventHandler.add(selectedHandler, 'mousedown', onMouseDown, args);\n        let eventName = (Browser.info.name === 'msie') ? 'pointerdown' : 'touchstart';\n        EventHandler.add(selectedHandler, eventName, onTouchStart, args);\n    }\n}\n/* istanbul ignore next */\nfunction getEventType(e) {\n    return (e.indexOf('mouse') > -1) ? 'mouse' : 'touch';\n}\n/* istanbul ignore next */\nfunction onMouseDown(e) {\n    e.preventDefault();\n    targetElement = e.target.parentElement;\n    calculateValues();\n    originalMouseX = e.pageX;\n    originalMouseY = e.pageY;\n    e.target.classList.add(FOCUSED_HANDLER);\n    if (!isNullOrUndefined(resizeStart)) {\n        proxy = this;\n        if (resizeStart(e, proxy) === true) {\n            return;\n        }\n    }\n    let target = (isNullOrUndefined(containerElement)) ? document : containerElement;\n    EventHandler.add(target, 'mousemove', onMouseMove, this);\n    EventHandler.add(document, 'mouseup', onMouseUp, this);\n    for (let i = 0; i < RESTRICT_LEFT.length; i++) {\n        if (targetElement.classList.contains(RESTRICT_LEFT[i])) {\n            setLeft = false;\n        }\n        else {\n            setLeft = true;\n        }\n    }\n}\n/* istanbul ignore next */\nfunction onMouseUp(e) {\n    let touchMoveEvent = (Browser.info.name === 'msie') ? 'pointermove' : 'touchmove';\n    let touchEndEvent = (Browser.info.name === 'msie') ? 'pointerup' : 'touchend';\n    let target = (isNullOrUndefined(containerElement)) ? document : containerElement;\n    EventHandler.remove(target, 'mousemove', onMouseMove);\n    EventHandler.remove(target, touchMoveEvent, onMouseMove);\n    let eventName = (Browser.info.name === 'msie') ? 'pointerdown' : 'touchstart';\n    EventHandler.remove(target, eventName, onMouseMove);\n    if (!isNullOrUndefined(document.body.querySelector('.' + FOCUSED_HANDLER))) {\n        document.body.querySelector('.' + FOCUSED_HANDLER).classList.remove(FOCUSED_HANDLER);\n    }\n    if (!isNullOrUndefined(resizeEnd)) {\n        proxy = this;\n        resizeEnd(e, proxy);\n    }\n    EventHandler.remove(document, 'mouseup', onMouseUp);\n    EventHandler.remove(document, touchEndEvent, onMouseUp);\n}\n/* istanbul ignore next */\nfunction calculateValues() {\n    originalWidth = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('width').replace('px', ''));\n    originalHeight = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('height').replace('px', ''));\n    originalX = targetElement.getBoundingClientRect().left;\n    originalY = targetElement.getBoundingClientRect().top;\n}\n/* istanbul ignore next */\nfunction onTouchStart(e) {\n    targetElement = e.target.parentElement;\n    calculateValues();\n    let coordinates = e.touches ? e.changedTouches[0] : e;\n    originalMouseX = coordinates.pageX;\n    originalMouseY = coordinates.pageY;\n    if (!isNullOrUndefined(resizeStart)) {\n        proxy = this;\n        if (resizeStart(e, proxy) === true) {\n            return;\n        }\n    }\n    let touchMoveEvent = (Browser.info.name === 'msie') ? 'pointermove' : 'touchmove';\n    let touchEndEvent = (Browser.info.name === 'msie') ? 'pointerup' : 'touchend';\n    let target = (isNullOrUndefined(containerElement)) ? document : containerElement;\n    EventHandler.add(target, touchMoveEvent, onMouseMove, this);\n    EventHandler.add(document, touchEndEvent, onMouseUp);\n}\n/* istanbul ignore next */\nfunction onMouseMove(e) {\n    if (e.target.classList.contains(RESIZE_HANDLER) && e.target.classList.contains(FOCUSED_HANDLER)) {\n        selectedHandler = e.target;\n    }\n    else if (!isNullOrUndefined(document.body.querySelector('.' + FOCUSED_HANDLER))) {\n        selectedHandler = document.body.querySelector('.' + FOCUSED_HANDLER);\n    }\n    if (!isNullOrUndefined(selectedHandler)) {\n        let resizeTowards = '';\n        for (let i = 0; i < elementClass.length; i++) {\n            if (selectedHandler.classList.contains('e-' + elementClass[i])) {\n                resizeTowards = elementClass[i];\n            }\n        }\n        if (!isNullOrUndefined(resize)) {\n            proxy = this;\n            resize(e, proxy);\n        }\n        switch (resizeTowards) {\n            case 'south':\n                resizeSouth(e);\n                break;\n            case 'north':\n                resizeNorth(e);\n                break;\n            case 'west':\n                resizeWest(e);\n                break;\n            case 'east':\n                resizeEast(e);\n                break;\n            case 'south-east':\n                resizeSouth(e);\n                resizeEast(e);\n                break;\n            case 'south-west':\n                resizeSouth(e);\n                resizeWest(e);\n                break;\n            case 'north-east':\n                resizeNorth(e);\n                resizeEast(e);\n                break;\n            case 'north-west':\n                resizeNorth(e);\n                resizeWest(e);\n                break;\n            default: break;\n        }\n    }\n}\n/* istanbul ignore next */\nfunction getClientRectValues(element) {\n    return element.getBoundingClientRect();\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\nfunction resizeSouth(e) {\n    let documentHeight = document.documentElement.clientHeight;\n    let calculateValue = false;\n    let containerRectValues;\n    let coordinates = e.touches ? e.changedTouches[0] : e;\n    let currentpageY = coordinates.pageY;\n    let targetRectValues = getClientRectValues(targetElement);\n    if (!isNullOrUndefined(containerElement)) {\n        containerRectValues = getClientRectValues(containerElement);\n    }\n    if (!isNullOrUndefined(containerElement)) {\n        calculateValue = true;\n    }\n    else if (isNullOrUndefined(containerElement) && ((documentHeight - currentpageY) >= 0 || (targetRectValues.top < 0))) {\n        calculateValue = true;\n    }\n    let calculatedHeight = originalHeight + (currentpageY - originalMouseY);\n    calculatedHeight = (calculatedHeight > minHeight) ? calculatedHeight : minHeight;\n    let containerTop = 0;\n    if (!isNullOrUndefined(containerElement)) {\n        containerTop = containerRectValues.top;\n    }\n    let borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetHeight - containerElement.clientHeight;\n    let topWithoutborder = (targetRectValues.top - containerTop) - (borderValue / 2);\n    topWithoutborder = (topWithoutborder < 0) ? 0 : topWithoutborder;\n    if (targetRectValues.top > 0 && (topWithoutborder + calculatedHeight) > maxHeight) {\n        calculateValue = false;\n        if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {\n            return;\n        }\n        targetElement.style.height = (maxHeight - parseInt(topWithoutborder.toString(), 10)) + 'px';\n        return;\n    }\n    let targetTop = 0;\n    if (calculateValue) {\n        if (targetRectValues.top < 0 && (documentHeight + (targetRectValues.height + targetRectValues.top) > 0)) {\n            targetTop = targetRectValues.top;\n            if ((calculatedHeight + targetTop) <= 30) {\n                calculatedHeight = (targetRectValues.height - (targetRectValues.height + targetRectValues.top)) + 30;\n            }\n        }\n        if (((calculatedHeight + targetRectValues.top) >= maxHeight)) {\n            targetElement.style.height = targetRectValues.height +\n                (documentHeight - (targetRectValues.height + targetRectValues.top)) + 'px';\n        }\n        let calculatedTop = (isNullOrUndefined(containerElement)) ? targetTop : topWithoutborder;\n        if (calculatedHeight >= minHeight && ((calculatedHeight + calculatedTop) <= maxHeight)) {\n            targetElement.style.height = calculatedHeight + 'px';\n        }\n    }\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\nfunction resizeNorth(e) {\n    let calculateValue = false;\n    let boundaryRectValues;\n    let pageY = (getEventType(e.type) === 'mouse') ? e.pageY : e.touches[0].pageY;\n    let targetRectValues = getClientRectValues(targetElement);\n    if (!isNullOrUndefined(containerElement)) {\n        boundaryRectValues = getClientRectValues(containerElement);\n    }\n    if (!isNullOrUndefined(containerElement) && (targetRectValues.top - boundaryRectValues.top) > 0) {\n        calculateValue = true;\n    }\n    else if (isNullOrUndefined(containerElement) && pageY > 0) {\n        calculateValue = true;\n    }\n    let currentHeight = originalHeight - (pageY - originalMouseY);\n    if ((getClientRectValues(targetElement).bottom + currentHeight) > maxHeight) {\n        calculateValue = false;\n        targetElement.style.height = maxHeight - getClientRectValues(targetElement).bottom + 'px';\n    }\n    if (calculateValue) {\n        if (currentHeight >= minHeight && currentHeight <= maxHeight) {\n            let containerTop = 0;\n            if (!isNullOrUndefined(containerElement)) {\n                containerTop = boundaryRectValues.top;\n            }\n            let top = (originalY - containerTop) + (pageY - originalMouseY);\n            top = top > 0 ? top : 1;\n            targetElement.style.height = currentHeight + 'px';\n            targetElement.style.top = top + 'px';\n        }\n    }\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\nfunction resizeWest(e) {\n    let documentWidth = document.documentElement.clientWidth;\n    let calculateValue = false;\n    let rectValues;\n    if (!isNullOrUndefined(containerElement)) {\n        rectValues = getClientRectValues(containerElement);\n    }\n    let pageX = (getEventType(e.type) === 'mouse') ? e.pageX : e.touches[0].pageX;\n    let targetRectValues = getClientRectValues(targetElement);\n    let borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetWidth - containerElement.clientWidth;\n    let left = isNullOrUndefined(containerElement) ? 0 : rectValues.left;\n    let containerWidth = isNullOrUndefined(containerElement) ? 0 : rectValues.width;\n    if (isNullOrUndefined(resizeWestWidth)) {\n        if (!isNullOrUndefined(containerElement)) {\n            resizeWestWidth = (((targetRectValues.left - left) - borderValue / 2)) + targetRectValues.width;\n            resizeWestWidth = resizeWestWidth + (containerWidth - borderValue - resizeWestWidth);\n        }\n        else {\n            resizeWestWidth = documentWidth;\n        }\n    }\n    if (!isNullOrUndefined(containerElement) &&\n        (((targetRectValues.left - rectValues.left) + targetRectValues.width +\n            (rectValues.right - targetRectValues.right)) - borderValue) <= maxWidth) {\n        calculateValue = true;\n    }\n    else if (isNullOrUndefined(containerElement) && pageX >= 0) {\n        calculateValue = true;\n    }\n    let calculatedWidth = originalWidth - (pageX - originalMouseX);\n    if (setLeft) {\n        calculatedWidth = (calculatedWidth > resizeWestWidth) ? resizeWestWidth : calculatedWidth;\n    }\n    if (calculateValue) {\n        if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {\n            let containerLeft = 0;\n            if (!isNullOrUndefined(containerElement)) {\n                containerLeft = rectValues.left;\n            }\n            let left = (originalX - containerLeft) + (pageX - originalMouseX);\n            left = (left > 0) ? left : 1;\n            if (calculatedWidth !== previousWidth && setWidth) {\n                targetElement.style.width = calculatedWidth + 'px';\n            }\n            if (setLeft) {\n                targetElement.style.left = left + 'px';\n                if (left === 1) {\n                    setWidth = false;\n                }\n                else {\n                    setWidth = true;\n                }\n            }\n        }\n    }\n    previousWidth = calculatedWidth;\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\nfunction resizeEast(e) {\n    let documentWidth = document.documentElement.clientWidth;\n    let calculateValue = false;\n    let containerRectValues;\n    if (!isNullOrUndefined(containerElement)) {\n        containerRectValues = getClientRectValues(containerElement);\n    }\n    let coordinates = e.touches ? e.changedTouches[0] : e;\n    let pageX = coordinates.pageX;\n    let targetRectValues = getClientRectValues(targetElement);\n    if (!isNullOrUndefined(containerElement) && (((targetRectValues.left - containerRectValues.left) + targetRectValues.width) < maxWidth\n        || (targetRectValues.right - containerRectValues.left) > targetRectValues.width)) {\n        calculateValue = true;\n    }\n    else if (isNullOrUndefined(containerElement) && (documentWidth - pageX) > 0) {\n        calculateValue = true;\n    }\n    let calculatedWidth = originalWidth + (pageX - originalMouseX);\n    let containerLeft = 0;\n    if (!isNullOrUndefined(containerElement)) {\n        containerLeft = containerRectValues.left;\n    }\n    if (((targetRectValues.left - containerLeft) + calculatedWidth) > maxWidth) {\n        calculateValue = false;\n        if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {\n            return;\n        }\n        targetElement.style.width = maxWidth - (targetRectValues.left - containerLeft) + 'px';\n    }\n    if (calculateValue) {\n        if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {\n            targetElement.style.width = calculatedWidth + 'px';\n        }\n    }\n}\n/* istanbul ignore next */\nfunction setMinHeight(minimumHeight) {\n    minHeight = minimumHeight;\n}\nfunction removeResize() {\n    let handlers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);\n    for (let i = 0; i < handlers.length; i++) {\n        detach(handlers[i]);\n    }\n}\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ButtonProps extends ChildProperty {\n}\n__decorate$1([\n    Property()\n], ButtonProps.prototype, \"buttonModel\", void 0);\n__decorate$1([\n    Property('Button')\n], ButtonProps.prototype, \"type\", void 0);\n__decorate$1([\n    Event()\n], ButtonProps.prototype, \"click\", void 0);\n/**\n * Configures the animation properties for both open and close the dialog.\n */\nclass AnimationSettings extends ChildProperty {\n}\n__decorate$1([\n    Property('Fade')\n], AnimationSettings.prototype, \"effect\", void 0);\n__decorate$1([\n    Property(400)\n], AnimationSettings.prototype, \"duration\", void 0);\n__decorate$1([\n    Property(0)\n], AnimationSettings.prototype, \"delay\", void 0);\nconst ROOT = 'e-dialog';\nconst RTL = 'e-rtl';\nconst DLG_HEADER_CONTENT = 'e-dlg-header-content';\nconst DLG_HEADER = 'e-dlg-header';\nconst DLG_FOOTER_CONTENT = 'e-footer-content';\nconst MODAL_DLG = 'e-dlg-modal';\nconst DLG_CONTENT = 'e-dlg-content';\nconst DLG_CLOSE_ICON = 'e-icon-dlg-close';\nconst DLG_OVERLAY = 'e-dlg-overlay';\nconst DLG_TARGET = 'e-dlg-target';\nconst DLG_CONTAINER = 'e-dlg-container';\nconst SCROLL_DISABLED = 'e-scroll-disabled';\nconst DLG_PRIMARY_BUTTON = 'e-primary';\nconst ICON = 'e-icons';\nconst POPUP_ROOT = 'e-popup';\nconst DEVICE = 'e-device';\nconst FULLSCREEN = 'e-dlg-fullscreen';\nconst DLG_CLOSE_ICON_BTN = 'e-dlg-closeicon-btn';\nconst DLG_HIDE = 'e-popup-close';\nconst DLG_SHOW = 'e-popup-open';\nconst DLG_UTIL_DEFAULT_TITLE = 'Information';\nconst DLG_UTIL_ROOT = 'e-scroll-disabled';\nconst DLG_UTIL_ALERT = 'e-alert-dialog';\nconst DLG_UTIL_CONFIRM = 'e-confirm-dialog';\nconst DLG_RESIZABLE = 'e-dlg-resizable';\nconst DLG_RESTRICT_LEFT_VALUE = 'e-restrict-left';\nconst DLG_RESTRICT_WIDTH_VALUE = 'e-resize-viewport';\nconst DLG_REF_ELEMENT = 'e-dlg-ref-element';\n/**\n * Represents the dialog component that displays the information and get input from the user.\n * Two types of dialog components are `Modal and Modeless (non-modal)` depending on its interaction with parent application.\n * ```html\n * <div id=\"dialog\"></div>\n * ```\n * ```typescript\n * <script>\n *   var dialogObj = new Dialog({ header: 'Dialog' });\n *   dialogObj.appendTo(\"#dialog\");\n * </script>\n * ```\n */\nlet Dialog = class Dialog extends Component {\n    /**\n     * Constructor for creating the widget\n     * @hidden\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    /**\n     * Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.initialize();\n        this.initRender();\n        this.wireEvents();\n        if (this.width === '100%') {\n            this.element.style.width = '';\n        }\n        if (this.minHeight !== '') {\n            this.element.style.minHeight = this.minHeight.toString();\n        }\n        if (this.enableResize) {\n            this.setResize();\n            if (this.animationSettings.effect === 'None') {\n                this.getMinHeight();\n            }\n        }\n        this.renderComplete();\n    }\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        this.headerContent = null;\n        this.allowMaxHeight = true;\n        this.preventVisibility = true;\n        this.clonedEle = this.element.cloneNode(true);\n        this.closeIconClickEventHandler = (event) => {\n            this.hide(event);\n        };\n        this.dlgOverlayClickEventHandler = (event) => {\n            this.trigger('overlayClick', event);\n            this.focusContent();\n        };\n        let localeText = { close: 'Close' };\n        this.l10n = new L10n('dialog', localeText, this.locale);\n        this.checkPositionData();\n        if (isNullOrUndefined(this.target)) {\n            let prevOnChange = this.isProtectedOnChange;\n            this.isProtectedOnChange = true;\n            this.target = document.body;\n            this.isProtectedOnChange = prevOnChange;\n        }\n    }\n    ;\n    isNumberValue(value) {\n        let isNumber = /^[-+]?\\d*\\.?\\d+$/.test(value);\n        return isNumber;\n    }\n    checkPositionData() {\n        if (!isNullOrUndefined(this.position)) {\n            if (!isNullOrUndefined(this.position.X) && (typeof (this.position.X) !== 'number')) {\n                let isNumber = this.isNumberValue(this.position.X);\n                if (isNumber) {\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    this.position.X = parseFloat(this.position.X);\n                    this.isProtectedOnChange = prevOnChange;\n                }\n            }\n            if (!isNullOrUndefined(this.position.Y) && (typeof (this.position.Y) !== 'number')) {\n                let isNumber = this.isNumberValue(this.position.Y);\n                if (isNumber) {\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    this.position.Y = parseFloat(this.position.Y);\n                    this.isProtectedOnChange = prevOnChange;\n                }\n            }\n        }\n    }\n    getEle(list, selector) {\n        let element = undefined;\n        for (let i = 0; i < list.length; i++) {\n            if (list[i].classList.contains(selector)) {\n                element = list[i];\n                break;\n            }\n        }\n        return element;\n    }\n    /* istanbul ignore next */\n    getMinHeight() {\n        let computedHeaderHeight = '0px';\n        let computedFooterHeight = '0px';\n        if (!isNullOrUndefined(this.element.querySelector('.' + DLG_HEADER_CONTENT))) {\n            computedHeaderHeight = getComputedStyle(this.headerContent).height;\n        }\n        let footerEle = this.getEle(this.element.children, DLG_FOOTER_CONTENT);\n        if (!isNullOrUndefined(footerEle)) {\n            computedFooterHeight = getComputedStyle(footerEle).height;\n        }\n        let headerHeight = parseInt(computedHeaderHeight.slice(0, computedHeaderHeight.indexOf('p')), 10);\n        let footerHeight = parseInt(computedFooterHeight.slice(0, computedFooterHeight.indexOf('p')), 10);\n        setMinHeight(headerHeight + 30 + footerHeight);\n        return (headerHeight + 30 + footerHeight);\n    }\n    onResizeStart(args, dialogObj) {\n        dialogObj.trigger('resizeStart', args);\n        return args.cancel;\n    }\n    onResizing(args, dialogObj) {\n        dialogObj.trigger('resizing', args);\n    }\n    onResizeComplete(args, dialogObj) {\n        dialogObj.trigger('resizeStop', args);\n    }\n    setResize() {\n        if (this.enableResize) {\n            if (this.isBlazorServerRender() && !isNullOrUndefined(this.element.querySelector('.e-icons.e-resize-handle'))) {\n                return;\n            }\n            this.element.classList.add(DLG_RESIZABLE);\n            let computedHeight = getComputedStyle(this.element).minHeight;\n            let computedWidth = getComputedStyle(this.element).minWidth;\n            let direction = this.enableRtl ? 'south-west' : 'south-east';\n            if (this.isModal && this.enableRtl) {\n                this.element.classList.add(DLG_RESTRICT_LEFT_VALUE);\n            }\n            else if (this.isModal && this.target === document.body) {\n                this.element.classList.add(DLG_RESTRICT_WIDTH_VALUE);\n            }\n            createResize({\n                element: this.element,\n                direction: direction,\n                minHeight: parseInt(computedHeight.slice(0, computedWidth.indexOf('p')), 10),\n                maxHeight: this.targetEle.clientHeight,\n                minWidth: parseInt(computedWidth.slice(0, computedWidth.indexOf('p')), 10),\n                maxWidth: this.targetEle.clientWidth,\n                boundary: this.target === document.body ? null : this.targetEle,\n                resizeBegin: this.onResizeStart.bind(this),\n                resizeComplete: this.onResizeComplete.bind(this),\n                resizing: this.onResizing.bind(this),\n                proxy: this\n            });\n        }\n        else {\n            removeResize();\n            if (this.isModal) {\n                this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);\n            }\n            else {\n                this.element.classList.remove(DLG_RESTRICT_WIDTH_VALUE);\n            }\n            this.element.classList.remove(DLG_RESIZABLE);\n        }\n    }\n    /* istanbul ignore next */\n    keyDown(event) {\n        if (event.keyCode === 9) {\n            if (this.isModal) {\n                let buttonObj;\n                if (!isNullOrUndefined(this.btnObj)) {\n                    buttonObj = this.btnObj[this.btnObj.length - 1];\n                }\n                if ((isNullOrUndefined(this.btnObj)) && (!isNullOrUndefined(this.ftrTemplateContent))) {\n                    let value = 'input,select,textarea,button,a,[contenteditable=\"true\"],[tabindex]';\n                    let items = this.ftrTemplateContent.querySelectorAll(value);\n                    buttonObj = { element: items[items.length - 1] };\n                }\n                if (!isNullOrUndefined(buttonObj) && document.activeElement === buttonObj.element && !event.shiftKey) {\n                    event.preventDefault();\n                    this.focusableElements(this.element).focus();\n                }\n                if (document.activeElement === this.focusableElements(this.element) && event.shiftKey) {\n                    event.preventDefault();\n                    if (!isNullOrUndefined(buttonObj)) {\n                        buttonObj.element.focus();\n                    }\n                }\n            }\n        }\n        let element = document.activeElement;\n        let isTagName = (['input', 'textarea'].indexOf(element.tagName.toLowerCase()) > -1);\n        let isContentEdit = false;\n        if (!isTagName) {\n            isContentEdit = element.hasAttribute('contenteditable') && element.getAttribute('contenteditable') === 'true';\n        }\n        if (event.keyCode === 27 && this.closeOnEscape) {\n            this.hide(event);\n        }\n        if ((event.keyCode === 13 && !event.ctrlKey && element.tagName.toLowerCase() !== 'textarea' &&\n            isTagName && !isNullOrUndefined(this.primaryButtonEle)) ||\n            (event.keyCode === 13 && event.ctrlKey && (element.tagName.toLowerCase() === 'textarea' ||\n                isContentEdit)) && !isNullOrUndefined(this.primaryButtonEle)) {\n            let buttonIndex;\n            let firstPrimary = this.buttons.some((data, index) => {\n                buttonIndex = index;\n                let buttonModel = data.buttonModel;\n                return !isNullOrUndefined(buttonModel) && buttonModel.isPrimary === true;\n            });\n            if (firstPrimary && typeof (this.buttons[buttonIndex].click) === 'function') {\n                setTimeout(() => {\n                    this.buttons[buttonIndex].click.call(this, event);\n                });\n            }\n        }\n    }\n    /**\n     * Initialize the control rendering\n     * @private\n     */\n    initialize() {\n        if (!isNullOrUndefined(this.target)) {\n            this.targetEle = ((typeof this.target) === 'string') ?\n                document.querySelector(this.target) : this.target;\n        }\n        if (!this.isBlazorServerRender()) {\n            addClass([this.element], ROOT);\n        }\n        if (Browser.isDevice) {\n            addClass([this.element], DEVICE);\n        }\n        if (!this.isBlazorServerRender()) {\n            this.setCSSClass();\n        }\n        this.setMaxHeight();\n    }\n    /**\n     * Initialize the rendering\n     * @private\n     */\n    initRender() {\n        this.initialRender = true;\n        if (!this.isBlazorServerRender()) {\n            attributes(this.element, { role: 'dialog' });\n        }\n        if (this.zIndex === 1000) {\n            this.setzIndex(this.element, false);\n            this.calculatezIndex = true;\n        }\n        else {\n            this.calculatezIndex = false;\n        }\n        if (this.isBlazorServerRender() && isNullOrUndefined(this.headerContent)) {\n            this.headerContent = this.element.getElementsByClassName('e-dlg-header-content')[0];\n        }\n        if (this.isBlazorServerRender() && isNullOrUndefined(this.contentEle)) {\n            this.contentEle = this.element.querySelector('#' + this.element.id + '_dialog-content');\n        }\n        if (!this.isBlazorServerRender()) {\n            this.setTargetContent();\n            if (this.header !== '' && !isNullOrUndefined(this.header)) {\n                this.setHeader();\n            }\n            if (this.showCloseIcon) {\n                this.renderCloseIcon();\n            }\n            this.setContent();\n            if (this.footerTemplate !== '' && !isNullOrUndefined(this.footerTemplate)) {\n                this.setFooterTemplate();\n            }\n            else if (!isNullOrUndefined(this.buttons[0].buttonModel)) {\n                this.setButton();\n            }\n        }\n        if (this.isBlazorServerRender()) {\n            if (!isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === '') {\n                this.setButton();\n            }\n        }\n        if (this.allowDragging && (!isNullOrUndefined(this.headerContent))) {\n            this.setAllowDragging();\n        }\n        if (!this.isBlazorServerRender()) {\n            attributes(this.element, { 'aria-modal': (this.isModal ? 'true' : 'false') });\n            if (this.isModal) {\n                this.setIsModal();\n            }\n        }\n        if (this.isBlazorServerRender() && isNullOrUndefined(this.dlgContainer)) {\n            this.dlgContainer = this.element.parentElement;\n            for (let i = 0, childNodes = this.dlgContainer.children; i < childNodes.length; i++) {\n                if (childNodes[i].classList.contains('e-dlg-overlay')) {\n                    this.dlgOverlay = childNodes[i];\n                }\n            }\n        }\n        if (this.element.classList.contains(DLG_UTIL_ALERT) !== true && this.element.classList.contains(DLG_UTIL_CONFIRM) !== true\n            && !isNullOrUndefined(this.element.parentElement)) {\n            let parentEle = this.isModal ? this.dlgContainer.parentElement : this.element.parentElement;\n            this.refElement = this.createElement('div', { className: DLG_REF_ELEMENT });\n            parentEle.insertBefore(this.refElement, (this.isModal ? this.dlgContainer : this.element));\n        }\n        if (!isNullOrUndefined(this.targetEle)) {\n            this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element);\n        }\n        this.popupObj = new Popup(this.element, {\n            height: this.height,\n            width: this.width,\n            zIndex: this.zIndex,\n            relateTo: this.target,\n            actionOnScroll: 'none',\n            enableRtl: this.enableRtl,\n            open: (event) => {\n                let eventArgs = {\n                    container: this.isModal ? this.dlgContainer : this.element,\n                    element: this.element,\n                    target: this.target,\n                    preventFocus: false\n                };\n                if (this.enableResize) {\n                    this.resetResizeIcon();\n                }\n                this.trigger('open', eventArgs, (openEventArgs) => {\n                    if (!openEventArgs.preventFocus) {\n                        this.focusContent();\n                    }\n                });\n            },\n            close: (event) => {\n                if (this.isModal) {\n                    addClass([this.dlgOverlay], 'e-fade');\n                }\n                this.unBindEvent(this.element);\n                if (this.isModal) {\n                    this.dlgContainer.style.display = 'none';\n                }\n                this.trigger('close', this.closeArgs);\n                let activeEle = document.activeElement;\n                if (!isNullOrUndefined(activeEle) && !isNullOrUndefined((activeEle).blur)) {\n                    activeEle.blur();\n                }\n                if (!isNullOrUndefined(this.storeActiveElement) && !isNullOrUndefined(this.storeActiveElement.focus)) {\n                    this.storeActiveElement.focus();\n                }\n            }\n        });\n        this.positionChange();\n        this.setEnableRTL();\n        if (!this.isBlazorServerRender()) {\n            addClass([this.element], DLG_HIDE);\n            if (this.isModal) {\n                this.setOverlayZindex();\n            }\n        }\n        if (this.visible) {\n            this.show();\n        }\n        else {\n            if (this.isModal) {\n                this.dlgOverlay.style.display = 'none';\n            }\n        }\n        this.initialRender = false;\n    }\n    resetResizeIcon() {\n        let dialogConHeight = this.getMinHeight();\n        if (this.targetEle.offsetHeight < dialogConHeight) {\n            let className = this.enableRtl ? 'e-south-west' : 'e-south-east';\n            let resizeIcon = this.element.querySelector('.' + className);\n            if (!isNullOrUndefined(resizeIcon)) {\n                resizeIcon.style.bottom = '-' + dialogConHeight.toString() + 'px';\n            }\n        }\n    }\n    setOverlayZindex(zIndexValue) {\n        let zIndex;\n        if (isNullOrUndefined(zIndexValue)) {\n            zIndex = parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex;\n        }\n        else {\n            zIndex = zIndexValue;\n        }\n        this.dlgOverlay.style.zIndex = (zIndex - 1).toString();\n        this.dlgContainer.style.zIndex = zIndex.toString();\n    }\n    positionChange() {\n        if (this.isModal) {\n            if (!isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {\n                this.setPopupPosition();\n            }\n            else if ((!isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y)))\n                || (isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y)))) {\n                this.setPopupPosition();\n            }\n            else {\n                this.element.style.top = '0px';\n                this.element.style.left = '0px';\n                this.dlgContainer.classList.add('e-dlg-' + this.position.X + '-' + this.position.Y);\n            }\n        }\n        else {\n            this.setPopupPosition();\n        }\n    }\n    setPopupPosition() {\n        this.popupObj.setProperties({\n            position: {\n                X: this.position.X, Y: this.position.Y\n            }\n        });\n    }\n    setAllowDragging() {\n        let handleContent = '.' + DLG_HEADER_CONTENT;\n        this.dragObj = new Draggable(this.element, {\n            clone: false,\n            abort: '.e-dlg-closeicon-btn',\n            handle: handleContent,\n            dragStart: (event) => {\n                this.trigger('dragStart', event, (dragEventArgs) => {\n                    if (isBlazor()) {\n                        dragEventArgs.bindEvents(event.dragElement);\n                    }\n                });\n            },\n            dragStop: (event) => {\n                if (this.isModal) {\n                    if (!isNullOrUndefined(this.position)) {\n                        this.dlgContainer.classList.remove('e-dlg-' + this.position.X + '-' + this.position.Y);\n                    }\n                    // Reset the dialog position after drag completion.\n                    this.element.style.position = 'relative';\n                }\n                this.trigger('dragStop', event);\n                this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);\n            },\n            drag: (event) => {\n                this.trigger('drag', event);\n            }\n        });\n        if (!isNullOrUndefined(this.targetEle)) {\n            this.dragObj.dragArea = this.targetEle;\n        }\n    }\n    setButton() {\n        if (!this.isBlazorServerRender()) {\n            this.buttonContent = [];\n            this.btnObj = [];\n            for (let i = 0; i < this.buttons.length; i++) {\n                let buttonType = !isNullOrUndefined(this.buttons[i].type) ? this.buttons[i].type.toLowerCase() : 'button';\n                let btn = this.createElement('button', { attrs: { type: buttonType } });\n                this.buttonContent.push(btn.outerHTML);\n            }\n            this.setFooterTemplate();\n        }\n        let footerBtn;\n        for (let i = 0, childNodes = this.element.children; i < childNodes.length; i++) {\n            if (childNodes[i].classList.contains(DLG_FOOTER_CONTENT)) {\n                footerBtn = childNodes[i].querySelectorAll('button');\n            }\n        }\n        for (let i = 0; i < this.buttons.length; i++) {\n            if (!this.isBlazorServerRender()) {\n                this.btnObj[i] = new Button(this.buttons[i].buttonModel);\n            }\n            if (this.isBlazorServerRender()) {\n                this.ftrTemplateContent = this.element.querySelector('.' + DLG_FOOTER_CONTENT);\n            }\n            if (!isNullOrUndefined(this.ftrTemplateContent) && typeof (this.buttons[i].click) === 'function' && footerBtn.length > 0) {\n                EventHandler.add(footerBtn[i], 'click', this.buttons[i].click, this);\n            }\n            if (!this.isBlazorServerRender() && !isNullOrUndefined(this.ftrTemplateContent)) {\n                this.btnObj[i].appendTo(this.ftrTemplateContent.children[i]);\n                this.btnObj[i].element.classList.add('e-flat');\n                this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];\n            }\n        }\n    }\n    setContent() {\n        attributes(this.element, { 'aria-describedby': this.element.id + '_dialog-content' });\n        this.contentEle = this.createElement('div', { className: DLG_CONTENT, id: this.element.id + '_dialog-content' });\n        if (this.innerContentElement) {\n            this.contentEle.appendChild(this.innerContentElement);\n        }\n        else if (!isNullOrUndefined(this.content) && this.content !== '' || !this.initialRender) {\n            if (typeof (this.content) === 'string' && !isBlazor()) {\n                this.contentEle.innerHTML = this.sanitizeHelper(this.content);\n            }\n            else if (this.content instanceof HTMLElement) {\n                this.contentEle.appendChild(this.content);\n            }\n            else {\n                this.setTemplate(this.content, this.contentEle);\n            }\n        }\n        if (!isNullOrUndefined(this.headerContent)) {\n            this.element.insertBefore(this.contentEle, this.element.children[1]);\n        }\n        else {\n            this.element.insertBefore(this.contentEle, this.element.children[0]);\n        }\n        if (this.height === 'auto') {\n            if (!this.isBlazorServerRender() && Browser.isIE && this.element.style.width === '' && !isNullOrUndefined(this.width)) {\n                this.element.style.width = formatUnit(this.width);\n            }\n            this.setMaxHeight();\n        }\n    }\n    setTemplate(template, toElement) {\n        let templateFn;\n        let templateProps;\n        if (toElement.classList.contains(DLG_HEADER)) {\n            templateProps = this.element.id + 'header';\n        }\n        else if (toElement.classList.contains(DLG_FOOTER_CONTENT)) {\n            templateProps = this.element.id + 'footerTemplate';\n        }\n        else {\n            templateProps = this.element.id + 'content';\n        }\n        let templateValue;\n        if (!isNullOrUndefined(template.outerHTML)) {\n            toElement.appendChild(template);\n        }\n        else if ((typeof template !== 'string') || (isBlazor() && !this.isStringTemplate)) {\n            templateFn = compile(template);\n            templateValue = template;\n        }\n        else {\n            toElement.innerHTML = this.sanitizeHelper(template);\n        }\n        let fromElements = [];\n        if (!isNullOrUndefined(templateFn)) {\n            let isString = (isBlazor() &&\n                !this.isStringTemplate && (templateValue).indexOf('<div>Blazor') === 0) ?\n                this.isStringTemplate : true;\n            for (let item of templateFn({}, null, null, templateProps, isString)) {\n                fromElements.push(item);\n            }\n            append([].slice.call(fromElements), toElement);\n        }\n    }\n    /**\n     * @hidden\n     */\n    sanitizeHelper(value) {\n        if (this.enableHtmlSanitizer) {\n            let dialogItem = SanitizeHtmlHelper.beforeSanitize();\n            let beforeEvent = {\n                cancel: false,\n                helper: null\n            };\n            extend(dialogItem, dialogItem, beforeEvent);\n            this.trigger('beforeSanitizeHtml', dialogItem);\n            if (dialogItem.cancel && !isNullOrUndefined(dialogItem.helper)) {\n                value = dialogItem.helper(value);\n            }\n            else if (!dialogItem.cancel) {\n                value = SanitizeHtmlHelper.serializeValue(dialogItem, value);\n            }\n        }\n        return value;\n    }\n    setMaxHeight() {\n        if (!this.allowMaxHeight) {\n            return;\n        }\n        let display = this.element.style.display;\n        this.element.style.display = 'none';\n        this.element.style.maxHeight = (!isNullOrUndefined(this.target)) && (this.targetEle.offsetHeight < window.innerHeight) ?\n            (this.targetEle.offsetHeight - 20) + 'px' : (window.innerHeight - 20) + 'px';\n        this.element.style.display = display;\n        if (Browser.isIE && this.height === 'auto' && !isNullOrUndefined(this.contentEle)\n            && this.element.offsetHeight < this.contentEle.offsetHeight) {\n            this.element.style.height = 'inherit';\n        }\n    }\n    setEnableRTL() {\n        if (!this.isBlazorServerRender()) {\n            this.enableRtl ? addClass([this.element], RTL) : removeClass([this.element], RTL);\n        }\n        if (!isNullOrUndefined(this.element.querySelector('.e-resize-handle'))) {\n            removeResize();\n            this.setResize();\n        }\n    }\n    setTargetContent() {\n        if (isNullOrUndefined(this.content) || this.content === '') {\n            let isContent = this.element.innerHTML.replace(/\\s|<(\\/?|\\!?)(!--!--)>/g, '') !== '';\n            if (this.element.children.length > 0 || isContent) {\n                this.innerContentElement = document.createDocumentFragment();\n                [].slice.call(this.element.childNodes).forEach((el) => {\n                    if (el.nodeType !== 8) {\n                        this.innerContentElement.appendChild(el);\n                    }\n                });\n            }\n        }\n    }\n    setHeader() {\n        if (this.headerEle) {\n            this.headerEle.innerHTML = '';\n        }\n        else {\n            this.headerEle = this.createElement('div', { id: this.element.id + '_title', className: DLG_HEADER });\n        }\n        this.createHeaderContent();\n        this.headerContent.appendChild(this.headerEle);\n        this.setTemplate(this.header, this.headerEle);\n        attributes(this.element, { 'aria-labelledby': this.element.id + '_title' });\n        this.element.insertBefore(this.headerContent, this.element.children[0]);\n    }\n    setFooterTemplate() {\n        if (this.ftrTemplateContent) {\n            this.ftrTemplateContent.innerHTML = '';\n        }\n        else {\n            this.ftrTemplateContent = this.createElement('div', {\n                className: DLG_FOOTER_CONTENT\n            });\n        }\n        if (this.footerTemplate !== '' && !isNullOrUndefined(this.footerTemplate)) {\n            this.setTemplate(this.footerTemplate, this.ftrTemplateContent);\n        }\n        else {\n            this.ftrTemplateContent.innerHTML = this.buttonContent.join('');\n        }\n        this.element.appendChild(this.ftrTemplateContent);\n    }\n    createHeaderContent() {\n        if (isNullOrUndefined(this.headerContent)) {\n            this.headerContent = this.createElement('div', { id: this.element.id + '_dialog-header', className: DLG_HEADER_CONTENT });\n        }\n    }\n    renderCloseIcon() {\n        this.closeIcon = this.createElement('button', { className: DLG_CLOSE_ICON_BTN, attrs: { type: 'button' } });\n        this.closeIconBtnObj = new Button({ cssClass: 'e-flat', iconCss: DLG_CLOSE_ICON + ' ' + ICON });\n        this.closeIconTitle();\n        if (!isNullOrUndefined(this.headerContent)) {\n            prepend([this.closeIcon], this.headerContent);\n        }\n        else {\n            this.createHeaderContent();\n            prepend([this.closeIcon], this.headerContent);\n            this.element.insertBefore(this.headerContent, this.element.children[0]);\n        }\n        this.closeIconBtnObj.appendTo(this.closeIcon);\n    }\n    closeIconTitle() {\n        this.l10n.setLocale(this.locale);\n        let closeIconTitle = this.l10n.getConstant('close');\n        this.closeIcon.setAttribute('title', closeIconTitle);\n        this.closeIcon.setAttribute('aria-label', closeIconTitle);\n    }\n    setCSSClass(oldCSSClass) {\n        if (this.cssClass) {\n            addClass([this.element], this.cssClass.split(' '));\n        }\n        if (oldCSSClass) {\n            removeClass([this.element], oldCSSClass.split(' '));\n        }\n    }\n    setIsModal() {\n        this.dlgContainer = this.createElement('div', { className: DLG_CONTAINER });\n        this.element.classList.remove(DLG_SHOW);\n        this.element.parentNode.insertBefore(this.dlgContainer, this.element);\n        this.dlgContainer.appendChild(this.element);\n        addClass([this.element], MODAL_DLG);\n        this.dlgOverlay = this.createElement('div', { className: DLG_OVERLAY });\n        this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString();\n        this.dlgContainer.appendChild(this.dlgOverlay);\n    }\n    getValidFocusNode(items) {\n        let node;\n        for (let u = 0; u < items.length; u++) {\n            node = items[u];\n            if ((node.clientHeight > 0 || (node.tagName.toLowerCase() === 'a' && node.hasAttribute('href'))) && node.tabIndex > -1 &&\n                !node.disabled && !this.disableElement(node, '[disabled],[aria-disabled=\"true\"],[type=\"hidden\"]')) {\n                return node;\n            }\n        }\n        return node;\n    }\n    focusableElements(content) {\n        if (!isNullOrUndefined(content)) {\n            let value = 'input,select,textarea,button,a,[contenteditable=\"true\"],[tabindex]';\n            let items = content.querySelectorAll(value);\n            return this.getValidFocusNode(items);\n        }\n        return null;\n    }\n    getAutoFocusNode(container) {\n        let node = container.querySelector('.' + DLG_CLOSE_ICON_BTN);\n        let value = '[autofocus]';\n        let items = container.querySelectorAll(value);\n        let validNode = this.getValidFocusNode(items);\n        if (isBlazor()) {\n            this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];\n        }\n        if (!isNullOrUndefined(validNode)) {\n            node = validNode;\n        }\n        else {\n            validNode = this.focusableElements(this.contentEle);\n            if (!isNullOrUndefined(validNode)) {\n                return node = validNode;\n            }\n            else if (!isNullOrUndefined(this.primaryButtonEle)) {\n                return this.element.querySelector('.' + DLG_PRIMARY_BUTTON);\n            }\n        }\n        return node;\n    }\n    disableElement(element, t) {\n        let elementMatch = element ? element.matches || element.webkitMatchesSelector || element.msMatchesSelector : null;\n        if (elementMatch) {\n            for (; element; element = element.parentNode) {\n                if (element instanceof Element && elementMatch.call(element, t)) {\n                    /* istanbul ignore next */\n                    return element;\n                }\n            }\n        }\n        return null;\n    }\n    focusContent() {\n        let element = this.getAutoFocusNode(this.element);\n        let node = !isNullOrUndefined(element) ? element : this.element;\n        node.focus();\n        this.bindEvent(this.element);\n    }\n    bindEvent(element) {\n        EventHandler.add(element, 'keydown', this.keyDown, this);\n    }\n    unBindEvent(element) {\n        EventHandler.remove(element, 'keydown', this.keyDown);\n    }\n    updateSanitizeContent() {\n        if (!this.isBlazorServerRender()) {\n            this.contentEle.innerHTML = this.sanitizeHelper(this.content);\n        }\n    }\n    isBlazorServerRender() {\n        return isBlazor() && this.isServerRendered;\n    }\n    /**\n     * Module required function\n     * @private\n     */\n    getModuleName() {\n        return 'dialog';\n    }\n    /**\n     * Called internally if any of the property value changed\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (!this.element.classList.contains(ROOT)) {\n            return;\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'content':\n                    if (!isNullOrUndefined(this.content) && this.content !== '') {\n                        if (this.isBlazorServerRender()) {\n                            this.contentEle = this.element.querySelector('.e-dlg-content');\n                        }\n                        if (!isNullOrUndefined(this.contentEle) && this.contentEle.getAttribute('role') !== 'dialog') {\n                            if (!this.isBlazorServerRender()) {\n                                this.contentEle.innerHTML = '';\n                            }\n                            typeof (this.content) === 'string' ? (this.isBlazorServerRender()\n                                && (this.contentEle.innerText === '')) ?\n                                this.contentEle.insertAdjacentHTML('beforeend', this.sanitizeHelper(this.content)) :\n                                this.updateSanitizeContent() :\n                                this.contentEle.appendChild(this.content);\n                            this.setMaxHeight();\n                        }\n                        else {\n                            if (!this.isBlazorServerRender() ||\n                                isNullOrUndefined(this.element.querySelector('.e-dlg-content'))) {\n                                this.setContent();\n                            }\n                        }\n                    }\n                    else if (!isNullOrUndefined(this.contentEle)) {\n                        detach(this.contentEle);\n                        this.contentEle = null;\n                    }\n                    break;\n                case 'header':\n                    if (this.header === '' || isNullOrUndefined(this.header)) {\n                        if (this.headerEle) {\n                            detach(this.headerEle);\n                            this.headerEle = null;\n                        }\n                    }\n                    else {\n                        if (!this.isBlazorServerRender() ||\n                            isNullOrUndefined(this.element.querySelector('.e-dlg-header-content'))) {\n                            this.setHeader();\n                        }\n                    }\n                    break;\n                case 'footerTemplate':\n                    if (this.footerTemplate === '' || isNullOrUndefined(this.footerTemplate)) {\n                        if (!this.ftrTemplateContent) {\n                            return;\n                        }\n                        detach(this.ftrTemplateContent);\n                        this.ftrTemplateContent = null;\n                        this.buttons = [{}];\n                    }\n                    else {\n                        if (!this.isBlazorServerRender() ||\n                            isNullOrUndefined(this.element.querySelector('.e-footer-content'))) {\n                            this.setFooterTemplate();\n                        }\n                        this.buttons = [{}];\n                    }\n                    break;\n                case 'showCloseIcon':\n                    if (this.element.getElementsByClassName(DLG_CLOSE_ICON).length > 0) {\n                        if (!this.showCloseIcon && (this.header === '' || isNullOrUndefined(this.header))) {\n                            detach(this.headerContent);\n                            this.headerContent = null;\n                        }\n                        else if (!this.showCloseIcon) {\n                            detach(this.closeIcon);\n                        }\n                        else {\n                            if (this.isBlazorServerRender()) {\n                                this.wireEvents();\n                            }\n                        }\n                    }\n                    else {\n                        if (!this.isBlazorServerRender()) {\n                            this.renderCloseIcon();\n                        }\n                        this.wireEvents();\n                    }\n                    break;\n                case 'locale':\n                    if (this.showCloseIcon) {\n                        this.closeIconTitle();\n                    }\n                    break;\n                case 'visible':\n                    this.visible ? this.show() : this.hide();\n                    break;\n                case 'isModal':\n                    this.updateIsModal();\n                    break;\n                case 'height':\n                    setStyleAttribute(this.element, { 'height': formatUnit(newProp.height) });\n                    break;\n                case 'width':\n                    setStyleAttribute(this.element, { 'width': formatUnit(newProp.width) });\n                    break;\n                case 'zIndex':\n                    this.popupObj.zIndex = this.zIndex;\n                    if (this.isModal) {\n                        this.setOverlayZindex(this.zIndex);\n                    }\n                    if (this.element.style.zIndex !== this.zIndex.toString()) {\n                        this.calculatezIndex = false;\n                    }\n                    break;\n                case 'cssClass':\n                    this.setCSSClass(oldProp.cssClass);\n                    break;\n                case 'buttons':\n                    let buttonCount = this.buttons.length;\n                    if (!isNullOrUndefined(this.ftrTemplateContent) && !this.isBlazorServerRender()) {\n                        detach(this.ftrTemplateContent);\n                        this.ftrTemplateContent = null;\n                    }\n                    for (let i = 0; i < buttonCount; i++) {\n                        if (!isNullOrUndefined(this.buttons[i].buttonModel)) {\n                            this.footerTemplate = '';\n                            this.setButton();\n                        }\n                    }\n                    break;\n                case 'allowDragging':\n                    if (this.allowDragging && (!isNullOrUndefined(this.headerContent))) {\n                        this.setAllowDragging();\n                    }\n                    else {\n                        this.dragObj.destroy();\n                    }\n                    break;\n                case 'target':\n                    this.setTarget(newProp.target);\n                    break;\n                case 'position':\n                    this.checkPositionData();\n                    if (this.isModal) {\n                        let positionX = isNullOrUndefined(oldProp.position.X) ? this.position.X : oldProp.position.X;\n                        let positionY = isNullOrUndefined(oldProp.position.Y) ? this.position.Y : oldProp.position.Y;\n                        if (this.dlgContainer.classList.contains('e-dlg-' + positionX + '-' + positionY)) {\n                            this.dlgContainer.classList.remove('e-dlg-' + positionX + '-' + positionY);\n                        }\n                    }\n                    this.positionChange();\n                    break;\n                case 'enableRtl':\n                    this.setEnableRTL();\n                    break;\n                case 'enableResize':\n                    this.setResize();\n                    break;\n            }\n        }\n    }\n    setTarget(target) {\n        this.popupObj.relateTo = target;\n        this.target = target;\n        this.targetEle = ((typeof this.target) === 'string') ?\n            document.querySelector(this.target) : this.target;\n        if (this.dragObj) {\n            this.dragObj.dragArea = this.targetEle;\n        }\n        this.setMaxHeight();\n        if (this.isModal) {\n            this.updateIsModal();\n        }\n        if (this.enableResize) {\n            this.setResize();\n        }\n    }\n    updateIsModal() {\n        this.element.setAttribute('aria-modal', this.isModal ? 'true' : 'false');\n        if (this.isModal) {\n            this.setIsModal();\n            this.element.style.top = '0px';\n            this.element.style.left = '0px';\n            if (!isNullOrUndefined(this.targetEle)) {\n                this.targetEle.appendChild(this.dlgContainer);\n            }\n        }\n        else {\n            removeClass([this.element], MODAL_DLG);\n            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n            detach(this.dlgOverlay);\n            while (this.dlgContainer.firstChild) {\n                this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);\n            }\n            this.dlgContainer.parentElement.removeChild(this.dlgContainer);\n        }\n        if (this.visible) {\n            this.show();\n        }\n        this.positionChange();\n        if (this.isModal && this.dlgOverlay) {\n            EventHandler.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);\n        }\n    }\n    setzIndex(zIndexElement, setPopupZindex) {\n        let prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.zIndex = getZindexPartial(zIndexElement);\n        this.isProtectedOnChange = prevOnChange;\n        if (setPopupZindex) {\n            this.popupObj.zIndex = this.zIndex;\n        }\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * To destroy the widget\n     * @method destroy\n     * @return {void}\n     * @memberof dialog\n     */\n    destroy() {\n        if (this.isDestroyed) {\n            return;\n        }\n        let classArray = [RTL, MODAL_DLG, DLG_RESIZABLE, DLG_RESTRICT_LEFT_VALUE, FULLSCREEN, DEVICE];\n        let attrs = ['role', 'aria-modal', 'aria-labelledby', 'aria-describedby', 'aria-grabbed', 'tabindex', 'style'];\n        removeClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);\n        if (this.element.classList.contains(FULLSCREEN)) {\n            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n        }\n        if (this.isModal) {\n            removeClass([(!isNullOrUndefined(this.targetEle) ? this.targetEle : document.body)], SCROLL_DISABLED);\n        }\n        this.unWireEvents();\n        if (!isNullOrUndefined(this.btnObj)) {\n            for (let i = 0; i < this.btnObj.length; i++) {\n                this.btnObj[i].destroy();\n            }\n        }\n        if (!isNullOrUndefined(this.dragObj)) {\n            this.dragObj.destroy();\n        }\n        if (this.popupObj.element.classList.contains(POPUP_ROOT)) {\n            this.popupObj.destroy();\n        }\n        removeClass([this.element], classArray);\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            removeClass([this.element], this.cssClass.split(' '));\n        }\n        if (!isNullOrUndefined(this.refElement) && !isNullOrUndefined(this.refElement.parentElement)) {\n            this.refElement.parentElement.insertBefore((this.isModal ? this.dlgContainer : this.element), this.refElement);\n            detach(this.refElement);\n            this.refElement = undefined;\n        }\n        if (this.isModal && !this.isBlazorServerRender()) {\n            detach(this.dlgOverlay);\n            this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer);\n            detach(this.dlgContainer);\n        }\n        if (!this.isBlazorServerRender()) {\n            this.element.innerHTML = this.clonedEle.innerHTML;\n        }\n        if (this.isBlazorServerRender()) {\n            if (!isNullOrUndefined(this.element.children)) {\n                for (let i = 0; i <= this.element.children.length; i++) {\n                    i = i - i;\n                    detach(this.element.children[i]);\n                }\n            }\n        }\n        for (let i = 0; i < attrs.length; i++) {\n            this.element.removeAttribute(attrs[i]);\n        }\n        if (!this.isBlazorServerRender()) {\n            super.destroy();\n        }\n        else {\n            this.isDestroyed = true;\n        }\n    }\n    /**\n     * Binding event to the element while widget creation\n     * @hidden\n     */\n    wireEvents() {\n        if (this.isBlazorServerRender() && this.showCloseIcon) {\n            this.closeIcon = this.element.getElementsByClassName('e-dlg-closeicon-btn')[0];\n        }\n        if (this.showCloseIcon) {\n            EventHandler.add(this.closeIcon, 'click', this.closeIconClickEventHandler, this);\n        }\n        if (this.isModal && this.dlgOverlay) {\n            EventHandler.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);\n        }\n    }\n    /**\n     * Unbinding event to the element while widget destroy\n     * @hidden\n     */\n    unWireEvents() {\n        if (this.showCloseIcon) {\n            EventHandler.remove(this.closeIcon, 'click', this.closeIconClickEventHandler);\n        }\n        if (this.isModal) {\n            EventHandler.remove(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler);\n        }\n        if (this.buttons.length > 0 && !isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === '') {\n            for (let i = 0; i < this.buttons.length; i++) {\n                if (typeof (this.buttons[i].click) === 'function') {\n                    EventHandler.remove(this.ftrTemplateContent.children[i], 'click', this.buttons[i].click);\n                }\n            }\n        }\n    }\n    /**\n     * Refreshes the dialog's position when the user changes its header and footer height/width dynamically.\n     * @return {void}\n     */\n    refreshPosition() {\n        this.popupObj.refreshPosition();\n    }\n    /**\n     * Opens the dialog if it is in hidden state.\n     * To open the dialog with full screen width, set the parameter to true.\n     * @param { boolean } isFullScreen - Enable the fullScreen Dialog.\n     * @return {void}\n     */\n    show(isFullScreen) {\n        if (!this.element.classList.contains(ROOT)) {\n            return;\n        }\n        if (!this.element.classList.contains(DLG_SHOW) || (!isNullOrUndefined(isFullScreen))) {\n            if (!isNullOrUndefined(isFullScreen)) {\n                this.fullScreen(isFullScreen);\n            }\n            let eventArgs = isBlazor() ? {\n                cancel: false,\n                element: this.element,\n                container: this.isModal ? this.dlgContainer : this.element,\n                maxHeight: this.element.style.maxHeight\n            } : {\n                cancel: false,\n                element: this.element,\n                container: this.isModal ? this.dlgContainer : this.element,\n                target: this.target,\n                maxHeight: this.element.style.maxHeight\n            };\n            this.trigger('beforeOpen', eventArgs, (beforeOpenArgs) => {\n                if (!beforeOpenArgs.cancel) {\n                    if (this.element.style.maxHeight !== eventArgs.maxHeight) {\n                        this.allowMaxHeight = false;\n                        this.element.style.maxHeight = eventArgs.maxHeight;\n                    }\n                    this.storeActiveElement = document.activeElement;\n                    this.element.tabIndex = -1;\n                    if (this.isModal && (!isNullOrUndefined(this.dlgOverlay))) {\n                        this.dlgOverlay.style.display = 'block';\n                        this.dlgContainer.style.display = 'flex';\n                        removeClass([this.dlgOverlay], 'e-fade');\n                        if (!isNullOrUndefined(this.targetEle)) {\n                            if (this.targetEle === document.body) {\n                                this.dlgContainer.style.position = 'fixed';\n                            }\n                            else {\n                                this.dlgContainer.style.position = 'absolute';\n                            }\n                            this.dlgOverlay.style.position = 'absolute';\n                            this.element.style.position = 'relative';\n                            addClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);\n                        }\n                        else {\n                            addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n                        }\n                    }\n                    let openAnimation = {\n                        name: this.animationSettings.effect + 'In',\n                        duration: this.animationSettings.duration,\n                        delay: this.animationSettings.delay\n                    };\n                    let zIndexElement = (this.isModal) ? this.element.parentElement : this.element;\n                    if (this.calculatezIndex) {\n                        this.setzIndex(zIndexElement, true);\n                        setStyleAttribute(this.element, { 'zIndex': this.zIndex });\n                        if (this.isModal) {\n                            this.setOverlayZindex(this.zIndex);\n                        }\n                    }\n                    this.animationSettings.effect === 'None' ? this.popupObj.show() : this.popupObj.show(openAnimation);\n                    this.dialogOpen = true;\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    this.visible = true;\n                    this.preventVisibility = true;\n                    this.isProtectedOnChange = prevOnChange;\n                }\n            });\n        }\n    }\n    /**\n     * Closes the dialog if it is in visible state.\n     * @return {void}\n     */\n    hide(event) {\n        if (!this.element.classList.contains(ROOT)) {\n            return;\n        }\n        if (this.preventVisibility) {\n            let eventArgs = isBlazor() ? {\n                cancel: false,\n                isInteracted: event ? true : false,\n                element: this.element,\n                container: this.isModal ? this.dlgContainer : this.element,\n                event: event\n            } : {\n                cancel: false,\n                isInteracted: event ? true : false,\n                element: this.element,\n                target: this.target,\n                container: this.isModal ? this.dlgContainer : this.element,\n                event: event\n            };\n            this.closeArgs = eventArgs;\n            this.trigger('beforeClose', eventArgs, (beforeCloseArgs) => {\n                if (!beforeCloseArgs.cancel) {\n                    if (this.isModal) {\n                        !isNullOrUndefined(this.targetEle) ? removeClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]) :\n                            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n                    }\n                    let closeAnimation = {\n                        name: this.animationSettings.effect + 'Out',\n                        duration: this.animationSettings.duration,\n                        delay: this.animationSettings.delay\n                    };\n                    this.animationSettings.effect === 'None' ? this.popupObj.hide() : this.popupObj.hide(closeAnimation);\n                    this.dialogOpen = false;\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    this.visible = false;\n                    this.preventVisibility = false;\n                    this.isProtectedOnChange = prevOnChange;\n                }\n            });\n        }\n    }\n    /**\n     * Specifies to view the Full screen Dialog.\n     * @private\n     */\n    fullScreen(args) {\n        let top = this.element.offsetTop;\n        let left = this.element.offsetLeft;\n        if (args) {\n            addClass([this.element], FULLSCREEN);\n            let display = this.element.style.display;\n            this.element.style.display = 'none';\n            this.element.style.maxHeight = (!isNullOrUndefined(this.target)) ?\n                (this.targetEle.offsetHeight) + 'px' : (window.innerHeight) + 'px';\n            this.element.style.display = display;\n            addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n            if (this.allowDragging && !isNullOrUndefined(this.dragObj)) {\n                this.dragObj.destroy();\n            }\n        }\n        else {\n            removeClass([this.element], FULLSCREEN);\n            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n            if (this.allowDragging && (!isNullOrUndefined(this.headerContent))) {\n                this.setAllowDragging();\n            }\n        }\n        return args;\n    }\n    /**\n     * Returns the dialog button instances.\n     * Based on that, you can dynamically change the button states.\n     * @param { number } index - Index of the button.\n     * @return {Button}\n     */\n    getButtons(index) {\n        if (!isNullOrUndefined(index)) {\n            return this.btnObj[index];\n        }\n        return this.btnObj;\n    }\n};\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"content\", void 0);\n__decorate$1([\n    Property(true)\n], Dialog.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$1([\n    Property(false)\n], Dialog.prototype, \"showCloseIcon\", void 0);\n__decorate$1([\n    Property(false)\n], Dialog.prototype, \"isModal\", void 0);\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"header\", void 0);\n__decorate$1([\n    Property(true)\n], Dialog.prototype, \"visible\", void 0);\n__decorate$1([\n    Property(false)\n], Dialog.prototype, \"enableResize\", void 0);\n__decorate$1([\n    Property('auto')\n], Dialog.prototype, \"height\", void 0);\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"minHeight\", void 0);\n__decorate$1([\n    Property('100%')\n], Dialog.prototype, \"width\", void 0);\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"cssClass\", void 0);\n__decorate$1([\n    Property(1000)\n], Dialog.prototype, \"zIndex\", void 0);\n__decorate$1([\n    Property(null)\n], Dialog.prototype, \"target\", void 0);\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"footerTemplate\", void 0);\n__decorate$1([\n    Property(false)\n], Dialog.prototype, \"allowDragging\", void 0);\n__decorate$1([\n    Collection([{}], ButtonProps)\n], Dialog.prototype, \"buttons\", void 0);\n__decorate$1([\n    Property(true)\n], Dialog.prototype, \"closeOnEscape\", void 0);\n__decorate$1([\n    Complex({}, AnimationSettings)\n], Dialog.prototype, \"animationSettings\", void 0);\n__decorate$1([\n    Complex({ X: 'center', Y: 'center' }, PositionData)\n], Dialog.prototype, \"position\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"created\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"open\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"beforeSanitizeHtml\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"beforeOpen\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"close\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"beforeClose\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"dragStart\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"dragStop\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"drag\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"overlayClick\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"resizeStart\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"resizing\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"resizeStop\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"destroyed\", void 0);\nDialog = __decorate$1([\n    NotifyPropertyChanges\n], Dialog);\n/**\n * Base for creating Alert and Confirmation Dialog through util method.\n */\nvar DialogUtility;\n(function (DialogUtility) {\n    /**\n     * An alert dialog box is used to display warning like messages to the users.\n     * ```\n     * Eg : DialogUtility.alert('Alert message');\n     *\n     * ```\n     */\n    /* istanbul ignore next */\n    function alert(args) {\n        let dialogElement = createElement('div', { 'className': DLG_UTIL_ALERT });\n        document.body.appendChild(dialogElement);\n        let alertDialogObj;\n        let okButtonModel = [{\n                buttonModel: { isPrimary: true, content: 'OK' },\n                click: function () {\n                    this.hide();\n                }\n            }];\n        if (typeof (args) === 'string') {\n            alertDialogObj = createDialog({ content: args,\n                position: { X: 'center', Y: 'top' },\n                isModal: true, header: DLG_UTIL_DEFAULT_TITLE,\n                buttons: okButtonModel }, dialogElement);\n        }\n        else {\n            alertDialogObj = createDialog(alertOptions(args), dialogElement);\n        }\n        alertDialogObj.close = () => {\n            if (args && args.close) {\n                args.close.apply(alertDialogObj);\n            }\n            alertDialogObj.destroy();\n            if (alertDialogObj.element.classList.contains('e-dlg-modal')) {\n                alertDialogObj.element.parentElement.remove();\n                alertDialogObj.target.classList.remove(DLG_UTIL_ROOT);\n            }\n            else {\n                alertDialogObj.element.remove();\n            }\n        };\n        return alertDialogObj;\n    }\n    DialogUtility.alert = alert;\n    /**\n     * A confirm dialog displays a specified message along with ‘OK’ and ‘Cancel’ button.\n     * ```\n     * Eg : DialogUtility.confirm('Confirm dialog message');\n     *\n     * ```\n     */\n    /* istanbul ignore next */\n    function confirm(args) {\n        let dialogElement = createElement('div', { 'className': DLG_UTIL_CONFIRM });\n        document.body.appendChild(dialogElement);\n        let confirmDialogObj;\n        let okCancelButtonModel = [{\n                buttonModel: { isPrimary: true, content: 'OK' },\n                click: function () {\n                    this.hide();\n                }\n            }, {\n                buttonModel: { content: 'Cancel' },\n                click: function () {\n                    this.hide();\n                }\n            }];\n        if (typeof (args) === 'string') {\n            confirmDialogObj = createDialog({ position: { X: 'center', Y: 'top' }, content: args, isModal: true,\n                header: DLG_UTIL_DEFAULT_TITLE, buttons: okCancelButtonModel\n            }, dialogElement);\n        }\n        else {\n            confirmDialogObj = createDialog(confirmOptions(args), dialogElement);\n        }\n        confirmDialogObj.close = () => {\n            if (args && args.close) {\n                args.close.apply(confirmDialogObj);\n            }\n            confirmDialogObj.destroy();\n            if (confirmDialogObj.element.classList.contains('e-dlg-modal')) {\n                confirmDialogObj.element.parentElement.remove();\n                confirmDialogObj.target.classList.remove(DLG_UTIL_ROOT);\n            }\n            else {\n                confirmDialogObj.element.remove();\n            }\n        };\n        return confirmDialogObj;\n    }\n    DialogUtility.confirm = confirm;\n    function createDialog(options, element) {\n        let dialogObject = new Dialog(options);\n        dialogObject.appendTo(element);\n        return dialogObject;\n    }\n    function alertOptions(option) {\n        let options = {};\n        options.buttons = [];\n        options = formOptions(options, option);\n        options = setAlertButtonModel(options, option);\n        return options;\n    }\n    function confirmOptions(option) {\n        let options = {};\n        options.buttons = [];\n        options = formOptions(options, option);\n        options = setConfirmButtonModel(options, option);\n        return options;\n    }\n    function formOptions(options, option) {\n        options.header = !isNullOrUndefined(option.title) ? option.title : DLG_UTIL_DEFAULT_TITLE;\n        options.content = !isNullOrUndefined(option.content) ? option.content : '';\n        options.isModal = !isNullOrUndefined(option.isModal) ? option.isModal : true;\n        options.showCloseIcon = !isNullOrUndefined(option.showCloseIcon) ? option.showCloseIcon : false;\n        options.allowDragging = !isNullOrUndefined(option.isDraggable) ? option.isDraggable : false;\n        options.closeOnEscape = !isNullOrUndefined(option.closeOnEscape) ? option.closeOnEscape : false;\n        options.position = !isNullOrUndefined(option.position) ? option.position : { X: 'center', Y: 'top' };\n        options.animationSettings = !isNullOrUndefined(option.animationSettings) ? option.animationSettings :\n            { effect: 'Fade', duration: 400, delay: 0 };\n        options.cssClass = !isNullOrUndefined(option.cssClass) ? option.cssClass : '';\n        options.zIndex = !isNullOrUndefined(option.zIndex) ? option.zIndex : 1000;\n        options.open = !isNullOrUndefined(option.open) ? option.open : null;\n        return options;\n    }\n    function setAlertButtonModel(options, option) {\n        let alertButtonModel = [{\n                buttonModel: { isPrimary: true, content: 'OK' },\n                click: function () {\n                    this.hide();\n                }\n            }];\n        if (!isNullOrUndefined(option.okButton)) {\n            options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, alertButtonModel[0]);\n        }\n        else {\n            options.buttons = alertButtonModel;\n        }\n        return options;\n    }\n    function setConfirmButtonModel(options, option) {\n        let okButtonModel = {\n            buttonModel: { isPrimary: true, content: 'OK' },\n            click: function () {\n                this.hide();\n            }\n        };\n        let cancelButtonModel = {\n            buttonModel: { content: 'Cancel' },\n            click: function () {\n                this.hide();\n            }\n        };\n        if (!isNullOrUndefined(option.okButton)) {\n            options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, okButtonModel);\n        }\n        else {\n            options.buttons[0] = okButtonModel;\n        }\n        if (!isNullOrUndefined(option.cancelButton)) {\n            options.buttons[1] = formButtonModel(options.buttons[1], option.cancelButton, cancelButtonModel);\n        }\n        else {\n            options.buttons[1] = cancelButtonModel;\n        }\n        return options;\n    }\n    function formButtonModel(buttonModel, option, buttonPropModel) {\n        let buttonProps = buttonPropModel;\n        if (!isNullOrUndefined(option.text)) {\n            buttonProps.buttonModel.content = option.text;\n        }\n        if (!isNullOrUndefined(option.icon)) {\n            buttonProps.buttonModel.iconCss = option.icon;\n        }\n        if (!isNullOrUndefined(option.cssClass)) {\n            buttonProps.buttonModel.cssClass = option.cssClass;\n        }\n        if (!isNullOrUndefined(option.click)) {\n            buttonProps.click = option.click;\n        }\n        return buttonProps;\n    }\n})(DialogUtility || (DialogUtility = {}));\n\n/**\n * Dialog Component\n */\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst TOUCHEND_HIDE_DELAY = 1500;\nconst TAPHOLD_THRESHOLD = 500;\nconst SHOW_POINTER_TIP_GAP = 0;\nconst HIDE_POINTER_TIP_GAP = 8;\nconst MOUSE_TRAIL_GAP = 2;\nconst POINTER_ADJUST = 2;\nconst ROOT$1 = 'e-tooltip';\nconst RTL$1 = 'e-rtl';\nconst DEVICE$1 = 'e-bigger';\nconst ICON$1 = 'e-icons';\nconst CLOSE = 'e-tooltip-close';\nconst TOOLTIP_WRAP = 'e-tooltip-wrap';\nconst CONTENT = 'e-tip-content';\nconst ARROW_TIP = 'e-arrow-tip';\nconst ARROW_TIP_OUTER = 'e-arrow-tip-outer';\nconst ARROW_TIP_INNER = 'e-arrow-tip-inner';\nconst TIP_BOTTOM = 'e-tip-bottom';\nconst TIP_TOP = 'e-tip-top';\nconst TIP_LEFT = 'e-tip-left';\nconst TIP_RIGHT = 'e-tip-right';\nconst POPUP_ROOT$1 = 'e-popup';\nconst POPUP_OPEN = 'e-popup-open';\nconst POPUP_CLOSE = 'e-popup-close';\nconst POPUP_LIB = 'e-lib';\nconst HIDE_POPUP = 'e-hidden';\nclass Animation$1 extends ChildProperty {\n}\n__decorate$2([\n    Property({ effect: 'FadeIn', duration: 150, delay: 0 })\n], Animation$1.prototype, \"open\", void 0);\n__decorate$2([\n    Property({ effect: 'FadeOut', duration: 150, delay: 0 })\n], Animation$1.prototype, \"close\", void 0);\n/**\n * Represents the Tooltip component that displays a piece of information about the target element on mouse hover.\n * ```html\n * <div id=\"tooltip\">Show Tooltip</div>\n * ```\n * ```typescript\n * <script>\n *   var tooltipObj = new Tooltip({ content: 'Tooltip text' });\n *   tooltipObj.appendTo(\"#tooltip\");\n * </script>\n * ```\n */\nlet Tooltip = class Tooltip extends Component {\n    /**\n     * Constructor for creating the Tooltip Component\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isBlazorTooltip = false;\n        this.contentTargetValue = null;\n        this.contentEvent = null;\n        this.contentAnimation = null;\n    }\n    initialize() {\n        this.formatPosition();\n        if (!(this.isServerRender())) {\n            addClass([this.element], ROOT$1);\n        }\n    }\n    isServerRender() {\n        return isBlazor() && this.isServerRendered;\n    }\n    formatPosition() {\n        if (this.position.indexOf('Top') === 0 || this.position.indexOf('Bottom') === 0) {\n            [this.tooltipPositionY, this.tooltipPositionX] = this.position.split(/(?=[A-Z])/);\n        }\n        else {\n            [this.tooltipPositionX, this.tooltipPositionY] = this.position.split(/(?=[A-Z])/);\n        }\n    }\n    renderArrow() {\n        this.setTipClass(this.position);\n        if (!(this.isServerRender())) {\n            let tip = this.createElement('div', { className: ARROW_TIP + ' ' + this.tipClass });\n            tip.appendChild(this.createElement('div', { className: ARROW_TIP_OUTER + ' ' + this.tipClass }));\n            tip.appendChild(this.createElement('div', { className: ARROW_TIP_INNER + ' ' + this.tipClass }));\n            this.tooltipEle.appendChild(tip);\n        }\n        else {\n            let tip = this.tooltipEle.querySelector('.' + ARROW_TIP);\n            addClass([tip.querySelector('.' + ARROW_TIP_OUTER)], this.tipClass);\n            addClass([tip.querySelector('.' + ARROW_TIP_INNER)], this.tipClass);\n            this.tooltipEle.appendChild(tip);\n        }\n    }\n    setTipClass(position) {\n        if (position.indexOf('Right') === 0) {\n            this.tipClass = TIP_LEFT;\n        }\n        else if (position.indexOf('Bottom') === 0) {\n            this.tipClass = TIP_TOP;\n        }\n        else if (position.indexOf('Left') === 0) {\n            this.tipClass = TIP_RIGHT;\n        }\n        else {\n            this.tipClass = TIP_BOTTOM;\n        }\n    }\n    renderPopup(target) {\n        let elePos = this.mouseTrail ? { top: 0, left: 0 } : this.getTooltipPosition(target);\n        this.tooltipEle.classList.remove(POPUP_LIB);\n        this.popupObj = new Popup(this.tooltipEle, {\n            height: this.height,\n            width: this.width,\n            position: { X: elePos.left, Y: elePos.top },\n            enableRtl: this.enableRtl,\n            open: this.openPopupHandler.bind(this),\n            close: this.closePopupHandler.bind(this)\n        });\n    }\n    getTooltipPosition(target) {\n        this.tooltipEle.style.display = 'block';\n        let pos = calculatePosition(target, this.tooltipPositionX, this.tooltipPositionY);\n        let offsetPos = this.calculateTooltipOffset(this.position);\n        let elePos = this.collisionFlipFit(target, pos.left + offsetPos.left, pos.top + offsetPos.top);\n        this.tooltipEle.style.display = '';\n        return elePos;\n    }\n    reposition(target) {\n        let elePos = this.getTooltipPosition(target);\n        this.popupObj.position = { X: elePos.left, Y: elePos.top };\n        this.popupObj.dataBind();\n    }\n    openPopupHandler() {\n        if (!this.mouseTrail && this.needTemplateReposition()) {\n            this.reposition(this.findTarget());\n        }\n        this.trigger('afterOpen', this.tooltipEventArgs);\n    }\n    closePopupHandler() {\n        resetBlazorTemplate(this.element.id + 'content', 'Content');\n        this.clear();\n        this.trigger('afterClose', this.tooltipEventArgs);\n    }\n    calculateTooltipOffset(position) {\n        let pos = { top: 0, left: 0 };\n        let tooltipEleWidth = this.tooltipEle.offsetWidth;\n        let tooltipEleHeight = this.tooltipEle.offsetHeight;\n        let arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);\n        let tipWidth = arrowEle ? arrowEle.offsetWidth : 0;\n        let tipHeight = arrowEle ? arrowEle.offsetHeight : 0;\n        let tipAdjust = (this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP);\n        let tipHeightAdjust = (tipHeight / 2) + POINTER_ADJUST + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight);\n        let tipWidthAdjust = (tipWidth / 2) + POINTER_ADJUST + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);\n        if (this.mouseTrail) {\n            tipAdjust += MOUSE_TRAIL_GAP;\n        }\n        switch (position) {\n            case 'RightTop':\n                pos.left += tipWidth + tipAdjust;\n                pos.top -= tooltipEleHeight - tipHeightAdjust;\n                break;\n            case 'RightCenter':\n                pos.left += tipWidth + tipAdjust;\n                pos.top -= (tooltipEleHeight / 2);\n                break;\n            case 'RightBottom':\n                pos.left += tipWidth + tipAdjust;\n                pos.top -= (tipHeightAdjust);\n                break;\n            case 'BottomRight':\n                pos.top += (tipHeight + tipAdjust);\n                pos.left -= (tipWidthAdjust);\n                break;\n            case 'BottomCenter':\n                pos.top += (tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth / 2);\n                break;\n            case 'BottomLeft':\n                pos.top += (tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth - tipWidthAdjust);\n                break;\n            case 'LeftBottom':\n                pos.left -= (tipWidth + tooltipEleWidth + tipAdjust);\n                pos.top -= (tipHeightAdjust);\n                break;\n            case 'LeftCenter':\n                pos.left -= (tipWidth + tooltipEleWidth + tipAdjust);\n                pos.top -= (tooltipEleHeight / 2);\n                break;\n            case 'LeftTop':\n                pos.left -= (tipWidth + tooltipEleWidth + tipAdjust);\n                pos.top -= (tooltipEleHeight - tipHeightAdjust);\n                break;\n            case 'TopLeft':\n                pos.top -= (tooltipEleHeight + tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth - tipWidthAdjust);\n                break;\n            case 'TopRight':\n                pos.top -= (tooltipEleHeight + tipHeight + tipAdjust);\n                pos.left -= (tipWidthAdjust);\n                break;\n            default:\n                pos.top -= (tooltipEleHeight + tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth / 2);\n                break;\n        }\n        pos.left += this.offsetX;\n        pos.top += this.offsetY;\n        return pos;\n    }\n    updateTipPosition(position) {\n        let selEle = this.tooltipEle.querySelectorAll('.' + ARROW_TIP + ',.' + ARROW_TIP_OUTER + ',.' + ARROW_TIP_INNER);\n        let removeList = [TIP_BOTTOM, TIP_TOP, TIP_LEFT, TIP_RIGHT];\n        removeClass(selEle, removeList);\n        this.setTipClass(position);\n        addClass(selEle, this.tipClass);\n    }\n    adjustArrow(target, position, tooltipPositionX, tooltipPositionY) {\n        if (this.showTipPointer === false) {\n            return;\n        }\n        this.updateTipPosition(position);\n        let leftValue;\n        let topValue;\n        this.tooltipEle.style.display = 'block';\n        let tooltipWidth = this.tooltipEle.clientWidth;\n        let tooltipHeight = this.tooltipEle.clientHeight;\n        let arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);\n        let arrowInnerELe = this.tooltipEle.querySelector('.' + ARROW_TIP_INNER);\n        let tipWidth = arrowEle.offsetWidth;\n        let tipHeight = arrowEle.offsetHeight;\n        this.tooltipEle.style.display = '';\n        if (this.tipClass === TIP_BOTTOM || this.tipClass === TIP_TOP) {\n            if (this.tipClass === TIP_BOTTOM) {\n                topValue = '99.9%';\n                // Arrow icon aligned -2px height from ArrowOuterTip div\n                arrowInnerELe.style.top = '-' + (tipHeight - 2) + 'px';\n            }\n            else {\n                topValue = -(tipHeight - 1) + 'px';\n                // Arrow icon aligned -6px height from ArrowOuterTip div\n                arrowInnerELe.style.top = '-' + (tipHeight - 6) + 'px';\n            }\n            if (target) {\n                let tipPosExclude = tooltipPositionX !== 'Center' || (tooltipWidth > target.offsetWidth) || this.mouseTrail;\n                if ((tipPosExclude && tooltipPositionX === 'Left') || (!tipPosExclude && this.tipPointerPosition === 'End')) {\n                    leftValue = (tooltipWidth - tipWidth - POINTER_ADJUST) + 'px';\n                }\n                else if ((tipPosExclude && tooltipPositionX === 'Right') || (!tipPosExclude && this.tipPointerPosition === 'Start')) {\n                    leftValue = POINTER_ADJUST + 'px';\n                }\n                else {\n                    leftValue = ((tooltipWidth / 2) - (tipWidth / 2)) + 'px';\n                }\n            }\n        }\n        else {\n            if (this.tipClass === TIP_RIGHT) {\n                leftValue = '99.9%';\n                // Arrow icon aligned -2px left from ArrowOuterTip div\n                arrowInnerELe.style.left = '-' + (tipWidth - 2) + 'px';\n            }\n            else {\n                leftValue = -(tipWidth - 1) + 'px';\n                // Arrow icon aligned -2px from ArrowOuterTip width\n                arrowInnerELe.style.left = (-(tipWidth) + (tipWidth - 2)) + 'px';\n            }\n            let tipPosExclude = tooltipPositionY !== 'Center' || (tooltipHeight > target.offsetHeight) || this.mouseTrail;\n            if ((tipPosExclude && tooltipPositionY === 'Top') || (!tipPosExclude && this.tipPointerPosition === 'End')) {\n                topValue = (tooltipHeight - tipHeight - POINTER_ADJUST) + 'px';\n            }\n            else if ((tipPosExclude && tooltipPositionY === 'Bottom') || (!tipPosExclude && this.tipPointerPosition === 'Start')) {\n                topValue = POINTER_ADJUST + 'px';\n            }\n            else {\n                topValue = ((tooltipHeight / 2) - (tipHeight / 2)) + 'px';\n            }\n        }\n        arrowEle.style.top = topValue;\n        arrowEle.style.left = leftValue;\n    }\n    renderContent(target) {\n        let tooltipContent = this.tooltipEle.querySelector('.' + CONTENT);\n        if (this.cssClass) {\n            addClass([this.tooltipEle], this.cssClass.split(' '));\n        }\n        if (target && !isNullOrUndefined(target.getAttribute('title'))) {\n            target.setAttribute('data-content', target.getAttribute('title'));\n            target.removeAttribute('title');\n        }\n        if (!isNullOrUndefined(this.content)) {\n            if (this.isBlazorTooltip || !(this.isServerRender())) {\n                tooltipContent.innerHTML = '';\n                if (this.content instanceof HTMLElement) {\n                    tooltipContent.appendChild(this.content);\n                }\n                else if (typeof this.content === 'string' && this.content.indexOf('<div>Blazor') < 0) {\n                    if (this.enableHtmlSanitizer) {\n                        this.setProperties({ content: SanitizeHtmlHelper.sanitize(this.content) }, true);\n                    }\n                    tooltipContent.innerHTML = this.content;\n                }\n                else {\n                    let templateFunction = compile(this.content);\n                    append(templateFunction({}, null, null, this.element.id + 'content'), tooltipContent);\n                    if (typeof this.content === 'string' && this.content.indexOf('<div>Blazor') >= 0) {\n                        this.isBlazorTemplate = true;\n                        updateBlazorTemplate(this.element.id + 'content', 'Content', this);\n                    }\n                }\n            }\n        }\n        else {\n            if (target && !isNullOrUndefined(target.getAttribute('data-content'))) {\n                tooltipContent.innerHTML = target.getAttribute('data-content');\n            }\n        }\n    }\n    renderCloseIcon() {\n        if (!this.isSticky) {\n            return;\n        }\n        let tipClose = this.createElement('div', { className: ICON$1 + ' ' + CLOSE });\n        this.tooltipEle.appendChild(tipClose);\n        EventHandler.add(tipClose, Browser.touchStartEvent, this.onStickyClose, this);\n    }\n    addDescribedBy(target, id) {\n        let describedby = (target.getAttribute('aria-describedby') || '').split(/\\s+/);\n        if (describedby.indexOf(id) < 0) {\n            describedby.push(id);\n        }\n        attributes(target, { 'aria-describedby': describedby.join(' ').trim(), 'data-tooltip-id': id });\n    }\n    removeDescribedBy(target) {\n        let id = target.getAttribute('data-tooltip-id');\n        let describedby = (target.getAttribute('aria-describedby') || '').split(/\\s+/);\n        let index = describedby.indexOf(id);\n        if (index !== -1) {\n            describedby.splice(index, 1);\n        }\n        target.removeAttribute('data-tooltip-id');\n        let orgdescribedby = describedby.join(' ').trim();\n        if (orgdescribedby) {\n            target.setAttribute('aria-describedby', orgdescribedby);\n        }\n        else {\n            target.removeAttribute('aria-describedby');\n        }\n    }\n    tapHoldHandler(evt) {\n        clearTimeout(this.autoCloseTimer);\n        this.targetHover(evt.originalEvent);\n    }\n    touchEndHandler(e) {\n        if (this.isSticky) {\n            return;\n        }\n        let close = () => {\n            this.close();\n        };\n        this.autoCloseTimer = setTimeout(close, TOUCHEND_HIDE_DELAY);\n    }\n    targetClick(e) {\n        let target;\n        if (this.target) {\n            target = closest(e.target, this.target);\n        }\n        else {\n            target = this.element;\n        }\n        if (isNullOrUndefined(target)) {\n            return;\n        }\n        if (target.getAttribute('data-tooltip-id') === null) {\n            this.targetHover(e);\n        }\n        else if (!this.isSticky) {\n            this.hideTooltip(this.animation.close, e, target);\n        }\n    }\n    targetHover(e) {\n        let target;\n        if (this.target) {\n            target = closest(e.target, this.target);\n        }\n        else {\n            target = this.element;\n        }\n        if (isNullOrUndefined(target) || target.getAttribute('data-tooltip-id') !== null) {\n            return;\n        }\n        let targetList = [].slice.call(document.querySelectorAll('[data-tooltip-id= ' + this.ctrlId + '_content]'));\n        for (let target of targetList) {\n            this.restoreElement(target);\n        }\n        this.showTooltip(target, this.animation.open, e);\n    }\n    showTooltip(target, showAnimation, e) {\n        clearTimeout(this.showTimer);\n        clearTimeout(this.hideTimer);\n        this.tooltipEventArgs = {\n            type: e ? e.type : null, cancel: false, target: target, event: e ? e : null,\n            element: this.tooltipEle, isInteracted: !isNullOrUndefined(e)\n        };\n        const observeCallback = (beforeRenderArgs) => {\n            this.beforeRenderCallback(beforeRenderArgs, target, e, showAnimation);\n        };\n        this.trigger('beforeRender', this.tooltipEventArgs, observeCallback.bind(this));\n    }\n    beforeRenderCallback(beforeRenderArgs, target, e, showAnimation) {\n        let isBlazorTooltipRendered = false;\n        if (beforeRenderArgs.cancel) {\n            this.isHidden = true;\n            this.clear();\n        }\n        else {\n            this.isHidden = false;\n            if (isNullOrUndefined(this.tooltipEle)) {\n                if (this.isServerRender()) {\n                    this.contentTargetValue = target;\n                    this.contentEvent = e;\n                    this.contentAnimation = showAnimation;\n                    let args = { 'enableTooltip': 'true' };\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args);\n                    // tslint:enable\n                    isBlazorTooltipRendered = true;\n                }\n                else {\n                    this.ctrlId = this.element.getAttribute('id') ?\n                        getUniqueID(this.element.getAttribute('id')) : getUniqueID('tooltip');\n                    this.tooltipEle = this.createElement('div', {\n                        className: TOOLTIP_WRAP + ' ' + POPUP_ROOT$1 + ' ' + POPUP_LIB, attrs: {\n                            role: 'tooltip', 'aria-hidden': 'false', 'id': this.ctrlId + '_content'\n                        }, styles: 'width:' +\n                            formatUnit(this.width) + ';height:' + formatUnit(this.height) + ';position:absolute;'\n                    });\n                    this.beforeRenderBlazor(target, this);\n                }\n                if (!isBlazorTooltipRendered) {\n                    this.afterRenderBlazor(target, e, showAnimation, this);\n                }\n            }\n            else {\n                if (this.isServerRender()) {\n                    addClass([this.tooltipEle], POPUP_OPEN);\n                    document.body.appendChild(this.tooltipEle);\n                    this.renderCloseIcon();\n                    this.renderPopup(target);\n                }\n                if (target) {\n                    this.adjustArrow(target, this.position, this.tooltipPositionX, this.tooltipPositionY);\n                    this.addDescribedBy(target, this.ctrlId + '_content');\n                    this.renderContent(target);\n                    Animation.stop(this.tooltipEle);\n                    this.reposition(target);\n                    this.afterRenderBlazor(target, e, showAnimation, this);\n                }\n            }\n        }\n    }\n    ;\n    contentUpdated(args) {\n        if (isNullOrUndefined(this.tooltipEle)) {\n            if (this.isServerRender()) {\n                this.ctrlId = this.element.id;\n                this.tooltipEle = document.querySelector('#' + this.ctrlId + '_content');\n                if (this.tooltipEle) {\n                    this.tooltipEle.setAttribute('style', 'width:' + formatUnit(this.width) +\n                        ';height:' + formatUnit(this.height) + ';position:absolute;');\n                    this.beforeRenderBlazor(this.contentTargetValue, this);\n                    this.afterRenderBlazor(this.contentTargetValue, this.contentEvent, this.contentAnimation, this);\n                    this.contentTargetValue = this.contentEvent = this.contentAnimation = null;\n                }\n            }\n        }\n    }\n    ;\n    beforeRenderBlazor(target, ctrlObj) {\n        if (target) {\n            if (Browser.isDevice) {\n                addClass([ctrlObj.tooltipEle], DEVICE$1);\n            }\n            if (ctrlObj.width !== 'auto') {\n                ctrlObj.tooltipEle.style.maxWidth = formatUnit(ctrlObj.width);\n            }\n            if (!(this.isServerRender())) {\n                ctrlObj.tooltipEle.appendChild(ctrlObj.createElement('div', { className: CONTENT }));\n            }\n            document.body.appendChild(ctrlObj.tooltipEle);\n            removeClass([ctrlObj.tooltipEle], HIDE_POPUP);\n            ctrlObj.addDescribedBy(target, ctrlObj.ctrlId + '_content');\n            ctrlObj.renderContent(target);\n            addClass([ctrlObj.tooltipEle], POPUP_OPEN);\n            if (ctrlObj.showTipPointer) {\n                ctrlObj.renderArrow();\n            }\n            ctrlObj.renderCloseIcon();\n            ctrlObj.renderPopup(target);\n            ctrlObj.adjustArrow(target, ctrlObj.position, ctrlObj.tooltipPositionX, ctrlObj.tooltipPositionY);\n            Animation.stop(ctrlObj.tooltipEle);\n            ctrlObj.reposition(target);\n        }\n    }\n    afterRenderBlazor(target, e, showAnimation, ctrlObj) {\n        if (target) {\n            removeClass([ctrlObj.tooltipEle], POPUP_OPEN);\n            addClass([ctrlObj.tooltipEle], POPUP_CLOSE);\n            ctrlObj.tooltipEventArgs = {\n                type: e ? e.type : null, cancel: false, target: target, event: e ? e : null,\n                element: ctrlObj.tooltipEle, isInteracted: !isNullOrUndefined(e)\n            };\n            if (ctrlObj.needTemplateReposition() && !ctrlObj.mouseTrail) {\n                ctrlObj.tooltipEle.style.display = 'none';\n            }\n            const observeCallback = (observedArgs) => {\n                ctrlObj.beforeOpenCallback(observedArgs, target, showAnimation, e);\n            };\n            ctrlObj.trigger('beforeOpen', ctrlObj.tooltipEventArgs, observeCallback.bind(ctrlObj));\n        }\n    }\n    beforeOpenCallback(observedArgs, target, showAnimation, e) {\n        if (observedArgs.cancel) {\n            this.isHidden = true;\n            this.clear();\n            this.restoreElement(target);\n        }\n        else {\n            let openAnimation = {\n                name: showAnimation.effect,\n                duration: showAnimation.duration,\n                delay: showAnimation.delay,\n                timingFunction: 'easeOut'\n            };\n            if (showAnimation.effect === 'None') {\n                openAnimation = undefined;\n            }\n            if (this.openDelay > 0) {\n                let show = () => {\n                    if (this.popupObj) {\n                        this.popupObj.show(openAnimation, target);\n                    }\n                };\n                this.showTimer = setTimeout(show, this.openDelay);\n            }\n            else {\n                if (this.popupObj) {\n                    this.popupObj.show(openAnimation, target);\n                }\n            }\n        }\n        if (e) {\n            this.wireMouseEvents(e, target);\n        }\n    }\n    needTemplateReposition() {\n        // tslint:disable-next-line:no-any\n        const tooltip = this;\n        return !isNullOrUndefined(tooltip.viewContainerRef)\n            && typeof tooltip.viewContainerRef !== 'string'\n            || (this.isServerRender()) && this.isBlazorTemplate;\n    }\n    checkCollision(target, x, y) {\n        let elePos = {\n            left: x, top: y, position: this.position,\n            horizontal: this.tooltipPositionX, vertical: this.tooltipPositionY\n        };\n        let affectedPos = isCollide(this.tooltipEle, (this.target ? this.element : null), x, y);\n        if (affectedPos.length > 0) {\n            elePos.horizontal = affectedPos.indexOf('left') >= 0 ? 'Right' : affectedPos.indexOf('right') >= 0 ? 'Left' :\n                this.tooltipPositionX;\n            elePos.vertical = affectedPos.indexOf('top') >= 0 ? 'Bottom' : affectedPos.indexOf('bottom') >= 0 ? 'Top' :\n                this.tooltipPositionY;\n        }\n        return elePos;\n    }\n    collisionFlipFit(target, x, y) {\n        let elePos = this.checkCollision(target, x, y);\n        let newpos = elePos.position;\n        if (this.tooltipPositionY !== elePos.vertical) {\n            newpos = ((this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0) ?\n                elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical);\n        }\n        if (this.tooltipPositionX !== elePos.horizontal) {\n            if (newpos.indexOf('Left') === 0) {\n                elePos.vertical = (newpos === 'LeftTop' || newpos === 'LeftCenter') ? 'Top' : 'Bottom';\n                newpos = (elePos.vertical + 'Left');\n            }\n            if (newpos.indexOf('Right') === 0) {\n                elePos.vertical = (newpos === 'RightTop' || newpos === 'RightCenter') ? 'Top' : 'Bottom';\n                newpos = (elePos.vertical + 'Right');\n            }\n            elePos.horizontal = this.tooltipPositionX;\n        }\n        this.tooltipEventArgs = {\n            type: null, cancel: false, target: target, event: null,\n            element: this.tooltipEle, collidedPosition: newpos\n        };\n        this.trigger('beforeCollision', this.tooltipEventArgs);\n        if (elePos.position !== newpos) {\n            let pos = calculatePosition(target, elePos.horizontal, elePos.vertical);\n            this.adjustArrow(target, newpos, elePos.horizontal, elePos.vertical);\n            let offsetPos = this.calculateTooltipOffset(newpos);\n            offsetPos.top -= (('TopBottom'.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1) &&\n                ('TopBottom'.indexOf(newpos.split(/(?=[A-Z])/)[0]) !== -1)) ? (2 * this.offsetY) : 0;\n            offsetPos.left -= (('RightLeft'.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1) &&\n                ('RightLeft'.indexOf(newpos.split(/(?=[A-Z])/)[0]) !== -1)) ? (2 * this.offsetX) : 0;\n            elePos.position = newpos;\n            elePos.left = pos.left + offsetPos.left;\n            elePos.top = pos.top + offsetPos.top;\n        }\n        else {\n            this.adjustArrow(target, newpos, elePos.horizontal, elePos.vertical);\n        }\n        let eleOffset = { left: elePos.left, top: elePos.top };\n        let left = fit(this.tooltipEle, (this.target ? this.element : null), { X: true, Y: false }, eleOffset).left;\n        this.tooltipEle.style.display = 'block';\n        if (this.showTipPointer && (newpos.indexOf('Bottom') === 0 || newpos.indexOf('Top') === 0)) {\n            let arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);\n            let arrowleft = parseInt(arrowEle.style.left, 10) - (left - elePos.left);\n            if (arrowleft < 0) {\n                arrowleft = 0;\n            }\n            else if ((arrowleft + arrowEle.offsetWidth) > this.tooltipEle.clientWidth) {\n                arrowleft = this.tooltipEle.clientWidth - arrowEle.offsetWidth;\n            }\n            arrowEle.style.left = arrowleft.toString() + 'px';\n        }\n        this.tooltipEle.style.display = '';\n        eleOffset.left = left;\n        return eleOffset;\n    }\n    hideTooltip(hideAnimation, e, targetElement) {\n        let target;\n        if (e) {\n            target = this.target ? (targetElement || e.target) : this.element;\n        }\n        else {\n            target = document.querySelector('[data-tooltip-id= ' + this.ctrlId + '_content]');\n        }\n        this.tooltipEventArgs = {\n            type: e ? e.type : null, cancel: false, target: target, event: e ? e : null,\n            element: this.tooltipEle, isInteracted: !isNullOrUndefined(e)\n        };\n        // this line commented for close the tooltip popup element even the target element destroyed in a page.\n        //if (isNullOrUndefined(target)) { return; }\n        this.trigger('beforeClose', this.tooltipEventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                if (this.isServerRender()) {\n                    this.blazorHide(hideAnimation, target);\n                }\n                else {\n                    this.popupHide(hideAnimation, target);\n                }\n            }\n            else {\n                this.isHidden = false;\n            }\n        });\n    }\n    /* istanbul ignore next */\n    blazorHide(hideAnimation, target) {\n        let proxy = this;\n        let hide = () => {\n            proxy.popupHide(hideAnimation, target);\n        };\n        if (this.popupObj) {\n            this.popupHide(hideAnimation, target);\n        }\n        else {\n            setTimeout(hide, 200);\n        }\n    }\n    popupHide(hideAnimation, target) {\n        this.clearTemplate();\n        if (target) {\n            this.restoreElement(target);\n        }\n        this.isHidden = true;\n        let closeAnimation = {\n            name: hideAnimation.effect,\n            duration: hideAnimation.duration,\n            delay: hideAnimation.delay,\n            timingFunction: 'easeIn'\n        };\n        if (hideAnimation.effect === 'None') {\n            closeAnimation = undefined;\n        }\n        if (this.closeDelay > 0) {\n            let hide = () => {\n                if (this.popupObj) {\n                    this.popupObj.hide(closeAnimation);\n                }\n            };\n            this.hideTimer = setTimeout(hide, this.closeDelay);\n        }\n        else {\n            if (this.popupObj) {\n                this.popupObj.hide(closeAnimation);\n            }\n        }\n    }\n    restoreElement(target) {\n        this.unwireMouseEvents(target);\n        if (!isNullOrUndefined(target.getAttribute('data-content'))) {\n            target.setAttribute('title', target.getAttribute('data-content'));\n            target.removeAttribute('data-content');\n        }\n        this.removeDescribedBy(target);\n    }\n    clear() {\n        if (this.tooltipEle) {\n            removeClass([this.tooltipEle], POPUP_CLOSE);\n            addClass([this.tooltipEle], POPUP_OPEN);\n        }\n        if (this.isHidden) {\n            if (this.popupObj) {\n                this.popupObj.destroy();\n            }\n            if (this.isServerRender() && this.tooltipEle) {\n                this.tooltipEle.style.display = 'none';\n                let args = { 'enableTooltip': 'false' };\n                // tslint:disable\n                this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args);\n                // tslint:enable\n                remove(this.tooltipEle);\n            }\n            else if (this.tooltipEle) {\n                remove(this.tooltipEle);\n            }\n            this.tooltipEle = null;\n            this.popupObj = null;\n        }\n    }\n    onMouseOut(e) {\n        const enteredElement = e.relatedTarget;\n        // don't close the tooltip only if it is tooltip content element\n        if (enteredElement && !this.mouseTrail) {\n            const checkForTooltipElement = closest(enteredElement, `.${TOOLTIP_WRAP}.${POPUP_LIB}.${POPUP_ROOT$1}`);\n            if (checkForTooltipElement) {\n                EventHandler.add(checkForTooltipElement, 'mouseleave', this.tooltipElementMouseOut, this);\n                this.unwireMouseEvents(e.target);\n            }\n            else {\n                this.hideTooltip(this.animation.close, e, this.findTarget());\n                if (this.closeDelay === 0) {\n                    this.clear();\n                }\n            }\n        }\n        else {\n            this.hideTooltip(this.animation.close, e, this.findTarget());\n            this.clear();\n        }\n    }\n    tooltipElementMouseOut(e) {\n        this.hideTooltip(this.animation.close, e, this.findTarget());\n        EventHandler.remove(this.element, 'mouseleave', this.tooltipElementMouseOut);\n        this.clear();\n    }\n    onStickyClose(e) {\n        this.close();\n    }\n    onMouseMove(event) {\n        let eventPageX = 0;\n        let eventPageY = 0;\n        if (event.type.indexOf('touch') > -1) {\n            event.preventDefault();\n            eventPageX = event.touches[0].pageX;\n            eventPageY = event.touches[0].pageY;\n        }\n        else {\n            eventPageX = event.pageX;\n            eventPageY = event.pageY;\n        }\n        Animation.stop(this.tooltipEle);\n        removeClass([this.tooltipEle], POPUP_CLOSE);\n        addClass([this.tooltipEle], POPUP_OPEN);\n        this.adjustArrow(event.target, this.position, this.tooltipPositionX, this.tooltipPositionY);\n        let pos = this.calculateTooltipOffset(this.position);\n        let x = eventPageX + pos.left + this.offsetX;\n        let y = eventPageY + pos.top + this.offsetY;\n        let elePos = this.checkCollision(event.target, x, y);\n        if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {\n            let newpos = (this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0) ?\n                elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;\n            elePos.position = newpos;\n            this.adjustArrow(event.target, elePos.position, elePos.horizontal, elePos.vertical);\n            let colpos = this.calculateTooltipOffset(elePos.position);\n            elePos.left = eventPageX + colpos.left - this.offsetX;\n            elePos.top = eventPageY + colpos.top - this.offsetY;\n        }\n        this.tooltipEle.style.left = elePos.left + 'px';\n        this.tooltipEle.style.top = elePos.top + 'px';\n    }\n    keyDown(event) {\n        if (this.tooltipEle && event.keyCode === 27) {\n            this.close();\n        }\n    }\n    touchEnd(e) {\n        if (this.tooltipEle && closest(e.target, '.' + ROOT$1) === null) {\n            this.close();\n        }\n    }\n    scrollHandler(e) {\n        if (this.tooltipEle) {\n            if (!(closest(e.target, `.${TOOLTIP_WRAP}.${POPUP_LIB}.${POPUP_ROOT$1}`))) {\n                this.close();\n            }\n        }\n    }\n    /**\n     * Core method that initializes the control rendering.\n     * @private\n     */\n    render() {\n        this.initialize();\n        this.wireEvents(this.opensOn);\n        this.renderComplete();\n    }\n    /**\n     * Initializes the values of private members.\n     * @private\n     */\n    preRender() {\n        this.tipClass = TIP_BOTTOM;\n        this.tooltipPositionX = 'Center';\n        this.tooltipPositionY = 'Top';\n        this.isHidden = true;\n    }\n    /**\n     * Binding events to the Tooltip element.\n     * @hidden\n     */\n    wireEvents(trigger) {\n        let triggerList = this.getTriggerList(trigger);\n        for (let opensOn of triggerList) {\n            if (opensOn === 'Custom') {\n                return;\n            }\n            if (opensOn === 'Focus') {\n                this.wireFocusEvents();\n            }\n            if (opensOn === 'Click') {\n                EventHandler.add(this.element, Browser.touchStartEvent, this.targetClick, this);\n            }\n            if (opensOn === 'Hover') {\n                if (Browser.isDevice) {\n                    this.touchModule = new Touch(this.element, {\n                        tapHoldThreshold: TAPHOLD_THRESHOLD,\n                        tapHold: this.tapHoldHandler.bind(this)\n                    });\n                    EventHandler.add(this.element, Browser.touchEndEvent, this.touchEndHandler, this);\n                }\n                else {\n                    EventHandler.add(this.element, 'mouseover', this.targetHover, this);\n                    if (this.isServerRender() && !this.isSticky) {\n                        EventHandler.add(this.element, 'mouseleave', this.onMouseOut, this);\n                    }\n                }\n            }\n        }\n        EventHandler.add(document, 'touchend', this.touchEnd, this);\n        EventHandler.add(document, 'scroll wheel', this.scrollHandler, this);\n        EventHandler.add(document, 'keydown', this.keyDown, this);\n    }\n    getTriggerList(trigger) {\n        if (trigger === 'Auto') {\n            trigger = (Browser.isDevice) ? 'Hover' : 'Hover Focus';\n        }\n        return trigger.split(' ');\n    }\n    wireFocusEvents() {\n        if (!isNullOrUndefined(this.target)) {\n            let targetList = [].slice.call(this.element.querySelectorAll(this.target));\n            for (let target of targetList) {\n                EventHandler.add(target, 'focus', this.targetHover, this);\n            }\n        }\n        else {\n            EventHandler.add(this.element, 'focus', this.targetHover, this);\n        }\n    }\n    wireMouseEvents(e, target) {\n        if (this.tooltipEle) {\n            if (!this.isSticky) {\n                if (e.type === 'focus') {\n                    EventHandler.add(target, 'blur', this.onMouseOut, this);\n                }\n                if (e.type === 'mouseover') {\n                    if (!this.isServerRender()) {\n                        EventHandler.add(target, 'mouseleave', this.onMouseOut, this);\n                    }\n                }\n            }\n            if (this.mouseTrail) {\n                EventHandler.add(target, 'mousemove touchstart mouseenter', this.onMouseMove, this);\n            }\n        }\n    }\n    /**\n     * Unbinding events from the element on widget destroy.\n     * @hidden\n     */\n    unwireEvents(trigger) {\n        let triggerList = this.getTriggerList(trigger);\n        for (let opensOn of triggerList) {\n            if (opensOn === 'Custom') {\n                return;\n            }\n            if (opensOn === 'Focus') {\n                this.unwireFocusEvents();\n            }\n            if (opensOn === 'Click') {\n                EventHandler.remove(this.element, Browser.touchStartEvent, this.targetClick);\n            }\n            if (opensOn === 'Hover') {\n                if (Browser.isDevice) {\n                    if (this.touchModule) {\n                        this.touchModule.destroy();\n                    }\n                    EventHandler.remove(this.element, Browser.touchEndEvent, this.touchEndHandler);\n                }\n                else {\n                    EventHandler.remove(this.element, 'mouseover', this.targetHover);\n                    if (this.isServerRender() && !this.isSticky) {\n                        EventHandler.remove(this.element, 'mouseleave', this.onMouseOut);\n                    }\n                }\n            }\n        }\n        EventHandler.remove(document, 'touchend', this.touchEnd);\n        EventHandler.remove(document, 'scroll wheel', this.scrollHandler);\n        EventHandler.remove(document, 'keydown', this.keyDown);\n    }\n    unwireFocusEvents() {\n        if (!isNullOrUndefined(this.target)) {\n            let targetList = [].slice.call(this.element.querySelectorAll(this.target));\n            for (let target of targetList) {\n                EventHandler.remove(target, 'focus', this.targetHover);\n            }\n        }\n        else {\n            EventHandler.remove(this.element, 'focus', this.targetHover);\n        }\n    }\n    unwireMouseEvents(target) {\n        if (!this.isSticky) {\n            let triggerList = this.getTriggerList(this.opensOn);\n            for (let opensOn of triggerList) {\n                if (opensOn === 'Focus') {\n                    EventHandler.remove(target, 'blur', this.onMouseOut);\n                }\n                if (opensOn === 'Hover' && !Browser.isDevice) {\n                    if (!this.isServerRender()) {\n                        EventHandler.remove(target, 'mouseleave', this.onMouseOut);\n                    }\n                }\n            }\n        }\n        if (this.mouseTrail) {\n            EventHandler.remove(target, 'mousemove touchstart mouseenter', this.onMouseMove);\n        }\n    }\n    findTarget() {\n        let target = document.querySelector('[data-tooltip-id= ' + this.ctrlId + '_content]');\n        return target;\n    }\n    /**\n     * Core method to return the component name.\n     * @private\n     */\n    getModuleName() {\n        return 'tooltip';\n    }\n    /**\n     * Returns the properties to be maintained in the persisted state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * Called internally, if any of the property value changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let targetElement = this.findTarget();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'width':\n                    if (this.tooltipEle && targetElement) {\n                        this.tooltipEle.style.width = this.tooltipEle.style.maxWidth = formatUnit(newProp.width);\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'height':\n                    if (this.tooltipEle && targetElement) {\n                        this.tooltipEle.style.height = formatUnit(newProp.height);\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'content':\n                    if (this.tooltipEle) {\n                        if (this.isServerRender()) {\n                            this.isBlazorTooltip = true;\n                        }\n                        this.renderContent();\n                    }\n                    else if (this.isServerRender()) {\n                        let args = { 'content': newProp.content };\n                        // tslint:disable\n                        this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args);\n                        // tslint:enable\n                    }\n                    break;\n                case 'opensOn':\n                    this.unwireEvents(oldProp.opensOn);\n                    this.wireEvents(newProp.opensOn);\n                    break;\n                case 'position':\n                    this.formatPosition();\n                    if (this.tooltipEle && targetElement) {\n                        let arrowInnerELe = this.tooltipEle.querySelector('.' + ARROW_TIP_INNER);\n                        arrowInnerELe.style.top = arrowInnerELe.style.left = null;\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'tipPointerPosition':\n                    if (this.tooltipEle && targetElement) {\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'offsetX':\n                    if (this.tooltipEle) {\n                        let x = newProp.offsetX - oldProp.offsetX;\n                        this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + (x)).toString() + 'px';\n                    }\n                    break;\n                case 'offsetY':\n                    if (this.tooltipEle) {\n                        let y = newProp.offsetY - oldProp.offsetY;\n                        this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + (y)).toString() + 'px';\n                    }\n                    break;\n                case 'cssClass':\n                    if (this.tooltipEle) {\n                        if (oldProp.cssClass) {\n                            removeClass([this.tooltipEle], oldProp.cssClass.split(' '));\n                        }\n                        if (newProp.cssClass) {\n                            addClass([this.tooltipEle], newProp.cssClass.split(' '));\n                        }\n                    }\n                    break;\n                case 'enableRtl':\n                    if (this.tooltipEle) {\n                        if (this.enableRtl) {\n                            addClass([this.tooltipEle], RTL$1);\n                        }\n                        else {\n                            removeClass([this.tooltipEle], RTL$1);\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * It is used to show the Tooltip on the specified target with specific animation settings.\n     * @param element Target element where the Tooltip is to be displayed. (It is an optional parameter)\n     * @param animation Sets the specific animation, while showing the Tooltip on the screen. (It is an optional parameter)\n     * @return {void}\n     */\n    open(element, animation) {\n        if (isNullOrUndefined(animation)) {\n            animation = this.animation.open;\n        }\n        if (isNullOrUndefined(element)) {\n            element = this.element;\n        }\n        if (element.style.display === 'none') {\n            return;\n        }\n        this.showTooltip(element, animation);\n    }\n    /**\n     * It is used to hide the Tooltip with specific animation effect.\n     * @param animation Sets the specific animation when hiding Tooltip from the screen. (It is an optional parameter)\n     * @return {void}\n     */\n    close(animation) {\n        if (!animation) {\n            animation = this.animation.close;\n        }\n        this.hideTooltip(animation);\n    }\n    /**\n     * It is used to refresh the Tooltip content and its position.\n     * @param target Target element where the Tooltip content or position needs to be refreshed.\n     * @return {void}\n     */\n    refresh(target) {\n        if (this.tooltipEle) {\n            this.renderContent(target);\n        }\n        if (this.popupObj && target) {\n            this.reposition(target);\n        }\n    }\n    /**\n     * It is used to destroy the Tooltip component.\n     * @method destroy\n     * @return {void}\n     * @memberof Tooltip\n     */\n    destroy() {\n        if (!this.isServerRender()) {\n            super.destroy();\n            if (this.tooltipEle) {\n                remove(this.tooltipEle);\n            }\n        }\n        if (this.isServerRender() && this.tooltipEle) {\n            let placeholder = document.querySelector('#' + this.ctrlId + '_content_placeholder');\n            if (placeholder) {\n                placeholder.appendChild(this.tooltipEle);\n            }\n        }\n        if (this.popupObj) {\n            this.popupObj.destroy();\n        }\n        removeClass([this.element], ROOT$1);\n        this.unwireEvents(this.opensOn);\n        this.unwireMouseEvents(this.element);\n        this.tooltipEle = null;\n        this.popupObj = null;\n    }\n};\n__decorate$2([\n    Property('auto')\n], Tooltip.prototype, \"width\", void 0);\n__decorate$2([\n    Property('auto')\n], Tooltip.prototype, \"height\", void 0);\n__decorate$2([\n    Property()\n], Tooltip.prototype, \"content\", void 0);\n__decorate$2([\n    Property()\n], Tooltip.prototype, \"target\", void 0);\n__decorate$2([\n    Property('TopCenter')\n], Tooltip.prototype, \"position\", void 0);\n__decorate$2([\n    Property(0)\n], Tooltip.prototype, \"offsetX\", void 0);\n__decorate$2([\n    Property(0)\n], Tooltip.prototype, \"offsetY\", void 0);\n__decorate$2([\n    Property(true)\n], Tooltip.prototype, \"showTipPointer\", void 0);\n__decorate$2([\n    Property('Auto')\n], Tooltip.prototype, \"tipPointerPosition\", void 0);\n__decorate$2([\n    Property('Auto')\n], Tooltip.prototype, \"opensOn\", void 0);\n__decorate$2([\n    Property(false)\n], Tooltip.prototype, \"mouseTrail\", void 0);\n__decorate$2([\n    Property(false)\n], Tooltip.prototype, \"isSticky\", void 0);\n__decorate$2([\n    Complex({}, Animation$1)\n], Tooltip.prototype, \"animation\", void 0);\n__decorate$2([\n    Property(0)\n], Tooltip.prototype, \"openDelay\", void 0);\n__decorate$2([\n    Property(0)\n], Tooltip.prototype, \"closeDelay\", void 0);\n__decorate$2([\n    Property()\n], Tooltip.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property(false)\n], Tooltip.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"beforeRender\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"beforeOpen\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"afterOpen\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"beforeClose\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"afterClose\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"beforeCollision\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"created\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"destroyed\", void 0);\nTooltip = __decorate$2([\n    NotifyPropertyChanges\n], Tooltip);\n\n/**\n * Tooltip modules\n */\n\nlet globalTimeOut = {};\nlet spinTemplate = null;\nlet spinCSSClass = null;\nconst DEFT_MAT_WIDTH = 30;\nconst DEFT_FAB_WIDTH = 30;\nconst DEFT_BOOT_WIDTH = 30;\nconst DEFT_BOOT4_WIDTH = 36;\nconst CLS_SHOWSPIN = 'e-spin-show';\nconst CLS_HIDESPIN = 'e-spin-hide';\nconst CLS_MATERIALSPIN = 'e-spin-material';\nconst CLS_FABRICSPIN = 'e-spin-fabric';\nconst CLS_BOOTSPIN = 'e-spin-bootstrap';\nconst CLS_BOOT4SPIN = 'e-spin-bootstrap4';\nconst CLS_HIGHCONTRASTSPIN = 'e-spin-high-contrast';\nconst CLS_SPINWRAP = 'e-spinner-pane';\nconst CLS_SPININWRAP = 'e-spinner-inner';\nconst CLS_SPINCIRCLE = 'e-path-circle';\nconst CLS_SPINARC = 'e-path-arc';\nconst CLS_SPINLABEL = 'e-spin-label';\nconst CLS_SPINTEMPLATE = 'e-spin-template';\n/**\n * Function to change the Spinners in a page globally from application end.\n * ```\n * E.g : blazorSpinner({ action: \"Create\", options: {target: targetElement}, type: \"\" });\n * ```\n * @param args\n * @private\n */\nfunction Spinner(action, options, target, type) {\n    switch (action) {\n        case 'Create':\n            let element = document.querySelector(options.target);\n            let args = { type: type, target: element, cssClass: options.cssClass,\n                label: options.label, width: options.width };\n            createSpinner(args);\n            break;\n        case 'Show':\n            showSpinner(document.querySelector(target));\n            break;\n        case 'Hide':\n            hideSpinner(document.querySelector(target));\n            break;\n        case 'Set':\n            let setArgs = { cssClass: options.cssClass, type: type };\n            setSpinner(setArgs);\n            break;\n    }\n}\n/**\n * Create a spinner for the specified target element.\n * ```\n * E.g : createSpinner({ target: targetElement, width: '34px', label: 'Loading..' });\n * ```\n * @param args\n * @private\n */\nfunction createSpinner(args, internalCreateElement) {\n    if (!args.target) {\n        return;\n    }\n    let radius;\n    let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    let container = create_spinner_container(args.target, makeElement);\n    if (!isNullOrUndefined(args.cssClass)) {\n        container.wrap.classList.add(args.cssClass);\n    }\n    if (!isNullOrUndefined(args.template) || !isNullOrUndefined(spinTemplate)) {\n        let template = !isNullOrUndefined(args.template) ? args.template : spinTemplate;\n        container.wrap.classList.add(CLS_SPINTEMPLATE);\n        replaceContent(container.wrap, template, spinCSSClass);\n    }\n    else {\n        let theme = !isNullOrUndefined(args.type) ? args.type : getTheme(container.wrap);\n        let width = !isNullOrUndefined(args.width) ? args.width : undefined;\n        radius = calculateRadius(width, theme);\n        setTheme(theme, container.wrap, radius, makeElement);\n        if (!isNullOrUndefined(args.label)) {\n            createLabel(container.inner_wrap, args.label, makeElement);\n        }\n    }\n    container.wrap.classList.add(CLS_HIDESPIN);\n    container = null;\n}\nfunction createLabel(container, label, makeElement) {\n    let labelEle = makeElement('div', {});\n    labelEle.classList.add(CLS_SPINLABEL);\n    labelEle.textContent = label;\n    container.appendChild(labelEle);\n    return labelEle;\n}\nfunction createMaterialSpinner(container, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'Material', radius: radius };\n    create_material_element(container, uniqueID, makeElement, CLS_MATERIALSPIN);\n    mat_calculate_attributes(radius, container, 'Material', CLS_MATERIALSPIN);\n}\nfunction createBootstrap4Spinner(container, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'Bootstrap4', radius: radius };\n    create_material_element(container, uniqueID, makeElement, CLS_BOOT4SPIN);\n    mat_calculate_attributes(radius, container, 'Bootstrap4', CLS_BOOT4SPIN);\n}\nfunction startMatAnimate(container, uniqueID, radius) {\n    let globalObject = {};\n    let timeOutVar = 0;\n    globalTimeOut[uniqueID].timeOut = 0;\n    globalObject[uniqueID] = globalVariables(uniqueID, radius, 0, 0);\n    let spinnerInfo = { uniqueID: uniqueID, container: container, globalInfo: globalObject, timeOutVar: timeOutVar };\n    animateMaterial(spinnerInfo);\n}\nfunction createFabricSpinner(container, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'Fabric', radius: radius };\n    create_fabric_element(container, uniqueID, CLS_FABRICSPIN, makeElement);\n    fb_calculate_attributes(radius, container, CLS_FABRICSPIN);\n}\nfunction createHighContrastSpinner(container, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'HighContrast', radius: radius };\n    create_fabric_element(container, uniqueID, CLS_HIGHCONTRASTSPIN, makeElement);\n    fb_calculate_attributes(radius, container, CLS_HIGHCONTRASTSPIN);\n}\nfunction getTheme(container) {\n    let theme = window.getComputedStyle(container, ':after').getPropertyValue('content');\n    return theme.replace(/['\"]+/g, '');\n}\nfunction setTheme(theme, container, radius, makeElement) {\n    let innerContainer = container.querySelector('.' + CLS_SPININWRAP);\n    let svg = innerContainer.querySelector('svg');\n    if (!isNullOrUndefined(svg)) {\n        innerContainer.removeChild(svg);\n    }\n    switch (theme) {\n        case 'Material':\n            createMaterialSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Fabric':\n            createFabricSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Bootstrap':\n            createBootstrapSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'HighContrast':\n            createHighContrastSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Bootstrap4':\n            createBootstrap4Spinner(innerContainer, radius, makeElement);\n            break;\n    }\n}\nfunction createBootstrapSpinner(innerContainer, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'Bootstrap', radius: radius };\n    create_bootstrap_element(innerContainer, uniqueID, makeElement);\n    boot_calculate_attributes(innerContainer, radius);\n}\nfunction create_bootstrap_element(innerContainer, uniqueID, makeElement) {\n    let svgBoot = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    let viewBoxValue = 64;\n    let trans = 32;\n    let defaultRadius = 2;\n    svgBoot.setAttribute('id', uniqueID);\n    svgBoot.setAttribute('class', CLS_BOOTSPIN);\n    svgBoot.setAttribute('viewBox', '0 0 ' + viewBoxValue + ' ' + viewBoxValue);\n    innerContainer.insertBefore(svgBoot, innerContainer.firstChild);\n    for (let item = 0; item <= 7; item++) {\n        let bootCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        bootCircle.setAttribute('class', CLS_SPINCIRCLE + '_' + item);\n        bootCircle.setAttribute('r', defaultRadius + '');\n        bootCircle.setAttribute('transform', 'translate(' + trans + ',' + trans + ')');\n        svgBoot.appendChild(bootCircle);\n    }\n}\nfunction boot_calculate_attributes(innerContainer, radius) {\n    let svg = innerContainer.querySelector('svg.e-spin-bootstrap');\n    svg.style.width = svg.style.height = radius + 'px';\n    let x = 0;\n    let y = 0;\n    let rad = 24;\n    let startArc = 90;\n    for (let item = 0; item <= 7; item++) {\n        let start = defineArcPoints(x, y, rad, startArc);\n        let circleEle = svg.querySelector('.' + CLS_SPINCIRCLE + '_' + item);\n        circleEle.setAttribute('cx', start.x + '');\n        circleEle.setAttribute('cy', start.y + '');\n        startArc = startArc >= 360 ? 0 : startArc;\n        startArc = startArc + 45;\n    }\n}\nfunction generateSeries(begin, stop) {\n    let series = [];\n    let start = begin;\n    let end = stop;\n    let increment = false;\n    let count = 1;\n    formSeries(start);\n    function formSeries(i) {\n        series.push(i);\n        if (i !== end || count === 1) {\n            if (i <= start && i > 1 && !increment) {\n                i = parseFloat((i - 0.2).toFixed(2));\n            }\n            else if (i === 1) {\n                i = 7;\n                i = parseFloat((i + 0.2).toFixed(2));\n                increment = true;\n            }\n            else if (i < 8 && increment) {\n                i = parseFloat((i + 0.2).toFixed(2));\n                if (i === 8) {\n                    increment = false;\n                }\n            }\n            else if (i <= 8 && !increment) {\n                i = parseFloat((i - 0.2).toFixed(2));\n            }\n            ++count;\n            formSeries(i);\n        }\n    }\n    return series;\n}\nfunction animateBootstrap(innerContainer) {\n    let svg = innerContainer.querySelector('svg.e-spin-bootstrap');\n    let id = svg.getAttribute('id');\n    for (let i = 1; i <= 8; i++) {\n        let circleEle = (innerContainer.getElementsByClassName('e-path-circle_' +\n            (i === 8 ? 0 : i))[0]);\n        rotation(circleEle, i, i, generateSeries(i, i), id);\n    }\n    function rotation(circle, start, end, series, id) {\n        let count = 0;\n        boot_animate(start);\n        function boot_animate(radius) {\n            if (globalTimeOut[id].isAnimate) {\n                ++count;\n                circle.setAttribute('r', radius + '');\n                if (count >= series.length) {\n                    count = 0;\n                }\n                globalTimeOut[id].timeOut = setTimeout(boot_animate.bind(null, series[count]), 18);\n            }\n        }\n    }\n}\nfunction replaceContent(container, template, cssClass) {\n    if (!isNullOrUndefined(cssClass)) {\n        container.classList.add(cssClass);\n    }\n    let inner = container.querySelector('.e-spinner-inner');\n    inner.innerHTML = template;\n}\nfunction calculateRadius(width, theme) {\n    let defaultSize;\n    switch (theme) {\n        case 'Material':\n            defaultSize = DEFT_MAT_WIDTH;\n            break;\n        case 'Fabric':\n            defaultSize = DEFT_FAB_WIDTH;\n            break;\n        case 'Bootstrap4':\n            defaultSize = DEFT_BOOT4_WIDTH;\n            break;\n        default:\n            defaultSize = DEFT_BOOT_WIDTH;\n    }\n    width = width ? parseFloat(width + '') : defaultSize;\n    return theme === 'Bootstrap' ? width : width / 2;\n}\nfunction globalVariables(id, radius, count, previousId) {\n    return {\n        radius: radius,\n        count: count,\n        previousId: previousId\n    };\n}\nfunction random_generator() {\n    let random = '';\n    let combine = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 5; i++) {\n        random += combine.charAt(Math.floor(Math.random() * combine.length));\n    }\n    return random;\n}\nfunction create_fabric_element(innerCon, uniqueID, themeClass, makeElement) {\n    let svgFabric = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svgFabric.setAttribute('id', uniqueID);\n    svgFabric.setAttribute('class', themeClass);\n    let fabricCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    fabricCirclePath.setAttribute('class', CLS_SPINCIRCLE);\n    let fabricCircleArc = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    fabricCircleArc.setAttribute('class', CLS_SPINARC);\n    innerCon.insertBefore(svgFabric, innerCon.firstChild);\n    svgFabric.appendChild(fabricCirclePath);\n    svgFabric.appendChild(fabricCircleArc);\n}\nfunction create_material_element(innerContainer, uniqueID, makeElement, cls) {\n    let svgMaterial = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svgMaterial.setAttribute('class', cls);\n    svgMaterial.setAttribute('id', uniqueID);\n    let matCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    matCirclePath.setAttribute('class', CLS_SPINCIRCLE);\n    innerContainer.insertBefore(svgMaterial, innerContainer.firstChild);\n    svgMaterial.appendChild(matCirclePath);\n}\nfunction create_spinner_container(target, makeElement) {\n    let spinnerContainer = makeElement('div', {});\n    spinnerContainer.classList.add(CLS_SPINWRAP);\n    let spinnerInnerContainer = makeElement('div', {});\n    spinnerInnerContainer.classList.add(CLS_SPININWRAP);\n    target.appendChild(spinnerContainer);\n    spinnerContainer.appendChild(spinnerInnerContainer);\n    return { wrap: spinnerContainer, inner_wrap: spinnerInnerContainer };\n}\nfunction animateMaterial(spinnerInfo) {\n    let start = 1;\n    let end = 149;\n    let duration = 1333;\n    let max = 75;\n    createCircle(start, end, easeAnimation, duration, spinnerInfo.globalInfo[spinnerInfo.uniqueID].count, max, spinnerInfo);\n    spinnerInfo.globalInfo[spinnerInfo.uniqueID].count = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].count % 4;\n}\nfunction createCircle(start, end, easing, duration, count, max, spinnerInfo) {\n    let id = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId;\n    let startTime = new Date().getTime();\n    let change = end - start;\n    let diameter = getSize((spinnerInfo.globalInfo[spinnerInfo.uniqueID].radius * 2) + '');\n    let strokeSize = getStrokeSize(diameter);\n    let rotate = -90 * (spinnerInfo.globalInfo[spinnerInfo.uniqueID].count || 0);\n    mat_animation(spinnerInfo);\n    function mat_animation(spinnerInfo) {\n        let currentTime = Math.max(0, Math.min(new Date().getTime() - startTime, duration));\n        updatePath(easing(currentTime, start, change, duration), spinnerInfo.container);\n        if (id === spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId && currentTime < duration) {\n            globalTimeOut[spinnerInfo.uniqueID].timeOut = setTimeout(mat_animation.bind(null, spinnerInfo), 1);\n        }\n        else {\n            animateMaterial(spinnerInfo);\n        }\n    }\n    function updatePath(value, container) {\n        if ((!isNullOrUndefined(container.querySelector('svg.e-spin-material')))\n            && (!isNullOrUndefined(container.querySelector('svg.e-spin-material').querySelector('path.e-path-circle')))) {\n            let svg = container.querySelector('svg.e-spin-material');\n            let path = svg.querySelector('path.e-path-circle');\n            path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, value, max) + '');\n            path.setAttribute('transform', 'rotate(' + (rotate) + ' ' + diameter / 2 + ' ' + diameter / 2 + ')');\n        }\n    }\n}\nfunction mat_calculate_attributes(radius, container, type, cls) {\n    let diameter = radius * 2;\n    let svg = container.querySelector('svg.' + cls);\n    let path = svg.querySelector('path.e-path-circle');\n    let strokeSize = getStrokeSize(diameter);\n    let transformOrigin = (diameter / 2) + 'px';\n    svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);\n    svg.style.width = svg.style.height = diameter + 'px';\n    svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;\n    path.setAttribute('d', drawArc(diameter, strokeSize));\n    if (type === 'Material') {\n        path.setAttribute('stroke-width', strokeSize + '');\n        path.setAttribute('stroke-dasharray', ((diameter - strokeSize) * Math.PI * 0.75) + '');\n        path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, 1, 75) + '');\n    }\n}\nfunction getSize(value) {\n    let parsed = parseFloat(value);\n    return parsed;\n}\nfunction drawArc(diameter, strokeSize) {\n    let radius = diameter / 2;\n    let offset = strokeSize / 2;\n    return 'M' + radius + ',' + offset\n        + 'A' + (radius - offset) + ',' + (radius - offset) + ' 0 1 1 ' + offset + ',' + radius;\n}\nfunction getStrokeSize(diameter) {\n    return 10 / 100 * diameter;\n}\nfunction getDashOffset(diameter, strokeSize, value, max) {\n    return (diameter - strokeSize) * Math.PI * ((3 * (max) / 100) - (value / 100));\n}\nfunction easeAnimation(current, start, change, duration) {\n    let timestamp = (current /= duration) * current;\n    let timecount = timestamp * current;\n    return start + change * (6 * timecount * timestamp + -15 * timestamp * timestamp + 10 * timecount);\n}\nfunction fb_calculate_attributes(radius, innerConainer, trgClass) {\n    let centerX = radius;\n    let centerY = radius;\n    let diameter = radius * 2;\n    let startArc = 315;\n    let endArc = 45;\n    let svg = innerConainer.querySelector('.' + trgClass);\n    let circle = svg.querySelector('.e-path-circle');\n    let path = svg.querySelector('.e-path-arc');\n    let transformOrigin = (diameter / 2) + 'px';\n    circle.setAttribute('d', defineCircle(centerX, centerY, radius));\n    path.setAttribute('d', defineArc(centerX, centerY, radius, startArc, endArc));\n    svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);\n    svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;\n    svg.style.width = svg.style.height = diameter + 'px';\n}\nfunction defineArcPoints(centerX, centerY, radius, angle) {\n    let radians = (angle - 90) * Math.PI / 180.0;\n    return {\n        x: centerX + (radius * Math.cos(radians)),\n        y: centerY + (radius * Math.sin(radians))\n    };\n}\nfunction defineArc(x, y, radius, startArc, endArc) {\n    let start = defineArcPoints(x, y, radius, endArc);\n    let end = defineArcPoints(x, y, radius, startArc);\n    let d = [\n        'M', start.x, start.y,\n        'A', radius, radius, 0, 0, 0, end.x, end.y\n    ].join(' ');\n    return d;\n}\nfunction defineCircle(x, y, radius) {\n    let d = [\n        'M', x, y,\n        'm', -radius, 0,\n        'a', radius, radius, 0, 1, 0, radius * 2, 0,\n        'a', radius, radius, 0, 1, 0, -radius * 2, 0,\n    ].join(' ');\n    return d;\n}\n/**\n * Function to show the Spinner.\n * @param container - Specify the target of the Spinner.\n * @private\n */\nfunction showSpinner(container) {\n    showHideSpinner(container, false);\n    container = null;\n}\nfunction showHideSpinner(container, isHide) {\n    let spinnerWrap;\n    if (container) {\n        spinnerWrap = container.classList.contains(CLS_SPINWRAP) ? container :\n            container.querySelector('.' + CLS_SPINWRAP);\n    }\n    if (container && spinnerWrap) {\n        let inner = spinnerWrap.querySelector('.' + CLS_SPININWRAP);\n        let spinCheck;\n        spinCheck = isHide ? !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_HIDESPIN) :\n            !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_SHOWSPIN);\n        if (spinCheck) {\n            let svgEle = spinnerWrap.querySelector('svg');\n            if (isNullOrUndefined(svgEle)) {\n                return;\n            }\n            let id = svgEle.getAttribute('id');\n            globalTimeOut[id].isAnimate = !isHide;\n            switch (globalTimeOut[id].type) {\n                case 'Material':\n                    isHide ? clearTimeout(globalTimeOut[id].timeOut) : startMatAnimate(inner, id, globalTimeOut[id].radius);\n                    break;\n                case 'Bootstrap':\n                    isHide ? clearTimeout(globalTimeOut[id].timeOut) : animateBootstrap(inner);\n                    break;\n            }\n        }\n        isHide ? classList(spinnerWrap, [CLS_HIDESPIN], [CLS_SHOWSPIN]) : classList(spinnerWrap, [CLS_SHOWSPIN], [CLS_HIDESPIN]);\n        container = null;\n    }\n}\n/**\n * Function to hide the Spinner.\n * @param container - Specify the target of the Spinner.\n * @private\n */\nfunction hideSpinner(container) {\n    showHideSpinner(container, true);\n    container = null;\n}\n/**\n * Function to change the Spinners in a page globally from application end.\n * ```\n * E.g : setSpinner({ cssClass: 'custom-css'; type: 'Material' });\n * ```\n * @param args\n * @private\n */\nfunction setSpinner(args, internalCreateElement) {\n    let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    if (args.template !== undefined) {\n        spinTemplate = args.template;\n        if (args.template !== undefined) {\n            spinCSSClass = args.cssClass;\n        }\n    }\n    let container = document.querySelectorAll('.' + CLS_SPINWRAP);\n    for (let index = 0; index < container.length; index++) {\n        ensureTemplate(args.template, container[index], args.type, args.cssClass, makeElement);\n    }\n}\nfunction ensureTemplate(template, container, theme, cssClass, makeEle) {\n    if (isNullOrUndefined(template) && !container.classList.contains(CLS_SPINTEMPLATE)) {\n        replaceTheme(container, theme, cssClass, makeEle);\n        if (container.classList.contains(CLS_SHOWSPIN)) {\n            container.classList.remove(CLS_SHOWSPIN);\n            showSpinner(container);\n        }\n        else {\n            container.classList.remove(CLS_HIDESPIN);\n            hideSpinner(container);\n        }\n    }\n    else {\n        spinTemplate = template;\n        if (!isNullOrUndefined(cssClass)) {\n            spinCSSClass = cssClass;\n        }\n    }\n}\nfunction replaceTheme(container, theme, cssClass, makeEle) {\n    if (!isNullOrUndefined(cssClass)) {\n        container.classList.add(cssClass);\n    }\n    let svgElement = container.querySelector('svg');\n    let radius = theme === 'Bootstrap' ? parseFloat(svgElement.style.height) : parseFloat(svgElement.style.height) / 2;\n    let classNames = svgElement.getAttribute('class');\n    let svgClassList = classNames.split(/\\s/);\n    if (svgClassList.indexOf('e-spin-material') >= 0) {\n        let id = svgElement.getAttribute('id');\n        clearTimeout(globalTimeOut[id].timeOut);\n    }\n    setTheme(theme, container, radius, makeEle);\n}\n\n/**\n * spinner modules\n */\n\n/**\n * Popup Components\n */\n\nexport { PositionData, Popup, getScrollableParent, getZindexPartial, getMaxZindex, calculateRelativeBasedPosition, calculatePosition, fit, isCollide, flip, ButtonProps, AnimationSettings, Dialog, DialogUtility, Animation$1 as Animation, Tooltip, Spinner, createSpinner, showSpinner, hideSpinner, setSpinner };\n//# sourceMappingURL=ej2-popups.es2015.js.map\n","import { Ajax, Animation, Base, Browser, ChildProperty, Collection, Complex, Component, Event, EventHandler, Internationalization, KeyboardEvents, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, addClass, append, attributes, classList, closest, compile, createElement, detach, extend, formatUnit, getInstance, getNumericObject, getUniqueID, getValue, isBlazor, isNullOrUndefined, merge, onIntlChange, remove, removeClass, resetBlazorTemplate, rippleEffect, select, selectAll, setStyleAttribute, setValue, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { Popup, Tooltip, createSpinner, getZindexPartial, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\nimport { Deferred, SplitButton, getModel } from '@syncfusion/ej2-splitbuttons';\n\nconst CLASSNAMES = {\n    RTL: 'e-rtl',\n    DISABLE: 'e-disabled',\n    INPUT: 'e-input',\n    TEXTAREA: 'e-multi-line-input',\n    INPUTGROUP: 'e-input-group',\n    FLOATINPUT: 'e-float-input',\n    FLOATLINE: 'e-float-line',\n    FLOATTEXT: 'e-float-text',\n    CLEARICON: 'e-clear-icon',\n    CLEARICONHIDE: 'e-clear-icon-hide',\n    LABELTOP: 'e-label-top',\n    LABELBOTTOM: 'e-label-bottom',\n    NOFLOATLABEL: 'e-no-float-label',\n    INPUTCUSTOMTAG: 'e-input-custom-tag',\n    FLOATCUSTOMTAG: 'e-float-custom-tag'\n};\n/**\n * Base for Input creation through util methods.\n */\nvar Input;\n(function (Input) {\n    let floatType;\n    /**\n     * Create a wrapper to input element with multiple span elements and set the basic properties to input based components.\n     * ```\n     * E.g : Input.createInput({ element: element, floatLabelType : \"Auto\", properties: { placeholder: 'Search' } });\n     * ```\n     * @param args\n     */\n    function createInput(args, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let inputObject = { container: null, buttons: [], clearButton: null };\n        floatType = args.floatLabelType;\n        if (isNullOrUndefined(args.floatLabelType) || args.floatLabelType === 'Never') {\n            inputObject.container = createInputContainer(args, CLASSNAMES.INPUTGROUP, CLASSNAMES.INPUTCUSTOMTAG, 'span', makeElement);\n            args.element.parentNode.insertBefore(inputObject.container, args.element);\n            addClass([args.element], CLASSNAMES.INPUT);\n            inputObject.container.appendChild(args.element);\n        }\n        else {\n            createFloatingInput(args, inputObject, makeElement);\n        }\n        bindInitialEvent(args);\n        if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.showClearButton) &&\n            args.properties.showClearButton && args.element.tagName !== 'TEXTAREA') {\n            setClearButton(args.properties.showClearButton, args.element, inputObject, true, makeElement);\n            inputObject.clearButton.setAttribute('role', 'button');\n            if (inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n                addClass([inputObject.container], CLASSNAMES.INPUTGROUP);\n            }\n        }\n        if (!isNullOrUndefined(args.buttons) && args.element.tagName !== 'TEXTAREA') {\n            for (let i = 0; i < args.buttons.length; i++) {\n                inputObject.buttons.push(appendSpan(args.buttons[i], inputObject.container, makeElement));\n            }\n        }\n        if (!isNullOrUndefined(args.element) && args.element.tagName === 'TEXTAREA') {\n            addClass([inputObject.container], CLASSNAMES.TEXTAREA);\n        }\n        inputObject = setPropertyValue(args, inputObject);\n        return inputObject;\n    }\n    Input.createInput = createInput;\n    function bindInitialEvent(args) {\n        checkInputValue(args.floatLabelType, args.element);\n        args.element.addEventListener('focus', function () {\n            let parent = getParentNode(this);\n            if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline')\n                || parent.classList.contains('e-filled')) {\n                parent.classList.add('e-input-focus');\n            }\n        });\n        args.element.addEventListener('blur', function () {\n            let parent = getParentNode(this);\n            if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline')\n                || parent.classList.contains('e-filled')) {\n                parent.classList.remove('e-input-focus');\n            }\n        });\n        args.element.addEventListener('input', () => {\n            checkInputValue(floatType, args.element);\n        });\n    }\n    Input.bindInitialEvent = bindInitialEvent;\n    function checkInputValue(floatLabelType, inputElement) {\n        let inputValue = inputElement.value;\n        if (inputValue !== '' && !isNullOrUndefined(inputValue)) {\n            inputElement.parentElement.classList.add('e-valid-input');\n        }\n        else if (floatLabelType !== 'Always' && inputElement.parentElement) {\n            inputElement.parentElement.classList.remove('e-valid-input');\n        }\n    }\n    function _focusFn() {\n        let label = getParentNode(this).getElementsByClassName('e-float-text')[0];\n        if (!isNullOrUndefined(label)) {\n            addClass([label], CLASSNAMES.LABELTOP);\n            if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n                removeClass([label], CLASSNAMES.LABELBOTTOM);\n            }\n        }\n    }\n    function _blurFn() {\n        let parent = getParentNode(this);\n        if ((parent.getElementsByTagName('textarea')[0]) ? parent.getElementsByTagName('textarea')[0].value === '' :\n            parent.getElementsByTagName('input')[0].value === '') {\n            let label = parent.getElementsByClassName('e-float-text')[0];\n            if (!isNullOrUndefined(label)) {\n                if (label.classList.contains(CLASSNAMES.LABELTOP)) {\n                    removeClass([label], CLASSNAMES.LABELTOP);\n                }\n                addClass([label], CLASSNAMES.LABELBOTTOM);\n            }\n        }\n    }\n    function wireFloatingEvents(element) {\n        element.addEventListener('focus', _focusFn);\n        element.addEventListener('blur', _blurFn);\n    }\n    Input.wireFloatingEvents = wireFloatingEvents;\n    function unwireFloatingEvents(element) {\n        element.removeEventListener('focus', _focusFn);\n        element.removeEventListener('blur', _blurFn);\n    }\n    function createFloatingInput(args, inputObject, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let floatLinelement;\n        let floatLabelElement;\n        if (args.floatLabelType === 'Auto') {\n            wireFloatingEvents(args.element);\n        }\n        if (isNullOrUndefined(inputObject.container)) {\n            inputObject.container = createInputContainer(args, CLASSNAMES.FLOATINPUT, CLASSNAMES.FLOATCUSTOMTAG, 'div', makeElement);\n            args.element.parentNode.insertBefore(inputObject.container, args.element);\n        }\n        else {\n            if (!isNullOrUndefined(args.customTag)) {\n                inputObject.container.classList.add(CLASSNAMES.FLOATCUSTOMTAG);\n            }\n            inputObject.container.classList.add(CLASSNAMES.FLOATINPUT);\n        }\n        floatLinelement = makeElement('span', { className: CLASSNAMES.FLOATLINE });\n        floatLabelElement = makeElement('label', { className: CLASSNAMES.FLOATTEXT });\n        if (!isNullOrUndefined(args.element.id) && args.element.id !== '') {\n            floatLabelElement.id = 'label_' + args.element.id.replace(/ /g, '_');\n            attributes(args.element, { 'aria-labelledby': floatLabelElement.id });\n        }\n        if (!isNullOrUndefined(args.element.placeholder) && args.element.placeholder !== '') {\n            floatLabelElement.innerText = encodePlaceHolder(args.element.placeholder);\n            args.element.removeAttribute('placeholder');\n        }\n        if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.placeholder) &&\n            args.properties.placeholder !== '') {\n            floatLabelElement.innerText = encodePlaceHolder(args.properties.placeholder);\n        }\n        if (!floatLabelElement.innerText) {\n            inputObject.container.classList.add(CLASSNAMES.NOFLOATLABEL);\n        }\n        if (inputObject.container.classList.contains('e-float-icon-left')) {\n            let inputWrap = inputObject.container.querySelector('.e-input-in-wrap');\n            inputWrap.appendChild(args.element);\n            inputWrap.appendChild(floatLinelement);\n            inputWrap.appendChild(floatLabelElement);\n        }\n        else {\n            inputObject.container.appendChild(args.element);\n            inputObject.container.appendChild(floatLinelement);\n            inputObject.container.appendChild(floatLabelElement);\n        }\n        updateLabelState(args.element.value, floatLabelElement);\n        if (args.floatLabelType === 'Always') {\n            if (floatLabelElement.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n                removeClass([floatLabelElement], CLASSNAMES.LABELBOTTOM);\n            }\n            addClass([floatLabelElement], CLASSNAMES.LABELTOP);\n        }\n        if (args.floatLabelType === 'Auto') {\n            args.element.addEventListener('input', (event) => {\n                updateLabelState(args.element.value, floatLabelElement);\n            });\n            args.element.addEventListener('blur', (event) => {\n                updateLabelState(args.element.value, floatLabelElement);\n            });\n        }\n        if (!isNullOrUndefined(args.element.getAttribute('id'))) {\n            floatLabelElement.setAttribute('for', args.element.getAttribute('id'));\n        }\n    }\n    function checkFloatLabelType(type, container) {\n        if (type === 'Always' && container.classList.contains('e-outline')) {\n            container.classList.add('e-valid-input');\n        }\n    }\n    function setPropertyValue(args, inputObject) {\n        if (!isNullOrUndefined(args.properties)) {\n            for (let prop of Object.keys(args.properties)) {\n                switch (prop) {\n                    case 'cssClass':\n                        setCssClass(args.properties.cssClass, [inputObject.container]);\n                        checkFloatLabelType(args.floatLabelType, inputObject.container);\n                        break;\n                    case 'enabled':\n                        setEnabled(args.properties.enabled, args.element, args.floatLabelType, inputObject.container);\n                        break;\n                    case 'enableRtl':\n                        setEnableRtl(args.properties.enableRtl, [inputObject.container]);\n                        break;\n                    case 'placeholder':\n                        setPlaceholder(args.properties.placeholder, args.element);\n                        break;\n                    case 'readonly':\n                        setReadonly(args.properties.readonly, args.element);\n                        break;\n                }\n            }\n        }\n        return inputObject;\n    }\n    function updateIconState(value, button) {\n        if (value) {\n            removeClass([button], CLASSNAMES.CLEARICONHIDE);\n        }\n        else {\n            addClass([button], CLASSNAMES.CLEARICONHIDE);\n        }\n    }\n    function updateLabelState(value, label) {\n        if (value) {\n            addClass([label], CLASSNAMES.LABELTOP);\n            if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n                removeClass([label], CLASSNAMES.LABELBOTTOM);\n            }\n        }\n        else {\n            if (label.classList.contains(CLASSNAMES.LABELTOP)) {\n                removeClass([label], CLASSNAMES.LABELTOP);\n            }\n            addClass([label], CLASSNAMES.LABELBOTTOM);\n        }\n    }\n    function getParentNode(element) {\n        let parentNode = isNullOrUndefined(element.parentNode) ? element\n            : element.parentNode;\n        if (parentNode && parentNode.classList.contains('e-input-in-wrap')) {\n            parentNode = parentNode.parentNode;\n        }\n        return parentNode;\n    }\n    /**\n     * To create clear button.\n     */\n    function createClearButton(element, inputObject, initial, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let button = makeElement('span', { className: CLASSNAMES.CLEARICON });\n        let container = inputObject.container;\n        if (!isNullOrUndefined(initial)) {\n            container.appendChild(button);\n        }\n        else {\n            let baseElement = inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT) ?\n                inputObject.container.querySelector('.' + CLASSNAMES.FLOATTEXT) : element;\n            baseElement.insertAdjacentElement('afterend', button);\n        }\n        if (!isNullOrUndefined(container) &&\n            container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n            addClass([container], CLASSNAMES.INPUTGROUP);\n        }\n        addClass([button], CLASSNAMES.CLEARICONHIDE);\n        wireClearBtnEvents(element, button, container);\n        button.setAttribute('aria-label', 'close');\n        return button;\n    }\n    function wireClearBtnEvents(element, button, container) {\n        button.addEventListener('click', (event) => {\n            if (!(element.classList.contains(CLASSNAMES.DISABLE) || element.readOnly)) {\n                event.preventDefault();\n                if (element !== document.activeElement) {\n                    element.focus();\n                }\n                element.value = '';\n                addClass([button], CLASSNAMES.CLEARICONHIDE);\n            }\n        });\n        element.addEventListener('input', (event) => {\n            updateIconState(element.value, button);\n        });\n        element.addEventListener('focus', (event) => {\n            updateIconState(element.value, button);\n        });\n        element.addEventListener('blur', (event) => {\n            setTimeout(() => { addClass([button], CLASSNAMES.CLEARICONHIDE); }, 200);\n        });\n    }\n    Input.wireClearBtnEvents = wireClearBtnEvents;\n    function validateLabel(element, floatLabelType) {\n        let parent = getParentNode(element);\n        if (parent.classList.contains(CLASSNAMES.FLOATINPUT) && floatLabelType === 'Auto') {\n            let label = getParentNode(element).getElementsByClassName('e-float-text')[0];\n            updateLabelState(element.value, label);\n        }\n    }\n    /**\n     * To create input box contianer.\n     */\n    function createInputContainer(args, className, tagClass, tag, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let container;\n        if (!isNullOrUndefined(args.customTag)) {\n            container = makeElement(args.customTag, { className: className });\n            container.classList.add(tagClass);\n        }\n        else {\n            container = makeElement(tag, { className: className });\n        }\n        container.classList.add('e-control-wrapper');\n        return container;\n    }\n    function encodePlaceHolder(placeholder) {\n        let result = '';\n        if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n            let spanEle = document.createElement('span');\n            spanEle.innerHTML = '<input  placeholder=\"' + placeholder + '\"/>';\n            let hiddenInput = (spanEle.children[0]);\n            result = hiddenInput.placeholder;\n        }\n        return result;\n    }\n    /**\n     * Sets the value to the input element.\n     * ```\n     * E.g : Input.setValue('content', element, \"Auto\", true );\n     * ```\n     * @param value - Specify the value of the input element.\n     * @param element - The element on which the specified value is updated.\n     * @param floatLabelType - Specify the float label type of the input element.\n     * @param clearButton - Boolean value to specify whether the clear icon is enabled / disabled on the input.\n     */\n    function setValue$$1(value, element, floatLabelType, clearButton) {\n        element.value = value;\n        if ((!isNullOrUndefined(floatLabelType)) && floatLabelType === 'Auto') {\n            validateLabel(element, floatLabelType);\n        }\n        if (!isNullOrUndefined(clearButton) && clearButton) {\n            let parentElement = getParentNode(element);\n            if (!isNullOrUndefined(parentElement)) {\n                let button = parentElement.getElementsByClassName(CLASSNAMES.CLEARICON)[0];\n                if (element.value && parentElement.classList.contains('e-input-focus')) {\n                    removeClass([button], CLASSNAMES.CLEARICONHIDE);\n                }\n                else {\n                    addClass([button], CLASSNAMES.CLEARICONHIDE);\n                }\n            }\n        }\n        checkInputValue(floatLabelType, element);\n    }\n    Input.setValue = setValue$$1;\n    /**\n     * Sets the single or multiple cssClass to wrapper of input element.\n     * ```\n     * E.g : Input.setCssClass('e-custom-class', [element]);\n     * ```\n     * @param cssClass - Css class names which are needed to add.\n     * @param elements - The elements which are needed to add / remove classes.\n     * @param oldClass - Css class names which are needed to remove. If old classes are need to remove, can give this optional parameter.\n     */\n    function setCssClass(cssClass, elements, oldClass) {\n        if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n            removeClass(elements, oldClass.split(' '));\n        }\n        if (!isNullOrUndefined(cssClass) && cssClass !== '') {\n            addClass(elements, cssClass.split(' '));\n        }\n    }\n    Input.setCssClass = setCssClass;\n    /**\n     * Set the width to the wrapper of input element.\n     * ```\n     * E.g : Input.setWidth('200px', container);\n     * ```\n     * @param width - Width value which is need to add.\n     * @param container - The element on which the width is need to add.\n     */\n    function setWidth(width, container) {\n        if (typeof width === 'number') {\n            container.style.width = formatUnit(width);\n        }\n        else if (typeof width === 'string') {\n            container.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n        }\n    }\n    Input.setWidth = setWidth;\n    /**\n     * Set the placeholder attribute to the input element.\n     * ```\n     * E.g : Input.setPlaceholder('Search here', element);\n     * ```\n     * @param placeholder - Placeholder value which is need to add.\n     * @param element - The element on which the placeholder is need to add.\n     */\n    function setPlaceholder(placeholder, element) {\n        let parentElement;\n        placeholder = encodePlaceHolder(placeholder);\n        parentElement = getParentNode(element);\n        if (parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n            if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = placeholder;\n                parentElement.classList.remove(CLASSNAMES.NOFLOATLABEL);\n                element.removeAttribute('placeholder');\n            }\n            else {\n                parentElement.classList.add(CLASSNAMES.NOFLOATLABEL);\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';\n            }\n        }\n        else {\n            if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n                attributes(element, { 'placeholder': placeholder, 'aria-placeholder': placeholder });\n            }\n            else {\n                element.removeAttribute('placeholder');\n                element.removeAttribute('aria-placeholder');\n            }\n        }\n    }\n    Input.setPlaceholder = setPlaceholder;\n    /**\n     * Set the read only attribute to the input element\n     * ```\n     * E.g : Input.setReadonly(true, element);\n     * ```\n     * @param isReadonly\n     * - Boolean value to specify whether to set read only. Setting \"True\" value enables read only.\n     * @param element\n     * - The element which is need to enable read only.\n     */\n    function setReadonly(isReadonly, element, floatLabelType) {\n        if (isReadonly) {\n            attributes(element, { readonly: '' });\n        }\n        else {\n            element.removeAttribute('readonly');\n        }\n        if (!isNullOrUndefined(floatLabelType)) {\n            validateLabel(element, floatLabelType);\n        }\n    }\n    Input.setReadonly = setReadonly;\n    /**\n     * Displays the element direction from right to left when its enabled.\n     * ```\n     * E.g : Input.setEnableRtl(true, [inputObj.container]);\n     * ```\n     * @param isRtl\n     * - Boolean value to specify whether to set RTL. Setting \"True\" value enables the RTL mode.\n     * @param elements\n     * - The elements that are needed to enable/disable RTL.\n     */\n    function setEnableRtl(isRtl, elements) {\n        if (isRtl) {\n            addClass(elements, CLASSNAMES.RTL);\n        }\n        else {\n            removeClass(elements, CLASSNAMES.RTL);\n        }\n    }\n    Input.setEnableRtl = setEnableRtl;\n    /**\n     * Enables or disables the given input element.\n     * ```\n     * E.g : Input.setEnabled(false, element);\n     * ```\n     * @param isEnable\n     * - Boolean value to specify whether to enable or disable.\n     * @param element\n     * - Element to be enabled or disabled.\n     */\n    function setEnabled(isEnable, element, floatLabelType, inputContainer) {\n        let disabledAttrs = { 'disabled': 'disabled', 'aria-disabled': 'true' };\n        let considerWrapper = isNullOrUndefined(inputContainer) ? false : true;\n        if (isEnable) {\n            element.classList.remove(CLASSNAMES.DISABLE);\n            removeAttributes(disabledAttrs, element);\n            if (considerWrapper) {\n                removeClass([inputContainer], CLASSNAMES.DISABLE);\n            }\n        }\n        else {\n            element.classList.add(CLASSNAMES.DISABLE);\n            addAttributes(disabledAttrs, element);\n            if (considerWrapper) {\n                addClass([inputContainer], CLASSNAMES.DISABLE);\n            }\n        }\n        if (!isNullOrUndefined(floatLabelType)) {\n            validateLabel(element, floatLabelType);\n        }\n    }\n    Input.setEnabled = setEnabled;\n    function setClearButton(isClear, element, inputObject, initial, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        if (isClear) {\n            inputObject.clearButton = createClearButton(element, inputObject, initial, makeElement);\n        }\n        else {\n            inputObject.clearButton.remove();\n            inputObject.clearButton = null;\n        }\n    }\n    Input.setClearButton = setClearButton;\n    /**\n     * Removing the multiple attributes from the given element such as \"disabled\",\"id\" , etc.\n     * ```\n     * E.g : Input.removeAttributes({ 'disabled': 'disabled', 'aria-disabled': 'true' }, element);\n     * ```\n     * @param attrs\n     *  - Array of attributes which are need to removed from the element.\n     * @param element\n     *  - Element on which the attributes are needed to be removed.\n     */\n    function removeAttributes(attrs, element) {\n        for (let key of Object.keys(attrs)) {\n            let parentElement;\n            parentElement = getParentNode(element);\n            if (key === 'disabled') {\n                element.classList.remove(CLASSNAMES.DISABLE);\n            }\n            if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {\n                parentElement.classList.remove(CLASSNAMES.DISABLE);\n            }\n            if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';\n            }\n            else {\n                element.removeAttribute(key);\n            }\n        }\n    }\n    Input.removeAttributes = removeAttributes;\n    /**\n     * Adding the multiple attributes to the given element such as \"disabled\",\"id\" , etc.\n     * ```\n     * E.g : Input.addAttributes({ 'id': 'inputpopup' }, element);\n     * ```\n     * @param attrs\n     * - Array of attributes which is added to element.\n     * @param element\n     * - Element on which the attributes are needed to be added.\n     */\n    function addAttributes(attrs, element) {\n        for (let key of Object.keys(attrs)) {\n            let parentElement;\n            parentElement = getParentNode(element);\n            if (key === 'disabled') {\n                element.classList.add(CLASSNAMES.DISABLE);\n            }\n            if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {\n                parentElement.classList.add(CLASSNAMES.DISABLE);\n            }\n            if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = attrs[key];\n            }\n            else {\n                element.setAttribute(key, attrs[key]);\n            }\n        }\n    }\n    Input.addAttributes = addAttributes;\n    function removeFloating(input) {\n        let container = input.container;\n        if (!isNullOrUndefined(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n            let inputEle = container.querySelector('textarea') ? container.querySelector('textarea') :\n                container.querySelector('input');\n            let placeholder = container.querySelector('.' + CLASSNAMES.FLOATTEXT).textContent;\n            let clearButton = container.querySelector('.e-clear-icon') !== null;\n            detach(container.querySelector('.' + CLASSNAMES.FLOATLINE));\n            detach(container.querySelector('.' + CLASSNAMES.FLOATTEXT));\n            classList(container, [CLASSNAMES.INPUTGROUP], [CLASSNAMES.FLOATINPUT]);\n            unwireFloatingEvents(inputEle);\n            attributes(inputEle, { 'placeholder': placeholder });\n            inputEle.classList.add(CLASSNAMES.INPUT);\n            if (!clearButton && inputEle.tagName === 'INPUT') {\n                inputEle.removeAttribute('required');\n            }\n        }\n    }\n    Input.removeFloating = removeFloating;\n    function addFloating(input, type, placeholder, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let container = closest(input, '.' + CLASSNAMES.INPUTGROUP);\n        floatType = type;\n        if (type !== 'Never') {\n            let customTag = container.tagName;\n            customTag = customTag !== 'DIV' && customTag !== 'SPAN' ? customTag : null;\n            let args = { element: input, floatLabelType: type, customTag: customTag, properties: { placeholder: placeholder } };\n            let iconEle = container.querySelector('.e-clear-icon');\n            let inputObj = { container: container };\n            input.classList.remove(CLASSNAMES.INPUT);\n            createFloatingInput(args, inputObj, makeElement);\n            let isPrependIcon = container.classList.contains('e-float-icon-left');\n            if (isNullOrUndefined(iconEle)) {\n                if (isPrependIcon) {\n                    let inputWrap = container.querySelector('.e-input-in-wrap');\n                    iconEle = inputWrap.querySelector('.e-input-group-icon');\n                }\n                else {\n                    iconEle = container.querySelector('.e-input-group-icon');\n                }\n            }\n            if (isNullOrUndefined(iconEle)) {\n                if (isPrependIcon) {\n                    iconEle = container.querySelector('.e-input-group-icon');\n                }\n                if (isNullOrUndefined(iconEle)) {\n                    container.classList.remove(CLASSNAMES.INPUTGROUP);\n                }\n            }\n            else {\n                let floatLine = container.querySelector('.' + CLASSNAMES.FLOATLINE);\n                let floatText = container.querySelector('.' + CLASSNAMES.FLOATTEXT);\n                let wrapper = isPrependIcon ? container.querySelector('.e-input-in-wrap') : container;\n                wrapper.insertBefore(input, iconEle);\n                wrapper.insertBefore(floatLine, iconEle);\n                wrapper.insertBefore(floatText, iconEle);\n            }\n        }\n        checkFloatLabelType(type, input.parentElement);\n    }\n    Input.addFloating = addFloating;\n    /**\n     * Enable or Disable the ripple effect on the icons inside the Input. Ripple effect is only applicable for material theme.\n     * ```\n     * E.g : Input.setRipple(true, [inputObjects]);\n     * ```\n     * @param isRipple\n     * - Boolean value to specify whether to enable the ripple effect.\n     * @param inputObject\n     * - Specify the collection of input objects.\n     */\n    function setRipple(isRipple, inputObj) {\n        for (let i = 0; i < inputObj.length; i++) {\n            _internalRipple(isRipple, inputObj[i].container);\n        }\n    }\n    Input.setRipple = setRipple;\n    function _internalRipple(isRipple, container, button) {\n        let argsButton = [];\n        argsButton.push(button);\n        let buttons = isNullOrUndefined(button) ?\n            container.querySelectorAll('.e-input-group-icon') : argsButton;\n        if (isRipple && buttons.length > 0) {\n            for (let index = 0; index < buttons.length; index++) {\n                buttons[index].addEventListener('mousedown', _onMouseDownRipple, false);\n                buttons[index].addEventListener('mouseup', _onMouseUpRipple, false);\n            }\n        }\n        else if (buttons.length > 0) {\n            for (let index = 0; index < buttons.length; index++) {\n                buttons[index].removeEventListener('mousedown', _onMouseDownRipple, this);\n                buttons[index].removeEventListener('mouseup', _onMouseUpRipple, this);\n            }\n        }\n    }\n    function _onMouseRipple(container, button) {\n        if (!container.classList.contains('e-disabled') && !container.querySelector('input').readOnly) {\n            button.classList.add('e-input-btn-ripple');\n        }\n    }\n    function _onMouseDownRipple() {\n        let ele = this;\n        let parentEle = this.parentElement;\n        while (!parentEle.classList.contains('e-input-group')) {\n            parentEle = parentEle.parentElement;\n        }\n        _onMouseRipple(parentEle, ele);\n    }\n    function _onMouseUpRipple() {\n        let ele = this;\n        setTimeout(() => { ele.classList.remove('e-input-btn-ripple'); }, 500);\n    }\n    function createIconEle(iconClass, makeElement) {\n        let button = makeElement('span', { className: iconClass });\n        button.classList.add('e-input-group-icon');\n        return button;\n    }\n    /**\n     * Creates a new span element with the given icons added and append it in container element.\n     * ```\n     * E.g : Input.addIcon('append', 'e-icon-spin', inputObj.container, inputElement);\n     * ```\n     * @param position - Specify the icon placement on the input.Possible values are append and prepend.\n     * @param iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for input.\n     * @param container - The container on which created span element is going to append.\n     * @param inputElement - The inputElement on which created span element is going to prepend.\n     */\n    // tslint:disable\n    function addIcon(position, icons, container, input, internalCreate) {\n        // tslint:enable\n        let result = typeof (icons) === 'string' ? icons.split(',')\n            : icons;\n        if (position.toLowerCase() === 'append') {\n            for (let icon of result) {\n                appendSpan(icon, container, internalCreate);\n            }\n        }\n        else {\n            for (let icon of result) {\n                prependSpan(icon, container, input, internalCreate);\n            }\n        }\n    }\n    Input.addIcon = addIcon;\n    /**\n     * Creates a new span element with the given icons added and prepend it in input element.\n     * ```\n     * E.g : Input.prependSpan('e-icon-spin', inputObj.container, inputElement);\n     * ```\n     * @param iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for input.\n     * @param container - The container on which created span element is going to append.\n     * @param inputElement - The inputElement on which created span element is going to prepend.\n     */\n    // tslint:disable\n    function prependSpan(iconClass, container, inputElement, internalCreateElement) {\n        // tslint:enable\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let button = createIconEle(iconClass, makeElement);\n        container.classList.add('e-float-icon-left');\n        let innerWrapper = container.querySelector('.e-input-in-wrap');\n        if (isNullOrUndefined(innerWrapper)) {\n            innerWrapper = makeElement('span', { className: 'e-input-in-wrap' });\n            inputElement.parentNode.insertBefore(innerWrapper, inputElement);\n            let result = container.querySelectorAll(inputElement.tagName + ' ~ *');\n            innerWrapper.appendChild(inputElement);\n            for (let i = 0; i < result.length; i++) {\n                innerWrapper.appendChild(result[i]);\n            }\n        }\n        innerWrapper.parentNode.insertBefore(button, innerWrapper);\n        if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {\n            container.classList.add(CLASSNAMES.INPUTGROUP);\n        }\n        _internalRipple(true, container, button);\n        return button;\n    }\n    Input.prependSpan = prependSpan;\n    /**\n     * Creates a new span element with the given icons added and append it in container element.\n     * ```\n     * E.g : Input.appendSpan('e-icon-spin', inputObj.container);\n     * ```\n     * @param iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for input.\n     * @param container - The container on which created span element is going to append.\n     */\n    function appendSpan(iconClass, container, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let button = createIconEle(iconClass, makeElement);\n        if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {\n            container.classList.add(CLASSNAMES.INPUTGROUP);\n        }\n        let wrap = (container.classList.contains('e-float-icon-left')) ? container.querySelector('.e-input-in-wrap') :\n            container;\n        wrap.appendChild(button);\n        _internalRipple(true, container, button);\n        return button;\n    }\n    Input.appendSpan = appendSpan;\n})(Input || (Input = {}));\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst ROOT = 'e-control-wrapper e-numeric';\nconst SPINICON = 'e-input-group-icon';\nconst SPINUP = 'e-spin-up';\nconst SPINDOWN = 'e-spin-down';\nconst ERROR = 'e-error';\nconst INCREMENT = 'increment';\nconst DECREMENT = 'decrement';\nconst INTREGEXP = new RegExp('^(-)?(\\\\d*)$');\nconst DECIMALSEPARATOR = '.';\nconst COMPONENT = 'e-numerictextbox';\nconst CONTROL = 'e-control';\nconst NUMERIC_FOCUS = 'e-input-focus';\nconst HIDDENELEMENT = 'e-numeric-hidden';\nconst wrapperAttributes = ['title', 'style', 'class'];\n/**\n * Represents the NumericTextBox component that allows the user to enter only numeric values.\n * ```html\n * <input type='text' id=\"numeric\"/>\n * ```\n * ```typescript\n * <script>\n *   var numericObj = new NumericTextBox({ value: 10 });\n *   numericObj.appendTo(\"#numeric\");\n * </script>\n * ```\n */\nlet NumericTextBox = class NumericTextBox extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.isVue = false;\n        this.preventChange = false;\n        this.numericOptions = options;\n    }\n    preRender() {\n        this.isPrevFocused = false;\n        this.decimalSeparator = '.';\n        this.intRegExp = new RegExp('/^(-)?(\\d*)$/');\n        this.isCalled = false;\n        let ejInstance = getValue('ej2_instances', this.element);\n        this.cloneElement = this.element.cloneNode(true);\n        removeClass([this.cloneElement], [CONTROL, COMPONENT, 'e-lib']);\n        this.angularTagName = null;\n        this.formEle = closest(this.element, 'form');\n        if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {\n            this.angularTagName = this.element.tagName;\n            let input = this.createElement('input');\n            let index = 0;\n            for (index; index < this.element.attributes.length; index++) {\n                let attributeName = this.element.attributes[index].nodeName;\n                if (attributeName !== 'id') {\n                    input.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);\n                    input.innerHTML = this.element.innerHTML;\n                }\n            }\n            if (this.element.hasAttribute('name')) {\n                this.element.removeAttribute('name');\n            }\n            this.element.classList.remove('e-control', 'e-numerictextbox');\n            this.element.appendChild(input);\n            this.element = input;\n            setValue('ej2_instances', ejInstance, this.element);\n        }\n        if (!(isBlazor() && this.isServerRendered)) {\n            attributes(this.element, { 'role': 'spinbutton', 'tabindex': '0', 'autocomplete': 'off', 'aria-live': 'assertive' });\n            let localeText = {\n                incrementTitle: 'Increment value', decrementTitle: 'Decrement value', placeholder: this.placeholder\n            };\n            this.l10n = new L10n('numerictextbox', localeText, this.locale);\n            if (this.l10n.getConstant('placeholder') !== '') {\n                this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant('placeholder') }, true);\n            }\n        }\n        this.isValidState = true;\n        this.inputStyle = null;\n        this.inputName = null;\n        this.cultureInfo = {};\n        this.initCultureInfo();\n        this.initCultureFunc();\n        this.prevValue = this.value;\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.updateHTMLAttrToElement();\n            this.checkAttributes(false);\n            if (this.formEle) {\n                this.inputEleValue = this.value;\n            }\n        }\n        this.validateMinMax();\n        this.validateStep();\n        if (this.placeholder === null && !(isBlazor() && this.isServerRendered)) {\n            this.updatePlaceholder();\n        }\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        if (this.element.tagName.toLowerCase() === 'input') {\n            if (!(isBlazor() && this.isServerRendered)) {\n                this.createWrapper();\n                if (this.showSpinButton) {\n                    this.spinBtnCreation();\n                }\n                this.setElementWidth(this.width);\n                if (!this.container.classList.contains('e-input-group')) {\n                    this.container.classList.add('e-input-group');\n                }\n                this.changeValue(this.value === null || isNaN(this.value) ?\n                    null : this.strictMode ? this.trimValue(this.value) : this.value);\n            }\n            else {\n                this.container = this.element.parentElement;\n                this.inputWrapper = { container: this.container };\n                this.hiddenInput = this.container.querySelector('input[type=\"hidden\"]');\n                if (this.showClearButton) {\n                    this.inputWrapper.clearButton = this.container.querySelector('.e-clear-icon');\n                    Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);\n                }\n                if (this.showSpinButton) {\n                    this.spinDown = this.container.querySelector('.' + SPINDOWN);\n                    this.spinUp = this.container.querySelector('.' + SPINUP);\n                    this.wireSpinBtnEvents();\n                }\n                Input.bindInitialEvent({\n                    element: this.element, buttons: null, customTag: null, floatLabelType: this.floatLabelType, properties: this.properties\n                });\n            }\n            this.wireEvents();\n            if (!(isBlazor() && this.isServerRendered)) {\n                if (this.value !== null && !isNaN(this.value)) {\n                    if (this.decimals) {\n                        this.setProperties({ value: this.roundNumber(this.value, this.decimals) }, true);\n                    }\n                }\n                if (this.element.getAttribute('value') || this.value) {\n                    this.element.setAttribute('value', this.element.value);\n                    this.hiddenInput.setAttribute('value', this.hiddenInput.value);\n                }\n            }\n            this.elementPrevValue = this.element.value;\n            this.renderComplete();\n        }\n    }\n    checkAttributes(isDynamic) {\n        let attributes$$1 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) :\n            ['value', 'min', 'max', 'step', 'disabled', 'readonly', 'style', 'name', 'placeholder'];\n        for (let prop of attributes$$1) {\n            if (!isNullOrUndefined(this.element.getAttribute(prop))) {\n                switch (prop) {\n                    case 'disabled':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['enabled'] === undefined)) || isDynamic) {\n                            let enabled = this.element.getAttribute(prop) === 'disabled' || this.element.getAttribute(prop) === ''\n                                || this.element.getAttribute(prop) === 'true' ? false : true;\n                            this.setProperties({ enabled: enabled }, !isDynamic);\n                        }\n                        break;\n                    case 'readonly':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['readonly'] === undefined)) || isDynamic) {\n                            let readonly = this.element.getAttribute(prop) === 'readonly' || this.element.getAttribute(prop) === ''\n                                || this.element.getAttribute(prop) === 'true' ? true : false;\n                            this.setProperties({ readonly: readonly }, !isDynamic);\n                        }\n                        break;\n                    case 'placeholder':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['placeholder'] === undefined)) || isDynamic) {\n                            this.setProperties({ placeholder: this.element.placeholder }, !isDynamic);\n                        }\n                        break;\n                    case 'value':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['value'] === undefined)) || isDynamic) {\n                            let setNumber = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                            this.setProperties(setValue(prop, setNumber, {}), !isDynamic);\n                        }\n                        break;\n                    case 'min':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['min'] === undefined)) || isDynamic) {\n                            let minValue = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                            if (minValue !== null && !isNaN(minValue)) {\n                                this.setProperties(setValue(prop, minValue, {}), !isDynamic);\n                            }\n                        }\n                        break;\n                    case 'max':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['max'] === undefined)) || isDynamic) {\n                            let maxValue = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                            if (maxValue !== null && !isNaN(maxValue)) {\n                                this.setProperties(setValue(prop, maxValue, {}), !isDynamic);\n                            }\n                        }\n                        break;\n                    case 'step':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['step'] === undefined)) || isDynamic) {\n                            let stepValue = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                            if (stepValue !== null && !isNaN(stepValue)) {\n                                this.setProperties(setValue(prop, stepValue, {}), !isDynamic);\n                            }\n                        }\n                        break;\n                    case 'style':\n                        this.inputStyle = this.element.getAttribute(prop);\n                        break;\n                    case 'name':\n                        this.inputName = this.element.getAttribute(prop);\n                        break;\n                    default:\n                        let value = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                        if ((value !== null && !isNaN(value)) || (prop === 'value')) {\n                            this.setProperties(setValue(prop, value, {}), true);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    updatePlaceholder() {\n        this.setProperties({ placeholder: this.l10n.getConstant('placeholder') }, true);\n    }\n    initCultureFunc() {\n        this.instance = new Internationalization(this.locale);\n    }\n    initCultureInfo() {\n        this.cultureInfo.format = this.format;\n        if (getValue('currency', this) !== null) {\n            setValue('currency', this.currency, this.cultureInfo);\n            this.setProperties({ currencyCode: this.currency }, true);\n        }\n    }\n    /* Wrapper creation */\n    createWrapper() {\n        let updatedCssClassValue = this.cssClass;\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            updatedCssClassValue = this.getNumericValidClassList(this.cssClass);\n        }\n        let inputObj = Input.createInput({\n            element: this.element,\n            floatLabelType: this.floatLabelType,\n            properties: {\n                readonly: this.readonly,\n                placeholder: this.placeholder,\n                cssClass: updatedCssClassValue,\n                enableRtl: this.enableRtl,\n                showClearButton: this.showClearButton,\n                enabled: this.enabled\n            }\n        }, this.createElement);\n        this.inputWrapper = inputObj;\n        this.container = inputObj.container;\n        this.container.setAttribute('class', ROOT + ' ' + this.container.getAttribute('class'));\n        this.updateHTMLAttrToWrapper();\n        if (this.readonly) {\n            attributes(this.element, { 'aria-readonly': 'true' });\n        }\n        this.hiddenInput = (this.createElement('input', { attrs: { type: 'text',\n                'validateHidden': 'true', 'class': HIDDENELEMENT } }));\n        this.inputName = this.inputName !== null ? this.inputName : this.element.id;\n        this.element.removeAttribute('name');\n        attributes(this.hiddenInput, { 'name': this.inputName });\n        this.container.insertBefore(this.hiddenInput, this.container.childNodes[1]);\n        this.updateDataAttribute(false);\n        if (this.inputStyle !== null) {\n            attributes(this.container, { 'style': this.inputStyle });\n        }\n    }\n    updateDataAttribute(isDynamic) {\n        let attr = {};\n        if (!isDynamic) {\n            for (let a = 0; a < this.element.attributes.length; a++) {\n                attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n            }\n        }\n        else {\n            attr = this.htmlAttributes;\n        }\n        for (let key of Object.keys(attr)) {\n            if (key.indexOf('data') === 0) {\n                this.hiddenInput.setAttribute(key, attr[key]);\n            }\n        }\n    }\n    updateHTMLAttrToElement() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let pro of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttributes.indexOf(pro) < 0) {\n                    this.element.setAttribute(pro, this.htmlAttributes[pro]);\n                }\n            }\n        }\n    }\n    updateCssClass(newClass, oldClass) {\n        Input.setCssClass(this.getNumericValidClassList(newClass), [this.container], this.getNumericValidClassList(oldClass));\n    }\n    getNumericValidClassList(numericClassName) {\n        let result = numericClassName;\n        if (!isNullOrUndefined(numericClassName) && numericClassName !== '') {\n            result = (numericClassName.replace(/\\s+/g, ' ')).trim();\n        }\n        return result;\n    }\n    updateHTMLAttrToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let pro of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttributes.indexOf(pro) > -1) {\n                    if (pro === 'class') {\n                        let updatedClassValue = this.getNumericValidClassList(this.htmlAttributes[pro]);\n                        if (updatedClassValue !== '') {\n                            addClass([this.container], updatedClassValue.split(' '));\n                        }\n                    }\n                    else if (pro === 'style') {\n                        let numericStyle = this.container.getAttribute(pro);\n                        numericStyle = !isNullOrUndefined(numericStyle) ? (numericStyle + this.htmlAttributes[pro]) :\n                            this.htmlAttributes[pro];\n                        this.container.setAttribute(pro, numericStyle);\n                    }\n                    else {\n                        this.container.setAttribute(pro, this.htmlAttributes[pro]);\n                    }\n                }\n            }\n        }\n    }\n    setElementWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.container.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                this.container.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n            }\n        }\n    }\n    /* Spinner creation */\n    spinBtnCreation() {\n        this.spinDown = Input.appendSpan(SPINICON + ' ' + SPINDOWN, this.container, this.createElement);\n        attributes(this.spinDown, {\n            'title': this.l10n.getConstant('decrementTitle'),\n            'aria-label': this.l10n.getConstant('decrementTitle')\n        });\n        this.spinUp = Input.appendSpan(SPINICON + ' ' + SPINUP, this.container, this.createElement);\n        attributes(this.spinUp, {\n            'title': this.l10n.getConstant('incrementTitle'),\n            'aria-label': this.l10n.getConstant('incrementTitle')\n        });\n        this.wireSpinBtnEvents();\n    }\n    validateMinMax() {\n        if (!(typeof (this.min) === 'number' && !isNaN(this.min))) {\n            this.setProperties({ min: -(Number.MAX_VALUE) }, true);\n        }\n        if (!(typeof (this.max) === 'number' && !isNaN(this.max))) {\n            this.setProperties({ max: Number.MAX_VALUE }, true);\n        }\n        if (this.decimals !== null) {\n            if (this.min !== -(Number.MAX_VALUE)) {\n                this.setProperties({ min: this.instance.getNumberParser({ format: 'n' })(this.formattedValue(this.decimals, this.min)) }, true);\n            }\n            if (this.max !== (Number.MAX_VALUE)) {\n                this.setProperties({ max: this.instance.getNumberParser({ format: 'n' })(this.formattedValue(this.decimals, this.max)) }, true);\n            }\n        }\n        this.setProperties({ min: this.min > this.max ? this.max : this.min }, true);\n        attributes(this.element, { 'aria-valuemin': this.min.toString(), 'aria-valuemax': this.max.toString() });\n    }\n    formattedValue(decimals, value) {\n        return this.instance.getNumberFormat({\n            maximumFractionDigits: decimals,\n            minimumFractionDigits: decimals, useGrouping: false\n        })(value);\n    }\n    validateStep() {\n        if (this.decimals !== null) {\n            this.setProperties({ step: this.instance.getNumberParser({ format: 'n' })(this.formattedValue(this.decimals, this.step)) }, true);\n        }\n    }\n    action(operation, event) {\n        this.isInteract = true;\n        let value = this.isFocused ? this.instance.getNumberParser({ format: 'n' })(this.element.value) : this.value;\n        this.changeValue(this.performAction(value, this.step, operation));\n        this.raiseChangeEvent(event);\n    }\n    checkErrorClass() {\n        if (this.isValidState) {\n            removeClass([this.container], ERROR);\n        }\n        else {\n            addClass([this.container], ERROR);\n        }\n        attributes(this.element, { 'aria-invalid': this.isValidState ? 'false' : 'true' });\n    }\n    bindClearEvent() {\n        if (this.showClearButton) {\n            EventHandler.add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);\n        }\n    }\n    resetHandler(e) {\n        e.preventDefault();\n        if (!(this.inputWrapper.clearButton.classList.contains('e-clear-icon-hide'))) {\n            this.clear(e);\n        }\n        this.isInteract = true;\n        this.raiseChangeEvent(e);\n    }\n    clear(event) {\n        this.setProperties({ value: null }, true);\n        this.setElementValue('');\n        this.hiddenInput.value = '';\n        let formElement = closest(this.element, 'form');\n        if (formElement) {\n            let element = this.element.nextElementSibling;\n            let keyupEvent = document.createEvent('KeyboardEvent');\n            keyupEvent.initEvent('keyup', false, true);\n            element.dispatchEvent(keyupEvent);\n        }\n    }\n    resetFormHandler() {\n        if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {\n            this.updateValue(null);\n        }\n        else {\n            this.updateValue(this.inputEleValue);\n        }\n    }\n    setSpinButton() {\n        if (!isNullOrUndefined(this.spinDown)) {\n            attributes(this.spinDown, {\n                'title': this.l10n.getConstant('decrementTitle'),\n                'aria-label': this.l10n.getConstant('decrementTitle')\n            });\n        }\n        if (!isNullOrUndefined(this.spinUp)) {\n            attributes(this.spinUp, {\n                'title': this.l10n.getConstant('incrementTitle'),\n                'aria-label': this.l10n.getConstant('incrementTitle')\n            });\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'blur', this.focusOutHandler, this);\n        EventHandler.add(this.element, 'keydown', this.keyDownHandler, this);\n        EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n        EventHandler.add(this.element, 'input', this.inputHandler, this);\n        EventHandler.add(this.element, 'keypress', this.keyPressHandler, this);\n        EventHandler.add(this.element, 'change', this.changeHandler, this);\n        EventHandler.add(this.element, 'paste', this.pasteHandler, this);\n        if (this.enabled) {\n            this.bindClearEvent();\n            if (this.formEle) {\n                EventHandler.add(this.formEle, 'reset', this.resetFormHandler, this);\n            }\n        }\n    }\n    wireSpinBtnEvents() {\n        /* bind spin button events */\n        EventHandler.add(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner, this);\n        EventHandler.add(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner, this);\n        EventHandler.add(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner, this);\n        EventHandler.add(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner, this);\n        EventHandler.add(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner, this);\n        EventHandler.add(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner, this);\n    }\n    unwireEvents() {\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'blur', this.focusOutHandler);\n        EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n        EventHandler.remove(this.element, 'input', this.inputHandler);\n        EventHandler.remove(this.element, 'keydown', this.keyDownHandler);\n        EventHandler.remove(this.element, 'keypress', this.keyPressHandler);\n        EventHandler.remove(this.element, 'change', this.changeHandler);\n        EventHandler.remove(this.element, 'paste', this.pasteHandler);\n        if (this.formEle) {\n            EventHandler.remove(this.formEle, 'reset', this.resetFormHandler);\n        }\n    }\n    unwireSpinBtnEvents() {\n        /* unbind spin button events */\n        EventHandler.remove(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner);\n        EventHandler.remove(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner);\n        EventHandler.remove(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner);\n        EventHandler.remove(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner);\n        EventHandler.remove(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner);\n        EventHandler.remove(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner);\n    }\n    changeHandler(event) {\n        event.stopPropagation();\n        if (!this.element.value.length) {\n            this.setProperties({ value: null }, true);\n        }\n        let parsedInput = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n        this.updateValue(parsedInput, event);\n    }\n    raiseChangeEvent(event) {\n        if (this.prevValue !== this.value) {\n            let eventArgs = {};\n            this.changeEventArgs = { value: this.value, previousValue: this.prevValue, isInteracted: this.isInteract,\n                isInteraction: this.isInteract, event: event };\n            if (event) {\n                this.changeEventArgs.event = event;\n            }\n            if (this.changeEventArgs.event === undefined) {\n                this.changeEventArgs.isInteracted = false;\n                this.changeEventArgs.isInteraction = false;\n            }\n            merge(eventArgs, this.changeEventArgs);\n            this.prevValue = this.value;\n            this.isInteract = false;\n            this.elementPrevValue = this.element.value;\n            this.preventChange = false;\n            this.trigger('change', eventArgs);\n        }\n    }\n    pasteHandler() {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        let beforeUpdate = this.element.value;\n        setTimeout(() => {\n            if (!this.numericRegex().test(this.element.value)) {\n                this.setElementValue(beforeUpdate);\n            }\n        });\n    }\n    preventHandler() {\n        let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n        setTimeout(() => {\n            if (this.element.selectionStart > 0) {\n                let currentPos = this.element.selectionStart;\n                let prevPos = this.element.selectionStart - 1;\n                let start = 0;\n                let ignoreKeyCode;\n                let valArray = this.element.value.split('');\n                let numericObject = getNumericObject(this.locale);\n                let decimalSeparator = getValue('decimal', numericObject);\n                ignoreKeyCode = decimalSeparator.charCodeAt(0);\n                if (this.element.value[prevPos] === ' ' && this.element.selectionStart > 0 && !iOS) {\n                    if (isNullOrUndefined(this.prevVal)) {\n                        this.element.value = this.element.value.trim();\n                    }\n                    else if (prevPos !== 0) {\n                        this.element.value = this.prevVal;\n                    }\n                    else if (prevPos === 0) {\n                        this.element.value = this.element.value.trim();\n                    }\n                    this.element.setSelectionRange(prevPos, prevPos);\n                }\n                else if (isNaN(parseFloat(this.element.value[this.element.selectionStart - 1])) &&\n                    this.element.value[this.element.selectionStart - 1].charCodeAt(0) !== 45) {\n                    if ((valArray.indexOf(this.element.value[this.element.selectionStart - 1]) !==\n                        valArray.lastIndexOf(this.element.value[this.element.selectionStart - 1]) &&\n                        this.element.value[this.element.selectionStart - 1].charCodeAt(0) === ignoreKeyCode) ||\n                        this.element.value[this.element.selectionStart - 1].charCodeAt(0) !== ignoreKeyCode) {\n                        this.element.value = this.element.value.substring(0, prevPos) +\n                            this.element.value.substring(currentPos, this.element.value.length);\n                        this.element.setSelectionRange(prevPos, prevPos);\n                        if (isNaN(parseFloat(this.element.value[this.element.selectionStart - 1])) && this.element.selectionStart > 0\n                            && this.element.value.length) {\n                            this.preventHandler();\n                        }\n                    }\n                }\n                else if (isNaN(parseFloat(this.element.value[this.element.selectionStart - 2])) && this.element.selectionStart > 1 &&\n                    this.element.value[this.element.selectionStart - 2].charCodeAt(0) !== 45) {\n                    if ((valArray.indexOf(this.element.value[this.element.selectionStart - 2]) !==\n                        valArray.lastIndexOf(this.element.value[this.element.selectionStart - 2]) &&\n                        this.element.value[this.element.selectionStart - 2].charCodeAt(0) === ignoreKeyCode) ||\n                        this.element.value[this.element.selectionStart - 2].charCodeAt(0) !== ignoreKeyCode) {\n                        this.element.setSelectionRange(prevPos, prevPos);\n                        this.nextEle = this.element.value[this.element.selectionStart];\n                        this.cursorPosChanged = true;\n                        this.preventHandler();\n                    }\n                }\n                if (this.cursorPosChanged === true && this.element.value[this.element.selectionStart] === this.nextEle &&\n                    isNaN(parseFloat(this.element.value[this.element.selectionStart - 1]))) {\n                    this.element.setSelectionRange(this.element.selectionStart + 1, this.element.selectionStart + 1);\n                    this.cursorPosChanged = false;\n                    this.nextEle = null;\n                }\n                if (this.element.value.trim() === '') {\n                    this.element.setSelectionRange(start, start);\n                }\n                if (this.element.selectionStart > 0) {\n                    if ((this.element.value[this.element.selectionStart - 1].charCodeAt(0) === 45) && this.element.selectionStart > 1) {\n                        if (isNullOrUndefined(this.prevVal)) {\n                            this.element.value = this.element.value;\n                        }\n                        else {\n                            this.element.value = this.prevVal;\n                        }\n                        this.element.setSelectionRange(this.element.selectionStart, this.element.selectionStart);\n                    }\n                }\n                this.prevVal = this.element.value;\n            }\n        });\n    }\n    keyUpHandler(event) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n        if (!iOS && Browser.isDevice) {\n            this.preventHandler();\n        }\n        let parseValue = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n        parseValue = parseValue === null || isNaN(parseValue) ? null : parseValue;\n        this.hiddenInput.value = parseValue || parseValue === 0 ? parseValue.toString() : null;\n        let formElement = closest(this.element, 'form');\n        if (formElement) {\n            let element = this.element.nextElementSibling;\n            let keyupEvent = document.createEvent('KeyboardEvent');\n            keyupEvent.initEvent('keyup', false, true);\n            element.dispatchEvent(keyupEvent);\n        }\n    }\n    ;\n    inputHandler(event) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n        let fireFox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n        if ((fireFox || iOS) && Browser.isDevice) {\n            this.preventHandler();\n        }\n        if (this.isVue) {\n            let current = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n            let previous = this.instance.getNumberParser({ format: 'n' })(this.elementPrevValue);\n            let eventArgs = {\n                event: event,\n                value: (current === null || isNaN(current) ? null : current),\n                previousValue: (previous === null || isNaN(previous) ? null : previous)\n            };\n            this.preventChange = true;\n            this.elementPrevValue = this.element.value;\n            this.trigger('input', eventArgs);\n        }\n    }\n    ;\n    keyDownHandler(event) {\n        if (!this.readonly) {\n            switch (event.keyCode) {\n                case 38:\n                    event.preventDefault();\n                    this.action(INCREMENT, event);\n                    break;\n                case 40:\n                    event.preventDefault();\n                    this.action(DECREMENT, event);\n                    break;\n                default: break;\n            }\n        }\n    }\n    ;\n    performAction(value, step, operation) {\n        if (value === null || isNaN(value)) {\n            value = 0;\n        }\n        let updatedValue = operation === INCREMENT ? value + step : value - step;\n        updatedValue = this.correctRounding(value, step, updatedValue);\n        return this.strictMode ? this.trimValue(updatedValue) : updatedValue;\n    }\n    ;\n    correctRounding(value, step, result) {\n        let floatExp = new RegExp('[,.](.*)');\n        let valueText = value.toString();\n        let stepText = step.toString();\n        let floatValue = floatExp.test(value.toString());\n        let floatStep = floatExp.test(step.toString());\n        if (floatValue || floatStep) {\n            let valueCount = floatValue ? floatExp.exec(value.toString())[0].length : 0;\n            let stepCount = floatStep ? floatExp.exec(step.toString())[0].length : 0;\n            let max = Math.max(valueCount, stepCount);\n            return value = this.roundValue(result, max);\n        }\n        return result;\n    }\n    ;\n    roundValue(result, precision) {\n        precision = precision || 0;\n        let divide = Math.pow(10, precision);\n        return result *= divide, result = Math.round(result) / divide;\n    }\n    ;\n    updateValue(value, event) {\n        if (event) {\n            this.isInteract = true;\n        }\n        if (value !== null && !isNaN(value)) {\n            if (this.decimals) {\n                value = this.roundNumber(value, this.decimals);\n            }\n        }\n        this.changeValue(value === null || isNaN(value) ? null : this.strictMode ? this.trimValue(value) : value);\n        if ((!this.isVue) || (this.isVue && !this.preventChange)) {\n            this.raiseChangeEvent(event);\n        }\n    }\n    updateCurrency(prop, propVal) {\n        setValue(prop, propVal, this.cultureInfo);\n        this.updateValue(this.value);\n    }\n    changeValue(value) {\n        if (!(value || value === 0)) {\n            value = null;\n            this.setProperties({ value: value }, true);\n        }\n        else {\n            let numberOfDecimals;\n            numberOfDecimals = this.getNumberOfDecimals(value);\n            this.setProperties({ value: this.roundNumber(value, numberOfDecimals) }, true);\n        }\n        this.modifyText();\n        if (!this.strictMode) {\n            this.validateState();\n        }\n    }\n    ;\n    modifyText() {\n        if (this.value || this.value === 0) {\n            let value = this.formatNumber();\n            let elementValue = this.isFocused ? value : this.instance.getNumberFormat(this.cultureInfo)(this.value);\n            this.setElementValue(elementValue);\n            attributes(this.element, { 'aria-valuenow': value });\n            this.hiddenInput.value = this.value.toString();\n            if (this.value !== null && this.serverDecimalSeparator) {\n                this.hiddenInput.value = this.hiddenInput.value.replace('.', this.serverDecimalSeparator);\n            }\n        }\n        else {\n            this.setElementValue('');\n            this.element.removeAttribute('aria-valuenow');\n            this.hiddenInput.value = null;\n        }\n    }\n    ;\n    setElementValue(val, element) {\n        Input.setValue(val, (element ? element : this.element), this.floatLabelType, this.showClearButton);\n    }\n    validateState() {\n        this.isValidState = true;\n        if (this.value || this.value === 0) {\n            this.isValidState = !(this.value > this.max || this.value < this.min);\n        }\n        this.checkErrorClass();\n    }\n    getNumberOfDecimals(value) {\n        let numberOfDecimals;\n        let EXPREGEXP = new RegExp('[eE][\\-+]?([0-9]+)');\n        let valueString = value.toString();\n        if (EXPREGEXP.test(valueString)) {\n            let result = EXPREGEXP.exec(valueString);\n            if (!isNullOrUndefined(result)) {\n                valueString = value.toFixed(Math.min(parseInt(result[1], 10), 20));\n            }\n        }\n        let decimalPart = valueString.split('.')[1];\n        numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;\n        if (this.decimals !== null) {\n            numberOfDecimals = numberOfDecimals < this.decimals ? numberOfDecimals : this.decimals;\n        }\n        return numberOfDecimals;\n    }\n    formatNumber() {\n        let numberOfDecimals;\n        numberOfDecimals = this.getNumberOfDecimals(this.value);\n        return this.instance.getNumberFormat({\n            maximumFractionDigits: numberOfDecimals,\n            minimumFractionDigits: numberOfDecimals, useGrouping: false\n        })(this.value);\n    }\n    ;\n    trimValue(value) {\n        if (value > this.max) {\n            return this.max;\n        }\n        if (value < this.min) {\n            return this.min;\n        }\n        return value;\n    }\n    ;\n    roundNumber(value, precision) {\n        let result = value;\n        let decimals = precision || 0;\n        let result1 = result.toString().split('e');\n        result = Math.round(Number(result1[0] + 'e' + (result1[1] ? (Number(result1[1]) + decimals) : decimals)));\n        let result2 = result.toString().split('e');\n        result = Number(result2[0] + 'e' + (result2[1] ? (Number(result2[1]) - decimals) : -decimals));\n        return Number(result.toFixed(decimals));\n    }\n    ;\n    cancelEvent(event) {\n        event.preventDefault();\n        return false;\n    }\n    keyPressHandler(event) {\n        if (!this.enabled || this.readonly) {\n            return true;\n        }\n        if (!Browser.isDevice && Browser.info.version === '11.0' && event.keyCode === 13) {\n            let parsedInput = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n            this.updateValue(parsedInput, event);\n            return true;\n        }\n        if (event.which === 0 || event.metaKey || event.ctrlKey || event.keyCode === 8 || event.keyCode === 13) {\n            return true;\n        }\n        let currentChar = String.fromCharCode(event.which);\n        let text = this.element.value;\n        text = text.substring(0, this.element.selectionStart) + currentChar + text.substring(this.element.selectionEnd);\n        if (!this.numericRegex().test(text)) {\n            event.preventDefault();\n            event.stopPropagation();\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    ;\n    numericRegex() {\n        let numericObject = getNumericObject(this.locale);\n        let decimalSeparator = getValue('decimal', numericObject);\n        let fractionRule = '*';\n        if (decimalSeparator === DECIMALSEPARATOR) {\n            decimalSeparator = '\\\\' + decimalSeparator;\n        }\n        if (this.decimals === 0 && this.validateDecimalOnType) {\n            return INTREGEXP;\n        }\n        if (this.decimals && this.validateDecimalOnType) {\n            fractionRule = '{0,' + this.decimals + '}';\n        }\n        return new RegExp('^(-)?(((\\\\d+(' + decimalSeparator + '\\\\d' + fractionRule +\n            ')?)|(' + decimalSeparator + '\\\\d' + fractionRule + ')))?$');\n    }\n    ;\n    mouseWheel(event) {\n        event.preventDefault();\n        let delta;\n        let rawEvent = event;\n        if (rawEvent.wheelDelta) {\n            delta = rawEvent.wheelDelta / 120;\n        }\n        else if (rawEvent.detail) {\n            delta = -rawEvent.detail / 3;\n        }\n        if (delta > 0) {\n            this.action(INCREMENT, event);\n        }\n        else if (delta < 0) {\n            this.action(DECREMENT, event);\n        }\n        this.cancelEvent(event);\n    }\n    focusHandler(event) {\n        this.focusEventArgs = { event: event, value: this.value, container: this.container };\n        this.trigger('focus', this.focusEventArgs);\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        this.isFocused = true;\n        removeClass([this.container], ERROR);\n        this.prevValue = this.value;\n        if ((this.value || this.value === 0)) {\n            let formatValue = this.formatNumber();\n            this.setElementValue(formatValue);\n            if (!this.isPrevFocused) {\n                if (!Browser.isDevice && Browser.info.version === '11.0') {\n                    this.element.setSelectionRange(0, formatValue.length);\n                }\n                else {\n                    let delay = (Browser.isDevice && Browser.isIos) ? 600 : 0;\n                    setTimeout(() => {\n                        this.element.setSelectionRange(0, formatValue.length);\n                    }, delay);\n                }\n            }\n        }\n        if (!Browser.isDevice) {\n            EventHandler.add(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel, this);\n        }\n    }\n    ;\n    focusOutHandler(event) {\n        this.blurEventArgs = { event: event, value: this.value, container: this.container };\n        this.trigger('blur', this.blurEventArgs);\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        if (this.isPrevFocused) {\n            event.preventDefault();\n            if (Browser.isDevice) {\n                let value = this.element.value;\n                this.element.focus();\n                this.isPrevFocused = false;\n                let ele = this.element;\n                setTimeout(() => {\n                    this.setElementValue(value, ele);\n                }, 200);\n            }\n        }\n        else {\n            this.isFocused = false;\n            if (!this.element.value.length) {\n                this.setProperties({ value: null }, true);\n            }\n            let parsedInput = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n            this.updateValue(parsedInput);\n            if (!Browser.isDevice) {\n                EventHandler.remove(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel);\n            }\n        }\n        let formElement = closest(this.element, 'form');\n        if (formElement) {\n            let element = this.element.nextElementSibling;\n            let focusEvent = document.createEvent('FocusEvent');\n            focusEvent.initEvent('focusout', false, true);\n            element.dispatchEvent(focusEvent);\n        }\n    }\n    ;\n    mouseDownOnSpinner(event) {\n        if (this.isFocused) {\n            this.isPrevFocused = true;\n            event.preventDefault();\n        }\n        if (!this.getElementData(event)) {\n            return;\n        }\n        let result = this.getElementData(event);\n        let target = event.currentTarget;\n        let action = (target.classList.contains(SPINUP)) ? INCREMENT : DECREMENT;\n        EventHandler.add(target, 'mouseleave', this.mouseUpClick, this);\n        this.timeOut = setInterval(() => { this.isCalled = true; this.action(action, event); }, 150);\n        EventHandler.add(document, 'mouseup', this.mouseUpClick, this);\n    }\n    touchMoveOnSpinner(event) {\n        let target = document.elementFromPoint(event.clientX, event.clientY);\n        if (!(target.classList.contains(SPINICON))) {\n            clearInterval(this.timeOut);\n        }\n    }\n    mouseUpOnSpinner(event) {\n        if (this.isPrevFocused) {\n            this.element.focus();\n            if (!Browser.isDevice) {\n                this.isPrevFocused = false;\n            }\n        }\n        if (!Browser.isDevice) {\n            event.preventDefault();\n        }\n        if (!this.getElementData(event)) {\n            return;\n        }\n        let target = event.currentTarget;\n        let action = (target.classList.contains(SPINUP)) ? INCREMENT : DECREMENT;\n        EventHandler.remove(target, 'mouseleave', this.mouseUpClick);\n        if (!this.isCalled) {\n            this.action(action, event);\n        }\n        this.isCalled = false;\n        EventHandler.remove(document, 'mouseup', this.mouseUpClick);\n        let formElement = closest(this.element, 'form');\n        if (formElement) {\n            let element = this.element.nextElementSibling;\n            let keyupEvent = document.createEvent('KeyboardEvent');\n            keyupEvent.initEvent('keyup', false, true);\n            element.dispatchEvent(keyupEvent);\n        }\n    }\n    getElementData(event) {\n        if ((event.which && event.which === 3) || (event.button && event.button === 2)\n            || !this.enabled || this.readonly) {\n            return false;\n        }\n        clearInterval(this.timeOut);\n        return true;\n    }\n    floatLabelTypeUpdate() {\n        Input.removeFloating(this.inputWrapper);\n        let hiddenInput = this.hiddenInput;\n        this.hiddenInput.remove();\n        Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);\n        this.container.insertBefore(hiddenInput, this.container.childNodes[1]);\n    }\n    mouseUpClick(event) {\n        event.stopPropagation();\n        clearInterval(this.timeOut);\n        this.isCalled = false;\n        EventHandler.remove(this.spinUp, 'mouseleave', this.mouseUpClick);\n        EventHandler.remove(this.spinDown, 'mouseleave', this.mouseUpClick);\n    }\n    /**\n     * Increments the NumericTextBox value with the specified step value.\n     * @param  {number} step - Specifies the value used to increment the NumericTextBox value.\n     * if its not given then numeric value will be incremented based on the step property value.\n     */\n    increment(step = this.step) {\n        this.isInteract = false;\n        this.changeValue(this.performAction(this.value, step, INCREMENT));\n        this.raiseChangeEvent();\n    }\n    /**\n     * Decrements the NumericTextBox value with specified step value.\n     * @param  {number} step - Specifies the value used to decrement the NumericTextBox value.\n     * if its not given then numeric value will be decremented based on the step property value.\n     */\n    decrement(step = this.step) {\n        this.isInteract = false;\n        this.changeValue(this.performAction(this.value, step, DECREMENT));\n        this.raiseChangeEvent();\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also it maintains the initial input element from the DOM.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        this.unwireEvents();\n        if (!(isBlazor() && this.isServerRendered)) {\n            detach(this.hiddenInput);\n            if (this.showSpinButton) {\n                this.unwireSpinBtnEvents();\n                detach(this.spinUp);\n                detach(this.spinDown);\n            }\n            let attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly',\n                'autocorrect', 'aria-disabled', 'aria-placeholder', 'autocapitalize',\n                'spellcheck', 'aria-autocomplete', 'tabindex', 'aria-valuemin',\n                'aria-valuemax', 'aria-live', 'aria-valuenow', 'aria-invalid'];\n            for (let i = 0; i < attrArray.length; i++) {\n                this.element.removeAttribute(attrArray[i]);\n            }\n            this.element.classList.remove('e-input');\n            this.container.insertAdjacentElement('afterend', this.element);\n            detach(this.container);\n            super.destroy();\n        }\n    }\n    /**\n     * Returns the value of NumericTextBox with the format applied to the NumericTextBox.\n     */\n    getText() {\n        return this.element.value;\n    }\n    /**\n     * Sets the focus to widget for interaction.\n     * @returns void\n     */\n    focusIn() {\n        if (document.activeElement !== this.element && this.enabled) {\n            this.element.focus();\n            addClass([this.container], [NUMERIC_FOCUS]);\n        }\n    }\n    /**\n     * Remove the focus from widget, if the widget is in focus state.\n     * @returns void\n     */\n    focusOut() {\n        if (document.activeElement === this.element && this.enabled) {\n            this.element.blur();\n            removeClass([this.container], [NUMERIC_FOCUS]);\n        }\n    }\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     * @return {string}\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'width':\n                    this.setElementWidth(newProp.width);\n                    break;\n                case 'cssClass':\n                    this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'enabled':\n                    Input.setEnabled(newProp.enabled, this.element);\n                    break;\n                case 'enableRtl':\n                    Input.setEnableRtl(newProp.enableRtl, [this.container]);\n                    break;\n                case 'readonly':\n                    Input.setReadonly(newProp.readonly, this.element);\n                    if (this.readonly) {\n                        attributes(this.element, { 'aria-readonly': 'true' });\n                    }\n                    else {\n                        this.element.removeAttribute('aria-readonly');\n                    }\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttrToElement();\n                    this.updateHTMLAttrToWrapper();\n                    this.updateDataAttribute(true);\n                    this.checkAttributes(true);\n                    break;\n                case 'placeholder':\n                    Input.setPlaceholder(newProp.placeholder, this.element);\n                    break;\n                case 'step':\n                    this.step = newProp.step;\n                    this.validateStep();\n                    break;\n                case 'showSpinButton':\n                    this.updateSpinButton(newProp);\n                    break;\n                case 'showClearButton':\n                    this.updateClearButton(newProp);\n                    break;\n                case 'floatLabelType':\n                    this.floatLabelType = newProp.floatLabelType;\n                    this.floatLabelTypeUpdate();\n                    break;\n                case 'value':\n                    this.updateValue(newProp.value);\n                    if (this.isVue && this.preventChange) {\n                        this.preventChange = false;\n                    }\n                    break;\n                case 'min':\n                case 'max':\n                    setValue(prop, getValue(prop, newProp), this);\n                    this.validateMinMax();\n                    this.updateValue(this.value);\n                    break;\n                case 'strictMode':\n                    this.strictMode = newProp.strictMode;\n                    this.updateValue(this.value);\n                    this.validateState();\n                    break;\n                case 'locale':\n                    this.initCultureFunc();\n                    this.l10n.setLocale(this.locale);\n                    this.setSpinButton();\n                    this.updatePlaceholder();\n                    Input.setPlaceholder(this.placeholder, this.element);\n                    this.updateValue(this.value);\n                    break;\n                case 'currency':\n                    let propVal = getValue(prop, newProp);\n                    this.setProperties({ currencyCode: propVal }, true);\n                    this.updateCurrency(prop, propVal);\n                    break;\n                case 'currencyCode':\n                    let propValue = getValue(prop, newProp);\n                    this.setProperties({ currency: propValue }, true);\n                    this.updateCurrency('currency', propValue);\n                    break;\n                case 'format':\n                    setValue(prop, getValue(prop, newProp), this);\n                    this.initCultureInfo();\n                    this.updateValue(this.value);\n                    break;\n                case 'decimals':\n                    this.decimals = newProp.decimals;\n                    this.updateValue(this.value);\n            }\n        }\n    }\n    updateClearButton(newProp) {\n        if (isBlazor()) {\n            if (this.showClearButton) {\n                this.inputWrapper.clearButton = this.container.querySelector('.e-clear-icon');\n                Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);\n            }\n        }\n        else {\n            Input.setClearButton(newProp.showClearButton, this.element, this.inputWrapper, undefined, this.createElement);\n            this.bindClearEvent();\n        }\n    }\n    updateSpinButton(newProp) {\n        if (isBlazor()) {\n            if (this.showSpinButton) {\n                this.spinDown = this.container.querySelector('.' + SPINDOWN);\n                this.spinUp = this.container.querySelector('.' + SPINUP);\n                this.wireSpinBtnEvents();\n            }\n        }\n        else {\n            if (newProp.showSpinButton) {\n                this.spinBtnCreation();\n            }\n            else {\n                detach(this.spinUp);\n                detach(this.spinDown);\n            }\n        }\n    }\n    /**\n     * Gets the component name\n     * @private\n     */\n    getModuleName() {\n        return 'numerictextbox';\n    }\n};\n__decorate([\n    Property('')\n], NumericTextBox.prototype, \"cssClass\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"value\", void 0);\n__decorate([\n    Property(-(Number.MAX_VALUE))\n], NumericTextBox.prototype, \"min\", void 0);\n__decorate([\n    Property(Number.MAX_VALUE)\n], NumericTextBox.prototype, \"max\", void 0);\n__decorate([\n    Property(1)\n], NumericTextBox.prototype, \"step\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"width\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"placeholder\", void 0);\n__decorate([\n    Property({})\n], NumericTextBox.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property(true)\n], NumericTextBox.prototype, \"showSpinButton\", void 0);\n__decorate([\n    Property(false)\n], NumericTextBox.prototype, \"readonly\", void 0);\n__decorate([\n    Property(true)\n], NumericTextBox.prototype, \"enabled\", void 0);\n__decorate([\n    Property(false)\n], NumericTextBox.prototype, \"showClearButton\", void 0);\n__decorate([\n    Property(false)\n], NumericTextBox.prototype, \"enablePersistence\", void 0);\n__decorate([\n    Property('n2')\n], NumericTextBox.prototype, \"format\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"decimals\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"currency\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"currencyCode\", void 0);\n__decorate([\n    Property(true)\n], NumericTextBox.prototype, \"strictMode\", void 0);\n__decorate([\n    Property(false)\n], NumericTextBox.prototype, \"validateDecimalOnType\", void 0);\n__decorate([\n    Property('Never')\n], NumericTextBox.prototype, \"floatLabelType\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"created\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"destroyed\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"change\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"focus\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"blur\", void 0);\nNumericTextBox = __decorate([\n    NotifyPropertyChanges\n], NumericTextBox);\n\n/**\n * NumericTextBox modules\n */\n\n/**\n * MaskedTextBox base module\n */\nconst ERROR$1 = 'e-error';\nconst INPUTGROUP = 'e-input-group';\nconst FLOATINPUT = 'e-float-input';\nconst UTILMASK = 'e-utility-mask';\nconst TOPLABEL = 'e-label-top';\nconst BOTTOMLABEL = 'e-label-bottom';\n/**\n * @hidden\n * Built-in masking elements collection.\n */\nlet regularExpressions = {\n    '0': '[0-9]',\n    '9': '[0-9 ]',\n    '#': '[0-9 +-]',\n    'L': '[A-Za-z]',\n    '?': '[A-Za-z ]',\n    '&': '[^\\x7f ]+',\n    'C': '[^\\x7f]+',\n    'A': '[A-Za-z0-9]',\n    'a': '[A-Za-z0-9 ]',\n};\n/**\n * @hidden\n * Generate required masking elements to the MaskedTextBox from user mask input.\n */\nfunction createMask() {\n    attributes(this.element, {\n        'role': 'textbox', 'autocomplete': 'off', 'autocorrect': 'off', 'autocapitalize': 'off',\n        'spellcheck': 'false', 'aria-live': 'assertive', 'aria-valuenow': ''\n    });\n    if (this.mask) {\n        let splitMask = this.mask.split(']');\n        for (let i = 0; i < splitMask.length; i++) {\n            if (splitMask[i][splitMask[i].length - 1] === '\\\\') {\n                splitMask[i] = splitMask[i] + ']';\n                let splitInnerMask = splitMask[i].split('[');\n                for (let j = 0; j < splitInnerMask.length; j++) {\n                    if (splitInnerMask[j][splitInnerMask[j].length - 1] === '\\\\') {\n                        splitInnerMask[j] = splitInnerMask[j] + '[';\n                    }\n                    pushIntoRegExpCollec.call(this, splitInnerMask[j]);\n                }\n            }\n            else {\n                let splitInnerMask = splitMask[i].split('[');\n                if (splitInnerMask.length > 1) {\n                    let chkSpace = false;\n                    for (let j = 0; j < splitInnerMask.length; j++) {\n                        if (splitInnerMask[j] === '\\\\') {\n                            this.customRegExpCollec.push('[');\n                            this.hiddenMask += splitInnerMask[j] + '[';\n                        }\n                        else if (splitInnerMask[j] === '') {\n                            chkSpace = true;\n                        }\n                        else if ((splitInnerMask[j] !== '' && chkSpace) || j === splitInnerMask.length - 1) {\n                            this.customRegExpCollec.push('[' + splitInnerMask[j] + ']');\n                            this.hiddenMask += this.promptChar;\n                            chkSpace = false;\n                        }\n                        else {\n                            pushIntoRegExpCollec.call(this, splitInnerMask[j]);\n                        }\n                    }\n                }\n                else {\n                    pushIntoRegExpCollec.call(this, splitInnerMask[0]);\n                }\n            }\n        }\n        this.escapeMaskValue = this.hiddenMask;\n        this.promptMask = this.hiddenMask.replace(/[09?LCAa#&]/g, this.promptChar);\n        if (!isNullOrUndefined(this.customCharacters)) {\n            for (let i = 0; i < this.promptMask.length; i++) {\n                if (!isNullOrUndefined(this.customCharacters[this.promptMask[i]])) {\n                    this.promptMask = this.promptMask.replace(new RegExp(this.promptMask[i], 'g'), this.promptChar);\n                }\n            }\n        }\n        let escapeNumber = 0;\n        if (this.hiddenMask.match(new RegExp(/\\\\/))) {\n            for (let i = 0; i < this.hiddenMask.length; i++) {\n                let j = 0;\n                if (i >= 1) {\n                    j = i;\n                }\n                escapeNumber = this.hiddenMask.length - this.promptMask.length;\n                j = j - escapeNumber;\n                if ((i > 0 && this.hiddenMask[i - 1] !== '\\\\') && (this.hiddenMask[i] === '>' ||\n                    this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|')) {\n                    this.promptMask = this.promptMask.substring(0, j) +\n                        this.promptMask.substring((i + 1) - escapeNumber, this.promptMask.length);\n                    this.escapeMaskValue = this.escapeMaskValue.substring(0, j) +\n                        this.escapeMaskValue.substring((i + 1) - escapeNumber, this.escapeMaskValue.length);\n                }\n                if (this.hiddenMask[i] === '\\\\') {\n                    this.promptMask = this.promptMask.substring(0, j) + this.hiddenMask[i + 1] +\n                        this.promptMask.substring((i + 2) - escapeNumber, this.promptMask.length);\n                    this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue[i + 1] +\n                        this.escapeMaskValue.substring((i + 2) - escapeNumber, this.escapeMaskValue.length);\n                }\n            }\n        }\n        else {\n            this.promptMask = this.promptMask.replace(/[>|<]/g, '');\n            this.escapeMaskValue = this.hiddenMask.replace(/[>|<]/g, '');\n        }\n        attributes(this.element, { 'aria-invalid': 'false' });\n    }\n}\n/**\n * @hidden\n * Apply mask ability with masking elements to the MaskedTextBox.\n */\nfunction applyMask() {\n    setElementValue.call(this, this.promptMask);\n    setMaskValue.call(this, this.value);\n}\n/**\n * @hidden\n * To wire required events to the MaskedTextBox.\n */\nfunction wireEvents() {\n    EventHandler.add(this.element, 'keydown', maskInputKeyDownHandler, this);\n    EventHandler.add(this.element, 'keypress', maskInputKeyPressHandler, this);\n    EventHandler.add(this.element, 'keyup', maskInputKeyUpHandler, this);\n    EventHandler.add(this.element, 'input', maskInputHandler, this);\n    EventHandler.add(this.element, 'focus', maskInputFocusHandler, this);\n    EventHandler.add(this.element, 'blur', maskInputBlurHandler, this);\n    EventHandler.add(this.element, 'paste', maskInputPasteHandler, this);\n    EventHandler.add(this.element, 'cut', maskInputCutHandler, this);\n    EventHandler.add(this.element, 'drop', maskInputDropHandler, this);\n    if (this.enabled) {\n        bindClearEvent.call(this);\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', resetFormHandler, this);\n        }\n    }\n}\n/**\n * @hidden\n * To unwire events attached to the MaskedTextBox.\n */\nfunction unwireEvents() {\n    EventHandler.remove(this.element, 'keydown', maskInputKeyDownHandler);\n    EventHandler.remove(this.element, 'keypress', maskInputKeyPressHandler);\n    EventHandler.remove(this.element, 'keyup', maskInputKeyUpHandler);\n    EventHandler.remove(this.element, 'input', maskInputHandler);\n    EventHandler.remove(this.element, 'focus', maskInputFocusHandler);\n    EventHandler.remove(this.element, 'blur', maskInputBlurHandler);\n    EventHandler.remove(this.element, 'paste', maskInputPasteHandler);\n    EventHandler.remove(this.element, 'cut', maskInputCutHandler);\n    if (this.formElement) {\n        EventHandler.remove(this.formElement, 'reset', resetFormHandler);\n    }\n}\n/**\n * @hidden\n * To bind required events to the MaskedTextBox clearButton.\n */\nfunction bindClearEvent() {\n    if (this.showClearButton) {\n        EventHandler.add(this.inputObj.clearButton, 'mousedown touchstart', resetHandler, this);\n    }\n}\nfunction resetHandler(e) {\n    e.preventDefault();\n    if (!this.inputObj.clearButton.classList.contains('e-clear-icon-hide')) {\n        clear.call(this, e);\n        this.value = '';\n    }\n}\nfunction clear(event) {\n    let value = this.element.value;\n    setElementValue.call(this, this.promptMask);\n    this.redoCollec.unshift({\n        value: this.promptMask, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\n    });\n    triggerMaskChangeEvent.call(this, event, value);\n    this.element.setSelectionRange(0, 0);\n}\nfunction resetFormHandler() {\n    if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {\n        setElementValue.call(this, this.promptMask);\n    }\n    else {\n        this.value = this.initInputValue;\n    }\n}\n/**\n * @hidden\n * To get masked value from the MaskedTextBox.\n */\nfunction unstrippedValue(element) {\n    return element.value;\n}\n/**\n * @hidden\n * To extract raw value from the MaskedTextBox.\n */\nfunction strippedValue(element, maskValues) {\n    let value = '';\n    let k = 0;\n    let checkMask = false;\n    let maskValue = (!isNullOrUndefined(maskValues)) ? maskValues : (!isNullOrUndefined(element) &&\n        !isNullOrUndefined(this)) ? element.value : maskValues;\n    if (maskValue !== this.promptMask) {\n        for (let i = 0; i < this.customRegExpCollec.length; i++) {\n            if (checkMask) {\n                checkMask = false;\n            }\n            if (this.customRegExpCollec[k] === '>' || this.customRegExpCollec[k] === '<' ||\n                this.customRegExpCollec[k] === '|' || this.customRegExpCollec[k] === '\\\\') {\n                --i;\n                checkMask = true;\n            }\n            if (!checkMask) {\n                if ((maskValue[i] !== this.promptChar) && (!isNullOrUndefined(this.customRegExpCollec[k]) &&\n                    ((this._callPasteHandler || !isNullOrUndefined(this.regExpCollec[this.customRegExpCollec[k]])) ||\n                        (this.customRegExpCollec[k].length > 2 && this.customRegExpCollec[k][0] === '[' &&\n                            this.customRegExpCollec[k][this.customRegExpCollec[k].length - 1] === ']') ||\n                        (!isNullOrUndefined(this.customCharacters) &&\n                            (!isNullOrUndefined(this.customCharacters[this.customRegExpCollec[k]]))))) && (maskValue !== '')) {\n                    value += maskValue[i];\n                }\n            }\n            ++k;\n        }\n    }\n    if (this.mask === null || this.mask === '' && this.value !== undefined) {\n        value = maskValue;\n    }\n    return value;\n}\nfunction pushIntoRegExpCollec(value) {\n    for (let k = 0; k < value.length; k++) {\n        this.hiddenMask += value[k];\n        if (value[k] !== '\\\\') {\n            this.customRegExpCollec.push(value[k]);\n        }\n    }\n}\nfunction maskInputFocusHandler(event) {\n    let eventArgs = {\n        selectionStart: 0,\n        event: event,\n        value: this.value,\n        maskedValue: this.element.value,\n        container: this.inputObj.container,\n        selectionEnd: (this.promptMask.length > 0) ? this.promptMask.length : this.element.value.length,\n    };\n    this.trigger('focus', eventArgs, (eventArgs) => {\n        if (this.mask) {\n            this.isFocus = true;\n            if (this.element.value === '') {\n                setElementValue.call(this, this.promptMask);\n            }\n            else {\n                setElementValue.call(this, this.element.value);\n            }\n            if (!Browser.isDevice && Browser.info.version === '11.0') {\n                this.element.setSelectionRange(eventArgs.selectionStart, eventArgs.selectionEnd);\n            }\n            else {\n                let delay = (Browser.isDevice && Browser.isIos) ? 450 : 0;\n                setTimeout(() => {\n                    this.element.setSelectionRange(eventArgs.selectionStart, eventArgs.selectionEnd);\n                }, delay);\n            }\n        }\n    });\n}\nfunction maskInputBlurHandler(event) {\n    this.blurEventArgs = {\n        event: event,\n        value: this.value,\n        maskedValue: this.element.value,\n        container: this.inputObj.container\n    };\n    this.trigger('blur', this.blurEventArgs);\n    if (this.mask) {\n        this.isFocus = false;\n        if (this.placeholder && this.element.value === this.promptMask && this.floatLabelType !== 'Always') {\n            setElementValue.call(this, '');\n            let labelElement = this.element.parentNode.querySelector('.e-float-text');\n            if (this.floatLabelType === 'Auto' && !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL)) {\n                removeClass([labelElement], TOPLABEL);\n            }\n        }\n    }\n}\nfunction maskInputPasteHandler(event) {\n    if (this.mask && !this.readonly) {\n        let sIndex = this.element.selectionStart;\n        let eIndex = this.element.selectionEnd;\n        let oldValue = this.element.value;\n        setElementValue.call(this, '');\n        this._callPasteHandler = true;\n        setTimeout(() => {\n            let value = this.element.value.replace(/ /g, '');\n            if (this.redoCollec.length > 0 && this.redoCollec[0].value === this.element.value) {\n                value = strippedValue.call(this, this.element);\n            }\n            setElementValue.call(this, oldValue);\n            this.element.selectionStart = sIndex;\n            this.element.selectionEnd = eIndex;\n            let i = 0;\n            this.maskKeyPress = true;\n            do {\n                validateValue.call(this, value[i], false, null);\n                ++i;\n            } while (i < value.length);\n            this.maskKeyPress = false;\n            this._callPasteHandler = false;\n            if (this.element.value === oldValue) {\n                let i = 0;\n                this.maskKeyPress = true;\n                do {\n                    validateValue.call(this, value[i], false, null);\n                    ++i;\n                } while (i < value.length);\n                this.maskKeyPress = false;\n            }\n            else {\n                triggerMaskChangeEvent.call(this, event, oldValue);\n            }\n        }, 1);\n    }\n}\nfunction maskInputCutHandler(event) {\n    if (this.mask && !this.readonly) {\n        let preValue = this.element.value;\n        let sIndex = this.element.selectionStart;\n        let eIndex = this.element.selectionEnd;\n        this.undoCollec.push({ value: this.element.value, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd });\n        let value = this.element.value.substring(0, sIndex) + this.promptMask.substring(sIndex, eIndex) +\n            this.element.value.substring(eIndex);\n        setTimeout(() => {\n            setElementValue.call(this, value);\n            this.element.selectionStart = this.element.selectionEnd = sIndex;\n            if (this.element.value !== preValue) {\n                triggerMaskChangeEvent.call(this, event, null);\n            }\n        }, 0);\n    }\n}\nfunction maskInputDropHandler(event) {\n    event.preventDefault();\n}\nfunction maskInputHandler(event) {\n    if (Browser.isIE === true && this.element.value === '' && this.floatLabelType === 'Never') {\n        return;\n    }\n    let eventArgs = { ctrlKey: false, keyCode: 229 };\n    // tslint:disable-next-line\n    extend(event, eventArgs);\n    if (this.mask) {\n        if (this.element.value === '') {\n            this.redoCollec.unshift({\n                value: this.promptMask, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\n            });\n        }\n        if (this.element.value.length === 1) {\n            this.element.value = this.element.value + this.promptMask;\n            this.element.setSelectionRange(1, 1);\n        }\n        if (!this._callPasteHandler) {\n            removeMaskInputValues.call(this, event);\n        }\n        if (this.element.value.length > this.promptMask.length) {\n            let startIndex = this.element.selectionStart;\n            let addedValues = this.element.value.length - this.promptMask.length;\n            let value = this.element.value.substring(startIndex - addedValues, startIndex);\n            this.maskKeyPress = false;\n            let i = 0;\n            do {\n                validateValue.call(this, value[i], event.ctrlKey, event);\n                ++i;\n            } while (i < value.length);\n            if (this.element.value !== this.preEleVal) {\n                triggerMaskChangeEvent.call(this, event, null);\n            }\n        }\n        let val = strippedValue.call(this, this.element);\n        this.prevValue = val;\n        this.value = val;\n        if (val === '') {\n            setElementValue.call(this, this.promptMask);\n            this.element.setSelectionRange(0, 0);\n        }\n    }\n}\nfunction maskInputKeyDownHandler(event) {\n    if (this.mask && !this.readonly) {\n        if (event.keyCode !== 229) {\n            if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {\n                event.preventDefault();\n            }\n            removeMaskInputValues.call(this, event);\n        }\n        let startValue = this.element.value;\n        if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {\n            let collec;\n            if (event.keyCode === 90 && this.undoCollec.length > 0 && startValue !== this.undoCollec[this.undoCollec.length - 1].value) {\n                collec = this.undoCollec[this.undoCollec.length - 1];\n                this.redoCollec.unshift({\n                    value: this.element.value, startIndex: this.element.selectionStart,\n                    endIndex: this.element.selectionEnd\n                });\n                setElementValue.call(this, collec.value);\n                this.element.selectionStart = collec.startIndex;\n                this.element.selectionEnd = collec.endIndex;\n                this.undoCollec.splice(this.undoCollec.length - 1, 1);\n            }\n            else if (event.keyCode === 89 && this.redoCollec.length > 0 && startValue !== this.redoCollec[0].value) {\n                collec = this.redoCollec[0];\n                this.undoCollec.push({\n                    value: this.element.value, startIndex: this.element.selectionStart,\n                    endIndex: this.element.selectionEnd\n                });\n                setElementValue.call(this, collec.value);\n                this.element.selectionStart = collec.startIndex;\n                this.element.selectionEnd = collec.endIndex;\n                this.redoCollec.splice(0, 1);\n            }\n        }\n    }\n}\nfunction mobileRemoveFunction() {\n    let collec;\n    let sIndex = this.element.selectionStart;\n    let eIndex = this.element.selectionEnd;\n    if (this.redoCollec.length > 0) {\n        collec = this.redoCollec[0];\n        setElementValue.call(this, collec.value);\n        if ((collec.startIndex - sIndex) === 1) {\n            this.element.selectionStart = collec.startIndex;\n            this.element.selectionEnd = collec.endIndex;\n        }\n        else {\n            this.element.selectionStart = sIndex + 1;\n            this.element.selectionEnd = eIndex + 1;\n        }\n    }\n    else {\n        setElementValue.call(this, this.promptMask);\n        this.element.selectionStart = this.element.selectionEnd = sIndex;\n    }\n}\nfunction autoFillMaskInputValues(isRemove, oldEventVal, event) {\n    if (event.type === 'input') {\n        isRemove = false;\n        oldEventVal = this.element.value;\n        setElementValue.call(this, this.promptMask);\n        setMaskValue.call(this, oldEventVal);\n    }\n    return isRemove;\n}\nfunction removeMaskInputValues(event) {\n    let isRemove = false;\n    let oldEventVal;\n    let isDeleted = false;\n    if (this.element.value.length < this.promptMask.length) {\n        isRemove = true;\n        oldEventVal = this.element.value;\n        isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);\n        mobileRemoveFunction.call(this);\n    }\n    if (this.element.value.length >= this.promptMask.length && event.type === 'input') {\n        isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);\n    }\n    let initStartIndex = this.element.selectionStart;\n    let initEndIndex = this.element.selectionEnd;\n    let startIndex = this.element.selectionStart;\n    let endIndex = this.element.selectionEnd;\n    let maskValue = this.hiddenMask.replace(/[>|\\\\<]/g, '');\n    let curMask = maskValue[startIndex - 1];\n    let parentElement = this.element.parentNode;\n    if (isRemove || event.keyCode === 8 || event.keyCode === 46) {\n        this.undoCollec.push({ value: this.element.value, startIndex: this.element.selectionStart, endIndex: endIndex });\n        let multipleDel = false;\n        let preValue = this.element.value;\n        if (startIndex > 0 || ((event.keyCode === 8 || event.keyCode === 46) && startIndex < this.element.value.length\n            && ((this.element.selectionEnd - startIndex) !== this.element.value.length))) {\n            let index = startIndex;\n            if (startIndex !== endIndex) {\n                startIndex = endIndex;\n                if (event.keyCode === 46) {\n                    multipleDel = true;\n                }\n            }\n            else if (event.keyCode === 46) {\n                ++index;\n            }\n            else {\n                --index;\n            }\n            for (let k = startIndex; (event.keyCode === 8 || isRemove || multipleDel) ? k > index : k < index; (event.keyCode === 8 || isRemove || multipleDel) ? k-- : k++) {\n                for (let i = startIndex; (event.keyCode === 8 || isRemove || multipleDel) ? i > 0 : i < this.element.value.length; (event.keyCode === 8 || isRemove || multipleDel) ? i-- : i++) {\n                    let sIndex;\n                    if (((event.keyCode === 8 || multipleDel) && ((initStartIndex !== initEndIndex && initStartIndex !== startIndex) ||\n                        (initStartIndex === initEndIndex))) || isRemove) {\n                        curMask = maskValue[i - 1];\n                        sIndex = startIndex - 1;\n                    }\n                    else {\n                        curMask = maskValue[i];\n                        sIndex = startIndex;\n                        ++startIndex;\n                    }\n                    let oldValue = this.element.value[sIndex];\n                    if ((isNullOrUndefined(this.regExpCollec[curMask]) && (!isNullOrUndefined(this.customCharacters)\n                        && isNullOrUndefined(this.customCharacters[curMask]))\n                        && ((this.hiddenMask[sIndex] !== this.promptChar && this.customRegExpCollec[sIndex][0] !== '['\n                            && this.customRegExpCollec[sIndex][this.customRegExpCollec[sIndex].length - 1] !== ']')))\n                        || (this.promptMask[sIndex] !== this.promptChar && isNullOrUndefined(this.customCharacters))) {\n                        this.element.selectionStart = this.element.selectionEnd = sIndex;\n                        event.preventDefault();\n                        if (event.keyCode === 46 && !multipleDel) {\n                            ++this.element.selectionStart;\n                        }\n                    }\n                    else {\n                        let value = this.element.value;\n                        let prompt = this.promptChar;\n                        let elementValue = value.substring(0, sIndex) + prompt + value.substring(startIndex, value.length);\n                        setElementValue.call(this, elementValue);\n                        event.preventDefault();\n                        this.element.selectionStart = this.element.selectionEnd = sIndex;\n                        isDeleted = true;\n                    }\n                    startIndex = this.element.selectionStart;\n                    if ((!isDeleted && event.keyCode === 8) || multipleDel || (!isDeleted && !(event.keyCode === 46))) {\n                        sIndex = startIndex - 1;\n                    }\n                    else {\n                        sIndex = startIndex;\n                        isDeleted = false;\n                    }\n                    oldValue = this.element.value[sIndex];\n                    if (((initStartIndex !== initEndIndex) && (this.element.selectionStart === initStartIndex))\n                        || (this.promptMask[sIndex] === this.promptChar) || ((oldValue !== this.promptMask[sIndex]) &&\n                        (this.promptMask[sIndex] !== this.promptChar) && !isNullOrUndefined(this.customCharacters))) {\n                        break;\n                    }\n                }\n            }\n        }\n        if (this.element.selectionStart === 0 && (this.element.selectionEnd === this.element.value.length)) {\n            setElementValue.call(this, this.promptMask);\n            event.preventDefault();\n            this.element.selectionStart = this.element.selectionEnd = startIndex;\n        }\n        this.redoCollec.unshift({\n            value: this.element.value, startIndex: this.element.selectionStart,\n            endIndex: this.element.selectionEnd\n        });\n        if (this.element.value !== preValue) {\n            triggerMaskChangeEvent.call(this, event, oldEventVal);\n        }\n    }\n}\nfunction maskInputKeyPressHandler(event) {\n    if (this.mask && !this.readonly) {\n        let oldValue = this.element.value;\n        if ((!event.ctrlKey) || (event.ctrlKey && event.code !== 'KeyA' && event.code !== 'KeyY'\n            && event.code !== 'KeyZ' && event.code !== 'KeyX' && event.code !== 'KeyC' && event.code !== 'KeyV')) {\n            this.maskKeyPress = true;\n            let key = event.key;\n            if (key === 'Spacebar') {\n                key = String.fromCharCode(event.keyCode);\n            }\n            if (!key) {\n                this.isIosInvalid = true;\n                validateValue.call(this, String.fromCharCode(event.keyCode), event.ctrlKey, event);\n                event.preventDefault();\n                this.isIosInvalid = false;\n            }\n            else if (key && key.length === 1) {\n                validateValue.call(this, key, event.ctrlKey, event);\n                event.preventDefault();\n            }\n            if (event.keyCode === 32 && key === ' ' && this.promptChar === ' ') {\n                this.element.selectionStart = this.element.selectionEnd = this.element.selectionStart - key.length;\n            }\n        }\n        if (this.element.value !== oldValue) {\n            triggerMaskChangeEvent.call(this, event, oldValue);\n        }\n    }\n}\nfunction triggerMaskChangeEvent(event, oldValue) {\n    let prevOnChange = this.isProtectedOnChange;\n    if (!isNullOrUndefined(this.changeEventArgs) && !this.isInitial) {\n        let eventArgs = {};\n        this.changeEventArgs = { value: this.element.value, maskedValue: this.element.value, isInteraction: false, isInteracted: false };\n        if (this.mask) {\n            this.changeEventArgs.value = strippedValue.call(this, this.element);\n        }\n        if (!isNullOrUndefined(event)) {\n            this.changeEventArgs.isInteracted = true;\n            this.changeEventArgs.isInteraction = true;\n            this.changeEventArgs.event = event;\n        }\n        this.isProtectedOnChange = true;\n        this.value = this.changeEventArgs.value;\n        this.isProtectedOnChange = prevOnChange;\n        merge(eventArgs, this.changeEventArgs);\n        this.trigger('change', eventArgs);\n    }\n    this.preEleVal = this.element.value;\n    this.prevValue = strippedValue.call(this, this.element);\n    attributes(this.element, { 'aria-valuenow': this.element.value });\n}\nfunction maskInputKeyUpHandler(event) {\n    if (this.mask && !this.readonly) {\n        let collec;\n        if (!this.maskKeyPress && event.keyCode === 229) {\n            let oldEventVal;\n            if (this.element.value.length === 1) {\n                this.element.value = this.element.value + this.promptMask;\n                this.element.setSelectionRange(1, 1);\n            }\n            if (this.element.value.length > this.promptMask.length) {\n                let startIndex = this.element.selectionStart;\n                let addedValues = this.element.value.length - this.promptMask.length;\n                let val = this.element.value.substring(startIndex - addedValues, startIndex);\n                if (this.undoCollec.length > 0) {\n                    collec = this.undoCollec[this.undoCollec.length - 1];\n                    let startIndex = this.element.selectionStart;\n                    oldEventVal = collec.value;\n                    let oldVal = collec.value.substring(startIndex - addedValues, startIndex);\n                    collec = this.redoCollec[0];\n                    val = val.trim();\n                    let isSpace = Browser.isAndroid && val === '';\n                    if (!isSpace && oldVal !== val && collec.value.substring(startIndex - addedValues, startIndex) !== val) {\n                        validateValue.call(this, val, event.ctrlKey, event);\n                    }\n                    else if (isSpace) {\n                        preventUnsupportedValues.call(this, event, startIndex - 1, this.element.selectionEnd - 1, val, event.ctrlKey, false);\n                    }\n                }\n                else {\n                    oldEventVal = this.promptMask;\n                    validateValue.call(this, val, event.ctrlKey, event);\n                }\n                this.maskKeyPress = false;\n                triggerMaskChangeEvent.call(this, event, oldEventVal);\n            }\n        }\n        else {\n            removeMaskError.call(this);\n        }\n        let val = strippedValue.call(this, this.element);\n        if (!((this.element.selectionStart === 0) && (this.promptMask === this.element.value) && val === '')\n            || (val === '' && this.value !== val)) {\n            this.prevValue = val;\n            this.value = val;\n        }\n    }\n    else {\n        triggerMaskChangeEvent.call(this, event);\n    }\n    if (this.element.selectionStart === 0 && this.element.selectionEnd === 0) {\n        // tslint:disable-next-line\n        let temp = this.element;\n        setTimeout(() => {\n            temp.setSelectionRange(0, 0);\n        }, 0);\n    }\n}\nfunction mobileSwipeCheck(key) {\n    if (key.length > 1 && ((this.promptMask.length + key.length) < this.element.value.length)) {\n        let elementValue = this.redoCollec[0].value.substring(0, this.redoCollec[0].startIndex) + key +\n            this.redoCollec[0].value.substring(this.redoCollec[0].startIndex, this.redoCollec[0].value.length);\n        setElementValue.call(this, elementValue);\n        this.element.selectionStart = this.element.selectionEnd = this.redoCollec[0].startIndex + key.length;\n    }\n    this.element.selectionStart = this.element.selectionStart - key.length;\n    this.element.selectionEnd = this.element.selectionEnd - key.length;\n}\nfunction mobileValidation(key) {\n    if (!this.maskKeyPress) {\n        mobileSwipeCheck.call(this, key);\n    }\n}\nfunction validateValue(key, isCtrlKey, event) {\n    mobileValidation.call(this, key);\n    if (isNullOrUndefined(this) || isNullOrUndefined(key)) {\n        return;\n    }\n    let startIndex = this.element.selectionStart;\n    let initStartIndex = startIndex;\n    let endIndex = this.element.selectionEnd;\n    let curMask;\n    let allowText = false;\n    let value = this.element.value;\n    let eventOldVal;\n    let prevSupport = false;\n    let isEqualVal = false;\n    for (let k = 0; k < key.length; k++) {\n        let keyValue = key[k];\n        startIndex = this.element.selectionStart;\n        endIndex = this.element.selectionEnd;\n        if (!this.maskKeyPress && initStartIndex === startIndex) {\n            startIndex = startIndex + k;\n        }\n        if ((!this.maskKeyPress || startIndex < this.promptMask.length)) {\n            for (let i = startIndex; i < this.promptMask.length; i++) {\n                let maskValue = this.escapeMaskValue;\n                curMask = maskValue[startIndex];\n                if (this.hiddenMask[startIndex] === '\\\\' && this.hiddenMask[startIndex + 1] === key) {\n                    isEqualVal = true;\n                }\n                if ((isNullOrUndefined(this.regExpCollec[curMask]) && (isNullOrUndefined(this.customCharacters)\n                    || (!isNullOrUndefined(this.customCharacters) && isNullOrUndefined(this.customCharacters[curMask])))\n                    && ((this.hiddenMask[startIndex] !== this.promptChar && this.customRegExpCollec[startIndex][0] !== '['\n                        && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] !== ']')))\n                    || ((this.promptMask[startIndex] !== this.promptChar) && isNullOrUndefined(this.customCharacters))\n                    || (this.promptChar === curMask && this.escapeMaskValue === this.mask)) {\n                    this.element.selectionStart = this.element.selectionEnd = startIndex + 1;\n                    startIndex = this.element.selectionStart;\n                    curMask = this.hiddenMask[startIndex];\n                }\n            }\n            if (!isNullOrUndefined(this.customCharacters) && !isNullOrUndefined(this.customCharacters[curMask])) {\n                let customValStr = this.customCharacters[curMask];\n                let customValArr = customValStr.split(',');\n                for (let i = 0; i < customValArr.length; i++) {\n                    if (keyValue.match(new RegExp('[' + customValArr[i] + ']'))) {\n                        allowText = true;\n                        break;\n                    }\n                }\n            }\n            else if (!isNullOrUndefined(this.regExpCollec[curMask]) && keyValue.match(new RegExp(this.regExpCollec[curMask]))\n                && this.promptMask[startIndex] === this.promptChar) {\n                allowText = true;\n            }\n            else if (this.promptMask[startIndex] === this.promptChar && this.customRegExpCollec[startIndex][0] === '['\n                && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] === ']'\n                && keyValue.match(new RegExp(this.customRegExpCollec[startIndex]))) {\n                allowText = true;\n            }\n            if ((!this.maskKeyPress || startIndex < this.hiddenMask.length) && allowText) {\n                if (k === 0) {\n                    if (this.maskKeyPress) {\n                        this.undoCollec.push({ value: value, startIndex: startIndex, endIndex: startIndex });\n                    }\n                    else {\n                        let sIndex = this.element.selectionStart;\n                        let eIndex = this.element.selectionEnd;\n                        if (this.redoCollec.length > 0) {\n                            eventOldVal = this.redoCollec[0].value;\n                            setElementValue.call(this, eventOldVal);\n                            this.undoCollec.push(this.redoCollec[0]);\n                        }\n                        else {\n                            this.undoCollec.push({ value: this.promptMask, startIndex: startIndex, endIndex: startIndex });\n                            eventOldVal = this.promptMask;\n                            setElementValue.call(this, eventOldVal);\n                        }\n                        this.element.selectionStart = sIndex;\n                        this.element.selectionEnd = eIndex;\n                    }\n                }\n                startIndex = this.element.selectionStart;\n                applySupportedValues.call(this, event, startIndex, keyValue, eventOldVal, isEqualVal);\n                prevSupport = true;\n                if (k === key.length - 1) {\n                    this.redoCollec.unshift({\n                        value: this.element.value, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\n                    });\n                }\n                allowText = false;\n            }\n            else {\n                startIndex = this.element.selectionStart;\n                preventUnsupportedValues.call(this, event, startIndex, initStartIndex, key, isCtrlKey, prevSupport);\n            }\n            if (k === key.length - 1 && !allowText) {\n                if (!Browser.isAndroid || (Browser.isAndroid && startIndex < this.promptMask.length)) {\n                    this.redoCollec.unshift({\n                        value: this.element.value, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\n                    });\n                }\n            }\n        }\n        else {\n            if (key.length === 1 && !isCtrlKey && !isNullOrUndefined(event)) {\n                addMaskErrorClass.call(this);\n            }\n        }\n    }\n}\nfunction applySupportedValues(event, startIndex, keyValue, eventOldVal, isEqualVal) {\n    if (this.hiddenMask.length > this.promptMask.length) {\n        keyValue = changeToLowerUpperCase.call(this, keyValue, this.element.value);\n    }\n    if (!isEqualVal) {\n        let value = this.element.value;\n        let elementValue = value.substring(0, startIndex) + keyValue + value.substring(startIndex + 1, value.length);\n        setElementValue.call(this, elementValue);\n        this.element.selectionStart = this.element.selectionEnd = startIndex + 1;\n    }\n}\nfunction preventUnsupportedValues(event, sIdx, idx, key, ctrl, chkSupport) {\n    if (!this.maskKeyPress) {\n        let eventOldVal;\n        let value = this.element.value;\n        if (sIdx >= this.promptMask.length) {\n            setElementValue.call(this, value.substring(0, sIdx));\n        }\n        else {\n            if (idx === sIdx) {\n                setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx + 1, value.length));\n            }\n            else {\n                if (this.promptMask.length === this.element.value.length) {\n                    setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx, value.length));\n                }\n                else {\n                    setElementValue.call(this, value.substring(0, idx) + value.substring(idx + 1, value.length));\n                }\n            }\n            this.element.selectionStart = this.element.selectionEnd = (chkSupport ||\n                this.element.value[idx] !== this.promptChar) ? sIdx : idx;\n        }\n        eventOldVal = this.element.value;\n        addMaskErrorClass.call(this);\n    }\n    if (key.length === 1 && !ctrl && !isNullOrUndefined(event)) {\n        addMaskErrorClass.call(this);\n    }\n}\nfunction addMaskErrorClass() {\n    let parentElement = this.element.parentNode;\n    let timer = 200;\n    if (parentElement.classList.contains(INPUTGROUP) || parentElement.classList.contains(FLOATINPUT)) {\n        addClass([parentElement], ERROR$1);\n    }\n    else {\n        addClass([this.element], ERROR$1);\n    }\n    if (this.isIosInvalid === true) {\n        timer = 400;\n    }\n    attributes(this.element, { 'aria-invalid': 'true' });\n    setTimeout(() => {\n        if (!this.maskKeyPress) {\n            removeMaskError.call(this);\n        }\n    }, timer);\n}\nfunction removeMaskError() {\n    let parentElement = this.element.parentNode;\n    if (!isNullOrUndefined(parentElement)) {\n        removeClass([parentElement], ERROR$1);\n    }\n    removeClass([this.element], ERROR$1);\n    attributes(this.element, { 'aria-invalid': 'false' });\n}\n/**\n * @hidden\n * Validates user input using masking elements '<' , '>' and '|'.\n */\nfunction changeToLowerUpperCase(key, value) {\n    let promptMask;\n    let i;\n    let curVal = value;\n    let caseCount = 0;\n    for (i = 0; i < this.hiddenMask.length; i++) {\n        if (this.hiddenMask[i] === '\\\\') {\n            promptMask = curVal.substring(0, i) + '\\\\' + curVal.substring(i, curVal.length);\n        }\n        if (this.hiddenMask[i] === '>' || this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|') {\n            if (this.hiddenMask[i] !== curVal[i]) {\n                promptMask = curVal.substring(0, i) + this.hiddenMask[i] + curVal.substring(i, curVal.length);\n            }\n            ++caseCount;\n        }\n        if (promptMask) {\n            if (((promptMask[i] === this.promptChar) && (i > this.element.selectionStart)) ||\n                (this.element.value.indexOf(this.promptChar) < 0 && (this.element.selectionStart + caseCount) === i)) {\n                caseCount = 0;\n                break;\n            }\n            curVal = promptMask;\n        }\n    }\n    while (i >= 0 && promptMask) {\n        if (i === 0 || promptMask[i - 1] !== '\\\\') {\n            let val = this.element.value;\n            if (promptMask[i] === '>') {\n                key = key.toUpperCase();\n                break;\n            }\n            else if (promptMask[i] === '<') {\n                key = key.toLowerCase();\n                break;\n            }\n            else if (promptMask[i] === '|') {\n                break;\n            }\n        }\n        --i;\n    }\n    return key;\n}\n/**\n * @hidden\n * To set updated values in the MaskedTextBox.\n */\nfunction setMaskValue(val) {\n    if (this.mask && val !== undefined && (this.prevValue === undefined || this.prevValue !== val)) {\n        this.maskKeyPress = true;\n        setElementValue.call(this, this.promptMask);\n        if (val !== '' && !(val === null && this.floatLabelType === 'Never' && this.placeholder)) {\n            this.element.selectionStart = 0;\n            this.element.selectionEnd = 0;\n        }\n        if (val !== null) {\n            for (let i = 0; i < val.length; i++) {\n                validateValue.call(this, val[i], false, null);\n            }\n        }\n        let newVal = strippedValue.call(this, this.element);\n        this.prevValue = newVal;\n        this.value = newVal;\n        triggerMaskChangeEvent.call(this, null, null);\n        this.maskKeyPress = false;\n        let labelElement = this.element.parentNode.querySelector('.e-float-text');\n        if (this.element.value === this.promptMask && this.floatLabelType === 'Auto' && this.placeholder &&\n            !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL) && !this.isFocus) {\n            removeClass([labelElement], TOPLABEL);\n            addClass([labelElement], BOTTOMLABEL);\n            setElementValue.call(this, '');\n        }\n    }\n    if (this.mask === null || this.mask === '' && this.value !== undefined) {\n        setElementValue.call(this, this.value);\n    }\n}\n/**\n * @hidden\n * To set updated values in the input element.\n */\nfunction setElementValue(val, element) {\n    if (!this.isFocus && this.floatLabelType === 'Auto' && this.placeholder && isNullOrUndefined(this.value)) {\n        val = '';\n    }\n    let value = strippedValue.call(this, (element ? element : this.element), val);\n    if (value === null || value === '') {\n        Input.setValue(val, (element ? element : this.element), this.floatLabelType, false);\n        if (this.showClearButton) {\n            this.inputObj.clearButton.classList.add('e-clear-icon-hide');\n        }\n    }\n    else {\n        Input.setValue(val, (element ? element : this.element), this.floatLabelType, this.showClearButton);\n    }\n}\n/**\n * @hidden\n * Provide mask support to input textbox through utility method.\n */\nfunction maskInput(args) {\n    let inputEle = getMaskInput(args);\n    applyMask.call(inputEle);\n    let val = strippedValue.call(this, this.element);\n    this.prevValue = val;\n    this.value = val;\n    if (args.mask) {\n        unwireEvents.call(inputEle);\n        wireEvents.call(inputEle);\n    }\n}\nfunction getMaskInput(args) {\n    addClass([args.element], UTILMASK);\n    let inputEle = {\n        element: args.element,\n        mask: args.mask,\n        promptMask: '',\n        hiddenMask: '',\n        escapeMaskValue: '',\n        promptChar: args.promptChar ? (args.promptChar.length > 1) ? args.promptChar = args.promptChar[0]\n            : args.promptChar : '_',\n        value: args.value ? args.value : null,\n        regExpCollec: regularExpressions,\n        customRegExpCollec: [],\n        customCharacters: args.customCharacters,\n        undoCollec: [],\n        redoCollec: [],\n        maskKeyPress: false,\n        prevValue: ''\n    };\n    createMask.call(inputEle);\n    return inputEle;\n}\n/**\n * @hidden\n * Gets raw value of the textbox which has been masked through utility method.\n */\nfunction getVal(args) {\n    return strippedValue.call(getUtilMaskEle(args), args.element);\n}\n/**\n * @hidden\n * Gets masked value of the textbox which has been masked through utility method.\n */\nfunction getMaskedVal(args) {\n    return unstrippedValue.call(getUtilMaskEle(args), args.element);\n}\nfunction getUtilMaskEle(args) {\n    let inputEle;\n    if (!isNullOrUndefined(args) && args.element.classList.contains(UTILMASK)) {\n        inputEle = getMaskInput(args);\n    }\n    return inputEle;\n}\n/**\n * @hidden\n * Arguments to perform undo and redo functionalities.\n */\nclass MaskUndo {\n}\n\n/**\n * MaskedTextbox base modules\n */\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst ROOT$1 = 'e-control-wrapper e-mask';\nconst INPUT = 'e-input';\nconst COMPONENT$1 = 'e-maskedtextbox';\nconst CONTROL$1 = 'e-control';\nconst MASKINPUT_FOCUS = 'e-input-focus';\nconst wrapperAttr = ['title', 'style', 'class'];\n/**\n * The MaskedTextBox allows the user to enter the valid input only based on the provided mask.\n * ```html\n * <input id=\"mask\" type=\"text\" />\n * ```\n * ```typescript\n * <script>\n * var maskObj = new MaskedTextBox({ mask: \"(999) 9999-999\" });\n * maskObj.appendTo('#mask');\n * </script>\n * ```\n */\nlet MaskedTextBox = class MaskedTextBox extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.initInputValue = '';\n        this.maskOptions = options;\n    }\n    /**\n     * Gets the component name\n     * @private\n     */\n    getModuleName() {\n        return 'maskedtextbox';\n    }\n    /**\n     * Initializes the event handler\n     * @private\n     */\n    preRender() {\n        this.promptMask = '';\n        this.hiddenMask = '';\n        this.escapeMaskValue = '';\n        this.regExpCollec = regularExpressions;\n        this.customRegExpCollec = [];\n        this.undoCollec = [];\n        this.redoCollec = [];\n        this.changeEventArgs = {};\n        this.focusEventArgs = {};\n        this.blurEventArgs = {};\n        this.maskKeyPress = false;\n        this.isFocus = false;\n        this.isInitial = false;\n        this.isIosInvalid = false;\n        let ejInstance = getValue('ej2_instances', this.element);\n        this.cloneElement = this.element.cloneNode(true);\n        removeClass([this.cloneElement], [CONTROL$1, COMPONENT$1, 'e-lib']);\n        this.angularTagName = null;\n        this.formElement = closest(this.element, 'form');\n        if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {\n            this.angularTagName = this.element.tagName;\n            let input = this.createElement('input');\n            for (let i = 0; i < this.element.attributes.length; i++) {\n                input.setAttribute(this.element.attributes[i].nodeName, this.element.attributes[i].nodeValue);\n                input.innerHTML = this.element.innerHTML;\n            }\n            if (this.element.hasAttribute('id')) {\n                this.element.removeAttribute('id');\n            }\n            this.element.classList.remove('e-control', 'e-maskedtextbox');\n            this.element.classList.add('e-mask-container');\n            this.element.appendChild(input);\n            this.element = input;\n            setValue('ej2_instances', ejInstance, this.element);\n        }\n        this.updateHTMLAttrToElement();\n        this.checkHtmlAttributes(false);\n        if (this.formElement) {\n            this.initInputValue = this.value;\n        }\n    }\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     * @return {string}\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Initializes the component rendering.\n     * @private\n     */\n    render() {\n        if (this.element.tagName.toLowerCase() === 'input') {\n            if (this.floatLabelType === 'Never') {\n                addClass([this.element], INPUT);\n            }\n            this.createWrapper();\n            this.updateHTMLAttrToWrapper();\n            if (this.element.name === '') {\n                this.element.setAttribute('name', this.element.id);\n            }\n            this.isInitial = true;\n            this.resetMaskedTextBox();\n            this.isInitial = false;\n            this.setMaskPlaceholder(true, false);\n            this.setWidth(this.width);\n            this.preEleVal = this.element.value;\n            if (!Browser.isDevice && (Browser.info.version === '11.0' || Browser.info.name === 'edge')) {\n                this.element.blur();\n            }\n            if (Browser.isDevice && Browser.isIos) {\n                this.element.blur();\n            }\n            if (this.element.getAttribute('value') || this.value) {\n                this.element.setAttribute('value', this.element.value);\n            }\n            this.renderComplete();\n        }\n    }\n    updateHTMLAttrToElement() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttr.indexOf(key) < 0) {\n                    this.element.setAttribute(key, this.htmlAttributes[key]);\n                }\n            }\n        }\n    }\n    updateCssClass(newClass, oldClass) {\n        Input.setCssClass(this.getValidClassList(newClass), [this.inputObj.container], this.getValidClassList(oldClass));\n    }\n    getValidClassList(maskClassName) {\n        let result = maskClassName;\n        if (!isNullOrUndefined(maskClassName) && maskClassName !== '') {\n            result = (maskClassName.replace(/\\s+/g, ' ')).trim();\n        }\n        return result;\n    }\n    updateHTMLAttrToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttr.indexOf(key) > -1) {\n                    if (key === 'class') {\n                        let updatedClassValues = (this.htmlAttributes[key].replace(/\\s+/g, ' ')).trim();\n                        if (updatedClassValues !== '') {\n                            addClass([this.inputObj.container], updatedClassValues.split(' '));\n                        }\n                    }\n                    else if (key === 'style') {\n                        let maskStyle = this.inputObj.container.getAttribute(key);\n                        maskStyle = !isNullOrUndefined(maskStyle) ? (maskStyle + this.htmlAttributes[key]) :\n                            this.htmlAttributes[key];\n                        this.inputObj.container.setAttribute(key, maskStyle);\n                    }\n                    else {\n                        this.inputObj.container.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                }\n            }\n        }\n    }\n    resetMaskedTextBox() {\n        this.promptMask = '';\n        this.hiddenMask = '';\n        this.escapeMaskValue = '';\n        this.customRegExpCollec = [];\n        this.undoCollec = [];\n        this.redoCollec = [];\n        if (this.promptChar.length > 1) {\n            this.promptChar = this.promptChar[0];\n        }\n        createMask.call(this);\n        applyMask.call(this);\n        if (this.mask === null || this.mask === '' && this.value !== undefined) {\n            setElementValue.call(this, this.value);\n        }\n        let val = strippedValue.call(this, this.element);\n        this.prevValue = val;\n        this.value = val;\n        if (!this.isInitial) {\n            unwireEvents.call(this);\n        }\n        wireEvents.call(this);\n    }\n    setMaskPlaceholder(setVal, dynamicPlaceholder) {\n        if (dynamicPlaceholder || this.placeholder) {\n            Input.setPlaceholder(this.placeholder, this.element);\n            if (this.element.value === this.promptMask && setVal && this.floatLabelType !== 'Always') {\n                setElementValue.call(this, '');\n            }\n            if (this.floatLabelType === 'Never') {\n                maskInputBlurHandler.call(this);\n            }\n        }\n    }\n    setWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.inputObj.container.style.width = formatUnit(width);\n                this.element.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                let elementWidth = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n                this.inputObj.container.style.width = elementWidth;\n                this.element.style.width = elementWidth;\n            }\n        }\n    }\n    checkHtmlAttributes(isDynamic) {\n        let attributes$$1 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes)\n            : ['placeholder', 'disabled', 'value', 'readonly'];\n        for (let key of attributes$$1) {\n            if (!isNullOrUndefined(this.element.getAttribute(key))) {\n                switch (key) {\n                    case 'placeholder':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.maskOptions) || (this.maskOptions['placeholder'] === undefined)) || isDynamic) {\n                            this.setProperties({ placeholder: this.element.placeholder }, !isDynamic);\n                        }\n                        break;\n                    case 'disabled':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.maskOptions) || (this.maskOptions['enabled'] === undefined)) || isDynamic) {\n                            let enabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' ||\n                                this.element.getAttribute(key) === 'true' ? false : true;\n                            this.setProperties({ enabled: enabled }, !isDynamic);\n                        }\n                        break;\n                    case 'value':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.maskOptions) || (this.maskOptions['value'] === undefined)) || isDynamic) {\n                            this.setProperties({ value: this.element.value }, !isDynamic);\n                        }\n                        break;\n                    case 'readonly':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.maskOptions) || (this.maskOptions['readonly'] === undefined)) || isDynamic) {\n                            let readonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === ''\n                                || this.element.getAttribute(key) === 'true' ? true : false;\n                            this.setProperties({ readonly: readonly }, !isDynamic);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    createWrapper() {\n        let updatedCssClassValues = this.cssClass;\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            updatedCssClassValues = this.getValidClassList(this.cssClass);\n        }\n        this.inputObj = Input.createInput({\n            element: this.element,\n            floatLabelType: this.floatLabelType,\n            properties: {\n                enableRtl: this.enableRtl,\n                cssClass: updatedCssClassValues,\n                enabled: this.enabled,\n                readonly: this.readonly,\n                placeholder: this.placeholder,\n                showClearButton: this.showClearButton\n            }\n        }, this.createElement);\n        this.inputObj.container.setAttribute('class', ROOT$1 + ' ' + this.inputObj.container.getAttribute('class'));\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @hidden\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'value':\n                    setMaskValue.call(this, this.value);\n                    if (this.placeholder) {\n                        this.setMaskPlaceholder(false, false);\n                    }\n                    break;\n                case 'placeholder':\n                    this.setMaskPlaceholder(true, true);\n                    break;\n                case 'width':\n                    this.setWidth(newProp.width);\n                    break;\n                case 'cssClass':\n                    this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'enabled':\n                    Input.setEnabled(newProp.enabled, this.element, this.floatLabelType, this.inputObj.container);\n                    break;\n                case 'readonly':\n                    Input.setReadonly(newProp.readonly, this.element);\n                    break;\n                case 'enableRtl':\n                    Input.setEnableRtl(newProp.enableRtl, [this.inputObj.container]);\n                    break;\n                case 'customCharacters':\n                    this.customCharacters = newProp.customCharacters;\n                    this.resetMaskedTextBox();\n                    break;\n                case 'showClearButton':\n                    Input.setClearButton(newProp.showClearButton, this.element, this.inputObj, undefined, this.createElement);\n                    bindClearEvent.call(this);\n                    break;\n                case 'floatLabelType':\n                    this.floatLabelType = newProp.floatLabelType;\n                    Input.removeFloating(this.inputObj);\n                    Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttrToElement();\n                    this.updateHTMLAttrToWrapper();\n                    this.checkHtmlAttributes(true);\n                    break;\n                case 'mask':\n                    let strippedValue$$1 = this.value;\n                    this.mask = newProp.mask;\n                    this.updateValue(strippedValue$$1);\n                    break;\n                case 'promptChar':\n                    if (newProp.promptChar.length > 1) {\n                        newProp.promptChar = newProp.promptChar[0];\n                    }\n                    if (newProp.promptChar) {\n                        this.promptChar = newProp.promptChar;\n                    }\n                    else {\n                        this.promptChar = '_';\n                    }\n                    let value = this.element.value.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);\n                    if (this.promptMask === this.element.value) {\n                        value = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);\n                    }\n                    this.promptMask = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);\n                    this.undoCollec = this.redoCollec = [];\n                    setElementValue.call(this, value);\n                    break;\n            }\n        }\n    }\n    updateValue(strippedVal) {\n        this.resetMaskedTextBox();\n        setMaskValue.call(this, strippedVal);\n    }\n    /**\n     * Gets the value of the MaskedTextBox with the masked format.\n     * By using `value` property, you can get the raw value of maskedtextbox without literals and prompt characters.\n     * @return {string}\n     */\n    getMaskedValue() {\n        return unstrippedValue.call(this, this.element);\n    }\n    /**\n     * Sets the focus to widget for interaction.\n     * @returns void\n     */\n    focusIn() {\n        if (document.activeElement !== this.element && this.enabled) {\n            this.element.focus();\n            addClass([this.inputObj.container], [MASKINPUT_FOCUS]);\n        }\n    }\n    /**\n     * Remove the focus from widget, if the widget is in focus state.\n     * @returns void\n     */\n    focusOut() {\n        if (document.activeElement === this.element && this.enabled) {\n            this.element.blur();\n            removeClass([this.inputObj.container], [MASKINPUT_FOCUS]);\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also it maintains the initial input element from the DOM.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        unwireEvents.call(this);\n        let attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly',\n            'autocorrect', 'aria-disabled', 'aria-placeholder', 'autocapitalize',\n            'spellcheck', 'aria-autocomplete',\n            'aria-live', 'aria-valuenow', 'aria-invalid'];\n        for (let i = 0; i < attrArray.length; i++) {\n            this.element.removeAttribute(attrArray[i]);\n        }\n        this.element.classList.remove('e-input');\n        this.inputObj.container.insertAdjacentElement('afterend', this.element);\n        detach(this.inputObj.container);\n        super.destroy();\n    }\n};\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"cssClass\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"width\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"placeholder\", void 0);\n__decorate$1([\n    Property('Never')\n], MaskedTextBox.prototype, \"floatLabelType\", void 0);\n__decorate$1([\n    Property({})\n], MaskedTextBox.prototype, \"htmlAttributes\", void 0);\n__decorate$1([\n    Property(true)\n], MaskedTextBox.prototype, \"enabled\", void 0);\n__decorate$1([\n    Property(false)\n], MaskedTextBox.prototype, \"readonly\", void 0);\n__decorate$1([\n    Property(false)\n], MaskedTextBox.prototype, \"showClearButton\", void 0);\n__decorate$1([\n    Property(false)\n], MaskedTextBox.prototype, \"enablePersistence\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"mask\", void 0);\n__decorate$1([\n    Property('_')\n], MaskedTextBox.prototype, \"promptChar\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"value\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"customCharacters\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"created\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"destroyed\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"change\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"focus\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"blur\", void 0);\nMaskedTextBox = __decorate$1([\n    NotifyPropertyChanges\n], MaskedTextBox);\n\n/**\n * MaskedTextbox modules\n */\n\n/**\n * MaskedTextbox modules\n */\n\n/**\n * Input box Component\n */\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Configures the ticks data of the Slider.\n */\nclass TicksData extends ChildProperty {\n}\n__decorate$2([\n    Property('None')\n], TicksData.prototype, \"placement\", void 0);\n__decorate$2([\n    Property(10)\n], TicksData.prototype, \"largeStep\", void 0);\n__decorate$2([\n    Property(1)\n], TicksData.prototype, \"smallStep\", void 0);\n__decorate$2([\n    Property(false)\n], TicksData.prototype, \"showSmallTicks\", void 0);\n__decorate$2([\n    Property(null)\n], TicksData.prototype, \"format\", void 0);\n/**\n * It illustrates the color track data in slider.\n * {% codeBlock src='slider/colorrange/index.md' %}{% endcodeBlock %}\n */\nclass ColorRangeData extends ChildProperty {\n}\n__decorate$2([\n    Property(null)\n], ColorRangeData.prototype, \"color\", void 0);\n__decorate$2([\n    Property(null)\n], ColorRangeData.prototype, \"start\", void 0);\n__decorate$2([\n    Property(null)\n], ColorRangeData.prototype, \"end\", void 0);\n/**\n * It illustrates the limit data in slider.\n * {% codeBlock src='slider/limits/index.md' %}{% endcodeBlock %}\n */\nclass LimitData extends ChildProperty {\n}\n__decorate$2([\n    Property(false)\n], LimitData.prototype, \"enabled\", void 0);\n__decorate$2([\n    Property(null)\n], LimitData.prototype, \"minStart\", void 0);\n__decorate$2([\n    Property(null)\n], LimitData.prototype, \"minEnd\", void 0);\n__decorate$2([\n    Property(null)\n], LimitData.prototype, \"maxStart\", void 0);\n__decorate$2([\n    Property(null)\n], LimitData.prototype, \"maxEnd\", void 0);\n__decorate$2([\n    Property(false)\n], LimitData.prototype, \"startHandleFixed\", void 0);\n__decorate$2([\n    Property(false)\n], LimitData.prototype, \"endHandleFixed\", void 0);\n/**\n * It illustrates the tooltip data in slider.\n */\nclass TooltipData extends ChildProperty {\n}\n__decorate$2([\n    Property('')\n], TooltipData.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property('Before')\n], TooltipData.prototype, \"placement\", void 0);\n__decorate$2([\n    Property('Focus')\n], TooltipData.prototype, \"showOn\", void 0);\n__decorate$2([\n    Property(false)\n], TooltipData.prototype, \"isVisible\", void 0);\n__decorate$2([\n    Property(null)\n], TooltipData.prototype, \"format\", void 0);\nconst bootstrapTooltipOffset = 6;\nconst bootstrap4TooltipOffset = 3;\nconst classNames = {\n    root: 'e-slider',\n    rtl: 'e-rtl',\n    sliderHiddenInput: 'e-slider-input',\n    controlWrapper: 'e-control-wrapper',\n    sliderHandle: 'e-handle',\n    rangeBar: 'e-range',\n    sliderButton: 'e-slider-button',\n    firstButton: 'e-first-button',\n    secondButton: 'e-second-button',\n    scale: 'e-scale',\n    tick: 'e-tick',\n    large: 'e-large',\n    tickValue: 'e-tick-value',\n    sliderTooltip: 'e-slider-tooltip',\n    sliderHover: 'e-slider-hover',\n    sliderFirstHandle: 'e-handle-first',\n    sliderSecondHandle: 'e-handle-second',\n    sliderDisabled: 'e-disabled',\n    sliderContainer: 'e-slider-container',\n    horizontalTooltipBefore: 'e-slider-horizontal-before',\n    horizontalTooltipAfter: 'e-slider-horizontal-after',\n    verticalTooltipBefore: 'e-slider-vertical-before',\n    verticalTooltipAfter: 'e-slider-vertical-after',\n    materialTooltip: 'e-material-tooltip',\n    materialTooltipOpen: 'e-material-tooltip-open',\n    materialTooltipActive: 'e-tooltip-active',\n    materialSlider: 'e-material-slider',\n    sliderTrack: 'e-slider-track',\n    sliderHorizantalColor: 'e-slider-horizantal-color',\n    sliderVerticalColor: 'e-slider-vertical-color',\n    sliderHandleFocused: 'e-handle-focused',\n    verticalSlider: 'e-vertical',\n    horizontalSlider: 'e-horizontal',\n    sliderHandleStart: 'e-handle-start',\n    sliderTooltipStart: 'e-material-tooltip-start',\n    sliderTabHandle: 'e-tab-handle',\n    sliderButtonIcon: 'e-button-icon',\n    sliderSmallSize: 'e-small-size',\n    sliderTickPosition: 'e-tick-pos',\n    sliderFirstTick: 'e-first-tick',\n    sliderLastTick: 'e-last-tick',\n    sliderButtonClass: 'e-slider-btn',\n    sliderTooltipWrapper: 'e-tooltip-wrap',\n    sliderTabTrack: 'e-tab-track',\n    sliderTabRange: 'e-tab-range',\n    sliderActiveHandle: 'e-handle-active',\n    sliderMaterialHandle: 'e-material-handle',\n    sliderMaterialRange: 'e-material-range',\n    sliderMaterialDefault: 'e-material-default',\n    materialTooltipShow: 'e-material-tooltip-show',\n    materialTooltipHide: 'e-material-tooltip-hide',\n    readonly: 'e-read-only',\n    limits: 'e-limits',\n    limitBarDefault: 'e-limit-bar',\n    limitBarFirst: 'e-limit-first',\n    limitBarSecond: 'e-limit-second',\n    dragHorizontal: 'e-drag-horizontal',\n    dragVertical: 'e-drag-vertical'\n};\n/**\n * The Slider component allows the user to select a value or range\n * of values in-between a min and max range, by dragging the handle over the slider bar.\n * ```html\n * <div id='slider'></div>\n * ```\n * ```typescript\n * <script>\n *   var sliderObj = new Slider({ value: 10 });\n *   sliderObj.appendTo('#slider');\n * </script>\n * ```\n */\nlet Slider = class Slider extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.horDir = 'left';\n        this.verDir = 'bottom';\n        this.transition = {\n            handle: 'left .4s cubic-bezier(.25, .8, .25, 1), right .4s cubic-bezier(.25, .8, .25, 1), ' +\n                'top .4s cubic-bezier(.25, .8, .25, 1) , bottom .4s cubic-bezier(.25, .8, .25, 1)',\n            rangeBar: 'all .4s cubic-bezier(.25, .8, .25, 1)'\n        };\n        this.transitionOnMaterialTooltip = {\n            handle: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, top 1ms ease-out',\n            rangeBar: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, width 1ms ease-out, height 1ms ease-out'\n        };\n        this.scaleTransform = 'transform .4s cubic-bezier(.25, .8, .25, 1)';\n        this.customAriaText = null;\n        this.drag = true;\n    }\n    preRender() {\n        let localeText = { incrementTitle: 'Increase', decrementTitle: 'Decrease' };\n        this.l10n = new L10n('slider', localeText, this.locale);\n        this.isElementFocused = false;\n        this.tickElementCollection = [];\n        this.tooltipFormatInfo = {};\n        this.ticksFormatInfo = {};\n        this.initCultureInfo();\n        this.initCultureFunc();\n        this.formChecker();\n    }\n    formChecker() {\n        const formElement = closest(this.element, 'form');\n        if (formElement) {\n            this.isForm = true;\n            // this condition needs to be checked, if the slider is going to be refreshed by `refresh()`\n            // then we need to revert the slider `value` back to `formResetValue` to preserve the initial value\n            if (!isNullOrUndefined(this.formResetValue)) {\n                this.setProperties({ 'value': this.formResetValue }, true);\n            }\n            this.formResetValue = this.value;\n            if (this.type === 'Range' &&\n                (isNullOrUndefined(this.formResetValue) || typeof (this.formResetValue) !== 'object')) {\n                this.formResetValue = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];\n            }\n            else if (isNullOrUndefined(this.formResetValue)) {\n                this.formResetValue = parseFloat(formatUnit(this.min));\n            }\n            this.formElement = formElement;\n        }\n        else {\n            this.isForm = false;\n        }\n    }\n    initCultureFunc() {\n        this.internationalization = new Internationalization(this.locale);\n    }\n    initCultureInfo() {\n        this.tooltipFormatInfo.format = (!isNullOrUndefined(this.tooltip.format)) ? this.tooltip.format : null;\n        this.ticksFormatInfo.format = (!isNullOrUndefined(this.ticks.format)) ? this.ticks.format : null;\n    }\n    formatString(value, formatInfo) {\n        let formatValue = null;\n        let formatString = null;\n        if ((value || value === 0)) {\n            formatValue = this.formatNumber(value);\n            let numberOfDecimals = this.numberOfDecimals(value);\n            formatString = this.internationalization.getNumberFormat(formatInfo)(this.makeRoundNumber(value, numberOfDecimals));\n        }\n        return { elementVal: formatValue, formatString: formatString };\n    }\n    ;\n    formatNumber(value) {\n        let numberOfDecimals = this.numberOfDecimals(value);\n        return this.internationalization.getNumberFormat({\n            maximumFractionDigits: numberOfDecimals,\n            minimumFractionDigits: numberOfDecimals, useGrouping: false\n        })(value);\n    }\n    ;\n    numberOfDecimals(value) {\n        let decimalPart = value.toString().split('.')[1];\n        let numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;\n        return numberOfDecimals;\n    }\n    makeRoundNumber(value, precision) {\n        let decimals = precision || 0;\n        return Number(value.toFixed(decimals));\n    }\n    ;\n    fractionalToInteger(value) {\n        value = (this.numberOfDecimals(value) === 0) ? Number(value).toFixed(this.noOfDecimals) : value;\n        let tens = 1;\n        for (let i = 0; i < this.noOfDecimals; i++) {\n            tens *= 10;\n        }\n        value = Number((value * tens).toFixed(0));\n        return value;\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        if (!isBlazor() || !this.isServerRendered) {\n            this.initialize();\n        }\n        this.initRender();\n        this.wireEvents();\n        this.setZindex();\n        this.renderComplete();\n    }\n    initialize() {\n        addClass([this.element], classNames.root);\n        this.setCSSClass();\n    }\n    setElementWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.sliderContainer.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                this.sliderContainer.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n            }\n        }\n    }\n    setCSSClass(oldCSSClass) {\n        if (oldCSSClass) {\n            removeClass([this.element], oldCSSClass.split(' '));\n        }\n        if (this.cssClass) {\n            addClass([this.element], this.cssClass.split(' '));\n        }\n    }\n    setEnabled() {\n        if (!this.enabled) {\n            addClass([this.sliderContainer], [classNames.sliderDisabled]);\n            if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {\n                this.tooltipElement.classList.add(classNames.sliderDisabled);\n            }\n            this.unwireEvents();\n        }\n        else {\n            removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n            if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {\n                this.tooltipElement.classList.remove(classNames.sliderDisabled);\n            }\n            this.wireEvents();\n        }\n    }\n    getTheme(container) {\n        let theme = window.getComputedStyle(container, ':after').getPropertyValue('content');\n        return theme.replace(/['\"]+/g, '');\n    }\n    /**\n     * Initialize the rendering\n     * @private\n     */\n    initRender() {\n        if (isBlazor() && this.isServerRendered) {\n            this.sliderContainer = this.element.parentElement;\n            this.sliderTrack = this.element.querySelector('.e-slider-track');\n            this.hiddenInput = this.element.parentElement.querySelector('.e-slider-input');\n        }\n        else {\n            this.sliderContainer = this.createElement('div', { className: classNames.sliderContainer + ' ' + classNames.controlWrapper });\n            this.element.parentNode.insertBefore(this.sliderContainer, this.element);\n            this.sliderContainer.appendChild(this.element);\n            this.sliderTrack = this.createElement('div', { className: classNames.sliderTrack });\n            this.element.appendChild(this.sliderTrack);\n        }\n        this.setElementWidth(this.width);\n        this.element.tabIndex = -1;\n        this.getThemeInitialization();\n        this.setHandler();\n        this.createRangeBar();\n        if (this.limits.enabled) {\n            this.createLimitBar();\n        }\n        if (!isBlazor() || !this.isServerRendered) {\n            this.setOrientClass();\n            this.hiddenInput = (this.createElement('input', {\n                attrs: {\n                    type: 'hidden', value: (isNullOrUndefined(this.value) ? this.min.toString() : this.value.toString()),\n                    name: this.element.getAttribute('name') || this.element.getAttribute('id') ||\n                        '_' + (Math.random() * 1000).toFixed(0) + 'slider', class: classNames.sliderHiddenInput\n                }\n            }));\n            this.hiddenInput.tabIndex = -1;\n            this.sliderContainer.appendChild(this.hiddenInput);\n        }\n        if (this.showButtons) {\n            this.setButtons();\n        }\n        this.setEnableRTL();\n        if (this.type === 'Range') {\n            this.rangeValueUpdate();\n        }\n        else {\n            this.value = isNullOrUndefined(this.value) ? parseFloat(formatUnit(this.min.toString())) : this.value;\n        }\n        this.previousVal = this.type !== 'Range' ? this.checkHandleValue(parseFloat(formatUnit(this.value.toString()))) :\n            [this.checkHandleValue(parseFloat(formatUnit(this.value[0].toString()))),\n                this.checkHandleValue(parseFloat(formatUnit(this.value[1].toString())))];\n        this.previousChanged = this.previousVal;\n        if (!isNullOrUndefined(this.element.hasAttribute('name'))) {\n            this.element.removeAttribute('name');\n        }\n        this.setValue();\n        if (this.limits.enabled) {\n            this.setLimitBar();\n        }\n        if (this.ticks.placement !== 'None') {\n            this.renderScale();\n        }\n        if (this.tooltip.isVisible) {\n            this.renderTooltip();\n        }\n        if (!isBlazor() || !this.isServerRendered) {\n            if (!this.enabled) {\n                addClass([this.sliderContainer], [classNames.sliderDisabled]);\n            }\n            else {\n                removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n            }\n            if (this.readonly) {\n                addClass([this.sliderContainer], [classNames.readonly]);\n            }\n            else {\n                removeClass([this.sliderContainer], [classNames.readonly]);\n            }\n        }\n    }\n    getThemeInitialization() {\n        this.isMaterial = this.getTheme(this.sliderContainer) === 'material'\n            || this.getTheme(this.sliderContainer) === 'material-dark';\n        this.isBootstrap = this.getTheme(this.sliderContainer) === 'bootstrap'\n            || this.getTheme(this.sliderContainer) === 'bootstrap-dark';\n        this.isBootstrap4 = this.getTheme(this.sliderContainer) === 'bootstrap4';\n        this.isMaterialTooltip = this.isMaterial && this.type !== 'Range' && this.tooltip.isVisible;\n    }\n    createRangeBar() {\n        if (this.type !== 'Default') {\n            this.rangeBar = (this.createElement('div', { attrs: { class: classNames.rangeBar } }));\n            this.element.appendChild(this.rangeBar);\n            if (this.drag && this.type === 'Range') {\n                if (this.orientation === 'Horizontal') {\n                    this.rangeBar.classList.add(classNames.dragHorizontal);\n                }\n                else {\n                    this.rangeBar.classList.add(classNames.dragVertical);\n                }\n            }\n        }\n    }\n    createLimitBar() {\n        if (isBlazor() && this.isServerRendered) {\n            this.limitBarFirst = this.element.querySelectorAll('.e-limits')[0];\n            if (this.type === 'Range') {\n                this.limitBarSecond = this.element.querySelectorAll('.e-limit-second')[0];\n            }\n        }\n        else {\n            let firstElementClassName = this.type !== 'Range' ? classNames.limitBarDefault :\n                classNames.limitBarFirst;\n            firstElementClassName += ' ' + classNames.limits;\n            this.limitBarFirst = (this.createElement('div', {\n                attrs: { class: firstElementClassName }\n            }));\n            this.element.appendChild(this.limitBarFirst);\n            if (this.type === 'Range') {\n                this.limitBarSecond = (this.createElement('div', {\n                    attrs: {\n                        class: classNames.limitBarSecond + ' ' + classNames.limits\n                    }\n                }));\n                this.element.appendChild(this.limitBarSecond);\n            }\n        }\n    }\n    setOrientClass() {\n        if (this.orientation !== 'Vertical') {\n            this.sliderContainer.classList.remove(classNames.verticalSlider);\n            this.sliderContainer.classList.add(classNames.horizontalSlider);\n            this.firstHandle.setAttribute('aria-orientation', 'horizontal');\n            if (this.type === 'Range') {\n                this.secondHandle.setAttribute('aria-orientation', 'horizontal');\n            }\n        }\n        else {\n            this.sliderContainer.classList.remove(classNames.horizontalSlider);\n            this.sliderContainer.classList.add(classNames.verticalSlider);\n            this.firstHandle.setAttribute('aria-orientation', 'vertical');\n            if (this.type === 'Range') {\n                this.secondHandle.setAttribute('aria-orientation', 'vertical');\n            }\n        }\n    }\n    setAriaAttributes(element) {\n        let min = this.min;\n        let max = this.max;\n        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n            min = this.customValues[0];\n            max = this.customValues[this.customValues.length - 1];\n        }\n        if (this.type !== 'Range') {\n            attributes(element, {\n                'aria-valuemin': min.toString(), 'aria-valuemax': max.toString()\n            });\n        }\n        else {\n            let range = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ?\n                [[min.toString(), (this.customValues[this.value[1]]).toString()],\n                    [(this.customValues[this.value[0]]).toString(), max.toString()]] :\n                [[min.toString(), this.value[1].toString()], [this.value[0].toString(), max.toString()]];\n            range.forEach((range, index) => {\n                let element = index === 0 ? this.firstHandle : this.secondHandle;\n                if (element) {\n                    attributes(element, {\n                        'aria-valuemin': range[0], 'aria-valuemax': range[1]\n                    });\n                }\n            });\n        }\n    }\n    createSecondHandle() {\n        if (isBlazor() && this.isServerRendered) {\n            this.secondHandle = this.element.querySelector('.e-handle-second');\n        }\n        else {\n            this.secondHandle = this.createElement('div', {\n                attrs: {\n                    class: classNames.sliderHandle, 'role': 'slider', tabIndex: '0'\n                }\n            });\n            this.secondHandle.classList.add(classNames.sliderSecondHandle);\n            this.element.appendChild(this.secondHandle);\n        }\n    }\n    createFirstHandle() {\n        if (isBlazor() && this.isServerRendered) {\n            this.firstHandle = this.element.querySelector('.e-handle-first');\n        }\n        else {\n            this.firstHandle = this.createElement('div', {\n                attrs: {\n                    class: classNames.sliderHandle, 'role': 'slider', tabIndex: '0'\n                }\n            });\n            this.firstHandle.classList.add(classNames.sliderFirstHandle);\n            this.element.appendChild(this.firstHandle);\n        }\n        if (this.isMaterialTooltip) {\n            this.materialHandle = this.createElement('div', {\n                attrs: {\n                    class: classNames.sliderHandle + ' ' +\n                        classNames.sliderMaterialHandle\n                }\n            });\n            this.element.appendChild(this.materialHandle);\n        }\n    }\n    wireFirstHandleEvt(destroy) {\n        if (!destroy) {\n            EventHandler.add(this.firstHandle, 'mousedown touchstart', this.handleFocus, this);\n            EventHandler.add(this.firstHandle, 'transitionend', this.transitionEnd, this);\n            EventHandler.add(this.firstHandle, 'mouseenter touchenter', this.handleOver, this);\n            EventHandler.add(this.firstHandle, 'mouseleave touchend', this.handleLeave, this);\n        }\n        else {\n            EventHandler.remove(this.firstHandle, 'mousedown touchstart', this.handleFocus);\n            EventHandler.remove(this.firstHandle, 'transitionend', this.transitionEnd);\n            EventHandler.remove(this.firstHandle, 'mouseenter touchenter', this.handleOver);\n            EventHandler.remove(this.firstHandle, 'mouseleave touchend', this.handleLeave);\n        }\n    }\n    wireSecondHandleEvt(destroy) {\n        if (!destroy) {\n            EventHandler.add(this.secondHandle, 'mousedown touchstart', this.handleFocus, this);\n            EventHandler.add(this.secondHandle, 'transitionend', this.transitionEnd, this);\n            EventHandler.add(this.secondHandle, 'mouseenter touchenter', this.handleOver, this);\n            EventHandler.add(this.secondHandle, 'mouseleave touchend', this.handleLeave, this);\n        }\n        else {\n            EventHandler.remove(this.secondHandle, 'mousedown touchstart', this.handleFocus);\n            EventHandler.remove(this.secondHandle, 'transitionend', this.transitionEnd);\n            EventHandler.remove(this.secondHandle, 'mouseenter touchenter', this.handleOver);\n            EventHandler.remove(this.secondHandle, 'mouseleave touchend', this.handleLeave);\n        }\n    }\n    handleStart() {\n        if (this.type !== 'Range') {\n            this.firstHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);\n            if (this.isMaterialTooltip) {\n                this.materialHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);\n                if (this.tooltipElement) {\n                    this.tooltipElement.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderTooltipStart);\n                }\n            }\n        }\n    }\n    transitionEnd(e) {\n        if (e.propertyName !== 'transform') {\n            this.handleStart();\n            this.getHandle().style.transition = 'none';\n            if (this.type !== 'Default') {\n                this.rangeBar.style.transition = 'none';\n            }\n            if (this.isMaterial && this.tooltip.isVisible && this.type === 'Default') {\n                this.tooltipElement.style.transition = this.transition.handle;\n            }\n            this.tooltipToggle(this.getHandle());\n            this.closeTooltip();\n        }\n    }\n    handleFocusOut() {\n        if (this.firstHandle.classList.contains(classNames.sliderHandleFocused)) {\n            this.firstHandle.classList.remove(classNames.sliderHandleFocused);\n        }\n        if (this.type === 'Range') {\n            if (this.secondHandle.classList.contains(classNames.sliderHandleFocused)) {\n                this.secondHandle.classList.remove(classNames.sliderHandleFocused);\n            }\n        }\n    }\n    handleFocus(e) {\n        this.focusSliderElement();\n        this.sliderBarClick(e);\n        if (e.currentTarget === this.firstHandle) {\n            this.firstHandle.classList.add(classNames.sliderHandleFocused);\n        }\n        else {\n            this.secondHandle.classList.add(classNames.sliderHandleFocused);\n        }\n        EventHandler.add(document, 'mousemove touchmove', this.sliderBarMove, this);\n        EventHandler.add(document, 'mouseup touchend', this.sliderBarUp, this);\n    }\n    handleOver(e) {\n        if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover') {\n            this.tooltipToggle(e.currentTarget);\n        }\n    }\n    handleLeave(e) {\n        if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover' &&\n            !e.currentTarget.classList.contains(classNames.sliderHandleFocused) &&\n            !e.currentTarget.classList.contains(classNames.sliderTabHandle)) {\n            this.closeTooltip();\n        }\n    }\n    setHandler() {\n        if (this.min > this.max) {\n            this.min = this.max;\n        }\n        this.createFirstHandle();\n        if (this.type === 'Range') {\n            this.createSecondHandle();\n        }\n    }\n    setEnableRTL() {\n        if (!isBlazor() || !this.isServerRendered) {\n            this.enableRtl && this.orientation !== 'Vertical' ? addClass([this.sliderContainer], classNames.rtl) :\n                removeClass([this.sliderContainer], classNames.rtl);\n            let preDir = (this.orientation !== 'Vertical') ? this.horDir : this.verDir;\n            if (this.enableRtl) {\n                this.horDir = 'right';\n                this.verDir = 'bottom';\n            }\n            else {\n                this.horDir = 'left';\n                this.verDir = 'bottom';\n            }\n            let currDir = (this.orientation !== 'Vertical') ? this.horDir : this.verDir;\n            if (preDir !== currDir) {\n                if (this.orientation === 'Horizontal') {\n                    setStyleAttribute(this.firstHandle, { 'right': '', 'left': 'auto' });\n                    if (this.type === 'Range') {\n                        setStyleAttribute(this.secondHandle, { 'top': '', 'left': 'auto' });\n                    }\n                }\n            }\n        }\n        this.setBarColor();\n    }\n    tooltipValue() {\n        let text;\n        let args = {\n            value: this.value,\n            text: ''\n        };\n        if (isBlazor() && this.isServerRendered) {\n            args.text = this.formatContent(this.tooltipFormatInfo, false);\n        }\n        else {\n            this.setTooltipContent();\n            args.text = text = this.tooltipObj.content;\n        }\n        this.trigger('tooltipChange', args, (observedArgs) => {\n            this.addTooltipClass(observedArgs.text);\n            if (text !== observedArgs.text) {\n                this.customAriaText = observedArgs.text;\n                this.tooltipObj.content = observedArgs.text;\n                this.setAriaAttrValue(this.firstHandle);\n                if (this.type === 'Range') {\n                    this.setAriaAttrValue(this.secondHandle);\n                }\n            }\n        });\n    }\n    setTooltipContent() {\n        let content;\n        content = this.formatContent(this.tooltipFormatInfo, false);\n        this.tooltipObj.content = content;\n    }\n    formatContent(formatInfo, ariaContent) {\n        let content = '';\n        let handle1 = this.handleVal1;\n        let handle2 = this.handleVal2;\n        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n            handle1 = this.customValues[this.handleVal1];\n            handle2 = this.customValues[this.handleVal2];\n        }\n        if (!ariaContent) {\n            if (this.type === 'Range') {\n                if (this.enableRtl && this.orientation !== 'Vertical') {\n                    content = (!isNullOrUndefined(formatInfo.format)) ? (this.formatString(handle2, formatInfo)\n                        .formatString + ' - ' + this.formatString(handle1, formatInfo).formatString) :\n                        (handle2.toString() + ' - ' + handle1.toString());\n                }\n                else {\n                    content = (!isNullOrUndefined(formatInfo.format)) ? (this.formatString(handle1, formatInfo)\n                        .formatString + ' - ' + this.formatString(handle2, formatInfo).formatString) :\n                        (handle1.toString() + ' - ' + handle2.toString());\n                }\n            }\n            else {\n                if (!isNullOrUndefined(handle1)) {\n                    content = (!isNullOrUndefined(formatInfo.format)) ?\n                        this.formatString(handle1, formatInfo).formatString : handle1.toString();\n                }\n            }\n            return content;\n        }\n        else {\n            if (this.type === 'Range') {\n                if (this.enableRtl && this.orientation !== 'Vertical') {\n                    content = (!isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format)) ?\n                        (this.formatString(handle2, formatInfo).elementVal + ' - ' +\n                            this.formatString(handle1, formatInfo).elementVal) :\n                        (handle2.toString() + ' - ' + handle1.toString());\n                }\n                else {\n                    content = (!isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format)) ?\n                        (this.formatString(handle1, formatInfo).elementVal + ' - ' +\n                            this.formatString(handle2, formatInfo).elementVal) :\n                        (handle1.toString() + ' - ' + handle2.toString());\n                }\n            }\n            else {\n                if (!isNullOrUndefined(handle1)) {\n                    content = (!isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format)) ?\n                        this.formatString(handle1, formatInfo).elementVal : handle1.toString();\n                }\n            }\n            return content;\n        }\n    }\n    addTooltipClass(content) {\n        if (this.isMaterialTooltip) {\n            let count = content.toString().length;\n            if (!this.tooltipElement) {\n                let cssClass = count > 4 ? classNames.sliderMaterialRange : classNames.sliderMaterialDefault;\n                this.tooltipObj.cssClass = classNames.sliderTooltip + ' ' + cssClass;\n            }\n            else {\n                let cssClass = count > 4 ?\n                    { oldCss: classNames.sliderMaterialDefault, newCss: classNames.sliderMaterialRange } :\n                    { oldCss: classNames.sliderMaterialRange, newCss: classNames.sliderMaterialDefault };\n                this.tooltipElement.classList.remove(cssClass.oldCss);\n                if (!this.tooltipElement.classList.contains(cssClass.newCss)) {\n                    this.tooltipElement.classList.add(cssClass.newCss);\n                    this.tooltipElement.style.transform = count > 4 ? 'scale(1)' :\n                        this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n                }\n            }\n        }\n    }\n    tooltipPlacement() {\n        return this.orientation === 'Horizontal' ? (this.tooltip.placement === 'Before' ? 'TopCenter' : 'BottomCenter') :\n            (this.tooltip.placement === 'Before' ? 'LeftCenter' : 'RightCenter');\n    }\n    tooltipBeforeOpen(args) {\n        this.tooltipElement = args.element;\n        if (this.tooltip.cssClass) {\n            addClass([this.tooltipElement], this.tooltip.cssClass.split(' ').filter((css) => css));\n        }\n        args.target.removeAttribute('aria-describedby');\n        if (this.isMaterialTooltip) {\n            this.tooltipElement.firstElementChild.classList.add(classNames.materialTooltipHide);\n            this.handleStart();\n            this.setTooltipTransform();\n        }\n    }\n    tooltipCollision(position) {\n        if (this.isBootstrap || this.isBootstrap4 || (this.isMaterial && !this.isMaterialTooltip)) {\n            const tooltipOffsetValue = this.isBootstrap4 ? bootstrap4TooltipOffset : bootstrapTooltipOffset;\n            switch (position) {\n                case 'TopCenter':\n                    this.tooltipObj.setProperties({ 'offsetY': -(tooltipOffsetValue) }, false);\n                    break;\n                case 'BottomCenter':\n                    this.tooltipObj.setProperties({ 'offsetY': tooltipOffsetValue }, false);\n                    break;\n                case 'LeftCenter':\n                    this.tooltipObj.setProperties({ 'offsetX': -(tooltipOffsetValue) }, false);\n                    break;\n                case 'RightCenter':\n                    this.tooltipObj.setProperties({ 'offsetX': tooltipOffsetValue }, false);\n                    break;\n            }\n        }\n    }\n    materialTooltipEventCallBack(event) {\n        this.sliderBarClick(event);\n        EventHandler.add(document, 'mousemove touchmove', this.sliderBarMove, this);\n        EventHandler.add(document, 'mouseup touchend', this.sliderBarUp, this);\n    }\n    wireMaterialTooltipEvent(destroy) {\n        if (this.isMaterialTooltip) {\n            if (!destroy) {\n                EventHandler.add(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack, this);\n            }\n            else {\n                EventHandler.remove(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack);\n            }\n        }\n    }\n    tooltipPositionCalculation(position) {\n        let cssClass;\n        switch (position) {\n            case 'TopCenter':\n                cssClass = classNames.horizontalTooltipBefore;\n                break;\n            case 'BottomCenter':\n                cssClass = classNames.horizontalTooltipAfter;\n                break;\n            case 'LeftCenter':\n                cssClass = classNames.verticalTooltipBefore;\n                break;\n            case 'RightCenter':\n                cssClass = classNames.verticalTooltipAfter;\n                break;\n        }\n        return cssClass;\n    }\n    getTooltipTransformProperties(className) {\n        let transformProperties;\n        if (this.tooltipElement) {\n            let position = this.orientation === 'Horizontal' ?\n                ((this.tooltipElement.clientHeight + 14) - (this.tooltipElement.clientHeight / 2)) :\n                ((this.tooltipElement.clientWidth + 14) - (this.tooltipElement.clientWidth / 2));\n            transformProperties = this.orientation === 'Horizontal' ?\n                (className === classNames.horizontalTooltipBefore ? { rotate: 'rotate(45deg)', translate: `translateY(${position}px)` } :\n                    { rotate: 'rotate(225deg)', translate: `translateY(${-(position)}px)` }) :\n                (className === classNames.verticalTooltipBefore ? { rotate: 'rotate(-45deg)', translate: `translateX(${position}px)` } :\n                    { rotate: 'rotate(-225deg)', translate: `translateX(${(-position)}px)` });\n        }\n        return transformProperties;\n    }\n    openMaterialTooltip() {\n        if (this.isMaterialTooltip) {\n            this.refreshTooltip(this.firstHandle);\n            let tooltipContentElement = this.tooltipElement.firstElementChild;\n            tooltipContentElement.classList.remove(classNames.materialTooltipHide);\n            tooltipContentElement.classList.add(classNames.materialTooltipShow);\n            this.firstHandle.style.cursor = 'default';\n            this.tooltipElement.style.transition = this.scaleTransform;\n            this.tooltipElement.classList.add(classNames.materialTooltipOpen);\n            this.materialHandle.style.transform = 'scale(0)';\n            if (tooltipContentElement.innerText.length > 4) {\n                this.tooltipElement.style.transform = 'scale(1)';\n            }\n            else {\n                this.tooltipElement.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n            }\n            if (this.type === 'Default') {\n                setTimeout(() => { this.tooltipElement.style.transition = this.transition.handle; }, 2500);\n            }\n            else {\n                setTimeout(() => { this.tooltipElement.style.transition = 'none'; }, 2500);\n            }\n        }\n    }\n    closeMaterialTooltip() {\n        if (this.isMaterialTooltip) {\n            let tooltipContentElement = this.tooltipElement.firstElementChild;\n            this.tooltipElement.style.transition = this.scaleTransform;\n            tooltipContentElement.classList.remove(classNames.materialTooltipShow);\n            tooltipContentElement.classList.add(classNames.materialTooltipHide);\n            this.firstHandle.style.cursor = '-webkit-grab';\n            this.firstHandle.style.cursor = 'grab';\n            if (this.materialHandle) {\n                this.materialHandle.style.transform = 'scale(1)';\n            }\n            this.tooltipElement.classList.remove(classNames.materialTooltipOpen);\n            this.setTooltipTransform();\n            this.tooltipTarget = undefined;\n            setTimeout(() => { this.tooltipElement.style.transition = 'none'; }, 2500);\n        }\n    }\n    checkTooltipPosition(args) {\n        if (this.tooltipCollidedPosition === undefined ||\n            this.tooltipCollidedPosition !== args.collidedPosition) {\n            if (this.isMaterialTooltip) {\n                let tooltipClass = this.tooltipPositionCalculation(args.collidedPosition);\n                if (tooltipClass !== undefined) {\n                    args.element.classList.remove(this.previousTooltipClass);\n                    args.element.classList.add(tooltipClass);\n                    this.previousTooltipClass = tooltipClass;\n                }\n                if (args.element.style.transform && args.element.classList.contains(classNames.materialTooltipOpen) &&\n                    args.element.firstElementChild.innerText.length <= 4) {\n                    args.element.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n                }\n            }\n            this.tooltipCollidedPosition = args.collidedPosition;\n        }\n        if (this.isMaterialTooltip && this.tooltipElement && this.tooltipElement.style.transform.indexOf('translate') !== -1) {\n            this.setTooltipTransform();\n        }\n    }\n    setTooltipTransform() {\n        let transformProperties = this.getTooltipTransformProperties(this.previousTooltipClass);\n        if (this.tooltipElement.firstElementChild.innerText.length > 4) {\n            this.tooltipElement.style.transform = `${transformProperties.translate} scale(0.01)`;\n        }\n        else {\n            this.tooltipElement.style.transform = `${transformProperties.translate} ${transformProperties.rotate} scale(0.01)`;\n        }\n    }\n    renderTooltip() {\n        this.tooltipObj = new Tooltip({\n            showTipPointer: this.isBootstrap || this.isMaterial || this.isBootstrap4,\n            cssClass: classNames.sliderTooltip,\n            height: this.isMaterial ? 30 : 'auto',\n            animation: { open: { effect: 'None' }, close: { effect: 'FadeOut', duration: 500 } },\n            opensOn: 'Custom',\n            beforeOpen: this.tooltipBeforeOpen.bind(this),\n            beforeCollision: this.checkTooltipPosition.bind(this),\n            beforeClose: this.tooltipBeforeClose.bind(this),\n            enableHtmlSanitizer: this.enableHtmlSanitizer\n        });\n        this.tooltipObj.appendTo(this.firstHandle);\n        this.initializeTooltipProps();\n    }\n    initializeTooltipProps() {\n        let tooltipShowOn = this.isMaterialTooltip ? 'Always' : (this.tooltip.showOn === 'Auto' ? 'Hover' : this.tooltip.showOn);\n        this.setProperties({ tooltip: { showOn: tooltipShowOn } }, true);\n        this.tooltipObj.position = this.tooltipPlacement();\n        this.tooltipCollision(this.tooltipObj.position);\n        [this.firstHandle, this.rangeBar, this.secondHandle].forEach((handle) => {\n            if (!isNullOrUndefined(handle)) {\n                handle.style.transition = 'none';\n            }\n        });\n        if (this.isMaterialTooltip) {\n            this.sliderContainer.classList.add(classNames.materialSlider);\n            if (!isBlazor()) {\n                this.tooltipValue();\n            }\n            this.tooltipObj.animation.close.effect = 'None';\n            this.tooltipObj.open(this.firstHandle);\n        }\n    }\n    tooltipBeforeClose() {\n        this.tooltipElement = undefined;\n        this.tooltipCollidedPosition = undefined;\n    }\n    setButtons() {\n        if (isBlazor() && this.isServerRendered) {\n            this.firstBtn = this.element.parentElement.querySelector('.e-slider-button.e-first-button');\n            this.secondBtn = this.element.parentElement.querySelector('.e-slider-button.e-second-button');\n        }\n        else {\n            this.firstBtn = this.createElement('div', { className: classNames.sliderButton + ' ' + classNames.firstButton });\n            this.firstBtn.appendChild(this.createElement('span', { className: classNames.sliderButtonIcon }));\n            this.firstBtn.tabIndex = -1;\n            this.secondBtn = this.createElement('div', { className: classNames.sliderButton + ' ' + classNames.secondButton });\n            this.secondBtn.appendChild(this.createElement('span', { className: classNames.sliderButtonIcon }));\n            this.secondBtn.tabIndex = -1;\n            this.sliderContainer.classList.add(classNames.sliderButtonClass);\n            this.sliderContainer.appendChild(this.firstBtn);\n            this.sliderContainer.appendChild(this.secondBtn);\n            this.sliderContainer.appendChild(this.element);\n            this.buttonTitle();\n        }\n    }\n    buttonTitle() {\n        let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n        this.l10n.setLocale(this.locale);\n        let decrementTitle = this.l10n.getConstant('decrementTitle');\n        let incrementTitle = this.l10n.getConstant('incrementTitle');\n        attributes(enabledRTL ? this.secondBtn : this.firstBtn, { 'aria-label': decrementTitle, title: decrementTitle });\n        attributes(enabledRTL ? this.firstBtn : this.secondBtn, { 'aria-label': incrementTitle, title: incrementTitle });\n    }\n    buttonFocusOut() {\n        if (this.isMaterial) {\n            this.getHandle().classList.remove('e-large-thumb-size');\n        }\n    }\n    repeatButton(args) {\n        let hVal = this.handleValueUpdate();\n        let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n        let value;\n        if (args.target.parentElement.classList.contains(classNames.firstButton)\n            || args.target.classList.contains(classNames.firstButton)) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.step.toString()), true)) :\n                (value = this.add(hVal, parseFloat(this.step.toString()), false));\n        }\n        else if (args.target.parentElement.classList.contains(classNames.secondButton)\n            || (args.target.classList.contains(classNames.secondButton))) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.step.toString()), false)) :\n                (value = this.add(hVal, parseFloat(this.step.toString()), true));\n        }\n        if (this.limits.enabled) {\n            value = this.getLimitCorrectedValues(value);\n        }\n        if (value >= this.min && value <= this.max) {\n            this.changeHandleValue(value);\n            this.tooltipToggle(this.getHandle());\n        }\n    }\n    repeatHandlerMouse(args) {\n        args.preventDefault();\n        if (args.type === ('mousedown') || args.type === ('touchstart')) {\n            this.buttonClick(args);\n            this.repeatInterval = setInterval(this.repeatButton.bind(this), 180, args);\n        }\n    }\n    materialChange() {\n        if (!this.getHandle().classList.contains('e-large-thumb-size')) {\n            this.getHandle().classList.add('e-large-thumb-size');\n        }\n    }\n    repeatHandlerUp(e) {\n        this.changeEvent('changed', e);\n        this.closeTooltip();\n        clearInterval(this.repeatInterval);\n        this.getHandle().focus();\n    }\n    customTickCounter(bigNum) {\n        let tickCount = 4;\n        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n            if (bigNum > 4) {\n                tickCount = 3;\n            }\n            if (bigNum > 7) {\n                tickCount = 2;\n            }\n            if (bigNum > 14) {\n                tickCount = 1;\n            }\n            if (bigNum > 28) {\n                tickCount = 0;\n            }\n        }\n        return tickCount;\n    }\n    // tslint:disable-next-line:max-func-body-length\n    renderScale() {\n        let liElementPosition = 0;\n        let orien = this.orientation === 'Vertical' ? 'v' : 'h';\n        this.noOfDecimals = this.numberOfDecimals(this.step);\n        if (isBlazor() && this.isServerRendered) {\n            this.ul = this.element.querySelector('ul');\n        }\n        else {\n            this.ul = this.createElement('ul', {\n                className: classNames.scale + ' ' + 'e-' + orien + '-scale ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),\n                attrs: { role: 'presentation', tabIndex: '-1', 'aria-hidden': 'true' }\n            });\n        }\n        this.ul.style.zIndex = '-1';\n        if (Browser.isAndroid && orien === 'h') {\n            this.ul.classList.add(classNames.sliderTickPosition);\n        }\n        let smallStep = this.ticks.smallStep;\n        if (!this.ticks.showSmallTicks) {\n            this.ticks.largeStep > 0 ? (smallStep = this.ticks.largeStep) :\n                (smallStep = (parseFloat(formatUnit(this.max))) - (parseFloat(formatUnit(this.min))));\n        }\n        else if (smallStep <= 0) {\n            smallStep = parseFloat(formatUnit(this.step));\n        }\n        let min = this.fractionalToInteger(this.min);\n        let max = this.fractionalToInteger(this.max);\n        let steps = this.fractionalToInteger(smallStep);\n        let bigNum = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 && this.customValues.length - 1;\n        let customStep = this.customTickCounter(bigNum);\n        let count = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ?\n            (bigNum * customStep) + bigNum : Math.abs((max - min) / steps);\n        if (!isBlazor() || !this.isServerRendered) {\n            this.element.appendChild(this.ul);\n        }\n        let li;\n        let start = parseFloat(this.min.toString());\n        if (orien === 'v') {\n            start = parseFloat(this.max.toString());\n        }\n        let left = 0;\n        let islargeTick;\n        let tickWidth = 100 / count;\n        if (tickWidth === Infinity) {\n            tickWidth = 5;\n        }\n        for (let i = 0, y = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ?\n            this.customValues.length - 1 : 0, k = 0; i <= count; i++) {\n            li = (this.createElement('li', {\n                attrs: {\n                    class: classNames.tick, role: 'presentation', tabIndex: '-1',\n                    'aria-hidden': 'true'\n                }\n            }));\n            if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n                islargeTick = i % (customStep + 1) === 0;\n                if (islargeTick) {\n                    if (orien === 'h') {\n                        start = this.customValues[k];\n                        k++;\n                    }\n                    else {\n                        start = this.customValues[y];\n                        y--;\n                    }\n                    li.setAttribute('title', start.toString());\n                }\n            }\n            else {\n                li.setAttribute('title', start.toString());\n                if (this.numberOfDecimals(this.max) === 0 && this.numberOfDecimals(this.min) === 0 &&\n                    this.numberOfDecimals(this.step) === 0) {\n                    if (orien === 'h') {\n                        islargeTick = ((start - parseFloat(this.min.toString())) % this.ticks.largeStep === 0) ? true : false;\n                    }\n                    else {\n                        islargeTick = (Math.abs(start - parseFloat(this.max.toString())) % this.ticks.largeStep === 0) ? true : false;\n                    }\n                }\n                else {\n                    let largestep = this.fractionalToInteger(this.ticks.largeStep);\n                    let startValue = this.fractionalToInteger(start);\n                    if (orien === 'h') {\n                        islargeTick = ((startValue - min) % largestep === 0) ? true : false;\n                    }\n                    else {\n                        islargeTick = (Math.abs(startValue - parseFloat(max.toString())) % largestep === 0) ? true : false;\n                    }\n                }\n            }\n            if (islargeTick) {\n                li.classList.add(classNames.large);\n            }\n            (orien === 'h') ? (li.style.width = tickWidth + '%') : (li.style.height = tickWidth + '%');\n            let repeat = islargeTick ? (this.ticks.placement === 'Both' ? 2 : 1) : 0;\n            if (islargeTick) {\n                for (let j = 0; j < repeat; j++) {\n                    this.createTick(li, start, tickWidth);\n                }\n                if (isBlazor() && this.isServerRendered && isNullOrUndefined(this.customValues)) {\n                    this.updateTicksValues(start, this.ul.children[liElementPosition]);\n                    liElementPosition++;\n                }\n            }\n            else if (isNullOrUndefined(this.customValues)) {\n                this.formatTicksValue(li, start);\n                if (isBlazor() && this.isServerRendered && isNullOrUndefined(this.customValues)) {\n                    this.updateTicksValues(start, this.ul.children[liElementPosition]);\n                    liElementPosition++;\n                }\n            }\n            if (!isBlazor() || !this.isServerRendered) {\n                this.ul.appendChild(li);\n            }\n            this.tickElementCollection.push(li);\n            let decimalPoints;\n            if (isNullOrUndefined(this.customValues)) {\n                if (this.numberOfDecimals(smallStep) > this.numberOfDecimals(start)) {\n                    decimalPoints = this.numberOfDecimals(smallStep);\n                }\n                else {\n                    decimalPoints = this.numberOfDecimals(start);\n                }\n                if (orien === 'h') {\n                    start = this.makeRoundNumber(start + smallStep, decimalPoints);\n                }\n                else {\n                    start = this.makeRoundNumber(start - smallStep, decimalPoints);\n                }\n                left = this.makeRoundNumber(left + smallStep, decimalPoints);\n            }\n        }\n        this.ticksAlignment(orien, tickWidth);\n    }\n    updateTicksValues(start, liElement) {\n        if (liElement.childElementCount > 0) {\n            for (let i = 0; i < liElement.childElementCount; i++) {\n                this.blazortTicksValue(liElement, start, liElement.children[i]);\n            }\n        }\n        else {\n            this.blazortTicksValue(liElement, start, null);\n        }\n    }\n    blazortTicksValue(li, start, span) {\n        const tickText = this.formatNumber(start);\n        const text = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ?\n            this.formatString(start, this.ticksFormatInfo).formatString : tickText;\n        let eventArgs = { value: start, text: text, tickElement: li };\n        this.trigger('renderingTicks', eventArgs, (observedArgs) => {\n            li.setAttribute('title', observedArgs.text.toString());\n            if (span) {\n                if (this.enableHtmlSanitizer) {\n                    span.innerHTML = SanitizeHtmlHelper.sanitize(observedArgs.text.toString());\n                }\n                else {\n                    span.innerHTML = observedArgs.text.toString();\n                }\n            }\n        });\n    }\n    ticksAlignment(orien, tickWidth, triggerEvent = true) {\n        this.firstChild = this.ul.firstElementChild;\n        this.lastChild = this.ul.lastElementChild;\n        this.firstChild.classList.add(classNames.sliderFirstTick);\n        this.lastChild.classList.add(classNames.sliderLastTick);\n        this.sliderContainer.classList.add(classNames.scale + '-' + this.ticks.placement.toLowerCase());\n        if (orien === 'h') {\n            this.firstChild.style.width = tickWidth / 2 + '%';\n            this.lastChild.style.width = tickWidth / 2 + '%';\n        }\n        else {\n            this.firstChild.style.height = tickWidth / 2 + '%';\n            this.lastChild.style.height = tickWidth / 2 + '%';\n        }\n        let eventArgs = { ticksWrapper: this.ul, tickElements: this.tickElementCollection };\n        if (triggerEvent) {\n            this.trigger('renderedTicks', eventArgs);\n        }\n        this.scaleAlignment();\n    }\n    createTick(li, start, tickWidth) {\n        let span = this.createElement('span', {\n            className: classNames.tickValue + ' ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),\n            attrs: { role: 'presentation', tabIndex: '-1', 'aria-hidden': 'true' }\n        });\n        li.appendChild(span);\n        if (isNullOrUndefined(this.customValues)) {\n            this.formatTicksValue(li, start, span, tickWidth);\n        }\n        else {\n            if (this.enableHtmlSanitizer) {\n                span.innerHTML = SanitizeHtmlHelper.sanitize(start.toString());\n            }\n            else {\n                span.innerHTML = start.toString();\n            }\n        }\n    }\n    formatTicksValue(li, start, spanElement, tickWidth) {\n        const tickText = this.formatNumber(start);\n        const text = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ?\n            this.formatString(start, this.ticksFormatInfo).formatString : tickText;\n        const eventArgs = { value: start, text: text, tickElement: li };\n        this.trigger('renderingTicks', eventArgs, (observedArgs) => {\n            li.setAttribute('title', observedArgs.text.toString());\n            if (spanElement) {\n                if (this.enableHtmlSanitizer) {\n                    spanElement.innerHTML = SanitizeHtmlHelper.sanitize(observedArgs.text.toString());\n                }\n                else {\n                    spanElement.innerHTML = observedArgs.text.toString();\n                }\n            }\n            if (!isNullOrUndefined(this.renderingTicks) && isBlazor()) {\n                const orien = this.orientation === 'Horizontal' ? 'h' : 'v';\n                this.ticksAlignment(orien, tickWidth, false);\n            }\n        });\n    }\n    scaleAlignment() {\n        this.tickValuePosition();\n        let orien = this.orientation === 'Vertical' ? 'v' : 'h';\n        if (this.orientation === 'Vertical') {\n            (this.element.getBoundingClientRect().width <= 15) ?\n                this.sliderContainer.classList.add(classNames.sliderSmallSize) :\n                this.sliderContainer.classList.remove(classNames.sliderSmallSize);\n        }\n        else {\n            (this.element.getBoundingClientRect().height <= 15) ?\n                this.sliderContainer.classList.add(classNames.sliderSmallSize) :\n                this.sliderContainer.classList.remove(classNames.sliderSmallSize);\n        }\n    }\n    tickValuePosition() {\n        this.firstChild = this.element.querySelector('ul').children[0];\n        let first = this.firstChild.getBoundingClientRect();\n        let firstChild;\n        let otherChild;\n        let smallStep = this.ticks.smallStep;\n        let count = Math.abs((parseFloat(formatUnit(this.max))) - (parseFloat(formatUnit(this.min)))) / smallStep;\n        if (this.firstChild.children.length > 0) {\n            firstChild = this.firstChild.children[0].getBoundingClientRect();\n        }\n        let tickElements = [this.sliderContainer.querySelectorAll('.' + classNames.tick + '.' +\n                classNames.large + ' .' + classNames.tickValue)];\n        let other;\n        if (this.ticks.placement === 'Both') {\n            other = [].slice.call(tickElements[0], 2);\n        }\n        else {\n            other = [].slice.call(tickElements[0], 1);\n        }\n        let tickWidth = this.orientation === 'Vertical' ?\n            (first.height * 2) : (first.width * 2);\n        for (let i = 0; i < this.firstChild.children.length; i++) {\n            if (this.orientation === 'Vertical') {\n                if (!isBlazor() || !this.isServerRendered) {\n                    this.firstChild.children[i].style.top = -(firstChild.height / 2) + 'px';\n                }\n            }\n            else {\n                if (!this.enableRtl) {\n                    this.firstChild.children[i].style.left = -(firstChild.width / 2) + 'px';\n                }\n                else {\n                    this.firstChild.children[i].style.left = (tickWidth -\n                        this.firstChild.children[i].getBoundingClientRect().width) / 2 + 'px';\n                }\n            }\n        }\n        for (let i = 0; i < other.length; i++) {\n            otherChild = other[i].getBoundingClientRect();\n            if (this.orientation === 'Vertical') {\n                if (!isBlazor() || !this.isServerRendered) {\n                    setStyleAttribute(other[i], { top: (tickWidth - otherChild.height) / 2 + 'px' });\n                }\n            }\n            else {\n                setStyleAttribute(other[i], { left: (tickWidth - otherChild.width) / 2 + 'px' });\n            }\n        }\n        if (this.enableRtl && this.lastChild.children.length && count !== 0) {\n            this.lastChild.children[0].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';\n            if (this.ticks.placement === 'Both') {\n                if (!isBlazor()) {\n                    this.lastChild.children[1].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';\n                }\n            }\n        }\n        if (count === 0) {\n            if (this.orientation === 'Horizontal') {\n                if (!this.enableRtl) {\n                    this.firstChild.classList.remove(classNames.sliderLastTick);\n                    if (!isBlazor()) {\n                        this.firstChild.style.left = this.firstHandle.style.left;\n                    }\n                }\n                else {\n                    this.firstChild.classList.remove(classNames.sliderLastTick);\n                    this.firstChild.style.right = this.firstHandle.style.right;\n                    if (!isBlazor()) {\n                        this.firstChild.children[0].style.left =\n                            (this.firstChild.getBoundingClientRect().width / 2) + 2 + 'px';\n                        if (this.ticks.placement === 'Both') {\n                            this.firstChild.children[1].style.left =\n                                (this.firstChild.getBoundingClientRect().width / 2) + 2 + 'px';\n                        }\n                    }\n                }\n            }\n            if (!isBlazor() || !this.isServerRendered) {\n                if (this.orientation === 'Vertical') {\n                    this.firstChild.classList.remove(classNames.sliderLastTick);\n                }\n            }\n        }\n        if (isBlazor() && this.isServerRendered) {\n            let args;\n            if (this.firstChild != null) {\n                if (this.orientation === 'Horizontal') {\n                    args = { firstTickPostion: this.firstChild.children[0].style.left };\n                }\n                else {\n                    args = { firstTickPostion: -(firstChild.height / 2) + 'px' };\n                }\n            }\n            if (other[0] != null) {\n                if (this.orientation === 'Horizontal') {\n                    args = { otherTicksPosition: other[0].style.left };\n                }\n                else {\n                    args = { otherTicksPosition: (tickWidth - otherChild.height) / 2 + 'px' };\n                }\n            }\n            if (this.firstChild != null && other[0] != null) {\n                if (this.orientation === 'Horizontal') {\n                    args = {\n                        firstTickPostion: this.firstChild.children[0].style.left,\n                        otherTicksPosition: other[0].style.left\n                    };\n                }\n                else {\n                    args = {\n                        firstTickPostion: -(firstChild.height / 2) + 'px',\n                        otherTicksPosition: (tickWidth - otherChild.height) / 2 + 'px'\n                    };\n                }\n            }\n            // tslint:disable\n            this.interopAdaptor.invokeMethodAsync('SliderTicksData', args);\n            // tslint:enable\n        }\n    }\n    setAriaAttrValue(element) {\n        let ariaValueText;\n        let isTickFormatted = ((!isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format))) ? true : false;\n        let text = !isTickFormatted ?\n            this.formatContent(this.ticksFormatInfo, false) : this.formatContent(this.tooltipFormatInfo, false);\n        let valuenow = isTickFormatted ? this.formatContent(this.ticksFormatInfo, true) :\n            this.formatContent(this.tooltipFormatInfo, true);\n        text = (!this.customAriaText) ? (text) : (this.customAriaText);\n        if (text.split(' - ').length === 2) {\n            ariaValueText = text.split(' - ');\n        }\n        else {\n            ariaValueText = [text, text];\n        }\n        this.setAriaAttributes(element);\n        if (this.type !== 'Range') {\n            attributes(element, { 'aria-valuenow': valuenow, 'aria-valuetext': text });\n        }\n        else {\n            (!this.enableRtl) ? ((element === this.firstHandle) ?\n                attributes(element, { 'aria-valuenow': valuenow.split(' - ')[0], 'aria-valuetext': ariaValueText[0] }) :\n                attributes(element, { 'aria-valuenow': valuenow.split(' - ')[1], 'aria-valuetext': ariaValueText[1] })) :\n                ((element === this.firstHandle) ?\n                    attributes(element, { 'aria-valuenow': valuenow.split(' - ')[1], 'aria-valuetext': ariaValueText[1] }) :\n                    attributes(element, { 'aria-valuenow': valuenow.split(' - ')[0], 'aria-valuetext': ariaValueText[0] }));\n        }\n    }\n    handleValueUpdate() {\n        let hVal;\n        if (this.type === 'Range') {\n            if (this.activeHandle === 1) {\n                hVal = this.handleVal1;\n            }\n            else {\n                hVal = this.handleVal2;\n            }\n        }\n        else {\n            hVal = this.handleVal1;\n        }\n        return hVal;\n    }\n    getLimitCorrectedValues(value) {\n        if (this.type === 'MinRange' || this.type === 'Default') {\n            value = (this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd))[0];\n        }\n        else {\n            if (this.activeHandle === 1) {\n                value = (this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd))[0];\n            }\n            else {\n                value = (this.getLimitValueAndPosition(value, this.limits.maxStart, this.limits.maxEnd))[0];\n            }\n        }\n        return value;\n    }\n    focusSliderElement() {\n        if (!this.isElementFocused) {\n            this.element.focus();\n            this.isElementFocused = true;\n        }\n    }\n    buttonClick(args) {\n        this.focusSliderElement();\n        let value;\n        let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n        let hVal = this.handleValueUpdate();\n        if ((args.keyCode === 40) || (args.keyCode === 37)\n            || args.currentTarget.classList.contains(classNames.firstButton)) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.step.toString()), true)) :\n                (value = this.add(hVal, parseFloat(this.step.toString()), false));\n        }\n        else if ((args.keyCode === 38) || (args.keyCode === 39) ||\n            args.currentTarget.classList.contains(classNames.secondButton)) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.step.toString()), false)) :\n                (value = this.add(hVal, parseFloat(this.step.toString()), true));\n        }\n        else if ((args.keyCode === 33\n            || args.currentTarget.classList.contains(classNames.firstButton))) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false)) :\n                (value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true));\n        }\n        else if ((args.keyCode === 34) ||\n            args.currentTarget.classList.contains(classNames.secondButton)) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true)) :\n                (value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false));\n        }\n        else if ((args.keyCode === 36)) {\n            value = parseFloat(this.min.toString());\n        }\n        else if ((args.keyCode === 35)) {\n            value = parseFloat(this.max.toString());\n        }\n        if (this.limits.enabled) {\n            value = this.getLimitCorrectedValues(value);\n        }\n        this.changeHandleValue(value);\n        if (this.isMaterial && !this.tooltip.isVisible &&\n            !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n            this.materialChange();\n        }\n        this.tooltipToggle(this.getHandle());\n        this.getHandle().focus();\n        if (args.currentTarget.classList.contains(classNames.firstButton)) {\n            EventHandler.add(this.firstBtn, 'mouseup touchend', this.buttonUp, this);\n        }\n        if (args.currentTarget.classList.contains(classNames.secondButton)) {\n            EventHandler.add(this.secondBtn, 'mouseup touchend', this.buttonUp, this);\n        }\n    }\n    tooltipToggle(target) {\n        if (this.isMaterialTooltip) {\n            !this.tooltipElement.classList.contains(classNames.materialTooltipOpen) ?\n                this.openMaterialTooltip() : this.refreshTooltip(this.firstHandle);\n        }\n        else {\n            !this.tooltipElement ? this.openTooltip(target) : this.refreshTooltip(target);\n        }\n    }\n    buttonUp(args) {\n        if (args.currentTarget.classList.contains(classNames.firstButton)) {\n            EventHandler.remove(this.firstBtn, 'mouseup touchend', this.buttonUp);\n        }\n        if (args.currentTarget.classList.contains(classNames.secondButton)) {\n            EventHandler.remove(this.secondBtn, 'mouseup touchend', this.buttonUp);\n        }\n    }\n    setRangeBar() {\n        if (this.orientation === 'Horizontal') {\n            if (this.type === 'MinRange') {\n                this.enableRtl ? (this.rangeBar.style.right = '0px') : (this.rangeBar.style.left = '0px');\n                setStyleAttribute(this.rangeBar, { 'width': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px' });\n            }\n            else {\n                this.enableRtl ? (this.rangeBar.style.right =\n                    this.handlePos1 + 'px') : (this.rangeBar.style.left = this.handlePos1 + 'px');\n                setStyleAttribute(this.rangeBar, { 'width': this.handlePos2 - this.handlePos1 + 'px' });\n            }\n        }\n        else {\n            if (this.type === 'MinRange') {\n                this.rangeBar.style.bottom = '0px';\n                setStyleAttribute(this.rangeBar, { 'height': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px' });\n            }\n            else {\n                this.rangeBar.style.bottom = this.handlePos1 + 'px';\n                setStyleAttribute(this.rangeBar, { 'height': this.handlePos2 - this.handlePos1 + 'px' });\n            }\n        }\n    }\n    checkValidValueAndPos(value) {\n        value = this.checkHandleValue(value);\n        value = this.checkHandlePosition(value);\n        return value;\n    }\n    setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion) {\n        if (this.orientation === 'Horizontal') {\n            if (!this.enableRtl) {\n                this.limitBarFirst.style.left = fromMinPostion + 'px';\n                this.limitBarFirst.style.width = (fromMaxpostion - fromMinPostion) + 'px';\n            }\n            else {\n                this.limitBarFirst.style.right = fromMinPostion + 'px';\n                this.limitBarFirst.style.width = (fromMaxpostion - fromMinPostion) + 'px';\n            }\n        }\n        else {\n            this.limitBarFirst.style.bottom = fromMinPostion + 'px';\n            this.limitBarFirst.style.height = (fromMaxpostion - fromMinPostion) + 'px';\n        }\n        if (this.type === 'Range') {\n            if (this.orientation === 'Horizontal') {\n                if (!this.enableRtl) {\n                    this.limitBarSecond.style.left = toMinPostion + 'px';\n                    this.limitBarSecond.style.width = (toMaxpostion - toMinPostion) + 'px';\n                }\n                else {\n                    this.limitBarSecond.style.right = toMinPostion + 'px';\n                    this.limitBarSecond.style.width = (toMaxpostion - toMinPostion) + 'px';\n                }\n            }\n            else {\n                this.limitBarSecond.style.bottom = toMinPostion + 'px';\n                this.limitBarSecond.style.height = (toMaxpostion - toMinPostion) + 'px';\n            }\n        }\n    }\n    setLimitBar() {\n        if (this.type === 'Default' || this.type === 'MinRange') {\n            let fromPosition = (this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true))[0];\n            fromPosition = this.checkValidValueAndPos(fromPosition);\n            let toPosition = (this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true))[0];\n            toPosition = this.checkValidValueAndPos(toPosition);\n            this.setLimitBarPositions(fromPosition, toPosition);\n        }\n        else if (this.type === 'Range') {\n            let fromMinPostion = (this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true))[0];\n            fromMinPostion = this.checkValidValueAndPos(fromMinPostion);\n            let fromMaxpostion = (this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true))[0];\n            fromMaxpostion = this.checkValidValueAndPos(fromMaxpostion);\n            let toMinPostion = (this.getLimitValueAndPosition(this.limits.maxStart, this.limits.maxStart, this.limits.maxEnd, true))[0];\n            toMinPostion = this.checkValidValueAndPos(toMinPostion);\n            let toMaxpostion = (this.getLimitValueAndPosition(this.limits.maxEnd, this.limits.maxStart, this.limits.maxEnd, true))[0];\n            toMaxpostion = this.checkValidValueAndPos(toMaxpostion);\n            this.setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion);\n        }\n    }\n    getLimitValueAndPosition(currentValue, minValue, maxValue, limitBar) {\n        if (isNullOrUndefined(minValue)) {\n            minValue = this.min;\n            if (isNullOrUndefined(currentValue) && limitBar) {\n                currentValue = minValue;\n            }\n        }\n        if (isNullOrUndefined(maxValue)) {\n            maxValue = this.max;\n            if (isNullOrUndefined(currentValue) && limitBar) {\n                currentValue = maxValue;\n            }\n        }\n        if (currentValue < minValue) {\n            currentValue = minValue;\n        }\n        if (currentValue > maxValue) {\n            currentValue = maxValue;\n        }\n        return [currentValue, this.checkHandlePosition(currentValue)];\n    }\n    setValue() {\n        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n            this.min = 0;\n            this.max = this.customValues.length - 1;\n            this.setBarColor();\n        }\n        this.setAriaAttributes(this.firstHandle);\n        this.handleVal1 = isNullOrUndefined(this.value) ? this.checkHandleValue(parseFloat(this.min.toString())) :\n            this.checkHandleValue(parseFloat(this.value.toString()));\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n        this.preHandlePos1 = this.handlePos1;\n        isNullOrUndefined(this.activeHandle) ? (this.type === 'Range' ? this.activeHandle = 2 : this.activeHandle = 1) :\n            this.activeHandle = this.activeHandle;\n        if (this.type === 'Default' || this.type === 'MinRange') {\n            if (this.limits.enabled) {\n                let values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n                this.handleVal1 = values[0];\n                this.handlePos1 = values[1];\n                this.preHandlePos1 = this.handlePos1;\n            }\n            this.setHandlePosition(null);\n            this.handleStart();\n            this.value = this.handleVal1;\n            this.setAriaAttrValue(this.firstHandle);\n            this.changeEvent('changed', null);\n        }\n        else {\n            this.validateRangeValue();\n        }\n        if (this.type !== 'Default') {\n            this.setRangeBar();\n        }\n        if (this.limits.enabled) {\n            this.setLimitBar();\n        }\n    }\n    rangeValueUpdate() {\n        if (this.value === null || typeof (this.value) !== 'object') {\n            this.value = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];\n        }\n    }\n    validateRangeValue() {\n        this.rangeValueUpdate();\n        this.setRangeValue();\n    }\n    modifyZindex() {\n        if (this.type === 'Range') {\n            if (this.activeHandle === 1) {\n                this.firstHandle.style.zIndex = (this.zIndex + 4) + '';\n                this.secondHandle.style.zIndex = (this.zIndex + 3) + '';\n            }\n            else {\n                this.firstHandle.style.zIndex = (this.zIndex + 3) + '';\n                this.secondHandle.style.zIndex = (this.zIndex + 4) + '';\n            }\n        }\n        else if (this.isMaterialTooltip && this.tooltipElement) {\n            this.tooltipElement.style.zIndex = getZindexPartial(this.element) + '';\n        }\n    }\n    setHandlePosition(event) {\n        let handle;\n        let pos = (this.activeHandle === 1) ? this.handlePos1 : this.handlePos2;\n        if (this.isMaterialTooltip) {\n            handle = [this.firstHandle, this.materialHandle];\n        }\n        else {\n            handle = [this.getHandle()];\n        }\n        this.handleStart();\n        handle.forEach((handle) => {\n            if (this.orientation === 'Horizontal') {\n                this.enableRtl ? (handle.style.right =\n                    `${pos}px`) : (handle.style.left = `${pos}px`);\n            }\n            else {\n                handle.style.bottom = `${pos}px`;\n            }\n            if (isBlazor() && this.isServerRendered) {\n                handle.style.removeProperty('visibility');\n            }\n        });\n        this.changeEvent('change', event);\n    }\n    getHandle() {\n        return (this.activeHandle === 1) ? this.firstHandle : this.secondHandle;\n    }\n    setRangeValue() {\n        this.updateRangeValue();\n        this.activeHandle = 1;\n        this.setHandlePosition(null);\n        this.activeHandle = 2;\n        this.setHandlePosition(null);\n        this.activeHandle = 1;\n    }\n    changeEvent(eventName, e) {\n        let previous = eventName === 'change' ? this.previousVal : this.previousChanged;\n        if (this.type !== 'Range') {\n            this.setProperties({ 'value': this.handleVal1 }, true);\n            if (previous !== this.value) {\n                this.trigger(eventName, this.changeEventArgs(eventName, e));\n                this.setPreviousVal(eventName, this.value);\n            }\n            this.setAriaAttrValue(this.firstHandle);\n        }\n        else {\n            let value = this.value = [this.handleVal1, this.handleVal2];\n            this.setProperties({ 'value': value }, true);\n            if (previous.length === this.value.length\n                && this.value[0] !== previous[0] || this.value[1] !== previous[1]) {\n                this.trigger(eventName, this.changeEventArgs(eventName, e));\n                this.setPreviousVal(eventName, this.value);\n            }\n            this.setAriaAttrValue(this.getHandle());\n        }\n        this.hiddenInput.value = this.value.toString();\n    }\n    changeEventArgs(eventName, e) {\n        let eventArgs;\n        if (this.tooltip.isVisible && this.tooltipObj) {\n            if (!isBlazor() || !this.isServerRendered) {\n                this.tooltipValue();\n            }\n            eventArgs = {\n                value: this.value,\n                previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,\n                action: eventName, text: this.tooltipObj.content, isInteracted: isNullOrUndefined(e) ? false : true\n            };\n        }\n        else {\n            eventArgs = {\n                value: this.value,\n                previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,\n                action: eventName, text: isNullOrUndefined(this.ticksFormatInfo.format) ? this.value.toString() :\n                    (this.type !== 'Range' ? this.formatString(this.value, this.ticksFormatInfo).formatString :\n                        (this.formatString(this.value[0], this.ticksFormatInfo).formatString + ' - ' +\n                            this.formatString(this.value[1], this.ticksFormatInfo).formatString)),\n                isInteracted: isNullOrUndefined(e) ? false : true\n            };\n        }\n        return eventArgs;\n    }\n    setPreviousVal(eventName, value) {\n        if (eventName === 'change') {\n            this.previousVal = value;\n        }\n        else {\n            this.previousChanged = value;\n        }\n    }\n    updateRangeValue() {\n        let values = this.value.toString().split(',').map(Number);\n        if ((this.enableRtl && this.orientation !== 'Vertical') || this.rtl) {\n            this.value = [values[1], values[0]];\n        }\n        else {\n            this.value = [values[0], values[1]];\n        }\n        if (this.enableRtl && this.orientation !== 'Vertical') {\n            this.handleVal1 = this.checkHandleValue(this.value[1]);\n            this.handleVal2 = this.checkHandleValue(this.value[0]);\n        }\n        else {\n            this.handleVal1 = this.checkHandleValue(this.value[0]);\n            this.handleVal2 = this.checkHandleValue(this.value[1]);\n        }\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n        this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n        if (this.handlePos1 > this.handlePos2) {\n            this.handlePos1 = this.handlePos2;\n            this.handleVal1 = this.handleVal2;\n        }\n        this.preHandlePos1 = this.handlePos1;\n        this.preHandlePos2 = this.handlePos2;\n        if (this.limits.enabled) {\n            this.activeHandle = 1;\n            let values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n            this.handleVal1 = values[0];\n            this.handlePos1 = values[1];\n            this.preHandlePos1 = this.handlePos1;\n            this.activeHandle = 2;\n            values = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);\n            this.handleVal2 = values[0];\n            this.handlePos2 = values[1];\n            this.preHandlePos2 = this.handlePos2;\n        }\n    }\n    checkHandlePosition(value) {\n        let pos;\n        value = (100 *\n            (value - (parseFloat(formatUnit(this.min))))) / ((parseFloat(formatUnit(this.max))) - (parseFloat(formatUnit(this.min))));\n        if (this.orientation === 'Horizontal') {\n            pos = this.element.getBoundingClientRect().width * (value / 100);\n        }\n        else {\n            pos = this.element.getBoundingClientRect().height * (value / 100);\n        }\n        if (((parseFloat(formatUnit(this.max))) === (parseFloat(formatUnit(this.min))))) {\n            if (this.orientation === 'Horizontal') {\n                pos = this.element.getBoundingClientRect().width;\n            }\n            else {\n                pos = this.element.getBoundingClientRect().height;\n            }\n        }\n        return pos;\n    }\n    checkHandleValue(value) {\n        if (this.min > this.max) {\n            this.min = this.max;\n        }\n        if (this.min === this.max) {\n            return (parseFloat(formatUnit(this.max)));\n        }\n        let handle = this.tempStartEnd();\n        if (value < handle.start) {\n            value = handle.start;\n        }\n        else if (value > handle.end) {\n            value = handle.end;\n        }\n        return value;\n    }\n    /**\n     * It is used to reposition slider.\n     * @returns void\n     */\n    reposition() {\n        this.firstHandle.style.transition = 'none';\n        if (this.type !== 'Default') {\n            this.rangeBar.style.transition = 'none';\n        }\n        if (this.type === 'Range') {\n            this.secondHandle.style.transition = 'none';\n        }\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n        if (this.handleVal2) {\n            this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n        }\n        if (this.orientation === 'Horizontal') {\n            this.enableRtl ? this.firstHandle.style.right =\n                `${this.handlePos1}px` : this.firstHandle.style.left = `${this.handlePos1}px`;\n            if (this.isMaterialTooltip) {\n                this.enableRtl ? this.materialHandle.style.right =\n                    `${this.handlePos1}px` : this.materialHandle.style.left = `${this.handlePos1}px`;\n            }\n            if (this.type === 'MinRange') {\n                this.enableRtl ? (this.rangeBar.style.right = '0px') : (this.rangeBar.style.left = '0px');\n                setStyleAttribute(this.rangeBar, { 'width': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px' });\n            }\n            else if (this.type === 'Range') {\n                this.enableRtl ? this.secondHandle.style.right =\n                    `${this.handlePos2}px` : this.secondHandle.style.left = `${this.handlePos2}px`;\n                this.enableRtl ? (this.rangeBar.style.right =\n                    this.handlePos1 + 'px') : (this.rangeBar.style.left = this.handlePos1 + 'px');\n                setStyleAttribute(this.rangeBar, { 'width': this.handlePos2 - this.handlePos1 + 'px' });\n            }\n        }\n        else {\n            this.firstHandle.style.bottom = `${this.handlePos1}px`;\n            if (this.isMaterialTooltip) {\n                this.materialHandle.style.bottom = `${this.handlePos1}px`;\n            }\n            if (this.type === 'MinRange') {\n                this.rangeBar.style.bottom = '0px';\n                setStyleAttribute(this.rangeBar, { 'height': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px' });\n            }\n            else if (this.type === 'Range') {\n                this.secondHandle.style.bottom = `${this.handlePos2}px`;\n                this.rangeBar.style.bottom = this.handlePos1 + 'px';\n                setStyleAttribute(this.rangeBar, { 'height': this.handlePos2 - this.handlePos1 + 'px' });\n            }\n        }\n        if (this.limits.enabled) {\n            this.setLimitBar();\n        }\n        if (this.ticks.placement !== 'None' && this.ul) {\n            if (!isBlazor()) {\n                this.removeElement(this.ul);\n                this.ul = undefined;\n            }\n            this.renderScale();\n            if (isBlazor()) {\n                this.tickValuePosition();\n            }\n        }\n        this.handleStart();\n        if (!this.tooltip.isVisible) {\n            setTimeout(() => {\n                this.firstHandle.style.transition = this.scaleTransform;\n                if (this.type === 'Range') {\n                    this.secondHandle.style.transition = this.scaleTransform;\n                }\n            });\n        }\n        if (!isBlazor() || !this.isServerRendered) {\n            this.refreshTooltip(this.tooltipTarget);\n        }\n        this.setBarColor();\n    }\n    changeHandleValue(value) {\n        let position = null;\n        if (this.activeHandle === 1) {\n            if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n                this.handleVal1 = this.checkHandleValue(value);\n                this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n                if (this.type === 'Range' && this.handlePos1 > this.handlePos2) {\n                    this.handlePos1 = this.handlePos2;\n                    this.handleVal1 = this.handleVal2;\n                }\n                if (this.handlePos1 !== this.preHandlePos1) {\n                    position = this.preHandlePos1 = this.handlePos1;\n                }\n            }\n            this.modifyZindex();\n        }\n        else {\n            if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n                this.handleVal2 = this.checkHandleValue(value);\n                this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n                if (this.type === 'Range' && this.handlePos2 < this.handlePos1) {\n                    this.handlePos2 = this.handlePos1;\n                    this.handleVal2 = this.handleVal1;\n                }\n                if (this.handlePos2 !== this.preHandlePos2) {\n                    position = this.preHandlePos2 = this.handlePos2;\n                }\n            }\n            this.modifyZindex();\n        }\n        if (position !== null) {\n            if (this.type !== 'Default') {\n                this.setRangeBar();\n            }\n            this.setHandlePosition(null);\n        }\n    }\n    tempStartEnd() {\n        if (this.min > this.max) {\n            return {\n                start: this.max,\n                end: this.min\n            };\n        }\n        else {\n            return {\n                start: this.min,\n                end: this.max\n            };\n        }\n    }\n    xyToPosition(position) {\n        let pos;\n        if (this.min === this.max) {\n            return 100;\n        }\n        if (this.orientation === 'Horizontal') {\n            let left = position.x - this.element.getBoundingClientRect().left;\n            let num = this.element.offsetWidth / 100;\n            this.val = (left / num);\n        }\n        else {\n            let top = position.y - this.element.getBoundingClientRect().top;\n            let num = this.element.offsetHeight / 100;\n            this.val = 100 - (top / num);\n        }\n        let val = this.stepValueCalculation(this.val);\n        if (val < 0) {\n            val = 0;\n        }\n        else if (val > 100) {\n            val = 100;\n        }\n        if (this.enableRtl && this.orientation !== 'Vertical') {\n            val = 100 - val;\n        }\n        if (this.orientation === 'Horizontal') {\n            pos = this.element.getBoundingClientRect().width * (val / 100);\n        }\n        else {\n            pos = this.element.getBoundingClientRect().height * (val / 100);\n        }\n        return pos;\n    }\n    stepValueCalculation(value) {\n        if (this.step === 0) {\n            this.step = 1;\n        }\n        let percentStep = (parseFloat(formatUnit(this.step))) / ((parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))) / 100);\n        let remain = value % Math.abs(percentStep);\n        if (remain !== 0) {\n            if ((percentStep / 2) > remain) {\n                value -= remain;\n            }\n            else {\n                value += Math.abs(percentStep) - remain;\n            }\n        }\n        return value;\n    }\n    add(a, b, addition) {\n        let precision;\n        let x = Math.pow(10, precision || 3);\n        let val;\n        if (addition) {\n            val = (Math.round(a * x) + Math.round(b * x)) / x;\n        }\n        else {\n            val = (Math.round(a * x) - Math.round(b * x)) / x;\n        }\n        return val;\n    }\n    positionToValue(pos) {\n        let val;\n        let diff = parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min));\n        if (this.orientation === 'Horizontal') {\n            val = (pos / this.element.getBoundingClientRect().width) * diff;\n        }\n        else {\n            val = (pos / this.element.getBoundingClientRect().height) * diff;\n        }\n        let total = this.add(val, parseFloat(this.min.toString()), true);\n        return (total);\n    }\n    sliderBarClick(evt) {\n        evt.preventDefault();\n        let pos;\n        if (evt.type === 'mousedown' || evt.type === 'mouseup' || evt.type === 'click') {\n            pos = { x: evt.clientX, y: evt.clientY };\n        }\n        else if (evt.type === 'touchend' || evt.type === 'touchstart') {\n            pos = { x: evt.changedTouches[0].clientX, y: evt.changedTouches[0].clientY };\n        }\n        let handlepos = this.xyToPosition(pos);\n        let handleVal = this.positionToValue(handlepos);\n        if (this.type === 'Range' && (this.handlePos2 - handlepos) < (handlepos - this.handlePos1)) {\n            this.activeHandle = 2;\n            if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n                if (this.limits.enabled) {\n                    let value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);\n                    handleVal = value[0];\n                    handlepos = value[1];\n                }\n                this.secondHandle.classList.add(classNames.sliderActiveHandle);\n                this.handlePos2 = this.preHandlePos2 = handlepos;\n                this.handleVal2 = handleVal;\n            }\n            this.modifyZindex();\n            this.secondHandle.focus();\n        }\n        else {\n            this.activeHandle = 1;\n            if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n                if (this.limits.enabled) {\n                    let value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n                    handleVal = value[0];\n                    handlepos = value[1];\n                }\n                this.firstHandle.classList.add(classNames.sliderActiveHandle);\n                this.handlePos1 = this.preHandlePos1 = handlepos;\n                this.handleVal1 = handleVal;\n            }\n            this.modifyZindex();\n            this.firstHandle.focus();\n        }\n        if (this.isMaterialTooltip) {\n            this.tooltipElement.classList.add(classNames.materialTooltipActive);\n        }\n        let focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);\n        if (focusedElement && this.getHandle() !== focusedElement) {\n            focusedElement.classList.remove(classNames.sliderTabHandle);\n        }\n        let handle = this.activeHandle === 1 ? this.firstHandle : this.secondHandle;\n        if (evt.target === handle) {\n            if (this.isMaterial && !this.tooltip.isVisible &&\n                !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n                this.materialChange();\n            }\n            this.tooltipToggle(this.getHandle());\n            return;\n        }\n        if (!this.checkRepeatedValue(handleVal)) {\n            return;\n        }\n        let transition = this.isMaterial && this.tooltip.isVisible ?\n            this.transitionOnMaterialTooltip : this.transition;\n        this.getHandle().style.transition = transition.handle;\n        if (this.type !== 'Default') {\n            this.rangeBar.style.transition = transition.rangeBar;\n        }\n        this.setHandlePosition(evt);\n        if (this.type !== 'Default') {\n            this.setRangeBar();\n        }\n    }\n    handleValueAdjust(handleValue, assignValue, handleNumber) {\n        if (handleNumber === 1) {\n            this.handleVal1 = assignValue;\n            this.handleVal2 = this.handleVal1 + this.minDiff;\n        }\n        else if (handleNumber === 2) {\n            this.handleVal2 = assignValue;\n            this.handleVal1 = this.handleVal2 - this.minDiff;\n        }\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n        this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n    }\n    dragRangeBarMove(event) {\n        if (event.type !== 'touchmove') {\n            event.preventDefault();\n        }\n        this.rangeBarDragged = true;\n        let pos;\n        this.rangeBar.style.transition = 'none';\n        this.firstHandle.style.transition = 'none';\n        this.secondHandle.style.transition = 'none';\n        let xPostion;\n        let yPostion;\n        if (event.type === 'mousemove') {\n            [xPostion, yPostion] = [event.clientX, event.clientY];\n        }\n        else {\n            [xPostion, yPostion] = [event.changedTouches[0].clientX, event.changedTouches[0].clientY];\n        }\n        if (!(this.limits.enabled && this.limits.startHandleFixed) && !(this.limits.enabled && this.limits.endHandleFixed)) {\n            if (!this.enableRtl) {\n                pos = { x: xPostion - this.firstPartRemain, y: yPostion + this.secondPartRemain };\n            }\n            else {\n                pos = { x: xPostion + this.secondPartRemain, y: yPostion + this.secondPartRemain };\n            }\n            this.handlePos1 = this.xyToPosition(pos);\n            this.handleVal1 = this.positionToValue(this.handlePos1);\n            if (!this.enableRtl) {\n                pos = { x: xPostion + this.secondPartRemain, y: yPostion - this.firstPartRemain };\n            }\n            else {\n                pos = { x: xPostion - this.firstPartRemain, y: yPostion - this.firstPartRemain };\n            }\n            this.handlePos2 = this.xyToPosition(pos);\n            this.handleVal2 = this.positionToValue(this.handlePos2);\n            if (this.limits.enabled) {\n                let value = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n                this.handleVal1 = value[0];\n                this.handlePos1 = value[1];\n                if (this.handleVal1 === this.limits.minEnd) {\n                    this.handleValueAdjust(this.handleVal1, this.limits.minEnd, 1);\n                }\n                if (this.handleVal1 === this.limits.minStart) {\n                    this.handleValueAdjust(this.handleVal1, this.limits.minStart, 1);\n                }\n                value = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);\n                this.handleVal2 = value[0];\n                this.handlePos2 = value[1];\n                if (this.handleVal2 === this.limits.maxStart) {\n                    this.handleValueAdjust(this.handleVal2, this.limits.maxStart, 2);\n                }\n                if (this.handleVal2 === this.limits.maxEnd) {\n                    this.handleValueAdjust(this.handleVal2, this.limits.maxEnd, 2);\n                }\n            }\n            if (this.handleVal2 === this.max) {\n                this.handleValueAdjust(this.handleVal2, this.max, 2);\n            }\n            if (this.handleVal1 === this.min) {\n                this.handleValueAdjust(this.handleVal1, this.min, 1);\n            }\n        }\n        this.activeHandle = 1;\n        this.setHandlePosition(event);\n        this.activeHandle = 2;\n        this.setHandlePosition(event);\n        this.tooltipToggle(this.rangeBar);\n        this.setRangeBar();\n    }\n    sliderBarUp(event) {\n        this.changeEvent('changed', event);\n        this.handleFocusOut();\n        this.firstHandle.classList.remove(classNames.sliderActiveHandle);\n        if (this.type === 'Range') {\n            this.secondHandle.classList.remove(classNames.sliderActiveHandle);\n        }\n        this.closeTooltip();\n        if (this.isMaterial) {\n            this.getHandle().classList.remove('e-large-thumb-size');\n            if (this.isMaterialTooltip) {\n                this.tooltipElement.classList.remove(classNames.materialTooltipActive);\n            }\n        }\n        EventHandler.remove(document, 'mousemove touchmove', this.sliderBarMove);\n        EventHandler.remove(document, 'mouseup touchend', this.sliderBarUp);\n    }\n    sliderBarMove(evt) {\n        if (evt.type !== 'touchmove') {\n            evt.preventDefault();\n        }\n        let pos;\n        if (evt.type === 'mousemove') {\n            pos = { x: evt.clientX, y: evt.clientY };\n        }\n        else {\n            pos = { x: evt.changedTouches[0].clientX, y: evt.changedTouches[0].clientY };\n        }\n        let handlepos = this.xyToPosition(pos);\n        let handleVal = this.positionToValue(handlepos);\n        handlepos = Math.round(handlepos);\n        if (this.type !== 'Range' && this.activeHandle === 1) {\n            if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n                if (this.limits.enabled) {\n                    let valueAndPostion = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n                    handlepos = valueAndPostion[1];\n                    handleVal = valueAndPostion[0];\n                }\n                this.handlePos1 = handlepos;\n                this.handleVal1 = handleVal;\n            }\n            this.firstHandle.classList.add(classNames.sliderActiveHandle);\n        }\n        if (this.type === 'Range') {\n            if (this.activeHandle === 1) {\n                this.firstHandle.classList.add(classNames.sliderActiveHandle);\n                if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n                    if (handlepos > this.handlePos2) {\n                        handlepos = this.handlePos2;\n                        handleVal = this.handleVal2;\n                    }\n                    if (handlepos !== this.preHandlePos1) {\n                        if (this.limits.enabled) {\n                            let value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n                            handleVal = value[0];\n                            handlepos = value[1];\n                        }\n                        this.handlePos1 = this.preHandlePos1 = handlepos;\n                        this.handleVal1 = handleVal;\n                        this.activeHandle = 1;\n                    }\n                }\n            }\n            else if (this.activeHandle === 2) {\n                this.secondHandle.classList.add(classNames.sliderActiveHandle);\n                if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n                    if (handlepos < this.handlePos1) {\n                        handlepos = this.handlePos1;\n                        handleVal = this.handleVal1;\n                    }\n                    if (handlepos !== this.preHandlePos2) {\n                        if (this.limits.enabled) {\n                            let value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);\n                            handleVal = value[0];\n                            handlepos = value[1];\n                        }\n                        this.handlePos2 = this.preHandlePos2 = handlepos;\n                        this.handleVal2 = handleVal;\n                        this.activeHandle = 2;\n                    }\n                }\n            }\n        }\n        if (!this.checkRepeatedValue(handleVal)) {\n            return;\n        }\n        this.getHandle().style.transition = this.scaleTransform;\n        if (this.type !== 'Default') {\n            this.rangeBar.style.transition = 'none';\n        }\n        this.setHandlePosition(evt);\n        if (this.isMaterial && !this.tooltip.isVisible &&\n            !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n            this.materialChange();\n        }\n        this.tooltipToggle(this.getHandle());\n        if (this.type !== 'Default') {\n            this.setRangeBar();\n        }\n    }\n    dragRangeBarUp(event) {\n        if (!this.rangeBarDragged) {\n            this.focusSliderElement();\n            this.sliderBarClick(event);\n        }\n        this.changeEvent('changed', event);\n        this.closeTooltip();\n        EventHandler.remove(document, 'mousemove touchmove', this.dragRangeBarMove);\n        EventHandler.remove(document, 'mouseup touchend', this.dragRangeBarUp);\n        this.rangeBarDragged = false;\n    }\n    checkRepeatedValue(currentValue) {\n        if (this.type === 'Range') {\n            let previousVal = this.enableRtl && this.orientation !== 'Vertical' ? (this.activeHandle === 1 ?\n                this.previousVal[1] : this.previousVal[0]) :\n                (this.activeHandle === 1 ? this.previousVal[0] : this.previousVal[1]);\n            if (currentValue === previousVal) {\n                return 0;\n            }\n        }\n        else {\n            if (currentValue === this.previousVal) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    refreshTooltip(target) {\n        if (this.tooltip.isVisible && this.tooltipObj) {\n            this.tooltipValue();\n            if (target) {\n                this.tooltipObj.refresh(target);\n                this.tooltipTarget = target;\n            }\n        }\n    }\n    openTooltip(target) {\n        if (this.tooltip.isVisible && this.tooltipObj && !this.isMaterialTooltip) {\n            this.tooltipValue();\n            this.tooltipObj.open(target);\n            this.tooltipTarget = target;\n        }\n    }\n    closeTooltip() {\n        if (this.tooltip.isVisible && this.tooltipObj && this.tooltip.showOn !== 'Always' && !this.isMaterialTooltip) {\n            this.tooltipValue();\n            this.tooltipObj.close();\n            this.tooltipTarget = undefined;\n        }\n    }\n    keyDown(event) {\n        switch (event.keyCode) {\n            case 37:\n            case 38:\n            case 39:\n            case 40:\n            case 33:\n            case 34:\n            case 36:\n            case 35:\n                event.preventDefault();\n                this.buttonClick(event);\n                break;\n        }\n    }\n    wireButtonEvt(destroy) {\n        if (!destroy) {\n            EventHandler.add(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut, this);\n            EventHandler.add(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut, this);\n            EventHandler.add(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);\n            EventHandler.add(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);\n            EventHandler.add(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);\n            EventHandler.add(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);\n            EventHandler.add(this.firstBtn, 'focusout', this.sliderFocusOut, this);\n            EventHandler.add(this.secondBtn, 'focusout', this.sliderFocusOut, this);\n        }\n        else {\n            EventHandler.remove(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut);\n            EventHandler.remove(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut);\n            EventHandler.remove(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse);\n            EventHandler.remove(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);\n            EventHandler.remove(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse);\n            EventHandler.remove(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);\n            EventHandler.remove(this.firstBtn, 'focusout', this.sliderFocusOut);\n            EventHandler.remove(this.secondBtn, 'focusout', this.sliderFocusOut);\n        }\n    }\n    rangeBarMousedown(event) {\n        event.preventDefault();\n        this.focusSliderElement();\n        if (this.type === 'Range' && this.drag && event.target === this.rangeBar) {\n            let xPostion;\n            let yPostion;\n            if (event.type === 'mousedown') {\n                [xPostion, yPostion] = [event.clientX, event.clientY];\n            }\n            else if (event.type === 'touchstart') {\n                [xPostion, yPostion] = [event.changedTouches[0].clientX, event.changedTouches[0].clientY];\n            }\n            if (this.orientation === 'Horizontal') {\n                this.firstPartRemain = xPostion - this.rangeBar.getBoundingClientRect().left;\n                this.secondPartRemain = this.rangeBar.getBoundingClientRect().right - xPostion;\n            }\n            else {\n                this.firstPartRemain = yPostion - this.rangeBar.getBoundingClientRect().top;\n                this.secondPartRemain = this.rangeBar.getBoundingClientRect().bottom - yPostion;\n            }\n            this.minDiff = this.handleVal2 - this.handleVal1;\n            this.tooltipToggle(this.rangeBar);\n            let focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);\n            if (focusedElement) {\n                focusedElement.classList.remove(classNames.sliderTabHandle);\n            }\n            EventHandler.add(document, 'mousemove touchmove', this.dragRangeBarMove, this);\n            EventHandler.add(document, 'mouseup touchend', this.dragRangeBarUp, this);\n        }\n    }\n    elementClick(event) {\n        event.preventDefault();\n        this.focusSliderElement();\n        this.sliderBarClick(event);\n    }\n    wireEvents() {\n        this.onresize = this.reposition.bind(this);\n        window.addEventListener('resize', this.onresize);\n        if (this.enabled && !this.readonly) {\n            EventHandler.add(this.element, 'click', this.elementClick, this);\n            if (this.type === 'Range' && this.drag) {\n                EventHandler.add(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown, this);\n            }\n            EventHandler.add(this.sliderContainer, 'keydown', this.keyDown, this);\n            EventHandler.add(this.sliderContainer, 'keyup', this.keyUp, this);\n            EventHandler.add(this.element, 'focusout', this.sliderFocusOut, this);\n            EventHandler.add(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover, this);\n            this.wireFirstHandleEvt(false);\n            if (this.type === 'Range') {\n                this.wireSecondHandleEvt(false);\n            }\n            if (this.showButtons) {\n                this.wireButtonEvt(false);\n            }\n            this.wireMaterialTooltipEvent(false);\n            if (this.isForm) {\n                EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n            }\n        }\n    }\n    unwireEvents() {\n        EventHandler.remove(this.element, 'click', this.elementClick);\n        if (this.type === 'Range' && this.drag) {\n            EventHandler.remove(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown);\n        }\n        EventHandler.remove(this.sliderContainer, 'keydown', this.keyDown);\n        EventHandler.remove(this.sliderContainer, 'keyup', this.keyUp);\n        EventHandler.remove(this.element, 'focusout', this.sliderFocusOut);\n        EventHandler.remove(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover);\n        this.wireFirstHandleEvt(true);\n        if (this.type === 'Range') {\n            this.wireSecondHandleEvt(true);\n        }\n        if (this.showButtons) {\n            this.wireButtonEvt(true);\n        }\n        this.wireMaterialTooltipEvent(true);\n        EventHandler.remove(this.element, 'reset', this.formResetHandler);\n    }\n    formResetHandler() {\n        this.setProperties({ 'value': this.formResetValue }, true);\n        this.setValue();\n    }\n    keyUp(event) {\n        if (event.keyCode === 9 && event.target.classList.contains(classNames.sliderHandle)) {\n            this.focusSliderElement();\n            if (!event.target.classList.contains(classNames.sliderTabHandle)) {\n                if (this.element.querySelector('.' + classNames.sliderTabHandle)) {\n                    this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);\n                }\n                event.target.classList.add(classNames.sliderTabHandle);\n                let parentElement = event.target.parentElement;\n                if (parentElement === this.element) {\n                    parentElement.querySelector('.' + classNames.sliderTrack).classList.add(classNames.sliderTabTrack);\n                    if (this.type === 'Range' || this.type === 'MinRange') {\n                        parentElement.querySelector('.' + classNames.rangeBar).classList.add(classNames.sliderTabRange);\n                    }\n                }\n                if (this.type === 'Range') {\n                    (event.target.previousSibling).classList.contains(classNames.sliderHandle) ?\n                        this.activeHandle = 2 : this.activeHandle = 1;\n                }\n                this.getHandle().focus();\n                this.tooltipToggle(this.getHandle());\n            }\n        }\n        this.closeTooltip();\n        this.changeEvent('changed', event);\n    }\n    hover(event) {\n        if (!isNullOrUndefined(event)) {\n            if (event.type === 'mouseover' || event.type === 'touchmove' || event.type === 'mousemove' ||\n                event.type === 'pointermove' || event.type === 'touchstart') {\n                this.sliderContainer.classList.add(classNames.sliderHover);\n            }\n            else {\n                this.sliderContainer.classList.remove(classNames.sliderHover);\n            }\n        }\n    }\n    sliderFocusOut(event) {\n        if (event.relatedTarget !== this.secondHandle && event.relatedTarget !== this.firstHandle &&\n            event.relatedTarget !== this.element && event.relatedTarget !== this.firstBtn && event.relatedTarget !== this.secondBtn) {\n            this.closeMaterialTooltip();\n            if (this.element.querySelector('.' + classNames.sliderTabHandle)) {\n                this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);\n            }\n            if (this.element.querySelector('.' + classNames.sliderTabTrack)) {\n                this.element.querySelector('.' + classNames.sliderTabTrack).classList.remove(classNames.sliderTabTrack);\n                if ((this.type === 'Range' || this.type === 'MinRange') &&\n                    this.element.querySelector('.' + classNames.sliderTabRange)) {\n                    this.element.querySelector('.' + classNames.sliderTabRange).classList.remove(classNames.sliderTabRange);\n                }\n            }\n            this.hiddenInput.focus();\n            this.hiddenInput.blur();\n            this.isElementFocused = false;\n        }\n    }\n    removeElement(element) {\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n    changeSliderType(type, args) {\n        if (this.isMaterialTooltip && this.materialHandle) {\n            this.sliderContainer.classList.remove(classNames.materialSlider);\n            this.removeElement(this.materialHandle);\n            this.materialHandle = undefined;\n        }\n        this.removeElement(this.firstHandle);\n        this.firstHandle = undefined;\n        if (type !== 'Default') {\n            if (type === 'Range') {\n                this.removeElement(this.secondHandle);\n                this.secondHandle = undefined;\n            }\n            this.removeElement(this.rangeBar);\n            this.rangeBar = undefined;\n        }\n        if (this.tooltip.isVisible && !isNullOrUndefined(this.tooltipObj)) {\n            this.tooltipObj.destroy();\n            this.tooltipElement = undefined;\n            this.tooltipCollidedPosition = undefined;\n        }\n        if (this.limits.enabled) {\n            if (type === 'MinRange' || type === 'Default') {\n                if (!isNullOrUndefined(this.limitBarFirst)) {\n                    this.removeElement(this.limitBarFirst);\n                    this.limitBarFirst = undefined;\n                }\n            }\n            else {\n                if (!isNullOrUndefined(this.limitBarSecond)) {\n                    this.removeElement(this.limitBarSecond);\n                    this.limitBarSecond = undefined;\n                }\n            }\n        }\n        this.activeHandle = 1;\n        this.getThemeInitialization();\n        if (this.type === 'Range') {\n            this.rangeValueUpdate();\n        }\n        this.createRangeBar();\n        if (this.limits.enabled) {\n            this.createLimitBar();\n        }\n        this.setHandler();\n        this.setOrientClass();\n        this.wireFirstHandleEvt(false);\n        if (this.type === 'Range') {\n            this.wireSecondHandleEvt(false);\n        }\n        this.setValue();\n        if (this.tooltip.isVisible) {\n            this.renderTooltip();\n            this.wireMaterialTooltipEvent(false);\n        }\n        this.setBarColor();\n        if ((!isBlazor() && !this.isServerRendered) || args !== 'tooltip') {\n            this.updateConfig();\n        }\n    }\n    changeRtl() {\n        if (!this.enableRtl && this.type === 'Range') {\n            this.value = [this.handleVal2, this.handleVal1];\n        }\n        this.updateConfig();\n        if (this.tooltip.isVisible) {\n            this.tooltipObj.refresh(this.firstHandle);\n        }\n        if (this.showButtons) {\n            let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n            attributes(enabledRTL ? this.secondBtn : this.firstBtn, { 'aria-label': 'Decrease', title: 'Decrease' });\n            attributes(enabledRTL ? this.firstBtn : this.secondBtn, { 'aria-label': 'Increase', title: 'Increase' });\n        }\n    }\n    changeOrientation() {\n        this.changeSliderType(this.type, 'null');\n    }\n    updateConfig() {\n        this.setEnableRTL();\n        this.setValue();\n        if (this.tooltip.isVisible) {\n            if (!isBlazor()) {\n                this.refreshTooltip(this.tooltipTarget);\n            }\n        }\n        if (this.ticks.placement !== 'None') {\n            if (this.ul) {\n                this.removeElement(this.ul);\n                this.ul = undefined;\n                this.renderScale();\n            }\n        }\n        this.limitsPropertyChange();\n    }\n    limitsPropertyChange() {\n        if (this.limits.enabled) {\n            if (isNullOrUndefined(this.limitBarFirst) && this.type !== 'Range') {\n                this.createLimitBar();\n            }\n            if (isNullOrUndefined(this.limitBarFirst) && isNullOrUndefined(this.limitBarSecond) && this.type === 'Range') {\n                this.createLimitBar();\n            }\n            this.setLimitBar();\n            this.setValue();\n        }\n        else {\n            if (!isNullOrUndefined(this.limitBarFirst)) {\n                detach(this.limitBarFirst);\n            }\n            if (!isNullOrUndefined(this.limitBarSecond)) {\n                detach(this.limitBarSecond);\n            }\n        }\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @private\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also it removes the attributes and classes.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        super.destroy();\n        this.unwireEvents();\n        window.removeEventListener('resize', this.onresize);\n        removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n        this.firstHandle.removeAttribute('aria-orientation');\n        if (this.type === 'Range') {\n            this.secondHandle.removeAttribute('aria-orientation');\n        }\n        if (!isBlazor() && !this.isServerRendered) {\n            this.sliderContainer.parentNode.insertBefore(this.element, this.sliderContainer);\n            detach(this.sliderContainer);\n        }\n        if (this.tooltip.isVisible) {\n            this.tooltipObj.destroy();\n        }\n        if (!isBlazor() && !this.isServerRendered) {\n            this.element.innerHTML = '';\n        }\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @private\n     */\n    // tslint:disable-next-line\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'cssClass':\n                    this.setCSSClass(oldProp.cssClass);\n                    break;\n                case 'value':\n                    if (newProp && oldProp) {\n                        let value = isNullOrUndefined(newProp.value) ?\n                            (this.type === 'Range' ? [this.min, this.max] : this.min) : newProp.value;\n                        this.setProperties({ 'value': value }, true);\n                        if (!isNullOrUndefined(oldProp.value) && oldProp.value.toString() !== value.toString()) {\n                            this.setValue();\n                            if (!isBlazor() || !this.isServerRendered) {\n                                this.refreshTooltip(this.tooltipTarget);\n                            }\n                            if (this.type === 'Range') {\n                                if (isNullOrUndefined(newProp.value) || oldProp.value[1] === value[1]) {\n                                    this.activeHandle = 1;\n                                }\n                                else {\n                                    this.activeHandle = 2;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 'min':\n                case 'step':\n                case 'max':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    this.setMinMaxValue();\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'tooltip':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    if (!isNullOrUndefined(newProp.tooltip) && !isNullOrUndefined(oldProp.tooltip)) {\n                        this.setTooltip(prop);\n                    }\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'type':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    if (!isNullOrUndefined(oldProp) && Object.keys(oldProp).length\n                        && !isNullOrUndefined(oldProp.type)) {\n                        this.changeSliderType(oldProp.type, prop);\n                        this.setZindex();\n                    }\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'enableRtl':\n                    if (isBlazor() && this.isServerRendered) {\n                        if (this.isMaterialTooltip) {\n                            this.sliderContainer.classList.add(classNames.materialSlider);\n                        }\n                        this.isServerRendered = false;\n                    }\n                    if (oldProp.enableRtl !== newProp.enableRtl && this.orientation !== 'Vertical') {\n                        this.rtl = oldProp.enableRtl;\n                        this.changeRtl();\n                    }\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'limits':\n                    this.limitsPropertyChange();\n                    break;\n                case 'orientation':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    this.changeOrientation();\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'ticks':\n                    if (!isNullOrUndefined(this.sliderContainer.querySelector('.' + classNames.scale))) {\n                        if (!isBlazor() || !this.isServerRendered) {\n                            detach(this.ul);\n                        }\n                        Array.prototype.forEach.call(this.sliderContainer.classList, (className) => {\n                            if (className.match(/e-scale-/)) {\n                                this.sliderContainer.classList.remove(className);\n                            }\n                        });\n                    }\n                    if (this.ticks.placement !== 'None') {\n                        this.renderScale();\n                        this.setZindex();\n                    }\n                    break;\n                case 'locale':\n                    if (this.showButtons) {\n                        this.buttonTitle();\n                    }\n                    break;\n                case 'showButtons':\n                    if (newProp.showButtons) {\n                        this.setButtons();\n                        this.reposition();\n                        if (this.enabled && !this.readonly) {\n                            this.wireButtonEvt(false);\n                        }\n                    }\n                    else {\n                        if (!isBlazor() || !this.isServerRendered) {\n                            if (this.firstBtn && this.secondBtn) {\n                                this.sliderContainer.removeChild(this.firstBtn);\n                                this.sliderContainer.removeChild(this.secondBtn);\n                                this.sliderContainer.classList.remove(classNames.sliderButtonClass);\n                                this.firstBtn = undefined;\n                                this.secondBtn = undefined;\n                                this.reposition();\n                            }\n                        }\n                    }\n                    if (isBlazor() && this.isServerRendered) {\n                        if (this.isMaterialTooltip) {\n                            this.sliderContainer.classList.add(classNames.materialSlider);\n                        }\n                    }\n                    break;\n                case 'enabled':\n                    this.setEnabled();\n                    if (isBlazor() && this.isServerRendered) {\n                        if (this.isMaterialTooltip) {\n                            this.sliderContainer.classList.add(classNames.materialSlider);\n                        }\n                    }\n                    break;\n                case 'readonly':\n                    this.setReadOnly();\n                    if (isBlazor() && this.isServerRendered) {\n                        if (this.isMaterialTooltip) {\n                            this.sliderContainer.classList.add(classNames.materialSlider);\n                        }\n                    }\n                    break;\n                case 'customValues':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    this.setValue();\n                    this.reposition();\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'colorRange':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    this.reposition();\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'width':\n                    this.setElementWidth(newProp.width);\n                    this.setMinMaxValue();\n                    if (this.limits) {\n                        this.limitsPropertyChange();\n                    }\n                    break;\n            }\n        }\n    }\n    setReadOnly() {\n        if (this.readonly) {\n            this.unwireEvents();\n            this.sliderContainer.classList.add(classNames.readonly);\n        }\n        else {\n            this.wireEvents();\n            this.sliderContainer.classList.remove(classNames.readonly);\n        }\n    }\n    setMinMaxValue() {\n        this.setValue();\n        if (!isBlazor()) {\n            this.refreshTooltip(this.tooltipTarget);\n        }\n        if (!isNullOrUndefined(this.sliderContainer.querySelector('.' + classNames.scale))) {\n            if (this.ul) {\n                detach(this.ul);\n                Array.prototype.forEach.call(this.sliderContainer.classList, (className) => {\n                    if (className.match(/e-scale-/)) {\n                        this.sliderContainer.classList.remove(className);\n                    }\n                });\n            }\n        }\n        if (this.ticks.placement !== 'None') {\n            this.renderScale();\n            this.setZindex();\n        }\n    }\n    setZindex() {\n        this.zIndex = 6;\n        if (!isNullOrUndefined(this.ticks) && this.ticks.placement !== 'None') {\n            this.ul.style.zIndex = (this.zIndex + -7) + '';\n            this.element.style.zIndex = (this.zIndex + 2) + '';\n        }\n        if (!this.isMaterial && !isNullOrUndefined(this.ticks) && this.ticks.placement === 'Both') {\n            this.element.style.zIndex = (this.zIndex + 2) + '';\n        }\n        this.firstHandle.style.zIndex = (this.zIndex + 3) + '';\n        if (this.type === 'Range') {\n            this.secondHandle.style.zIndex = (this.zIndex + 4) + '';\n        }\n    }\n    setTooltip(args) {\n        this.changeSliderType(this.type, args);\n    }\n    setBarColor() {\n        let trackPosition;\n        let trackClassName;\n        let child = this.sliderTrack.lastElementChild;\n        while (child) {\n            this.sliderTrack.removeChild(child);\n            child = this.sliderTrack.lastElementChild;\n        }\n        for (let i = 0; i < this.colorRange.length; i++) {\n            if (!isNullOrUndefined(this.colorRange[i].start) && !isNullOrUndefined(this.colorRange[i].end)) {\n                if (this.colorRange[i].end > this.colorRange[i].start) {\n                    if (this.colorRange[i].start < this.min) {\n                        this.colorRange[i].start = this.min;\n                    }\n                    if (this.colorRange[i].end > this.max) {\n                        this.colorRange[i].end = this.max;\n                    }\n                    let startingPosition = this.checkHandlePosition(this.colorRange[i].start);\n                    let endPosition = this.checkHandlePosition(this.colorRange[i].end);\n                    let trackContainer = this.createElement('div');\n                    trackContainer.style.backgroundColor = this.colorRange[i].color;\n                    trackContainer.style.border = '1px solid ' + this.colorRange[i].color;\n                    if (this.orientation === 'Horizontal') {\n                        trackClassName = classNames.sliderHorizantalColor;\n                        if (this.enableRtl) {\n                            if (isNullOrUndefined(this.customValues)) {\n                                trackPosition = this.checkHandlePosition(this.max) - this.checkHandlePosition(this.colorRange[i].end);\n                            }\n                            else {\n                                trackPosition = this.checkHandlePosition(this.customValues.length - this.colorRange[i].end - 1);\n                            }\n                        }\n                        else {\n                            trackPosition = this.checkHandlePosition(this.colorRange[i].start);\n                        }\n                        trackContainer.style.width = endPosition - startingPosition + 'px';\n                        trackContainer.style.left = trackPosition + 'px';\n                    }\n                    else {\n                        trackClassName = classNames.sliderVerticalColor;\n                        trackPosition = this.checkHandlePosition(this.colorRange[i].start);\n                        trackContainer.style.height = endPosition - startingPosition + 'px';\n                        trackContainer.style.bottom = trackPosition + 'px';\n                    }\n                    trackContainer.classList.add(trackClassName);\n                    this.sliderTrack.appendChild(trackContainer);\n                }\n            }\n        }\n    }\n    /**\n     * Gets the component name\n     * @private\n     */\n    getModuleName() {\n        return 'slider';\n    }\n};\n__decorate$2([\n    Property(null)\n], Slider.prototype, \"value\", void 0);\n__decorate$2([\n    Property(null)\n], Slider.prototype, \"customValues\", void 0);\n__decorate$2([\n    Property(1)\n], Slider.prototype, \"step\", void 0);\n__decorate$2([\n    Property(null)\n], Slider.prototype, \"width\", void 0);\n__decorate$2([\n    Property(0)\n], Slider.prototype, \"min\", void 0);\n__decorate$2([\n    Property(100)\n], Slider.prototype, \"max\", void 0);\n__decorate$2([\n    Property(false)\n], Slider.prototype, \"readonly\", void 0);\n__decorate$2([\n    Property('Default')\n], Slider.prototype, \"type\", void 0);\n__decorate$2([\n    Collection([{}], ColorRangeData)\n], Slider.prototype, \"colorRange\", void 0);\n__decorate$2([\n    Complex({}, TicksData)\n], Slider.prototype, \"ticks\", void 0);\n__decorate$2([\n    Complex({}, LimitData)\n], Slider.prototype, \"limits\", void 0);\n__decorate$2([\n    Property(true)\n], Slider.prototype, \"enabled\", void 0);\n__decorate$2([\n    Complex({}, TooltipData)\n], Slider.prototype, \"tooltip\", void 0);\n__decorate$2([\n    Property(false)\n], Slider.prototype, \"showButtons\", void 0);\n__decorate$2([\n    Property(true)\n], Slider.prototype, \"enableAnimation\", void 0);\n__decorate$2([\n    Property('Horizontal')\n], Slider.prototype, \"orientation\", void 0);\n__decorate$2([\n    Property('')\n], Slider.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property(false)\n], Slider.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"created\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"change\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"changed\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"renderingTicks\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"renderedTicks\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"tooltipChange\", void 0);\nSlider = __decorate$2([\n    NotifyPropertyChanges\n], Slider);\n\n/**\n * Slider modules\n */\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar FormValidator_1;\n/**\n * global declarations\n */\n// tslint:disable-next-line:no-any\nlet regex = {\n    EMAIL: new RegExp('^[A-Za-z0-9._%+-]{1,}@[A-Za-z0-9._%+-]{1,}([.]{1}[a-zA-Z0-9]{2,}' +\n        '|[.]{1}[a-zA-Z0-9]{2,4}[.]{1}[a-zA-Z0-9]{2,4})$'),\n    URL: /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/m,\n    DATE_ISO: new RegExp('^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$'),\n    DIGITS: new RegExp('^[0-9]*$'),\n    PHONE: new RegExp('^[+]?[0-9]{9,13}$'),\n    CREDITCARD: new RegExp('^\\\\d{13,16}$')\n};\n/**\n * ErrorOption values\n * @private\n */\nvar ErrorOption;\n(function (ErrorOption) {\n    /**\n     * Defines the error message.\n     */\n    ErrorOption[ErrorOption[\"Message\"] = 0] = \"Message\";\n    /**\n     * Defines the error element type.\n     */\n    ErrorOption[ErrorOption[\"Label\"] = 1] = \"Label\";\n})(ErrorOption || (ErrorOption = {}));\n/**\n * FormValidator class enables you to validate the form fields based on your defined rules\n * ```html\n * <form id='formId'>\n *  <input type='text' name='Name' />\n *  <input type='text' name='Age' />\n * </form>\n * <script>\n *   let formObject = new FormValidator('#formId', {\n *      rules: { Name: { required: true }, Age: { range: [18, 30] } };\n *   });\n *   formObject.validate();\n * </script>\n * ```\n */\nlet FormValidator = FormValidator_1 = class FormValidator extends Base {\n    // Initializes the FormValidator \n    constructor(element, options) {\n        super(options, element);\n        this.validated = [];\n        this.errorRules = [];\n        this.allowSubmit = false;\n        this.required = 'required';\n        this.infoElement = null;\n        this.inputElement = null;\n        this.selectQuery = 'input:not([type=reset]):not([type=button]), select, textarea';\n        // tslint:disable-next-line:no-any\n        this.localyMessage = {};\n        /**\n         * Specifies the default messages for validation rules.\n         * @default { List of validation message }\n         */\n        this.defaultMessages = {\n            required: 'This field is required.',\n            email: 'Please enter a valid email address.',\n            url: 'Please enter a valid URL.',\n            date: 'Please enter a valid date.',\n            dateIso: 'Please enter a valid date ( ISO ).',\n            creditcard: 'Please enter valid card number',\n            number: 'Please enter a valid number.',\n            digits: 'Please enter only digits.',\n            maxLength: 'Please enter no more than {0} characters.',\n            minLength: 'Please enter at least {0} characters.',\n            rangeLength: 'Please enter a value between {0} and {1} characters long.',\n            range: 'Please enter a value between {0} and {1}.',\n            max: 'Please enter a value less than or equal to {0}.',\n            min: 'Please enter a value greater than or equal to {0}.',\n            regex: 'Please enter a correct value.',\n            tel: 'Please enter a valid phone number.',\n            pattern: 'Please enter a correct pattern value.',\n            equalTo: 'Please enter the valid match text',\n        };\n        if (typeof this.rules === 'undefined') {\n            this.rules = {};\n        }\n        this.l10n = new L10n('formValidator', this.defaultMessages, this.locale);\n        if (this.locale) {\n            this.localeFunc();\n        }\n        onIntlChange.on('notifyExternalChange', this.afterLocalization, this);\n        element = typeof element === 'string' ? select(element, document) : element;\n        // Set novalidate to prevent default HTML5 form validation\n        if (this.element != null) {\n            this.element.setAttribute('novalidate', '');\n            this.inputElements = selectAll(this.selectQuery, this.element);\n            this.createHTML5Rules();\n            this.wireEvents();\n        }\n        else {\n            return undefined;\n        }\n    }\n    // tslint:enable\n    /**\n     * Add validation rules to the corresponding input element based on `name` attribute.\n     * @param {string} name `name` of form field.\n     * @param {Object} rules Validation rules for the corresponding element.\n     * @return {void}\n     */\n    addRules(name, rules) {\n        if (name) {\n            if (this.rules.hasOwnProperty(name)) {\n                extend(this.rules[name], rules, {});\n            }\n            else {\n                this.rules[name] = rules;\n            }\n        }\n    }\n    /**\n     * Remove validation to the corresponding field based on name attribute.\n     * When no parameter is passed, remove all the validations in the form.\n     * @param {string} name Input name attribute value.\n     * @param {string[]} rules List of validation rules need to be remove from the corresponding element.\n     * @return {void}\n     */\n    removeRules(name, rules) {\n        if (!name && !rules) {\n            this.rules = {};\n        }\n        else if (this.rules[name] && !rules) {\n            delete this.rules[name];\n        }\n        else if (!isNullOrUndefined(this.rules[name] && rules)) {\n            for (let i = 0; i < rules.length; i++) {\n                delete this.rules[name][rules[i]];\n            }\n        }\n        else {\n            return;\n        }\n    }\n    /**\n     * Validate the current form values using defined rules.\n     * Returns `true` when the form is valid otherwise `false`\n     * @param {string} selected - Optional parameter to validate specified element.\n     * @return {boolean}\n     */\n    validate(selected) {\n        let rules = Object.keys(this.rules);\n        if (selected && rules.length) {\n            this.validateRules(selected);\n            //filter the selected element it don't have any valid input element\n            return rules.indexOf(selected) !== -1 && this.errorRules.filter((data) => {\n                return data.name === selected;\n            }).length === 0;\n        }\n        else {\n            this.errorRules = [];\n            for (let name of rules) {\n                this.validateRules(name);\n            }\n            return this.errorRules.length === 0;\n        }\n    }\n    /**\n     * Reset the value of all the fields in form.\n     * @return {void}\n     */\n    reset() {\n        this.element.reset();\n        this.clearForm();\n    }\n    /**\n     * Get input element by name.\n     * @param {string} name - Input element name attribute value.\n     * @return {HTMLInputElement}\n     */\n    getInputElement(name) {\n        this.inputElement = (select('[name=\"' + name + '\"]', this.element));\n        return this.inputElement;\n    }\n    /**\n     * Destroy the form validator object and error elements.\n     * @return {void}\n     */\n    destroy() {\n        this.reset();\n        this.unwireEvents();\n        this.rules = {};\n        let elements = selectAll('.' + this.errorClass + ', .' + this.validClass, this.element);\n        for (let element of elements) {\n            detach(element);\n        }\n        super.destroy();\n        onIntlChange.off('notifyExternalChange', this.afterLocalization);\n    }\n    /**\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'locale':\n                    this.localeFunc();\n                    break;\n            }\n        }\n    }\n    ;\n    /**\n     * @private\n     */\n    localeFunc() {\n        for (let key of Object.keys(this.defaultMessages)) {\n            this.l10n.setLocale(this.locale);\n            let value = this.l10n.getConstant(key);\n            this.localyMessage[key] = value;\n        }\n    }\n    /**\n     * @private\n     */\n    getModuleName() {\n        return 'formValidator';\n    }\n    /**\n     * @private\n     */\n    // tslint:disable-next-line:no-any\n    afterLocalization(args) {\n        this.locale = args.locale;\n        this.localeFunc();\n    }\n    /**\n     * Allows you to refresh the form validator base events to the elements inside the form.\n     * @return {void}\n     */\n    refresh() {\n        this.unwireEvents();\n        this.inputElements = selectAll(this.selectQuery, this.element);\n        this.wireEvents();\n    }\n    clearForm() {\n        this.errorRules = [];\n        this.validated = [];\n        let elements = selectAll(this.selectQuery, this.element);\n        for (let element of elements) {\n            let input = element;\n            input.removeAttribute('aria-invalid');\n            input.classList.remove(this.errorClass);\n            if (input.name.length > 0) {\n                this.getInputElement(input.name);\n                this.getErrorElement(input.name);\n                this.hideMessage(input.name);\n            }\n            input.classList.remove(this.validClass);\n        }\n    }\n    createHTML5Rules() {\n        let defRules = ['required', 'validateHidden', 'regex', 'rangeLength', 'maxLength', 'minLength', 'dateIso', 'digits',\n            'pattern', 'data-val-required', 'type', 'data-validation', 'min', 'max', 'range', 'equalTo', 'data-val-minlength-min',\n            'data-val-equalto-other', 'data-val-maxlength-max', 'data-val-range-min', 'data-val-regex-pattern', 'data-val-length-max',\n            'data-val-creditcard', 'data-val-phone'];\n        let acceptedTypes = ['hidden', 'email', 'url', 'date', 'number', 'tel'];\n        for (let input of (this.inputElements)) {\n            // Default attribute rules \n            let allRule = {};\n            for (let rule of defRules) {\n                if (input.getAttribute(rule) !== null) {\n                    switch (rule) {\n                        case 'required':\n                            this.defRule(input, allRule, rule, input.required);\n                            break;\n                        case 'data-validation':\n                            rule = input.getAttribute(rule);\n                            this.defRule(input, allRule, rule, true);\n                            break;\n                        case 'type':\n                            if (acceptedTypes.indexOf(input.type) !== -1) {\n                                this.defRule(input, allRule, input.type, true);\n                            }\n                            break;\n                        case 'rangeLength':\n                        case 'range':\n                            this.defRule(input, allRule, rule, JSON.parse(input.getAttribute(rule)));\n                            break;\n                        case 'equalTo':\n                            let id = input.getAttribute(rule);\n                            this.defRule(input, allRule, rule, id);\n                            break;\n                        default:\n                            if (input.getAttribute('data-val') === 'true') {\n                                this.annotationRule(input, allRule, rule, input.getAttribute(rule));\n                            }\n                            else {\n                                this.defRule(input, allRule, rule, input.getAttribute(rule));\n                            }\n                    }\n                }\n            }\n            //adding pattern type validation\n            if (Object.keys(allRule).length !== 0) {\n                this.addRules(input.name, allRule);\n            }\n        }\n    }\n    annotationRule(input, ruleCon, ruleName, value) {\n        let annotationRule = ruleName.split('-');\n        let rulesList = ['required', 'creditcard', 'phone', 'maxlength', 'minlength', 'range', 'regex', 'equalto'];\n        let ruleFirstName = annotationRule[annotationRule.length - 1];\n        let ruleSecondName = annotationRule[annotationRule.length - 2];\n        if (rulesList.indexOf(ruleFirstName) !== -1) {\n            switch (ruleFirstName) {\n                case 'required':\n                    this.defRule(input, ruleCon, 'required', value);\n                    break;\n                case 'creditcard':\n                    this.defRule(input, ruleCon, 'creditcard', value);\n                    break;\n                case 'phone':\n                    this.defRule(input, ruleCon, 'tel', value);\n                    break;\n            }\n        }\n        else if (rulesList.indexOf(ruleSecondName) !== -1) {\n            switch (ruleSecondName) {\n                case 'maxlength':\n                    this.defRule(input, ruleCon, 'maxLength', value);\n                    break;\n                case 'minlength':\n                    this.defRule(input, ruleCon, 'minLength', value);\n                    break;\n                case 'range':\n                    let minvalue = input.getAttribute('data-val-range-min');\n                    let maxvalue = input.getAttribute('data-val-range-max');\n                    this.defRule(input, ruleCon, 'range', [minvalue, maxvalue]);\n                    break;\n                case 'equalto':\n                    let id = input.getAttribute(ruleName).split('.');\n                    this.defRule(input, ruleCon, 'equalTo', id[id.length - 1]);\n                    break;\n                case 'regex':\n                    this.defRule(input, ruleCon, 'regex', value);\n                    break;\n            }\n        }\n    }\n    defRule(input, ruleCon, ruleName, value) {\n        let message = input.getAttribute('data-' + ruleName + '-message');\n        let annotationMessage = input.getAttribute('data-val-' + ruleName);\n        let customMessage;\n        if (this.rules[input.name] && ruleName !== 'validateHidden' && ruleName !== 'hidden') {\n            this.getInputElement(input.name);\n            customMessage = this.getErrorMessage(this.rules[input.name][ruleName], ruleName);\n        }\n        if (message) {\n            value = [value, message];\n        }\n        else if (annotationMessage) {\n            value = [value, annotationMessage];\n        }\n        else if (customMessage) {\n            value = [value, customMessage];\n        }\n        ruleCon[ruleName] = value;\n    }\n    // Wire events to the form elements\n    wireEvents() {\n        for (let input of (this.inputElements)) {\n            if (FormValidator_1.isCheckable(input)) {\n                EventHandler.add(input, 'click', this.clickHandler, this);\n            }\n            else if (input.tagName === 'SELECT') {\n                EventHandler.add(input, 'change', this.changeHandler, this);\n            }\n            else {\n                EventHandler.add(input, 'focusout', this.focusOutHandler, this);\n                EventHandler.add(input, 'keyup', this.keyUpHandler, this);\n            }\n        }\n        EventHandler.add(this.element, 'submit', this.submitHandler, this);\n        EventHandler.add(this.element, 'reset', this.resetHandler, this);\n    }\n    // UnWire events to the form elements\n    unwireEvents() {\n        for (let input of (this.inputElements)) {\n            EventHandler.clearEvents(input);\n        }\n        EventHandler.remove(this.element, 'submit', this.submitHandler);\n        EventHandler.remove(this.element, 'reset', this.resetHandler);\n    }\n    // Handle input element focusout event\n    focusOutHandler(e) {\n        this.trigger('focusout', e);\n        //FormValidator.triggerCallback(this.focusout, e);\n        let element = e.target;\n        if (this.rules[element.name]) {\n            if (this.rules[element.name][this.required] || element.value.length > 0) {\n                this.validate(element.name);\n            }\n            else if (this.validated.indexOf(element.name) === -1) {\n                this.validated.push(element.name);\n            }\n        }\n    }\n    // Handle input element keyup event\n    keyUpHandler(e) {\n        this.trigger('keyup', e);\n        let element = e.target;\n        // List of keys need to prevent while validation\n        let excludeKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];\n        if (e.which === 9 && (!this.rules[element.name] || (this.rules[element.name] && !this.rules[element.name][this.required]))) {\n            return;\n        }\n        if (this.validated.indexOf(element.name) !== -1 && this.rules[element.name] && excludeKeys.indexOf(e.which) === -1) {\n            this.validate(element.name);\n        }\n    }\n    // Handle input click event\n    clickHandler(e) {\n        this.trigger('click', e);\n        let element = e.target;\n        // If element type is not submit allow validation\n        if (element.type !== 'submit') {\n            this.validate(element.name);\n        }\n        else if (element.getAttribute('formnovalidate') !== null) {\n            // Prevent form validation, if submit button has formnovalidate attribute\n            this.allowSubmit = true;\n        }\n    }\n    // Handle input change event\n    changeHandler(e) {\n        this.trigger('change', e);\n        let element = e.target;\n        this.validate(element.name);\n    }\n    // Handle form submit event\n    submitHandler(e) {\n        this.trigger('submit', e);\n        //FormValidator.triggerCallback(this.submit, e);\n        // Prevent form submit if validation failed\n        if (!this.allowSubmit && !this.validate()) {\n            e.preventDefault();\n        }\n        else {\n            this.allowSubmit = false;\n        }\n    }\n    // Handle form reset\n    resetHandler() {\n        this.clearForm();\n    }\n    // Validate each rule based on input element name\n    validateRules(name) {\n        if (!this.rules[name]) {\n            return;\n        }\n        let rules = Object.keys(this.rules[name]);\n        let hiddenType = false;\n        let validateHiddenType = false;\n        let vhPos = rules.indexOf('validateHidden');\n        let hPos = rules.indexOf('hidden');\n        this.getInputElement(name);\n        if (hPos !== -1) {\n            hiddenType = true;\n        }\n        if (vhPos !== -1) {\n            validateHiddenType = true;\n        }\n        if (!hiddenType || (hiddenType && validateHiddenType)) {\n            if (vhPos !== -1) {\n                rules.splice(vhPos, 1);\n            }\n            if (hPos !== -1) {\n                rules.splice((hPos - 1), 1);\n            }\n            this.getErrorElement(name);\n            for (let rule of rules) {\n                let errorMessage = this.getErrorMessage(this.rules[name][rule], rule);\n                let errorRule = { name: name, message: errorMessage };\n                let eventArgs = {\n                    inputName: name,\n                    element: this.inputElement,\n                    message: errorMessage\n                };\n                if (!this.isValid(name, rule) && !this.inputElement.classList.contains(this.ignore)) {\n                    this.removeErrorRules(name);\n                    this.errorRules.push(errorRule);\n                    // Set aria attributes to invalid elements\n                    this.inputElement.setAttribute('aria-invalid', 'true');\n                    this.inputElement.setAttribute('aria-describedby', this.inputElement.id + '-info');\n                    this.inputElement.classList.add(this.errorClass);\n                    this.inputElement.classList.remove(this.validClass);\n                    if (!this.infoElement) {\n                        this.createErrorElement(name, errorRule.message, this.inputElement);\n                    }\n                    else {\n                        this.showMessage(errorRule);\n                    }\n                    eventArgs.errorElement = this.infoElement;\n                    eventArgs.status = 'failure';\n                    this.inputElement.classList.add(this.errorClass);\n                    this.inputElement.classList.remove(this.validClass);\n                    this.optionalValidationStatus(name, eventArgs);\n                    this.trigger('validationComplete', eventArgs);\n                    // Set aria-required to required rule elements\n                    if (rule === 'required') {\n                        this.inputElement.setAttribute('aria-required', 'true');\n                    }\n                    break;\n                }\n                else {\n                    this.hideMessage(name);\n                    eventArgs.status = 'success';\n                    this.trigger('validationComplete', eventArgs);\n                }\n            }\n        }\n        else {\n            return;\n        }\n    }\n    // Update the optional validation status\n    optionalValidationStatus(name, refer) {\n        if (!this.rules[name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {\n            this.infoElement.innerHTML = this.inputElement.value;\n            this.infoElement.setAttribute('aria-invalid', 'false');\n            refer.status = '';\n            this.hideMessage(name);\n        }\n    }\n    // Check the input element whether it's value satisfy the validation rule or not\n    isValid(name, rule) {\n        let params = this.rules[name][rule];\n        let param = (params instanceof Array && typeof params[1] === 'string') ? params[0] : params;\n        let currentRule = this.rules[name][rule];\n        let args = { value: this.inputElement.value, param: param, element: this.inputElement, formElement: this.element };\n        this.trigger('validationBegin', args);\n        if (currentRule && typeof currentRule[0] === 'function') {\n            let fn = currentRule[0];\n            return fn.call(this, { element: this.inputElement, value: this.inputElement.value });\n        }\n        else if (FormValidator_1.isCheckable(this.inputElement)) {\n            if (rule !== 'required') {\n                return true;\n            }\n            return selectAll('input[name=' + name + ']:checked', this.element).length > 0;\n        }\n        else {\n            return FormValidator_1.checkValidator[rule](args);\n        }\n    }\n    // Return default error message or custom error message \n    getErrorMessage(ruleValue, rule) {\n        let message = this.inputElement.getAttribute('data-' + rule + '-message') ?\n            this.inputElement.getAttribute('data-' + rule + '-message') :\n            (ruleValue instanceof Array && typeof ruleValue[1] === 'string') ? ruleValue[1] :\n                (Object.keys(this.localyMessage).length !== 0) ? this.localyMessage[rule] : this.defaultMessages[rule];\n        let formats = message.match(/{(\\d)}/g);\n        if (!isNullOrUndefined(formats)) {\n            for (let i = 0; i < formats.length; i++) {\n                let value = ruleValue instanceof Array ? ruleValue[i] : ruleValue;\n                message = message.replace(formats[i], value);\n            }\n        }\n        return message;\n    }\n    // Create error element based on name and error message\n    createErrorElement(name, message, input) {\n        let errorElement = createElement(this.errorElement, {\n            className: this.errorClass,\n            innerHTML: message,\n            attrs: { for: name }\n        });\n        // Create message design if errorOption is message\n        if (this.errorOption === ErrorOption.Message) {\n            errorElement.classList.remove(this.errorClass);\n            errorElement.classList.add('e-message');\n            errorElement = createElement(this.errorContainer, { className: this.errorClass, innerHTML: errorElement.outerHTML });\n        }\n        errorElement.id = this.inputElement.name + '-info';\n        // Append error message into MVC error message element\n        if (this.element.querySelector('[data-valmsg-for=\"' + input.id + '\"]')) {\n            this.element.querySelector('[data-valmsg-for=\"' + input.id + '\"]').appendChild(errorElement);\n        }\n        else if (input.hasAttribute('data-msg-containerid') === true) {\n            // Append error message into custom div element\n            let containerId = input.getAttribute('data-msg-containerid');\n            let divElement = this.element.querySelector('#' + containerId);\n            divElement.appendChild(errorElement);\n        }\n        else if (this.customPlacement != null) {\n            // Call custom placement function if customPlacement is not null\n            this.customPlacement.call(this, this.inputElement, errorElement);\n        }\n        else {\n            this.inputElement.parentNode.insertBefore(errorElement, this.inputElement.nextSibling);\n        }\n        errorElement.style.display = 'block';\n        this.getErrorElement(name);\n        this.validated.push(name);\n        this.checkRequired(name);\n    }\n    // Get error element by name\n    getErrorElement(name) {\n        this.infoElement = select(this.errorElement + '.' + this.errorClass, this.inputElement.parentElement);\n        if (!this.infoElement) {\n            this.infoElement = select(this.errorElement + '.' + this.errorClass + '[for=\"' + name + '\"]', this.element);\n        }\n        return this.infoElement;\n    }\n    // Remove existing rule from errorRules object\n    removeErrorRules(name) {\n        for (let i = 0; i < this.errorRules.length; i++) {\n            let rule = this.errorRules[i];\n            if (rule.name === name) {\n                this.errorRules.splice(i, 1);\n            }\n        }\n    }\n    // Show error message to the input element\n    showMessage(errorRule) {\n        this.infoElement.style.display = 'block';\n        this.infoElement.innerHTML = errorRule.message;\n        this.checkRequired(errorRule.name);\n    }\n    // Hide error message based on input name\n    hideMessage(name) {\n        if (this.infoElement) {\n            this.infoElement.style.display = 'none';\n            this.removeErrorRules(name);\n            this.inputElement.classList.add(this.validClass);\n            this.inputElement.classList.remove(this.errorClass);\n            this.inputElement.setAttribute('aria-invalid', 'false');\n        }\n    }\n    // Check whether the input element have required rule and its value is not empty\n    checkRequired(name) {\n        if (!this.rules[name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {\n            this.infoElement.innerHTML = this.inputElement.value;\n            this.infoElement.setAttribute('aria-invalid', 'false');\n            this.hideMessage(name);\n        }\n    }\n    // Return boolean result if the input have chekcable or submit types\n    static isCheckable(input) {\n        let inputType = input.getAttribute('type');\n        return inputType && (inputType === 'checkbox' || inputType === 'radio' || inputType === 'submit');\n    }\n};\n// List of function to validate the rules\nFormValidator.checkValidator = {\n    required: (option) => {\n        return !isNaN(Date.parse(option.value)) ? !isNaN(new Date(option.value).getTime()) : option.value.toString().length > 0;\n    },\n    email: (option) => {\n        return regex.EMAIL.test(option.value);\n    },\n    url: (option) => {\n        return regex.URL.test(option.value);\n    },\n    dateIso: (option) => {\n        return regex.DATE_ISO.test(option.value);\n    },\n    tel: (option) => {\n        return regex.PHONE.test(option.value);\n    },\n    creditcard: (option) => {\n        return regex.CREDITCARD.test(option.value);\n    },\n    number: (option) => {\n        return !isNaN(Number(option.value)) && option.value.indexOf(' ') === -1;\n    },\n    digits: (option) => {\n        return regex.DIGITS.test(option.value);\n    },\n    maxLength: (option) => {\n        return option.value.length <= option.param;\n    },\n    minLength: (option) => {\n        return option.value.length >= option.param;\n    },\n    rangeLength: (option) => {\n        let param = option.param;\n        return option.value.length >= param[0] && option.value.length <= param[1];\n    },\n    range: (option) => {\n        let param = option.param;\n        return !isNaN(Number(option.value)) && Number(option.value) >= param[0] && Number(option.value) <= param[1];\n    },\n    date: (option) => {\n        return !isNaN(new Date(option.value).getTime());\n    },\n    max: (option) => {\n        if (!isNaN(Number(option.value))) {\n            // Maximum rule validation for number\n            return +option.value <= option.param;\n        }\n        // Maximum rule validation for date\n        return new Date(option.value).getTime() <= new Date(JSON.parse(JSON.stringify(option.param))).getTime();\n    },\n    min: (option) => {\n        if (!isNaN(Number(option.value))) {\n            // Minimum rule validation for number\n            return +option.value >= option.param;\n        }\n        else if ((option.value).indexOf(',') !== -1) {\n            let uNum = (option.value).replace(/,/g, '');\n            return parseFloat(uNum) >= option.param;\n        }\n        else {\n            // Minimum rule validation for date\n            return new Date(option.value).getTime() >= new Date(JSON.parse(JSON.stringify(option.param))).getTime();\n        }\n    },\n    regex: (option) => {\n        return new RegExp(option.param).test(option.value);\n    },\n    equalTo: (option) => {\n        let compareTo = option.formElement.querySelector('#' + option.param);\n        option.param = compareTo.value;\n        return option.param === option.value;\n    },\n};\n__decorate$3([\n    Property('')\n], FormValidator.prototype, \"locale\", void 0);\n__decorate$3([\n    Property('e-hidden')\n], FormValidator.prototype, \"ignore\", void 0);\n__decorate$3([\n    Property()\n], FormValidator.prototype, \"rules\", void 0);\n__decorate$3([\n    Property('e-error')\n], FormValidator.prototype, \"errorClass\", void 0);\n__decorate$3([\n    Property('e-valid')\n], FormValidator.prototype, \"validClass\", void 0);\n__decorate$3([\n    Property('label')\n], FormValidator.prototype, \"errorElement\", void 0);\n__decorate$3([\n    Property('div')\n], FormValidator.prototype, \"errorContainer\", void 0);\n__decorate$3([\n    Property(ErrorOption.Label)\n], FormValidator.prototype, \"errorOption\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"focusout\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"keyup\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"click\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"change\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"submit\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"validationBegin\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"validationComplete\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"customPlacement\", void 0);\nFormValidator = FormValidator_1 = __decorate$3([\n    NotifyPropertyChanges\n], FormValidator);\n\n/**\n * Input box Component\n */\n\nvar __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CONTROL_WRAPPER = 'e-upload e-control-wrapper';\nconst INPUT_WRAPPER = 'e-file-select';\nconst DROP_AREA = 'e-file-drop';\nconst DROP_WRAPPER = 'e-file-select-wrap';\nconst LIST_PARENT = 'e-upload-files';\nconst FILE = 'e-upload-file-list';\nconst STATUS = 'e-file-status';\nconst ACTION_BUTTONS = 'e-upload-actions';\nconst UPLOAD_BUTTONS = 'e-file-upload-btn e-css e-btn e-flat e-primary';\nconst CLEAR_BUTTONS = 'e-file-clear-btn e-css e-btn e-flat';\nconst FILE_NAME = 'e-file-name';\nconst FILE_TYPE = 'e-file-type';\nconst FILE_SIZE = 'e-file-size';\nconst REMOVE_ICON = 'e-file-remove-btn';\nconst DELETE_ICON = 'e-file-delete-btn';\nconst SPINNER_PANE = 'e-spinner-pane';\nconst ABORT_ICON = 'e-file-abort-btn';\nconst RETRY_ICON = 'e-file-reload-btn';\nconst DRAG_HOVER = 'e-upload-drag-hover';\nconst PROGRESS_WRAPPER = 'e-upload-progress-wrap';\nconst PROGRESSBAR = 'e-upload-progress-bar';\nconst PROGRESSBAR_TEXT = 'e-progress-bar-text';\nconst UPLOAD_INPROGRESS = 'e-upload-progress';\nconst UPLOAD_SUCCESS = 'e-upload-success';\nconst UPLOAD_FAILED = 'e-upload-fails';\nconst TEXT_CONTAINER = 'e-file-container';\nconst VALIDATION_FAILS = 'e-validation-fails';\nconst RTL = 'e-rtl';\nconst DISABLED = 'e-disabled';\nconst RTL_CONTAINER = 'e-rtl-container';\nconst ICON_FOCUSED = 'e-clear-icon-focus';\nconst PROGRESS_INNER_WRAPPER = 'e-progress-inner-wrap';\nconst PAUSE_UPLOAD = 'e-file-pause-btn';\nconst RESUME_UPLOAD = 'e-file-play-btn';\nconst RESTRICT_RETRY = 'e-restrict-retry';\nconst wrapperAttr$1 = ['title', 'style', 'class'];\nconst FORM_UPLOAD = 'e-form-upload';\nconst HIDDEN_INPUT = 'e-hidden-file-input';\nconst INVALID_FILE = 'e-file-invalid';\nconst INFORMATION = 'e-file-information';\nclass FilesProp extends ChildProperty {\n}\n__decorate$4([\n    Property('')\n], FilesProp.prototype, \"name\", void 0);\n__decorate$4([\n    Property(null)\n], FilesProp.prototype, \"size\", void 0);\n__decorate$4([\n    Property('')\n], FilesProp.prototype, \"type\", void 0);\nclass ButtonsProps extends ChildProperty {\n}\n__decorate$4([\n    Property('Browse...')\n], ButtonsProps.prototype, \"browse\", void 0);\n__decorate$4([\n    Property('Upload')\n], ButtonsProps.prototype, \"upload\", void 0);\n__decorate$4([\n    Property('Clear')\n], ButtonsProps.prototype, \"clear\", void 0);\nclass AsyncSettings extends ChildProperty {\n}\n__decorate$4([\n    Property('')\n], AsyncSettings.prototype, \"saveUrl\", void 0);\n__decorate$4([\n    Property('')\n], AsyncSettings.prototype, \"removeUrl\", void 0);\n__decorate$4([\n    Property(0)\n], AsyncSettings.prototype, \"chunkSize\", void 0);\n__decorate$4([\n    Property(3)\n], AsyncSettings.prototype, \"retryCount\", void 0);\n__decorate$4([\n    Property(500)\n], AsyncSettings.prototype, \"retryAfterDelay\", void 0);\n/**\n * The uploader component allows to upload images, documents, and other files from local to server.\n * ```html\n * <input type='file' name='images[]' id='upload'/>\n * ```\n * ```typescript\n * <script>\n *   var uploadObj = new Uploader();\n *   uploadObj.appendTo('#upload');\n * </script>\n * ```\n */\nlet Uploader = class Uploader extends Component {\n    /**\n     * Triggers when change the Uploader value.\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.initialAttr = { accept: null, multiple: false, disabled: false };\n        this.uploadedFilesData = [];\n        this.base64String = [];\n        this.isForm = false;\n        this.allTypes = false;\n        this.pausedData = [];\n        this.uploadMetaData = [];\n        this.tabIndex = '0';\n        this.btnTabIndex = '0';\n        this.disableKeyboardNavigation = false;\n        this.count = -1;\n        this.actionCompleteCount = 0;\n        this.flag = true;\n        this.selectedFiles = [];\n        this.uploaderName = 'UploadFiles';\n        this.fileStreams = [];\n        this.newFileRef = 0;\n        this.isFirstFileOnSelection = false;\n        /**\n         * Get the file item(li) which are shown in file list.\n         * @private\n         */\n        this.fileList = [];\n        /**\n         * Get the data of files which are shown in file list.\n         * @private\n         */\n        this.filesData = [];\n        this.uploaderOptions = options;\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'allowedExtensions':\n                    this.setExtensions(this.allowedExtensions);\n                    this.clearAll();\n                    break;\n                case 'enabled':\n                    this.setControlStatus();\n                    break;\n                case 'multiple':\n                    this.setMultipleSelection();\n                    break;\n                case 'enableRtl':\n                    this.setRTL();\n                    this.reRenderFileList();\n                    break;\n                case 'buttons':\n                    this.buttons.browse = isNullOrUndefined(this.buttons.browse) ? '' : this.buttons.browse;\n                    this.buttons.clear = isNullOrUndefined(this.buttons.clear) ? '' : this.buttons.clear;\n                    this.buttons.upload = isNullOrUndefined(this.buttons.upload) ? '' : this.buttons.upload;\n                    this.renderButtonTemplates();\n                    break;\n                case 'dropArea':\n                    this.unBindDropEvents();\n                    this.updateDropArea();\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttrToElement();\n                    this.updateHTMLAttrToWrapper();\n                    this.checkHTMLAttributes(true);\n                    break;\n                case 'files':\n                    this.renderPreLoadFiles();\n                    break;\n                case 'directoryUpload':\n                    this.updateDirectoryAttributes();\n                    break;\n                case 'template':\n                    if (!this.isServerBlazor) {\n                        this.clearAll();\n                    }\n                    break;\n                case 'minFileSize':\n                case 'maxFileSize':\n                case 'autoUpload':\n                    this.clearAll();\n                    break;\n                case 'sequentialUpload':\n                    this.clearAll();\n                    break;\n                case 'locale':\n                    this.l10n.setLocale(this.locale);\n                    this.setLocalizedTexts();\n                    this.preLocaleObj = getValue('currentLocale', this.l10n);\n                    break;\n                case 'cssClass':\n                    this.setCSSClass(oldProp.cssClass);\n                    break;\n            }\n        }\n    }\n    setLocalizedTexts() {\n        if (isNullOrUndefined(this.template)) {\n            if (typeof (this.buttons.browse) === 'string') {\n                this.browseButton.innerText = (this.buttons.browse === 'Browse...') ?\n                    this.localizedTexts('Browse') : this.buttons.browse;\n                this.browseButton.setAttribute('title', this.browseButton.innerText);\n                if (this.uploadWrapper && !isNullOrUndefined(this.uploadWrapper.querySelector('.' + DROP_AREA))) {\n                    this.uploadWrapper.querySelector('.' + DROP_AREA).innerHTML = this.localizedTexts('dropFilesHint');\n                }\n            }\n            this.updateFileList();\n        }\n    }\n    getKeyValue(val) {\n        let keyValue;\n        for (let key of Object.keys(this.preLocaleObj)) {\n            if (this.preLocaleObj[key] === val) {\n                keyValue = key;\n            }\n        }\n        return keyValue;\n    }\n    updateFileList() {\n        let element;\n        /* istanbul ignore next */\n        if (this.fileList.length > 0 && !isNullOrUndefined(this.uploadWrapper.querySelector('.' + LIST_PARENT))) {\n            for (let i = 0; i < this.fileList.length; i++) {\n                element = this.fileList[i].querySelector('.e-file-status');\n                element.innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[i].status));\n                this.filesData[i].status = this.localizedTexts(this.getKeyValue(this.filesData[i].status));\n                if (this.fileList[i].classList.contains(UPLOAD_SUCCESS)) {\n                    this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('delete'));\n                }\n                if (this.fileList[i].querySelector('.e-file-play-btn')) {\n                    this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('resume'));\n                }\n                if (this.fileList[i].querySelector('.e-file-remove-btn')) {\n                    this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('remove'));\n                }\n                if (this.fileList[i].querySelector('.e-file-reload-btn')) {\n                    this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('retry'));\n                }\n                if (!this.autoUpload) {\n                    this.uploadButton.innerText = (this.buttons.upload === 'Upload') ?\n                        this.localizedTexts('Upload') : this.buttons.upload;\n                    this.uploadButton.setAttribute('title', this.localizedTexts('Upload'));\n                    this.clearButton.innerText = (this.buttons.clear === 'Clear') ?\n                        this.localizedTexts('Clear') : this.buttons.clear;\n                    this.clearButton.setAttribute('title', this.localizedTexts('Clear'));\n                }\n            }\n        }\n    }\n    reRenderFileList() {\n        if (this.listParent) {\n            detach(this.listParent);\n            this.listParent = null;\n            this.fileList = [];\n            this.createFileList(this.filesData);\n            if (this.actionButtons) {\n                this.removeActionButtons();\n                this.renderActionButtons();\n                this.checkActionButtonStatus();\n            }\n        }\n    }\n    preRender() {\n        this.localeText = { Browse: 'Browse...', Clear: 'Clear', Upload: 'Upload',\n            dropFilesHint: 'Or drop files here', invalidMaxFileSize: 'File size is too large',\n            invalidMinFileSize: 'File size is too small', invalidFileType: 'File type is not allowed',\n            uploadFailedMessage: 'File failed to upload', uploadSuccessMessage: 'File uploaded successfully',\n            removedSuccessMessage: 'File removed successfully', removedFailedMessage: 'Unable to remove file', inProgress: 'Uploading',\n            readyToUploadMessage: 'Ready to upload', abort: 'Abort', remove: 'Remove', cancel: 'Cancel', delete: 'Delete file',\n            pauseUpload: 'File upload paused', pause: 'Pause', resume: 'Resume', retry: 'Retry',\n            fileUploadCancel: 'File upload canceled', invalidFileSelection: 'Invalid files selected', totalFiles: 'Total files',\n            size: 'Size'\n        };\n        this.l10n = new L10n('uploader', this.localeText, this.locale);\n        this.preLocaleObj = getValue('currentLocale', this.l10n);\n        this.isServerBlazor = (isBlazor() && this.isServerRendered) ? true : false;\n        this.isBlazorTemplate = this.isServerBlazor && this.template !== '' && !isNullOrUndefined(this.template) ? true : false;\n        this.isBlazorSaveUrl = (this.isServerRendered &&\n            (this.asyncSettings.saveUrl === '' || isNullOrUndefined(this.asyncSettings.saveUrl))) ? true : false;\n        if (this.isBlazorSaveUrl && this.sequentialUpload) {\n            this.sequentialUpload = false;\n        }\n        if (!this.isBlazorSaveUrl) {\n            this.formRendered();\n        }\n        if (!this.isServerBlazor) {\n            this.updateHTMLAttrToElement();\n            this.checkHTMLAttributes(false);\n            // tslint:disable-next-line\n            let ejInstance = getValue('ej2_instances', this.element);\n            /* istanbul ignore next */\n            if (this.element.tagName === 'EJS-UPLOADER') {\n                let inputElement = this.createElement('input', { attrs: { type: 'file' } });\n                let index = 0;\n                for (index; index < this.element.attributes.length; index++) {\n                    inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);\n                    inputElement.innerHTML = this.element.innerHTML;\n                }\n                if (!inputElement.hasAttribute('name')) {\n                    inputElement.setAttribute('name', 'UploadFiles');\n                }\n                this.element.appendChild(inputElement);\n                this.element = inputElement;\n                setValue('ej2_instances', ejInstance, this.element);\n            }\n            /* istanbul ignore next */\n            if (ejInstance[0].isPureReactComponent) {\n                if (!isNullOrUndefined(ejInstance[0].props.name)) {\n                    this.element.setAttribute('name', ejInstance[0].props.name);\n                }\n                else if (!isNullOrUndefined(ejInstance[0].props.id) && isNullOrUndefined(ejInstance[0].props.name)) {\n                    this.element.setAttribute('name', ejInstance[0].props.id);\n                }\n                else {\n                    this.element.setAttribute('name', 'UploadFiles');\n                }\n            }\n            if (isNullOrUndefined(this.element.getAttribute('name'))) {\n                this.element.setAttribute('name', this.element.getAttribute('id'));\n            }\n            if (!this.element.hasAttribute('type')) {\n                this.element.setAttribute('type', 'file');\n            }\n            this.updateDirectoryAttributes();\n        }\n        this.keyConfigs = {\n            enter: 'enter'\n        };\n        if (this.element.hasAttribute('tabindex')) {\n            this.tabIndex = this.element.getAttribute('tabindex');\n        }\n        this.browserName = Browser.info.name;\n        this.uploaderName = this.element.getAttribute('name');\n    }\n    formRendered() {\n        let parentEle = closest(this.element, 'form');\n        if (!isNullOrUndefined(parentEle)) {\n            for (; parentEle && parentEle !== document.documentElement; parentEle = parentEle.parentElement) {\n                if (parentEle.tagName === 'FORM') {\n                    this.isForm = true;\n                    this.formElement = parentEle;\n                    parentEle.setAttribute('enctype', 'multipart/form-data');\n                    parentEle.setAttribute('encoding', 'multipart/form-data');\n                }\n            }\n        }\n    }\n    getPersistData() {\n        return this.addOnPersist(['filesData']);\n    }\n    /**\n     * Return the module name of the component.\n     */\n    getModuleName() {\n        return 'uploader';\n    }\n    updateDirectoryAttributes() {\n        if (this.directoryUpload) {\n            this.element.setAttribute('directory', 'true');\n            this.element.setAttribute('webkitdirectory', 'true');\n        }\n        else {\n            this.element.removeAttribute('directory');\n            this.element.removeAttribute('webkitdirectory');\n        }\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        if (!this.isServerBlazor) {\n            this.renderBrowseButton();\n            this.initializeUpload();\n            this.updateHTMLAttrToWrapper();\n            this.wireEvents();\n            this.setMultipleSelection();\n            this.setExtensions(this.allowedExtensions);\n            this.setRTL();\n            this.renderPreLoadFiles();\n            this.setControlStatus();\n            this.setCSSClass();\n        }\n        else {\n            this.dropAreaWrapper = closest(this.element, '.' + DROP_WRAPPER);\n            this.uploadWrapper = closest(this.element, '.e-upload.e-control-wrapper');\n            this.browseButton = this.dropAreaWrapper.querySelector('button.e-upload-browse-btn');\n            this.setDropArea();\n            this.renderPreLoadFiles();\n            this.wireEvents();\n        }\n        this.renderComplete();\n    }\n    renderBrowseButton() {\n        this.browseButton = this.createElement('button', { className: 'e-css e-btn', attrs: { 'type': 'button' } });\n        this.browseButton.setAttribute('tabindex', this.tabIndex);\n        if (typeof (this.buttons.browse) === 'string') {\n            this.browseButton.textContent = (this.buttons.browse === 'Browse...') ?\n                this.localizedTexts('Browse') : this.buttons.browse;\n            this.browseButton.setAttribute('title', this.browseButton.innerText);\n        }\n        else {\n            this.browseButton.appendChild(this.buttons.browse);\n        }\n        this.element.setAttribute('aria-label', 'Uploader');\n    }\n    renderActionButtons() {\n        this.element.setAttribute('tabindex', '-1');\n        if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            this.actionButtons = this.createElement('div', { className: ACTION_BUTTONS });\n            this.uploadButton = this.createElement('button', { className: UPLOAD_BUTTONS,\n                attrs: { 'type': 'button', 'tabindex': this.btnTabIndex } });\n            this.clearButton = this.createElement('button', { className: CLEAR_BUTTONS,\n                attrs: { 'type': 'button', 'tabindex': this.btnTabIndex } });\n            this.actionButtons.appendChild(this.clearButton);\n            this.actionButtons.appendChild(this.uploadButton);\n            this.renderButtonTemplates();\n            this.uploadWrapper.appendChild(this.actionButtons);\n            this.browseButton.blur();\n            this.uploadButton.focus();\n            this.wireActionButtonEvents();\n        }\n    }\n    /* istanbul ignore next */\n    serverActionButtonsEventBind(element) {\n        if (element && !this.isForm) {\n            this.browseButton.blur();\n            this.actionButtons = element;\n            this.uploadButton = this.actionButtons.querySelector('.e-file-upload-btn');\n            this.clearButton = this.actionButtons.querySelector('.e-file-clear-btn');\n            this.uploadButton.focus();\n            this.unwireActionButtonEvents();\n            this.wireActionButtonEvents();\n            this.checkActionButtonStatus();\n        }\n    }\n    /* istanbul ignore next */\n    serverUlElement(element) {\n        if (element) {\n            if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n                this.listParent = element;\n                this.fileList = [].slice.call(this.listParent.querySelectorAll('li'));\n                this.serverRemoveIconBindEvent();\n                if (!this.isForm) {\n                    this.checkAutoUpload(this.filesData);\n                }\n            }\n        }\n    }\n    wireActionButtonEvents() {\n        EventHandler.add(this.uploadButton, 'click', this.uploadButtonClick, this);\n        EventHandler.add(this.clearButton, 'click', this.clearButtonClick, this);\n    }\n    unwireActionButtonEvents() {\n        EventHandler.remove(this.uploadButton, 'click', this.uploadButtonClick);\n        EventHandler.remove(this.clearButton, 'click', this.clearButtonClick);\n    }\n    removeActionButtons() {\n        if (this.actionButtons) {\n            this.unwireActionButtonEvents();\n            if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n                detach(this.actionButtons);\n            }\n            this.actionButtons = null;\n        }\n    }\n    renderButtonTemplates() {\n        if (typeof (this.buttons.browse) === 'string') {\n            this.browseButton.textContent = (this.buttons.browse === 'Browse...') ?\n                this.localizedTexts('Browse') : this.buttons.browse;\n            this.browseButton.setAttribute('title', this.browseButton.textContent);\n        }\n        else {\n            this.browseButton.innerHTML = '';\n            this.browseButton.appendChild(this.buttons.browse);\n        }\n        if (this.uploadButton) {\n            let uploadText;\n            uploadText = isNullOrUndefined(this.buttons.upload) ? 'Upload' : this.buttons.upload;\n            this.buttons.upload = uploadText;\n            if (typeof (this.buttons.upload) === 'string') {\n                this.uploadButton.textContent = (this.buttons.upload === 'Upload') ?\n                    this.localizedTexts('Upload') : this.buttons.upload;\n                this.uploadButton.setAttribute('title', this.uploadButton.textContent);\n            }\n            else {\n                this.uploadButton.innerHTML = '';\n                this.uploadButton.appendChild(this.buttons.upload);\n            }\n        }\n        if (this.clearButton) {\n            let clearText;\n            clearText = isNullOrUndefined(this.buttons.clear) ? 'Clear' : this.buttons.clear;\n            this.buttons.clear = clearText;\n            if (typeof (this.buttons.clear) === 'string') {\n                this.clearButton.textContent = (this.buttons.clear === 'Clear') ?\n                    this.localizedTexts('Clear') : this.buttons.clear;\n                this.clearButton.setAttribute('title', this.clearButton.textContent);\n            }\n            else {\n                this.clearButton.innerHTML = '';\n                this.clearButton.appendChild(this.buttons.clear);\n            }\n        }\n    }\n    initializeUpload() {\n        this.element.setAttribute('tabindex', '-1');\n        let inputWrapper = this.createElement('span', { className: INPUT_WRAPPER });\n        this.element.parentElement.insertBefore(inputWrapper, this.element);\n        this.dropAreaWrapper = this.createElement('div', { className: DROP_WRAPPER });\n        this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element);\n        inputWrapper.appendChild(this.element);\n        this.dropAreaWrapper.appendChild(this.browseButton);\n        this.dropAreaWrapper.appendChild(inputWrapper);\n        this.uploadWrapper = this.createElement('div', { className: CONTROL_WRAPPER });\n        this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper);\n        this.uploadWrapper.appendChild(this.dropAreaWrapper);\n        this.setDropArea();\n    }\n    renderPreLoadFiles() {\n        if (this.files.length) {\n            if (this.enablePersistence && this.filesData.length) {\n                this.createFileList(this.filesData);\n                return;\n            }\n            if (isNullOrUndefined(this.files[0].size)) {\n                return;\n            }\n            let files = [].slice.call(this.files);\n            let filesData = [];\n            if (!this.multiple) {\n                this.clearData();\n                files = [files[0]];\n            }\n            for (let data of files) {\n                let fileData = {\n                    name: data.name + '.' + data.type.split('.')[data.type.split('.').length - 1],\n                    rawFile: '',\n                    size: data.size,\n                    status: this.localizedTexts('uploadSuccessMessage'),\n                    type: data.type,\n                    validationMessages: { minSize: '', maxSize: '' },\n                    statusCode: '2'\n                };\n                filesData.push(fileData);\n                this.filesData.push(fileData);\n            }\n            this.createFileList(filesData);\n            if (!this.autoUpload && this.listParent && !this.actionButtons && (!this.isForm || this.allowUpload()) && this.showFileList) {\n                this.renderActionButtons();\n            }\n            this.checkActionButtonStatus();\n            if (this.sequentialUpload) {\n                this.count = this.filesData.length - 1;\n            }\n        }\n    }\n    checkActionButtonStatus() {\n        if (this.actionButtons) {\n            let length = this.uploadWrapper.querySelectorAll('.' + VALIDATION_FAILS).length +\n                this.uploadWrapper.querySelectorAll('.e-upload-fails:not(.e-upload-progress)').length +\n                this.uploadWrapper.querySelectorAll('span.' + UPLOAD_SUCCESS).length +\n                this.uploadWrapper.querySelectorAll('span.' + UPLOAD_INPROGRESS).length;\n            if (length > 0 && length === this.uploadWrapper.querySelectorAll('li').length) {\n                this.uploadButton.setAttribute('disabled', 'disabled');\n            }\n            else {\n                this.uploadButton.removeAttribute('disabled');\n            }\n        }\n    }\n    setDropArea() {\n        let dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');\n        if (this.dropArea) {\n            this.dropZoneElement = (typeof (this.dropArea) !== 'string') ? this.dropArea :\n                document.querySelector(this.dropArea);\n            let element = this.element;\n            let enableDropText = false;\n            while (element.parentNode) {\n                element = element.parentNode;\n                if (element === this.dropZoneElement) {\n                    enableDropText = true;\n                    if (!dropTextArea) {\n                        this.createDropTextHint();\n                    }\n                    else if (!this.isServerBlazor) {\n                        dropTextArea.innerHTML = this.localizedTexts('dropFilesHint');\n                    }\n                }\n            }\n            if (!enableDropText && dropTextArea) {\n                dropTextArea.remove();\n            }\n        }\n        else if (!isNullOrUndefined(this.uploaderOptions) && this.uploaderOptions.dropArea === undefined) {\n            this.createDropTextHint();\n            this.dropZoneElement = this.uploadWrapper;\n            this.setProperties({ dropArea: this.uploadWrapper }, true);\n        }\n        this.bindDropEvents();\n    }\n    updateDropArea() {\n        if (this.dropArea) {\n            this.setDropArea();\n        }\n        else {\n            this.dropZoneElement = null;\n            let dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');\n            if (dropTextArea) {\n                dropTextArea.remove();\n            }\n        }\n    }\n    createDropTextHint() {\n        if (!this.isServerBlazor) {\n            let fileDropArea = this.createElement('span', { className: DROP_AREA });\n            fileDropArea.innerHTML = this.localizedTexts('dropFilesHint');\n            this.dropAreaWrapper.appendChild(fileDropArea);\n        }\n    }\n    updateHTMLAttrToElement() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let pro of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttr$1.indexOf(pro) < 0) {\n                    this.element.setAttribute(pro, this.htmlAttributes[pro]);\n                }\n            }\n        }\n    }\n    updateHTMLAttrToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let pro of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttr$1.indexOf(pro) > -1) {\n                    if (pro === 'class') {\n                        let updatedClassValues = (this.htmlAttributes[pro].replace(/\\s+/g, ' ')).trim();\n                        if (updatedClassValues !== '') {\n                            addClass([this.uploadWrapper], updatedClassValues.split(' '));\n                        }\n                    }\n                    else if (pro === 'style') {\n                        let uploadStyle = this.uploadWrapper.getAttribute(pro);\n                        uploadStyle = !isNullOrUndefined(uploadStyle) ? (uploadStyle + this.htmlAttributes[pro]) :\n                            this.htmlAttributes[pro];\n                        this.uploadWrapper.setAttribute(pro, uploadStyle);\n                    }\n                    else {\n                        this.uploadWrapper.setAttribute(pro, this.htmlAttributes[pro]);\n                    }\n                }\n            }\n        }\n    }\n    setMultipleSelection() {\n        if (this.multiple && !this.element.hasAttribute('multiple')) {\n            let newAttr = document.createAttribute('multiple');\n            newAttr.value = 'multiple';\n            this.element.setAttributeNode(newAttr);\n        }\n        else if (!this.multiple) {\n            this.element.removeAttribute('multiple');\n        }\n    }\n    checkAutoUpload(fileData) {\n        if (this.autoUpload) {\n            if (this.sequentialUpload) {\n                /* istanbul ignore next */\n                this.sequenceUpload(fileData);\n            }\n            else {\n                this.upload(fileData);\n            }\n            this.removeActionButtons();\n        }\n        else if (!this.actionButtons) {\n            this.renderActionButtons();\n        }\n        this.checkActionButtonStatus();\n    }\n    sequenceUpload(fileData) {\n        if (this.filesData.length - fileData.length === 0 ||\n            this.filesData[(this.filesData.length - fileData.length - 1)].statusCode !== '1') {\n            ++this.count;\n            let isFileListCreated = this.showFileList ? false : true;\n            if (typeof this.filesData[this.count] === 'object') {\n                this.isFirstFileOnSelection = false;\n                this.upload(this.filesData[this.count], isFileListCreated);\n                if (this.filesData[this.count].statusCode === '0') {\n                    this.sequenceUpload(fileData);\n                }\n            }\n            else {\n                --this.count;\n            }\n        }\n    }\n    setCSSClass(oldCSSClass) {\n        let updatedCssClassValue = this.cssClass;\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            updatedCssClassValue = (this.cssClass.replace(/\\s+/g, ' ')).trim();\n        }\n        if (!isNullOrUndefined(this.cssClass) && updatedCssClassValue !== '') {\n            addClass([this.uploadWrapper], updatedCssClassValue.split(updatedCssClassValue.indexOf(',') > -1 ? ',' : ' '));\n        }\n        let updatedOldCssClass = oldCSSClass;\n        if (!isNullOrUndefined(oldCSSClass)) {\n            updatedOldCssClass = (oldCSSClass.replace(/\\s+/g, ' ')).trim();\n        }\n        if (!isNullOrUndefined(oldCSSClass) && updatedOldCssClass !== '') {\n            removeClass([this.uploadWrapper], updatedOldCssClass.split(' '));\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.browseButton, 'click', this.browseButtonClick, this);\n        EventHandler.add(this.element, 'change', this.onSelectFiles, this);\n        EventHandler.add(document, 'click', this.removeFocus, this);\n        this.keyboardModule = new KeyboardEvents(this.uploadWrapper, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n        if (this.isForm) {\n            EventHandler.add(this.formElement, 'reset', this.resetForm, this);\n        }\n    }\n    unWireEvents() {\n        EventHandler.remove(this.browseButton, 'click', this.browseButtonClick);\n        EventHandler.remove(this.element, 'change', this.onSelectFiles);\n        EventHandler.remove(document, 'click', this.removeFocus);\n        if (this.isForm) {\n            EventHandler.remove(this.formElement, 'reset', this.resetForm);\n        }\n        this.keyboardModule.destroy();\n    }\n    resetForm() {\n        this.clearAll();\n    }\n    keyActionHandler(e) {\n        let targetElement = e.target;\n        switch (e.action) {\n            case 'enter':\n                if (e.target === this.clearButton) {\n                    this.clearButtonClick();\n                }\n                else if (e.target === this.uploadButton) {\n                    this.uploadButtonClick();\n                }\n                else if (e.target === this.browseButton) {\n                    this.browseButtonClick();\n                }\n                else if (targetElement.classList.contains(PAUSE_UPLOAD)) {\n                    let metaData = this.getCurrentMetaData(null, e);\n                    metaData.file.statusCode = '4';\n                    metaData.file.status = this.localizedTexts('pauseUpload');\n                    this.abortUpload(metaData, false);\n                }\n                else if (targetElement.classList.contains(RESUME_UPLOAD)) {\n                    this.resumeUpload(this.getCurrentMetaData(null, e), e);\n                }\n                else if (targetElement.classList.contains(RETRY_ICON)) {\n                    let metaData = this.getCurrentMetaData(null, e);\n                    if (!isNullOrUndefined(metaData)) {\n                        metaData.file.statusCode = '1';\n                        metaData.file.status = this.localizedTexts('readyToUploadMessage');\n                        this.chunkUpload(metaData.file);\n                    }\n                    else {\n                        let target = e.target.parentElement;\n                        let fileData = this.filesData[this.fileList.indexOf(target)];\n                        this.retry(fileData);\n                    }\n                }\n                else {\n                    this.removeFiles(e);\n                    if (!targetElement.classList.contains(ABORT_ICON)) {\n                        this.browseButton.focus();\n                    }\n                }\n                e.preventDefault();\n                e.stopPropagation();\n                break;\n        }\n    }\n    getCurrentMetaData(fileInfo, e) {\n        let fileData;\n        let targetMetaData;\n        if (isNullOrUndefined(fileInfo)) {\n            let target = e.target.parentElement;\n            fileData = this.filesData[this.fileList.indexOf(target)];\n        }\n        else {\n            fileData = fileInfo;\n        }\n        for (let i = 0; i < this.uploadMetaData.length; i++) {\n            if (this.uploadMetaData[i].file.name === fileData.name) {\n                targetMetaData = this.uploadMetaData[i];\n            }\n        }\n        return targetMetaData;\n    }\n    removeFocus() {\n        if (this.uploadWrapper && this.listParent && this.listParent.querySelector('.' + ICON_FOCUSED)) {\n            document.activeElement.blur();\n            this.listParent.querySelector('.' + ICON_FOCUSED).classList.remove(ICON_FOCUSED);\n        }\n    }\n    browseButtonClick() {\n        this.element.click();\n    }\n    uploadButtonClick() {\n        if (this.sequentialUpload) {\n            this.sequenceUpload(this.filesData);\n        }\n        else {\n            this.upload(this.filesData);\n        }\n    }\n    clearButtonClick() {\n        this.clearAll();\n        /* istanbul ignore next */\n        if (this.sequentialUpload) {\n            this.count = -1;\n        }\n        this.actionCompleteCount = 0;\n    }\n    bindDropEvents() {\n        if (this.dropZoneElement) {\n            EventHandler.add(this.dropZoneElement, 'drop', this.dropElement, this);\n            EventHandler.add(this.dropZoneElement, 'dragover', this.dragHover, this);\n            EventHandler.add(this.dropZoneElement, 'dragleave', this.onDragLeave, this);\n            EventHandler.add(this.dropZoneElement, 'paste', this.onPasteFile, this);\n        }\n    }\n    unBindDropEvents() {\n        if (this.dropZoneElement) {\n            EventHandler.remove(this.dropZoneElement, 'drop', this.dropElement);\n            EventHandler.remove(this.dropZoneElement, 'dragover', this.dragHover);\n            EventHandler.remove(this.dropZoneElement, 'dragleave', this.onDragLeave);\n        }\n    }\n    onDragLeave(e) {\n        this.dropZoneElement.classList.remove(DRAG_HOVER);\n    }\n    dragHover(e) {\n        if (!this.enabled) {\n            return;\n        }\n        this.dropZoneElement.classList.add(DRAG_HOVER);\n        if (this.dropEffect !== 'Default') {\n            e.dataTransfer.dropEffect = this.dropEffect.toLowerCase();\n        }\n        e.preventDefault();\n        e.stopPropagation();\n    }\n    /* istanbul ignore next */\n    dropElement(e) {\n        this.dropZoneElement.classList.remove(DRAG_HOVER);\n        this.onSelectFiles(e);\n        e.preventDefault();\n        e.stopPropagation();\n    }\n    /* istanbul ignore next */\n    onPasteFile(event) {\n        let item = event.clipboardData.items;\n        if (item.length !== 1) {\n            return;\n        }\n        let pasteFile = [].slice.call(item)[0];\n        if ((pasteFile.kind === 'file') && pasteFile.type.match('^image/')) {\n            this.renderSelectedFiles(event, [pasteFile.getAsFile()], false, true);\n        }\n    }\n    getSelectedFiles(index) {\n        let data = [];\n        let liElement = this.fileList[index];\n        let allFiles = this.getFilesData();\n        let nameElements = +liElement.getAttribute('data-files-count');\n        let startIndex = 0;\n        for (let i = 0; i < index; i++) {\n            startIndex += (+this.fileList[i].getAttribute('data-files-count'));\n        }\n        for (let j = startIndex; j < (startIndex + nameElements); j++) {\n            data.push(allFiles[j]);\n        }\n        return data;\n    }\n    removeFiles(args) {\n        if (!this.enabled) {\n            return;\n        }\n        let selectedElement = args.target.parentElement;\n        if (this.isBlazorSaveUrl) {\n            this.fileList = [].slice.call(this.uploadWrapper.querySelectorAll('li'));\n        }\n        let index = this.fileList.indexOf(selectedElement);\n        let liElement = this.fileList[index];\n        let formUpload = this.isFormUpload();\n        let fileData = formUpload ? this.getSelectedFiles(index) : this.getFilesInArray(this.filesData[index]);\n        if (isNullOrUndefined(fileData)) {\n            return;\n        }\n        if (args.target.classList.contains(ABORT_ICON) && !formUpload) {\n            fileData[0].statusCode = '5';\n            if (!isNullOrUndefined(liElement)) {\n                let spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n                createSpinner({ target: spinnerTarget, width: '20px' });\n                showSpinner(spinnerTarget);\n            }\n            if (this.sequentialUpload) {\n                /* istanbul ignore next */\n                this.uploadSequential();\n            }\n            if (!(liElement.classList.contains(RESTRICT_RETRY))) {\n                this.checkActionComplete(true);\n            }\n        }\n        else if (!closest(args.target, '.' + SPINNER_PANE)) {\n            this.remove(fileData, false, false, true, args);\n        }\n        this.element.value = '';\n        this.checkActionButtonStatus();\n    }\n    removeFilesData(file, customTemplate) {\n        let index;\n        if (customTemplate) {\n            if (!this.showFileList) {\n                index = this.filesData.indexOf(file);\n                this.filesData.splice(index, 1);\n            }\n            return;\n        }\n        let selectedElement = this.getLiElement(file);\n        if (isNullOrUndefined(selectedElement)) {\n            return;\n        }\n        if (!this.isBlazorSaveUrl) {\n            detach(selectedElement);\n        }\n        index = this.fileList.indexOf(selectedElement);\n        this.fileList.splice(index, 1);\n        this.filesData.splice(index, 1);\n        if (!this.isBlazorSaveUrl) {\n            if (this.fileList.length === 0 && !isNullOrUndefined(this.listParent)) {\n                detach(this.listParent);\n                this.listParent = null;\n                this.removeActionButtons();\n            }\n            if (this.sequentialUpload) {\n                /* istanbul ignore next */\n                if (index <= this.count) {\n                    --this.count;\n                }\n            }\n        }\n        else {\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('removeFileData', index);\n        }\n    }\n    removeUploadedFile(file, eventArgs, removeDirectly, custom) {\n        let selectedFiles = file;\n        let ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);\n        ajax.emitError = false;\n        let formData = new FormData();\n        ajax.beforeSend = (e) => {\n            eventArgs.currentRequest = ajax.httpRequest;\n            if (isBlazor()) {\n                if (this.currentRequestHeader) {\n                    this.updateCustomheader(ajax.httpRequest, this.currentRequestHeader);\n                }\n                if (this.customFormDatas) {\n                    this.updateFormData(formData, this.customFormDatas);\n                }\n            }\n            if (!removeDirectly) {\n                this.trigger('removing', eventArgs, (eventArgs) => {\n                    if (eventArgs.cancel) {\n                        e.cancel = true;\n                    }\n                    else {\n                        this.removingEventCallback(eventArgs, formData, selectedFiles, file);\n                    }\n                });\n            }\n            else {\n                this.removingEventCallback(eventArgs, formData, selectedFiles, file);\n            }\n        };\n        if (this.isServerBlazor) {\n            let name = this.element.getAttribute('name');\n            if (!isNullOrUndefined(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {\n                formData.append(name, selectedFiles.rawFile, selectedFiles.name);\n            }\n            else {\n                formData.append(name, selectedFiles.name);\n            }\n        }\n        ajax.onLoad = (e) => { this.removeCompleted(e, selectedFiles, custom); return {}; };\n        /* istanbul ignore next */\n        ajax.onError = (e) => { this.removeFailed(e, selectedFiles, custom); return {}; };\n        ajax.send(formData);\n    }\n    removingEventCallback(eventArgs, formData, selectedFiles, file) {\n        /* istanbul ignore next */\n        let name = this.element.getAttribute('name');\n        let liElement = this.getLiElement(file);\n        if (!isNullOrUndefined(liElement) && (!isNullOrUndefined(liElement.querySelector('.' + DELETE_ICON)) ||\n            !isNullOrUndefined(liElement.querySelector('.' + REMOVE_ICON)))) {\n            let spinnerTarget;\n            spinnerTarget = liElement.querySelector('.' + DELETE_ICON) ? liElement.querySelector('.' + DELETE_ICON) :\n                liElement.querySelector('.' + REMOVE_ICON);\n            createSpinner({ target: spinnerTarget, width: '20px' });\n            showSpinner(spinnerTarget);\n        }\n        if (!this.isServerBlazor) {\n            if (eventArgs.postRawFile && !isNullOrUndefined(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {\n                formData.append(name, selectedFiles.rawFile, selectedFiles.name);\n            }\n            else {\n                formData.append(name, selectedFiles.name);\n            }\n            this.updateFormData(formData, eventArgs.customFormData);\n        }\n    }\n    /* istanbul ignore next */\n    updateFormData(formData, customData) {\n        if (customData.length > 0 && customData[0]) {\n            for (let i = 0; i < customData.length; i++) {\n                let data = customData[i];\n                // tslint:disable-next-line\n                let value = Object.keys(data).map(function (e) {\n                    return data[e];\n                });\n                formData.append(Object.keys(data)[0], value);\n            }\n        }\n    }\n    /* istanbul ignore next */\n    updateCustomheader(request, currentRequest) {\n        if (currentRequest.length > 0 && currentRequest[0]) {\n            for (let i = 0; i < currentRequest.length; i++) {\n                let data = currentRequest[i];\n                // tslint:disable-next-line\n                let value = Object.keys(data).map(function (e) {\n                    return data[e];\n                });\n                request.setRequestHeader(Object.keys(data)[0], value);\n            }\n        }\n    }\n    removeCompleted(e, files, customTemplate) {\n        let response = e && e.currentTarget ? this.getResponse(e) : null;\n        let args = {\n            e, response: response, operation: 'remove', file: this.updateStatus(files, this.localizedTexts('removedSuccessMessage'), '2')\n        };\n        this.trigger('success', args);\n        this.removeFilesData(files, customTemplate);\n        let index = this.uploadedFilesData.indexOf(files);\n        this.uploadedFilesData.splice(index, 1);\n        this.trigger('change', { files: this.uploadedFilesData });\n    }\n    removeFailed(e, files, customTemplate) {\n        let response = e && e.currentTarget ? this.getResponse(e) : null;\n        let args = {\n            e, response: response, operation: 'remove', file: this.updateStatus(files, this.localizedTexts('removedFailedMessage'), '0')\n        };\n        if (!customTemplate) {\n            let index = this.filesData.indexOf(files);\n            let rootElement = this.fileList[index];\n            if (rootElement) {\n                rootElement.classList.remove(UPLOAD_SUCCESS);\n                rootElement.classList.add(UPLOAD_FAILED);\n                let statusElement = rootElement.querySelector('.' + STATUS);\n                if (statusElement) {\n                    statusElement.classList.remove(UPLOAD_SUCCESS);\n                    statusElement.classList.add(UPLOAD_FAILED);\n                }\n            }\n            this.checkActionButtonStatus();\n        }\n        this.trigger('failure', args);\n        let liElement = this.getLiElement(files);\n        /* istanbul ignore next */\n        if (!isNullOrUndefined(liElement) && !isNullOrUndefined(liElement.querySelector('.' + DELETE_ICON))) {\n            let spinnerTarget = liElement.querySelector('.' + DELETE_ICON);\n            hideSpinner(spinnerTarget);\n            detach(liElement.querySelector('.e-spinner-pane'));\n        }\n    }\n    /* istanbul ignore next */\n    getFilesFromFolder(event) {\n        this.filesEntries = [];\n        let items;\n        items = this.multiple ? event.dataTransfer.items : [event.dataTransfer.items[0]];\n        let validDirectoryUpload = this.checkDirectoryUpload(items);\n        if (!validDirectoryUpload) {\n            return;\n        }\n        for (let i = 0; i < items.length; i++) {\n            // tslint:disable-next-line\n            let item = items[i].webkitGetAsEntry();\n            if (item.isFile) {\n                let files = [];\n                // tslint:disable-next-line\n                (item).file((fileObj) => {\n                    let path = item.fullPath;\n                    files.push({ 'path': path, 'file': fileObj });\n                });\n                this.renderSelectedFiles(event, files, true);\n            }\n            else if (item.isDirectory) {\n                this.traverseFileTree(item, event);\n            }\n        }\n    }\n    /* istanbul ignore next */\n    checkDirectoryUpload(items) {\n        for (let i = 0; items && i < items.length; i++) {\n            // tslint:disable-next-line\n            let item = items[i].webkitGetAsEntry();\n            if (item.isDirectory) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // tslint:disable\n    /* istanbul ignore next */\n    traverseFileTree(item, event) {\n        if (item.isFile) {\n            this.filesEntries.push(item);\n        }\n        else if (item.isDirectory) {\n            // tslint:disable-next-line\n            let directoryReader = item.createReader();\n            // tslint:disable-next-line\n            this.readFileFromDirectory(directoryReader, event);\n        }\n    }\n    // tslint:disable\n    /* istanbul ignore next */\n    readFileFromDirectory(directoryReader, event) {\n        // tslint:disable-next-line\n        directoryReader.readEntries((entries) => {\n            for (let i = 0; i < entries.length; i++) {\n                this.traverseFileTree(entries[i]);\n                // tslint:disable-next-line\n            }\n            \n            this.pushFilesEntries(event);\n            if (entries.length) {\n                this.readFileFromDirectory(directoryReader);\n            }\n        });\n    }\n    pushFilesEntries(event) {\n        let files = [];\n        for (let i = 0; i < this.filesEntries.length; i++) {\n            // tslint:disable-next-line\n            this.filesEntries[i].file((fileObj) => {\n                if (this.filesEntries) {\n                    let path = this.filesEntries[i].fullPath;\n                    files.push({ 'path': path, 'file': fileObj });\n                    if (i === this.filesEntries.length - 1) {\n                        this.filesEntries = [];\n                        this.renderSelectedFiles(event, files, true);\n                    }\n                }\n            });\n        }\n    }\n    // tslint:enable\n    onSelectFiles(args) {\n        if (!this.enabled) {\n            return;\n        }\n        let targetFiles;\n        /* istanbul ignore next */\n        if (args.type === 'drop') {\n            if (this.directoryUpload) {\n                this.getFilesFromFolder(args);\n            }\n            else {\n                let files = this.sortFilesList = args.dataTransfer.files;\n                if (this.browserName !== 'msie' && this.browserName !== 'edge') {\n                    this.element.files = files;\n                }\n                targetFiles = this.multiple ? this.sortFileList(files) : [files[0]];\n                this.renderSelectedFiles(args, targetFiles);\n            }\n        }\n        else {\n            targetFiles = [].slice.call(args.target.files);\n            this.renderSelectedFiles(args, targetFiles);\n        }\n    }\n    /* istanbul ignore next */\n    getBase64(file) {\n        return new Promise((resolve, reject) => {\n            let fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = () => resolve(fileReader.result);\n            fileReader.onerror = (error) => reject(error);\n        });\n    }\n    /* istanbul ignore next */\n    /* tslint:ignore */\n    renderSelectedFiles(args, \n    // tslint:disable-next-line\n    targetFiles, directory, paste) {\n        this.base64String = [];\n        // tslint:disable-next-line\n        let eventArgs = {\n            event: args,\n            cancel: false,\n            filesData: [],\n            isModified: false,\n            modifiedFilesData: [],\n            progressInterval: '',\n            isCanceled: false,\n            currentRequest: null,\n            customFormData: null\n        };\n        /* istanbul ignore next */\n        if (targetFiles.length < 1) {\n            eventArgs.isCanceled = true;\n            this.trigger('selected', eventArgs);\n            return;\n        }\n        this.flag = true;\n        let fileData = [];\n        if (!this.multiple) {\n            this.clearData(true);\n            targetFiles = [targetFiles[0]];\n        }\n        for (let i = 0; i < targetFiles.length; i++) {\n            let file = directory ? targetFiles[i].file : targetFiles[i];\n            this.updateInitialFileDetails(args, targetFiles, file, i, fileData, directory, paste);\n        }\n        eventArgs.filesData = fileData;\n        if (this.allowedExtensions.indexOf('*') > -1) {\n            this.allTypes = true;\n        }\n        if (!this.allTypes) {\n            fileData = this.checkExtension(fileData);\n        }\n        this.trigger('selected', eventArgs, (eventArgs) => {\n            this._internalRenderSelect(eventArgs, fileData);\n        });\n    }\n    updateInitialFileDetails(args, \n    // tslint:disable-next-line\n    targetFiles, file, i, fileData, directory, paste) {\n        let fileName = directory ? targetFiles[i].path.substring(1, targetFiles[i].path.length) : paste ?\n            getUniqueID(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name) :\n            this.directoryUpload ? targetFiles[i].webkitRelativePath : file.name;\n        let fileDetails = {\n            name: fileName,\n            rawFile: file,\n            size: file.size,\n            status: this.localizedTexts('readyToUploadMessage'),\n            type: this.getFileType(file.name),\n            validationMessages: this.validatedFileSize(file.size),\n            statusCode: '1',\n            id: getUniqueID(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name)\n        };\n        /* istanbul ignore next */\n        if (paste) {\n            fileDetails.fileSource = 'paste';\n        }\n        fileDetails.status = fileDetails.validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') :\n            fileDetails.validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : fileDetails.status;\n        if (fileDetails.validationMessages.minSize !== '' || fileDetails.validationMessages.maxSize !== '') {\n            fileDetails.statusCode = '0';\n        }\n        fileData.push(fileDetails);\n    }\n    _internalRenderSelect(eventArgs, fileData) {\n        if (!eventArgs.cancel) {\n            /* istanbul ignore next */\n            if (isBlazor()) {\n                this.currentRequestHeader = eventArgs.currentRequest;\n                this.customFormDatas = eventArgs.customFormData;\n            }\n            this.selectedFiles = fileData;\n            this.btnTabIndex = this.disableKeyboardNavigation ? '-1' : '0';\n            if (this.showFileList) {\n                if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {\n                    for (let j = 0; j < eventArgs.modifiedFilesData.length; j++) {\n                        for (let k = 0; k < fileData.length; k++) {\n                            if (eventArgs.modifiedFilesData[j].id === fileData[k].id) {\n                                eventArgs.modifiedFilesData[j].rawFile = fileData[k].rawFile;\n                            }\n                        }\n                    }\n                    let dataFiles = this.allTypes ? eventArgs.modifiedFilesData :\n                        this.checkExtension(eventArgs.modifiedFilesData);\n                    this.updateSortedFileList(dataFiles);\n                    this.filesData = dataFiles;\n                    if (!this.isForm || this.allowUpload()) {\n                        this.checkAutoUpload(dataFiles);\n                    }\n                }\n                else {\n                    this.createFileList(fileData, true);\n                    if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n                        this.filesData = this.filesData.concat(fileData);\n                    }\n                    if (!this.isForm || this.allowUpload()) {\n                        if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n                            this.checkAutoUpload(fileData);\n                        }\n                    }\n                }\n                if (!isNullOrUndefined(eventArgs.progressInterval) && eventArgs.progressInterval !== '') {\n                    this.progressInterval = eventArgs.progressInterval;\n                }\n            }\n            else {\n                this.filesData = this.filesData.concat(fileData);\n                if (this.isBlazorSaveUrl) {\n                    // tslint:disable-next-line\n                    this.interopAdaptor.invokeMethodAsync('updateServerFileData', this.filesData, this.isForm);\n                }\n                if (this.autoUpload) {\n                    this.upload(this.filesData, true);\n                }\n            }\n            this.raiseActionComplete();\n            this.isFirstFileOnSelection = true;\n        }\n    }\n    allowUpload() {\n        let allowFormUpload = false;\n        if (this.isForm && (!isNullOrUndefined(this.asyncSettings.saveUrl) && this.asyncSettings.saveUrl !== '')) {\n            allowFormUpload = true;\n        }\n        return allowFormUpload;\n    }\n    isFormUpload() {\n        let isFormUpload = false;\n        if (this.isForm && ((isNullOrUndefined(this.asyncSettings.saveUrl) || this.asyncSettings.saveUrl === '')\n            && (isNullOrUndefined(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === ''))) {\n            isFormUpload = true;\n        }\n        return isFormUpload;\n    }\n    clearData(singleUpload) {\n        if (!isNullOrUndefined(this.listParent) && !(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            detach(this.listParent);\n            this.listParent = null;\n        }\n        if (this.browserName !== 'msie' && !singleUpload) {\n            this.element.value = '';\n        }\n        this.fileList = [];\n        this.filesData = [];\n        if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('clearAll');\n        }\n        else {\n            this.removeActionButtons();\n        }\n    }\n    updateSortedFileList(filesData) {\n        let previousListClone = this.createElement('div', { id: 'clonewrapper' });\n        let added = -1;\n        let removedList;\n        if (this.listParent) {\n            for (let i = 0; i < this.listParent.querySelectorAll('li').length; i++) {\n                let liElement = this.listParent.querySelectorAll('li')[i];\n                previousListClone.appendChild(liElement.cloneNode(true));\n            }\n            removedList = this.listParent.querySelectorAll('li');\n            for (let item of removedList) {\n                detach(item);\n            }\n            this.removeActionButtons();\n            let oldList = [].slice.call(previousListClone.childNodes);\n            detach(this.listParent);\n            this.listParent = null;\n            this.fileList = [];\n            this.createParentUL();\n            for (let index = 0; index < filesData.length; index++) {\n                for (let j = 0; j < this.filesData.length; j++) {\n                    if (this.filesData[j].name === filesData[index].name) {\n                        this.listParent.appendChild(oldList[j]);\n                        EventHandler.add(oldList[j].querySelector('.e-icons'), 'click', this.removeFiles, this);\n                        this.fileList.push(oldList[j]);\n                        added = index;\n                    }\n                }\n                if (added !== index) {\n                    this.createFileList([filesData[index]]);\n                }\n            }\n        }\n        else {\n            this.createFileList(filesData);\n        }\n    }\n    isBlank(str) {\n        return (!str || /^\\s*$/.test(str));\n    }\n    checkExtension(files) {\n        let dropFiles = files;\n        if (!this.isBlank(this.allowedExtensions)) {\n            let allowedExtensions = [];\n            let extensions = this.allowedExtensions.split(',');\n            for (let extension of extensions) {\n                allowedExtensions.push(extension.trim().toLocaleLowerCase());\n            }\n            for (let i = 0; i < files.length; i++) {\n                if (allowedExtensions.indexOf(('.' + files[i].type).toLocaleLowerCase()) === -1) {\n                    files[i].status = this.localizedTexts('invalidFileType');\n                    files[i].statusCode = '0';\n                }\n            }\n        }\n        return dropFiles;\n    }\n    validatedFileSize(fileSize) {\n        let minSizeError = '';\n        let maxSizeError = '';\n        if (fileSize < this.minFileSize) {\n            minSizeError = this.localizedTexts('invalidMinFileSize');\n        }\n        else if (fileSize > this.maxFileSize) {\n            maxSizeError = this.localizedTexts('invalidMaxFileSize');\n        }\n        else {\n            minSizeError = '';\n            maxSizeError = '';\n        }\n        let errorMessage = { minSize: minSizeError, maxSize: maxSizeError };\n        return errorMessage;\n    }\n    isPreLoadFile(fileData) {\n        let isPreload = false;\n        for (let i = 0; i < this.files.length; i++) {\n            if (this.files[i].name === fileData.name.slice(0, fileData.name.lastIndexOf('.')) && this.files[i].type === fileData.type) {\n                isPreload = true;\n            }\n        }\n        return isPreload;\n    }\n    createCustomfileList(fileData) {\n        this.createParentUL();\n        resetBlazorTemplate(this.element.id + 'Template', 'Template');\n        for (let listItem of fileData) {\n            let liElement = this.createElement('li', { className: FILE, attrs: { 'data-file-name': listItem.name } });\n            this.uploadTemplateFn = this.templateComplier(this.template);\n            let fromElements = [].slice.call(this.uploadTemplateFn(listItem, null, null, this.element.id + 'Template', this.isStringTemplate));\n            let index = fileData.indexOf(listItem);\n            append(fromElements, liElement);\n            let eventArgs = {\n                element: liElement,\n                fileInfo: listItem,\n                index: index,\n                isPreload: this.isPreLoadFile(listItem)\n            };\n            let eventsArgs = {\n                element: liElement,\n                fileInfo: listItem,\n                index: index,\n                isPreload: this.isPreLoadFile(listItem)\n            };\n            this.trigger('rendering', eventArgs);\n            this.trigger('fileListRendering', eventsArgs);\n            this.listParent.appendChild(liElement);\n            this.fileList.push(liElement);\n        }\n        updateBlazorTemplate(this.element.id + 'Template', 'Template', this, false);\n    }\n    createParentUL() {\n        if (isNullOrUndefined(this.listParent)) {\n            this.listParent = this.createElement('ul', { className: LIST_PARENT });\n            this.uploadWrapper.appendChild(this.listParent);\n        }\n    }\n    formFileList(fileData, files) {\n        let fileList = this.createElement('li', { className: FILE });\n        fileList.setAttribute('data-files-count', fileData.length + '');\n        let fileContainer = this.createElement('span', { className: TEXT_CONTAINER });\n        let statusMessage;\n        for (let listItem of fileData) {\n            let fileNameEle = this.createElement('span', { className: FILE_NAME });\n            fileNameEle.innerHTML = this.getFileNameOnly(listItem.name);\n            let fileTypeEle = this.createElement('span', { className: FILE_TYPE });\n            fileTypeEle.innerHTML = '.' + this.getFileType(listItem.name);\n            if (!this.enableRtl) {\n                fileContainer.appendChild(fileNameEle);\n                fileContainer.appendChild(fileTypeEle);\n            }\n            else {\n                let rtlContainer = this.createElement('span', { className: RTL_CONTAINER });\n                rtlContainer.appendChild(fileTypeEle);\n                rtlContainer.appendChild(fileNameEle);\n                fileContainer.appendChild(rtlContainer);\n            }\n            this.truncateName(fileNameEle);\n            statusMessage = this.formValidateFileInfo(listItem, fileList);\n        }\n        fileList.appendChild(fileContainer);\n        this.setListToFileInfo(fileData, fileList);\n        let index = this.listParent.querySelectorAll('li').length;\n        let infoEle = this.createElement('span');\n        if (fileList.classList.contains(INVALID_FILE)) {\n            infoEle.classList.add(STATUS);\n            infoEle.classList.add(INVALID_FILE);\n            infoEle.innerText = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;\n        }\n        else {\n            infoEle.classList.add(fileData.length > 1 ? INFORMATION : FILE_SIZE);\n            infoEle.innerText = fileData.length > 1 ? this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , '\n                + this.localizedTexts('size') + ': ' +\n                this.bytesToSize(this.getFileSize(fileData)) : this.bytesToSize(fileData[0].size);\n            this.createFormInput(fileData);\n        }\n        fileContainer.appendChild(infoEle);\n        if (isNullOrUndefined(fileList.querySelector('.e-icons'))) {\n            let iconElement = this.createElement('span', { className: 'e-icons', attrs: { 'tabindex': this.btnTabIndex } });\n            /* istanbul ignore next */\n            if (this.browserName === 'msie') {\n                iconElement.classList.add('e-msie');\n            }\n            iconElement.setAttribute('title', this.localizedTexts('remove'));\n            fileList.appendChild(fileContainer);\n            fileList.appendChild(iconElement);\n            EventHandler.add(iconElement, 'click', this.removeFiles, this);\n            iconElement.classList.add(REMOVE_ICON);\n        }\n        let eventArgs = {\n            element: fileList,\n            fileInfo: this.mergeFileInfo(fileData, fileList),\n            index: index,\n            isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))\n        };\n        let eventsArgs = {\n            element: fileList,\n            fileInfo: this.mergeFileInfo(fileData, fileList),\n            index: index,\n            isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))\n        };\n        this.trigger('rendering', eventArgs);\n        this.trigger('fileListRendering', eventsArgs);\n        this.listParent.appendChild(fileList);\n        this.fileList.push(fileList);\n    }\n    formValidateFileInfo(listItem, fileList) {\n        let statusMessage = listItem.status;\n        let validationMessages = this.validatedFileSize(listItem.size);\n        if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {\n            this.addInvalidClass(fileList);\n            statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') :\n                validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;\n        }\n        let typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;\n        if (typeValidationMessage === this.localizedTexts('invalidFileType')) {\n            this.addInvalidClass(fileList);\n            statusMessage = typeValidationMessage;\n        }\n        return statusMessage;\n    }\n    addInvalidClass(fileList) {\n        fileList.classList.add(INVALID_FILE);\n    }\n    createFormInput(fileData) {\n        let inputElement = this.element.cloneNode(true);\n        inputElement.classList.add(HIDDEN_INPUT);\n        for (let listItem of fileData) {\n            listItem.input = inputElement;\n        }\n        inputElement.setAttribute('name', this.uploaderName);\n        this.uploadWrapper.querySelector('.' + INPUT_WRAPPER).appendChild(inputElement);\n        if (this.browserName !== 'msie' && this.browserName !== 'edge') {\n            this.element.value = '';\n        }\n    }\n    getFileSize(fileData) {\n        let fileSize = 0;\n        for (let file of fileData) {\n            fileSize += file.size;\n        }\n        return fileSize;\n    }\n    mergeFileInfo(fileData, fileList) {\n        let result = {\n            name: '',\n            rawFile: '',\n            size: 0,\n            status: '',\n            type: '',\n            validationMessages: { minSize: '', maxSize: '' },\n            statusCode: '1',\n            list: fileList\n        };\n        let fileNames = [];\n        let type = '';\n        for (let listItem of fileData) {\n            fileNames.push(listItem.name);\n            type = listItem.type;\n        }\n        result.name = fileNames.join(', ');\n        result.size = this.getFileSize(fileData);\n        result.type = type;\n        result.status = this.statusForFormUpload(fileData, fileList);\n        return result;\n    }\n    statusForFormUpload(fileData, fileList) {\n        let isValid = true;\n        let statusMessage;\n        for (let listItem of fileData) {\n            statusMessage = listItem.status;\n            let validationMessages = this.validatedFileSize(listItem.size);\n            if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {\n                isValid = false;\n                statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') :\n                    validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;\n            }\n            let typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;\n            if (typeValidationMessage === this.localizedTexts('invalidFileType')) {\n                isValid = false;\n                statusMessage = typeValidationMessage;\n            }\n        }\n        if (!isValid) {\n            fileList.classList.add(INVALID_FILE);\n            statusMessage = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;\n        }\n        else {\n            statusMessage = this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , '\n                + this.localizedTexts('size') + ': ' +\n                this.bytesToSize(this.getFileSize(fileData));\n        }\n        return statusMessage;\n    }\n    formCustomFileList(fileData, files) {\n        this.createParentUL();\n        resetBlazorTemplate(this.element.id + 'Template', 'Template');\n        let fileList = this.createElement('li', { className: FILE });\n        fileList.setAttribute('data-files-count', fileData.length + '');\n        this.setListToFileInfo(fileData, fileList);\n        let result = this.mergeFileInfo(fileData, fileList);\n        fileList.setAttribute('data-file-name', result.name);\n        this.uploadTemplateFn = this.templateComplier(this.template);\n        let fromElements = [].slice.call(this.uploadTemplateFn(result, null, null, this.element.id + 'Template', this.isStringTemplate));\n        let index = this.listParent.querySelectorAll('li').length;\n        append(fromElements, fileList);\n        if (!fileList.classList.contains(INVALID_FILE)) {\n            this.createFormInput(fileData);\n        }\n        let eventArgs = {\n            element: fileList,\n            fileInfo: result,\n            index: index,\n            isPreload: this.isPreLoadFile(result)\n        };\n        let eventsArgs = {\n            element: fileList,\n            fileInfo: result,\n            index: index,\n            isPreload: this.isPreLoadFile(result)\n        };\n        this.trigger('rendering', eventArgs);\n        this.trigger('fileListRendering', eventsArgs);\n        this.listParent.appendChild(fileList);\n        this.fileList.push(fileList);\n        updateBlazorTemplate(this.element.id + 'Template', 'Template', this, false);\n    }\n    /**\n     * Create the file list for specified files data.\n     * @param { FileInfo[] } fileData - specifies the files data for file list creation.\n     * @returns void\n     */\n    createFileList(fileData, isSelectedFile) {\n        if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n            let fileListData = (isSelectedFile) ? this.filesData = this.filesData.concat(fileData) : fileData;\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('createFileList', fileListData, this.isForm);\n        }\n        else {\n            this.createParentUL();\n            if (this.template !== '' && !isNullOrUndefined(this.template)) {\n                if (this.isFormUpload()) {\n                    this.uploadWrapper.classList.add(FORM_UPLOAD);\n                    this.formCustomFileList(fileData, this.element.files);\n                }\n                else {\n                    this.createCustomfileList(fileData);\n                }\n            }\n            else if (this.isFormUpload()) {\n                this.uploadWrapper.classList.add(FORM_UPLOAD);\n                this.formFileList(fileData, this.element.files);\n            }\n            else {\n                for (let listItem of fileData) {\n                    let liElement = this.createElement('li', {\n                        className: FILE,\n                        attrs: { 'data-file-name': listItem.name, 'data-files-count': '1' }\n                    });\n                    let textContainer = this.createElement('span', { className: TEXT_CONTAINER });\n                    let textElement = this.createElement('span', { className: FILE_NAME, attrs: { 'title': listItem.name } });\n                    textElement.innerHTML = this.getFileNameOnly(listItem.name);\n                    let fileExtension = this.createElement('span', { className: FILE_TYPE });\n                    fileExtension.innerHTML = '.' + this.getFileType(listItem.name);\n                    if (!this.enableRtl) {\n                        textContainer.appendChild(textElement);\n                        textContainer.appendChild(fileExtension);\n                    }\n                    else {\n                        let rtlContainer = this.createElement('span', { className: RTL_CONTAINER });\n                        rtlContainer.appendChild(fileExtension);\n                        rtlContainer.appendChild(textElement);\n                        textContainer.appendChild(rtlContainer);\n                    }\n                    let fileSize = this.createElement('span', { className: FILE_SIZE });\n                    fileSize.innerHTML = this.bytesToSize(listItem.size);\n                    textContainer.appendChild(fileSize);\n                    let statusElement = this.createElement('span', { className: STATUS });\n                    textContainer.appendChild(statusElement);\n                    statusElement.innerHTML = listItem.status;\n                    liElement.appendChild(textContainer);\n                    let iconElement = this.createElement('span', { className: ' e-icons',\n                        attrs: { 'tabindex': this.btnTabIndex } });\n                    /* istanbul ignore next */\n                    if (this.browserName === 'msie') {\n                        iconElement.classList.add('e-msie');\n                    }\n                    iconElement.setAttribute('title', this.localizedTexts('remove'));\n                    liElement.appendChild(iconElement);\n                    EventHandler.add(iconElement, 'click', this.removeFiles, this);\n                    if (listItem.statusCode === '2') {\n                        statusElement.classList.add(UPLOAD_SUCCESS);\n                        iconElement.classList.add(DELETE_ICON);\n                        iconElement.setAttribute('title', this.localizedTexts('delete'));\n                    }\n                    else if (listItem.statusCode !== '1') {\n                        statusElement.classList.remove(UPLOAD_SUCCESS);\n                        statusElement.classList.add(VALIDATION_FAILS);\n                    }\n                    if (this.autoUpload && listItem.statusCode === '1' && this.asyncSettings.saveUrl !== '') {\n                        statusElement.innerHTML = '';\n                    }\n                    if (!iconElement.classList.contains(DELETE_ICON)) {\n                        iconElement.classList.add(REMOVE_ICON);\n                    }\n                    let index = fileData.indexOf(listItem);\n                    let eventArgs = {\n                        element: liElement,\n                        fileInfo: listItem,\n                        index: index,\n                        isPreload: this.isPreLoadFile(listItem)\n                    };\n                    let eventsArgs = {\n                        element: liElement,\n                        fileInfo: listItem,\n                        index: index,\n                        isPreload: this.isPreLoadFile(listItem)\n                    };\n                    this.trigger('rendering', eventArgs);\n                    this.trigger('fileListRendering', eventsArgs);\n                    this.listParent.appendChild(liElement);\n                    this.fileList.push(liElement);\n                    this.truncateName(textElement);\n                    let preventActionComplete = this.flag;\n                    if (this.isPreLoadFile(listItem)) {\n                        this.flag = false;\n                        this.checkActionComplete(true);\n                        this.flag = preventActionComplete;\n                    }\n                }\n            }\n        }\n    }\n    getSlicedName(nameElement) {\n        let text;\n        text = nameElement.textContent;\n        nameElement.dataset.tail = text.slice(text.length - 10);\n    }\n    setListToFileInfo(fileData, fileList) {\n        for (let listItem of fileData) {\n            listItem.list = fileList;\n        }\n    }\n    truncateName(name) {\n        let nameElement = name;\n        if (this.browserName !== 'edge' && nameElement.offsetWidth < nameElement.scrollWidth) {\n            this.getSlicedName(nameElement);\n            /* istanbul ignore next */\n        }\n        else if (nameElement.offsetWidth + 1 < nameElement.scrollWidth) {\n            this.getSlicedName(nameElement);\n        }\n    }\n    getFileType(name) {\n        let extension;\n        let index = name.lastIndexOf('.');\n        if (index >= 0) {\n            extension = name.substring(index + 1);\n        }\n        return extension ? extension : '';\n    }\n    getFileNameOnly(name) {\n        let type = this.getFileType(name);\n        let names = name.split('.' + type);\n        return type = names[0];\n    }\n    setInitialAttributes() {\n        if (this.initialAttr.accept) {\n            this.element.setAttribute('accept', this.initialAttr.accept);\n        }\n        if (this.initialAttr.disabled) {\n            this.element.setAttribute('disabled', 'disabled');\n        }\n        if (this.initialAttr.multiple) {\n            let newAttr = document.createAttribute('multiple');\n            this.element.setAttributeNode(newAttr);\n        }\n    }\n    filterfileList(files) {\n        let filterFiles = [];\n        let li;\n        for (let i = 0; i < files.length; i++) {\n            li = this.getLiElement(files[i]);\n            if (!li.classList.contains(UPLOAD_SUCCESS)) {\n                filterFiles.push(files[i]);\n            }\n        }\n        return filterFiles;\n    }\n    updateStatus(files, status, statusCode, updateLiStatus = true) {\n        if (!(status === '' || isNullOrUndefined(status)) && !(statusCode === '' || isNullOrUndefined(statusCode))) {\n            if (this.isBlazorSaveUrl) {\n                for (let i = 0; i < this.filesData.length; i++) {\n                    if (this.filesData[i].name === files.name) {\n                        this.filesData[i].status = status;\n                        this.filesData[i].statusCode = statusCode;\n                    }\n                }\n            }\n            else {\n                files.status = status;\n                files.statusCode = statusCode;\n            }\n        }\n        if (updateLiStatus) {\n            let li = this.getLiElement(files);\n            if (!isNullOrUndefined(li)) {\n                if (!isNullOrUndefined(li.querySelector('.' + STATUS)) && !((status === '' || isNullOrUndefined(status)))) {\n                    li.querySelector('.' + STATUS).textContent = status;\n                }\n            }\n        }\n        return files;\n    }\n    getLiElement(files) {\n        let index;\n        for (let i = 0; i < this.filesData.length; i++) {\n            if ((!isNullOrUndefined(this.filesData[i].id) && !isNullOrUndefined(files.id)) ? (this.filesData[i].name === files.name &&\n                this.filesData[i].id === files.id) : this.filesData[i].name === files.name) {\n                index = i;\n            }\n        }\n        return this.fileList[index];\n    }\n    createProgressBar(liElement) {\n        let progressbarWrapper = this.createElement('span', { className: PROGRESS_WRAPPER });\n        let progressBar = this.createElement('progressbar', { className: PROGRESSBAR, attrs: { value: '0', max: '100' } });\n        let progressbarInnerWrapper = this.createElement('span', { className: PROGRESS_INNER_WRAPPER });\n        progressBar.setAttribute('style', 'width: 0%');\n        let progressbarText = this.createElement('span', { className: PROGRESSBAR_TEXT });\n        progressbarText.textContent = '0%';\n        progressbarInnerWrapper.appendChild(progressBar);\n        progressbarWrapper.appendChild(progressbarInnerWrapper);\n        progressbarWrapper.appendChild(progressbarText);\n        liElement.querySelector('.' + TEXT_CONTAINER).appendChild(progressbarWrapper);\n    }\n    /* istanbul ignore next */\n    updateProgressbar(e, li) {\n        if (!isNaN(Math.round((e.loaded / e.total) * 100)) && !isNullOrUndefined(li.querySelector('.' + PROGRESSBAR))) {\n            if (!isNullOrUndefined(this.progressInterval) && this.progressInterval !== '') {\n                let value = (Math.round((e.loaded / e.total) * 100)) % parseInt(this.progressInterval, 10);\n                if (value === 0 || value === 100) {\n                    this.changeProgressValue(li, Math.round((e.loaded / e.total) * 100).toString() + '%');\n                }\n            }\n            else {\n                this.changeProgressValue(li, Math.round((e.loaded / e.total) * 100).toString() + '%');\n            }\n        }\n    }\n    changeProgressValue(li, progressValue) {\n        li.querySelector('.' + PROGRESSBAR).setAttribute('style', 'width:' + progressValue);\n        li.querySelector('.' + PROGRESSBAR_TEXT).textContent = progressValue;\n    }\n    uploadInProgress(e, files, customUI, request) {\n        let li = this.getLiElement(files);\n        if (isNullOrUndefined(li) && (!customUI)) {\n            return;\n        }\n        if (!isNullOrUndefined(li)) {\n            /* istanbul ignore next */\n            if (files.statusCode === '5') {\n                this.cancelUploadingFile(files, e, request, li);\n            }\n            if (!(li.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0) && li.querySelector('.' + STATUS)) {\n                li.querySelector('.' + STATUS).classList.add(UPLOAD_INPROGRESS);\n                this.createProgressBar(li);\n                this.updateProgressBarClasses(li, UPLOAD_INPROGRESS);\n                li.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);\n            }\n            this.updateProgressbar(e, li);\n            let iconEle = li.querySelector('.' + REMOVE_ICON);\n            if (!isNullOrUndefined(iconEle)) {\n                iconEle.classList.add(ABORT_ICON, UPLOAD_INPROGRESS);\n                iconEle.setAttribute('title', this.localizedTexts('abort'));\n                iconEle.classList.remove(REMOVE_ICON);\n            }\n        }\n        else {\n            this.cancelUploadingFile(files, e, request);\n        }\n        let args = { e, operation: 'upload', file: this.updateStatus(files, this.localizedTexts('inProgress'), '3') };\n        this.trigger('progress', args);\n    }\n    /* istanbul ignore next */\n    cancelUploadingFile(files, e, request, li) {\n        if (files.statusCode === '5') {\n            let eventArgs = {\n                event: e,\n                fileData: files,\n                cancel: false\n            };\n            this.trigger('canceling', eventArgs, (eventArgs) => {\n                if (eventArgs.cancel) {\n                    files.statusCode = '3';\n                    if (!isNullOrUndefined(li)) {\n                        let spinnerTarget = li.querySelector('.' + ABORT_ICON);\n                        if (!isNullOrUndefined(spinnerTarget)) {\n                            hideSpinner(spinnerTarget);\n                            detach(li.querySelector('.e-spinner-pane'));\n                        }\n                    }\n                }\n                else {\n                    request.emitError = false;\n                    request.httpRequest.abort();\n                    let formData = new FormData();\n                    if (files.statusCode === '5') {\n                        let name = this.element.getAttribute('name');\n                        formData.append(name, files.name);\n                        formData.append('cancel-uploading', files.name);\n                        let ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);\n                        ajax.emitError = false;\n                        ajax.onLoad = (e) => { this.removecanceledFile(e, files); return {}; };\n                        ajax.send(formData);\n                    }\n                }\n            });\n        }\n    }\n    removecanceledFile(e, file) {\n        let liElement = this.getLiElement(file);\n        if (liElement.querySelector('.' + RETRY_ICON) || isNullOrUndefined(liElement.querySelector('.' + ABORT_ICON))) {\n            return;\n        }\n        this.updateStatus(file, this.localizedTexts('fileUploadCancel'), '5');\n        this.renderFailureState(e, file, liElement);\n        let spinnerTarget = liElement.querySelector('.' + REMOVE_ICON);\n        if (!isNullOrUndefined(liElement)) {\n            hideSpinner(spinnerTarget);\n            detach(liElement.querySelector('.e-spinner-pane'));\n        }\n        let requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n        let args = { event: e, response: requestResponse, operation: 'cancel', file: file };\n        this.trigger('success', args);\n    }\n    renderFailureState(e, file, liElement) {\n        this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n        this.removeProgressbar(liElement, 'failure');\n        if (!isNullOrUndefined(liElement.querySelector('.e-file-status'))) {\n            liElement.querySelector('.e-file-status').classList.add(UPLOAD_FAILED);\n        }\n        let deleteIcon = liElement.querySelector('.' + ABORT_ICON);\n        if (isNullOrUndefined(deleteIcon)) {\n            return;\n        }\n        deleteIcon.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);\n        deleteIcon.classList.add(REMOVE_ICON);\n        deleteIcon.setAttribute('title', this.localizedTexts('remove'));\n        this.pauseButton = this.createElement('span', { className: 'e-icons e-file-reload-btn', attrs: { 'tabindex': this.btnTabIndex } });\n        deleteIcon.parentElement.insertBefore(this.pauseButton, deleteIcon);\n        this.pauseButton.setAttribute('title', this.localizedTexts('retry'));\n        let retryElement = liElement.querySelector('.' + RETRY_ICON);\n        /* istanbul ignore next */\n        retryElement.addEventListener('click', (e) => { this.reloadcanceledFile(e, file, liElement, false); }, false);\n    }\n    reloadcanceledFile(e, file, liElement, custom) {\n        file.statusCode = '1';\n        file.status = this.localizedTexts('readyToUploadMessage');\n        if (!custom) {\n            liElement.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);\n            if (!isNullOrUndefined(liElement.querySelector('.' + RETRY_ICON))) {\n                detach(liElement.querySelector('.' + RETRY_ICON));\n            }\n            this.pauseButton = null;\n        }\n        /* istanbul ignore next */\n        liElement.classList.add(RESTRICT_RETRY);\n        this.upload([file]);\n    }\n    /* istanbul ignore next */\n    uploadComplete(e, file, customUI) {\n        let status = e.target;\n        if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {\n            let li = this.getLiElement(file);\n            if (isNullOrUndefined(li) && (!customUI || isNullOrUndefined(customUI))) {\n                return;\n            }\n            if (!isNullOrUndefined(li)) {\n                this.updateProgressBarClasses(li, UPLOAD_SUCCESS);\n                this.removeProgressbar(li, 'success');\n                let iconEle = li.querySelector('.' + ABORT_ICON);\n                if (!isNullOrUndefined(iconEle)) {\n                    iconEle.classList.add(DELETE_ICON);\n                    iconEle.setAttribute('title', this.localizedTexts('delete'));\n                    iconEle.classList.remove(ABORT_ICON);\n                    iconEle.classList.remove(UPLOAD_INPROGRESS);\n                }\n            }\n            this.raiseSuccessEvent(e, file);\n        }\n        else {\n            this.uploadFailed(e, file);\n        }\n    }\n    getResponse(e) {\n        // tslint:disable-next-line\n        let target = e.currentTarget;\n        let response = {\n            readyState: target.readyState,\n            statusCode: target.status,\n            statusText: target.statusText,\n            headers: target.getAllResponseHeaders(),\n            withCredentials: target.withCredentials\n        };\n        return response;\n    }\n    /* istanbul ignore next */\n    serverRemoveIconBindEvent() {\n        if (this.uploadWrapper && this.isBlazorSaveUrl) {\n            let iconElement = [].slice.call(this.uploadWrapper.querySelectorAll('ul li'));\n            for (let i = 0; i < iconElement.length; i++) {\n                let removeIconEle = (iconElement[i]) ? iconElement[i].querySelector('.e-icons') : null;\n                if (removeIconEle) {\n                    EventHandler.remove(removeIconEle, 'click', this.removeFiles);\n                    EventHandler.add(removeIconEle, 'click', this.removeFiles, this);\n                }\n            }\n        }\n    }\n    raiseSuccessEvent(e, file) {\n        let response = e && e.currentTarget ? this.getResponse(e) : null;\n        let statusMessage = this.localizedTexts('uploadSuccessMessage');\n        let args = {\n            e, response: response, operation: 'upload', file: this.updateStatus(file, statusMessage, '2', false), statusText: statusMessage\n        };\n        if (!this.isBlazorSaveUrl) {\n            let liElement = this.getLiElement(file);\n            if (!isNullOrUndefined(liElement)) {\n                let spinnerEle = liElement.querySelector('.' + SPINNER_PANE);\n                if (!isNullOrUndefined(spinnerEle)) {\n                    hideSpinner(liElement);\n                    detach(spinnerEle);\n                }\n            }\n        }\n        this.trigger('success', args, (args) => {\n            // tslint:disable-next-line\n            this.updateStatus(file, args.statusText, '2');\n            this.uploadedFilesData.push(file);\n            if (!this.isBlazorSaveUrl) {\n                this.trigger('change', { file: this.uploadedFilesData });\n            }\n            this.checkActionButtonStatus();\n            if (this.fileList.length > 0) {\n                if ((!(this.getLiElement(file)).classList.contains(RESTRICT_RETRY))) {\n                    this.uploadSequential();\n                    this.checkActionComplete(true);\n                }\n                else {\n                    /* istanbul ignore next */\n                    (this.getLiElement(file)).classList.remove(RESTRICT_RETRY);\n                }\n            }\n        });\n    }\n    uploadFailed(e, file) {\n        let li = this.getLiElement(file);\n        let response = e && e.currentTarget ? this.getResponse(e) : null;\n        let statusMessage = this.localizedTexts('uploadFailedMessage');\n        let args = {\n            e, response: response, operation: 'upload', file: this.updateStatus(file, statusMessage, '0', false), statusText: statusMessage\n        };\n        if (!isNullOrUndefined(li)) {\n            this.renderFailureState(e, file, li);\n        }\n        this.trigger('failure', args, (args) => {\n            // tslint:disable-next-line\n            this.updateStatus(file, args.statusText, '0');\n            this.checkActionButtonStatus();\n            this.uploadSequential();\n            this.checkActionComplete(true);\n        });\n    }\n    uploadSequential() {\n        if (this.sequentialUpload) {\n            if (this.autoUpload) {\n                /* istanbul ignore next */\n                this.checkAutoUpload(this.filesData);\n            }\n            else {\n                this.uploadButtonClick();\n            }\n        }\n    }\n    checkActionComplete(increment) {\n        increment ? ++this.actionCompleteCount : --this.actionCompleteCount;\n        this.raiseActionComplete();\n    }\n    raiseActionComplete() {\n        if ((this.filesData.length === this.actionCompleteCount) && this.flag) {\n            this.flag = false;\n            let eventArgs = {\n                fileData: []\n            };\n            eventArgs.fileData = this.getSelectedFileStatus(this.selectedFiles);\n            this.trigger('actionComplete', eventArgs);\n        }\n    }\n    getSelectedFileStatus(selectedFiles) {\n        let matchFiles = [];\n        let matchFilesIndex = 0;\n        for (let selectFileIndex = 0; selectFileIndex < selectedFiles.length; selectFileIndex++) {\n            let selectedFileData = selectedFiles[selectFileIndex];\n            for (let fileDataIndex = 0; fileDataIndex < this.filesData.length; fileDataIndex++) {\n                if (this.filesData[fileDataIndex].name === selectedFileData.name) {\n                    matchFiles[matchFilesIndex] = this.filesData[fileDataIndex];\n                    ++matchFilesIndex;\n                }\n            }\n        }\n        return matchFiles;\n    }\n    updateProgressBarClasses(li, className) {\n        let progressBar = li.querySelector('.' + PROGRESSBAR);\n        if (!isNullOrUndefined(progressBar)) {\n            progressBar.classList.add(className);\n        }\n    }\n    removeProgressbar(li, callType) {\n        if (!isNullOrUndefined(li.querySelector('.' + PROGRESS_WRAPPER))) {\n            this.progressAnimation = new Animation({ duration: 1250 });\n            this.progressAnimation.animate(li.querySelector('.' + PROGRESS_WRAPPER), { name: 'FadeOut' });\n            this.progressAnimation.animate(li.querySelector('.' + PROGRESSBAR_TEXT), { name: 'FadeOut' });\n            setTimeout(() => { this.animateProgressBar(li, callType); }, 750);\n        }\n    }\n    /* istanbul ignore next */\n    animateProgressBar(li, callType) {\n        if (callType === 'success') {\n            li.classList.add(UPLOAD_SUCCESS);\n            if (!isNullOrUndefined(li.querySelector('.' + STATUS))) {\n                li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);\n                this.progressAnimation.animate(li.querySelector('.' + STATUS), { name: 'FadeIn' });\n                li.querySelector('.' + STATUS).classList.add(UPLOAD_SUCCESS);\n            }\n        }\n        else {\n            if (!isNullOrUndefined(li.querySelector('.' + STATUS))) {\n                li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);\n                this.progressAnimation.animate(li.querySelector('.' + STATUS), { name: 'FadeIn' });\n                li.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);\n            }\n        }\n        if (li.querySelector('.' + PROGRESS_WRAPPER)) {\n            detach(li.querySelector('.' + PROGRESS_WRAPPER));\n        }\n    }\n    setExtensions(extensions) {\n        if (extensions !== '' && !isNullOrUndefined(extensions)) {\n            this.element.setAttribute('accept', extensions);\n        }\n        else {\n            this.element.removeAttribute('accept');\n        }\n    }\n    templateComplier(uploadTemplate) {\n        if (uploadTemplate) {\n            try {\n                if (document.querySelectorAll(uploadTemplate).length) {\n                    return compile(document.querySelector(uploadTemplate).innerHTML.trim());\n                }\n            }\n            catch (exception) {\n                return compile(uploadTemplate);\n            }\n        }\n        return undefined;\n    }\n    setRTL() {\n        this.enableRtl ? addClass([this.uploadWrapper], RTL) : removeClass([this.uploadWrapper], RTL);\n    }\n    localizedTexts(localeText) {\n        this.l10n.setLocale(this.locale);\n        return this.l10n.getConstant(localeText);\n    }\n    setControlStatus() {\n        if (!this.enabled) {\n            this.uploadWrapper.classList.add(DISABLED);\n            this.element.setAttribute('disabled', 'disabled');\n            this.browseButton.setAttribute('disabled', 'disabled');\n            if (!isNullOrUndefined(this.clearButton)) {\n                this.clearButton.setAttribute('disabled', 'disabled');\n            }\n            if (!isNullOrUndefined(this.uploadButton)) {\n                this.uploadButton.setAttribute('disabled', 'disabled');\n            }\n        }\n        else {\n            if (this.uploadWrapper.classList.contains(DISABLED)) {\n                this.uploadWrapper.classList.remove(DISABLED);\n            }\n            if (!isNullOrUndefined(this.browseButton) && this.element.hasAttribute('disabled')) {\n                this.element.removeAttribute('disabled');\n                this.browseButton.removeAttribute('disabled');\n            }\n            if (!isNullOrUndefined(this.clearButton) && this.clearButton.hasAttribute('disabled')) {\n                this.clearButton.removeAttribute('disabled');\n            }\n            if (!isNullOrUndefined(this.uploadButton) && this.uploadButton.hasAttribute('disabled')) {\n                this.uploadButton.hasAttribute('disabled');\n            }\n        }\n    }\n    checkHTMLAttributes(isDynamic) {\n        let attributes$$1 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) :\n            ['accept', 'multiple', 'disabled'];\n        for (let prop of attributes$$1) {\n            if (!isNullOrUndefined(this.element.getAttribute(prop))) {\n                switch (prop) {\n                    case 'accept':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.uploaderOptions) || (this.uploaderOptions['allowedExtensions'] === undefined))\n                            || isDynamic) {\n                            this.setProperties({ allowedExtensions: this.element.getAttribute('accept') }, !isDynamic);\n                            this.initialAttr.accept = this.allowedExtensions;\n                        }\n                        break;\n                    case 'multiple':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.uploaderOptions) || (this.uploaderOptions['multiple'] === undefined)) || isDynamic) {\n                            let isMutiple = this.element.getAttribute(prop) === 'multiple' ||\n                                this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? true : false;\n                            this.setProperties({ multiple: isMutiple }, !isDynamic);\n                            this.initialAttr.multiple = true;\n                        }\n                        break;\n                    case 'disabled':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.uploaderOptions) || (this.uploaderOptions['enabled'] === undefined)) || isDynamic) {\n                            let isDisabled = this.element.getAttribute(prop) === 'disabled' ||\n                                this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? false : true;\n                            this.setProperties({ enabled: isDisabled }, !isDynamic);\n                            this.initialAttr.disabled = true;\n                        }\n                }\n            }\n        }\n    }\n    chunkUpload(file, custom, fileIndex) {\n        let start = 0;\n        let end = Math.min(this.asyncSettings.chunkSize, file.size);\n        let index = 0;\n        let blob = file.rawFile.slice(start, end);\n        let metaData = { chunkIndex: index, blob: blob, file: file, start: start, end: end, retryCount: 0, request: null };\n        this.sendRequest(file, metaData, custom, fileIndex);\n    }\n    sendRequest(file, metaData, custom, fileIndex) {\n        let formData = new FormData();\n        let blob = file.rawFile.slice(metaData.start, metaData.end);\n        formData.append('chunkFile', blob, file.name);\n        formData.append(this.uploaderName, blob, file.name);\n        formData.append('chunk-index', metaData.chunkIndex.toString());\n        formData.append('chunkIndex', metaData.chunkIndex.toString());\n        let totalChunk = Math.max(Math.ceil(file.size / this.asyncSettings.chunkSize), 1);\n        formData.append('total-chunk', totalChunk.toString());\n        formData.append('totalChunk', totalChunk.toString());\n        let ajax = new Ajax({ url: this.asyncSettings.saveUrl, type: 'POST', async: true, contentType: null });\n        ajax.emitError = false;\n        ajax.onLoad = (e) => { this.chunkUploadComplete(e, metaData, custom); return {}; };\n        ajax.onUploadProgress = (e) => {\n            this.chunkUploadInProgress(e, metaData, custom);\n            return {};\n        };\n        let eventArgs = {\n            fileData: file,\n            customFormData: [],\n            cancel: false,\n            chunkSize: this.asyncSettings.chunkSize === 0 ? null : this.asyncSettings.chunkSize\n        };\n        ajax.beforeSend = (e) => {\n            eventArgs.currentRequest = ajax.httpRequest;\n            eventArgs.currentChunkIndex = metaData.chunkIndex;\n            /* istanbul ignore next */\n            if (isBlazor()) {\n                if (this.currentRequestHeader) {\n                    this.updateCustomheader(ajax.httpRequest, this.currentRequestHeader);\n                }\n                if (this.customFormDatas) {\n                    this.updateFormData(formData, this.customFormDatas);\n                }\n            }\n            if (eventArgs.currentChunkIndex === 0) {\n                // This event is currently not required but to avoid breaking changes for previous customer, we have included.\n                this.trigger('uploading', eventArgs, (eventArgs) => {\n                    this.uploadingEventCallback(formData, eventArgs, e, file);\n                });\n            }\n            else {\n                this.trigger('chunkUploading', eventArgs, (eventArgs) => {\n                    this.uploadingEventCallback(formData, eventArgs, e, file);\n                });\n            }\n        };\n        /* istanbul ignore next */\n        ajax.onError = (e) => { this.chunkUploadFailed(e, metaData, custom); return {}; };\n        ajax.send(formData);\n        metaData.request = ajax;\n    }\n    uploadingEventCallback(formData, eventArgs, e, file) {\n        if (eventArgs.cancel) {\n            this.eventCancelByArgs(e, eventArgs, file);\n        }\n        else {\n            this.updateFormData(formData, eventArgs.customFormData);\n        }\n    }\n    eventCancelByArgs(e, eventArgs, file) {\n        e.cancel = true;\n        if (eventArgs.fileData.statusCode === '5') {\n            return;\n        }\n        let liElement = this.getLiElement(eventArgs.fileData);\n        liElement.querySelector('.' + STATUS).innerHTML = this.localizedTexts('fileUploadCancel');\n        liElement.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);\n        eventArgs.fileData.statusCode = '5';\n        eventArgs.fileData.status = this.localizedTexts('fileUploadCancel');\n        this.pauseButton = this.createElement('span', { className: 'e-icons e-file-reload-btn', attrs: { 'tabindex': this.btnTabIndex } });\n        let removeIcon = liElement.querySelector('.' + REMOVE_ICON);\n        removeIcon.parentElement.insertBefore(this.pauseButton, removeIcon);\n        this.pauseButton.setAttribute('title', this.localizedTexts('retry'));\n        /* istanbul ignore next */\n        this.pauseButton.addEventListener('click', (e) => { this.reloadcanceledFile(e, file, liElement); }, false);\n        this.checkActionButtonStatus();\n    }\n    checkChunkUpload() {\n        return (this.asyncSettings.chunkSize <= 0 || isNullOrUndefined(this.asyncSettings.chunkSize)) ? false : true;\n    }\n    chunkUploadComplete(e, metaData, custom) {\n        let response = e.target;\n        let liElement;\n        if (response.readyState === 4 && response.status >= 200 && response.status < 300) {\n            let requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n            let totalChunk = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);\n            let eventArgs = {\n                event: e,\n                file: metaData.file,\n                chunkIndex: metaData.chunkIndex,\n                totalChunk: totalChunk,\n                chunkSize: this.asyncSettings.chunkSize,\n                response: requestResponse\n            };\n            this.trigger('chunkSuccess', eventArgs);\n            if (isNullOrUndefined(custom) || !custom) {\n                liElement = this.getLiElement(metaData.file);\n            }\n            this.updateMetaData(metaData);\n            if (metaData.end === metaData.file.size) {\n                metaData.file.statusCode = '3';\n            }\n            if (metaData.file.statusCode === '5') {\n                let eventArgs = { event: e, fileData: metaData.file, cancel: false };\n                this.trigger('canceling', eventArgs, (eventArgs) => {\n                    /* istanbul ignore next */\n                    if (eventArgs.cancel) {\n                        metaData.file.statusCode = '3';\n                        let spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n                        if (!isNullOrUndefined(liElement) && !isNullOrUndefined(spinnerTarget)) {\n                            hideSpinner(spinnerTarget);\n                            detach(liElement.querySelector('.e-spinner-pane'));\n                        }\n                        this.sendNextRequest(metaData);\n                    }\n                    else {\n                        metaData.request.emitError = false;\n                        response.abort();\n                        let formData = new FormData();\n                        let name = this.element.getAttribute('name');\n                        formData.append(name, metaData.file.name);\n                        formData.append('cancel-uploading', metaData.file.name);\n                        formData.append('cancelUploading', metaData.file.name);\n                        let ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);\n                        ajax.emitError = false;\n                        ajax.onLoad = (e) => { this.removeChunkFile(e, metaData, custom); return {}; };\n                        ajax.send(formData);\n                    }\n                });\n            }\n            else {\n                if ((totalChunk - 1) === metaData.chunkIndex && totalChunk > metaData.chunkIndex) {\n                    let index = this.pausedData.indexOf(metaData);\n                    if (index >= 0) {\n                        this.pausedData.splice(index, 1);\n                    }\n                    if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {\n                        if (liElement) {\n                            detach(liElement.querySelector('.' + PAUSE_UPLOAD));\n                        }\n                        this.removeChunkProgressBar(metaData);\n                    }\n                    this.raiseSuccessEvent(e, metaData.file);\n                    return;\n                }\n                this.sendNextRequest(metaData);\n            }\n        }\n        else {\n            this.chunkUploadFailed(e, metaData);\n        }\n    }\n    sendNextRequest(metaData) {\n        metaData.start = metaData.end;\n        metaData.end += this.asyncSettings.chunkSize;\n        metaData.end = Math.min(metaData.end, metaData.file.size);\n        metaData.chunkIndex += 1;\n        this.sendRequest(metaData.file, metaData);\n    }\n    removeChunkFile(e, metaData, custom) {\n        if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) && !custom)) {\n            let liElement = this.getLiElement(metaData.file);\n            let deleteIcon = liElement.querySelector('.' + ABORT_ICON);\n            let spinnerTarget = deleteIcon;\n            this.updateStatus(metaData.file, this.localizedTexts('fileUploadCancel'), '5');\n            this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n            this.removeProgressbar(liElement, 'failure');\n            deleteIcon.classList.remove(ABORT_ICON);\n            deleteIcon.classList.add(REMOVE_ICON);\n            deleteIcon.setAttribute('title', this.localizedTexts('remove'));\n            let pauseIcon = liElement.querySelector('.' + PAUSE_UPLOAD);\n            pauseIcon.classList.add(RETRY_ICON);\n            pauseIcon.classList.remove(PAUSE_UPLOAD);\n            pauseIcon.setAttribute('title', this.localizedTexts('retry'));\n            if (!isNullOrUndefined(liElement) && !isNullOrUndefined(deleteIcon)) {\n                hideSpinner(spinnerTarget);\n                detach(liElement.querySelector('.e-spinner-pane'));\n            }\n        }\n    }\n    pauseUpload(metaData, e, custom) {\n        metaData.file.statusCode = '4';\n        metaData.file.status = this.localizedTexts('pause');\n        this.updateMetaData(metaData);\n        let eventArgs = {\n            event: e ? e : null,\n            file: metaData.file,\n            chunkIndex: metaData.chunkIndex,\n            chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),\n            chunkSize: this.asyncSettings.chunkSize\n        };\n        this.abortUpload(metaData, custom, eventArgs);\n    }\n    abortUpload(metaData, custom, eventArgs) {\n        metaData.request.emitError = false;\n        metaData.request.httpRequest.abort();\n        let liElement = this.getLiElement(metaData.file);\n        if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {\n            let targetElement = liElement.querySelector('.' + PAUSE_UPLOAD);\n            targetElement.classList.remove(PAUSE_UPLOAD);\n            targetElement.classList.add(RESUME_UPLOAD);\n            targetElement.setAttribute('title', this.localizedTexts('resume'));\n            targetElement.nextElementSibling.classList.add(REMOVE_ICON);\n            targetElement.nextElementSibling.classList.remove(ABORT_ICON);\n            targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('remove'));\n        }\n        for (let i = 0; i < this.pausedData.length; i++) {\n            if (this.pausedData[i].file.name === metaData.file.name) {\n                this.pausedData.splice(i, 1);\n            }\n        }\n        this.pausedData.push(metaData);\n        this.trigger('pausing', eventArgs);\n    }\n    resumeUpload(metaData, e, custom) {\n        let liElement = this.getLiElement(metaData.file);\n        let targetElement;\n        if (!isNullOrUndefined(liElement)) {\n            targetElement = liElement.querySelector('.' + RESUME_UPLOAD);\n        }\n        if (!isNullOrUndefined(targetElement) && (isNullOrUndefined(custom) || !custom)) {\n            targetElement.classList.remove(RESUME_UPLOAD);\n            targetElement.classList.add(PAUSE_UPLOAD);\n            targetElement.setAttribute('title', this.localizedTexts('pause'));\n            targetElement.nextElementSibling.classList.remove(REMOVE_ICON);\n            targetElement.nextElementSibling.classList.add(ABORT_ICON);\n            targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('abort'));\n        }\n        metaData.file.status = this.localizedTexts('inProgress');\n        metaData.file.statusCode = '3';\n        this.updateMetaData(metaData);\n        let eventArgs = {\n            event: e ? e : null,\n            file: metaData.file,\n            chunkIndex: metaData.chunkIndex,\n            chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),\n            chunkSize: this.asyncSettings.chunkSize\n        };\n        this.trigger('resuming', eventArgs);\n        for (let i = 0; i < this.pausedData.length; i++) {\n            if (this.pausedData[i].end === this.pausedData[i].file.size) {\n                this.chunkUploadComplete(e, metaData, custom);\n            }\n            else {\n                if (this.pausedData[i].file.name === metaData.file.name) {\n                    this.pausedData[i].start = this.pausedData[i].end;\n                    this.pausedData[i].end = this.pausedData[i].end + this.asyncSettings.chunkSize;\n                    this.pausedData[i].end = Math.min(this.pausedData[i].end, this.pausedData[i].file.size);\n                    this.pausedData[i].chunkIndex = this.pausedData[i].chunkIndex + 1;\n                    this.sendRequest(this.pausedData[i].file, this.pausedData[i], custom);\n                }\n            }\n        }\n    }\n    updateMetaData(metaData) {\n        if (this.uploadMetaData.indexOf(metaData) === -1) {\n            this.uploadMetaData.push(metaData);\n        }\n        else {\n            this.uploadMetaData.splice(this.uploadMetaData.indexOf(metaData), 1);\n            this.uploadMetaData.push(metaData);\n        }\n    }\n    removeChunkProgressBar(metaData) {\n        let liElement = this.getLiElement(metaData.file);\n        if (!isNullOrUndefined(liElement)) {\n            this.updateProgressBarClasses(liElement, UPLOAD_SUCCESS);\n            this.removeProgressbar(liElement, 'success');\n            let cancelButton = liElement.querySelector('.' + ABORT_ICON);\n            if (!isNullOrUndefined(cancelButton)) {\n                cancelButton.classList.add(DELETE_ICON);\n                cancelButton.setAttribute('title', this.localizedTexts('delete'));\n                cancelButton.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);\n            }\n        }\n    }\n    chunkUploadFailed(e, metaData, custom) {\n        let chunkCount = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);\n        let liElement;\n        if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {\n            liElement = this.getLiElement(metaData.file);\n        }\n        let requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n        let eventArgs = {\n            event: e,\n            file: metaData.file,\n            chunkIndex: metaData.chunkIndex,\n            totalChunk: chunkCount,\n            chunkSize: this.asyncSettings.chunkSize,\n            cancel: false,\n            response: requestResponse\n        };\n        this.trigger('chunkFailure', eventArgs, (eventArgs) => {\n            // To prevent triggering of failure event\n            // tslint:disable-next-line\n            if (!eventArgs.cancel) {\n                if (metaData.retryCount < this.asyncSettings.retryCount) {\n                    setTimeout(() => { this.retryRequest(liElement, metaData, custom); }, this.asyncSettings.retryAfterDelay);\n                }\n                else {\n                    if (!isNullOrUndefined(liElement)) {\n                        let pauseButton = liElement.querySelector('.' + PAUSE_UPLOAD) ?\n                            liElement.querySelector('.' + PAUSE_UPLOAD) : liElement.querySelector('.' + RESUME_UPLOAD);\n                        if (!isNullOrUndefined(pauseButton)) {\n                            pauseButton.classList.add(RETRY_ICON);\n                            pauseButton.classList.remove(PAUSE_UPLOAD, RESUME_UPLOAD);\n                        }\n                        this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n                        this.removeProgressbar(liElement, 'failure');\n                        liElement.querySelector('.e-icons').classList.remove(UPLOAD_INPROGRESS);\n                        let iconElement = liElement.querySelector('.' + ABORT_ICON) ?\n                            liElement.querySelector('.' + ABORT_ICON) : liElement.querySelector('.' + REMOVE_ICON);\n                        iconElement.classList.remove(ABORT_ICON);\n                        if (!isNullOrUndefined(liElement.querySelector('.' + PAUSE_UPLOAD))) {\n                            detach(liElement.querySelector('.' + PAUSE_UPLOAD));\n                        }\n                        if (metaData.start > 0) {\n                            iconElement.classList.add(DELETE_ICON);\n                            iconElement.setAttribute('title', this.localizedTexts('delete'));\n                        }\n                        else {\n                            iconElement.classList.add(REMOVE_ICON);\n                            iconElement.setAttribute('title', this.localizedTexts('remove'));\n                        }\n                    }\n                    metaData.retryCount = 0;\n                    let file = metaData.file;\n                    let failureMessage = this.localizedTexts('uploadFailedMessage');\n                    let args = {\n                        e, response: requestResponse,\n                        operation: 'upload',\n                        file: this.updateStatus(file, failureMessage, '0', false),\n                        statusText: failureMessage\n                    };\n                    this.trigger('failure', args, (args) => {\n                        // tslint:disable-next-line\n                        this.updateStatus(file, args.statusText, '0');\n                        this.uploadSequential();\n                        this.checkActionComplete(true);\n                    });\n                }\n            }\n        });\n    }\n    retryRequest(liElement, metaData, custom) {\n        if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {\n            this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n        }\n        metaData.retryCount += 1;\n        this.sendRequest(metaData.file, metaData);\n    }\n    checkPausePlayAction(e) {\n        let targetElement = e.target;\n        let selectedElement = e.target.parentElement;\n        let index = this.fileList.indexOf(selectedElement);\n        let fileData = this.filesData[index];\n        let metaData = this.getCurrentMetaData(fileData);\n        if (targetElement.classList.contains(PAUSE_UPLOAD)) {\n            /* istanbul ignore next */\n            this.pauseUpload(metaData, e);\n        }\n        else if (targetElement.classList.contains(RESUME_UPLOAD)) {\n            /* istanbul ignore next */\n            this.resumeUpload(metaData, e);\n        }\n        else if (targetElement.classList.contains(RETRY_ICON)) {\n            if (metaData.file.status === this.localizedTexts('fileUploadCancel')) {\n                this.retryUpload(metaData, false);\n            }\n            else {\n                this.retryUpload(metaData, true);\n            }\n        }\n    }\n    retryUpload(metaData, fromcanceledStage) {\n        if (fromcanceledStage) {\n            metaData.end = metaData.end + this.asyncSettings.chunkSize;\n            metaData.start = metaData.start + this.asyncSettings.chunkSize;\n            this.sendRequest(metaData.file, metaData);\n        }\n        else {\n            metaData.file.statusCode = '1';\n            metaData.file.status = this.localizedTexts('readyToUploadMessage');\n            this.chunkUpload(metaData.file);\n        }\n        /* istanbul ignore next */\n        (this.getLiElement(metaData.file)).classList.add(RESTRICT_RETRY);\n    }\n    chunkUploadInProgress(e, metaData, custom) {\n        if (metaData.file.statusCode === '4') {\n            return;\n        }\n        if (metaData.file.statusCode !== '4' && metaData.file.statusCode !== '5') {\n            metaData.file.statusCode = '3';\n            metaData.file.status = this.localizedTexts('inProgress');\n        }\n        this.updateMetaData(metaData);\n        let liElement = this.getLiElement(metaData.file);\n        if (isNullOrUndefined(liElement)) {\n            return;\n        }\n        let retryElement = liElement.querySelector('.' + RETRY_ICON);\n        if (!isNullOrUndefined(retryElement)) {\n            retryElement.classList.add(PAUSE_UPLOAD);\n            retryElement.setAttribute('title', this.localizedTexts('pause'));\n            retryElement.classList.remove(RETRY_ICON);\n        }\n        if (!isNullOrUndefined(liElement)) {\n            if (!(liElement.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0)) {\n                let statusElement = liElement.querySelector('.' + STATUS);\n                if (isNullOrUndefined(this.template)) {\n                    statusElement.classList.add(UPLOAD_INPROGRESS);\n                    statusElement.classList.remove(UPLOAD_FAILED);\n                    this.createProgressBar(liElement);\n                    this.updateProgressBarClasses(liElement, UPLOAD_INPROGRESS);\n                }\n                let clearIcon = liElement.querySelector('.' + REMOVE_ICON) ? liElement.querySelector('.' + REMOVE_ICON) :\n                    liElement.querySelector('.' + DELETE_ICON);\n                if (!isNullOrUndefined(clearIcon)) {\n                    clearIcon.classList.add(ABORT_ICON);\n                    clearIcon.setAttribute('title', this.localizedTexts('abort'));\n                    clearIcon.classList.remove(REMOVE_ICON);\n                }\n            }\n            if (!isNaN(Math.round((e.loaded / e.total) * 100)) && isNullOrUndefined(this.template) && metaData.file.statusCode !== '4') {\n                let loadedSize = (metaData.chunkIndex * this.asyncSettings.chunkSize);\n                let value = Math.min((((loadedSize + e.loaded) / metaData.file.size) * 100), 100);\n                this.changeProgressValue(liElement, Math.round(value).toString() + '%');\n            }\n            if (metaData.chunkIndex === 0) {\n                this.checkActionButtonStatus();\n            }\n        }\n        if (isNullOrUndefined(liElement.querySelector('.' + PAUSE_UPLOAD)) && isNullOrUndefined(this.template)) {\n            this.pauseButton = this.createElement('span', { className: 'e-icons e-file-pause-btn', attrs: { 'tabindex': this.btnTabIndex } });\n            if (this.browserName === 'msie') {\n                this.pauseButton.classList.add('e-msie');\n            }\n            let abortIcon = liElement.querySelector('.' + ABORT_ICON);\n            abortIcon.parentElement.insertBefore(this.pauseButton, abortIcon);\n            this.pauseButton.setAttribute('title', this.localizedTexts('pause'));\n            this.pauseButton.addEventListener('click', (e) => { this.checkPausePlayAction(e); }, false);\n        }\n    }\n    /**\n     * It is used to convert bytes value into kilobytes or megabytes depending on the size based\n     * on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).\n     * @param { number } bytes - specifies the file size in bytes.\n     * @returns string\n     */\n    bytesToSize(bytes) {\n        let i = -1;\n        if (!bytes) {\n            return '0.0 KB';\n        }\n        do {\n            bytes = bytes / 1024;\n            i++;\n        } while (bytes > 99);\n        if (i >= 2) {\n            bytes = bytes * 1024;\n            i = 1;\n        }\n        return Math.max(bytes, 0).toFixed(1) + ' ' + ['KB', 'MB'][i];\n    }\n    /**\n     * Allows you to sort the file data alphabetically based on its file name clearly.\n     * @param { FileList } filesData - specifies the files data for upload.\n     * @returns File[]\n     */\n    /* istanbul ignore next */\n    sortFileList(filesData) {\n        filesData = filesData ? filesData : this.sortFilesList;\n        let files = filesData;\n        let fileNames = [];\n        for (let i = 0; i < files.length; i++) {\n            fileNames.push(files[i].name);\n        }\n        let sortedFileNames = fileNames.sort();\n        let sortedFilesData = [];\n        for (let name of sortedFileNames) {\n            for (let i = 0; i < files.length; i++) {\n                if (name === files[i].name) {\n                    sortedFilesData.push(files[i]);\n                }\n            }\n        }\n        return sortedFilesData;\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n     * @method destroy\n     * @return {void}.\n     */\n    destroy() {\n        this.element.value = null;\n        if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            this.clearAll();\n        }\n        this.unWireEvents();\n        this.unBindDropEvents();\n        if (this.multiple) {\n            this.element.removeAttribute('multiple');\n        }\n        if (!this.enabled) {\n            this.element.removeAttribute('disabled');\n        }\n        this.element.removeAttribute('accept');\n        this.setInitialAttributes();\n        let attributes$$1 = ['aria-label', 'directory', 'webkitdirectory', 'tabindex'];\n        for (let key of attributes$$1) {\n            this.element.removeAttribute(key);\n        }\n        if (!this.isServerBlazor) {\n            if (!isNullOrUndefined(this.uploadWrapper)) {\n                this.uploadWrapper.parentElement.appendChild(this.element);\n                detach(this.uploadWrapper);\n            }\n            this.uploadWrapper = null;\n            super.destroy();\n        }\n        else {\n            this.uploadWrapper = null;\n        }\n    }\n    /**\n     * Allows you to call the upload process manually by calling save URL action.\n     * To process the selected files (added in upload queue), pass an empty argument otherwise\n     * upload the specific file based on its argument.\n     * @param { FileInfo | FileInfo[] } files - specifies the files data for upload.\n     * @returns void\n     */\n    upload(files, custom) {\n        files = files ? files : this.filesData;\n        if (this.sequentialUpload && (this.isFirstFileOnSelection || custom)) {\n            this.sequenceUpload(files);\n        }\n        else {\n            let uploadFiles = this.getFilesInArray(files);\n            let eventArgs = {\n                customFormData: [],\n                currentRequest: null,\n                cancel: false\n            };\n            this.trigger('beforeUpload', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel) {\n                    if (isBlazor()) {\n                        this.currentRequestHeader = eventArgs.currentRequest ? eventArgs.currentRequest : this.currentRequestHeader;\n                        this.customFormDatas = (eventArgs.customFormData && eventArgs.customFormData.length > 0) ?\n                            eventArgs.customFormData : this.customFormDatas;\n                    }\n                    this.uploadFiles(uploadFiles, custom);\n                }\n            });\n        }\n    }\n    getFilesInArray(files) {\n        let uploadFiles = [];\n        if (files instanceof Array) {\n            uploadFiles = files;\n        }\n        else {\n            uploadFiles.push(files);\n        }\n        return uploadFiles;\n    }\n    /* istanbul ignore next */\n    serverReadFileBase64(fileIndex, position, totalCount) {\n        return new Promise((resolve, reject) => {\n            let file = this.fileStreams[fileIndex].rawFile;\n            try {\n                let reader = new FileReader();\n                // tslint:disable-next-line\n                reader.onload = ((args) => {\n                    return () => {\n                        try {\n                            let contents = args.result;\n                            let data = contents ? contents.split(';base64,')[1] : null;\n                            resolve(data);\n                        }\n                        catch (e) {\n                            reject(e);\n                        }\n                    };\n                })(reader);\n                reader.readAsDataURL(file.slice(position, position + totalCount));\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    }\n    /* istanbul ignore next */\n    uploadFileCount(ele) {\n        let files = this.filesData;\n        if (!files || files.length === 0) {\n            return -1;\n        }\n        let result = files.length;\n        return result;\n    }\n    /* istanbul ignore next */\n    getFileRead(index, ele) {\n        let files = this.filesData;\n        if (!files || files.length === 0) {\n            return -1;\n        }\n        let file = files[index];\n        let fileCount = this.newFileRef++;\n        this.fileStreams[fileCount] = file;\n        return fileCount;\n    }\n    /* istanbul ignore next */\n    getFileInfo(index, ele) {\n        let files = this.filesData;\n        if (!files || files.length === 0) {\n            return null;\n        }\n        let file = files[index];\n        if (!file) {\n            return null;\n        }\n        return this.filesData[index];\n    }\n    uploadFiles(files, custom) {\n        let selectedFiles = [];\n        if (this.asyncSettings.saveUrl === '' || isNullOrUndefined(this.asyncSettings.saveUrl)) {\n            if (this.isServerBlazor) {\n                // tslint:disable-next-line\n                this.interopAdaptor.invokeMethodAsync('GetFileDetails', files);\n            }\n            return;\n        }\n        if (!custom || isNullOrUndefined(custom)) {\n            if (!this.multiple) {\n                let file = [];\n                file.push(files[0]);\n                selectedFiles = this.filterfileList(file);\n            }\n            else {\n                selectedFiles = this.filterfileList(files);\n            }\n        }\n        else {\n            selectedFiles = files;\n        }\n        for (let i = 0; i < selectedFiles.length; i++) {\n            if (this.isServerBlazor && !this.checkChunkUpload()) {\n                /* istanbul ignore next */\n                /* tslint:disable */\n                if (selectedFiles[i] && selectedFiles[i].rawFile instanceof File) {\n                    this.getBase64(selectedFiles[i].rawFile).then((data) => {\n                        this.base64String.push(data);\n                        this.uploadFilesRequest(selectedFiles, i, custom);\n                    });\n                }\n                /* tslint:disable */\n            }\n            else {\n                this.uploadFilesRequest(selectedFiles, i, custom);\n            }\n        }\n    }\n    uploadFilesRequest(selectedFiles, i, custom) {\n        let cloneFiles = [];\n        let chunkEnabled = this.checkChunkUpload();\n        let ajax = new Ajax(this.asyncSettings.saveUrl, 'POST', true, null);\n        ajax.emitError = false;\n        let getFileData;\n        /* istanbul ignore next */\n        if (this.isServerBlazor) {\n            getFileData = selectedFiles.slice(0);\n            cloneFiles.push(getFileData[i].rawFile);\n        }\n        let eventArgs = {\n            fileData: (this.isServerBlazor) ? getFileData[i] : selectedFiles[i],\n            customFormData: [],\n            cancel: false\n        };\n        let formData = new FormData();\n        ajax.beforeSend = (e) => {\n            eventArgs.currentRequest = ajax.httpRequest;\n            /* istanbul ignore next */\n            if (isBlazor()) {\n                eventArgs.fileData.rawFile = !chunkEnabled ? this.base64String[i] : eventArgs.fileData.rawFile;\n                if (this.currentRequestHeader) {\n                    this.updateCustomheader(ajax.httpRequest, this.currentRequestHeader);\n                }\n                if (this.customFormDatas) {\n                    this.updateFormData(formData, this.customFormDatas);\n                }\n            }\n            this.trigger('uploading', eventArgs, (eventArgs) => {\n                /* istanbul ignore next */\n                if (this.isServerBlazor && !chunkEnabled) {\n                    selectedFiles[i].rawFile = eventArgs.fileData.rawFile = cloneFiles[i];\n                }\n                if (eventArgs.cancel) {\n                    this.eventCancelByArgs(e, eventArgs, selectedFiles[i]);\n                }\n                this.updateFormData(formData, eventArgs.customFormData);\n            });\n        };\n        if (selectedFiles[i].statusCode === '1') {\n            let name = this.element.getAttribute('name');\n            formData.append(name, selectedFiles[i].rawFile, selectedFiles[i].name);\n            if (chunkEnabled && selectedFiles[i].size > this.asyncSettings.chunkSize) {\n                this.chunkUpload(selectedFiles[i], custom, i);\n            }\n            else {\n                ajax.onLoad = (e) => {\n                    if (eventArgs.cancel && this.isServerBlazor) {\n                        return {};\n                    }\n                    else {\n                        this.uploadComplete(e, selectedFiles[i], custom);\n                        return {};\n                    }\n                };\n                ajax.onUploadProgress = (e) => {\n                    if (eventArgs.cancel && this.isServerBlazor) {\n                        return {};\n                    }\n                    else {\n                        this.uploadInProgress(e, selectedFiles[i], custom, ajax);\n                        return {};\n                    }\n                };\n                /* istanbul ignore next */\n                ajax.onError = (e) => { this.uploadFailed(e, selectedFiles[i]); return {}; };\n                ajax.send(formData);\n            }\n        }\n    }\n    spliceFiles(liIndex) {\n        let liElement = this.fileList[liIndex];\n        let allFiles = this.getFilesData();\n        let nameElements = +liElement.getAttribute('data-files-count');\n        let startIndex = 0;\n        for (let i = 0; i < liIndex; i++) {\n            startIndex += (+this.fileList[i].getAttribute('data-files-count'));\n        }\n        let endIndex = (startIndex + nameElements) - 1;\n        for (let j = endIndex; j >= startIndex; j--) {\n            allFiles.splice(j, 1);\n        }\n    }\n    /**\n     * Remove the uploaded file from server manually by calling the remove URL action.\n     * If you pass an empty argument to this method, the complete file list can be cleared,\n     * otherwise remove the specific file based on its argument (“file_data”).\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to remove from file list/server.\n     * @param { boolean } customTemplate - Set true if the component rendering with customize template.\n     * @param { boolean } removeDirectly - Set true if files remove without removing event.\n     * @param { boolean } postRawFile - Set false, to post file name only to the remove action.\n     * @returns void\n     */\n    remove(fileData, customTemplate, removeDirectly, postRawFile, args) {\n        if (isNullOrUndefined(postRawFile)) {\n            postRawFile = true;\n        }\n        let eventArgs = {\n            event: args,\n            cancel: false,\n            filesData: [],\n            customFormData: [],\n            postRawFile: postRawFile,\n            currentRequest: null\n        };\n        let beforeEventArgs = {\n            cancel: false,\n            customFormData: [],\n            currentRequest: null\n        };\n        this.trigger('beforeRemove', beforeEventArgs, (beforeEventArgs) => {\n            if (!beforeEventArgs.cancel) {\n                if (isBlazor()) {\n                    this.currentRequestHeader = beforeEventArgs.currentRequest;\n                    this.customFormDatas = beforeEventArgs.customFormData;\n                }\n                let index;\n                if (this.isFormUpload() && !this.isBlazorSaveUrl) {\n                    eventArgs.filesData = fileData;\n                    this.trigger('removing', eventArgs, (eventArgs) => {\n                        if (!eventArgs.cancel) {\n                            let removingFiles = this.getFilesInArray(fileData);\n                            let isLiRemoved = false;\n                            let liIndex;\n                            for (let data of removingFiles) {\n                                if (!isLiRemoved) {\n                                    liIndex = this.fileList.indexOf(data.list);\n                                }\n                                if (liIndex > -1) {\n                                    let inputElement = !isNullOrUndefined(data.input) ? data.input : null;\n                                    if (inputElement) {\n                                        detach(inputElement);\n                                    }\n                                    this.spliceFiles(liIndex);\n                                    detach(this.fileList[liIndex]);\n                                    this.fileList.splice(liIndex, 1);\n                                    isLiRemoved = true;\n                                    liIndex = -1;\n                                }\n                            }\n                        }\n                    });\n                }\n                else if (this.isForm && (isNullOrUndefined(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === '')\n                    && !this.isBlazorSaveUrl) {\n                    eventArgs.filesData = this.getFilesData();\n                    this.trigger('removing', eventArgs, (eventArgs) => {\n                        if (!eventArgs.cancel) {\n                            this.clearAll();\n                        }\n                    });\n                }\n                else {\n                    let removeFiles = [];\n                    fileData = !isNullOrUndefined(fileData) ? fileData : this.filesData;\n                    if (fileData instanceof Array) {\n                        removeFiles = fileData;\n                    }\n                    else {\n                        removeFiles.push(fileData);\n                    }\n                    eventArgs.filesData = removeFiles;\n                    let removeUrl = this.asyncSettings.removeUrl;\n                    let validUrl = (removeUrl === '' || isNullOrUndefined(removeUrl)) ? false : true;\n                    for (let files of removeFiles) {\n                        index = this.filesData.indexOf(files);\n                        if ((files.statusCode === '2' || files.statusCode === '4') && validUrl) {\n                            this.removeUploadedFile(files, eventArgs, removeDirectly, customTemplate);\n                        }\n                        else {\n                            if (!removeDirectly) {\n                                this.trigger('removing', eventArgs, (eventArgs) => {\n                                    if (!eventArgs.cancel) {\n                                        this.removeFilesData(files, customTemplate);\n                                    }\n                                });\n                            }\n                            else {\n                                this.removeFilesData(files, customTemplate);\n                            }\n                        }\n                        if (args && !args.target.classList.contains(REMOVE_ICON)) {\n                            this.checkActionComplete(false);\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Clear all the file entries from list that can be uploaded files or added in upload queue.\n     * @returns void\n     */\n    clearAll() {\n        if (isNullOrUndefined(this.listParent) && !(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            if (this.browserName !== 'msie') {\n                this.element.value = '';\n            }\n            this.filesData = [];\n            return;\n        }\n        let eventArgs = {\n            cancel: false,\n            filesData: this.filesData\n        };\n        this.trigger('clearing', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel) {\n                this.clearData();\n                this.actionCompleteCount = 0;\n                this.count = -1;\n            }\n        });\n    }\n    /**\n     * Get the data of files which are shown in file list.\n     * @param { number } index - specifies the file list item(li) index.\n     * @returns FileInfo[]\n     */\n    getFilesData(index) {\n        if (!this.isServerBlazor) {\n            if (isNullOrUndefined(index)) {\n                return this.filesData;\n            }\n            else {\n                return this.getSelectedFiles(index);\n            }\n        }\n        else {\n            for (let i = 0; i < this.filesData.length; i++) {\n                this.filesData[i].rawFile = this.base64String[i];\n            }\n            return this.filesData;\n        }\n    }\n    /**\n     * Pauses the in-progress chunked upload based on the file data.\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to pause from uploading.\n     * @param { boolean } custom - Set true if used custom UI.\n     * @returns void\n     */\n    pause(fileData, custom) {\n        fileData = fileData ? fileData : this.filesData;\n        let fileDataFiles = this.getFilesInArray(fileData);\n        this.pauseUploading(fileDataFiles, custom);\n    }\n    pauseUploading(fileData, custom) {\n        let files = this.getFiles(fileData);\n        for (let i = 0; i < files.length; i++) {\n            if (files[i].statusCode === '3') {\n                this.pauseUpload(this.getCurrentMetaData(files[i], null), null, custom);\n            }\n        }\n    }\n    getFiles(fileData) {\n        let files = [];\n        if (!isNullOrUndefined(fileData) && !(fileData instanceof Array)) {\n            files.push(fileData);\n        }\n        else {\n            files = fileData;\n        }\n        return files;\n    }\n    /**\n     * Resumes the chunked upload that is previously paused based on the file data.\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to resume the paused file.\n     * @param { boolean } custom - Set true if used custom UI.\n     * @returns void\n     */\n    resume(fileData, custom) {\n        fileData = fileData ? fileData : this.filesData;\n        let fileDataFiles = this.getFilesInArray(fileData);\n        this.resumeFiles(fileDataFiles, custom);\n    }\n    resumeFiles(fileData, custom) {\n        let files = this.getFiles(fileData);\n        for (let i = 0; i < files.length; i++) {\n            if (files[i].statusCode === '4') {\n                this.resumeUpload(this.getCurrentMetaData(files[i], null), null, custom);\n            }\n        }\n    }\n    /**\n     * Retries the canceled or failed file upload based on the file data.\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to retry the canceled or failed file.\n     * @param { boolean } fromcanceledStage - Set true to retry from canceled stage and set false to retry from initial stage.\n     * @returns void\n     */\n    retry(fileData, fromcanceledStage, custom) {\n        fileData = fileData ? fileData : this.filesData;\n        let fileDataFiles = this.getFilesInArray(fileData);\n        this.retryFailedFiles(fileDataFiles, fromcanceledStage, custom);\n    }\n    retryFailedFiles(fileData, fromcanceledStage, custom) {\n        let files = this.getFiles(fileData);\n        for (let i = 0; i < files.length; i++) {\n            if (files[i].statusCode === '5' || files[i].statusCode === '0') {\n                if (this.asyncSettings.chunkSize > 0) {\n                    this.retryUpload(this.getCurrentMetaData(files[i], null), fromcanceledStage);\n                }\n                else {\n                    let liElement;\n                    if (!custom) {\n                        liElement = this.fileList[this.filesData.indexOf(files[i])];\n                    }\n                    this.reloadcanceledFile(null, files[i], liElement, custom);\n                }\n            }\n        }\n    }\n    /**\n     * Stops the in-progress chunked upload based on the file data.\n     * When the file upload is canceled, the partially uploaded file is removed from server.\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to cancel the progressing file.\n     * @returns void\n     */\n    cancel(fileData) {\n        fileData = fileData ? fileData : this.filesData;\n        let cancelingFiles = this.getFilesInArray(fileData);\n        this.cancelUpload(cancelingFiles);\n    }\n    cancelUpload(fileData) {\n        let files = this.getFiles(fileData);\n        if (this.asyncSettings.chunkSize > 0) {\n            for (let i = 0; i < files.length; i++) {\n                if (files[i].statusCode === '3') {\n                    let metaData = this.getCurrentMetaData(files[i], null);\n                    metaData.file.statusCode = '5';\n                    metaData.file.status = this.localizedTexts('fileUploadCancel');\n                    this.updateMetaData(metaData);\n                    this.showHideUploadSpinner(files[i]);\n                }\n            }\n        }\n        else {\n            for (let i = 0; i < files.length; i++) {\n                if (files[i].statusCode === '3') {\n                    files[i].statusCode = '5';\n                    files[i].status = this.localizedTexts('fileUploadCancel');\n                    this.showHideUploadSpinner(files[i]);\n                }\n            }\n        }\n    }\n    showHideUploadSpinner(files) {\n        let liElement = this.getLiElement(files);\n        if (!isNullOrUndefined(liElement) && isNullOrUndefined(this.template)) {\n            let spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n            createSpinner({ target: spinnerTarget, width: '20px' });\n            showSpinner(spinnerTarget);\n        }\n    }\n};\n__decorate$4([\n    Complex({ saveUrl: '', removeUrl: '' }, AsyncSettings)\n], Uploader.prototype, \"asyncSettings\", void 0);\n__decorate$4([\n    Property(false)\n], Uploader.prototype, \"sequentialUpload\", void 0);\n__decorate$4([\n    Property({})\n], Uploader.prototype, \"htmlAttributes\", void 0);\n__decorate$4([\n    Property('')\n], Uploader.prototype, \"cssClass\", void 0);\n__decorate$4([\n    Property(true)\n], Uploader.prototype, \"enabled\", void 0);\n__decorate$4([\n    Property(null)\n], Uploader.prototype, \"template\", void 0);\n__decorate$4([\n    Property(true)\n], Uploader.prototype, \"multiple\", void 0);\n__decorate$4([\n    Property(true)\n], Uploader.prototype, \"autoUpload\", void 0);\n__decorate$4([\n    Complex({}, ButtonsProps)\n], Uploader.prototype, \"buttons\", void 0);\n__decorate$4([\n    Property('')\n], Uploader.prototype, \"allowedExtensions\", void 0);\n__decorate$4([\n    Property(0)\n], Uploader.prototype, \"minFileSize\", void 0);\n__decorate$4([\n    Property(30000000)\n], Uploader.prototype, \"maxFileSize\", void 0);\n__decorate$4([\n    Property(null)\n], Uploader.prototype, \"dropArea\", void 0);\n__decorate$4([\n    Collection([{}], FilesProp)\n], Uploader.prototype, \"files\", void 0);\n__decorate$4([\n    Property(true)\n], Uploader.prototype, \"showFileList\", void 0);\n__decorate$4([\n    Property(false)\n], Uploader.prototype, \"directoryUpload\", void 0);\n__decorate$4([\n    Property('Default')\n], Uploader.prototype, \"dropEffect\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"created\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"actionComplete\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"rendering\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"beforeUpload\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"fileListRendering\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"selected\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"uploading\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"success\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"failure\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"removing\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"beforeRemove\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"clearing\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"progress\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"change\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"chunkSuccess\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"chunkFailure\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"chunkUploading\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"canceling\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"pausing\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"resuming\", void 0);\nUploader = __decorate$4([\n    NotifyPropertyChanges\n], Uploader);\n\n/**\n * Uploader modules\n */\n\nvar __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst APPLY = 'e-apply';\nconst CANCEL = 'e-cancel';\nconst CURRENT = 'e-current';\nconst CONTAINER = 'e-container';\nconst CTRLBTN = 'e-ctrl-btn';\nconst CTRLSWITCH = 'e-switch-ctrl-btn';\nconst DISABLED$1 = 'e-disabled';\nconst FORMATSWITCH = 'e-value-switch-btn';\nconst HANDLER = 'e-handler';\nconst HEX = 'e-hex';\nconst HIDEHEX = 'e-hide-hex-value';\nconst HIDEOPACITY = 'e-hide-opacity';\nconst HIDERGBA = 'e-hide-switchable-value';\nconst HIDEVALUE = 'e-hide-value';\nconst HIDEVALUESWITCH = 'e-hide-valueswitcher';\nconst HSVAREA = 'e-hsv-color';\nconst HSVCONTAINER = 'e-hsv-container';\nconst INPUTWRAPPER = 'e-selected-value';\nconst MODESWITCH = 'e-mode-switch-btn';\nconst NOCOLOR = 'e-nocolor-item';\nconst OPACITY = 'e-opacity-value';\nconst PALETTES = 'e-palette';\nconst PALETTECONTENT = 'e-color-palette';\nconst PICKERCONTENT = 'e-color-picker';\nconst PREVIEW = 'e-preview-container';\nconst PREVIOUS = 'e-previous';\nconst RTL$1 = 'e-rtl';\nconst SHOWVALUE = 'e-show-value';\nconst SELECT = 'e-selected';\nconst SPLITPREVIEW = 'e-split-preview';\nconst TILE = 'e-tile';\nconst presets = {\n    default: ['#000000', '#f44336', '#e91e63', '#9c27b0', '#673ab7', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#ffeb3b',\n        '#ffffff', '#ffebee', '#fce4ec', '#f3e5f5', '#ede7f6', '#e3f2fd', '#e1f5fe', '#e0f7fa', '#e0f2f1', '#fffde7',\n        '#f2f2f2', '#ffcdd2', '#f8bbd0', '#e1bee7', '#d1c4e9', '#bbdefb', '#b3e5fc', '#b2ebf2', '#b2dfdb', '#fff9c4',\n        '#e6e6e6', '#ef9a9a', '#f48fb1', '#ce93d8', '#b39ddb', '#90caf9', '#81d4fa', '#80deea', '#80cbc4', '#fff59d',\n        '#cccccc', '#e57373', '#f06292', '#ba68c8', '#9575cd', '#64b5f6', '#4fc3f7', '#4dd0e1', '#4db6ac', '#fff176',\n        '#b3b3b3', '#ef5350', '#ec407a', '#ab47bc', '#7e57c2', '#42a5f5', '#29b6f6', '#26c6da', '#26a69a', '#ffee58',\n        '#999999', '#e53935', '#d81b60', '#8e24aa', '#5e35b1', '#1e88e5', '#039be5', '#00acc1', '#00897b', '#fdd835',\n        '#808080', '#d32f2f', '#c2185b', '#7b1fa2', '#512da8', '#1976d2', '#0288d1', '#0097a7', '#00796b', '#fbc02d',\n        '#666666', '#c62828', '#ad1457', '#6a1b9a', '#4527a0', '#1565c0', '#0277bd', '#00838f', '#00695c', '#f9a825',\n        '#4d4d4d', '#b71c1c', '#880e4f', '#4a148c', '#311b92', '#0d47a1', '#01579b', '#006064', '#004d40', '#f57f17']\n};\n/**\n * ColorPicker component is a user interface to select and adjust color values. It provides supports for various\n * color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n * ```html\n * <input type=\"color\" id=\"color-picker\">\n * ```\n * ```typescript\n * <script>\n *   let colorPickerObj: ColorPicker = new ColorPicker(null , \"#color-picker\");\n * </script>\n * ```\n */\nlet ColorPicker = class ColorPicker extends Component {\n    constructor(options, element) {\n        super(options, element);\n    }\n    preRender() {\n        let ele = this.element;\n        this.formElement = closest(this.element, 'form');\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n        }\n        let localeText = { Apply: 'Apply', Cancel: 'Cancel', ModeSwitcher: 'Switch Mode' };\n        this.l10n = new L10n('colorpicker', localeText, this.locale);\n        if (ele.getAttribute('ejs-for') && !ele.getAttribute('name')) {\n            ele.setAttribute('name', ele.id);\n        }\n    }\n    /**\n     * To Initialize the component rendering\n     * @private\n     */\n    render() {\n        this.initWrapper();\n        if (this.inline) {\n            this.createWidget();\n        }\n        else {\n            this.createSplitBtn();\n        }\n        if (!this.enableOpacity) {\n            addClass([this.container.parentElement], HIDEOPACITY);\n        }\n        this.renderComplete();\n    }\n    initWrapper() {\n        let wrapper = this.createElement('div', { className: 'e-' + this.getModuleName() + '-wrapper' });\n        this.element.parentNode.insertBefore(wrapper, this.element);\n        wrapper.appendChild(this.element);\n        attributes(this.element, { 'tabindex': '-1', 'spellcheck': 'false' });\n        this.container = this.createElement('div', { className: CONTAINER });\n        this.getWrapper().appendChild(this.container);\n        let value = this.value ? this.roundValue(this.value).toLowerCase() : '#008000ff';\n        if (this.noColor && this.mode === 'Palette' && this.value === '') {\n            value = '';\n        }\n        let slicedValue = value.slice(0, 7);\n        if (isNullOrUndefined(this.initialInputValue)) {\n            this.initialInputValue = slicedValue;\n        }\n        this.element.value = slicedValue;\n        if (this.enableOpacity) {\n            this.setProperties({ 'value': value }, true);\n        }\n        else {\n            this.setProperties({ 'value': slicedValue }, true);\n        }\n        if (this.enableRtl) {\n            wrapper.classList.add(RTL$1);\n        }\n        if (this.cssClass) {\n            addClass([wrapper], this.cssClass.split(' '));\n        }\n        this.tileRipple = rippleEffect(this.container, { selector: '.' + TILE });\n        this.ctrlBtnRipple = rippleEffect(this.container, { selector: '.e-btn' });\n    }\n    getWrapper() {\n        return this.element.parentElement;\n    }\n    createWidget() {\n        if (this.mode === 'Palette') {\n            this.createPalette();\n            if (!this.inline) {\n                this.firstPaletteFocus();\n            }\n        }\n        else {\n            this.createPicker();\n            if (!this.inline) {\n                this.getDragHandler().focus();\n            }\n        }\n        this.isRgb = true;\n        this.createInput();\n        this.createCtrlBtn();\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        if (this.inline && this.disabled) {\n            this.toggleDisabled(true);\n        }\n        if (Browser.isDevice) {\n            this.refreshPopupPos();\n        }\n    }\n    createSplitBtn() {\n        let splitButton = this.createElement('button', { className: 'e-split-colorpicker' });\n        this.getWrapper().appendChild(splitButton);\n        this.splitBtn = new SplitButton({\n            iconCss: 'e-selected-color',\n            target: this.container,\n            disabled: this.disabled,\n            enableRtl: this.enableRtl,\n            open: this.onOpen.bind(this),\n            click: (args) => {\n                this.trigger('change', {\n                    currentValue: { hex: this.value.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(this.value)) },\n                    previousValue: { hex: null, rgba: null }, value: this.value\n                });\n            }\n        });\n        this.splitBtn.createElement = this.createElement;\n        this.splitBtn.appendTo(splitButton);\n        let preview = this.createElement('span', { className: SPLITPREVIEW });\n        select('.e-selected-color', splitButton).appendChild(preview);\n        preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));\n        let popupEle = this.getPopupEle();\n        addClass([popupEle], 'e-colorpicker-popup');\n        if (this.cssClass) {\n            addClass([popupEle], this.cssClass.split(' '));\n        }\n        if (Browser.isDevice) {\n            let popupInst = this.getPopupInst();\n            popupInst.relateTo = document.body;\n            popupInst.position = { X: 'center', Y: 'center' };\n            popupInst.targetType = 'container';\n            popupInst.collision = { X: 'fit', Y: 'fit' };\n            popupInst.offsetY = 4;\n            popupEle.style.zIndex = getZindexPartial(this.splitBtn.element).toString();\n        }\n        this.bindCallBackEvent();\n    }\n    onOpen(args) {\n        this.trigger('open', { element: this.container });\n    }\n    getPopupInst() {\n        return getInstance(this.getPopupEle(), Popup);\n    }\n    bindCallBackEvent() {\n        this.splitBtn.beforeOpen = (args) => {\n            let callBackPromise = new Deferred();\n            this.trigger('beforeOpen', args, (observeOpenArgs) => {\n                if (!observeOpenArgs.cancel) {\n                    let popupEle = this.getPopupEle();\n                    popupEle.style.top = formatUnit(0 + pageYOffset);\n                    popupEle.style.left = formatUnit(0 + pageXOffset);\n                    popupEle.style.display = 'block';\n                    this.createWidget();\n                    popupEle.style.display = '';\n                    if (Browser.isDevice) {\n                        this.modal = this.createElement('div');\n                        this.modal.className = 'e-' + this.getModuleName() + ' e-modal';\n                        this.modal.style.display = 'none';\n                        document.body.insertBefore(this.modal, popupEle);\n                        document.body.className += ' e-colorpicker-overflow';\n                        this.modal.style.display = 'block';\n                        this.modal.style.zIndex = (Number(popupEle.style.zIndex) - 1).toString();\n                    }\n                }\n                args.cancel = observeOpenArgs.cancel;\n                callBackPromise.resolve(observeOpenArgs);\n            });\n            return callBackPromise;\n        };\n        this.splitBtn.beforeClose = (args) => {\n            let callBackPromise = new Deferred();\n            if (!isNullOrUndefined(args.event)) {\n                let beforeCloseArgs = { element: this.container, event: args.event, cancel: false };\n                this.trigger('beforeClose', beforeCloseArgs, (observedCloseArgs) => {\n                    if (Browser.isDevice && args.event.target === this.modal) {\n                        observedCloseArgs.cancel = true;\n                    }\n                    if (!observedCloseArgs.cancel) {\n                        this.onPopupClose();\n                    }\n                    args.cancel = observedCloseArgs.cancel;\n                    callBackPromise.resolve(observedCloseArgs);\n                });\n            }\n            else {\n                callBackPromise.resolve(args);\n            }\n            return callBackPromise;\n        };\n    }\n    onPopupClose() {\n        this.unWireEvents();\n        this.destroyOtherComp();\n        this.container.style.width = '';\n        select('.' + SPLITPREVIEW, this.splitBtn.element).style.backgroundColor\n            = this.convertToRgbString(this.hexToRgb(this.value));\n        this.container.innerHTML = '';\n        removeClass([this.container], [PICKERCONTENT, PALETTECONTENT]);\n        if (Browser.isDevice && this.modal) {\n            removeClass([document.body], 'e-colorpicker-overflow');\n            this.modal.style.display = 'none';\n            this.modal.outerHTML = '';\n            this.modal = null;\n        }\n    }\n    createPalette() {\n        classList(this.container, [PALETTECONTENT], [PICKERCONTENT]);\n        if (this.presetColors) {\n            let paletteGroup = this.createElement('div', { className: 'e-custom-palette' });\n            this.appendElement(paletteGroup);\n            let keys = Object.keys(this.presetColors);\n            if (keys.length === 1) {\n                this.appendPalette(this.presetColors[keys[0]], keys[0], paletteGroup);\n            }\n            else {\n                for (let i = 0, len = keys.length; i < len; i++) {\n                    this.appendPalette(this.presetColors[keys[i]], keys[i], paletteGroup);\n                }\n            }\n            if (selectAll('.e-row', paletteGroup).length > 10) {\n                addClass([paletteGroup], 'e-palette-group');\n            }\n        }\n        else {\n            this.appendPalette(presets.default, 'default');\n        }\n        if (this.mode === 'Palette' && !this.modeSwitcher && this.noColor) {\n            this.setNoColor();\n        }\n        let width = parseInt(getComputedStyle(this.container).borderBottomWidth, 10);\n        this.container.style.width = formatUnit(this.container.children[0].offsetWidth + width + width);\n        this.rgb = this.hexToRgb(this.roundValue(this.value));\n        this.hsv = this.rgbToHsv.apply(this, this.rgb);\n    }\n    firstPaletteFocus() {\n        if (!select('.' + SELECT, this.container.children[0])) {\n            selectAll('.' + PALETTES, this.container)[0].focus();\n        }\n    }\n    appendPalette(colors, key, refEle) {\n        let palette = this.createElement('div', { className: PALETTES, attrs: { 'tabindex': '0' } });\n        if (refEle) {\n            refEle.appendChild(palette);\n        }\n        else {\n            this.appendElement(palette);\n        }\n        let row;\n        let tile;\n        let roundedColor;\n        for (let i = 0, len = colors.length; i < len; i++) {\n            if (i === 0 || i % this.columns === 0) {\n                row = this.createElement('div', {\n                    className: 'e-row', attrs: { 'role': 'row' }\n                });\n                palette.appendChild(row);\n            }\n            roundedColor = this.roundValue(colors[i]).toLowerCase();\n            tile = this.createElement('span', {\n                className: TILE, attrs: { 'role': 'gridcell', 'aria-label': roundedColor, 'aria-selected': 'false' }\n            });\n            this.trigger('beforeTileRender', { element: tile, presetName: key, value: colors[i] });\n            row.appendChild(tile);\n            if (this.value === roundedColor) {\n                this.addTileSelection(tile);\n                palette.focus();\n            }\n            tile.style.backgroundColor = this.convertToRgbString(this.hexToRgb(roundedColor));\n        }\n    }\n    setNoColor() {\n        let noColorEle = this.container.querySelector('.e-row').children[0];\n        noColorEle.classList.add(NOCOLOR);\n        if (!this.value) {\n            noColorEle.classList.add(SELECT);\n            closest(noColorEle, '.' + PALETTES).focus();\n        }\n        ['aria-selected', 'aria-label'].forEach((attr) => { noColorEle.removeAttribute(attr); });\n        noColorEle.style.backgroundColor = '';\n    }\n    appendElement(ele, insertPos = 0) {\n        let refEle = this.container.children[insertPos];\n        refEle ? this.container.insertBefore(ele, refEle) : this.container.appendChild(ele);\n    }\n    addTileSelection(ele) {\n        ele.classList.add(SELECT);\n        ele.setAttribute('aria-selected', 'true');\n    }\n    createPicker() {\n        classList(this.container, [PICKERCONTENT], [PALETTECONTENT]);\n        let hsvContainer = this.createElement('div', { className: HSVCONTAINER });\n        this.appendElement(hsvContainer);\n        hsvContainer.appendChild(this.createElement('div', { className: HSVAREA }));\n        let dragHandler = this.createElement('span', { className: HANDLER, attrs: { 'tabindex': '0' } });\n        hsvContainer.appendChild(dragHandler);\n        this.rgb = this.hexToRgb(this.value);\n        this.hsv = this.rgbToHsv.apply(this, this.rgb);\n        this.setHsvContainerBg();\n        this.setHandlerPosition();\n        this.createSlider();\n        this.createDragTooltip();\n    }\n    setHsvContainerBg(h = this.hsv[0]) {\n        this.getHsvContainer().style.backgroundColor = this.convertToRgbString(this.hsvToRgb(h, 100, 100, 1));\n    }\n    getHsvContainer() {\n        return select('.' + HSVCONTAINER, this.container);\n    }\n    setHandlerPosition() {\n        let dragHandler = this.getDragHandler();\n        let hsvArea = select('.' + HSVAREA, this.container);\n        if (this.enableRtl) {\n            dragHandler.style.left = formatUnit(hsvArea.offsetWidth * Math.abs(100 - this.hsv[1]) / 100);\n        }\n        else {\n            dragHandler.style.left = formatUnit(hsvArea.offsetWidth * this.hsv[1] / 100);\n        }\n        dragHandler.style.top = formatUnit(hsvArea.offsetHeight * (100 - this.hsv[2]) / 100);\n    }\n    createSlider() {\n        let sliderPreviewWrapper = this.createElement('div', { className: 'e-slider-preview' });\n        this.appendElement(sliderPreviewWrapper, 1);\n        this.createPreview(sliderPreviewWrapper);\n        let sliderWrapper = this.createElement('div', { className: 'e-colorpicker-slider' });\n        sliderPreviewWrapper.insertBefore(sliderWrapper, sliderPreviewWrapper.children[0]);\n        let slider = this.createElement('div', { className: 'e-hue-slider' });\n        sliderWrapper.appendChild(slider);\n        this.hueSlider = new Slider({\n            value: this.hsv[0],\n            min: 0,\n            max: 359,\n            enableRtl: this.enableRtl,\n            enabled: !this.disabled,\n            change: this.hueChange.bind(this)\n        });\n        this.hueSlider.createElement = this.createElement;\n        this.hueSlider.appendTo(slider);\n        if (this.enableOpacity) {\n            slider = this.createElement('div', { className: 'e-opacity-slider' });\n            sliderWrapper.appendChild(slider);\n            this.createOpacitySlider(slider);\n        }\n    }\n    createOpacitySlider(slider) {\n        this.opacitySlider = new Slider({\n            value: this.rgb[3] * 100,\n            min: 0,\n            max: 100,\n            enableRtl: this.enableRtl,\n            enabled: !this.disabled,\n            change: this.opacityChange.bind(this)\n        });\n        this.opacitySlider.createElement = this.createElement;\n        this.opacitySlider.appendTo(slider);\n        let opacityBgTrack = this.createElement('div', { className: 'e-opacity-empty-track' });\n        slider.appendChild(opacityBgTrack);\n        this.updateOpacitySliderBg();\n    }\n    updateOpacitySliderBg() {\n        let direction = this.enableRtl ? 'to left' : 'to right';\n        select('.e-slider-track', this.opacitySlider.element).style.background =\n            'linear-gradient(' + direction + ', rgba(' + this.rgb.slice(0, 3) + ', 0) 0%, ' +\n                this.convertToRgbString(this.rgb.slice(0, 3)) + ' 100%)';\n    }\n    hueChange(args) {\n        this.hsv[0] = args.value;\n        this.setHsvContainerBg();\n        this.convertToOtherFormat();\n    }\n    opacityChange(args) {\n        let value = args.value;\n        let pValue = this.rgbToHex(this.rgb);\n        this.hsv[3] = value / 100;\n        this.rgb[3] = value / 100;\n        let cValue = this.rgbToHex(this.rgb);\n        this.updateOpacityInput(value);\n        let rgb = this.convertToRgbString(this.rgb);\n        this.updatePreview(rgb);\n        this.triggerEvent(cValue, pValue, rgb);\n    }\n    updateOpacityInput(value) {\n        if (!this.getWrapper().classList.contains(HIDEVALUE)) {\n            let opacityTextBoxInst = getInstance(select('.' + OPACITY, this.container), NumericTextBox);\n            opacityTextBoxInst.value = value;\n            opacityTextBoxInst.dataBind();\n        }\n    }\n    createPreview(parentEle) {\n        let previewContainer = this.createElement('div', { className: PREVIEW });\n        parentEle.appendChild(previewContainer);\n        let preview = this.createElement('span', { className: 'e-preview ' + CURRENT });\n        previewContainer.appendChild(preview);\n        let colorValue = this.convertToRgbString(this.rgb);\n        preview.style.backgroundColor = colorValue;\n        preview = this.createElement('span', { className: 'e-preview ' + PREVIOUS });\n        previewContainer.appendChild(preview);\n        preview.style.backgroundColor = colorValue;\n    }\n    isPicker() {\n        return !this.container.classList.contains(PALETTECONTENT);\n    }\n    getPopupEle() {\n        return this.container.parentElement;\n    }\n    createNumericInput(element, value, label, max) {\n        let numericInput = new NumericTextBox({\n            value: value,\n            placeholder: label,\n            min: 0,\n            max: max,\n            format: '###.##',\n            showSpinButton: false,\n            floatLabelType: 'Always',\n            enableRtl: this.enableRtl,\n            enabled: !this.disabled,\n            readonly: this.isPicker() ? false : true,\n            change: (args) => {\n                if (args.event) {\n                    this.inputHandler(args.event);\n                }\n            }\n        });\n        numericInput.createElement = this.createElement;\n        numericInput.appendTo(element);\n    }\n    createInput() {\n        let isPicker = this.isPicker();\n        let wrapper = this.getWrapper();\n        if ((isPicker && !wrapper.classList.contains(HIDEVALUE)) || (!isPicker && wrapper.classList.contains(SHOWVALUE))) {\n            let inputWrap = this.createElement('div', { className: INPUTWRAPPER });\n            isPicker ? this.appendElement(inputWrap, 2) : this.appendElement(inputWrap, 1);\n            let container = this.createElement('div', { className: 'e-input-container' });\n            inputWrap.appendChild(container);\n            if (!wrapper.classList.contains(HIDEVALUESWITCH)) {\n                this.appendValueSwitchBtn(inputWrap);\n            }\n            if (!wrapper.classList.contains(HIDEHEX)) {\n                let hexInput = this.createElement('input', {\n                    className: HEX,\n                    attrs: { 'maxlength': '7', 'spellcheck': 'false' }\n                });\n                container.appendChild(hexInput);\n                Input.createInput({\n                    element: hexInput,\n                    floatLabelType: 'Always',\n                    properties: {\n                        placeholder: 'HEX',\n                        enableRtl: this.enableRtl,\n                        enabled: !this.disabled,\n                        readonly: this.isPicker() ? false : true\n                    }\n                }, this.createElement);\n                Input.setValue(this.value.slice(0, 7), hexInput);\n                hexInput.addEventListener('input', this.inputHandler.bind(this));\n            }\n            if (!wrapper.classList.contains(HIDERGBA)) {\n                let label;\n                let value;\n                if (this.isRgb) {\n                    label = 'RGB';\n                    value = this.rgb;\n                }\n                else {\n                    label = 'HSV';\n                    value = this.hsv;\n                }\n                let clsName = ['rh', 'gs', 'bv'];\n                for (let i = 0; i < 3; i++) {\n                    this.createNumericInput(container.appendChild(this.createElement('input', { className: 'e-' + clsName[i] + '-value' })), value[i], label[i], 255);\n                }\n                if (this.enableOpacity) {\n                    this.appendOpacityValue(container);\n                }\n            }\n        }\n    }\n    appendOpacityValue(container) {\n        this.createNumericInput(container.appendChild(this.createElement('input', { className: OPACITY })), this.rgb[3] * 100, 'A', 100);\n    }\n    appendValueSwitchBtn(targetEle) {\n        let valueSwitchBtn = this.createElement('button', {\n            className: 'e-icons e-css e-btn e-flat e-icon-btn ' + FORMATSWITCH\n        });\n        targetEle.appendChild(valueSwitchBtn);\n        if (this.isPicker() && !this.getWrapper().classList.contains(HIDERGBA)) {\n            valueSwitchBtn.addEventListener('click', this.formatSwitchHandler.bind(this));\n        }\n    }\n    createCtrlBtn() {\n        if (this.modeSwitcher || this.showButtons) {\n            this.l10n.setLocale(this.locale);\n            let btnWrapper = this.createElement('div', { className: CTRLSWITCH });\n            this.container.appendChild(btnWrapper);\n            if (this.showButtons) {\n                let controlBtnWrapper = this.createElement('div', { className: CTRLBTN });\n                btnWrapper.appendChild(controlBtnWrapper);\n                let apply = this.l10n.getConstant('Apply');\n                controlBtnWrapper.appendChild(this.createElement('button', {\n                    innerHTML: apply,\n                    className: 'e-btn e-css e-flat e-primary e-small ' + APPLY,\n                    attrs: { 'title': apply }\n                }));\n                let cancel = this.l10n.getConstant('Cancel');\n                controlBtnWrapper.appendChild(this.createElement('button', {\n                    innerHTML: cancel,\n                    className: 'e-btn e-css e-flat e-small ' + CANCEL,\n                    attrs: { 'title': cancel }\n                }));\n            }\n            if (this.modeSwitcher) {\n                this.appendModeSwitchBtn();\n            }\n        }\n    }\n    appendModeSwitchBtn() {\n        let modeSwitcher = this.createElement('button', {\n            className: 'e-icons e-btn e-flat e-icon-btn ' + MODESWITCH, attrs: { title: this.l10n.getConstant('ModeSwitcher') }\n        });\n        select('.' + CTRLSWITCH, this.container).insertBefore(modeSwitcher, select('.' + CTRLBTN, this.container));\n    }\n    createDragTooltip() {\n        let tooltip = new Tooltip({\n            opensOn: 'Custom',\n            showTipPointer: false,\n            cssClass: 'e-color-picker-tooltip',\n            beforeOpen: (args) => {\n                this.tooltipEle = args.element;\n            },\n            animation: { open: { effect: 'None' }, close: { effect: 'None' } }\n        });\n        tooltip.createElement = this.createElement;\n        tooltip.appendTo(this.container);\n        tooltip.open(this.container);\n        this.tooltipEle.style.zIndex = getZindexPartial(this.tooltipEle).toString();\n        select('.e-tip-content', this.tooltipEle).appendChild(this.createElement('div', { className: 'e-tip-transparent' }));\n    }\n    getTooltipInst() {\n        return getInstance(this.container, Tooltip);\n    }\n    setTooltipOffset(value) {\n        this.getTooltipInst().offsetY = value;\n    }\n    toggleDisabled(enable) {\n        enable ? this.getWrapper().classList.add(DISABLED$1) : this.getWrapper().classList.remove(DISABLED$1);\n        if (this.showButtons) {\n            ([].slice.call(selectAll('.e-btn', this.container))).forEach((ele) => {\n                enable ? attributes(ele, { 'disabled': '' }) : ele.removeAttribute('disabled');\n            });\n        }\n    }\n    convertToRgbString(rgb) {\n        return rgb.length ? rgb.length === 4 ? 'rgba(' + rgb.join() + ')' : 'rgb(' + rgb.join() + ')' : '';\n    }\n    convertToHsvString(hsv) {\n        return hsv.length === 4 ? 'hsva(' + hsv.join() + ')' : 'hsv(' + hsv.join() + ')';\n    }\n    updateHsv() {\n        this.hsv[1] = this.hsv[1] > 100 ? 100 : this.hsv[1];\n        this.hsv[2] = this.hsv[2] > 100 ? 100 : this.hsv[2];\n        this.setHandlerPosition();\n    }\n    convertToOtherFormat(isKey = false) {\n        let pValue = this.rgbToHex(this.rgb);\n        this.rgb = this.hsvToRgb.apply(this, this.hsv);\n        let cValue = this.rgbToHex(this.rgb);\n        let rgba = this.convertToRgbString(this.rgb);\n        this.updatePreview(rgba);\n        this.updateInput(cValue);\n        this.triggerEvent(cValue, pValue, rgba, isKey);\n    }\n    updateInput(value) {\n        let wrapper = this.getWrapper();\n        if (!wrapper.classList.contains(HIDEVALUE)) {\n            if (!wrapper.classList.contains(HIDEHEX)) {\n                Input.setValue(value.substr(0, 7), select('.' + HEX, this.container));\n            }\n            if (!wrapper.classList.contains(HIDERGBA)) {\n                if (this.isRgb) {\n                    this.updateValue(this.rgb, false);\n                }\n                else {\n                    this.updateValue(this.hsv, false);\n                }\n            }\n        }\n    }\n    updatePreview(value) {\n        if (this.enableOpacity) {\n            this.updateOpacitySliderBg();\n        }\n        select('.e-tip-transparent', this.tooltipEle).style.backgroundColor = value;\n        select('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = value;\n        select('.' + PREVIEW + ' .' + PREVIOUS, this.container).style.backgroundColor\n            = this.convertToRgbString(this.hexToRgb(this.value));\n    }\n    getDragHandler() {\n        return select('.' + HANDLER, this.container);\n    }\n    removeTileSelection() {\n        let selectedEle = [].slice.call(selectAll('.' + SELECT, this.container.children[0]));\n        selectedEle.forEach((ele) => {\n            ele.classList.remove(SELECT);\n            ele.setAttribute('aria-selected', 'false');\n        });\n    }\n    convertRgbToNumberArray(value) {\n        return (value.slice(value.indexOf('(') + 1, value.indexOf(')'))).split(',').map((n, i) => {\n            return (i !== 3) ? parseInt(n, 10) : parseFloat(n);\n        });\n    }\n    /**\n     * To get color value in specified type.\n     * @param value - Specify the color value.\n     * @param type - Specify the type to which the specified color needs to be converted.\n     * @method getValue\n     * @return {string}\n     */\n    getValue(value, type) {\n        if (!value) {\n            value = this.value;\n        }\n        type = !type ? 'hex' : type.toLowerCase();\n        if (value[0] === 'r') {\n            let cValue = this.convertRgbToNumberArray(value);\n            if (type === 'hex' || type === 'hexa') {\n                let hex = this.rgbToHex(cValue);\n                return type === 'hex' ? hex.slice(0, 7) : hex;\n            }\n            else {\n                if (type === 'hsv') {\n                    return this.convertToHsvString(this.rgbToHsv.apply(this, cValue.slice(0, 3)));\n                }\n                else {\n                    if (type === 'hsva') {\n                        return this.convertToHsvString(this.rgbToHsv.apply(this, cValue));\n                    }\n                    else {\n                        return 'null';\n                    }\n                }\n            }\n        }\n        else {\n            if (value[0] === 'h') {\n                let cValue = this.hsvToRgb.apply(this, this.convertRgbToNumberArray(value));\n                if (type === 'rgba') {\n                    return this.convertToRgbString(cValue);\n                }\n                else {\n                    if (type === 'hex' || type === 'hexa') {\n                        let hex = this.rgbToHex(cValue);\n                        return type === 'hex' ? hex.slice(0, 7) : hex;\n                    }\n                    else {\n                        if (type === 'rgb') {\n                            return this.convertToRgbString(cValue.slice(0, 3));\n                        }\n                        else {\n                            return 'null';\n                        }\n                    }\n                }\n            }\n            else {\n                value = this.roundValue(value);\n                let rgb = this.hexToRgb(value);\n                if (type === 'rgb' || type === 'hsv') {\n                    rgb = rgb.slice(0, 3);\n                }\n                if (type === 'rgba' || type === 'rgb') {\n                    return this.convertToRgbString(rgb);\n                }\n                else {\n                    if (type === 'hsva' || type === 'hsv') {\n                        return this.convertToHsvString(this.rgbToHsv.apply(this, rgb));\n                    }\n                    else {\n                        if (type === 'hex') {\n                            return value.slice(0, 7);\n                        }\n                        else {\n                            if (type === 'a') {\n                                return rgb[3].toString();\n                            }\n                            else {\n                                return 'null';\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * To show/hide ColorPicker popup based on current state of the SplitButton.\n     * @method toggle\n     * @return {void}\n     */\n    toggle() {\n        this.container.parentElement.classList.contains('e-popup-close') ? this.splitBtn.toggle() : this.closePopup(null);\n    }\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'colorpicker';\n    }\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     * @return {string}\n     */\n    getPersistData() {\n        return this.addOnPersist(['value']);\n    }\n    wireEvents() {\n        if (this.isPicker()) {\n            let dragHandler = this.getDragHandler();\n            EventHandler.add(dragHandler, 'keydown', this.pickerKeyDown, this);\n            EventHandler.add(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown, this);\n            if (this.modeSwitcher || this.showButtons) {\n                this.addCtrlSwitchEvent();\n            }\n            EventHandler.add(select('.' + PREVIOUS, this.container), 'click', this.previewHandler, this);\n        }\n        else {\n            EventHandler.add(this.container, 'click', this.paletteClickHandler, this);\n            EventHandler.add(this.container, 'keydown', this.paletteKeyDown, this);\n        }\n    }\n    formResetHandler() {\n        this.value = this.initialInputValue;\n        attributes(this.element, { 'value': this.initialInputValue });\n    }\n    addCtrlSwitchEvent() {\n        let ctrlSwitchBtn = select('.' + CTRLSWITCH, this.container);\n        if (ctrlSwitchBtn) {\n            EventHandler.add(ctrlSwitchBtn, 'click', this.btnClickHandler, this);\n        }\n    }\n    pickerKeyDown(e) {\n        switch (e.keyCode) {\n            case 39:\n                this.handlerDragPosition(1, this.enableRtl ? -1 : 1, e);\n                break;\n            case 37:\n                this.handlerDragPosition(1, this.enableRtl ? 1 : -1, e);\n                break;\n            case 38:\n                this.handlerDragPosition(2, 1, e);\n                break;\n            case 40:\n                this.handlerDragPosition(2, -1, e);\n                break;\n            case 13:\n                e.preventDefault();\n                let cValue = this.rgbToHex(this.rgb);\n                this.enterKeyHandler(cValue, e);\n        }\n    }\n    enterKeyHandler(value, e) {\n        this.triggerChangeEvent(value);\n        if (!this.inline) {\n            this.closePopup(e);\n            this.splitBtn.element.focus();\n        }\n    }\n    closePopup(e) {\n        let beforeCloseArgs = { element: this.container, event: e, cancel: false };\n        this.trigger('beforeClose', beforeCloseArgs, (observedcloseArgs) => {\n            if (!observedcloseArgs.cancel) {\n                this.splitBtn.toggle();\n                this.onPopupClose();\n            }\n        });\n    }\n    triggerChangeEvent(value) {\n        let hex = value.slice(0, 7);\n        this.trigger('change', {\n            currentValue: { hex: hex, rgba: this.convertToRgbString(this.rgb) },\n            previousValue: { hex: this.value.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(this.value)) },\n            value: this.enableOpacity ? value : hex\n        });\n        if (this.enableOpacity) {\n            this.setProperties({ 'value': value }, true);\n        }\n        else {\n            this.setProperties({ 'value': hex }, true);\n        }\n        this.element.value = hex ? hex : '#000000';\n    }\n    handlerDragPosition(prob, value, e) {\n        e.preventDefault();\n        this.hsv[prob] += value * (e.ctrlKey ? 1 : 3);\n        if (this.hsv[prob] < 0) {\n            this.hsv[prob] = 0;\n        }\n        this.updateHsv();\n        this.convertToOtherFormat(true);\n    }\n    handlerDown(e) {\n        e.preventDefault();\n        if (e.type === 'mousedown') {\n            this.clientX = Math.abs(e.pageX - pageXOffset);\n            this.clientY = Math.abs(e.pageY - pageYOffset);\n            this.setTooltipOffset(8);\n        }\n        else {\n            this.clientX = Math.abs(e.changedTouches[0].pageX - pageXOffset);\n            this.clientY = Math.abs(e.changedTouches[0].pageY - pageYOffset);\n            this.setTooltipOffset(-8);\n        }\n        this.setHsv(this.clientX, this.clientY);\n        this.getDragHandler().style.transition = 'left .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1)';\n        this.updateHsv();\n        this.convertToOtherFormat();\n        this.getDragHandler().focus();\n        EventHandler.add(document, 'mousemove touchmove', this.handlerMove, this);\n        EventHandler.add(document, 'mouseup touchend', this.handlerEnd, this);\n    }\n    handlerMove(e) {\n        if (e.type !== 'touchmove') {\n            e.preventDefault();\n        }\n        let x;\n        let y;\n        if (e.type === 'mousemove') {\n            x = Math.abs(e.pageX - pageXOffset);\n            y = Math.abs(e.pageY - pageYOffset);\n        }\n        else {\n            x = Math.abs(e.changedTouches[0].pageX - pageXOffset);\n            y = Math.abs(e.changedTouches[0].pageY - pageYOffset);\n        }\n        this.setHsv(x, y);\n        let dragHandler = this.getDragHandler();\n        let left = parseInt(dragHandler.style.left, 10);\n        let top = parseInt(dragHandler.style.top, 10);\n        this.updateHsv();\n        this.convertToOtherFormat();\n        this.getTooltipInst().refresh(dragHandler);\n        if (!this.tooltipEle.style.transform) {\n            if (Math.abs(this.clientX - x) > 8 || Math.abs(this.clientY - y) > 8) {\n                select('.' + HSVAREA, this.container).style.cursor = 'pointer';\n                dragHandler.style.transition = 'none';\n                if (!this.inline) {\n                    this.tooltipEle.style.zIndex = (parseInt(this.getPopupEle().style.zIndex, 10) + 1).toString();\n                }\n                this.tooltipEle.style.transform = 'rotate(45deg)';\n                dragHandler.classList.add('e-hide-handler');\n            }\n        }\n    }\n    setHsv(clientX, clientY) {\n        let ele = select('.' + HSVAREA, this.container);\n        let position = ele.getBoundingClientRect();\n        if (this.enableRtl) {\n            clientX = clientX > position.right ? 0 : Math.abs(clientX - position.right);\n        }\n        else {\n            clientX = clientX > position.left ? Math.abs(clientX - position.left) : 0;\n        }\n        clientY = clientY > position.top ? Math.abs(clientY - position.top) : 0;\n        this.hsv[2] = Math.round(Number(100 * (ele.offsetHeight -\n            Math.max(0, Math.min(ele.offsetHeight, (clientY - ele.offsetTop)))) / ele.offsetHeight) * 10) / 10;\n        this.hsv[1] =\n            Math.round(Number(100 * (Math.max(0, Math.min(ele.offsetWidth, (clientX - ele.offsetLeft)))) / ele.offsetWidth) * 10) / 10;\n    }\n    handlerEnd(e) {\n        if (e.type !== 'touchend') {\n            e.preventDefault();\n        }\n        EventHandler.remove(document, 'mousemove touchmove', this.handlerMove);\n        EventHandler.remove(document, 'mouseup touchend', this.handlerEnd);\n        let dragHandler = this.getDragHandler();\n        select('.' + HSVAREA, this.container).style.cursor = '';\n        if (this.tooltipEle.style.transform) {\n            this.tooltipEle.style.transform = '';\n            dragHandler.classList.remove('e-hide-handler');\n        }\n        if (!this.inline && !this.showButtons) {\n            this.closePopup(e);\n        }\n    }\n    btnClickHandler(e) {\n        let target = e.target;\n        if (closest(target, '.' + MODESWITCH)) {\n            e.stopPropagation();\n            this.switchToPalette();\n        }\n        else {\n            if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {\n                this.ctrlBtnClick(target, e);\n            }\n        }\n    }\n    switchToPalette() {\n        this.trigger('beforeModeSwitch', { element: this.container, mode: 'Palette' });\n        this.unWireEvents();\n        this.destroyOtherComp();\n        detach(select('.e-slider-preview', this.container));\n        if (!this.getWrapper().classList.contains(HIDEVALUE)) {\n            remove(select('.' + INPUTWRAPPER, this.container));\n        }\n        detach(this.getHsvContainer());\n        this.createPalette();\n        this.firstPaletteFocus();\n        this.createInput();\n        this.refreshPopupPos();\n        this.wireEvents();\n        this.trigger('onModeSwitch', { element: this.container, mode: 'Palette' });\n    }\n    refreshPopupPos() {\n        if (!this.inline) {\n            let popupEle = this.getPopupEle();\n            popupEle.style.left = formatUnit(0 + pageXOffset);\n            popupEle.style.top = formatUnit(0 + pageYOffset);\n            this.getPopupInst().refreshPosition(this.splitBtn.element.parentElement);\n        }\n    }\n    formatSwitchHandler(e) {\n        let target = e.target.parentElement;\n        if (this.isRgb) {\n            this.updateValue(this.hsv, true, 3, [360, 100, 100]);\n            this.isRgb = false;\n        }\n        else {\n            this.updateValue(this.rgb, true, 2);\n            this.isRgb = true;\n        }\n    }\n    updateValue(value, format, idx, max) {\n        let clsName = ['e-rh-value', 'e-gs-value', 'e-bv-value'];\n        let inst;\n        for (let i = 0, len = clsName.length; i < len; i++) {\n            inst = getInstance(select('.' + clsName[i], this.container), NumericTextBox);\n            inst.value = Math.round(value[i]);\n            if (format) {\n                inst.placeholder = clsName[i].substr(idx, 1).toUpperCase();\n                inst.max = max ? max[i] : 255;\n            }\n            inst.dataBind();\n        }\n    }\n    previewHandler(e) {\n        let target = e.target;\n        let pValue = this.rgbToHex(this.rgb);\n        this.rgb = this.convertRgbToNumberArray(target.style.backgroundColor);\n        if (!this.rgb[3]) {\n            this.rgb[3] = 1;\n        }\n        let cValue = this.rgbToHex(this.rgb);\n        let hsv = this.rgbToHsv.apply(this, this.rgb);\n        if (hsv[0] !== this.hsv[0]) {\n            this.hueSlider.setProperties({ 'value': hsv[0] }, true);\n            this.hueSlider.refresh();\n        }\n        this.setHsvContainerBg(hsv[0]);\n        if (this.enableOpacity && hsv[3] !== this.hsv[3]) {\n            this.opacitySlider.setProperties({ 'value': hsv[3] * 100 }, true);\n            this.opacitySlider.refresh();\n            this.updateOpacitySliderBg();\n        }\n        this.hsv = hsv;\n        this.setHandlerPosition();\n        this.updateInput(cValue);\n        select('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = this.convertToRgbString(this.rgb);\n        this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));\n    }\n    paletteClickHandler(e) {\n        e.preventDefault();\n        let target = e.target;\n        if (target.classList.contains(TILE)) {\n            this.removeTileSelection();\n            this.addTileSelection(target);\n            if (target.classList.contains(NOCOLOR)) {\n                this.noColorTile();\n            }\n            else {\n                let cValue = target.getAttribute('aria-label');\n                let pValue = this.rgbToHex(this.rgb);\n                this.rgb = this.hexToRgb(this.roundValue(cValue));\n                this.hsv = this.rgbToHsv.apply(this, this.rgb);\n                if (this.getWrapper().classList.contains(SHOWVALUE)) {\n                    this.updateInput(cValue);\n                }\n                this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));\n            }\n            if (!this.inline && !this.showButtons) {\n                this.closePopup(e);\n            }\n        }\n        else {\n            if (closest(target, '.' + MODESWITCH)) {\n                this.switchToPicker();\n            }\n            else {\n                if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {\n                    this.ctrlBtnClick(target, e);\n                }\n                else {\n                    if (this.getWrapper().classList.contains(SHOWVALUE) && closest(target, '.' + FORMATSWITCH)) {\n                        this.formatSwitchHandler(e);\n                    }\n                }\n            }\n        }\n    }\n    noColorTile(isKey = false) {\n        let pValue = this.rgbToHex(this.rgb);\n        this.rgb = [];\n        this.hsv = [];\n        this.triggerEvent('', pValue, '', isKey);\n    }\n    switchToPicker() {\n        let wrapper = this.getWrapper();\n        this.trigger('beforeModeSwitch', { element: this.container, mode: 'Picker' });\n        this.unWireEvents();\n        ([].slice.call(selectAll('.' + PALETTES, this.container))).forEach((ele) => {\n            detach(ele);\n        });\n        if (wrapper.classList.contains(SHOWVALUE)) {\n            detach(select('.' + INPUTWRAPPER, this.container));\n        }\n        this.container.style.width = '';\n        let grpEle = select('.e-custom-palette', this.container);\n        if (this.presetColors) {\n            remove(grpEle);\n        }\n        this.createPicker();\n        this.getDragHandler().focus();\n        this.createInput();\n        this.refreshPopupPos();\n        this.wireEvents();\n        this.trigger('onModeSwitch', { element: this.container, mode: 'Picker' });\n    }\n    ctrlBtnClick(ele, e) {\n        if (ele.classList.contains(APPLY)) {\n            let cValue = this.rgbToHex(this.rgb);\n            this.triggerChangeEvent(cValue);\n        }\n        if (!this.inline) {\n            this.closePopup(e);\n            this.splitBtn.element.focus();\n        }\n    }\n    paletteKeyDown(e) {\n        let target = e.target;\n        if (!target.classList.contains(PALETTES)) {\n            return;\n        }\n        let selectedEle;\n        let idx;\n        let tiles = [].slice.call(selectAll('.' + TILE, target));\n        let prevSelectedEle = (tiles.filter((tile) => tile.classList.contains('e-selected'))).pop();\n        switch (!e.altKey && e.keyCode) {\n            case 39:\n                e.preventDefault();\n                selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? -1 : 1)]\n                    : tiles[this.enableRtl ? tiles.length - 1 : 0];\n                this.keySelectionChanges(selectedEle);\n                break;\n            case 37:\n                e.preventDefault();\n                selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? 1 : -1)]\n                    : tiles[this.enableRtl ? 0 : tiles.length - 1];\n                this.keySelectionChanges(selectedEle);\n                break;\n            case 38:\n                e.preventDefault();\n                idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, -this.columns) : 0;\n                selectedEle = tiles[idx] ? tiles[idx] : tiles[idx - this.columns];\n                this.keySelectionChanges(selectedEle);\n                break;\n            case 40:\n                e.preventDefault();\n                idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, this.columns) : tiles.length - 1;\n                if (tiles[idx]) {\n                    selectedEle = tiles[idx];\n                }\n                else {\n                    idx %= tiles.length;\n                    idx += tiles[tiles.length - 1].parentElement.childElementCount;\n                    selectedEle = tiles[idx];\n                }\n                this.keySelectionChanges(selectedEle);\n                break;\n            case 13:\n                e.preventDefault();\n                if (prevSelectedEle) {\n                    let cValue = prevSelectedEle.getAttribute('aria-label');\n                    this.enterKeyHandler(cValue ? cValue : '', e);\n                }\n        }\n    }\n    keySelectionChanges(newEle) {\n        this.removeTileSelection();\n        this.addTileSelection(newEle);\n        if (newEle.classList.contains(NOCOLOR)) {\n            this.noColorTile(true);\n        }\n        else {\n            let cValue = newEle.getAttribute('aria-label');\n            let pValue = this.rgbToHex(this.rgb);\n            this.rgb = this.hexToRgb(cValue);\n            this.hsv = this.rgbToHsv.apply(this, this.rgb);\n            if (this.getWrapper().classList.contains(SHOWVALUE)) {\n                this.updateInput(cValue);\n            }\n            this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb), true);\n        }\n    }\n    tilePosition(items, element, cIdx) {\n        items = Array.prototype.slice.call(items);\n        let n = items.length;\n        let emptyCount = this.columns - items[n - 1].parentElement.childElementCount;\n        let idx = items.indexOf(element);\n        idx += cIdx;\n        idx < 0 ? idx += n + emptyCount : idx %= n + emptyCount;\n        return idx;\n    }\n    inputHandler(e) {\n        let target = e.target;\n        if (!target.value.length) {\n            return;\n        }\n        let hsv;\n        let pValue;\n        let label = select('.e-float-text', target.parentElement).textContent;\n        switch (label) {\n            case 'HEX':\n                let value = '';\n                if ((target.value[0] === '#' && target.value.length !== 5) || (target.value[0] !== '#' && target.value.length !== 4)) {\n                    value = this.roundValue(target.value);\n                }\n                if (value.length === 9) {\n                    pValue = this.rgbToHex(this.rgb);\n                    this.rgb = this.hexToRgb(value + value.substr(-2));\n                    this.inputValueChange(this.rgbToHsv.apply(this, this.rgb), pValue, target.value);\n                }\n                else {\n                    return;\n                }\n                break;\n            case 'R':\n                if (this.rgb[0] !== Number(target.value)) {\n                    pValue = this.rgbToHex(this.rgb);\n                    this.rgb[0] = Number(target.value);\n                    hsv = this.rgbToHsv.apply(this, this.rgb);\n                    this.inputValueChange(hsv, pValue);\n                }\n                break;\n            case 'G':\n                if (this.rgb[1] !== Number(target.value)) {\n                    pValue = this.rgbToHex(this.rgb);\n                    this.rgb[1] = Number(target.value);\n                    hsv = this.rgbToHsv.apply(this, this.rgb);\n                    this.inputValueChange(hsv, pValue);\n                }\n                break;\n            case 'B':\n                if (this.rgb[2] !== Number(target.value)) {\n                    pValue = this.rgbToHex(this.rgb);\n                    this.rgb[2] = Number(target.value);\n                    hsv = this.rgbToHsv.apply(this, this.rgb);\n                    this.inputValueChange(hsv, pValue);\n                }\n                break;\n            case 'H':\n                this.hueSlider.value = Number(target.value);\n                break;\n            case 'S':\n                if (this.hsv[1] !== Number(target.value)) {\n                    this.hsv[1] = Number(target.value);\n                    this.updateHsv();\n                    this.convertToOtherFormat();\n                }\n                break;\n            case 'V':\n                if (this.hsv[2] !== Number(target.value)) {\n                    this.hsv[2] = Number(target.value);\n                    this.updateHsv();\n                    this.convertToOtherFormat();\n                }\n                break;\n            case 'A':\n                this.opacitySlider.value = Number(target.value);\n                break;\n        }\n    }\n    inputValueChange(hsv, pValue, value) {\n        if (hsv[0] !== this.hsv[0]) {\n            this.hueSlider.setProperties({ 'value': hsv[0] }, true);\n            this.hueSlider.refresh();\n            this.setHsvContainerBg(hsv[0]);\n        }\n        this.hsv = hsv;\n        let cValue = this.rgbToHex(this.rgb);\n        this.setHandlerPosition();\n        this.updateInput(value ? value : cValue);\n        let rgba = this.convertToRgbString(this.rgb);\n        this.updatePreview(rgba);\n        this.triggerEvent(cValue, pValue, rgba);\n    }\n    triggerEvent(cValue, pValue, rgba, isKey = false) {\n        let hex = cValue.slice(0, 7);\n        if (!this.showButtons && !isKey) {\n            this.trigger('change', { currentValue: { hex: hex, rgba: rgba },\n                previousValue: { hex: this.value.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(this.value)) }, value: cValue });\n            this.setProperties({ 'value': cValue }, true);\n            this.element.value = hex ? hex : '#000000';\n        }\n        else {\n            this.trigger('select', {\n                currentValue: { hex: hex, rgba: rgba },\n                previousValue: { hex: pValue.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(pValue)) }\n            });\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also it maintains the initial input element from the DOM.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        let wrapper = this.getWrapper();\n        super.destroy();\n        ['tabindex', 'spellcheck'].forEach((attr) => { this.element.removeAttribute(attr); });\n        if (this.inline) {\n            this.unWireEvents();\n            this.destroyOtherComp();\n        }\n        else {\n            if (this.isPopupOpen()) {\n                this.unWireEvents();\n                this.destroyOtherComp();\n            }\n            this.splitBtn.destroy();\n            this.splitBtn = null;\n        }\n        this.tileRipple();\n        this.tileRipple = null;\n        this.ctrlBtnRipple();\n        this.ctrlBtnRipple = null;\n        if (this.element.nextElementSibling) {\n            detach(this.element.nextElementSibling);\n        }\n        if (wrapper) {\n            wrapper.parentElement.insertBefore(this.element, wrapper);\n            detach(wrapper);\n        }\n        this.container = null;\n        if (this.formElement) {\n            EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n        }\n    }\n    destroyOtherComp() {\n        if (this.isPicker()) {\n            this.hueSlider.destroy();\n            if (this.enableOpacity) {\n                this.opacitySlider.destroy();\n                this.opacitySlider = null;\n            }\n            this.hueSlider = null;\n            let tooltipInst = this.getTooltipInst();\n            tooltipInst.close();\n            tooltipInst.destroy();\n            this.tooltipEle = null;\n        }\n    }\n    isPopupOpen() {\n        return this.getPopupEle().classList.contains('e-popup-open');\n    }\n    unWireEvents() {\n        if (this.isPicker()) {\n            let wrapper = this.getWrapper();\n            let dragHandler = this.getDragHandler();\n            EventHandler.remove(dragHandler, 'keydown', this.pickerKeyDown);\n            EventHandler.remove(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown);\n            if (this.modeSwitcher || this.showButtons) {\n                EventHandler.remove(select('.' + CTRLSWITCH, this.container), 'click', this.btnClickHandler);\n            }\n            EventHandler.remove(select('.' + PREVIOUS, this.container), 'click', this.previewHandler);\n        }\n        else {\n            EventHandler.remove(this.container, 'click', this.paletteClickHandler);\n            EventHandler.remove(this.container, 'keydown', this.paletteKeyDown);\n        }\n    }\n    roundValue(value) {\n        if (!value) {\n            return '';\n        }\n        if (value[0] !== '#') {\n            value = '#' + value;\n        }\n        let len = value.length;\n        if (len === 4) {\n            value += 'f';\n            len = 5;\n        }\n        if (len === 5) {\n            let tempValue = '';\n            for (let i = 1, len = value.length; i < len; i++) {\n                tempValue += (value.charAt(i) + value.charAt(i));\n            }\n            value = '#' + tempValue;\n            len = 9;\n        }\n        if (len === 7) {\n            value += 'ff';\n        }\n        return value;\n    }\n    hexToRgb(hex) {\n        if (!hex) {\n            return [];\n        }\n        hex = hex.trim();\n        if (hex.length !== 9) {\n            hex = this.roundValue(hex);\n        }\n        let opacity = Number((parseInt(hex.slice(-2), 16) / 255).toFixed(2));\n        hex = hex.slice(1, 7);\n        let bigInt = parseInt(hex, 16);\n        let h = [];\n        h.push((bigInt >> 16) & 255);\n        h.push((bigInt >> 8) & 255);\n        h.push(bigInt & 255);\n        h.push(opacity);\n        return h;\n    }\n    rgbToHsv(r, g, b, opacity) {\n        if (this.rgb && !this.rgb.length) {\n            return [];\n        }\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        let max = Math.max(r, g, b);\n        let min = Math.min(r, g, b);\n        let h;\n        let s;\n        let v = max;\n        let d = max - min;\n        s = max === 0 ? 0 : d / max;\n        if (max === min) {\n            h = 0;\n        }\n        else {\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        let hsv = [Math.round(h * 360), Math.round(s * 1000) / 10, Math.round(v * 1000) / 10];\n        if (!isNullOrUndefined(opacity)) {\n            hsv.push(opacity);\n        }\n        return hsv;\n    }\n    hsvToRgb(h, s, v, opacity) {\n        let r;\n        let g;\n        let b;\n        let i;\n        let f;\n        let p;\n        let q;\n        let t;\n        s /= 100;\n        v /= 100;\n        if (s === 0) {\n            r = g = b = v;\n            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), opacity];\n        }\n        h /= 60;\n        i = Math.floor(h);\n        f = h - i;\n        p = v * (1 - s);\n        q = v * (1 - s * f);\n        t = v * (1 - s * (1 - f));\n        switch (i) {\n            case 0:\n                r = v;\n                g = t;\n                b = p;\n                break;\n            case 1:\n                r = q;\n                g = v;\n                b = p;\n                break;\n            case 2:\n                r = p;\n                g = v;\n                b = t;\n                break;\n            case 3:\n                r = p;\n                g = q;\n                b = v;\n                break;\n            case 4:\n                r = t;\n                g = p;\n                b = v;\n                break;\n            default:\n                r = v;\n                g = p;\n                b = q;\n        }\n        let rgb = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n        if (!isNullOrUndefined(opacity)) {\n            rgb.push(opacity);\n        }\n        return rgb;\n    }\n    rgbToHex(rgb) {\n        return rgb.length ? ('#' + this.hex(rgb[0]) + this.hex(rgb[1]) + this.hex(rgb[2]) +\n            (!isNullOrUndefined(rgb[3]) ? (rgb[3] !== 0 ? (Math.round(rgb[3] * 255) + 0x10000).toString(16).substr(-2) : '00') : '')) : '';\n    }\n    hex(x) {\n        return ('0' + x.toString(16)).slice(-2);\n    }\n    changeModeSwitcherProp(prop) {\n        let ctrlSwitchWrapper = select('.' + CTRLSWITCH, this.container);\n        if (prop) {\n            if (ctrlSwitchWrapper) {\n                this.appendModeSwitchBtn();\n            }\n            else {\n                this.createCtrlBtn();\n                if (this.isPicker() && !this.disabled) {\n                    this.addCtrlSwitchEvent();\n                }\n            }\n        }\n        else {\n            if (ctrlSwitchWrapper) {\n                if (this.showButtons) {\n                    detach(select('.' + MODESWITCH, ctrlSwitchWrapper));\n                }\n                else {\n                    remove(ctrlSwitchWrapper);\n                }\n            }\n        }\n    }\n    changeShowBtnProps(prop) {\n        let ctrlBtnWrapper = select('.' + CTRLSWITCH, this.container);\n        if (prop) {\n            if (ctrlBtnWrapper) {\n                remove(ctrlBtnWrapper);\n            }\n            this.createCtrlBtn();\n            if (this.isPicker() && !this.disabled) {\n                this.addCtrlSwitchEvent();\n            }\n        }\n        else {\n            if (this.modeSwitcher) {\n                detach(select('.' + CTRLBTN, ctrlBtnWrapper));\n            }\n            else {\n                remove(ctrlBtnWrapper);\n            }\n        }\n    }\n    changeValueProp(newProp) {\n        if (this.isPicker()) {\n            this.rgb = this.hexToRgb(newProp);\n            this.hsv = this.rgbToHsv.apply(this, this.rgb);\n            this.setHandlerPosition();\n            detach(closest(this.hueSlider.element, '.e-slider-preview'));\n            this.createSlider();\n            this.setHsvContainerBg();\n            this.updateInput(newProp);\n            if (this.rgb.length === 4) {\n                this.updateOpacityInput(this.rgb[3] * 100);\n            }\n        }\n        else {\n            this.removeTileSelection();\n            let ele = select('span[aria-label=\"' + this.roundValue(newProp) + '\"]', this.container);\n            if (ele) {\n                this.addTileSelection(ele);\n            }\n        }\n    }\n    setInputEleProps(prop) {\n        remove(select('.' + INPUTWRAPPER, this.container));\n        this.createInput();\n    }\n    changeDisabledProp(newProp) {\n        if (this.isPicker()) {\n            this.hueSlider.enabled = !newProp;\n            this.opacitySlider.enabled = !newProp;\n            this.setInputEleProps(newProp);\n        }\n        if (newProp) {\n            this.toggleDisabled(true);\n            this.unWireEvents();\n        }\n        else {\n            this.toggleDisabled(false);\n            this.wireEvents();\n        }\n    }\n    changeCssClassProps(newProp, oldProp) {\n        let wrapper = this.getWrapper();\n        let popupWrapper = this.getPopupEle();\n        if (oldProp) {\n            removeClass([wrapper, popupWrapper], oldProp.split(' '));\n        }\n        if (newProp) {\n            addClass([wrapper, popupWrapper], newProp.split(' '));\n        }\n    }\n    changeRtlProps(newProp) {\n        if (newProp) {\n            addClass([this.getWrapper()], 'e-rtl');\n        }\n        else {\n            removeClass([this.getWrapper()], 'e-rtl');\n        }\n    }\n    changePaletteProps() {\n        detach(this.container.children[0]);\n        this.container.style.width = '';\n        this.createPalette();\n    }\n    changeOpacityProps(newProp) {\n        let wrapper = this.getWrapper();\n        if (newProp) {\n            removeClass([this.container.parentElement], HIDEOPACITY);\n            this.createOpacitySlider(select('.e-colorpicker-slider', this.container).appendChild(this.createElement('div', { className: 'e-opacity-slider' })));\n            if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {\n                this.appendOpacityValue(select('.e-input-container', this.container));\n            }\n        }\n        else {\n            addClass([this.container.parentElement], HIDEOPACITY);\n            this.opacitySlider.destroy();\n            remove(this.opacitySlider.element);\n            this.opacitySlider = null;\n            if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {\n                remove(select('.' + OPACITY, this.container).parentElement);\n            }\n        }\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {ColorPickerModel} newProp\n     * @param  {ColorPickerModel} oldProp\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (!isNullOrUndefined(newProp.value)) {\n            let value = this.roundValue(newProp.value);\n            if (value.length === 9) {\n                this.element.value = this.roundValue(value).slice(0, 7);\n                let preview = this.splitBtn && select('.' + SPLITPREVIEW, this.splitBtn.element);\n                if (preview) {\n                    preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(newProp.value));\n                }\n            }\n            else {\n                this.value = oldProp.value;\n            }\n        }\n        if (!this.inline && isNullOrUndefined(newProp.inline)) {\n            let otherCompModel = ['disabled', 'enableRtl'];\n            this.splitBtn.setProperties(getModel(newProp, otherCompModel));\n            if (!this.isPopupOpen()) {\n                this.changeCssClassProps(newProp.cssClass, oldProp.cssClass);\n                this.changeRtlProps(newProp.enableRtl);\n                return;\n            }\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'inline':\n                    if (newProp.inline) {\n                        this.getWrapper().appendChild(this.container);\n                        this.splitBtn.destroy();\n                        detach(this.element.nextElementSibling);\n                        if (!this.container.children.length) {\n                            this.createWidget();\n                        }\n                    }\n                    else {\n                        this.destroyOtherComp();\n                        this.unWireEvents();\n                        this.container.innerHTML = '';\n                        this.createSplitBtn();\n                    }\n                    break;\n                case 'cssClass':\n                    this.changeCssClassProps(newProp.cssClass, oldProp.cssClass);\n                    let props = newProp.cssClass.split(' ').concat(oldProp.cssClass.split(' '));\n                    props = props.reduce((a, b) => { if (a.indexOf(b) < 0) {\n                        a.push(b);\n                    } return a; }, []);\n                    let count = 0;\n                    props.forEach((cls) => {\n                        if (count === 0 &&\n                            (cls === HIDEVALUE || cls === HIDEVALUESWITCH || cls === SHOWVALUE || cls === HIDEHEX || cls === HIDERGBA)) {\n                            let inputWrap = select('.' + INPUTWRAPPER, this.container);\n                            if (inputWrap) {\n                                remove(select('.' + INPUTWRAPPER, this.container));\n                            }\n                            this.createInput();\n                            count++;\n                        }\n                    });\n                    break;\n                case 'enableRtl':\n                    if (this.isPicker()) {\n                        this.hueSlider.enableRtl = newProp.enableRtl;\n                        if (this.enableOpacity) {\n                            this.opacitySlider.enableRtl = newProp.enableRtl;\n                        }\n                        this.setInputEleProps(newProp.enableRtl);\n                    }\n                    this.changeRtlProps(newProp.enableRtl);\n                    break;\n                case 'disabled':\n                    this.changeDisabledProp(newProp.disabled);\n                    break;\n                case 'value':\n                    if (this.value !== oldProp.value) {\n                        this.changeValueProp(newProp.value);\n                    }\n                    break;\n                case 'showButtons':\n                    this.changeShowBtnProps(newProp.showButtons);\n                    break;\n                case 'mode':\n                    if (newProp.mode === 'Picker') {\n                        this.switchToPicker();\n                    }\n                    else {\n                        this.switchToPalette();\n                    }\n                    break;\n                case 'modeSwitcher':\n                    this.changeModeSwitcherProp(newProp.modeSwitcher);\n                    break;\n                case 'columns':\n                case 'presetColors':\n                    if (!this.isPicker()) {\n                        this.changePaletteProps();\n                    }\n                    break;\n                case 'noColor':\n                    if (newProp.noColor) {\n                        if (this.mode === 'Palette' && !this.modeSwitcher) {\n                            this.setNoColor();\n                        }\n                    }\n                    else {\n                        this.changePaletteProps();\n                    }\n                    break;\n                case 'enableOpacity':\n                    this.changeOpacityProps(newProp.enableOpacity);\n                    break;\n            }\n        }\n    }\n    /**\n     * Sets the focus to Colorpicker\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.parentElement.focus();\n    }\n};\n__decorate$5([\n    Property('#008000ff')\n], ColorPicker.prototype, \"value\", void 0);\n__decorate$5([\n    Property('')\n], ColorPicker.prototype, \"cssClass\", void 0);\n__decorate$5([\n    Property(false)\n], ColorPicker.prototype, \"disabled\", void 0);\n__decorate$5([\n    Property('Picker')\n], ColorPicker.prototype, \"mode\", void 0);\n__decorate$5([\n    Property(true)\n], ColorPicker.prototype, \"modeSwitcher\", void 0);\n__decorate$5([\n    Property(null)\n], ColorPicker.prototype, \"presetColors\", void 0);\n__decorate$5([\n    Property(true)\n], ColorPicker.prototype, \"showButtons\", void 0);\n__decorate$5([\n    Property(10)\n], ColorPicker.prototype, \"columns\", void 0);\n__decorate$5([\n    Property(false)\n], ColorPicker.prototype, \"inline\", void 0);\n__decorate$5([\n    Property(false)\n], ColorPicker.prototype, \"noColor\", void 0);\n__decorate$5([\n    Property(false)\n], ColorPicker.prototype, \"enablePersistence\", void 0);\n__decorate$5([\n    Property(true)\n], ColorPicker.prototype, \"enableOpacity\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"select\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"change\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"beforeTileRender\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"beforeOpen\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"open\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"beforeClose\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"beforeModeSwitch\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"onModeSwitch\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"created\", void 0);\nColorPicker = __decorate$5([\n    NotifyPropertyChanges\n], ColorPicker);\n\n/**\n * ColorPicker modules\n */\n\nvar __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst HIDE_CLEAR = 'e-clear-icon-hide';\nconst TEXTBOX_FOCUS = 'e-input-focus';\nconst containerAttr = ['title', 'style', 'class'];\n/**\n * Represents the TextBox component that allows the user to enter the values based on it's type.\n * ```html\n * <input name='images' id='textbox'/>\n * ```\n * ```typescript\n * <script>\n *   var textboxObj = new TextBox();\n *   textboxObj.appendTo('#textbox');\n * </script>\n * ```\n */\nlet TextBox = class TextBox extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.previousValue = null;\n        this.isAngular = false;\n        this.isHiddenInput = false;\n        this.isForm = false;\n        this.inputPreviousValue = null;\n        this.isVue = false;\n        this.textboxOptions = options;\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'floatLabelType':\n                    Input.removeFloating(this.textboxWrapper);\n                    Input.addFloating(this.respectiveElement, this.floatLabelType, this.placeholder);\n                    break;\n                case 'enabled':\n                    Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);\n                    this.bindClearEvent();\n                    break;\n                case 'width':\n                    Input.setWidth(newProp.width, this.textboxWrapper.container);\n                    break;\n                case 'value':\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    if (!this.isBlank(this.value)) {\n                        this.value = this.value.toString();\n                    }\n                    this.isProtectedOnChange = prevOnChange;\n                    Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);\n                    if (this.isHiddenInput) {\n                        this.element.value = this.respectiveElement.value;\n                    }\n                    this.inputPreviousValue = this.respectiveElement.value;\n                    /* istanbul ignore next */\n                    if ((this.isAngular || this.isVue) && this.preventChange === true) {\n                        this.previousValue = this.isAngular ? this.value : this.previousValue;\n                        this.preventChange = false;\n                    }\n                    else if (isNullOrUndefined(this.isAngular) || !this.isAngular\n                        || (this.isAngular && !this.preventChange) || (this.isAngular && isNullOrUndefined(this.preventChange))) {\n                        this.raiseChangeEvent();\n                    }\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttrToElement();\n                    this.updateHTMLAttrToWrapper();\n                    let attributes$$1 = this.element.attributes;\n                    this.checkAttributes(true);\n                    break;\n                case 'readonly':\n                    Input.setReadonly(this.readonly, this.respectiveElement);\n                    break;\n                case 'type':\n                    if (this.respectiveElement.tagName !== 'TEXTAREA') {\n                        this.respectiveElement.setAttribute('type', this.type);\n                        this.raiseChangeEvent();\n                    }\n                    break;\n                case 'showClearButton':\n                    if (this.respectiveElement.tagName !== 'TEXTAREA') {\n                        Input.setClearButton(this.showClearButton, this.respectiveElement, this.textboxWrapper);\n                        this.bindClearEvent();\n                    }\n                    break;\n                case 'enableRtl':\n                    Input.setEnableRtl(this.enableRtl, [this.textboxWrapper.container]);\n                    break;\n                case 'placeholder':\n                    Input.setPlaceholder(this.placeholder, this.respectiveElement);\n                    break;\n                case 'autocomplete':\n                    if (this.autocomplete !== 'on' && this.autocomplete !== '') {\n                        this.respectiveElement.autocomplete = this.autocomplete;\n                    }\n                    else {\n                        this.removeAttributes(['autocomplete']);\n                    }\n                    break;\n                case 'cssClass':\n                    this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'locale':\n                    this.globalize = new Internationalization(this.locale);\n                    this.l10n.setLocale(this.locale);\n                    this.setProperties({ placeholder: this.l10n.getConstant('placeholder') }, true);\n                    Input.setPlaceholder(this.placeholder, this.respectiveElement);\n                    break;\n            }\n        }\n    }\n    /**\n     * Gets the component name\n     * @private\n     */\n    getModuleName() {\n        return 'textbox';\n    }\n    isBlank(str) {\n        return (!str || /^\\s*$/.test(str));\n    }\n    preRender() {\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.cloneElement = this.element.cloneNode(true);\n            this.formElement = closest(this.element, 'form');\n            if (!isNullOrUndefined(this.formElement)) {\n                this.isForm = true;\n            }\n            /* istanbul ignore next */\n            if (this.element.tagName === 'EJS-TEXTBOX') {\n                let ejInstance = getValue('ej2_instances', this.element);\n                let inputElement = this.multiline ?\n                    this.createElement('textarea') :\n                    this.createElement('input');\n                let index = 0;\n                for (index; index < this.element.attributes.length; index++) {\n                    let attributeName = this.element.attributes[index].nodeName;\n                    if (attributeName !== 'id') {\n                        inputElement.setAttribute(attributeName, this.element.attributes[index].nodeValue);\n                        inputElement.innerHTML = this.element.innerHTML;\n                        if (attributeName === 'name') {\n                            this.element.removeAttribute('name');\n                        }\n                    }\n                }\n                this.element.appendChild(inputElement);\n                this.element = inputElement;\n                setValue('ej2_instances', ejInstance, this.element);\n            }\n            this.updateHTMLAttrToElement();\n            this.checkAttributes(false);\n            if (this.element.tagName !== 'TEXTAREA') {\n                this.element.setAttribute('type', this.type);\n            }\n            this.element.setAttribute('role', 'textbox');\n            this.globalize = new Internationalization(this.locale);\n            let localeText = { placeholder: this.placeholder };\n            this.l10n = new L10n('textbox', localeText, this.locale);\n            if (this.l10n.getConstant('placeholder') !== '') {\n                this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant('placeholder') }, true);\n            }\n            if (!this.element.hasAttribute('id')) {\n                this.element.setAttribute('id', getUniqueID('textbox'));\n            }\n            if (!this.element.hasAttribute('name')) {\n                this.element.setAttribute('name', this.element.getAttribute('id'));\n            }\n            if (this.element.tagName === 'INPUT' && this.multiline) {\n                this.isHiddenInput = true;\n                this.textarea = this.createElement('textarea');\n                this.element.parentNode.insertBefore(this.textarea, this.element);\n                this.element.setAttribute('type', 'hidden');\n                this.textarea.setAttribute('name', this.element.getAttribute('name'));\n                this.element.removeAttribute('name');\n                this.textarea.setAttribute('role', this.element.getAttribute('role'));\n                this.element.removeAttribute('role');\n                let attribute = ['required', 'minlength', 'maxlength'];\n                for (let i = 0; i < attribute.length; i++) {\n                    if (this.element.hasAttribute(attribute[i])) {\n                        let attr = this.element.getAttribute(attribute[i]);\n                        this.textarea.setAttribute(attribute[i], attr);\n                        this.element.removeAttribute(attribute[i]);\n                    }\n                }\n            }\n        }\n    }\n    checkAttributes(isDynamic) {\n        let attrs = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) :\n            ['placeholder', 'disabled', 'value', 'readonly', 'type', 'autocomplete'];\n        for (let key of attrs) {\n            if (!isNullOrUndefined(this.element.getAttribute(key))) {\n                switch (key) {\n                    case 'disabled':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['enabled'] === undefined)) || isDynamic) {\n                            let enabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' ||\n                                this.element.getAttribute(key) === 'true' ? false : true;\n                            this.setProperties({ enabled: enabled }, !isDynamic);\n                        }\n                        break;\n                    case 'readonly':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['readonly'] === undefined)) || isDynamic) {\n                            let readonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === ''\n                                || this.element.getAttribute(key) === 'true' ? true : false;\n                            this.setProperties({ readonly: readonly }, !isDynamic);\n                        }\n                        break;\n                    case 'placeholder':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['placeholder'] === undefined)) || isDynamic) {\n                            this.setProperties({ placeholder: this.element.placeholder }, !isDynamic);\n                        }\n                        break;\n                    case 'autocomplete':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['autocomplete'] === undefined)) || isDynamic) {\n                            let autoCompleteTxt = this.element.autocomplete === 'off' ? 'off' : 'on';\n                            this.setProperties({ autocomplete: autoCompleteTxt }, !isDynamic);\n                        }\n                        break;\n                    case 'value':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['value'] === undefined)) || isDynamic) {\n                            this.setProperties({ value: this.element.value }, !isDynamic);\n                        }\n                        break;\n                    case 'type':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['type'] === undefined)) || isDynamic) {\n                            this.setProperties({ type: this.element.type }, !isDynamic);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        let updatedCssClassValue = this.cssClass;\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            updatedCssClassValue = this.getInputValidClassList(this.cssClass);\n        }\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.respectiveElement = (this.isHiddenInput) ? this.textarea : this.element;\n            this.textboxWrapper = Input.createInput({\n                element: this.respectiveElement,\n                floatLabelType: this.floatLabelType,\n                properties: {\n                    enabled: this.enabled,\n                    enableRtl: this.enableRtl,\n                    cssClass: updatedCssClassValue,\n                    readonly: this.readonly,\n                    placeholder: this.placeholder,\n                    showClearButton: this.showClearButton\n                }\n            });\n            this.updateHTMLAttrToWrapper();\n            if (this.isHiddenInput) {\n                this.respectiveElement.parentNode.insertBefore(this.element, this.respectiveElement);\n            }\n        }\n        else {\n            this.respectiveElement = this.element;\n            this.textboxWrapper = { container: this.element.parentElement };\n            if (this.showClearButton && !this.multiline) {\n                this.textboxWrapper.clearButton = this.textboxWrapper.container.querySelector('.e-clear-icon');\n                Input.wireClearBtnEvents(this.respectiveElement, this.textboxWrapper.clearButton, this.textboxWrapper.container);\n            }\n            if (this.floatLabelType === 'Auto') {\n                Input.wireFloatingEvents(this.respectiveElement);\n            }\n            // tslint:disable-next-line\n            Input.bindInitialEvent({ element: this.respectiveElement, buttons: null, customTag: null, floatLabelType: this.floatLabelType, properties: this.properties });\n        }\n        this.wireEvents();\n        if (!isNullOrUndefined(this.value)) {\n            Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);\n            if (this.isHiddenInput) {\n                this.element.value = this.respectiveElement.value;\n            }\n        }\n        if (!isNullOrUndefined(this.value)) {\n            this.initialValue = this.value;\n            this.setInitialValue();\n        }\n        if (this.autocomplete !== 'on' && this.autocomplete !== '') {\n            this.respectiveElement.autocomplete = this.autocomplete;\n            // tslint:disable-next-line\n        }\n        else if (!isNullOrUndefined(this.textboxOptions) && (this.textboxOptions['autocomplete'] !== undefined)) {\n            this.removeAttributes(['autocomplete']);\n        }\n        this.previousValue = this.value;\n        this.inputPreviousValue = this.value;\n        this.respectiveElement.defaultValue = this.respectiveElement.value;\n        Input.setWidth(this.width, this.textboxWrapper.container);\n        this.renderComplete();\n    }\n    updateHTMLAttrToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (containerAttr.indexOf(key) > -1) {\n                    if (key === 'class') {\n                        let updatedClassValues = this.getInputValidClassList(this.htmlAttributes[key]);\n                        if (updatedClassValues !== '') {\n                            addClass([this.textboxWrapper.container], updatedClassValues.split(' '));\n                        }\n                    }\n                    else if (key === 'style') {\n                        let setStyle = this.textboxWrapper.container.getAttribute(key);\n                        setStyle = !isNullOrUndefined(setStyle) ? (setStyle + this.htmlAttributes[key]) :\n                            this.htmlAttributes[key];\n                        this.textboxWrapper.container.setAttribute(key, setStyle);\n                    }\n                    else {\n                        this.textboxWrapper.container.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                }\n            }\n        }\n    }\n    updateHTMLAttrToElement() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (containerAttr.indexOf(key) < 0) {\n                    this.element.setAttribute(key, this.htmlAttributes[key]);\n                }\n            }\n        }\n    }\n    updateCssClass(newClass, oldClass) {\n        Input.setCssClass(this.getInputValidClassList(newClass), [this.textboxWrapper.container], this.getInputValidClassList(oldClass));\n    }\n    getInputValidClassList(inputClassName) {\n        let result = inputClassName;\n        if (!isNullOrUndefined(inputClassName) && inputClassName !== '') {\n            result = (inputClassName.replace(/\\s+/g, ' ')).trim();\n        }\n        return result;\n    }\n    setInitialValue() {\n        if (!this.isAngular) {\n            this.respectiveElement.setAttribute('value', this.initialValue);\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.respectiveElement, 'focus', this.focusHandler, this);\n        EventHandler.add(this.respectiveElement, 'blur', this.focusOutHandler, this);\n        EventHandler.add(this.respectiveElement, 'input', this.inputHandler, this);\n        EventHandler.add(this.respectiveElement, 'change', this.changeHandler, this);\n        if (this.isForm) {\n            EventHandler.add(this.formElement, 'reset', this.resetForm, this);\n        }\n        this.bindClearEvent();\n    }\n    resetValue(value) {\n        let prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.value = value;\n        this.isProtectedOnChange = prevOnChange;\n    }\n    resetForm() {\n        if (this.isAngular) {\n            this.resetValue('');\n        }\n        else {\n            this.resetValue(this.initialValue);\n        }\n        if (!isNullOrUndefined(this.textboxWrapper)) {\n            let label = this.textboxWrapper.container.querySelector('.e-float-text');\n            if (!isNullOrUndefined(label)) {\n                if ((isNullOrUndefined(this.initialValue) || this.initialValue === '')) {\n                    label.classList.add('e-label-bottom');\n                    label.classList.remove('e-label-top');\n                }\n                else if (this.initialValue !== '') {\n                    label.classList.add('e-label-top');\n                    label.classList.remove('e-label-bottom');\n                }\n            }\n        }\n    }\n    focusHandler(args) {\n        let eventArgs = {\n            container: this.textboxWrapper.container,\n            event: args,\n            value: this.value\n        };\n        this.trigger('focus', eventArgs);\n    }\n    focusOutHandler(args) {\n        if (!(this.previousValue === null && this.value === null && this.respectiveElement.value === '') &&\n            (this.previousValue !== this.respectiveElement.value)) {\n            this.raiseChangeEvent(args, true);\n        }\n        let eventArgs = {\n            container: this.textboxWrapper.container,\n            event: args,\n            value: this.value\n        };\n        this.trigger('blur', eventArgs);\n    }\n    inputHandler(args) {\n        // tslint:disable-next-line\n        let textboxObj = this;\n        let eventArgs = {\n            event: args,\n            value: this.respectiveElement.value,\n            previousValue: this.inputPreviousValue,\n            container: this.textboxWrapper.container\n        };\n        this.inputPreviousValue = this.respectiveElement.value;\n        /* istanbul ignore next */\n        if (this.isAngular) {\n            textboxObj.localChange({ value: this.respectiveElement.value });\n            this.preventChange = true;\n        }\n        if (this.isVue) {\n            this.preventChange = true;\n        }\n        this.trigger('input', eventArgs);\n        args.stopPropagation();\n    }\n    changeHandler(args) {\n        this.setProperties({ value: this.respectiveElement.value }, true);\n        this.raiseChangeEvent(args, true);\n        args.stopPropagation();\n    }\n    raiseChangeEvent(event, interaction) {\n        let eventArgs = {\n            event: event,\n            value: this.value,\n            previousValue: this.previousValue,\n            container: this.textboxWrapper.container,\n            isInteraction: interaction ? interaction : false,\n            isInteracted: interaction ? interaction : false\n        };\n        this.preventChange = false;\n        this.trigger('change', eventArgs);\n        this.previousValue = this.value;\n    }\n    bindClearEvent() {\n        if (this.showClearButton && this.respectiveElement.tagName !== 'TEXTAREA') {\n            if (this.enabled) {\n                EventHandler.add(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler, this);\n            }\n            else {\n                EventHandler.remove(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler);\n            }\n        }\n    }\n    resetInputHandler(event) {\n        event.preventDefault();\n        if (!(this.textboxWrapper.clearButton.classList.contains(HIDE_CLEAR))) {\n            let previousValue = this.value;\n            Input.setValue('', this.respectiveElement, this.floatLabelType, this.showClearButton);\n            if (this.isHiddenInput) {\n                this.element.value = this.respectiveElement.value;\n            }\n            this.setProperties({ value: this.respectiveElement.value }, true);\n            let eventArgs = {\n                event: event,\n                value: this.respectiveElement.value,\n                previousValue: this.inputPreviousValue,\n                container: this.textboxWrapper.container\n            };\n            this.trigger('input', eventArgs);\n            this.inputPreviousValue = this.respectiveElement.value;\n            this.raiseChangeEvent(event, true);\n        }\n    }\n    unWireEvents() {\n        EventHandler.remove(this.respectiveElement, 'focus', this.focusHandler);\n        EventHandler.remove(this.respectiveElement, 'blur', this.focusOutHandler);\n        EventHandler.remove(this.respectiveElement, 'input', this.inputHandler);\n        EventHandler.remove(this.respectiveElement, 'change', this.changeHandler);\n        if (this.isForm) {\n            EventHandler.remove(this.formElement, 'reset', this.resetForm);\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also, it maintains the initial TextBox element from the DOM.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        this.unWireEvents();\n        if (!(isBlazor() && this.isServerRendered)) {\n            if (this.element.tagName === 'INPUT' && this.multiline) {\n                detach(this.textboxWrapper.container.getElementsByTagName('textarea')[0]);\n                this.respectiveElement = this.element;\n                this.element.removeAttribute('type');\n            }\n            this.respectiveElement.value = this.respectiveElement.defaultValue;\n            this.respectiveElement.classList.remove('e-input');\n            this.removeAttributes(['aria-placeholder', 'aria-disabled', 'aria-readonly', 'aria-labelledby']);\n            if (!isNullOrUndefined(this.textboxWrapper)) {\n                this.textboxWrapper.container.insertAdjacentElement('afterend', this.respectiveElement);\n                detach(this.textboxWrapper.container);\n            }\n            this.textboxWrapper = null;\n            super.destroy();\n        }\n        else {\n            this.textboxWrapper = null;\n        }\n    }\n    /**\n     * Adding the icons to the TextBox component.\n     * @param { string } position - Specify the icon placement on the TextBox. Possible values are append and prepend.\n     * @param { string | string[] } iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for TextBox.\n     * @return {void}\n     */\n    addIcon(position, icons) {\n        Input.addIcon(position, icons, this.textboxWrapper.container, this.respectiveElement, this.createElement);\n    }\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     * @return {string}\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Adding the multiple attributes as key-value pair to the TextBox element.\n     * @param { { [key: string]: string } } attributes - Specifies the attributes to be add to TextBox element.\n     * @return {void}\n     */\n    addAttributes(attributes$$1) {\n        for (let key of Object.keys(attributes$$1)) {\n            if (key === 'disabled') {\n                this.setProperties({ enabled: false }, true);\n                Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);\n            }\n            else if (key === 'readonly') {\n                this.setProperties({ readonly: true }, true);\n                Input.setReadonly(this.readonly, this.respectiveElement);\n            }\n            else if (key === 'class') {\n                this.respectiveElement.classList.add(attributes$$1[key]);\n            }\n            else if (key === 'placeholder') {\n                this.setProperties({ placeholder: attributes$$1[key] }, true);\n                Input.setPlaceholder(this.placeholder, this.respectiveElement);\n            }\n            else if (key === 'rows' && this.respectiveElement.tagName === 'TEXTAREA') {\n                this.respectiveElement.setAttribute(key, attributes$$1[key]);\n            }\n            else {\n                this.respectiveElement.setAttribute(key, attributes$$1[key]);\n            }\n        }\n    }\n    /**\n     * Removing the multiple attributes as key-value pair to the TextBox element.\n     * @param { string[] } attributes - Specifies the attributes name to be removed from TextBox element.\n     * @return {void}\n     */\n    removeAttributes(attributes$$1) {\n        for (let key of attributes$$1) {\n            if (key === 'disabled') {\n                this.setProperties({ enabled: true }, true);\n                Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);\n            }\n            else if (key === 'readonly') {\n                this.setProperties({ readonly: false }, true);\n                Input.setReadonly(this.readonly, this.respectiveElement);\n            }\n            else if (key === 'placeholder') {\n                this.setProperties({ placeholder: null }, true);\n                Input.setPlaceholder(this.placeholder, this.respectiveElement);\n            }\n            else {\n                this.respectiveElement.removeAttribute(key);\n            }\n        }\n    }\n    /**\n     * Sets the focus to widget for interaction.\n     * @returns void\n     */\n    focusIn() {\n        if (document.activeElement !== this.respectiveElement && this.enabled) {\n            this.respectiveElement.focus();\n            if (this.textboxWrapper.container.classList.contains('e-input-group')\n                || this.textboxWrapper.container.classList.contains('e-outline')\n                || this.textboxWrapper.container.classList.contains('e-filled')) {\n                addClass([this.textboxWrapper.container], [TEXTBOX_FOCUS]);\n            }\n        }\n    }\n    /**\n     * Remove the focus from widget, if the widget is in focus state.\n     * @returns void\n     */\n    focusOut() {\n        if (document.activeElement === this.respectiveElement && this.enabled) {\n            this.respectiveElement.blur();\n            if (this.textboxWrapper.container.classList.contains('e-input-group')\n                || this.textboxWrapper.container.classList.contains('e-outline')\n                || this.textboxWrapper.container.classList.contains('e-filled')) {\n                removeClass([this.textboxWrapper.container], [TEXTBOX_FOCUS]);\n            }\n        }\n    }\n};\n__decorate$6([\n    Property('text')\n], TextBox.prototype, \"type\", void 0);\n__decorate$6([\n    Property(false)\n], TextBox.prototype, \"readonly\", void 0);\n__decorate$6([\n    Property(null)\n], TextBox.prototype, \"value\", void 0);\n__decorate$6([\n    Property('Never')\n], TextBox.prototype, \"floatLabelType\", void 0);\n__decorate$6([\n    Property('')\n], TextBox.prototype, \"cssClass\", void 0);\n__decorate$6([\n    Property(null)\n], TextBox.prototype, \"placeholder\", void 0);\n__decorate$6([\n    Property('on')\n], TextBox.prototype, \"autocomplete\", void 0);\n__decorate$6([\n    Property({})\n], TextBox.prototype, \"htmlAttributes\", void 0);\n__decorate$6([\n    Property(false)\n], TextBox.prototype, \"multiline\", void 0);\n__decorate$6([\n    Property(true)\n], TextBox.prototype, \"enabled\", void 0);\n__decorate$6([\n    Property(false)\n], TextBox.prototype, \"showClearButton\", void 0);\n__decorate$6([\n    Property(false)\n], TextBox.prototype, \"enablePersistence\", void 0);\n__decorate$6([\n    Property(null)\n], TextBox.prototype, \"width\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"created\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"destroyed\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"change\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"blur\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"focus\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"input\", void 0);\nTextBox = __decorate$6([\n    NotifyPropertyChanges\n], TextBox);\n\n/**\n * Uploader modules\n */\n\n/**\n * NumericTextBox all modules\n */\n\nexport { NumericTextBox, regularExpressions, createMask, applyMask, wireEvents, unwireEvents, bindClearEvent, unstrippedValue, strippedValue, maskInputFocusHandler, maskInputBlurHandler, maskInputDropHandler, mobileRemoveFunction, setMaskValue, setElementValue, maskInput, getVal, getMaskedVal, MaskUndo, MaskedTextBox, Input, TicksData, ColorRangeData, LimitData, TooltipData, Slider, regex, ErrorOption, FormValidator, FilesProp, ButtonsProps, AsyncSettings, Uploader, ColorPicker, TextBox };\n//# sourceMappingURL=ej2-inputs.es2015.js.map\n","import { Animation, Browser, ChildProperty, Complex, Component, Event, EventHandler, KeyboardEvents, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, addClass, append, attributes, classList, closest, compile, createElement, detach, extend, formatUnit, getComponent, getUniqueID, getValue, isBlazor, isNullOrUndefined, isUndefined, matches, prepend, remove, removeClass, resetBlazorTemplate, rippleEffect, select, selectAll, setStyleAttribute, setValue, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { DataManager, DataUtil, Predicate, Query } from '@syncfusion/ej2-data';\nimport { ListBase, Sortable, cssClass, moveTo } from '@syncfusion/ej2-lists';\nimport { Popup, createSpinner, getZindexPartial, hideSpinner, isCollide, showSpinner } from '@syncfusion/ej2-popups';\nimport { Input, TextBox } from '@syncfusion/ej2-inputs';\nimport { Button, createCheckBox } from '@syncfusion/ej2-buttons';\nimport { TreeView } from '@syncfusion/ej2-navigations';\n\n/**\n * IncrementalSearch module file\n */\nlet queryString = '';\nlet prevString = '';\nlet matches$1 = [];\nlet activeClass = 'e-active';\nlet prevElementId = '';\n/**\n * Search and focus the list item based on key code matches with list text content\n * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.\n * @param  { HTMLElement[]] } items - Specifies an array of HTMLElement, from which matches find has done.\n * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen\n * after selected item otherwise it will do from initial.\n * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.\n */\nfunction incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId, isBlazor$$1) {\n    queryString += String.fromCharCode(keyCode);\n    setTimeout(() => { queryString = ''; }, 1000);\n    let index;\n    queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n    if (prevElementId === elementId && prevString === queryString) {\n        for (let i = 0; i < matches$1.length; i++) {\n            if (matches$1[i].classList.contains(activeClass)) {\n                index = i;\n                break;\n            }\n        }\n        index = index + 1;\n        return matches$1[index];\n    }\n    else {\n        let listItems = items;\n        let strLength = queryString.length;\n        let text;\n        let item;\n        selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n        let i = selectedIndex;\n        matches$1 = [];\n        do {\n            if (i === listItems.length) {\n                i = -1;\n            }\n            i === -1 ? index = 0 : index = i;\n            item = listItems[index];\n            if (isBlazor$$1) {\n                text = ignoreCase ? item.textContent.trim().toLowerCase() : item.textContent.trim();\n            }\n            else {\n                text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n            }\n            if (text.substr(0, strLength) === queryString) {\n                matches$1.push(listItems[index]);\n            }\n            i++;\n        } while (i !== selectedIndex);\n        prevString = queryString;\n        prevElementId = elementId;\n        return matches$1[0];\n    }\n}\nfunction Search(inputVal, items, searchType, ignoreCase) {\n    let listItems = items;\n    ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n    let itemData = { item: null, index: null };\n    if (inputVal && inputVal.length) {\n        let strLength = inputVal.length;\n        let queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n        for (let i = 0, itemsData = listItems; i < itemsData.length; i++) {\n            let item = itemsData[i];\n            let text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n            if ((searchType === 'Equal' && text === queryStr) || (searchType === 'StartsWith' && text.substr(0, strLength) === queryStr)) {\n                itemData.item = item;\n                itemData.index = i;\n                return { item: item, index: i };\n            }\n        }\n        return itemData;\n    }\n    return itemData;\n}\n\n/**\n * Function helps to find which highlightSearch is to call based on your data.\n * @param  {HTMLElement} element - Specifies an li element.\n * @param  {string} query - Specifies the string to be highlighted.\n * @param  {boolean} ignoreCase - Specifies the ignoreCase option.\n * @param  {HightLightType} type - Specifies the type of highlight.\n */\nfunction highlightSearch(element, query, ignoreCase, type, isBlazor$$1) {\n    if (query === '') {\n        return;\n    }\n    else {\n        let ignoreRegex = ignoreCase ? 'gim' : 'gm';\n        query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n        let replaceQuery = type === 'StartsWith' ? '^(' + query + ')' : type === 'EndsWith' ? '(' + query + ')$' : '(' + query + ')';\n        findTextNode(element, new RegExp(replaceQuery, ignoreRegex), isBlazor$$1);\n    }\n}\nfunction findTextNode(element, pattern, isBlazor$$1) {\n    for (let index = 0; element.childNodes && (index < element.childNodes.length); index++) {\n        if (element.childNodes[index].nodeType === 3 && element.childNodes[index].textContent.trim() !== '') {\n            element = (isBlazor$$1 && element.classList.contains('e-highlight')) ? element.parentElement : element;\n            if (isBlazor$$1 && element.getAttribute('data-value')) {\n                element.innerHTML = element.getAttribute('data-value').replace(pattern, '<span class=\"e-highlight\">$1</span>');\n            }\n            else {\n                element.innerHTML = element.innerHTML.replace(pattern, '<span class=\"e-highlight\">$1</span>');\n            }\n            break;\n        }\n        else {\n            findTextNode(element.childNodes[index], pattern, isBlazor$$1);\n        }\n    }\n}\n/**\n * Function helps to remove highlighted element based on your data.\n * @param  {HTMLElement} content - Specifies an content element.\n */\nfunction revertHighlightSearch(content) {\n    let contentElement = content.querySelectorAll('.e-highlight');\n    for (let i = contentElement.length - 1; i >= 0; i--) {\n        let parent = contentElement[i].parentNode;\n        let text = document.createTextNode(contentElement[i].textContent);\n        parent.replaceChild(text, contentElement[i]);\n    }\n}\n\n/**\n * Common source\n */\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass FieldSettings extends ChildProperty {\n}\n__decorate([\n    Property()\n], FieldSettings.prototype, \"text\", void 0);\n__decorate([\n    Property()\n], FieldSettings.prototype, \"value\", void 0);\n__decorate([\n    Property()\n], FieldSettings.prototype, \"iconCss\", void 0);\n__decorate([\n    Property()\n], FieldSettings.prototype, \"groupBy\", void 0);\n__decorate([\n    Property()\n], FieldSettings.prototype, \"htmlAttributes\", void 0);\nconst dropDownBaseClasses = {\n    root: 'e-dropdownbase',\n    rtl: 'e-rtl',\n    content: 'e-content',\n    selected: 'e-active',\n    hover: 'e-hover',\n    noData: 'e-nodata',\n    fixedHead: 'e-fixed-head',\n    focus: 'e-item-focus',\n    li: 'e-list-item',\n    group: 'e-list-group-item',\n    disabled: 'e-disabled',\n    grouping: 'e-dd-group'\n};\nconst ITEMTEMPLATE_PROPERTY = 'ItemTemplate';\nconst VALUETEMPLATE_PROPERTY = 'ValueTemplate';\nconst GROUPTEMPLATE_PROPERTY = 'GroupTemplate';\nconst HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';\nconst FOOTERTEMPLATE_PROPERTY = 'FooterTemplate';\nconst NORECORDSTEMPLATE_PROPERTY = 'NoRecordsTemplate';\nconst ACTIONFAILURETEMPLATE_PROPERTY = 'ActionFailureTemplate';\n/**\n * DropDownBase component will generate the list items based on given data and act as base class to drop-down related components\n */\nlet DropDownBase = class DropDownBase extends Component {\n    /**\n     * * Constructor for DropDownBase class\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    ;\n    getPropObject(prop, newProp, oldProp) {\n        let newProperty = new Object();\n        let oldProperty = new Object();\n        // tslint:disable-next-line:no-function-constructor-with-string-args\n        let propName = (prop) => {\n            return prop;\n        };\n        newProperty[propName(prop)] = newProp[propName(prop)];\n        oldProperty[propName(prop)] = oldProp[propName(prop)];\n        let data = new Object();\n        data.newProperty = newProperty;\n        data.oldProperty = oldProperty;\n        return data;\n    }\n    getValueByText(text, ignoreCase, ignoreAccent) {\n        let value = null;\n        if (!isNullOrUndefined(this.listData)) {\n            if (ignoreCase) {\n                value = this.checkValueCase(text, true, ignoreAccent);\n            }\n            else {\n                value = this.checkValueCase(text, false, ignoreAccent);\n            }\n        }\n        return value;\n    }\n    ;\n    checkValueCase(text, ignoreCase, ignoreAccent, isTextByValue) {\n        let value = null;\n        if (isTextByValue) {\n            value = text;\n        }\n        let dataSource = this.listData;\n        let fields = this.fields;\n        let type = this.typeOfData(dataSource).typeof;\n        if (type === 'string' || type === 'number' || type === 'boolean') {\n            for (let item of dataSource) {\n                if (!isNullOrUndefined(item)) {\n                    if (ignoreAccent) {\n                        value = this.checkingAccent(String(item), text, ignoreCase);\n                    }\n                    else {\n                        if (ignoreCase) {\n                            if (this.checkIgnoreCase(String(item), text)) {\n                                value = this.getItemValue(String(item), text, ignoreCase);\n                            }\n                        }\n                        else {\n                            if (this.checkNonIgnoreCase(String(item), text)) {\n                                value = this.getItemValue(String(item), text, ignoreCase, isTextByValue);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (ignoreCase) {\n                dataSource.filter((item) => {\n                    let itemValue = getValue(fields.value, item);\n                    if (!isNullOrUndefined(itemValue) && this.checkIgnoreCase(getValue(fields.text, item).toString(), text)) {\n                        value = getValue(fields.value, item);\n                    }\n                });\n            }\n            else {\n                if (isTextByValue) {\n                    dataSource.filter((item) => {\n                        let itemValue = getValue(fields.value, item);\n                        if (!isNullOrUndefined(itemValue) && !isNullOrUndefined(value) && itemValue.toString() === value.toString()) {\n                            value = getValue(fields.text, item);\n                        }\n                    });\n                }\n                else {\n                    dataSource.filter((item) => {\n                        if (this.checkNonIgnoreCase(getValue(fields.text, item), text)) {\n                            value = getValue(fields.value, item);\n                        }\n                    });\n                }\n            }\n        }\n        return value;\n    }\n    checkingAccent(item, text, ignoreCase) {\n        let dataItem = DataUtil.ignoreDiacritics(String(item));\n        let textItem = DataUtil.ignoreDiacritics(text.toString());\n        let value = null;\n        if (ignoreCase) {\n            if (this.checkIgnoreCase(dataItem, textItem)) {\n                value = this.getItemValue(String(item), text, ignoreCase);\n            }\n        }\n        else {\n            if (this.checkNonIgnoreCase(String(item), text)) {\n                value = this.getItemValue(String(item), text, ignoreCase);\n            }\n        }\n        return value;\n    }\n    checkIgnoreCase(item, text) {\n        return String(item).toLowerCase() === text.toString().toLowerCase() ? true : false;\n    }\n    checkNonIgnoreCase(item, text) {\n        return String(item) === text.toString() ? true : false;\n    }\n    getItemValue(dataItem, typedText, ignoreCase, isTextByValue) {\n        let value = null;\n        let dataSource = this.listData;\n        let type = this.typeOfData(dataSource).typeof;\n        if (isTextByValue) {\n            value = dataItem.toString();\n        }\n        else {\n            if (ignoreCase) {\n                value = type === 'string' ? String(dataItem) : this.getFormattedValue(String(dataItem));\n            }\n            else {\n                value = type === 'string' ? typedText : this.getFormattedValue(typedText);\n            }\n        }\n        return value;\n    }\n    templateCompiler(baseTemplate) {\n        let checkTemplate = false;\n        if (baseTemplate) {\n            try {\n                checkTemplate = (document.querySelectorAll(baseTemplate).length) ? true : false;\n            }\n            catch (exception) {\n                checkTemplate = false;\n            }\n        }\n        return checkTemplate;\n    }\n    l10nUpdate(actionFailure) {\n        let ele = this.getModuleName() === 'listbox' ? this.ulElement : this.list;\n        if (this.noRecordsTemplate !== 'No records found' || this.actionFailureTemplate !== 'Request failed') {\n            this.DropDownBaseresetBlazorTemplates(false, false, true, true);\n            let template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;\n            let compiledString;\n            let templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;\n            ele.innerHTML = '';\n            let tempaltecheck = this.templateCompiler(template);\n            if (tempaltecheck) {\n                compiledString = compile(document.querySelector(template).innerHTML.trim());\n            }\n            else {\n                compiledString = compile(template);\n            }\n            for (let item of compiledString({}, null, null, templateId, this.isStringTemplate)) {\n                ele.appendChild(item);\n            }\n            this.DropDownBaseupdateBlazorTemplates(false, false, !actionFailure, actionFailure, false, false, false, false);\n        }\n        else {\n            let l10nLocale = { noRecordsTemplate: 'No records found', actionFailureTemplate: 'Request failed' };\n            let componentLocale = new L10n(this.getLocaleName(), {}, this.locale);\n            if (componentLocale.getConstant('actionFailureTemplate') !== '') {\n                this.l10n = componentLocale;\n            }\n            else {\n                this.l10n = new L10n(this.getModuleName() === 'listbox' ? 'listbox' : 'dropdowns', l10nLocale, this.locale);\n            }\n            let content = actionFailure ?\n                this.l10n.getConstant('actionFailureTemplate') : this.l10n.getConstant('noRecordsTemplate');\n            if (this.getModuleName() === 'listbox') {\n                let liElem = this.createElement('li');\n                liElem.textContent = content;\n                ele.appendChild(liElem);\n                liElem.classList.add('e-list-nrt');\n            }\n            else {\n                ele.innerHTML = content;\n            }\n        }\n    }\n    getLocaleName() {\n        return 'drop-down-base';\n    }\n    ;\n    getTextByValue(value) {\n        let text;\n        text = this.checkValueCase(value, false, false, true);\n        return text;\n    }\n    getFormattedValue(value) {\n        if (this.listData && this.listData.length) {\n            let item = this.typeOfData(this.listData);\n            if (isBlazor() && isNullOrUndefined(value) || value === 'null') {\n                return null;\n            }\n            if (typeof getValue((this.fields.value ? this.fields.value : 'value'), item.item) === 'number'\n                || item.typeof === 'number') {\n                return parseFloat(value);\n            }\n            if (typeof getValue((this.fields.value ? this.fields.value : 'value'), item.item) === 'boolean'\n                || item.typeof === 'boolean') {\n                return (value === 'true');\n            }\n        }\n        return value;\n    }\n    /**\n     * Sets RTL to dropdownbase wrapper\n     */\n    setEnableRtl() {\n        if (this.list) {\n            this.enableRtlElements.push(this.list);\n        }\n        this.enableRtl ? addClass(this.enableRtlElements, dropDownBaseClasses.rtl) :\n            removeClass(this.enableRtlElements, dropDownBaseClasses.rtl);\n    }\n    ;\n    /**\n     * Initialize the Component.\n     */\n    initialize() {\n        this.bindEvent = true;\n        this.actionFailureTemplateId = `${this.element.id}${ACTIONFAILURETEMPLATE_PROPERTY}`;\n        if (this.element.tagName === 'UL') {\n            let jsonElement = ListBase.createJsonFromElement(this.element);\n            this.setProperties({ fields: { text: 'text', value: 'text' } }, true);\n            this.resetList(jsonElement, this.fields);\n        }\n        else if (this.element.tagName === 'SELECT') {\n            let dataSource = this.dataSource instanceof Array ? (this.dataSource.length > 0 ? true : false)\n                : !isNullOrUndefined(this.dataSource) ? true : false;\n            if (!dataSource) {\n                this.renderItemsBySelect();\n            }\n        }\n        else {\n            this.setListData(this.dataSource, this.fields, this.query);\n        }\n    }\n    ;\n    DropDownBaseupdateBlazorTemplates(item, group, noRecord, action, value, header, footer, isEmpty) {\n        if (!this.isStringTemplate) {\n            if (this.itemTemplate && item) {\n                updateBlazorTemplate(this.itemTemplateId, ITEMTEMPLATE_PROPERTY, this, isEmpty);\n            }\n            if (this.groupTemplate && group) {\n                updateBlazorTemplate(this.groupTemplateId, GROUPTEMPLATE_PROPERTY, this, isEmpty);\n            }\n            if (this.noRecordsTemplate && noRecord) {\n                updateBlazorTemplate(this.noRecordsTemplateId, NORECORDSTEMPLATE_PROPERTY, this, isEmpty);\n            }\n            if (this.actionFailureTemplate && action) {\n                updateBlazorTemplate(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE_PROPERTY, this, isEmpty);\n            }\n            if (value) {\n                updateBlazorTemplate(this.valueTemplateId, VALUETEMPLATE_PROPERTY, this, isEmpty);\n            }\n            if (header) {\n                updateBlazorTemplate(this.headerTemplateId, HEADERTEMPLATE_PROPERTY, this);\n            }\n            if (footer) {\n                updateBlazorTemplate(this.footerTemplateId, FOOTERTEMPLATE_PROPERTY, this);\n            }\n        }\n    }\n    DropDownBaseresetBlazorTemplates(item, group, noRecord, action, value, header, footer) {\n        if (!this.isStringTemplate) {\n            if (this.itemTemplate && item) {\n                resetBlazorTemplate(this.itemTemplateId, ITEMTEMPLATE_PROPERTY);\n            }\n            if (this.groupTemplate && group) {\n                resetBlazorTemplate(this.groupTemplateId, GROUPTEMPLATE_PROPERTY);\n            }\n            if (this.noRecordsTemplate && noRecord) {\n                resetBlazorTemplate(this.noRecordsTemplateId, NORECORDSTEMPLATE_PROPERTY);\n            }\n            if (this.actionFailureTemplate && action) {\n                resetBlazorTemplate(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE_PROPERTY);\n            }\n            if (value) {\n                resetBlazorTemplate(this.valueTemplateId, VALUETEMPLATE_PROPERTY);\n            }\n            if (header) {\n                resetBlazorTemplate(this.headerTemplateId, HEADERTEMPLATE_PROPERTY);\n            }\n            if (footer) {\n                resetBlazorTemplate(this.footerTemplateId, FOOTERTEMPLATE_PROPERTY);\n            }\n        }\n    }\n    /**\n     * Get the properties to be maintained in persisted state.\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    ;\n    /**\n     * Sets the enabled state to DropDownBase.\n     */\n    setEnabled() {\n        this.element.setAttribute('aria-disabled', (this.enabled) ? 'false' : 'true');\n    }\n    ;\n    /**\n     * Sets the enabled state to DropDownBase.\n     */\n    updateDataAttribute(value) {\n        let invalidAttr = ['class', 'style', 'id', 'type'];\n        let attr = {};\n        for (let a = 0; a < this.element.attributes.length; a++) {\n            if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 &&\n                !(this.getModuleName() === 'dropdownlist' && this.element.attributes[a].name === 'readonly')) {\n                attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n            }\n        }\n        extend(attr, value, attr);\n        this.setProperties({ htmlAttributes: attr }, true);\n    }\n    renderItemsBySelect() {\n        let element = this.element;\n        let fields = { value: 'value', text: 'text' };\n        let jsonElement = [];\n        let group = element.querySelectorAll('select>optgroup');\n        let option = element.querySelectorAll('select>option');\n        this.getJSONfromOption(jsonElement, option, fields);\n        if (group.length) {\n            for (let i = 0; i < group.length; i++) {\n                let item = group[i];\n                let optionGroup = {};\n                optionGroup[fields.text] = item.label;\n                optionGroup.isHeader = true;\n                let child = item.querySelectorAll('option');\n                jsonElement.push(optionGroup);\n                this.getJSONfromOption(jsonElement, child, fields);\n            }\n            let items = element.querySelectorAll('select>option');\n        }\n        this.fields.text = fields.text;\n        this.fields.value = fields.value;\n        this.resetList(jsonElement, fields);\n    }\n    getJSONfromOption(items, options, fields) {\n        for (let option of options) {\n            let json = {};\n            json[fields.text] = option.innerText;\n            json[fields.value] = option.getAttribute(fields.value) ? option.getAttribute(fields.value) : option.innerText;\n            items.push(json);\n        }\n    }\n    /**\n     * Execute before render the list items\n     * @private\n     */\n    preRender() {\n        // there is no event handler\n        this.scrollTimer = -1;\n        this.enableRtlElements = [];\n        this.isRequested = false;\n        this.isDataFetched = false;\n        this.itemTemplateId = `${this.element.id}${ITEMTEMPLATE_PROPERTY}`;\n        this.valueTemplateId = `${this.element.id}${VALUETEMPLATE_PROPERTY}`;\n        this.groupTemplateId = `${this.element.id}${GROUPTEMPLATE_PROPERTY}`;\n        this.headerTemplateId = `${this.element.id}${HEADERTEMPLATE_PROPERTY}`;\n        this.footerTemplateId = `${this.element.id}${FOOTERTEMPLATE_PROPERTY}`;\n        this.noRecordsTemplateId = `${this.element.id}${NORECORDSTEMPLATE_PROPERTY}`;\n    }\n    /**\n     * Creates the list items of DropDownBase component.\n     */\n    setListData(dataSource, fields, query) {\n        fields = fields ? fields : this.fields;\n        let ulElement;\n        this.isActive = true;\n        let eventArgs = { cancel: false, data: dataSource, query: query };\n        this.trigger('actionBegin', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel) {\n                this.showSpinner();\n                if (dataSource instanceof DataManager) {\n                    this.isRequested = true;\n                    if (this.isDataFetched) {\n                        this.emptyDataRequest(fields);\n                        return;\n                    }\n                    eventArgs.data.executeQuery(this.getQuery(eventArgs.query)).then((e) => {\n                        this.trigger('actionComplete', e, (e) => {\n                            if (!e.cancel) {\n                                let listItems = e.result;\n                                if (listItems.length === 0) {\n                                    this.isDataFetched = true;\n                                }\n                                ulElement = this.renderItems(listItems, fields);\n                                this.onActionComplete(ulElement, listItems, e);\n                                if (this.groupTemplate) {\n                                    this.renderGroupTemplate(ulElement);\n                                }\n                                this.isRequested = false;\n                                this.bindChildItems(listItems, ulElement, fields, e);\n                            }\n                        });\n                    }).catch((e) => {\n                        this.isRequested = false;\n                        this.onActionFailure(e);\n                        this.hideSpinner();\n                    });\n                }\n                else {\n                    let dataManager = new DataManager(eventArgs.data);\n                    let listItems = (this.getQuery(eventArgs.query)).executeLocal(dataManager);\n                    let localDataArgs = { cancel: false, result: listItems };\n                    this.trigger('actionComplete', localDataArgs, (localDataArgs) => {\n                        if (!localDataArgs.cancel) {\n                            ulElement = this.renderItems(localDataArgs.result, fields);\n                            this.onActionComplete(ulElement, localDataArgs.result);\n                            if (this.groupTemplate) {\n                                this.renderGroupTemplate(ulElement);\n                            }\n                            this.bindChildItems(localDataArgs.result, ulElement, fields);\n                        }\n                    });\n                }\n            }\n        });\n    }\n    bindChildItems(listItems, ulElement, fields, e) {\n        if (listItems.length >= 100 && this.getModuleName() === 'autocomplete') {\n            setTimeout(() => {\n                let childNode = this.remainingItems(this.sortedData, fields);\n                append(childNode, ulElement);\n                this.DropDownBaseupdateBlazorTemplates(true, false, false, false);\n                this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n                this.updateListValues();\n                this.raiseDataBound(listItems, e);\n            }, 0);\n        }\n        else {\n            this.raiseDataBound(listItems, e);\n        }\n    }\n    updateListValues() {\n        // Used this method in component side.\n    }\n    findListElement(list, findNode, attribute, value) {\n        let liElement = null;\n        if (list) {\n            let listArr = [].slice.call(list.querySelectorAll(findNode));\n            for (let index = 0; index < listArr.length; index++) {\n                if (listArr[index].getAttribute(attribute) === (value + '')) {\n                    liElement = listArr[index];\n                    break;\n                }\n            }\n        }\n        return liElement;\n    }\n    raiseDataBound(listItems, e) {\n        this.hideSpinner();\n        let dataBoundEventArgs = {\n            items: listItems,\n            e: e\n        };\n        this.trigger('dataBound', dataBoundEventArgs);\n    }\n    remainingItems(dataSource, fields) {\n        let spliceData = new DataManager(dataSource).executeLocal(new Query().skip(100));\n        if (this.itemTemplate) {\n            let listElements = this.templateListItem(spliceData, fields);\n            return [].slice.call(listElements.childNodes);\n        }\n        let type = this.typeOfData(spliceData).typeof;\n        if (type === 'string' || type === 'number' || type === 'boolean') {\n            return ListBase.createListItemFromArray(this.createElement, spliceData, true, this.listOption(spliceData, fields));\n        }\n        return ListBase.createListItemFromJson(this.createElement, spliceData, this.listOption(spliceData, fields), 1, true);\n    }\n    emptyDataRequest(fields) {\n        let listItems = [];\n        this.onActionComplete(this.renderItems(listItems, fields), listItems);\n        this.isRequested = false;\n        this.hideSpinner();\n    }\n    showSpinner() {\n        // Used this method in component side.\n    }\n    hideSpinner() {\n        // Used this method in component side.\n    }\n    onActionFailure(e) {\n        this.liCollections = [];\n        this.trigger('actionFailure', e);\n        this.l10nUpdate(true);\n        addClass([this.list], dropDownBaseClasses.noData);\n    }\n    onActionComplete(ulElement, list, e) {\n        this.listData = list;\n        if (isBlazor() && this.isServerRendered && this.getModuleName() === 'listbox') {\n            remove(this.list.querySelector('.e-list-parent'));\n            remove(this.list.querySelector('.e-hidden-select'));\n        }\n        else {\n            this.list.innerHTML = '';\n        }\n        this.fixedHeaderElement = isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement : null;\n        this.list.appendChild(ulElement);\n        this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n        this.ulElement = this.list.querySelector('ul');\n        this.postRender(this.list, list, this.bindEvent);\n    }\n    postRender(listElement, list, bindEvent) {\n        let focusItem = listElement.querySelector('.' + dropDownBaseClasses.li);\n        let selectedItem = listElement.querySelector('.' + dropDownBaseClasses.selected);\n        if (focusItem && !selectedItem) {\n            focusItem.classList.add(dropDownBaseClasses.focus);\n        }\n        if (list.length <= 0) {\n            this.l10nUpdate();\n            addClass([listElement], dropDownBaseClasses.noData);\n        }\n        else {\n            listElement.classList.remove(dropDownBaseClasses.noData);\n        }\n    }\n    /**\n     * Get the query to do the data operation before list item generation.\n     */\n    getQuery(query) {\n        return query ? query : this.query ? this.query : new Query();\n    }\n    /**\n     * To render the template content for group header element.\n     */\n    renderGroupTemplate(listEle) {\n        if (this.fields.groupBy !== null && this.dataSource || this.element.querySelector('.' + dropDownBaseClasses.group)) {\n            let dataSource = this.dataSource;\n            let option = { groupTemplateID: this.groupTemplateId, isStringTemplate: this.isStringTemplate };\n            let headerItems = listEle.querySelectorAll('.' + dropDownBaseClasses.group);\n            let groupcheck = this.templateCompiler(this.groupTemplate);\n            if (groupcheck) {\n                let groupValue = document.querySelector(this.groupTemplate).innerHTML.trim();\n                let tempHeaders = ListBase.renderGroupTemplate(groupValue, dataSource, this.fields.properties, headerItems, option);\n            }\n            else {\n                let tempHeaders = ListBase.renderGroupTemplate(this.groupTemplate, dataSource, this.fields.properties, headerItems, option);\n            }\n            this.DropDownBaseupdateBlazorTemplates(false, true, false, false, false, false, false, false);\n        }\n    }\n    /**\n     * To create the ul li list items\n     */\n    createListItems(dataSource, fields) {\n        if (dataSource && fields.groupBy || this.element.querySelector('optgroup')) {\n            if (fields.groupBy) {\n                if (this.sortOrder !== 'None') {\n                    dataSource = this.getSortedDataSource(dataSource);\n                }\n                dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);\n            }\n            addClass([this.list], dropDownBaseClasses.grouping);\n        }\n        else {\n            dataSource = this.getSortedDataSource(dataSource);\n        }\n        let options = this.listOption(dataSource, fields);\n        let spliceData = (dataSource.length > 100) ?\n            new DataManager(dataSource).executeLocal(new Query().take(100))\n            : dataSource;\n        this.sortedData = dataSource;\n        return ListBase.createList(this.createElement, (this.getModuleName() === 'autocomplete') ? spliceData : dataSource, options, true);\n    }\n    ;\n    listOption(dataSource, fields) {\n        let iconCss = isNullOrUndefined(fields.iconCss) ? false : true;\n        let fieldValues = !isNullOrUndefined(fields.properties) ?\n            fields.properties : fields;\n        let options = (fields.text !== null || fields.value !== null) ? {\n            fields: fieldValues,\n            showIcon: iconCss, ariaAttributes: { groupItemRole: 'presentation' }\n        } : { fields: { value: 'text' } };\n        return extend({}, options, fields, true);\n    }\n    ;\n    setFloatingHeader(e) {\n        if (isNullOrUndefined(this.fixedHeaderElement)) {\n            this.fixedHeaderElement = this.createElement('div', { className: dropDownBaseClasses.fixedHead });\n            if (!this.list.querySelector('li').classList.contains(dropDownBaseClasses.group)) {\n                this.fixedHeaderElement.style.display = 'none';\n            }\n            prepend([this.fixedHeaderElement], this.list);\n            this.setFixedHeader();\n        }\n        if (!isNullOrUndefined(this.fixedHeaderElement) && this.fixedHeaderElement.style.zIndex === '0') {\n            this.setFixedHeader();\n        }\n        this.scrollStop(e);\n    }\n    scrollStop(e) {\n        let target = e.target;\n        let liHeight = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue('height'), 10);\n        let topIndex = Math.round(target.scrollTop / liHeight);\n        let liCollections = this.list.querySelectorAll('li');\n        for (let i = topIndex; i > -1; i--) {\n            if (!isNullOrUndefined(liCollections[i]) && liCollections[i].classList.contains(dropDownBaseClasses.group)) {\n                let currentLi = liCollections[i];\n                this.fixedHeaderElement.innerHTML = currentLi.innerHTML;\n                this.fixedHeaderElement.style.top = e.target.scrollTop + 'px';\n                this.fixedHeaderElement.style.display = 'block';\n                break;\n            }\n            else {\n                this.fixedHeaderElement.style.display = 'none';\n                this.fixedHeaderElement.style.top = 'none';\n            }\n        }\n    }\n    /**\n     * To render the list items\n     */\n    renderItems(listData, fields) {\n        let ulElement;\n        if (this.itemTemplate && listData) {\n            let dataSource = listData;\n            if (dataSource && fields.groupBy) {\n                if (this.sortOrder !== 'None') {\n                    dataSource = this.getSortedDataSource(dataSource);\n                }\n                dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);\n            }\n            else {\n                dataSource = this.getSortedDataSource(dataSource);\n            }\n            this.sortedData = dataSource;\n            let spliceData = (dataSource.length > 100) ?\n                new DataManager(dataSource).executeLocal(new Query().take(100))\n                : dataSource;\n            ulElement = this.templateListItem((this.getModuleName() === 'autocomplete') ? spliceData : dataSource, fields);\n            let isTempEmpty = (this.getModuleName() === 'listbox') ? true : false;\n            this.DropDownBaseupdateBlazorTemplates(true, false, false, false, false, false, false, isTempEmpty);\n        }\n        else {\n            ulElement = this.createListItems(listData, fields);\n        }\n        return ulElement;\n    }\n    ;\n    templateListItem(dataSource, fields) {\n        this.DropDownBaseresetBlazorTemplates(true, false, false, false);\n        let option = this.listOption(dataSource, fields);\n        option.templateID = this.itemTemplateId;\n        option.isStringTemplate = this.isStringTemplate;\n        let itemcheck = this.templateCompiler(this.itemTemplate);\n        if (itemcheck) {\n            let itemValue = document.querySelector(this.itemTemplate).innerHTML.trim();\n            return ListBase.renderContentTemplate(this.createElement, itemValue, dataSource, fields.properties, option);\n        }\n        else {\n            return ListBase.renderContentTemplate(this.createElement, this.itemTemplate, dataSource, fields.properties, option);\n        }\n    }\n    ;\n    typeOfData(items) {\n        let item = { typeof: null, item: null };\n        for (let i = 0; (!isNullOrUndefined(items) && i < items.length); i++) {\n            if (!isNullOrUndefined(items[i])) {\n                let listDataType = typeof (items[i]) === 'string' ||\n                    typeof (items[i]) === 'number' || typeof (items[i]) === 'boolean';\n                let isNullData = listDataType ? isNullOrUndefined(items[i]) :\n                    isNullOrUndefined(getValue((this.fields.value ? this.fields.value : 'value'), items[i]));\n                if (!isNullData) {\n                    return item = { typeof: typeof items[i], item: items[i] };\n                }\n            }\n        }\n        return item;\n    }\n    setFixedHeader() {\n        this.list.parentElement.style.display = 'block';\n        let borderWidth = 0;\n        if (this.list && this.list.parentElement) {\n            borderWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-width'), 10);\n        }\n        let liWidth = this.liCollections[0].offsetWidth - borderWidth;\n        this.fixedHeaderElement.style.width = liWidth.toString() + 'px';\n        setStyleAttribute(this.fixedHeaderElement, { zIndex: 10 });\n        let firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group);\n        this.fixedHeaderElement.innerHTML = firstLi.innerHTML;\n    }\n    getSortedDataSource(dataSource) {\n        if (dataSource && this.sortOrder !== 'None') {\n            let textField = this.fields.text ? this.fields.text : 'text';\n            dataSource = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, textField));\n        }\n        return dataSource;\n    }\n    /**\n     * Return the index of item which matched with given value in data source\n     */\n    getIndexByValue(value) {\n        let index;\n        let listItems = this.getItems();\n        for (let i = 0; i < listItems.length; i++) {\n            if (!isNullOrUndefined(value) && listItems[i].getAttribute('data-value') === value.toString()) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n    ;\n    /**\n     * To dispatch the event manually\n     */\n    dispatchEvent(element, type) {\n        let evt = document.createEvent('HTMLEvents');\n        evt.initEvent(type, false, true);\n        element.dispatchEvent(evt);\n    }\n    /**\n     * To set the current fields\n     */\n    setFields() {\n        if (this.fields.value && !this.fields.text) {\n            this.fields.text = this.fields.value;\n        }\n        else if (!this.fields.value && this.fields.text) {\n            this.fields.value = this.fields.text;\n        }\n        else if (!this.fields.value && !this.fields.text) {\n            this.fields.value = this.fields.text = 'text';\n        }\n    }\n    /**\n     * reset the items list.\n     */\n    resetList(dataSource, fields, query) {\n        if (this.list) {\n            if ((this.element.tagName === 'SELECT' && this.element.options.length > 0)\n                || (this.element.tagName === 'UL' && this.element.childNodes.length > 0)) {\n                let data = dataSource instanceof Array ? (dataSource.length > 0)\n                    : !isNullOrUndefined(dataSource);\n                if (!data && this.selectData && this.selectData.length > 0) {\n                    dataSource = this.selectData;\n                }\n            }\n            this.setListData(dataSource, fields, query);\n        }\n    }\n    updateSelectElementData(isFiltering) {\n        if (isFiltering && isNullOrUndefined(this.selectData) && this.listData && this.listData.length > 0) {\n            this.selectData = this.listData;\n        }\n    }\n    updateSelection() {\n        // This is for after added the item, need to update the selected index values.\n    }\n    renderList() {\n        // This is for render the list items.\n        this.render();\n    }\n    updateDataSource(props) {\n        this.resetList(this.dataSource);\n    }\n    setUpdateInitial(props, newProp) {\n        this.isDataFetched = false;\n        let updateData = {};\n        for (let j = 0; props.length > j; j++) {\n            if (newProp[props[j]] && props[j] === 'fields') {\n                this.setFields();\n            }\n            else if (newProp[props[j]]) {\n                updateData[props[j]] = newProp[props[j]];\n            }\n        }\n        if (Object.keys(updateData).length > 0) {\n            if (Object.keys(updateData).indexOf('dataSource') === -1) {\n                updateData.dataSource = this.dataSource;\n            }\n            this.updateDataSource(updateData);\n        }\n    }\n    /**\n     * When property value changes happened, then onPropertyChanged method will execute the respective changes in this component.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (this.getModuleName() === 'dropdownbase') {\n            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        }\n        this.setUpdateInitial(['sortOrder', 'itemTemplate'], newProp);\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'query':\n                case 'sortOrder':\n                case 'dataSource':\n                case 'itemTemplate':\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'enabled':\n                    this.setEnabled();\n                    break;\n                case 'groupTemplate':\n                    this.renderGroupTemplate(this.list);\n                    if (this.ulElement && this.fixedHeaderElement) {\n                        let firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group);\n                        this.fixedHeaderElement.innerHTML = firstLi.innerHTML;\n                    }\n                    break;\n                case 'locale':\n                    if (this.list && (!isNullOrUndefined(this.liCollections) && this.liCollections.length === 0)) {\n                        this.l10nUpdate();\n                    }\n                    break;\n                case 'zIndex':\n                    this.setProperties({ zIndex: newProp.zIndex }, true);\n                    this.setZIndex();\n                    break;\n            }\n        }\n    }\n    ;\n    /**\n     * Build and render the component\n     * @private\n     */\n    render(isEmptyData) {\n        this.list = this.createElement('div', { className: dropDownBaseClasses.content, attrs: { 'tabindex': '0' } });\n        this.list.classList.add(dropDownBaseClasses.root);\n        this.setFields();\n        let rippleModel = { duration: 300, selector: '.' + dropDownBaseClasses.li };\n        this.rippleFun = rippleEffect(this.list, rippleModel);\n        let group = this.element.querySelector('select>optgroup');\n        if ((this.fields.groupBy || !isNullOrUndefined(group)) && !this.isGroupChecking) {\n            EventHandler.add(this.list, 'scroll', this.setFloatingHeader, this);\n        }\n        if (this.getModuleName() === 'dropdownbase') {\n            if (this.element.getAttribute('tabindex')) {\n                this.list.setAttribute('tabindex', this.element.getAttribute('tabindex'));\n            }\n            removeClass([this.element], dropDownBaseClasses.root);\n            this.element.style.display = 'none';\n            let wrapperElement = this.createElement('div');\n            this.element.parentElement.insertBefore(wrapperElement, this.element);\n            wrapperElement.appendChild(this.element);\n            wrapperElement.appendChild(this.list);\n        }\n        this.setEnableRtl();\n        this.setEnabled();\n        if (!isEmptyData) {\n            this.initialize();\n        }\n    }\n    ;\n    /**\n     * Return the module name of this component.\n     * @private\n     */\n    getModuleName() {\n        return 'dropdownbase';\n    }\n    ;\n    /**\n     * Gets all the list items bound on this component.\n     * @returns Element[].\n     */\n    getItems() {\n        return this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li);\n    }\n    ;\n    /**\n     * Adds a new item to the popup list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n     * @return {void}.\n     * @deprecated\n     */\n    addItem(items, itemIndex) {\n        if (!this.list || (this.list.textContent === this.noRecordsTemplate && this.getModuleName() !== 'listbox')) {\n            this.renderList();\n        }\n        if (this.sortOrder !== 'None' && isNullOrUndefined(itemIndex)) {\n            let newList = [].slice.call(this.listData);\n            newList.push(items);\n            newList = this.getSortedDataSource(newList);\n            if (this.fields.groupBy) {\n                newList = ListBase.groupDataSource(newList, this.fields.properties, this.sortOrder);\n                itemIndex = newList.indexOf(items);\n            }\n            else {\n                itemIndex = newList.indexOf(items);\n            }\n        }\n        this.DropDownBaseresetBlazorTemplates(true, false, false, false);\n        let itemsCount = this.getItems().length;\n        let selectedItemValue = this.list.querySelector('.' + dropDownBaseClasses.selected);\n        items = (items instanceof Array ? items : [items]);\n        let index;\n        index = (isNullOrUndefined(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1) ? itemsCount : itemIndex;\n        let fields = this.fields;\n        if (items && fields.groupBy) {\n            items = ListBase.groupDataSource(items, fields.properties);\n        }\n        let liCollections = [];\n        for (let i = 0; i < items.length; i++) {\n            let item = items[i];\n            let isHeader = item.isHeader;\n            let li = this.createElement('li', { className: isHeader ? dropDownBaseClasses.group : dropDownBaseClasses.li, id: 'option-add-' + i });\n            let itemText = item instanceof Object ? getValue(fields.text, item) : item;\n            if (isHeader) {\n                li.innerText = itemText;\n            }\n            if (this.itemTemplate && !isHeader) {\n                let compiledString = compile(this.itemTemplate);\n                append(compiledString(item, null, null, this.itemTemplateId, this.isStringTemplate), li);\n                this.DropDownBaseupdateBlazorTemplates(true, false, false, false);\n            }\n            else if (!isHeader) {\n                li.appendChild(document.createTextNode(itemText));\n            }\n            li.setAttribute('data-value', item instanceof Object ? getValue(fields.value, item) : item);\n            li.setAttribute('role', 'option');\n            this.notify('addItem', { module: 'CheckBoxSelection', item: li });\n            liCollections.push(li);\n            this.listData.push(item);\n            this.updateActionCompleteData(li, item, index);\n            //Listbox event\n            this.trigger('beforeItemRender', { element: li, item: item });\n        }\n        if (itemsCount === 0 && isNullOrUndefined(this.list.querySelector('ul'))) {\n            this.list.innerHTML = '';\n            this.list.classList.remove(dropDownBaseClasses.noData);\n            this.list.appendChild(this.ulElement);\n            this.liCollections = liCollections;\n            append(liCollections, this.ulElement);\n            this.updateAddItemList(this.list, itemsCount);\n        }\n        else {\n            if (this.getModuleName() === 'listbox' && itemsCount === 0) {\n                this.ulElement.innerHTML = '';\n            }\n            let attr = [];\n            for (let i = 0; i < items.length; i++) {\n                let listGroupItem = this.ulElement.querySelectorAll('.e-list-group-item');\n                for (let j = 0; j < listGroupItem.length; j++) {\n                    attr[j] = listGroupItem[j].innerText;\n                }\n                if (attr.indexOf(liCollections[i].innerText) > -1 && fields.groupBy) {\n                    for (let j = 0; j < listGroupItem.length; j++) {\n                        if (attr[j] === liCollections[i].innerText) {\n                            if (this.sortOrder === 'None') {\n                                this.ulElement.insertBefore(liCollections[i + 1], listGroupItem[j + 1]);\n                            }\n                            else {\n                                this.ulElement.insertBefore(liCollections[i + 1], this.ulElement.childNodes[itemIndex]);\n                            }\n                            i = i + 1;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    if (this.liCollections[index]) {\n                        this.liCollections[index].parentNode.insertBefore(liCollections[i], this.liCollections[index]);\n                    }\n                    else {\n                        this.ulElement.appendChild(liCollections[i]);\n                    }\n                }\n                let tempLi = [].slice.call(this.liCollections);\n                tempLi.splice(index, 0, liCollections[i]);\n                this.liCollections = tempLi;\n                index += 1;\n                if (this.getModuleName() === 'multiselect') {\n                    this.updateDataList();\n                }\n            }\n        }\n        if (selectedItemValue || itemIndex === 0) {\n            this.updateSelection();\n        }\n    }\n    validationAttribute(target, hidden) {\n        let name = target.getAttribute('name') ? target.getAttribute('name') : target.getAttribute('id');\n        hidden.setAttribute('name', name);\n        target.removeAttribute('name');\n        let attributes$$1 = ['required', 'aria-required', 'form'];\n        for (let i = 0; i < attributes$$1.length; i++) {\n            if (!target.getAttribute(attributes$$1[i])) {\n                continue;\n            }\n            let attr = target.getAttribute(attributes$$1[i]);\n            hidden.setAttribute(attributes$$1[i], attr);\n            target.removeAttribute(attributes$$1[i]);\n        }\n    }\n    setZIndex() {\n        // this is for component wise\n    }\n    updateActionCompleteData(li, item, index) {\n        // this is for ComboBox custom value\n    }\n    updateAddItemList(list, itemCount) {\n        // this is for multiselect add item\n    }\n    updateDataList() {\n        // this is for multiselect update list items\n    }\n    /**\n     * Gets the data Object that matches the given value.\n     * @param { string | number } value - Specifies the value of the list item.\n     * @returns Object.\n     * @blazorType object\n     */\n    getDataByValue(value) {\n        if (!isNullOrUndefined(this.listData)) {\n            let type = this.typeOfData(this.listData).typeof;\n            if (type === 'string' || type === 'number' || type === 'boolean') {\n                for (let item of this.listData) {\n                    if (!isNullOrUndefined(item) && item === value) {\n                        return item;\n                    }\n                }\n            }\n            else {\n                for (let item of this.listData) {\n                    if (!isNullOrUndefined(item) && getValue((this.fields.value ? this.fields.value : 'value'), item) === value) {\n                        return item;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n     * @method destroy\n     * @return {void}.\n     */\n    destroy() {\n        if (document.body.contains(this.list)) {\n            EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n            if (!isNullOrUndefined(this.rippleFun)) {\n                this.rippleFun();\n            }\n            detach(this.list);\n        }\n        super.destroy();\n    }\n    ;\n};\n__decorate([\n    Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings)\n], DropDownBase.prototype, \"fields\", void 0);\n__decorate([\n    Property(false)\n], DropDownBase.prototype, \"enablePersistence\", void 0);\n__decorate([\n    Property(null)\n], DropDownBase.prototype, \"itemTemplate\", void 0);\n__decorate([\n    Property(null)\n], DropDownBase.prototype, \"groupTemplate\", void 0);\n__decorate([\n    Property('No records found')\n], DropDownBase.prototype, \"noRecordsTemplate\", void 0);\n__decorate([\n    Property('Request failed')\n], DropDownBase.prototype, \"actionFailureTemplate\", void 0);\n__decorate([\n    Property('None')\n], DropDownBase.prototype, \"sortOrder\", void 0);\n__decorate([\n    Property(true)\n], DropDownBase.prototype, \"enabled\", void 0);\n__decorate([\n    Property([])\n], DropDownBase.prototype, \"dataSource\", void 0);\n__decorate([\n    Property(null)\n], DropDownBase.prototype, \"query\", void 0);\n__decorate([\n    Property('StartsWith')\n], DropDownBase.prototype, \"filterType\", void 0);\n__decorate([\n    Property(true)\n], DropDownBase.prototype, \"ignoreCase\", void 0);\n__decorate([\n    Property(1000)\n], DropDownBase.prototype, \"zIndex\", void 0);\n__decorate([\n    Property(false)\n], DropDownBase.prototype, \"ignoreAccent\", void 0);\n__decorate([\n    Property()\n], DropDownBase.prototype, \"locale\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"actionBegin\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"actionComplete\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"actionFailure\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"select\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"dataBound\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"created\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"destroyed\", void 0);\nDropDownBase = __decorate([\n    NotifyPropertyChanges\n], DropDownBase);\n\n/**\n * export all modules from current location\n */\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\n/* tslint:disable */\n// don't use space in classnames \nconst dropDownListClasses = {\n    root: 'e-dropdownlist',\n    hover: dropDownBaseClasses.hover,\n    selected: dropDownBaseClasses.selected,\n    rtl: dropDownBaseClasses.rtl,\n    li: dropDownBaseClasses.li,\n    disable: dropDownBaseClasses.disabled,\n    base: dropDownBaseClasses.root,\n    focus: dropDownBaseClasses.focus,\n    input: 'e-input-group',\n    inputFocus: 'e-input-focus',\n    icon: 'e-input-group-icon e-ddl-icon',\n    iconAnimation: 'e-icon-anim',\n    value: 'e-input-value',\n    device: 'e-ddl-device',\n    backIcon: 'e-input-group-icon e-back-icon e-icons',\n    filterBarClearIcon: 'e-input-group-icon e-clear-icon e-icons',\n    filterInput: 'e-input-filter',\n    filterParent: 'e-filter-parent',\n    mobileFilter: 'e-ddl-device-filter',\n    footer: 'e-ddl-footer',\n    header: 'e-ddl-header',\n    clearIcon: 'e-clear-icon',\n    clearIconHide: 'e-clear-icon-hide',\n    popupFullScreen: 'e-popup-full-page',\n    disableIcon: 'e-ddl-disable-icon',\n    hiddenElement: 'e-ddl-hidden'\n};\nlet inputObject = {\n    container: null,\n    buttons: []\n};\n/**\n * The DropDownList component contains a list of predefined values from which you can\n * choose a single value.\n * ```html\n * <input type=\"text\" tabindex=\"1\" id=\"list\"> </input>\n * ```\n * ```typescript\n *   let dropDownListObj:DropDownList = new DropDownList();\n *   dropDownListObj.appendTo(\"#list\");\n * ```\n */\nlet DropDownList = class DropDownList extends DropDownBase {\n    /**\n     * * Constructor for creating the DropDownList component.\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.previousValue = null;\n    }\n    ;\n    /**\n     * Initialize the event handler.\n     * @private\n     */\n    preRender() {\n        let checkBlazor = isBlazor() && this.isServerRendered;\n        this.isServerBlazor = (checkBlazor) ? true : false;\n        if (this.isServerBlazor) {\n            this.initializeData();\n        }\n        else {\n            this.element.style.opacity = '0';\n            this.initializeData();\n            super.preRender();\n        }\n        this.activeIndex = this.index;\n        this.queryString = '';\n    }\n    initializeData() {\n        this.isPopupOpen = false;\n        this.isDocumentClick = false;\n        this.isInteracted = false;\n        this.isFilterFocus = false;\n        this.beforePopupOpen = false;\n        this.initial = true;\n        this.initRemoteRender = false;\n        this.isNotSearchList = false;\n        this.isTyped = false;\n        this.isSelected = false;\n        this.preventFocus = false;\n        this.preventAutoFill = false;\n        this.isValidKey = false;\n        this.typedString = '';\n        this.isEscapeKey = false;\n        this.isPreventBlur = false;\n        this.isTabKey = false;\n        this.actionCompleteData = { isUpdated: false };\n        this.prevSelectPoints = {};\n        this.isSelectCustom = false;\n        this.isDropDownClick = false;\n        this.preventAltUp = false;\n        this.isCustomFilter = false;\n        this.isSecondClick = false;\n        this.keyConfigure = {\n            tab: 'tab',\n            enter: '13',\n            escape: '27',\n            end: '35',\n            home: '36',\n            down: '40',\n            up: '38',\n            pageUp: '33',\n            pageDown: '34',\n            open: 'alt+40',\n            close: 'shift+tab',\n            hide: 'alt+38',\n            space: '32'\n        };\n    }\n    setZIndex() {\n        if (this.popupObj) {\n            this.popupObj.setProperties({ 'zIndex': this.zIndex });\n        }\n    }\n    renderList(isEmptyData) {\n        if (!this.isServerBlazor) {\n            super.render(isEmptyData);\n            this.wireListEvents();\n        }\n        else {\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('OnServerRenderList', this.beforePopupOpen, false);\n        }\n    }\n    floatLabelChange() {\n        if (this.getModuleName() === 'dropdownlist' && this.floatLabelType === 'Auto') {\n            let floatElement = this.inputWrapper.container.querySelector('.e-float-text');\n            if (this.inputElement.value !== '' || this.isInteracted) {\n                classList(floatElement, ['e-label-top'], ['e-label-bottom']);\n            }\n            else {\n                classList(floatElement, ['e-label-bottom'], ['e-label-top']);\n            }\n        }\n    }\n    resetHandler(e) {\n        e.preventDefault();\n        this.clearAll(e);\n    }\n    resetFocusElement() {\n        this.removeHover();\n        this.removeSelection();\n        this.removeFocus();\n        this.list.scrollTop = 0;\n        if (this.getModuleName() !== 'autocomplete' && !isNullOrUndefined(this.ulElement)) {\n            let li = this.ulElement.querySelector('.' + dropDownListClasses.li);\n            if (li) {\n                li.classList.add(dropDownListClasses.focus);\n            }\n        }\n    }\n    clearAll(e, properties) {\n        if (isNullOrUndefined(properties) || (!isNullOrUndefined(properties) &&\n            (isNullOrUndefined(properties.dataSource) ||\n                (!(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)))) {\n            this.isActive = true;\n            this.resetSelection(properties);\n        }\n        let dataItem = this.getItemData();\n        if (this.previousValue === dataItem.value) {\n            return;\n        }\n        this.onChangeEvent(e);\n    }\n    resetSelection(properties) {\n        if (this.list) {\n            if ((!isNullOrUndefined(properties) &&\n                (isNullOrUndefined(properties.dataSource) ||\n                    (!(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)))) {\n                this.selectedLI = null;\n                this.actionCompleteData.isUpdated = false;\n                this.actionCompleteData.ulElement = null;\n                this.actionCompleteData.list = null;\n                this.resetList(properties.dataSource);\n            }\n            else {\n                if (this.allowFiltering && this.getModuleName() !== 'autocomplete'\n                    && !isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list)) {\n                    let actionList = this.actionCompleteData.ulElement.querySelector('li');\n                    let ulElement = this.ulElement && this.ulElement.querySelector('li');\n                    if (this.element.tagName === 'EJS-COMBOBOX' && actionList && ulElement &&\n                        actionList.childElementCount > 0 && ulElement.childElementCount > 0 &&\n                        actionList.textContent !== ulElement.textContent && this.itemTemplate) {\n                        this.cloneElements();\n                    }\n                    this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(true), this.actionCompleteData.list);\n                }\n                this.resetFocusElement();\n            }\n        }\n        if (!this.isServerBlazor) {\n            this.hiddenElement.innerHTML = '';\n        }\n        this.inputElement.value = '';\n        this.value = null;\n        this.itemData = null;\n        this.text = null;\n        this.index = null;\n        this.activeIndex = null;\n        this.item = null;\n        this.queryString = '';\n        if (this.valueTempElement) {\n            detach(this.valueTempElement);\n            this.inputElement.style.display = 'block';\n            this.valueTempElement = null;\n        }\n        this.setSelection(null, null);\n        this.isSelectCustom = false;\n        this.updateIconState();\n        this.cloneElements();\n    }\n    setHTMLAttributes() {\n        if (Object.keys(this.htmlAttributes).length) {\n            for (let htmlAttr of Object.keys(this.htmlAttributes)) {\n                if (htmlAttr === 'class') {\n                    let updatedClassValue = (this.htmlAttributes[htmlAttr].replace(/\\s+/g, ' ')).trim();\n                    if (updatedClassValue !== '') {\n                        addClass([this.inputWrapper.container], updatedClassValue.split(' '));\n                    }\n                }\n                else if (htmlAttr === 'disabled' && this.htmlAttributes[htmlAttr] === 'disabled') {\n                    this.enabled = false;\n                    this.setEnable();\n                }\n                else if (htmlAttr === 'readonly' && !isNullOrUndefined(this.htmlAttributes[htmlAttr])) {\n                    this.readonly = true;\n                    this.dataBind();\n                }\n                else if (htmlAttr === 'style') {\n                    this.inputWrapper.container.setAttribute('style', this.htmlAttributes[htmlAttr]);\n                }\n                else {\n                    let defaultAttr = ['title', 'id', 'placeholder', 'aria-placeholder',\n                        'role', 'autocorrect', 'autocomplete', 'autocapitalize', 'spellcheck', 'minlength', 'maxlength'];\n                    let validateAttr = ['name', 'required'];\n                    if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {\n                        defaultAttr.push('tabindex');\n                    }\n                    if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {\n                        this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                    }\n                    else if (defaultAttr.indexOf(htmlAttr) > -1) {\n                        htmlAttr === 'placeholder' ? Input.setPlaceholder(this.htmlAttributes[htmlAttr], this.inputElement) :\n                            this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                    }\n                    else {\n                        this.inputWrapper.container.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                    }\n                }\n            }\n        }\n        if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {\n            this.inputWrapper.container.removeAttribute('tabindex');\n        }\n    }\n    getAriaAttributes() {\n        return {\n            'aria-disabled': 'false',\n            'aria-owns': this.element.id + '_options',\n            'role': 'listbox',\n            'aria-haspopup': 'true',\n            'aria-expanded': 'false',\n            'aria-activedescendant': 'null',\n            'aria-live': 'polite',\n            'aria-labelledby': this.hiddenElement.id\n        };\n    }\n    setEnableRtl() {\n        Input.setEnableRtl(this.enableRtl, [this.inputElement.parentElement]);\n        if (this.popupObj) {\n            this.popupObj.enableRtl = this.enableRtl;\n            this.popupObj.dataBind();\n        }\n    }\n    setEnable() {\n        Input.setEnabled(this.enabled, this.inputElement);\n        if (this.enabled) {\n            removeClass([this.inputWrapper.container], dropDownListClasses.disable);\n            this.inputElement.setAttribute('aria-disabled', 'false');\n            this.targetElement().setAttribute('tabindex', this.tabIndex);\n        }\n        else {\n            this.hidePopup();\n            addClass([this.inputWrapper.container], dropDownListClasses.disable);\n            this.inputElement.setAttribute('aria-disabled', 'true');\n            this.targetElement().tabIndex = -1;\n        }\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     */\n    getPersistData() {\n        return this.addOnPersist(['value']);\n    }\n    ;\n    getLocaleName() {\n        return 'drop-down-list';\n    }\n    ;\n    preventTabIndex(element) {\n        if (this.getModuleName() === 'dropdownlist') {\n            element.tabIndex = -1;\n        }\n    }\n    targetElement() {\n        return this.inputWrapper.container;\n    }\n    getNgDirective() {\n        return 'EJS-DROPDOWNLIST';\n    }\n    getElementByText(text) {\n        return this.getElementByValue(this.getValueByText(text));\n    }\n    getElementByValue(value) {\n        let item;\n        let listItems = this.getItems();\n        for (let liItem of listItems) {\n            if (this.getFormattedValue(liItem.getAttribute('data-value')) === value) {\n                item = liItem;\n                break;\n            }\n        }\n        return item;\n    }\n    ;\n    initValue() {\n        this.renderList();\n        if (this.dataSource instanceof DataManager) {\n            this.initRemoteRender = true;\n        }\n        else {\n            this.updateValues();\n        }\n    }\n    updateValues() {\n        if (!isNullOrUndefined(this.value)) {\n            this.setSelection(this.getElementByValue(this.value), null);\n        }\n        else if (this.text && isNullOrUndefined(this.value)) {\n            let element = this.getElementByText(this.text);\n            if (isNullOrUndefined(element)) {\n                this.setProperties({ text: null });\n                return;\n            }\n            else {\n                this.setSelection(element, null);\n            }\n        }\n        else {\n            this.setSelection(this.liCollections[this.activeIndex], null);\n        }\n        this.setHiddenValue();\n        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n    onBlur(e) {\n        if (!this.enabled) {\n            return;\n        }\n        let target = e.relatedTarget;\n        let currentTarget = e.target;\n        let isPreventBlur = this.isPreventBlur;\n        this.isPreventBlur = false;\n        //IE 11 - issue\n        if (isPreventBlur && !this.isDocumentClick && this.isPopupOpen && (!isNullOrUndefined(currentTarget) ||\n            !this.isFilterLayout() && isNullOrUndefined(target))) {\n            if (this.getModuleName() === 'dropdownlist' && this.allowFiltering && this.isPopupOpen) {\n                this.filterInput.focus();\n            }\n            else {\n                this.targetElement().focus();\n            }\n            return;\n        }\n        if (this.isDocumentClick || (!isNullOrUndefined(this.popupObj)\n            && document.body.contains(this.popupObj.element) &&\n            this.popupObj.element.classList.contains(dropDownListClasses.mobileFilter))) {\n            if (!this.beforePopupOpen) {\n                this.isDocumentClick = false;\n            }\n            return;\n        }\n        if (((this.getModuleName() === 'dropdownlist' && !this.isFilterFocus && target !== this.inputElement)\n            && (document.activeElement !== target || (document.activeElement === target &&\n                currentTarget.classList.contains(dropDownListClasses.inputFocus)))) ||\n            (isNullOrUndefined(target) && this.getModuleName() === 'dropdownlist' && this.allowFiltering &&\n                currentTarget !== this.inputWrapper.container) || this.getModuleName() !== 'dropdownlist' &&\n            !this.inputWrapper.container.contains(target) || this.isTabKey) {\n            this.isDocumentClick = this.isPopupOpen ? true : false;\n            this.focusOutAction(e);\n            this.isTabKey = false;\n        }\n        if (this.isRequested && !this.isPopupOpen && !this.isPreventBlur) {\n            this.isActive = false;\n            this.beforePopupOpen = false;\n        }\n    }\n    focusOutAction(e) {\n        this.isInteracted = false;\n        this.focusOut(e);\n        this.onFocusOut();\n    }\n    onFocusOut() {\n        if (!this.enabled) {\n            return;\n        }\n        if (this.isSelected) {\n            this.isSelectCustom = false;\n            this.onChangeEvent(null);\n        }\n        this.floatLabelChange();\n        this.dispatchEvent(this.hiddenElement, 'change');\n        if (this.getModuleName() === 'dropdownlist' && this.element.tagName !== 'INPUT') {\n            this.dispatchEvent(this.inputElement, 'blur');\n        }\n        if (this.inputWrapper.clearButton) {\n            addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n        }\n        this.trigger('blur');\n    }\n    onFocus(e) {\n        if (!this.isInteracted) {\n            this.isInteracted = true;\n            let args = { isInteracted: e ? true : false, event: e };\n            this.trigger('focus', args);\n        }\n        this.updateIconState();\n    }\n    resetValueHandler(e) {\n        let formElement = closest(this.inputElement, 'form');\n        if (formElement && e.target === formElement) {\n            let val = (this.element.tagName === this.getNgDirective()) ? null : this.inputElement.getAttribute('value');\n            this.text = val;\n        }\n    }\n    wireEvent() {\n        EventHandler.add(this.inputWrapper.container, 'mousedown', this.dropDownClick, this);\n        EventHandler.add(this.inputWrapper.container, 'focus', this.focusIn, this);\n        EventHandler.add(this.inputWrapper.container, 'keypress', this.onSearch, this);\n        this.bindCommonEvent();\n    }\n    bindCommonEvent() {\n        EventHandler.add(this.targetElement(), 'blur', this.onBlur, this);\n        let formElement = closest(this.inputElement, 'form');\n        if (formElement) {\n            EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n        }\n        if (!Browser.isDevice) {\n            this.keyboardModule = new KeyboardEvents(this.targetElement(), {\n                keyAction: this.keyActionHandler.bind(this), keyConfigs: this.keyConfigure, eventName: 'keydown'\n            });\n        }\n        else {\n            this.keyboardModule = new KeyboardEvents(this.targetElement(), {\n                keyAction: this.mobileKeyActionHandler.bind(this), keyConfigs: this.keyConfigure, eventName: 'keydown'\n            });\n        }\n        this.bindClearEvent();\n    }\n    bindClearEvent() {\n        if (this.showClearButton) {\n            EventHandler.add(this.inputWrapper.clearButton, 'mousedown', this.resetHandler, this);\n        }\n    }\n    unBindCommonEvent() {\n        EventHandler.remove(this.targetElement(), 'blur', this.onBlur);\n        let formElement = closest(this.inputElement, 'form');\n        if (formElement) {\n            EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n        }\n        if (!Browser.isDevice) {\n            this.keyboardModule.destroy();\n        }\n        if (this.showClearButton) {\n            EventHandler.remove(this.inputWrapper.clearButton, 'mousedown', this.resetHandler);\n        }\n    }\n    updateIconState() {\n        if (this.showClearButton) {\n            if (this.inputElement.value !== '' && !this.readonly) {\n                removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n            }\n            else {\n                addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n            }\n        }\n    }\n    /**\n     * Event binding for list\n     */\n    wireListEvents() {\n        EventHandler.add(this.list, 'click', this.onMouseClick, this);\n        EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);\n        EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);\n    }\n    ;\n    onSearch(e) {\n        if (e.charCode !== 32 && e.charCode !== 13) {\n            if (this.list === undefined) {\n                if (!this.isServerBlazor) {\n                    this.renderList();\n                }\n                else {\n                    this.isServerIncrementalSearch = true;\n                    // tslint:disable-next-line\n                    this.interopAdaptor.invokeMethodAsync('OnServerRenderList', true, false);\n                }\n            }\n            this.searchKeyEvent = e;\n            this.onServerIncrementalSearch(e);\n        }\n    }\n    onServerIncrementalSearch(e) {\n        if (!this.isRequested && !isNullOrUndefined(this.list) &&\n            !isNullOrUndefined(this.list.querySelector('li')) && this.enabled && !this.readonly) {\n            this.incrementalSearch(e);\n        }\n    }\n    onMouseClick(e) {\n        let target = e.target;\n        let classList$$1 = target.classList;\n        let li = closest(target, '.' + dropDownBaseClasses.li);\n        if (!this.isValidLI(li)) {\n            return;\n        }\n        this.setSelection(li, e);\n        if (Browser.isDevice && this.isFilterLayout()) {\n            history.back();\n        }\n        else {\n            let delay = 100;\n            this.closePopup(delay);\n        }\n    }\n    onMouseOver(e) {\n        let currentLi = closest(e.target, '.' + dropDownBaseClasses.li);\n        this.setHover(currentLi);\n    }\n    ;\n    setHover(li) {\n        if (this.enabled && this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {\n            this.removeHover();\n            addClass([li], dropDownBaseClasses.hover);\n        }\n    }\n    ;\n    onMouseLeave(e) {\n        this.removeHover();\n    }\n    ;\n    removeHover() {\n        if (this.list) {\n            let hoveredItem = (this.isServerBlazor && this.popupObj && this.popupObj.element) ?\n                this.popupObj.element.querySelectorAll('.' + dropDownBaseClasses.hover) :\n                this.list.querySelectorAll('.' + dropDownBaseClasses.hover);\n            if (hoveredItem && hoveredItem.length) {\n                removeClass(hoveredItem, dropDownBaseClasses.hover);\n            }\n        }\n    }\n    ;\n    isValidLI(li) {\n        return (li && li.hasAttribute('role') && li.getAttribute('role') === 'option');\n    }\n    ;\n    incrementalSearch(e) {\n        if (this.liCollections.length > 0) {\n            let li = incrementalSearch(e.charCode, this.liCollections, this.activeIndex, true, this.element.id, this.isServerBlazor);\n            if (!isNullOrUndefined(li)) {\n                this.setSelection(li, e);\n                this.setScrollPosition();\n            }\n        }\n    }\n    ;\n    /**\n     * Hides the spinner loader.\n     * @returns void.\n     */\n    hideSpinner() {\n        if (!isNullOrUndefined(this.spinnerElement)) {\n            hideSpinner(this.spinnerElement);\n            removeClass([this.spinnerElement], dropDownListClasses.disableIcon);\n            this.spinnerElement.innerHTML = '';\n            this.spinnerElement = null;\n        }\n    }\n    /**\n     * Shows the spinner loader.\n     * @returns void.\n     */\n    showSpinner() {\n        if (isNullOrUndefined(this.spinnerElement)) {\n            this.spinnerElement = Browser.isDevice && !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[1] ||\n                !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[0] || this.inputWrapper.buttons[0];\n            addClass([this.spinnerElement], dropDownListClasses.disableIcon);\n            createSpinner({\n                target: this.spinnerElement,\n                width: Browser.isDevice ? '16px' : '14px'\n            }, this.createElement);\n            showSpinner(this.spinnerElement);\n        }\n    }\n    keyActionHandler(e) {\n        if (!this.enabled) {\n            return;\n        }\n        let preventAction = e.action === 'pageUp' || e.action === 'pageDown';\n        let preventHomeEnd = this.getModuleName() !== 'dropdownlist' && (e.action === 'home' || e.action === 'end');\n        this.isEscapeKey = e.action === 'escape';\n        this.isTabKey = !this.isPopupOpen && e.action === 'tab';\n        let isNavAction = e.action === 'down' || e.action === 'up' || e.action === 'home' || e.action === 'end';\n        let isNavigation = (e.action === 'down' || e.action === 'up' || e.action === 'pageUp' || e.action === 'pageDown'\n            || e.action === 'home' || e.action === 'end');\n        if ((this.isEditTextBox() || preventAction || preventHomeEnd) && !this.isPopupOpen) {\n            return;\n        }\n        if (!this.readonly) {\n            let isTabAction = e.action === 'tab' || e.action === 'close';\n            if (this.list === undefined && !this.isRequested && !isTabAction && e.action !== 'escape') {\n                this.searchKeyEvent = e;\n                this.renderList();\n            }\n            if (!(this.isServerBlazor && (e.action === 'open' || e.action === 'space')) && isNullOrUndefined(this.list) ||\n                (!isNullOrUndefined(this.liCollections) && isNavigation && this.liCollections.length === 0) || this.isRequested) {\n                if (!(this.isServerBlazor && isNavAction)) {\n                    return;\n                }\n            }\n            if ((isTabAction && this.getModuleName() !== 'autocomplete') && this.isPopupOpen\n                || e.action === 'escape') {\n                e.preventDefault();\n            }\n            this.isSelected = e.action === 'escape' ? false : this.isSelected;\n            this.isTyped = (isNavigation || e.action === 'escape') ? false : this.isTyped;\n            switch (e.action) {\n                case 'down':\n                case 'up':\n                    this.updateUpDownAction(e);\n                    break;\n                case 'pageUp':\n                    this.pageUpSelection(this.activeIndex - this.getPageCount(), e);\n                    e.preventDefault();\n                    break;\n                case 'pageDown':\n                    this.pageDownSelection(this.activeIndex + this.getPageCount(), e);\n                    e.preventDefault();\n                    break;\n                case 'home':\n                    this.updateHomeEndAction(e);\n                    break;\n                case 'end':\n                    this.updateHomeEndAction(e);\n                    break;\n                case 'space':\n                    if (this.getModuleName() === 'dropdownlist') {\n                        if (!this.beforePopupOpen) {\n                            this.showPopup();\n                        }\n                    }\n                    break;\n                case 'open':\n                    this.showPopup();\n                    break;\n                case 'hide':\n                    this.preventAltUp = this.isPopupOpen;\n                    this.hidePopup(e);\n                    this.focusDropDown(e);\n                    break;\n                case 'enter':\n                    this.selectCurrentItem(e);\n                    break;\n                case 'tab':\n                    this.selectCurrentValueOnTab(e);\n                    break;\n                case 'escape':\n                case 'close':\n                    if (this.isPopupOpen) {\n                        this.hidePopup(e);\n                        this.focusDropDown(e);\n                    }\n                    break;\n            }\n        }\n    }\n    updateUpDownAction(e) {\n        if (this.isServerBlazor && isNullOrUndefined(this.list)) {\n            this.isServerNavigation = true;\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('OnServerRenderList', true, false);\n        }\n        else {\n            this.isServerNavigation = false;\n            let focusEle = this.list.querySelector('.' + dropDownListClasses.focus);\n            if (this.isSelectFocusItem(focusEle)) {\n                this.setSelection(focusEle, e);\n            }\n            else {\n                let nextItem;\n                let index = e.action === 'down' ? this.activeIndex + 1 : this.activeIndex - 1;\n                let startIndex = 0;\n                if (this.getModuleName() === 'autocomplete') {\n                    startIndex = e.action === 'down' && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;\n                    index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;\n                }\n                nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];\n                if (!isNullOrUndefined(nextItem)) {\n                    this.setSelection(nextItem, e);\n                }\n            }\n            e.preventDefault();\n        }\n    }\n    updateHomeEndAction(e) {\n        if (this.getModuleName() === 'dropdownlist') {\n            if (this.isServerBlazor && isNullOrUndefined(this.list)) {\n                this.isServerNavigation = true;\n                // tslint:disable-next-line\n                this.interopAdaptor.invokeMethodAsync('OnServerRenderList', true, false);\n            }\n            else {\n                this.isServerNavigation = false;\n                let findLi = 0;\n                if (e.action === 'home') {\n                    findLi = 0;\n                }\n                else {\n                    findLi = this.getItems().length - 1;\n                }\n                e.preventDefault();\n                if (this.activeIndex === findLi) {\n                    return;\n                }\n                this.setSelection(this.liCollections[findLi], e);\n            }\n        }\n    }\n    selectCurrentValueOnTab(e) {\n        if (this.getModuleName() === 'autocomplete') {\n            this.selectCurrentItem(e);\n        }\n        else {\n            if (this.isPopupOpen) {\n                this.hidePopup(e);\n                this.focusDropDown(e);\n            }\n        }\n    }\n    mobileKeyActionHandler(e) {\n        if (!this.enabled) {\n            return;\n        }\n        if ((this.isEditTextBox()) && !this.isPopupOpen) {\n            return;\n        }\n        if (!this.readonly) {\n            if (this.list === undefined && !this.isRequested) {\n                this.searchKeyEvent = e;\n                this.renderList();\n            }\n            if (isNullOrUndefined(this.list) || (!isNullOrUndefined(this.liCollections) &&\n                this.liCollections.length === 0) || this.isRequested) {\n                return;\n            }\n            if (e.action === 'enter') {\n                this.selectCurrentItem(e);\n            }\n        }\n    }\n    selectCurrentItem(e) {\n        if (this.isPopupOpen) {\n            let li = this.list.querySelector('.' + dropDownListClasses.focus);\n            if (li) {\n                this.setSelection(li, e);\n                this.isTyped = false;\n            }\n            if (this.isSelected) {\n                this.isSelectCustom = false;\n                this.onChangeEvent(e);\n            }\n            this.hidePopup();\n            this.focusDropDown(e);\n        }\n        else {\n            this.showPopup();\n        }\n    }\n    isSelectFocusItem(element) {\n        return !isNullOrUndefined(element);\n    }\n    getPageCount() {\n        let liHeight = this.list.classList.contains(dropDownBaseClasses.noData) ? null :\n            getComputedStyle(this.getItems()[0], null).getPropertyValue('height');\n        return Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));\n    }\n    pageUpSelection(steps, event) {\n        let previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];\n        this.setSelection(previousItem, event);\n    }\n    ;\n    pageDownSelection(steps, event) {\n        let list = this.getItems();\n        let previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];\n        this.setSelection(previousItem, event);\n    }\n    ;\n    unWireEvent() {\n        EventHandler.remove(this.inputWrapper.container, 'mousedown', this.dropDownClick);\n        EventHandler.remove(this.inputWrapper.container, 'keypress', this.onSearch);\n        EventHandler.remove(this.inputWrapper.container, 'focus', this.focusIn);\n        this.unBindCommonEvent();\n    }\n    /**\n     * Event un binding for list items.\n     */\n    unWireListEvents() {\n        EventHandler.remove(this.list, 'click', this.onMouseClick);\n        EventHandler.remove(this.list, 'mouseover', this.onMouseOver);\n        EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);\n    }\n    ;\n    checkSelector(id) {\n        return '#' + id.replace(/(:|\\.|\\[|\\]|,|=|@|\\\\|\\/|#)/g, '\\\\$1');\n    }\n    onDocumentClick(e) {\n        let target = e.target;\n        if (!(!isNullOrUndefined(this.popupObj) && closest(target, this.checkSelector(this.popupObj.element.id))) &&\n            !this.inputWrapper.container.contains(e.target)) {\n            if (this.inputWrapper.container.classList.contains(dropDownListClasses.inputFocus) || this.isPopupOpen) {\n                this.isDocumentClick = true;\n                let isActive = this.isRequested;\n                this.isInteracted = false;\n                this.hidePopup(e);\n                if (!isActive) {\n                    this.onFocusOut();\n                    this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);\n                }\n            }\n        }\n        else if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput)\n            && !(this.getModuleName() === 'combobox' &&\n                !this.allowFiltering && Browser.isDevice && target === this.inputWrapper.buttons[0])) {\n            this.isPreventBlur = (Browser.isIE || Browser.info.name === 'edge') && (document.activeElement === this.targetElement() ||\n                document.activeElement === this.filterInput);\n            e.preventDefault();\n        }\n    }\n    activeStateChange() {\n        if (this.isDocumentClick) {\n            this.hidePopup();\n            this.onFocusOut();\n            this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);\n        }\n    }\n    focusDropDown(e) {\n        if (!this.initial && this.isFilterLayout()) {\n            this.focusIn(e);\n        }\n    }\n    dropDownClick(e) {\n        if (e.which === 3 || e.button === 2) {\n            return;\n        }\n        if (this.targetElement().classList.contains(dropDownListClasses.disable) || this.inputWrapper.clearButton === e.target) {\n            return;\n        }\n        let target = e.target;\n        if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && this.getModuleName() !== 'combobox') {\n            e.preventDefault();\n        }\n        if (!this.readonly) {\n            if (this.isPopupOpen) {\n                this.hidePopup();\n                if (this.isFilterLayout()) {\n                    this.focusDropDown(e);\n                }\n            }\n            else {\n                this.focusIn(e);\n                this.floatLabelChange();\n                this.queryString = this.inputElement.value.trim() === '' ? null : this.inputElement.value;\n                this.isDropDownClick = true;\n                this.showPopup();\n            }\n            let proxy = this;\n            let duration = (isBlazor()) ? 1000 : (this.element.tagName === this.getNgDirective() && this.itemTemplate) ? 500 : 100;\n            if (!this.isSecondClick) {\n                setTimeout(() => { proxy.cloneElements(); proxy.isSecondClick = true; }, duration);\n            }\n        }\n        else {\n            this.focusIn(e);\n        }\n    }\n    cloneElements() {\n        if (this.list) {\n            let ulElement = this.list.querySelector('ul');\n            if (ulElement) {\n                ulElement = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n                this.actionCompleteData.ulElement = ulElement;\n            }\n        }\n    }\n    updateSelectedItem(li, e, preventSelect, isSelection) {\n        this.removeSelection();\n        li.classList.add(dropDownBaseClasses.selected);\n        this.removeHover();\n        let value = this.getFormattedValue(li.getAttribute('data-value'));\n        let selectedData = this.getDataByValue(value);\n        if (!this.initial && !preventSelect && !isNullOrUndefined(e)) {\n            let items = this.detachChanges(selectedData);\n            this.isSelected = true;\n            let eventArgs = {\n                e: e,\n                item: li,\n                itemData: items,\n                isInteracted: e ? true : false,\n                cancel: false\n            };\n            this.trigger('select', eventArgs, (eventArgs) => {\n                if (eventArgs.cancel) {\n                    li.classList.remove(dropDownBaseClasses.selected);\n                }\n                else {\n                    this.selectEventCallback(li, e, preventSelect, selectedData, value);\n                    if (this.isServerBlazor) {\n                        // tslint:disable-next-line\n                        this.interopAdaptor.invokeMethodAsync('OnServerItemData', this.itemData);\n                    }\n                    if (isSelection) {\n                        this.setSelectOptions(li, e);\n                    }\n                }\n            });\n        }\n        else {\n            this.selectEventCallback(li, e, preventSelect, selectedData, value);\n            if (this.isServerBlazor) {\n                // tslint:disable-next-line\n                this.interopAdaptor.invokeMethodAsync('OnServerItemData', this.itemData);\n            }\n            if (isSelection) {\n                this.setSelectOptions(li, e);\n            }\n        }\n    }\n    selectEventCallback(li, e, preventSelect, selectedData, value) {\n        this.previousItemData = (!isNullOrUndefined(this.itemData)) ? this.itemData : null;\n        this.item = li;\n        this.itemData = selectedData;\n        let focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n        if (focusedItem) {\n            removeClass([focusedItem], dropDownBaseClasses.focus);\n        }\n        li.setAttribute('aria-selected', 'true');\n        this.activeIndex = this.getIndexByValue(value);\n    }\n    activeItem(li) {\n        if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.selected)) {\n            this.removeSelection();\n            li.classList.add(dropDownBaseClasses.selected);\n            this.removeHover();\n            li.setAttribute('aria-selected', 'true');\n        }\n    }\n    setValue(e) {\n        let dataItem = this.getItemData();\n        if (dataItem.value === null) {\n            if (isBlazor() && dataItem.text !== null || dataItem.text !== '') {\n                Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);\n            }\n            else {\n                Input.setValue(null, this.inputElement, this.floatLabelType, this.showClearButton);\n            }\n        }\n        else {\n            Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);\n        }\n        if (this.isServerBlazor) {\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('OnServerValueTemplate', dataItem);\n        }\n        if (this.valueTemplate && this.itemData !== null && !this.isServerBlazor) {\n            this.DropDownBaseresetBlazorTemplates(false, false, false, false, true);\n            this.setValueTemplate();\n        }\n        else if (this.inputElement.previousSibling === this.valueTempElement) {\n            detach(this.valueTempElement);\n            this.inputElement.style.display = 'block';\n        }\n        if (this.previousValue === dataItem.value) {\n            this.isSelected = false;\n            return true;\n        }\n        else {\n            this.isSelected = !this.initial ? true : false;\n            this.isSelectCustom = false;\n            if (this.getModuleName() === 'dropdownlist') {\n                this.updateIconState();\n            }\n            return false;\n        }\n    }\n    setSelection(li, e) {\n        if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || (this.isPopupOpen && this.isSelected\n            && li.classList.contains(dropDownBaseClasses.selected)))) {\n            this.updateSelectedItem(li, e, false, true);\n        }\n        else {\n            this.setSelectOptions(li, e);\n        }\n    }\n    setSelectOptions(li, e) {\n        if (this.list) {\n            this.removeHover();\n        }\n        this.previousSelectedLI = (!isNullOrUndefined(this.selectedLI)) ? this.selectedLI : null;\n        this.selectedLI = li;\n        if (this.setValue(e)) {\n            return;\n        }\n        if (this.isPopupOpen) {\n            attributes(this.targetElement(), { 'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null });\n            if (this.isFilterLayout() && this.filterInput) {\n                attributes(this.filterInput, { 'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null });\n            }\n        }\n        if ((!this.isPopupOpen && !isNullOrUndefined(li)) || (this.isPopupOpen && !isNullOrUndefined(e) &&\n            (e.type !== 'keydown' || e.type === 'keydown' && e.action === 'enter'))) {\n            this.isSelectCustom = false;\n            this.onChangeEvent(e);\n        }\n        if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI) && this.itemData !== null && (!e || e.type !== 'click')) {\n            this.setScrollPosition(e);\n        }\n        if (Browser.info.name !== 'mozilla') {\n            attributes(this.inputElement, { 'aria-label': this.inputElement.value });\n            attributes(this.targetElement(), { 'aria-describedby': this.inputElement.id });\n            this.targetElement().removeAttribute('aria-live');\n        }\n    }\n    dropdownCompiler(dropdownTemplate) {\n        let checkTemplate = false;\n        if (dropdownTemplate) {\n            try {\n                checkTemplate = (document.querySelectorAll(dropdownTemplate).length) ? true : false;\n            }\n            catch (exception) {\n                checkTemplate = false;\n            }\n        }\n        return checkTemplate;\n    }\n    setValueTemplate() {\n        let compiledString;\n        if (!this.valueTempElement) {\n            this.valueTempElement = this.createElement('span', { className: dropDownListClasses.value });\n            this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement);\n            this.inputElement.style.display = 'none';\n        }\n        this.valueTempElement.innerHTML = '';\n        let templateData = (isBlazor()) ? JSON.parse(JSON.stringify(this.itemData)) : this.itemData;\n        let valuecheck = this.dropdownCompiler(this.valueTemplate);\n        if (valuecheck) {\n            compiledString = compile(document.querySelector(this.valueTemplate).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.valueTemplate);\n        }\n        for (let item of compiledString(templateData, null, null, this.valueTemplateId, this.isStringTemplate)) {\n            this.valueTempElement.appendChild(item);\n        }\n        this.DropDownBaseupdateBlazorTemplates(false, false, false, false, true, true, true);\n    }\n    removeSelection() {\n        if (this.list) {\n            let selectedItems = this.list.querySelectorAll('.' + dropDownBaseClasses.selected);\n            if (selectedItems.length) {\n                removeClass(selectedItems, dropDownBaseClasses.selected);\n                selectedItems[0].removeAttribute('aria-selected');\n            }\n        }\n    }\n    ;\n    getItemData() {\n        let fields = this.fields;\n        let dataItem = null;\n        dataItem = this.itemData;\n        let dataValue;\n        let dataText;\n        if (!isNullOrUndefined(dataItem)) {\n            dataValue = getValue(fields.value, dataItem);\n            dataText = getValue(fields.text, dataItem);\n        }\n        let value = (!isNullOrUndefined(dataItem) &&\n            !isUndefined(dataValue) ? dataValue : dataItem);\n        let text = (!isNullOrUndefined(dataItem) &&\n            !isUndefined(dataValue) ? dataText : dataItem);\n        return { value: value, text: text };\n    }\n    /**\n     * To trigger the change event for list.\n     */\n    onChangeEvent(eve) {\n        let dataItem = this.getItemData();\n        let index = this.isSelectCustom ? null : this.activeIndex;\n        this.setProperties({ 'index': index, 'text': dataItem.text, 'value': dataItem.value }, true);\n        this.detachChangeEvent(eve);\n    }\n    ;\n    detachChanges(value) {\n        let items;\n        if (typeof value === 'string' ||\n            typeof value === 'boolean' ||\n            typeof value === 'number') {\n            items = Object.defineProperties({}, {\n                value: {\n                    value: value,\n                    enumerable: true\n                },\n                text: {\n                    value: value,\n                    enumerable: true\n                }\n            });\n        }\n        else {\n            items = value;\n        }\n        return items;\n    }\n    detachChangeEvent(eve) {\n        this.isSelected = false;\n        this.previousValue = this.value;\n        this.activeIndex = this.index;\n        this.typedString = !isNullOrUndefined(this.text) ? this.text : '';\n        if (!this.initial) {\n            let items = this.detachChanges(this.itemData);\n            let preItems;\n            if (typeof this.previousItemData === 'string' ||\n                typeof this.previousItemData === 'boolean' ||\n                typeof this.previousItemData === 'number') {\n                preItems = Object.defineProperties({}, {\n                    value: {\n                        value: this.previousItemData,\n                        enumerable: true\n                    },\n                    text: {\n                        value: this.previousItemData,\n                        enumerable: true\n                    }\n                });\n            }\n            else {\n                preItems = this.previousItemData;\n            }\n            this.setHiddenValue();\n            let eventArgs = {\n                e: eve,\n                item: this.item,\n                itemData: items,\n                previousItem: this.previousSelectedLI,\n                previousItemData: preItems,\n                isInteracted: eve ? true : false,\n                value: this.value,\n                element: this.element\n            };\n            this.trigger('change', eventArgs);\n            if (this.isServerBlazor && this.enablePersistence) {\n                // tslint:disable-next-line\n                this.interopAdaptor.invokeMethodAsync('ServerChange');\n            }\n        }\n        if ((isNullOrUndefined(this.value) || this.value === '') && this.floatLabelType !== 'Always') {\n            removeClass([this.inputWrapper.container], 'e-valid-input');\n        }\n    }\n    setHiddenValue() {\n        if (!isNullOrUndefined(this.value)) {\n            if (this.isServerBlazor && this.hiddenElement.querySelector('option')) {\n                let selectedElement = this.hiddenElement.querySelector('option');\n                selectedElement.textContent = this.text;\n                selectedElement.setAttribute('value', this.value.toString());\n            }\n            else if (!this.isServerBlazor) {\n                this.hiddenElement.innerHTML = '<option selected>' + this.text + '</option>';\n                let selectedElement = this.hiddenElement.querySelector('option');\n                selectedElement.setAttribute('value', this.value.toString());\n            }\n        }\n        else if (!this.isServerBlazor) {\n            this.hiddenElement.innerHTML = '';\n        }\n    }\n    /**\n     * Filter bar implementation\n     */\n    onFilterUp(e) {\n        if (!(e.ctrlKey && e.keyCode === 86) && (this.isValidKey || e.keyCode === 40 || e.keyCode === 38)) {\n            this.isValidKey = false;\n            switch (e.keyCode) {\n                case 38: //up arrow \n                case 40: //down arrow \n                    if (this.getModuleName() === 'autocomplete' && !this.isPopupOpen && !this.preventAltUp && !this.isRequested) {\n                        this.preventAutoFill = true;\n                        this.searchLists(e);\n                    }\n                    else {\n                        this.preventAutoFill = false;\n                    }\n                    this.preventAltUp = false;\n                    e.preventDefault();\n                    break;\n                case 46: //delete\n                case 8: //backspace\n                    this.typedString = this.filterInput.value;\n                    if (!this.isPopupOpen && this.typedString !== '' || this.isPopupOpen && this.queryString.length > 0) {\n                        this.preventAutoFill = true;\n                        this.searchLists(e);\n                    }\n                    else if (this.typedString === '' && this.queryString === '' && this.getModuleName() !== 'autocomplete') {\n                        this.preventAutoFill = true;\n                        this.searchLists(e);\n                    }\n                    else if (this.typedString === '') {\n                        if (this.list) {\n                            this.resetFocusElement();\n                        }\n                        this.activeIndex = null;\n                        if (this.getModuleName() === 'autocomplete') {\n                            this.hidePopup();\n                        }\n                    }\n                    e.preventDefault();\n                    break;\n                default:\n                    this.typedString = this.filterInput.value;\n                    this.preventAutoFill = false;\n                    this.searchLists(e);\n                    break;\n            }\n        }\n        else {\n            this.isValidKey = false;\n        }\n    }\n    onFilterDown(e) {\n        switch (e.keyCode) {\n            case 13: //enter\n                break;\n            case 40: //down arrow\n            case 38: //up arrow \n                this.queryString = this.filterInput.value;\n                e.preventDefault();\n                break;\n            case 9: //tab \n                if (this.isPopupOpen && this.getModuleName() !== 'autocomplete') {\n                    e.preventDefault();\n                }\n                break;\n            default:\n                this.prevSelectPoints = this.getSelectionPoints();\n                this.queryString = this.filterInput.value;\n                break;\n        }\n    }\n    removeFillSelection() {\n        if (this.isInteracted) {\n            let selection = this.getSelectionPoints();\n            this.inputElement.setSelectionRange(selection.end, selection.end);\n        }\n    }\n    getQuery(query) {\n        let filterQuery;\n        if (!this.isCustomFilter && this.allowFiltering && this.filterInput) {\n            filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n            let filterType = this.typedString === '' ? 'contains' : this.filterType;\n            let dataType = this.typeOfData(this.dataSource).typeof;\n            if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n                filterQuery.where('', filterType, this.typedString, this.ignoreCase, this.ignoreAccent);\n            }\n            else {\n                let fields = (this.fields.text) ? this.fields.text : '';\n                filterQuery.where(fields, filterType, this.typedString, this.ignoreCase, this.ignoreAccent);\n            }\n        }\n        else {\n            filterQuery = query ? query : this.query ? this.query : new Query();\n        }\n        return filterQuery;\n    }\n    getSelectionPoints() {\n        let input = this.inputElement;\n        return { start: Math.abs(input.selectionStart), end: Math.abs(input.selectionEnd) };\n    }\n    searchLists(e) {\n        this.isTyped = true;\n        this.activeIndex = null;\n        if (this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon)) {\n            let clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n            clearElement.style.visibility = this.filterInput.value === '' ? 'hidden' : 'visible';\n        }\n        this.isDataFetched = false;\n        if (this.isFiltering()) {\n            if (this.isServerBlazor) {\n                this.beforePopupOpen = (this.getModuleName() === 'combobox' && this.isFiltering() && !this.beforePopupOpen)\n                    ? !this.beforePopupOpen : this.beforePopupOpen;\n                if (this.filterInput.value === '' && this.getModuleName() !== 'dropdownlist') {\n                    // tslint:disable-next-line\n                    this.interopAdaptor.invokeMethodAsync('OnServerRenderList', this.beforePopupOpen, false);\n                }\n                else {\n                    // tslint:disable-next-line\n                    this.interopAdaptor.invokeMethodAsync('OnServerFilter', this.filterInput.value);\n                }\n            }\n            else {\n                let eventArgs = {\n                    preventDefaultAction: false,\n                    text: this.filterInput.value,\n                    updateData: (dataSource, query, fields) => {\n                        if (eventArgs.cancel) {\n                            return;\n                        }\n                        this.isCustomFilter = true;\n                        this.filteringAction(dataSource, query, fields);\n                    },\n                    baseEventArgs: e,\n                    cancel: false\n                };\n                this.trigger('filtering', eventArgs, (eventArgs) => {\n                    if (!eventArgs.cancel && !this.isCustomFilter && !eventArgs.preventDefaultAction) {\n                        this.filteringAction(this.dataSource, null, this.fields);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * To filter the data from given data source by using query\n     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param  {Query} query - Specify the query to filter the data.\n     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @return {void}.\n     * @deprecated\n     */\n    filter(dataSource, query, fields) {\n        this.isCustomFilter = true;\n        this.filteringAction(dataSource, query, fields);\n    }\n    filteringAction(dataSource, query, fields) {\n        if (!isNullOrUndefined(this.filterInput)) {\n            this.beforePopupOpen = true;\n            if (this.filterInput.value.trim() === '' && !this.itemTemplate) {\n                this.actionCompleteData.isUpdated = false;\n                this.isTyped = false;\n                if (!isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list)) {\n                    this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list);\n                }\n                this.isTyped = true;\n                if (!isNullOrUndefined(this.itemData) && this.getModuleName() === 'dropdownlist') {\n                    this.focusIndexItem();\n                    this.setScrollPosition();\n                }\n                this.isNotSearchList = true;\n            }\n            else {\n                this.isNotSearchList = false;\n                query = (this.filterInput.value.trim() === '') ? null : query;\n                this.resetList(dataSource, fields, query);\n            }\n        }\n    }\n    setSearchBox(popupElement) {\n        if (this.isFiltering()) {\n            let parentElement = popupElement.querySelector('.' + dropDownListClasses.filterParent) ?\n                popupElement.querySelector('.' + dropDownListClasses.filterParent) : this.createElement('span', {\n                className: dropDownListClasses.filterParent\n            });\n            if (this.isServerBlazor) {\n                parentElement.innerHTML = '';\n            }\n            this.filterInput = this.createElement('input', {\n                attrs: { type: 'text' },\n                className: dropDownListClasses.filterInput\n            });\n            this.element.parentNode.insertBefore(this.filterInput, this.element);\n            let backIcon = false;\n            if (Browser.isDevice) {\n                backIcon = true;\n            }\n            this.filterInputObj = Input.createInput({\n                element: this.filterInput,\n                buttons: backIcon ?\n                    [dropDownListClasses.backIcon, dropDownListClasses.filterBarClearIcon] : [dropDownListClasses.filterBarClearIcon],\n                properties: { placeholder: this.filterBarPlaceholder }\n            }, this.createElement);\n            if (!isNullOrUndefined(this.cssClass)) {\n                if (this.cssClass.split(' ').indexOf('e-outline') !== -1) {\n                    addClass([this.filterInputObj.container], 'e-outline');\n                }\n                else if (this.cssClass.split(' ').indexOf('e-filled') !== -1) {\n                    addClass([this.filterInputObj.container], 'e-filled');\n                }\n            }\n            append([this.filterInputObj.container], parentElement);\n            prepend([parentElement], popupElement);\n            attributes(this.filterInput, {\n                'aria-disabled': 'false',\n                'aria-owns': this.element.id + '_options',\n                'role': 'listbox',\n                'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null,\n                'autocomplete': 'off',\n                'autocorrect': 'off',\n                'autocapitalize': 'off',\n                'spellcheck': 'false'\n            });\n            this.clearIconElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n            if (!Browser.isDevice && this.clearIconElement) {\n                EventHandler.add(this.clearIconElement, 'click', this.clearText, this);\n                this.clearIconElement.style.visibility = 'hidden';\n            }\n            if (!Browser.isDevice) {\n                this.searchKeyModule = new KeyboardEvents(this.filterInput, {\n                    keyAction: this.keyActionHandler.bind(this),\n                    keyConfigs: this.keyConfigure,\n                    eventName: 'keydown'\n                });\n            }\n            else {\n                this.searchKeyModule = new KeyboardEvents(this.filterInput, {\n                    keyAction: this.mobileKeyActionHandler.bind(this),\n                    keyConfigs: this.keyConfigure,\n                    eventName: 'keydown'\n                });\n            }\n            EventHandler.add(this.filterInput, 'input', this.onInput, this);\n            EventHandler.add(this.filterInput, 'keyup', this.onFilterUp, this);\n            EventHandler.add(this.filterInput, 'keydown', this.onFilterDown, this);\n            EventHandler.add(this.filterInput, 'blur', this.onBlur, this);\n            EventHandler.add(this.filterInput, 'paste', this.pasteHandler, this);\n            return this.filterInputObj;\n        }\n        else {\n            return inputObject;\n        }\n    }\n    ;\n    onInput(e) {\n        this.isValidKey = true;\n        // For filtering works in mobile firefox.\n        if (Browser.isDevice && Browser.info.name === 'mozilla') {\n            this.typedString = this.filterInput.value;\n            this.preventAutoFill = true;\n            this.searchLists(e);\n        }\n    }\n    pasteHandler(e) {\n        setTimeout(() => {\n            this.typedString = this.filterInput.value;\n            this.searchLists(e);\n        });\n    }\n    onActionFailure(e) {\n        super.onActionFailure(e);\n        if (this.beforePopupOpen) {\n            this.renderPopup();\n        }\n    }\n    onActionComplete(ulElement, list, e, isUpdated) {\n        if (this.isNotSearchList) {\n            this.isNotSearchList = false;\n            return;\n        }\n        if (this.isActive) {\n            let selectedItem = this.selectedLI ? this.selectedLI.cloneNode(true) : null;\n            super.onActionComplete(ulElement, list, e);\n            this.updateSelectElementData(this.allowFiltering);\n            if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent) && this.searchKeyEvent.type === 'keydown') {\n                this.isRequested = false;\n                this.keyActionHandler(this.searchKeyEvent);\n                this.searchKeyEvent = null;\n            }\n            if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent)) {\n                this.incrementalSearch(this.searchKeyEvent);\n                this.searchKeyEvent = null;\n            }\n            this.list.scrollTop = 0;\n            if (!isNullOrUndefined(ulElement)) {\n                attributes(ulElement, { 'id': this.element.id + '_options', 'role': 'listbox', 'aria-hidden': 'false' });\n            }\n            if (this.initRemoteRender) {\n                this.initial = true;\n                this.activeIndex = this.index;\n                this.updateValues();\n                this.initRemoteRender = false;\n                this.initial = false;\n                if (this.value && this.dataSource instanceof DataManager) {\n                    let checkField = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;\n                    let checkVal = list.some((x) => x[checkField] === this.value);\n                    if (!checkVal) {\n                        this.dataSource.executeQuery(this.getQuery(this.query).where(new Predicate(checkField, 'equal', this.value)))\n                            .then((e) => {\n                            if (e.result.length > 0) {\n                                this.addItem(e.result, list.length);\n                                this.updateValues();\n                            }\n                        });\n                    }\n                }\n            }\n            if (this.getModuleName() !== 'autocomplete' && this.isFiltering() && !this.isTyped) {\n                if (!this.actionCompleteData.isUpdated || ((!this.isCustomFilter\n                    && !this.isFilterFocus)\n                    && ((this.dataSource instanceof DataManager)\n                        || (!isNullOrUndefined(this.dataSource) && !isNullOrUndefined(this.dataSource.length) &&\n                            this.dataSource.length !== 0)))) {\n                    this.actionCompleteData = { ulElement: ulElement.cloneNode(true), list: list, isUpdated: true };\n                }\n                this.addNewItem(list, selectedItem);\n                if (!isNullOrUndefined(this.itemData)) {\n                    this.focusIndexItem();\n                }\n            }\n            if (this.beforePopupOpen) {\n                this.renderPopup();\n            }\n        }\n    }\n    addNewItem(listData, newElement) {\n        if (!isNullOrUndefined(this.itemData) && !isNullOrUndefined(newElement)) {\n            let value = this.getItemData().value;\n            let isExist = listData.some((data) => {\n                return (((typeof data === 'string' || typeof data === 'number') && data === value) ||\n                    (getValue(this.fields.value, data) === value));\n            });\n            if (!isExist) {\n                this.addItem(this.itemData);\n            }\n        }\n    }\n    updateActionCompleteData(li, item, index) {\n        if (this.getModuleName() !== 'autocomplete' && this.actionCompleteData.ulElement) {\n            this.actionCompleteData.ulElement.insertBefore(li.cloneNode(true), this.actionCompleteData.ulElement.childNodes[index]);\n            if (this.isFiltering() && this.actionCompleteData.list.indexOf(item) < 0) {\n                this.actionCompleteData.list.push(item);\n            }\n        }\n    }\n    focusIndexItem() {\n        let value = this.getItemData().value;\n        this.activeIndex = this.getIndexByValue(value);\n        let element = this.findListElement(this.list, 'li', 'data-value', value);\n        this.selectedLI = element;\n        this.activeItem(element);\n        this.removeFocus();\n    }\n    updateSelection() {\n        let selectedItem = this.list.querySelector('.' + dropDownBaseClasses.selected);\n        if (selectedItem) {\n            this.setProperties({ 'index': this.getIndexByValue(selectedItem.getAttribute('data-value')) });\n            this.activeIndex = this.index;\n        }\n        else {\n            this.removeFocus();\n            this.list.querySelector('.' + dropDownBaseClasses.li).classList.add(dropDownListClasses.focus);\n        }\n    }\n    removeFocus() {\n        let highlightedItem = this.list.querySelectorAll('.' + dropDownListClasses.focus);\n        if (highlightedItem && highlightedItem.length) {\n            removeClass(highlightedItem, dropDownListClasses.focus);\n        }\n    }\n    ;\n    renderPopup() {\n        if (this.popupObj && document.body.contains(this.popupObj.element)) {\n            this.refreshPopup();\n            return;\n        }\n        let args = { cancel: false };\n        this.trigger('beforeOpen', args, (args) => {\n            if (!args.cancel) {\n                let popupEle = (this.serverPopupEle) ? this.serverPopupEle : this.createElement('div', {\n                    id: this.element.id + '_popup', className: 'e-ddl e-popup ' + (this.cssClass != null ? this.cssClass : '')\n                });\n                let searchBox = this.setSearchBox(popupEle);\n                this.listHeight = formatUnit(this.popupHeight);\n                if (this.headerTemplate && !this.isServerBlazor) {\n                    this.setHeaderTemplate(popupEle);\n                }\n                append([this.list], popupEle);\n                if (this.footerTemplate && !this.isServerBlazor) {\n                    this.setFooterTemplate(popupEle);\n                }\n                if (this.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-footer')) {\n                    popupEle.appendChild(popupEle.querySelector('.e-ddl-footer'));\n                }\n                document.body.appendChild(popupEle);\n                this.updateServerPopup(popupEle);\n                popupEle.style.visibility = 'hidden';\n                if (this.popupHeight !== 'auto') {\n                    this.searchBoxHeight = 0;\n                    if (!isNullOrUndefined(searchBox.container)) {\n                        this.searchBoxHeight = (searchBox.container.parentElement).getBoundingClientRect().height;\n                        this.listHeight = (parseInt(this.listHeight, 10) - (this.searchBoxHeight)).toString() + 'px';\n                    }\n                    if (this.headerTemplate || (this.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-header'))) {\n                        this.header = this.header ? this.header : popupEle.querySelector('.e-ddl-header');\n                        let height = Math.round(this.header.getBoundingClientRect().height);\n                        this.listHeight = (parseInt(this.listHeight, 10) - (height + this.searchBoxHeight)).toString() + 'px';\n                    }\n                    if (this.footerTemplate || (this.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-footer'))) {\n                        this.footer = this.footer ? this.footer : popupEle.querySelector('.e-ddl-footer');\n                        let height = Math.round(this.footer.getBoundingClientRect().height);\n                        this.listHeight = (parseInt(this.listHeight, 10) - (height + this.searchBoxHeight)).toString() + 'px';\n                    }\n                    this.list.style.maxHeight = (parseInt(this.listHeight, 10) - 2).toString() + 'px'; // due to box-sizing property\n                    popupEle.style.maxHeight = formatUnit(this.popupHeight);\n                }\n                else {\n                    popupEle.style.height = 'auto';\n                }\n                let offsetValue = 0;\n                let left;\n                if (!isNullOrUndefined(this.selectedLI) && (!isNullOrUndefined(this.activeIndex) && this.activeIndex >= 0)) {\n                    this.setScrollPosition();\n                }\n                else {\n                    this.list.scrollTop = 0;\n                }\n                if (Browser.isDevice && (!this.allowFiltering && (this.getModuleName() === 'dropdownlist' ||\n                    (this.isDropDownClick && this.getModuleName() === 'combobox')))) {\n                    offsetValue = this.getOffsetValue(popupEle);\n                    let firstItem = this.isEmptyList() ? this.list : this.liCollections[0];\n                    left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) -\n                        parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) +\n                        parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10));\n                }\n                this.getFocusElement();\n                this.createPopup(popupEle, offsetValue, left);\n                this.checkCollision(popupEle);\n                if (Browser.isDevice) {\n                    this.popupObj.element.classList.add(dropDownListClasses.device);\n                    if (this.getModuleName() === 'dropdownlist' || (this.getModuleName() === 'combobox'\n                        && !this.allowFiltering && this.isDropDownClick)) {\n                        this.popupObj.collision = { X: 'fit', Y: 'fit' };\n                    }\n                    if (this.isFilterLayout()) {\n                        this.popupObj.element.classList.add(dropDownListClasses.mobileFilter);\n                        this.popupObj.position = { X: 0, Y: 0 };\n                        this.popupObj.dataBind();\n                        attributes(this.popupObj.element, { style: 'left:0px;right:0px;top:0px;bottom:0px;' });\n                        addClass([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);\n                        this.setSearchBoxPosition();\n                        this.backIconElement = searchBox.container.querySelector('.e-back-icon');\n                        this.clearIconElement = searchBox.container.querySelector('.' + dropDownListClasses.clearIcon);\n                        EventHandler.add(this.backIconElement, 'click', this.clickOnBackIcon, this);\n                        EventHandler.add(this.clearIconElement, 'click', this.clearText, this);\n                    }\n                }\n                popupEle.style.visibility = 'visible';\n                addClass([popupEle], 'e-popup-close');\n                let scrollParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);\n                for (let element of scrollParentElements) {\n                    EventHandler.add(element, 'scroll', this.scrollHandler, this);\n                }\n                if (Browser.isDevice && this.isFilterLayout()) {\n                    EventHandler.add(this.list, 'scroll', this.listScroll, this);\n                }\n                attributes(this.targetElement(), { 'aria-expanded': 'true' });\n                let inputParent = this.isFiltering() ? this.filterInput.parentElement : this.inputWrapper.container;\n                addClass([inputParent], [dropDownListClasses.inputFocus]);\n                let animModel = { name: 'FadeIn', duration: 100 };\n                this.beforePopupOpen = true;\n                let popupInstance = (isBlazor() && this.isServerRendered) ? null : this.popupObj;\n                let eventArgs = { popup: popupInstance, cancel: false, animation: animModel };\n                this.trigger('open', eventArgs, (eventArgs) => {\n                    if (!eventArgs.cancel) {\n                        this.serverBlazorUpdateSelection();\n                        this.bindServerScrollEvent();\n                        addClass([this.inputWrapper.container], [dropDownListClasses.iconAnimation]);\n                        this.popupObj.show(new Animation(eventArgs.animation), (this.zIndex === 1000) ? this.element : null);\n                    }\n                    else {\n                        this.beforePopupOpen = false;\n                        this.destroyPopup();\n                    }\n                });\n            }\n            else {\n                this.beforePopupOpen = false;\n            }\n        });\n    }\n    checkCollision(popupEle) {\n        if (!Browser.isDevice || (Browser.isDevice && !(this.getModuleName() === 'dropdownlist' || this.isDropDownClick))) {\n            let collision = isCollide(popupEle);\n            if (collision.length > 0) {\n                popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + 'px';\n            }\n            this.popupObj.resolveCollision();\n        }\n    }\n    serverBlazorUpdateSelection() {\n        if (this.isServerBlazor && (this.value !== null || this.index !== null || this.text !== null) ||\n            (this.getModuleName() !== 'dropdownlist' && !this.isTyped)) {\n            if (this.getModuleName() === 'dropdownlist') {\n                this.removeSelection();\n                this.removeFocus();\n                this.removeHover();\n                this.updateValues();\n            }\n            if (this.getModuleName() === 'combobox' && this.ulElement &&\n                this.findListElement(this.ulElement, 'li', 'data-value', this.value) && !this.isTyped) {\n                this.updateValues();\n            }\n            if (this.isServerBlazor && this.getModuleName() !== 'dropdownlist' &&\n                (this.text === '' || this.text === null) && this.ulElement) {\n                if (!this.ulElement.querySelector('li').classList.contains(dropDownBaseClasses.hover)) {\n                    addClass([this.ulElement.querySelector('li')], dropDownBaseClasses.hover);\n                }\n            }\n        }\n    }\n    bindServerScrollEvent() {\n        if (this.isServerBlazor && this.list) {\n            if ((this.fields.groupBy) && !this.isGroupChecking) {\n                EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n                EventHandler.add(this.list, 'scroll', this.setFloatingHeader, this);\n            }\n        }\n    }\n    updateServerPopup(popupEle) {\n        if (this.isServerBlazor) {\n            if (popupEle && popupEle.querySelector('li')) {\n                removeClass([popupEle.querySelector('.e-content')], ['e-nodata']);\n            }\n            this.initial = false;\n            popupEle.removeAttribute('style');\n        }\n    }\n    getOffsetValue(popupEle) {\n        let popupStyles = getComputedStyle(popupEle);\n        let borderTop = parseInt(popupStyles.borderTopWidth, 10);\n        let borderBottom = parseInt(popupStyles.borderBottomWidth, 10);\n        return this.setPopupPosition(borderTop + borderBottom);\n    }\n    createPopup(element, offsetValue, left) {\n        this.popupObj = new Popup(element, {\n            width: this.setWidth(), targetType: 'relative',\n            relateTo: this.inputWrapper.container, collision: { X: 'flip', Y: 'flip' }, offsetY: offsetValue,\n            enableRtl: this.enableRtl, offsetX: left, position: { X: 'left', Y: 'bottom' },\n            zIndex: this.zIndex,\n            close: () => {\n                if (!this.isDocumentClick) {\n                    this.focusDropDown();\n                }\n                let isResetItem = (this.getModuleName() === 'autocomplete') ? true : false;\n                this.DropDownBaseresetBlazorTemplates(isResetItem, isResetItem, true, true, false, true, true);\n                this.isNotSearchList = false;\n                this.isDocumentClick = false;\n                this.destroyPopup();\n                let formElement = closest(this.inputElement, 'form');\n                if (this.isFiltering() && formElement && this.actionCompleteData.list && this.actionCompleteData.list[0]) {\n                    this.isActive = true;\n                    this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);\n                }\n            },\n            open: () => {\n                EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n                this.isPopupOpen = true;\n                let actionList = this.actionCompleteData && this.actionCompleteData.ulElement &&\n                    this.actionCompleteData.ulElement.querySelector('li');\n                let ulElement = this.list.querySelector('ul li');\n                if (this.isFiltering() && this.itemTemplate && (this.element.tagName === this.getNgDirective()) &&\n                    (actionList && ulElement && actionList.textContent !== ulElement.textContent)) {\n                    this.cloneElements();\n                }\n                if (this.isFilterLayout()) {\n                    removeClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n                    this.isFilterFocus = true;\n                    this.filterInput.focus();\n                    if (this.inputWrapper.clearButton) {\n                        addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n                    }\n                }\n                this.activeStateChange();\n            },\n            targetExitViewport: () => {\n                if (!Browser.isDevice) {\n                    this.hidePopup();\n                }\n            }\n        });\n    }\n    isEmptyList() {\n        return !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0;\n    }\n    getFocusElement() {\n        // combo-box used this method\n    }\n    isFilterLayout() {\n        return this.getModuleName() === 'dropdownlist' && this.allowFiltering;\n    }\n    scrollHandler() {\n        if (Browser.isDevice && ((this.getModuleName() === 'dropdownlist' &&\n            !this.isFilterLayout()) || (this.getModuleName() === 'combobox' && !this.allowFiltering && this.isDropDownClick))) {\n            this.hidePopup();\n        }\n    }\n    setSearchBoxPosition() {\n        let searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;\n        this.popupObj.element.style.maxHeight = '100%';\n        this.popupObj.element.style.width = '100%';\n        this.list.style.maxHeight = (window.innerHeight - searchBoxHeight) + 'px';\n        this.list.style.height = (window.innerHeight - searchBoxHeight) + 'px';\n        let clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n        detach(this.filterInput);\n        clearElement.parentElement.insertBefore(this.filterInput, clearElement);\n    }\n    setPopupPosition(border) {\n        let offsetValue;\n        let popupOffset = border;\n        let selectedLI = this.list.querySelector('.' + dropDownListClasses.focus) || this.selectedLI;\n        let firstItem = this.isEmptyList() ? this.list : this.liCollections[0];\n        let lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1];\n        let liHeight = firstItem.getBoundingClientRect().height;\n        let listHeight = this.list.offsetHeight / 2;\n        let height = isNullOrUndefined(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;\n        let lastItemOffsetValue = lastItem.offsetTop;\n        if (lastItemOffsetValue - listHeight < height && !isNullOrUndefined(this.liCollections) &&\n            this.liCollections.length > 0 && !isNullOrUndefined(selectedLI)) {\n            let count = this.list.offsetHeight / liHeight;\n            let paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);\n            offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom;\n            this.list.scrollTop = selectedLI.offsetTop;\n        }\n        else if (height > listHeight) {\n            offsetValue = listHeight - liHeight / 2;\n            this.list.scrollTop = height - listHeight + liHeight / 2;\n        }\n        else {\n            offsetValue = height;\n        }\n        let inputHeight = this.inputWrapper.container.offsetHeight;\n        offsetValue = offsetValue + liHeight + popupOffset - ((liHeight - inputHeight) / 2);\n        return -offsetValue;\n    }\n    setWidth() {\n        let width = formatUnit(this.popupWidth);\n        if (width.indexOf('%') > -1) {\n            let inputWidth = this.inputWrapper.container.offsetWidth * parseFloat(width) / 100;\n            width = inputWidth.toString() + 'px';\n        }\n        if (Browser.isDevice && (!this.allowFiltering && (this.getModuleName() === 'dropdownlist' ||\n            (this.isDropDownClick && this.getModuleName() === 'combobox')))) {\n            let firstItem = this.isEmptyList() ? this.list : this.liCollections[0];\n            width = (parseInt(width, 10) + (parseInt(getComputedStyle(firstItem).textIndent, 10) -\n                parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) +\n                parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) * 2) + 'px';\n        }\n        return width;\n    }\n    scrollBottom(isInitial) {\n        if (!isNullOrUndefined(this.selectedLI)) {\n            let currentOffset = this.list.offsetHeight;\n            let nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n            let nextOffset = this.list.scrollTop + nextBottom - currentOffset;\n            nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset;\n            let boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n            boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ?\n                boxRange - this.fixedHeaderElement.offsetHeight : boxRange;\n            if (this.activeIndex === 0) {\n                this.list.scrollTop = 0;\n            }\n            else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n                this.list.scrollTop = nextOffset;\n            }\n        }\n    }\n    scrollTop() {\n        if (!isNullOrUndefined(this.selectedLI)) {\n            let nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;\n            let nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n            nextOffset = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ?\n                nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;\n            let boxRange = (this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop);\n            if (this.activeIndex === 0) {\n                this.list.scrollTop = 0;\n            }\n            else if (nextOffset < 0) {\n                this.list.scrollTop = this.list.scrollTop + nextOffset;\n            }\n            else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n                this.list.scrollTop = this.selectedLI.offsetTop - (this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ?\n                    this.fixedHeaderElement.offsetHeight : 0);\n            }\n        }\n    }\n    isEditTextBox() {\n        return false;\n    }\n    isFiltering() {\n        return this.allowFiltering;\n    }\n    isPopupButton() {\n        return true;\n    }\n    setScrollPosition(e) {\n        if (!isNullOrUndefined(e)) {\n            switch (e.action) {\n                case 'pageDown':\n                case 'down':\n                case 'end':\n                    this.scrollBottom();\n                    break;\n                default:\n                    this.scrollTop();\n                    break;\n            }\n        }\n        else {\n            this.scrollBottom(true);\n        }\n    }\n    clearText() {\n        this.filterInput.value = '';\n        this.searchLists(null);\n    }\n    listScroll() {\n        this.filterInput.blur();\n    }\n    setEleWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.inputWrapper.container.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                this.inputWrapper.container.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n            }\n        }\n    }\n    closePopup(delay) {\n        this.isTyped = false;\n        if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {\n            return;\n        }\n        EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n        this.isActive = false;\n        this.filterInputObj = null;\n        this.isDropDownClick = false;\n        this.preventAutoFill = false;\n        let scrollableParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);\n        for (let element of scrollableParentElements) {\n            EventHandler.remove(element, 'scroll', this.scrollHandler);\n        }\n        if (Browser.isDevice && this.isFilterLayout()) {\n            removeClass([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);\n            EventHandler.remove(this.list, 'scroll', this.listScroll);\n        }\n        if (this.isFilterLayout()) {\n            if (!Browser.isDevice) {\n                this.searchKeyModule.destroy();\n                if (this.clearIconElement) {\n                    EventHandler.remove(this.clearIconElement, 'click', this.clearText);\n                }\n            }\n            if (this.backIconElement) {\n                EventHandler.remove(this.backIconElement, 'click', this.clickOnBackIcon);\n                EventHandler.remove(this.clearIconElement, 'click', this.clearText);\n            }\n            EventHandler.remove(this.filterInput, 'input', this.onInput);\n            EventHandler.remove(this.filterInput, 'keyup', this.onFilterUp);\n            EventHandler.remove(this.filterInput, 'keydown', this.onFilterDown);\n            EventHandler.remove(this.filterInput, 'blur', this.onBlur);\n            EventHandler.remove(this.filterInput, 'paste', this.pasteHandler);\n            this.filterInput = null;\n        }\n        attributes(this.targetElement(), { 'aria-expanded': 'false', 'aria-activedescendant': null });\n        this.inputWrapper.container.classList.remove(dropDownListClasses.iconAnimation);\n        if (this.isFiltering()) {\n            this.actionCompleteData.isUpdated = false;\n        }\n        this.beforePopupOpen = false;\n        let animModel = {\n            name: 'FadeOut',\n            duration: 100,\n            delay: delay ? delay : 0\n        };\n        let popupInstance = (isBlazor() && this.isServerRendered) ? null : this.popupObj;\n        let eventArgs = { popup: popupInstance, cancel: false, animation: animModel };\n        this.trigger('close', eventArgs, (eventArgs) => {\n            if (!isNullOrUndefined(this.popupObj) &&\n                !isNullOrUndefined(this.popupObj.element.querySelector('.e-fixed-head'))) {\n                let fixedHeader = this.popupObj.element.querySelector('.e-fixed-head');\n                fixedHeader.parentNode.removeChild(fixedHeader);\n                this.fixedHeaderElement = null;\n            }\n            if (!eventArgs.cancel) {\n                if (this.getModuleName() === 'autocomplete' && !this.isServerBlazor) {\n                    this.rippleFun();\n                }\n                if (this.isPopupOpen) {\n                    this.popupObj.hide(new Animation(eventArgs.animation));\n                }\n                else {\n                    this.destroyPopup();\n                }\n            }\n        });\n    }\n    destroyPopup() {\n        let popupHolderEle = document.querySelector('#' + this.element.id + '_popup_holder');\n        if (this.isServerBlazor && this.serverPopupEle && popupHolderEle) {\n            popupHolderEle.appendChild(this.serverPopupEle);\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('OnServerClosePopup');\n        }\n        this.isPopupOpen = false;\n        this.isFilterFocus = false;\n        this.popupObj.destroy();\n        detach(this.popupObj.element);\n    }\n    clickOnBackIcon() {\n        this.hidePopup();\n        this.focusIn();\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    // tslint:disable-next-line\n    render() {\n        if (this.isServerBlazor) {\n            this.inputElement = this.element;\n            this.inputWrapper = { container: this.element.parentElement };\n            this.hiddenElement = this.inputWrapper.container.querySelector('select');\n            this.inputWrapper.buttons = [this.inputWrapper.container.querySelector('.e-input-group-icon.e-ddl-icon')];\n            if (this.showClearButton) {\n                this.inputWrapper.clearButton = this.inputWrapper.container.querySelector('.e-clear-icon');\n                Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);\n            }\n            if (this.floatLabelType === 'Auto') {\n                Input.wireFloatingEvents(this.element);\n            }\n            Input.bindInitialEvent({\n                element: this.element,\n                buttons: null, customTag: null,\n                floatLabelType: this.floatLabelType,\n                properties: this.properties\n            });\n            this.setFields();\n            this.wireEvent();\n            this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';\n            if (!this.enabled) {\n                this.targetElement().tabIndex = -1;\n            }\n            if (this.element.hasAttribute('autofocus')) {\n                this.focusIn();\n            }\n            this.initial = false;\n        }\n        else {\n            if (this.element.tagName === 'INPUT') {\n                this.inputElement = this.element;\n                if (isNullOrUndefined(this.inputElement.getAttribute('role'))) {\n                    this.inputElement.setAttribute('role', 'textbox');\n                }\n                if (isNullOrUndefined(this.inputElement.getAttribute('type'))) {\n                    this.inputElement.setAttribute('type', 'text');\n                }\n            }\n            else {\n                this.inputElement = this.createElement('input', { attrs: { role: 'textbox', type: 'text' } });\n                if (this.element.tagName !== this.getNgDirective()) {\n                    this.element.style.display = 'none';\n                }\n                this.element.parentElement.insertBefore(this.inputElement, this.element);\n                this.preventTabIndex(this.inputElement);\n            }\n            let updatedCssClassValues = this.cssClass;\n            if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n                updatedCssClassValues = (this.cssClass.replace(/\\s+/g, ' ')).trim();\n            }\n            this.inputWrapper = Input.createInput({\n                element: this.inputElement,\n                buttons: this.isPopupButton() ? [dropDownListClasses.icon] : null,\n                floatLabelType: this.floatLabelType,\n                properties: {\n                    readonly: this.getModuleName() === 'dropdownlist' ? true : this.readonly,\n                    placeholder: this.placeholder,\n                    cssClass: updatedCssClassValues,\n                    enabled: this.enabled,\n                    enableRtl: this.enableRtl,\n                    showClearButton: this.showClearButton\n                },\n            }, this.createElement);\n            if (this.element.tagName === this.getNgDirective()) {\n                this.element.appendChild(this.inputWrapper.container);\n            }\n            else {\n                this.inputElement.parentElement.insertBefore(this.element, this.inputElement);\n            }\n            this.hiddenElement = this.createElement('select', {\n                attrs: { 'aria-hidden': 'true', 'tabindex': '-1', 'class': dropDownListClasses.hiddenElement }\n            });\n            prepend([this.hiddenElement], this.inputWrapper.container);\n            this.validationAttribute(this.element, this.hiddenElement);\n            this.setFields();\n            this.inputWrapper.container.style.width = formatUnit(this.width);\n            this.inputWrapper.container.classList.add('e-ddl');\n            this.wireEvent();\n            this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';\n            this.element.removeAttribute('tabindex');\n            let id = this.element.getAttribute('id') ? this.element.getAttribute('id') : getUniqueID('ej2_dropdownlist');\n            this.element.id = id;\n            this.hiddenElement.id = id + '_hidden';\n            this.targetElement().setAttribute('tabindex', this.tabIndex);\n            attributes(this.targetElement(), this.getAriaAttributes());\n            this.updateDataAttribute(this.htmlAttributes);\n            this.setHTMLAttributes();\n            if (this.value !== null || this.activeIndex !== null || this.text !== null) {\n                this.initValue();\n            }\n            else if (this.element.tagName === 'SELECT' && this.element.options[0]) {\n                let selectElement = this.element;\n                this.value = selectElement.options[selectElement.selectedIndex].value;\n                this.text = isNullOrUndefined(this.value) ? null : selectElement.options[selectElement.selectedIndex].textContent;\n                this.initValue();\n            }\n            this.preventTabIndex(this.element);\n            if (!this.enabled) {\n                this.targetElement().tabIndex = -1;\n            }\n            this.initial = false;\n            this.element.style.opacity = '';\n            this.inputElement.onselect = (e) => { e.stopImmediatePropagation(); };\n            this.inputElement.onchange = (e) => { e.stopImmediatePropagation(); };\n            if (this.element.hasAttribute('autofocus')) {\n                this.focusIn();\n            }\n            if (!isNullOrUndefined(this.text)) {\n                this.inputElement.setAttribute('value', this.text);\n            }\n        }\n        this.renderComplete();\n    }\n    ;\n    setFooterTemplate(popupEle) {\n        let compiledString;\n        if (this.footer) {\n            this.footer.innerHTML = '';\n        }\n        else {\n            this.footer = this.createElement('div');\n            addClass([this.footer], dropDownListClasses.footer);\n        }\n        let footercheck = this.dropdownCompiler(this.footerTemplate);\n        if (footercheck) {\n            compiledString = compile(document.querySelector(this.footerTemplate).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.footerTemplate);\n        }\n        for (let item of compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate)) {\n            this.footer.appendChild(item);\n        }\n        this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, false, true);\n        append([this.footer], popupEle);\n    }\n    setHeaderTemplate(popupEle) {\n        let compiledString;\n        if (this.header) {\n            this.header.innerHTML = '';\n        }\n        else {\n            this.header = this.createElement('div');\n            addClass([this.header], dropDownListClasses.header);\n        }\n        let headercheck = this.dropdownCompiler(this.headerTemplate);\n        if (headercheck) {\n            compiledString = compile(document.querySelector(this.headerTemplate).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.headerTemplate);\n        }\n        for (let item of compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate)) {\n            this.header.appendChild(item);\n        }\n        this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, true, false);\n        let contentEle = popupEle.querySelector('div.e-content');\n        popupEle.insertBefore(this.header, contentEle);\n    }\n    setOldText(text) {\n        this.text = text;\n    }\n    setOldValue(value) {\n        this.value = value;\n    }\n    refreshPopup() {\n        if (!isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) &&\n            ((this.allowFiltering && !(Browser.isDevice && this.isFilterLayout())) || this.getModuleName() === 'autocomplete')) {\n            removeClass([this.popupObj.element], 'e-popup-close');\n            this.popupObj.refreshPosition(this.inputWrapper.container);\n            this.popupObj.resolveCollision();\n        }\n    }\n    checkDatasource(newProp) {\n        if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) && this.itemTemplate && this.allowFiltering) {\n            this.list = null;\n            this.actionCompleteData = { ulElement: null, list: null, isUpdated: false };\n        }\n        let isChangeValue = Object.keys(newProp).indexOf('value') !== -1 && isNullOrUndefined(newProp.value);\n        let isChangeText = Object.keys(newProp).indexOf('text') !== -1 && isNullOrUndefined(newProp.text);\n        if (this.getModuleName() !== 'autocomplete' && this.allowFiltering && (isChangeValue || isChangeText)) {\n            this.itemData = null;\n        }\n    }\n    updateDataSource(props) {\n        if (this.inputElement.value !== '' || (!isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource)\n            || (!(props.dataSource instanceof DataManager) && props.dataSource.length === 0)))) {\n            this.clearAll(null, props);\n        }\n        if (!(!isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource)\n            || (!(props.dataSource instanceof DataManager) && props.dataSource.length === 0))) || !(props.dataSource === [])) {\n            this.resetList(this.dataSource);\n        }\n        if (!this.isCustomFilter && !this.isFilterFocus && document.activeElement !== this.filterInput) {\n            this.checkCustomValue();\n        }\n    }\n    checkCustomValue() {\n        this.itemData = this.getDataByValue(this.value);\n        let dataItem = this.getItemData();\n        this.setProperties({ 'value': dataItem.value, 'text': dataItem.text });\n    }\n    updateInputFields() {\n        if (this.getModuleName() === 'dropdownlist') {\n            Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n        }\n    }\n    /**\n     * Dynamically change the value of properties.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (this.getModuleName() === 'dropdownlist') {\n            if (!this.isServerBlazor) {\n                this.checkDatasource(newProp);\n                this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n            }\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'query':\n                case 'dataSource':\n                    break;\n                case 'htmlAttributes':\n                    this.setHTMLAttributes();\n                    break;\n                case 'width':\n                    this.setEleWidth(newProp.width);\n                    break;\n                case 'placeholder':\n                    Input.setPlaceholder(newProp.placeholder, this.inputElement);\n                    break;\n                case 'filterBarPlaceholder':\n                    if (this.filterInput) {\n                        Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);\n                    }\n                    break;\n                case 'readonly':\n                    if (this.getModuleName() !== 'dropdownlist') {\n                        Input.setReadonly(newProp.readonly, this.inputElement);\n                    }\n                    break;\n                case 'cssClass':\n                    this.setCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'enabled':\n                    this.setEnable();\n                    break;\n                case 'text':\n                    if (newProp.text === null) {\n                        this.clearAll();\n                        break;\n                    }\n                    if (!this.list) {\n                        if (this.dataSource instanceof DataManager) {\n                            this.initRemoteRender = true;\n                        }\n                        this.renderList();\n                    }\n                    if (!this.initRemoteRender) {\n                        let li = this.getElementByText(newProp.text);\n                        if (!this.checkValidLi(li)) {\n                            if (this.liCollections && this.liCollections.length === 100 &&\n                                this.getModuleName() === 'autocomplete' && this.listData.length > 100) {\n                                this.setSelectionData(newProp.text, oldProp.text, 'text');\n                            }\n                            else if (!this.isServerBlazor) {\n                                this.setOldText(oldProp.text);\n                            }\n                        }\n                        this.updateInputFields();\n                    }\n                    break;\n                case 'value':\n                    if (newProp.value === null) {\n                        this.clearAll();\n                        break;\n                    }\n                    this.notify('beforeValueChange', { newProp: newProp }); // gird component value type change\n                    if (!this.list) {\n                        if (this.dataSource instanceof DataManager) {\n                            this.initRemoteRender = true;\n                        }\n                        this.renderList();\n                    }\n                    if (!this.initRemoteRender) {\n                        let item = this.getElementByValue(newProp.value);\n                        if (!this.checkValidLi(item)) {\n                            if (this.liCollections && this.liCollections.length === 100 &&\n                                this.getModuleName() === 'autocomplete' && this.listData.length > 100) {\n                                this.setSelectionData(newProp.value, oldProp.value, 'value');\n                            }\n                            else if (!this.isServerBlazor) {\n                                this.setOldValue(oldProp.value);\n                            }\n                        }\n                        this.updateInputFields();\n                    }\n                    break;\n                case 'index':\n                    if (newProp.index === null) {\n                        this.clearAll();\n                        break;\n                    }\n                    if (!this.list) {\n                        if (this.dataSource instanceof DataManager) {\n                            this.initRemoteRender = true;\n                        }\n                        this.renderList();\n                    }\n                    if (!this.initRemoteRender && this.liCollections) {\n                        let element = this.liCollections[newProp.index];\n                        if (!this.checkValidLi(element)) {\n                            if (this.liCollections && this.liCollections.length === 100 &&\n                                this.getModuleName() === 'autocomplete' && this.listData.length > 100) {\n                                this.setSelectionData(newProp.index, oldProp.index, 'index');\n                            }\n                            else if (!this.isServerBlazor) {\n                                this.index = oldProp.index;\n                            }\n                        }\n                        this.updateInputFields();\n                    }\n                    break;\n                case 'footerTemplate':\n                    if (this.popupObj) {\n                        this.setFooterTemplate(this.popupObj.element);\n                    }\n                    break;\n                case 'headerTemplate':\n                    if (this.popupObj) {\n                        this.setHeaderTemplate(this.popupObj.element);\n                    }\n                    break;\n                case 'valueTemplate':\n                    if (!isNullOrUndefined(this.itemData) && this.valueTemplate != null) {\n                        this.setValueTemplate();\n                    }\n                    break;\n                case 'allowFiltering':\n                    if (this.allowFiltering) {\n                        this.actionCompleteData = { ulElement: this.ulElement,\n                            list: this.listData, isUpdated: true };\n                        this.updateSelectElementData(this.allowFiltering);\n                    }\n                    break;\n                case 'floatLabelType':\n                    Input.removeFloating(this.inputWrapper);\n                    Input.addFloating(this.inputElement, newProp.floatLabelType, this.placeholder, this.createElement);\n                    break;\n                case 'showClearButton':\n                    Input.setClearButton(newProp.showClearButton, this.inputElement, this.inputWrapper, null, this.createElement);\n                    this.bindClearEvent();\n                    break;\n                default:\n                    let ddlProps;\n                    ddlProps = this.getPropObject(prop, newProp, oldProp);\n                    super.onPropertyChanged(ddlProps.newProperty, ddlProps.oldProperty);\n                    break;\n            }\n        }\n    }\n    checkValidLi(element) {\n        if (this.isValidLI(element)) {\n            this.setSelection(element, null);\n            return true;\n        }\n        return false;\n    }\n    setSelectionData(newProp, oldProp, prop) {\n        let li;\n        this.updateListValues = () => {\n            if (prop === 'text') {\n                li = this.getElementByText(newProp);\n                if (!this.checkValidLi(li)) {\n                    this.setOldText(oldProp);\n                }\n            }\n            else if (prop === 'value') {\n                li = this.getElementByValue(newProp);\n                if (!this.checkValidLi(li)) {\n                    this.setOldValue(oldProp);\n                }\n            }\n            else if (prop === 'index') {\n                li = this.liCollections[newProp];\n                if (!this.checkValidLi(li)) {\n                    this.index = oldProp;\n                }\n            }\n        };\n    }\n    setCssClass(newClass, oldClass) {\n        if (!isNullOrUndefined(oldClass)) {\n            oldClass = (oldClass.replace(/\\s+/g, ' ')).trim();\n        }\n        if (!isNullOrUndefined(newClass)) {\n            newClass = (newClass.replace(/\\s+/g, ' ')).trim();\n        }\n        Input.setCssClass(newClass, [this.inputWrapper.container], oldClass);\n        if (this.popupObj) {\n            Input.setCssClass(newClass, [this.popupObj.element], oldClass);\n        }\n    }\n    /**\n     * Return the module name.\n     * @private\n     */\n    getModuleName() {\n        return 'dropdownlist';\n    }\n    /**\n     * Opens the popup that displays the list of items.\n     * @returns void.\n     */\n    showPopup() {\n        if (!this.enabled) {\n            return;\n        }\n        if (isBlazor() && this.itemTemplate) {\n            this.DropDownBaseupdateBlazorTemplates(true, false, false, false);\n        }\n        if (this.beforePopupOpen) {\n            this.refreshPopup();\n            return;\n        }\n        this.beforePopupOpen = true;\n        if (this.isFiltering() && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0]) {\n            this.isActive = true;\n            this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);\n        }\n        else if (isNullOrUndefined(this.list) || !isUndefined(this.list) && (this.list.classList.contains(dropDownBaseClasses.noData) ||\n            this.list.querySelectorAll('.' + dropDownBaseClasses.li).length <= 0)) {\n            this.renderList();\n        }\n        else if (this.isFiltering() && this.isServerBlazor) {\n            this.renderList();\n        }\n        if (!this.isServerBlazor) {\n            this.invokeRenderPopup();\n        }\n        let popupHolderEle = !this.isFiltering() || document.querySelector('#' + this.element.id + '_popup_holder');\n        let isDropdownComp = this.getModuleName() === 'dropdownlist' || !this.isFiltering();\n        if (this.isServerBlazor && popupHolderEle && !isNullOrUndefined(this.list) && isDropdownComp) {\n            this.invokeRenderPopup();\n        }\n    }\n    invokeRenderPopup() {\n        if (Browser.isDevice && this.isFilterLayout()) {\n            let proxy = this;\n            window.onpopstate = () => {\n                proxy.hidePopup();\n            };\n            history.pushState({}, '');\n        }\n        if (!isNullOrUndefined(this.list.children[0]) || this.list.classList.contains(dropDownBaseClasses.noData)) {\n            this.renderPopup();\n        }\n        attributes(this.targetElement(), { 'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null });\n    }\n    clientRenderPopup(data, popupEle) {\n        if (popupEle) {\n            this.serverPopupEle = popupEle;\n            this.list = popupEle.querySelector('.e-dropdownbase.e-content') ?\n                popupEle.querySelector('.e-dropdownbase.e-content') : this.list;\n            this.ulElement = this.list.querySelector('ul');\n            if (isNullOrUndefined(this.ulElement) && !this.list.classList.contains(dropDownBaseClasses.noData)) {\n                addClass([this.list], [dropDownBaseClasses.noData]);\n            }\n            this.liCollections = this.ulElement ?\n                this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li) : [];\n            this.listData = data;\n            if (this.getModuleName() === 'autocomplete' && this.liCollections.length > 0) {\n                this.renderHightSearch();\n            }\n            this.initRemoteRender = false;\n            if (!this.isPopupOpen) {\n                this.serverBlazorUpdateSelection();\n            }\n            this.unWireListEvents();\n            this.wireListEvents();\n            if (this.isServerIncrementalSearch && this.searchKeyEvent) {\n                this.isServerIncrementalSearch = false;\n                this.initial = false;\n                this.onServerIncrementalSearch(this.searchKeyEvent);\n            }\n            if (this.isServerNavigation && this.searchKeyEvent) {\n                if (this.searchKeyEvent.action === 'down' || this.searchKeyEvent.action === 'up') {\n                    this.isServerNavigation = false;\n                    this.updateUpDownAction(this.searchKeyEvent);\n                }\n                else if (this.searchKeyEvent.action === 'home' || this.searchKeyEvent.action === 'end') {\n                    this.isServerNavigation = false;\n                    this.updateHomeEndAction(this.searchKeyEvent);\n                }\n            }\n            if (this.beforePopupOpen) {\n                this.invokeRenderPopup();\n            }\n            if (this.getModuleName() !== 'dropdownlist') {\n                this.onActionComplete(this.ulElement, this.listData);\n            }\n        }\n        else if (data != null && this.listData !== data) {\n            this.listData = data;\n            this.initRemoteRender = false;\n        }\n    }\n    renderHightSearch() {\n        // update high light search \n    }\n    updateclientItemData(data) {\n        this.listData = data;\n    }\n    initValueItemData(selectData) {\n        this.itemData = selectData;\n        this.previousValue = this.value;\n        this.initial = false;\n    }\n    serverUpdateListElement(data, popupEle) {\n        this.listData = data;\n        if (this.ulElement) {\n            this.liCollections = this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li);\n        }\n    }\n    /**\n     * Hides the popup if it is in an open state.\n     * @returns void.\n     */\n    hidePopup(e) {\n        let isHeader = (this.headerTemplate) ? true : false;\n        let isFooter = (this.headerTemplate) ? true : false;\n        this.DropDownBaseresetBlazorTemplates(false, false, false, false, false, isHeader, isFooter);\n        if (this.isEscapeKey && this.getModuleName() === 'dropdownlist') {\n            Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n            this.isEscapeKey = false;\n            if (!isNullOrUndefined(this.index)) {\n                let element = this.findListElement(this.ulElement, 'li', 'data-value', this.value);\n                this.selectedLI = this.liCollections[this.index] || element;\n                if (this.selectedLI) {\n                    this.updateSelectedItem(this.selectedLI, null, true);\n                    if (this.valueTemplate && this.itemData !== null) {\n                        this.setValueTemplate();\n                    }\n                }\n            }\n            else {\n                this.resetSelection();\n            }\n        }\n        this.closePopup();\n        let dataItem = this.getItemData();\n        let isSelectVal = this.isServerBlazor ? !isNullOrUndefined(this.value) : !isNullOrUndefined(this.selectedLI);\n        if (this.inputElement.value.trim() === '' && !this.isInteracted && (this.isSelectCustom ||\n            isSelectVal && this.inputElement.value !== dataItem.text)) {\n            this.isSelectCustom = false;\n            this.clearAll(e);\n        }\n    }\n    /**\n     * Sets the focus on the component for interaction.\n     * @returns void.\n     */\n    focusIn(e) {\n        if (!this.enabled) {\n            return;\n        }\n        if (this.targetElement().classList.contains(dropDownListClasses.disable)) {\n            return;\n        }\n        let isFocused = false;\n        if (this.preventFocus && Browser.isDevice) {\n            this.inputWrapper.container.tabIndex = 1;\n            this.inputWrapper.container.focus();\n            this.preventFocus = false;\n            isFocused = true;\n        }\n        if (!isFocused) {\n            this.targetElement().focus();\n        }\n        addClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n        this.onFocus(e);\n    }\n    /**\n     * Moves the focus from the component if the component is already focused.\n     * @returns void.\n     */\n    focusOut(e) {\n        if (!this.enabled) {\n            return;\n        }\n        this.isTyped = true;\n        this.hidePopup(e);\n        this.targetElement().blur();\n        removeClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n     * @method destroy\n     * @return {void}.\n     */\n    destroy() {\n        this.isActive = false;\n        if (!this.isServerBlazor || (this.popupObj && document.body.contains(this.popupObj.element))) {\n            this.hidePopup();\n        }\n        this.unWireEvent();\n        if (this.list) {\n            this.unWireListEvents();\n            if (this.isServerBlazor) {\n                if ((this.fields.groupBy) && !this.isGroupChecking) {\n                    EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n                }\n            }\n        }\n        if (!this.isServerBlazor) {\n            if (this.element && !this.element.classList.contains('e-' + this.getModuleName())) {\n                return;\n            }\n            let attrArray = ['readonly', 'aria-disabled', 'aria-placeholder',\n                'placeholder', 'aria-owns', 'aria-labelledby', 'aria-haspopup', 'aria-expanded',\n                'aria-activedescendant', 'autocomplete', 'aria-readonly', 'autocorrect',\n                'autocapitalize', 'spellcheck', 'aria-autocomplete', 'aria-live', 'aria-describedby', 'aria-label'];\n            for (let i = 0; i < attrArray.length; i++) {\n                this.inputElement.removeAttribute(attrArray[i]);\n            }\n            this.inputElement.setAttribute('tabindex', this.tabIndex);\n            this.inputElement.classList.remove('e-input');\n            Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n            this.element.style.display = 'block';\n            if (this.inputWrapper.container.parentElement.tagName === this.getNgDirective()) {\n                detach(this.inputWrapper.container);\n            }\n            else {\n                this.inputWrapper.container.parentElement.insertBefore(this.element, this.inputWrapper.container);\n                detach(this.inputWrapper.container);\n            }\n            super.destroy();\n        }\n    }\n    ;\n    /**\n     * Gets all the list items bound on this component.\n     * @returns Element[].\n     */\n    getItems() {\n        if (!this.list) {\n            if (this.dataSource instanceof DataManager) {\n                this.initRemoteRender = true;\n            }\n            this.renderList();\n        }\n        return this.ulElement ? super.getItems() : [];\n    }\n    /**\n     * Gets the data Object that matches the given value.\n     * @param { string | number } value - Specifies the value of the list item.\n     * @returns Object.\n     * @blazorType object\n     */\n    getDataByValue(value) {\n        return super.getDataByValue(value);\n    }\n    /**\n     * Allows you to clear the selected values from the component.\n     * @returns void.\n     */\n    clear() {\n        this.value = null;\n    }\n};\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"cssClass\", void 0);\n__decorate$1([\n    Property('100%')\n], DropDownList.prototype, \"width\", void 0);\n__decorate$1([\n    Property('300px')\n], DropDownList.prototype, \"popupHeight\", void 0);\n__decorate$1([\n    Property('100%')\n], DropDownList.prototype, \"popupWidth\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"placeholder\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"filterBarPlaceholder\", void 0);\n__decorate$1([\n    Property({})\n], DropDownList.prototype, \"htmlAttributes\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"query\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"valueTemplate\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"headerTemplate\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"footerTemplate\", void 0);\n__decorate$1([\n    Property(false)\n], DropDownList.prototype, \"allowFiltering\", void 0);\n__decorate$1([\n    Property(false)\n], DropDownList.prototype, \"readonly\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"text\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"value\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"index\", void 0);\n__decorate$1([\n    Property('Never')\n], DropDownList.prototype, \"floatLabelType\", void 0);\n__decorate$1([\n    Property(false)\n], DropDownList.prototype, \"showClearButton\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"filtering\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"change\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"beforeOpen\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"open\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"close\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"blur\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"focus\", void 0);\nDropDownList = __decorate$1([\n    NotifyPropertyChanges\n], DropDownList);\n\n/**\n * export all modules from current location\n */\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst RTL = 'e-rtl';\nconst DROPDOWNTREE = 'e-ddt';\nconst HIDDENELEMENT = 'e-ddt-hidden';\nconst DROPDOWNICON = 'e-input-group-icon e-ddt-icon e-icons';\nconst SHOW_CHIP = 'e-show-chip';\nconst SHOW_CLEAR = 'e-show-clear';\nconst SHOW_DD_ICON = 'e-show-dd-icon';\nconst CHIP_INPUT = 'e-chip-input';\nconst INPUTFOCUS = 'e-input-focus';\nconst INPUTGROUP = 'e-input-group';\nconst ICONANIMATION = 'e-icon-anim';\nconst CLOSEICON_CLASS = 'e-clear-icon e-icons';\nconst CHIP_WRAPPER = 'e-chips-wrapper';\nconst CHIP_COLLECTION = 'e-chips-collection';\nconst CHIP = 'e-chips';\nconst CHIP_CONTENT = 'e-chipcontent';\nconst CHIP_CLOSE = 'e-chips-close';\nconst HIDEICON = 'e-icon-hide';\nconst POPUP_CLASS = 'e-ddt e-popup';\nconst PARENTITEM = 'e-list-parent';\nconst CONTENT = 'e-popup-content';\nconst DROPDOWN = 'e-dropdown';\nconst DISABLED = 'e-disabled';\nconst ICONS = 'e-icons';\nconst CHECKALLPARENT = 'e-selectall-parent';\nconst CHECKALLHIDE = 'e-hide-selectall';\nconst BIGGER = 'e-bigger';\nconst SMALL = 'e-small';\nconst ALLTEXT = 'e-all-text';\nconst CHECKBOXFRAME = 'e-frame';\nconst CHECK = 'e-check';\nconst CHECKBOXWRAP = 'e-checkbox-wrapper';\nconst FILTERWRAP = 'e-filter-wrap';\nconst DDTICON = 'e-ddt-icon';\nconst FOOTER = 'e-ddt-footer';\nconst HEADER = 'e-ddt-header';\nconst NODATACONTAINER = 'e-ddt-nodata';\nconst NODATA = 'e-no-data';\nconst HEADERTEMPLATE = 'HeaderTemplate';\nconst FOOTERTEMPLATE = 'FooterTemplate';\nconst NORECORDSTEMPLATE = 'NoRecordsTemplate';\nconst ACTIONFAILURETEMPLATE = 'ActionFailureTemplate';\nconst REMAIN_WRAPPER = 'e-remain';\nconst OVERFLOW_VIEW = 'e-overflow';\nconst SHOW_TEXT = 'e-show-text';\nconst TOTAL_COUNT_WRAPPER = 'e-total-count';\nconst REMAIN_COUNT = 'e-wrap-count';\nclass Fields extends ChildProperty {\n}\n__decorate$2([\n    Property('child')\n], Fields.prototype, \"child\", void 0);\n__decorate$2([\n    Property([])\n], Fields.prototype, \"dataSource\", void 0);\n__decorate$2([\n    Property('expanded')\n], Fields.prototype, \"expanded\", void 0);\n__decorate$2([\n    Property('hasChildren')\n], Fields.prototype, \"hasChildren\", void 0);\n__decorate$2([\n    Property('htmlAttributes')\n], Fields.prototype, \"htmlAttributes\", void 0);\n__decorate$2([\n    Property('iconCss')\n], Fields.prototype, \"iconCss\", void 0);\n__decorate$2([\n    Property('imageUrl')\n], Fields.prototype, \"imageUrl\", void 0);\n__decorate$2([\n    Property('parentValue')\n], Fields.prototype, \"parentValue\", void 0);\n__decorate$2([\n    Property(null)\n], Fields.prototype, \"query\", void 0);\n__decorate$2([\n    Property('selected')\n], Fields.prototype, \"selected\", void 0);\n__decorate$2([\n    Property(null)\n], Fields.prototype, \"tableName\", void 0);\n__decorate$2([\n    Property('text')\n], Fields.prototype, \"text\", void 0);\n__decorate$2([\n    Property('tooltip')\n], Fields.prototype, \"tooltip\", void 0);\n__decorate$2([\n    Property('value')\n], Fields.prototype, \"value\", void 0);\nclass TreeSettings extends ChildProperty {\n}\n__decorate$2([\n    Property(false)\n], TreeSettings.prototype, \"autoCheck\", void 0);\n__decorate$2([\n    Property('Auto')\n], TreeSettings.prototype, \"expandOn\", void 0);\n__decorate$2([\n    Property(false)\n], TreeSettings.prototype, \"loadOnDemand\", void 0);\n/**\n * The Dropdown Tree control allows you to select single or multiple values from hierarchical data in a tree-like structure.\n * It has several out-of-the-box features, such as data binding, check boxes, templates, filter,\n * UI customization, accessibility, and preselected values.\n * ```html\n *  <input type=\"text\" id=\"tree\"></input>\n * ```\n * ```typescript\n *  let ddtObj: DropDownTree = new DropDownTree();\n *  ddtObj.appendTo(\"#tree\");\n * ```\n */\nlet DropDownTree = class DropDownTree extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.filterTimer = null;\n        this.isFilteredData = false;\n        this.isFilterRestore = false;\n        this.selectedData = [];\n        this.filterDelayTime = 300;\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @returns string\n     * @hidden\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    getLocaleName() {\n        return 'drop-down-tree';\n    }\n    /**\n     * Initialize the event handler.\n     * @private\n     */\n    preRender() {\n        this.inputFocus = false;\n        this.isPopupOpen = false;\n        this.isFirstRender = true;\n        this.isInitialized = false;\n        this.currentText = null;\n        this.currentValue = null;\n        this.oldValue = null;\n        this.removeValue = false;\n        this.selectedText = [];\n        this.treeItems = [];\n        this.dataValue = null;\n        this.isNodeSelected = false;\n        this.isDynamicChange = false;\n        this.clearIconWidth = 0;\n        this.isBlazorPlatForm = isBlazor();\n        this.headerTemplateId = `${this.element.id}${HEADERTEMPLATE}`;\n        this.footerTemplateId = `${this.element.id}${FOOTERTEMPLATE}`;\n        this.actionFailureTemplateId = `${this.element.id}${ACTIONFAILURETEMPLATE}`;\n        this.noRecordsTemplateId = `${this.element.id}${NORECORDSTEMPLATE}`;\n        this.keyConfigs = {\n            escape: 'escape',\n            altUp: 'alt+uparrow',\n            altDown: 'alt+downarrow',\n            tab: 'tab',\n            shiftTab: 'shift+tab',\n            end: 'end',\n            enter: 'enter',\n            home: 'home',\n            moveDown: 'downarrow',\n            moveLeft: 'leftarrow',\n            moveRight: 'rightarrow',\n            moveUp: 'uparrow',\n            ctrlDown: 'ctrl+downarrow',\n            ctrlUp: 'ctrl+uparrow',\n            ctrlEnter: 'ctrl+enter',\n            ctrlHome: 'ctrl+home',\n            ctrlEnd: 'ctrl+end',\n            shiftDown: 'shift+downarrow',\n            shiftUp: 'shift+uparrow',\n            shiftEnter: 'shift+enter',\n            shiftHome: 'shift+home',\n            shiftEnd: 'shift+end',\n            csDown: 'ctrl+shift+downarrow',\n            csUp: 'ctrl+shift+uparrow',\n            csEnter: 'ctrl+shift+enter',\n            csHome: 'ctrl+shift+home',\n            csEnd: 'ctrl+shift+end',\n            space: 'space',\n            ctrlA: 'ctrl+A'\n        };\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.ensureAutoCheck();\n        if (this.element.tagName === 'INPUT') {\n            this.inputEle = this.element;\n            if (isNullOrUndefined(this.inputEle.getAttribute('role'))) {\n                this.inputEle.setAttribute('role', 'textbox');\n            }\n            if (isNullOrUndefined(this.inputEle.getAttribute('type'))) {\n                this.inputEle.setAttribute('type', 'text');\n            }\n        }\n        else {\n            this.inputEle = this.createElement('input', { attrs: { role: 'textbox', type: 'text' } });\n            this.element.parentElement.insertBefore(this.inputEle, this.element);\n        }\n        this.inputObj = Input.createInput({\n            element: this.inputEle,\n            floatLabelType: this.floatLabelType,\n            buttons: this.showDropDownIcon ? [DROPDOWNICON] : null,\n            properties: {\n                readonly: true,\n                placeholder: this.placeholder,\n                enabled: this.enabled,\n                cssClass: this.cssClass,\n                enableRtl: this.enableRtl,\n            },\n        }, this.createElement);\n        this.inputWrapper = this.inputObj.container;\n        if (!this.inputWrapper.classList.contains(INPUTGROUP)) {\n            this.inputWrapper.classList.add(INPUTGROUP);\n        }\n        if (this.showDropDownIcon) {\n            this.inputWrapper.classList.add(SHOW_DD_ICON);\n        }\n        if (this.element.tagName === this.getDirective()) {\n            this.element.appendChild(this.inputWrapper);\n        }\n        this.createHiddenElement();\n        this.createClearIcon();\n        this.inputWrapper.classList.add(DROPDOWNTREE);\n        this.setElementWidth(this.width);\n        this.setAttributes();\n        this.updateDataAttribute();\n        this.setHTMLAttributes();\n        this.popupDiv = this.createElement('div', { className: CONTENT, attrs: { 'tabindex': '0' } });\n        this.popupDiv.classList.add(DROPDOWN);\n        this.tree = this.createElement('div', { id: this.element.id + '_tree', });\n        this.popupDiv.appendChild(this.tree);\n        document.body.appendChild(this.popupDiv);\n        this.wireTreeEvents();\n        this.popupDiv.style.display = 'none';\n        this.renderTree();\n        this.isRemoteData = this.fields.dataSource instanceof DataManager;\n        if (this.allowMultiSelection || this.showCheckBox) {\n            if (this.mode !== 'Delimiter') {\n                this.createChip();\n            }\n            if (!this.wrapText) {\n                this.overFlowWrapper = this.createElement('span', { className: OVERFLOW_VIEW + ' ' + HIDEICON });\n                this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);\n                if (this.mode !== 'Box') {\n                    addClass([this.overFlowWrapper], SHOW_TEXT);\n                }\n            }\n        }\n        if (!this.isRemoteData) {\n            this.setTreeValue();\n            this.setTreeText();\n            this.updateHiddenValue();\n            this.setSelectedValue();\n            if (!this.wrapText) {\n                this.updateView();\n            }\n        }\n        this.wireEvents();\n        let firstUl = select('.' + PARENTITEM, this.treeObj.element);\n        if (firstUl && firstUl.getAttribute('aria-multiselectable')) {\n            firstUl.removeAttribute('aria-multiselectable');\n        }\n        this.oldValue = this.value;\n        this.isInitialized = true;\n        this.renderComplete();\n    }\n    ensureAutoCheck() {\n        if (this.allowFiltering && this.treeSettings.autoCheck) {\n            this.setProperties({ treeSettings: { autoCheck: false } }, true);\n        }\n    }\n    hideCheckAll(flag) {\n        let checkAllEle = !isNullOrUndefined(this.popupEle) ? this.popupEle.querySelector('.' + CHECKALLPARENT) : null;\n        if (!isNullOrUndefined(checkAllEle)) {\n            if (flag && !checkAllEle.classList.contains(CHECKALLHIDE)) {\n                addClass([checkAllEle], CHECKALLHIDE);\n            }\n            else if (!flag && checkAllEle.classList.contains(CHECKALLHIDE)) {\n                removeClass([checkAllEle], CHECKALLHIDE);\n            }\n        }\n    }\n    renderFilter() {\n        this.filterContainer = this.createElement('div', {\n            id: this.element.id + '_filter_wrap',\n            className: FILTERWRAP\n        });\n        let filterInput = this.createElement('input', {\n            id: this.element.id + '_filter',\n            attrs: { autocomplete: 'off', 'aria-label': this.filterBarPlaceholder }\n        });\n        this.filterContainer.appendChild(filterInput);\n        prepend([this.filterContainer], this.popupEle);\n        this.filterObj = new TextBox({\n            value: '',\n            showClearButton: true,\n            placeholder: this.filterBarPlaceholder,\n            input: this.filterChangeHandler.bind(this),\n        });\n        this.filterObj.appendTo('#' + this.element.id + '_filter');\n    }\n    filterChangeHandler(args) {\n        if (!isNullOrUndefined(args.value)) {\n            window.clearTimeout(this.filterTimer);\n            this.filterTimer = window.setTimeout(() => { this.filterHandler(args.value, args.event); }, this.filterDelayTime);\n        }\n    }\n    filterHandler(value, event) {\n        if (!this.isFilteredData) {\n            this.treeData = this.treeObj.getTreeData();\n        }\n        let filterFields = this.cloneFields(this.fields);\n        let args = {\n            cancel: false,\n            preventDefaultAction: false,\n            event: event,\n            text: value,\n            fields: filterFields\n        };\n        this.trigger('filtering', args, (args) => {\n            if (!args.cancel) {\n                let flag = false;\n                let fields;\n                this.isFilteredData = true;\n                if (value === '') {\n                    this.isFilteredData = false;\n                    this.isFilterRestore = true;\n                    fields = this.cloneFields(this.fields);\n                }\n                else if (args.preventDefaultAction) {\n                    fields = args.fields;\n                }\n                else {\n                    if (this.treeDataType === 1) {\n                        fields = this.selfReferencefilter(value, args.fields);\n                    }\n                    else {\n                        if (this.fields.dataSource instanceof DataManager) {\n                            flag = true;\n                        }\n                        else {\n                            fields = this.nestedFilter(value, args.fields);\n                        }\n                    }\n                }\n                this.hideCheckAll(this.isFilteredData);\n                if (flag) {\n                    return;\n                }\n                this.treeObj.fields = this.getTreeFields(fields);\n                this.treeObj.dataBind();\n            }\n        });\n    }\n    nestedFilter(value, filteredFields) {\n        let matchedDataSource = [];\n        for (let i = 0; i < this.treeData.length; i++) {\n            let filteredChild = this.nestedChildFilter(value, this.treeData[i]);\n            if (!isNullOrUndefined(filteredChild)) {\n                matchedDataSource.push(filteredChild);\n            }\n        }\n        filteredFields.dataSource = matchedDataSource;\n        return filteredFields;\n    }\n    nestedChildFilter(value, node) {\n        let children = node[this.fields.child];\n        if (isNullOrUndefined(children)) {\n            return (this.isMatchedNode(value, node)) ? node : null;\n        }\n        else {\n            let matchedChildren = [];\n            for (let i = 0; i < children.length; i++) {\n                let filteredChild = this.nestedChildFilter(value, children[i]);\n                if (!isNullOrUndefined(filteredChild)) {\n                    matchedChildren.push(filteredChild);\n                }\n            }\n            if (matchedChildren.length !== 0) {\n                node[this.fields.child] = matchedChildren;\n                return node;\n            }\n            else {\n                node[this.fields.child] = null;\n                return (this.isMatchedNode(value, node)) ? node : null;\n            }\n        }\n    }\n    selfReferencefilter(value, filteredFields) {\n        let matchedData = [];\n        let matchedDataSource = [];\n        for (let i = 0; i < this.treeData.length; i++) {\n            if (this.isMatchedNode(value, this.treeData[i])) {\n                matchedData.push(this.treeData[i]);\n            }\n        }\n        for (let i = 0; i < matchedData.length; i++) {\n            if (matchedDataSource.indexOf(matchedData[i]) === -1) {\n                matchedDataSource.push(matchedData[i]);\n                let parentId = matchedData[i][this.fields.parentValue];\n                while (!isNullOrUndefined(parentId)) {\n                    let parent = null;\n                    for (let j = 0; j < this.treeData.length; j++) {\n                        let value = this.treeData[j][this.fields.value];\n                        if (!isNullOrUndefined(value) && (value === parentId)) {\n                            parent = this.treeData[j];\n                            break;\n                        }\n                    }\n                    if (!isNullOrUndefined(parent) && (matchedDataSource.indexOf(parent) === -1)) {\n                        matchedDataSource.push(parent);\n                        parentId = parent[this.fields.parentValue];\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n        filteredFields.dataSource = matchedDataSource;\n        return filteredFields;\n    }\n    isMatchedNode(value, node) {\n        let checkValue = node[this.fields.text];\n        if (this.ignoreCase) {\n            checkValue = checkValue.toLowerCase();\n            value = value.toLowerCase();\n        }\n        if (this.ignoreAccent) {\n            checkValue = DataUtil.ignoreDiacritics(checkValue);\n            value = DataUtil.ignoreDiacritics(value);\n        }\n        if (this.filterType === 'StartsWith') {\n            return checkValue.slice(0, value.length) === value;\n        }\n        else if (this.filterType === 'EndsWith') {\n            return checkValue.slice(-value.length) === value;\n        }\n        else {\n            return checkValue.indexOf(value) !== -1;\n        }\n    }\n    /* To wire events for the dropdown tree */\n    wireEvents() {\n        EventHandler.add(this.inputWrapper, 'mouseup', this.dropDownClick, this);\n        EventHandler.add(this.inputWrapper, 'focus', this.focusIn, this);\n        EventHandler.add(this.inputWrapper, 'blur', this.focusOut, this);\n        EventHandler.add(this.inputWrapper, 'mousemove', this.mouseIn, this);\n        EventHandler.add(this.inputWrapper, 'mouseout', this.onMouseLeave, this);\n        EventHandler.add(this.overAllClear, 'mousedown', this.clearAll, this);\n        EventHandler.add(window, 'resize', this.windowResize, this);\n        let formElement = closest(this.inputWrapper, 'form');\n        if (formElement) {\n            EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n        }\n        this.keyboardModule = new KeyboardEvents(this.inputWrapper, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n    }\n    wireTreeEvents() {\n        this.keyboardModule = new KeyboardEvents(this.tree, {\n            keyAction: this.treeAction.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n    }\n    wireCheckAllWrapperEvents() {\n        this.keyboardModule = new KeyboardEvents(this.checkAllParent, {\n            keyAction: this.checkAllAction.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n    }\n    /* To unwire events for the dropdown tree */\n    unWireEvents() {\n        EventHandler.remove(this.inputWrapper, 'mouseup', this.dropDownClick);\n        EventHandler.remove(this.inputWrapper, 'focus', this.focusIn);\n        EventHandler.remove(this.inputWrapper, 'blur', this.focusOut);\n        EventHandler.remove(this.inputWrapper, 'mousemove', this.mouseIn);\n        EventHandler.remove(this.inputWrapper, 'mouseout', this.onMouseLeave);\n        EventHandler.remove(this.overAllClear, 'mousedown', this.clearAll);\n        EventHandler.remove(window, 'resize', this.windowResize);\n        let formElement = closest(this.inputWrapper, 'form');\n        if (formElement) {\n            EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n        }\n    }\n    /* Trigger when the dropdown is clicked */\n    dropDownClick(e) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        if (this.isClearButtonClick) {\n            this.isClearButtonClick = false;\n            return;\n        }\n        if (!this.wrapText && e.target.classList.contains(CHIP_CLOSE)) {\n            this.removeChip(e);\n        }\n        if (this.isPopupOpen) {\n            this.hidePopup();\n        }\n        else {\n            this.focusIn(e);\n            this.renderPopup();\n        }\n        this.showOverAllClear();\n    }\n    mouseIn() {\n        if (this.enabled || !this.readonly) {\n            this.showOverAllClear();\n        }\n    }\n    onMouseLeave() {\n        if (!this.inputFocus) {\n            addClass([this.overAllClear], HIDEICON);\n            removeClass([this.inputWrapper], SHOW_CLEAR);\n        }\n    }\n    getDirective() {\n        return 'EJS-DROPDOWNTREE';\n    }\n    focusOut(e) {\n        if (!this.enabled || this.readonly || !this.inputFocus) {\n            return;\n        }\n        if ((Browser.isIE || Browser.info.name === 'edge') && (e.target === this.inputWrapper)) {\n            return;\n        }\n        let target = e.relatedTarget;\n        if ((target !== this.inputEle) && (isNullOrUndefined(target)) && (e.target !== this.inputWrapper || !this.isPopupOpen)) {\n            this.onFocusOut(e);\n        }\n    }\n    onFocusOut(event) {\n        this.inputFocus = false;\n        if (this.isPopupOpen) {\n            this.hidePopup();\n        }\n        if (this.isClearButtonClick) {\n            this.isClearButtonClick = false;\n        }\n        if (this.showClearButton) {\n            this.clearIconWidth = select('.e-clear-icon', this.inputWrapper).offsetWidth;\n            addClass([this.overAllClear], HIDEICON);\n            removeClass([this.inputWrapper], SHOW_CLEAR);\n        }\n        removeClass([this.inputWrapper], [INPUTFOCUS]);\n        if ((this.allowMultiSelection || this.showCheckBox)) {\n            let isValue = this.value ? (this.value.length ? true : false) : false;\n            if (this.mode !== 'Delimiter') {\n                if (this.chipWrapper && (this.mode === 'Default')) {\n                    addClass([this.chipWrapper], HIDEICON);\n                    removeClass([this.inputWrapper], SHOW_CHIP);\n                    removeClass([this.inputEle], CHIP_INPUT);\n                }\n            }\n            if (!this.wrapText && isValue) {\n                this.updateView();\n            }\n        }\n        if (this.changeOnBlur) {\n            this.triggerChangeEvent(event);\n        }\n        this.removeValue = false;\n        this.oldValue = this.value;\n        this.trigger('blur');\n    }\n    updateView() {\n        if (!this.showCheckBox && !this.allowMultiSelection) {\n            return;\n        }\n        if (this.mode !== 'Box') {\n            addClass([this.inputWrapper, this.overFlowWrapper], SHOW_TEXT);\n        }\n        else {\n            addClass([this.inputWrapper], SHOW_CHIP);\n        }\n        if (this.value && this.value.length !== 0) {\n            if (this.inputWrapper.contains(this.chipWrapper)) {\n                addClass([this.chipWrapper], HIDEICON);\n            }\n            addClass([this.inputEle], CHIP_INPUT);\n            this.updateOverFlowView();\n            this.ensurePlaceHolder();\n        }\n    }\n    triggerChangeEvent(event) {\n        let isEqual = this.compareValues(this.oldValue, this.value);\n        if ((!isEqual || this.isChipDelete) && !this.removeValue) {\n            let eventArgs = {\n                e: event,\n                oldValue: this.oldValue,\n                value: this.value,\n                isInteracted: event ? true : false,\n                element: this.element\n            };\n            this.trigger('change', eventArgs);\n        }\n    }\n    compareValues(oldValue, newValue) {\n        if (oldValue === null || oldValue.length === 0) {\n            let isValid = oldValue === null ? ((newValue === oldValue) ? true : false) :\n                (oldValue.length === 0 ? (newValue === oldValue) : false);\n            return isValid;\n        }\n        else if (oldValue.length !== newValue.length) {\n            return false;\n        }\n        for (let i = 0; i < oldValue.length; i++) {\n            if (oldValue[i] !== newValue[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    focusIn(e) {\n        if (!this.enabled || this.readonly || this.inputFocus) {\n            return;\n        }\n        this.showOverAllClear();\n        this.inputFocus = true;\n        addClass([this.inputWrapper], [INPUTFOCUS]);\n        if (this.allowMultiSelection || this.showCheckBox) {\n            if (this.mode !== 'Delimiter' && this.inputFocus) {\n                if (this.chipWrapper && (this.value && this.value.length !== 0)) {\n                    removeClass([this.chipWrapper], HIDEICON);\n                    addClass([this.inputEle], CHIP_INPUT);\n                }\n                addClass([this.inputWrapper], SHOW_CHIP);\n                if (this.popupObj) {\n                    this.popupObj.refreshPosition();\n                }\n            }\n            if (!this.wrapText) {\n                if (this.inputWrapper.contains(this.overFlowWrapper)) {\n                    addClass([this.overFlowWrapper], HIDEICON);\n                }\n                if (this.mode === 'Delimiter') {\n                    removeClass([this.inputWrapper], SHOW_CHIP);\n                    removeClass([this.inputEle], CHIP_INPUT);\n                }\n                else {\n                    addClass([this.inputWrapper], SHOW_CHIP);\n                }\n                removeClass([this.inputWrapper], SHOW_TEXT);\n                this.ensurePlaceHolder();\n            }\n        }\n        let args = { isInteracted: e ? true : false, event: e };\n        this.trigger('focus', args);\n    }\n    treeAction(e) {\n        let eventArgs = {\n            cancel: false,\n            event: e,\n        };\n        this.trigger('keyPress', eventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'escape':\n                    case 'altUp':\n                        this.inputWrapper.focus();\n                        e.preventDefault();\n                        if (this.isPopupOpen) {\n                            this.hidePopup();\n                        }\n                        break;\n                    case 'tab':\n                    case 'shiftTab':\n                        if (this.isPopupOpen) {\n                            this.hidePopup();\n                        }\n                        break;\n                    case 'enter':\n                    case 'ctrlEnter':\n                    case 'shiftEnter':\n                    case 'csEnter':\n                        if (!this.showCheckBox) {\n                            this.isValueChange = true;\n                            this.keyEventArgs = e;\n                        }\n                        break;\n                    case 'space':\n                        this.isValueChange = true;\n                        this.keyEventArgs = e;\n                        break;\n                    case 'ctrlA':\n                        if (this.allowMultiSelection) {\n                            this.selectAll(true);\n                        }\n                        break;\n                    case 'moveRight':\n                    case 'moveLeft':\n                    case 'shiftDown':\n                    case 'moveDown':\n                    case 'ctrlDown':\n                    case 'csDown':\n                    case 'shiftUp':\n                    case 'moveUp':\n                    case 'ctrlUp':\n                    case 'csUp':\n                    case 'home':\n                    case 'shiftHome':\n                    case 'ctrlHome':\n                    case 'csHome':\n                    case 'end':\n                    case 'shiftEnd':\n                    case 'ctrlEnd':\n                    case 'csEnd':\n                }\n            }\n            else {\n                e.stopImmediatePropagation();\n            }\n        });\n    }\n    keyActionHandler(e) {\n        let eventArgs = {\n            cancel: false,\n            event: e,\n        };\n        this.trigger('keyPress', eventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'escape':\n                    case 'altUp':\n                    case 'shiftTab':\n                    case 'tab':\n                        if (this.isPopupOpen) {\n                            this.hidePopup();\n                        }\n                        break;\n                    case 'altDown':\n                        if (!this.isPopupOpen) {\n                            this.showPopup();\n                            e.preventDefault();\n                        }\n                        break;\n                    case 'moveDown':\n                        if (this.showSelectAll && this.showCheckBox) {\n                            this.checkAllParent.focus();\n                        }\n                        break;\n                }\n            }\n        });\n    }\n    checkAllAction(e) {\n        let eventArgs = {\n            cancel: false,\n            event: e,\n        };\n        this.trigger('keyPress', eventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'space':\n                        this.clickHandler(e);\n                        break;\n                    case 'moveDown':\n                        this.treeObj.element.focus();\n                }\n            }\n        });\n    }\n    windowResize() {\n        if (this.popupObj) {\n            this.popupObj.setProperties({ width: this.setWidth() });\n            this.popupObj.refreshPosition();\n        }\n    }\n    resetValueHandler(e) {\n        let formElement = closest(this.inputWrapper, 'form');\n        if (formElement && e.target === formElement) {\n            this.resetValue(true);\n        }\n    }\n    getAriaAttributes() {\n        let disable = this.enabled ? 'false' : 'true';\n        return {\n            'aria-disabled': disable,\n            'aria-owns': this.element.id + '_options',\n            'role': 'listbox',\n            'aria-haspopup': 'true',\n            'aria-expanded': 'false',\n            'aria-activedescendant': 'null',\n            'aria-labelledby': this.hiddenElement.id\n        };\n    }\n    updateOverFlowView() {\n        this.overFlowWrapper.classList.remove(TOTAL_COUNT_WRAPPER);\n        removeClass([this.overFlowWrapper], HIDEICON);\n        if (this.value && this.value.length) {\n            let data = '';\n            let overAllContainer;\n            let temp;\n            let tempData;\n            let tempIndex = 1;\n            let wrapperleng;\n            let remaining;\n            let downIconWidth = 0;\n            this.overFlowWrapper.innerHTML = '';\n            let l10nLocale = { overflowCountTemplate: '+${count} more..', totalCountTemplate: '${count} selected' };\n            this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);\n            let remainContent = this.l10n.getConstant('overflowCountTemplate');\n            let remainElement = this.createElement('span', { className: REMAIN_WRAPPER });\n            let compiledString = compile(remainContent);\n            let totalCompiledString = compile(this.l10n.getConstant('totalCountTemplate'));\n            remainElement.appendChild(compiledString({ 'count': this.value.length }, null, null, null, !this.isStringTemplate)[0]);\n            this.overFlowWrapper.appendChild(remainElement);\n            let remainSize = remainElement.offsetWidth;\n            remove(remainElement);\n            if (this.showDropDownIcon) {\n                downIconWidth = select('.' + DDTICON, this.inputWrapper).offsetWidth;\n            }\n            if (!isNullOrUndefined(this.value)) {\n                if (this.mode !== 'Box') {\n                    for (let index = 0; !isNullOrUndefined(this.value[index]); index++) {\n                        data += (index === 0) ? '' : this.delimiterChar + ' ';\n                        temp = this.getOverflowVal(index);\n                        data += temp;\n                        temp = this.overFlowWrapper.innerHTML;\n                        this.overFlowWrapper.innerHTML = data;\n                        wrapperleng = this.overFlowWrapper.offsetWidth;\n                        overAllContainer = this.inputWrapper.offsetWidth;\n                        if ((wrapperleng + downIconWidth + this.clearIconWidth) > overAllContainer) {\n                            if (tempData !== undefined && tempData !== '') {\n                                temp = tempData;\n                                index = tempIndex + 1;\n                            }\n                            this.overFlowWrapper.innerHTML = temp;\n                            remaining = this.value.length - index;\n                            wrapperleng = this.overFlowWrapper.offsetWidth;\n                            while (((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) >= overAllContainer)\n                                && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== '') {\n                                let textArr = this.overFlowWrapper.innerHTML.split(this.delimiterChar);\n                                textArr.pop();\n                                this.overFlowWrapper.innerHTML = textArr.join(this.delimiterChar);\n                                remaining++;\n                                wrapperleng = this.overFlowWrapper.offsetWidth;\n                            }\n                            break;\n                        }\n                        else if ((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) <= overAllContainer) {\n                            tempData = data;\n                            tempIndex = index;\n                        }\n                        else if (index === 0) {\n                            tempData = '';\n                            tempIndex = -1;\n                        }\n                    }\n                }\n                else {\n                    addClass([this.chipWrapper], HIDEICON);\n                    let ele = this.chipWrapper.cloneNode(true);\n                    let chips = selectAll('.' + CHIP, ele);\n                    for (let i = 0; i < chips.length; i++) {\n                        temp = this.overFlowWrapper.innerHTML;\n                        this.overFlowWrapper.appendChild(chips[i]);\n                        data = this.overFlowWrapper.innerHTML;\n                        wrapperleng = this.overFlowWrapper.offsetWidth;\n                        overAllContainer = this.inputWrapper.offsetWidth;\n                        if ((wrapperleng + downIconWidth + this.clearIconWidth) > overAllContainer) {\n                            if (tempData !== undefined && tempData !== '') {\n                                temp = tempData;\n                                i = tempIndex + 1;\n                            }\n                            this.overFlowWrapper.innerHTML = temp;\n                            remaining = this.value.length - i;\n                            wrapperleng = this.overFlowWrapper.offsetWidth;\n                            while (((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) >= overAllContainer)\n                                && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== '') {\n                                this.overFlowWrapper.removeChild(this.overFlowWrapper.lastChild);\n                                remaining++;\n                                wrapperleng = this.overFlowWrapper.offsetWidth;\n                            }\n                            break;\n                        }\n                        else if ((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) <= overAllContainer) {\n                            tempData = data;\n                            tempIndex = i;\n                        }\n                        else if (i === 0) {\n                            tempData = '';\n                            tempIndex = -1;\n                        }\n                    }\n                }\n            }\n            if (remaining > 0) {\n                let totalWidth = overAllContainer - (downIconWidth + this.clearIconWidth);\n                this.overFlowWrapper.appendChild(this.updateRemainTemplate(remainElement, remaining, compiledString, totalCompiledString, totalWidth));\n            }\n            if (this.mode === 'Box' && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {\n                addClass([remainElement], REMAIN_COUNT);\n            }\n        }\n        else {\n            this.overFlowWrapper.innerHTML = '';\n            addClass([this.overFlowWrapper], HIDEICON);\n        }\n        this.updateDelimMode();\n    }\n    updateRemainTemplate(remainElement, remaining, compiledString, totalCompiledString, totalWidth) {\n        if (this.overFlowWrapper.firstChild && this.overFlowWrapper.firstChild.nodeType === 3 &&\n            this.overFlowWrapper.firstChild.nodeValue === '') {\n            this.overFlowWrapper.removeChild(this.overFlowWrapper.firstChild);\n        }\n        remainElement.innerHTML = '';\n        remainElement.appendChild((this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === 'Box')) ?\n            compiledString({ 'count': remaining }, null, null, null, !this.isStringTemplate)[0] :\n            totalCompiledString({ 'count': remaining }, null, null, null, !this.isStringTemplate)[0]);\n        if (this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === 'Box')) {\n            removeClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);\n        }\n        else {\n            addClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);\n            removeClass([this.overFlowWrapper], REMAIN_COUNT);\n        }\n        return remainElement;\n    }\n    getOverflowVal(index) {\n        let temp;\n        let selectedData = this.getSelectedData(this.value[index]);\n        temp = getValue(this.treeSettings.loadOnDemand ? this.fields.text : 'text', selectedData);\n        return temp;\n    }\n    updateDelimMode() {\n        if (this.mode !== 'Box') {\n            if (select('.' + REMAIN_WRAPPER, this.overFlowWrapper) && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {\n                addClass([this.overFlowWrapper], REMAIN_COUNT);\n                addClass([this.overFlowWrapper], SHOW_TEXT);\n            }\n            else {\n                this.overFlowWrapper.classList.remove(REMAIN_COUNT);\n                removeClass([this.overFlowWrapper], REMAIN_COUNT);\n            }\n        }\n        else if (select('.' + REMAIN_WRAPPER, this.overFlowWrapper)) {\n            this.overFlowWrapper.classList.remove(REMAIN_COUNT);\n        }\n    }\n    createHiddenElement() {\n        if (this.allowMultiSelection || this.showCheckBox) {\n            this.hiddenElement = this.createElement('select', {\n                attrs: { 'aria-hidden': 'true', 'class': HIDDENELEMENT, 'tabindex': '-1', 'multiple': '' }\n            });\n        }\n        else {\n            this.hiddenElement = this.createElement('select', {\n                attrs: { 'aria-hidden': 'true', 'tabindex': '-1', 'class': HIDDENELEMENT }\n            });\n        }\n        prepend([this.hiddenElement], this.inputWrapper);\n        this.validationAttribute();\n    }\n    createClearIcon() {\n        this.overAllClear = this.createElement('span', {\n            className: CLOSEICON_CLASS\n        });\n        addClass([this.overAllClear], HIDEICON);\n        removeClass([this.inputWrapper], SHOW_CLEAR);\n        if (this.showClearButton) {\n            this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);\n        }\n    }\n    validationAttribute() {\n        let name = this.inputEle.getAttribute('name') ? this.inputEle.getAttribute('name') : this.inputEle.getAttribute('id');\n        this.hiddenElement.setAttribute('name', name);\n        this.inputEle.removeAttribute('name');\n        let attributes$$1 = ['required', 'aria-required', 'form'];\n        for (let i = 0; i < attributes$$1.length; i++) {\n            let attr = this.inputEle.getAttribute(attributes$$1[i]);\n            if (attr) {\n                this.hiddenElement.setAttribute(attributes$$1[i], attr);\n                this.inputEle.removeAttribute(attributes$$1[i]);\n            }\n        }\n    }\n    createChip() {\n        if (!this.inputWrapper.contains(this.chipWrapper)) {\n            this.chipWrapper = this.createElement('span', {\n                className: CHIP_WRAPPER,\n            });\n            this.chipCollection = this.createElement('span', {\n                className: CHIP_COLLECTION\n            });\n            this.chipWrapper.appendChild(this.chipCollection);\n            this.inputWrapper.insertBefore(this.chipWrapper, this.hiddenElement);\n            addClass([this.inputWrapper], SHOW_CHIP);\n            let isValid = this.getValidMode();\n            if (isValid && this.value !== null) {\n                addClass([this.inputEle], CHIP_INPUT);\n            }\n            else if (this.value === null) {\n                addClass([this.chipWrapper], HIDEICON);\n            }\n        }\n    }\n    getValidMode() {\n        if (this.allowMultiSelection || this.showCheckBox) {\n            return this.mode === 'Box' ? true : (this.mode === 'Default' && this.inputFocus) ? true : false;\n        }\n        else {\n            return false;\n        }\n    }\n    createSelectAllWrapper() {\n        this.checkAllParent = this.createElement('div', {\n            className: CHECKALLPARENT, attrs: { 'tabindex': '0' }\n        });\n        this.selectAllSpan = this.createElement('span', {\n            className: ALLTEXT\n        });\n        this.selectAllSpan.textContent = '';\n        let ele = closest(this.element, '.' + BIGGER);\n        let touchClass = isNullOrUndefined(ele) ? '' : SMALL;\n        this.checkBoxElement = createCheckBox(this.createElement, true, { cssClass: touchClass });\n        this.checkBoxElement.setAttribute('role', 'checkbox');\n        this.checkAllParent.appendChild(this.checkBoxElement);\n        this.checkAllParent.appendChild(this.selectAllSpan);\n        this.setLocale();\n        EventHandler.add(this.checkAllParent, 'mouseup', this.clickHandler, this);\n        this.wireCheckAllWrapperEvents();\n    }\n    clickHandler(e) {\n        let target;\n        if ((e.currentTarget && e.currentTarget.classList.contains(CHECKALLPARENT))) {\n            target = e.currentTarget.firstElementChild.lastElementChild;\n        }\n        else {\n            target = e.target;\n        }\n        this.checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n        if (!isNullOrUndefined(this.checkWrapper)) {\n            let checkElement = select('.' + CHECKBOXFRAME, this.checkWrapper);\n            this.changeState(this.checkWrapper, checkElement.classList.contains(CHECK) ? 'uncheck' : 'check', e);\n        }\n        e.preventDefault();\n    }\n    changeState(wrapper, state, e) {\n        let ariaState;\n        let frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n        if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n            frameSpan.classList.add(CHECK);\n            ariaState = 'true';\n            if (!this.isReverseUpdate) {\n                this.treeObj.checkAll();\n                if (!this.changeOnBlur) {\n                    this.triggerChangeEvent(e);\n                }\n            }\n            this.setLocale(true);\n        }\n        else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK))) {\n            frameSpan.classList.remove(CHECK);\n            ariaState = 'false';\n            if (!this.isReverseUpdate) {\n                this.treeObj.uncheckAll();\n                if (!this.changeOnBlur) {\n                    this.triggerChangeEvent(e);\n                }\n            }\n            this.setLocale(false);\n        }\n        this.setMultiSelect();\n        this.ensurePlaceHolder();\n        ariaState = state === 'check' ? 'true' : 'false';\n        if (!isNullOrUndefined(ariaState)) {\n            wrapper.setAttribute('aria-checked', ariaState);\n        }\n    }\n    setLocale(unSelect) {\n        if (!this.selectAllSpan) {\n            return;\n        }\n        if (this.selectAllText !== 'Select All' || this.unSelectAllText !== 'Unselect All') {\n            let template = unSelect ? this.unSelectAllText : this.selectAllText;\n            let compiledString;\n            this.selectAllSpan.textContent = '';\n            compiledString = compile(template);\n            for (let item of compiledString({}, null, null, null, !this.isStringTemplate)) {\n                this.selectAllSpan.textContent = item.textContent;\n            }\n        }\n        else {\n            this.selectAllSpan.textContent = unSelect ? this.unSelectAllText : this.selectAllText;\n        }\n    }\n    setAttributes() {\n        this.element.removeAttribute('tabindex');\n        let id = this.element.getAttribute('id');\n        this.hiddenElement.id = id + '_hidden';\n        this.inputWrapper.setAttribute('tabindex', '0');\n        attributes(this.inputWrapper, this.getAriaAttributes());\n    }\n    setHTMLAttributes() {\n        if (Object.keys(this.htmlAttributes).length) {\n            for (let htmlAttr of Object.keys(this.htmlAttributes)) {\n                if (htmlAttr === 'class') {\n                    this.inputWrapper.classList.add(this.htmlAttributes[htmlAttr]);\n                }\n                else if (htmlAttr === 'disabled' && this.htmlAttributes[htmlAttr] === 'disabled') {\n                    this.setProperties({ enabled: false }, true);\n                    this.setEnable();\n                }\n                else if (htmlAttr === 'readonly' && !isNullOrUndefined(this.htmlAttributes[htmlAttr])) {\n                    this.setProperties({ readonly: true }, true);\n                    this.dataBind();\n                }\n                else if (htmlAttr === 'style') {\n                    this.inputWrapper.setAttribute('style', this.htmlAttributes[htmlAttr]);\n                }\n                else {\n                    let defaultAttr = ['title', 'id', 'placeholder', 'aria-placeholder',\n                        'role', 'autocorrect', 'autocomplete', 'autocapitalize', 'spellcheck', 'minlength', 'maxlength'];\n                    let validateAttr = ['name', 'required'];\n                    if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {\n                        this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                    }\n                    else if (defaultAttr.indexOf(htmlAttr) > -1) {\n                        htmlAttr === 'placeholder' ? Input.setPlaceholder(this.htmlAttributes[htmlAttr], this.inputEle) :\n                            this.inputEle.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                    }\n                    else {\n                        this.inputWrapper.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                    }\n                }\n            }\n        }\n    }\n    updateDataAttribute() {\n        let value = this.htmlAttributes;\n        let invalidAttr = ['class', 'style', 'id', 'type'];\n        let attr = {};\n        for (let a = 0; a < this.element.attributes.length; a++) {\n            if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 &&\n                !(this.element.attributes[a].name === 'readonly')) {\n                attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n            }\n        }\n        extend(attr, value, attr);\n        this.setProperties({ htmlAttributes: attr }, true);\n    }\n    showOverAllClear() {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        if (this.overAllClear) {\n            let isValue = this.value ? (this.value.length ? true : false) : false;\n            if (isValue && this.showClearButton) {\n                removeClass([this.overAllClear], HIDEICON);\n                addClass([this.inputWrapper], SHOW_CLEAR);\n            }\n            else {\n                addClass([this.overAllClear], HIDEICON);\n                removeClass([this.inputWrapper], SHOW_CLEAR);\n            }\n        }\n    }\n    setTreeValue() {\n        if (this.value !== null && this.value.length !== 0) {\n            let data;\n            if (this.showCheckBox || this.allowMultiSelection) {\n                for (let i = 0; i < this.value.length; i++) {\n                    data = this.treeObj.getTreeData(this.value[i])[0];\n                    if (isNullOrUndefined(data)) {\n                        this.value.splice(this.value.indexOf(this.value[i]), 1);\n                    }\n                }\n                if (this.value.length !== 0) {\n                    this.setValidValue();\n                }\n            }\n            else {\n                data = this.treeObj.getTreeData(this.value[0])[0];\n                if (!isNullOrUndefined(data)) {\n                    this.setProperties({ text: data[this.fields.text] }, true);\n                    this.setValidValue();\n                }\n                else {\n                    this.setProperties({ value: this.currentValue }, true);\n                }\n            }\n        }\n    }\n    setTreeText() {\n        if (this.value !== null && !this.isInitialized) {\n            return;\n        }\n        if (this.text !== null) {\n            let data;\n            let valArr = [];\n            if (this.showCheckBox || this.allowMultiSelection) {\n                let textArr = this.text.split(this.delimiterChar);\n                for (let i = 0; i < textArr.length; i++) {\n                    data = this.getItems(textArr[i]);\n                    if (!isNullOrUndefined(data)) {\n                        valArr.push(data[this.fields.value].toString());\n                    }\n                }\n                if (valArr.length !== 0) {\n                    this.oldValue = this.value;\n                    this.setProperties({ value: valArr }, true);\n                    this.setValidValue();\n                }\n                else {\n                    this.setProperties({ text: this.currentText }, true);\n                }\n            }\n            else {\n                data = this.getItems(this.text);\n                if (!isNullOrUndefined(data)) {\n                    this.oldValue = this.value;\n                    this.setProperties({ value: [data[this.fields.value].toString()] }, true);\n                    this.setValidValue();\n                }\n                else {\n                    this.setProperties({ text: this.currentText }, true);\n                }\n            }\n        }\n    }\n    setSelectedValue() {\n        if (this.value != null) {\n            return;\n        }\n        if (!this.isInitialized) {\n            this.oldValue = this.value;\n            if (this.treeObj.selectedNodes.length > 0 && !this.showCheckBox) {\n                this.setProperties({ value: this.treeObj.selectedNodes }, true);\n                if (this.allowMultiSelection) {\n                    this.updateMode();\n                }\n            }\n            else if (this.showCheckBox && this.treeObj.checkedNodes) {\n                if (this.treeObj.checkedNodes.length > 0) {\n                    this.setProperties({ value: this.treeObj.checkedNodes }, true);\n                    setValue('selectedNodes', [], this.treeObj);\n                    this.treeObj.dataBind();\n                    this.updateMode();\n                }\n            }\n            this.updateSelectedValues();\n            this.currentText = this.text;\n            this.currentValue = this.value;\n        }\n    }\n    setValidValue() {\n        if (!this.showCheckBox && !this.allowMultiSelection) {\n            Input.setValue(this.text, this.inputEle, this.floatLabelType);\n            let id = this.value[0].toString();\n            if (this.treeObj.selectedNodes[0] !== id) {\n                setValue('selectedNodes', [id], this.treeObj);\n            }\n        }\n        else {\n            if (this.showCheckBox) {\n                this.treeObj.checkedNodes = this.value.slice();\n                setValue('selectedNodes', [], this.treeObj);\n                this.treeObj.dataBind();\n                this.setMultiSelect();\n            }\n            else {\n                this.treeObj.selectedNodes = this.value.slice();\n                this.selectedText = [];\n                this.updateSelectedValues();\n            }\n            this.treeObj.dataBind();\n        }\n        this.currentText = this.text;\n        this.currentValue = this.value;\n        if (this.isInitialized) {\n            this.triggerChangeEvent();\n        }\n    }\n    getItems(givenText) {\n        let data;\n        if (this.treeDataType === 1) {\n            for (let i = 0; i < this.treeItems.length; i++) {\n                let text = getValue(this.fields.text, this.treeItems[i]);\n                if (!isNullOrUndefined(this.treeItems[i]) && !isNullOrUndefined(text) && text === givenText) {\n                    data = this.treeItems[i];\n                    break;\n                }\n            }\n        }\n        else {\n            data = this.getNestedItems(this.treeItems, this.fields, givenText);\n        }\n        return data;\n    }\n    getNestedItems(data, field, givenText) {\n        let newData;\n        for (let i = 0, objlen = data.length; i < objlen; i++) {\n            let dataId = getValue(this.fields.text, data[i]);\n            if (data[i] && dataId && dataId.toString() === givenText) {\n                return data[i];\n            }\n            else if (typeof field.child === 'string' && !isNullOrUndefined(getValue(field.child, data[i]))) {\n                let childData = getValue(field.child, data[i]);\n                newData = this.getNestedItems(childData, this.getChildType(field), givenText);\n                if (newData !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', data[i]))) {\n                let child = 'child';\n                newData = this.getNestedItems(getValue(child, data[i]), this.getChildType(field), givenText);\n                if (newData !== undefined) {\n                    break;\n                }\n            }\n        }\n        return newData;\n    }\n    getChildType(mapper) {\n        return (typeof mapper.child === 'string' || isNullOrUndefined(mapper.child)) ? mapper : mapper.child;\n    }\n    /* To render the treeview */\n    renderTree() {\n        this.treeObj = new TreeView({\n            fields: this.getTreeFields(this.fields),\n            enableRtl: this.enableRtl,\n            nodeSelected: this.onNodeSelected.bind(this),\n            nodeChecked: this.onNodeChecked.bind(this),\n            nodeChecking: this.beforeCheck.bind(this),\n            actionFailure: this.onActionFailure.bind(this),\n            nodeClicked: this.onNodeClicked.bind(this),\n            dataBound: this.OnDataBound.bind(this),\n            allowMultiSelection: this.allowMultiSelection,\n            showCheckBox: this.showCheckBox,\n            autoCheck: this.treeSettings.autoCheck,\n            sortOrder: this.sortOrder,\n            expandOn: this.treeSettings.expandOn,\n            loadOnDemand: this.treeSettings.loadOnDemand,\n            nodeSelecting: this.onBeforeSelect.bind(this),\n            nodeTemplate: this.itemTemplate\n        });\n        this.treeObj.appendTo('#' + this.tree.id);\n    }\n    /* To render the popup element */\n    renderPopup() {\n        if (this.isFilteredData) {\n            this.filterObj.value = '';\n            this.treeObj.fields = this.getTreeFields(this.fields);\n            this.isFilterRestore = true;\n            this.isFilteredData = false;\n            this.hideCheckAll(false);\n        }\n        let isCancelled = false;\n        let args = { cancel: false };\n        this.trigger('beforeOpen', args, (args) => {\n            if (!args.cancel) {\n                addClass([this.inputWrapper], [ICONANIMATION]);\n                if (this.isFirstRender) {\n                    this.popupEle = this.createElement('div', {\n                        id: this.element.id + '_popup', className: POPUP_CLASS + ' ' + (this.cssClass != null ? this.cssClass : '')\n                    });\n                    document.body.appendChild(this.popupEle);\n                    this.createPopup(this.popupEle);\n                }\n                else {\n                    this.popupEle = this.popupObj.element;\n                }\n            }\n            else {\n                isCancelled = true;\n            }\n            if (this.isFirstRender && !isCancelled) {\n                prepend([this.popupDiv], this.popupEle);\n                this.popupDiv.style.display = 'block';\n                if (this.allowFiltering) {\n                    this.renderFilter();\n                }\n                if (this.showCheckBox && this.showSelectAll && (!this.popupDiv.classList.contains(NODATA))) {\n                    this.createSelectAllWrapper();\n                    this.popupEle.insertBefore(this.checkAllParent, this.popupDiv);\n                }\n                if (this.headerTemplate) {\n                    this.setHeaderTemplate();\n                }\n                if (this.footerTemplate) {\n                    this.setFooterTemplate();\n                }\n                this.isFirstRender = false;\n            }\n            if (!isCancelled) {\n                attributes(this.inputWrapper, { 'aria-expanded': 'true' });\n                this.popupObj.show(null, (this.zIndex === 1000) ? this.inputEle : null);\n                this.popupEle.style.display = 'block';\n                this.updatePopupHeight();\n                this.popupObj.refreshPosition();\n                if (!(this.showCheckBox && this.showSelectAll) && (!this.popupDiv.classList.contains(NODATA)\n                    && this.treeItems.length > 0)) {\n                    this.treeObj.element.focus();\n                }\n                if (this.checkSelectAll && this.checkBoxElement) {\n                    let wrap = closest(this.checkBoxElement, '.' + CHECKBOXWRAP);\n                    this.changeState(wrap, 'check');\n                    this.checkSelectAll = false;\n                }\n                if (this.allowFiltering) {\n                    removeClass([this.inputWrapper], [INPUTFOCUS]);\n                    this.filterObj.element.focus();\n                }\n                let eventArgs = { popup: this.popupObj };\n                this.trigger('open', eventArgs);\n            }\n        });\n    }\n    updatePopupHeight() {\n        if (this.isFirstRender) {\n            return;\n        }\n        let popupHeight = this.getHeight();\n        this.popupEle.style.maxHeight = popupHeight;\n        if (this.allowFiltering) {\n            let height = Math.round(this.filterContainer.getBoundingClientRect().height);\n            popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n        }\n        if (this.headerTemplate) {\n            let height = Math.round(this.header.getBoundingClientRect().height);\n            popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n        }\n        if (this.showCheckBox && this.showSelectAll) {\n            let height = Math.round(this.checkAllParent.getBoundingClientRect().height);\n            popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n        }\n        if (this.footerTemplate) {\n            let height = Math.round(this.footer.getBoundingClientRect().height);\n            popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n        }\n        let border = parseInt(window.getComputedStyle(this.popupEle).borderTopWidth, 10);\n        border = border + parseInt(window.getComputedStyle(this.popupEle).borderBottomWidth, 10);\n        popupHeight = formatUnit(parseInt(popupHeight, 10) - border + 'px');\n        this.popupDiv.style.maxHeight = popupHeight;\n    }\n    createPopup(element) {\n        if (this.isFirstRender) {\n            this.popupObj = new Popup(element, {\n                width: this.setWidth(),\n                targetType: 'relative',\n                collision: { X: 'flip', Y: 'flip' },\n                relateTo: this.inputWrapper,\n                zIndex: this.zIndex,\n                enableRtl: this.enableRtl,\n                position: { X: 'left', Y: 'bottom' },\n                close: () => {\n                    this.isPopupOpen = false;\n                },\n                open: () => {\n                    EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n                    this.isPopupOpen = true;\n                },\n                targetExitViewport: () => {\n                    if (!Browser.isDevice) {\n                        this.hidePopup();\n                    }\n                }\n            });\n        }\n    }\n    /* To calculate the width when change via set model */\n    setElementWidth(inputWidth) {\n        let ddElement = this.inputWrapper;\n        if (!isNullOrUndefined(inputWidth)) {\n            if (typeof inputWidth === 'number') {\n                ddElement.style.width = formatUnit(inputWidth);\n            }\n            else if (typeof inputWidth === 'string') {\n                ddElement.style.width = (inputWidth.match(/px|%|em/)) ? (inputWidth) :\n                    (formatUnit(inputWidth));\n            }\n        }\n    }\n    /* To calculate the width of the popup */\n    setWidth() {\n        let width = formatUnit(this.popupWidth);\n        if (width.indexOf('%') > -1) {\n            let inputWidth = this.inputWrapper.offsetWidth * parseFloat(width) / 100;\n            width = inputWidth.toString() + 'px';\n        }\n        else if (typeof this.popupWidth === 'string') {\n            width = (this.popupWidth.match(/px|em/)) ? (this.popupWidth) : width;\n        }\n        return width;\n    }\n    /* To calculate the height of the popup */\n    getHeight() {\n        let height = formatUnit(this.popupHeight);\n        if (height.indexOf('%') > -1) {\n            // Will set the height of the popup according to the view port height\n            let viewPortHeight = document.documentElement.clientHeight * parseFloat(height) / 100;\n            height = viewPortHeight.toString() + 'px';\n        }\n        else if (typeof this.popupHeight === 'string') {\n            height = (this.popupHeight.match(/px|em/)) ? (this.popupHeight) : height;\n        }\n        return height;\n    }\n    onDocumentClick(e) {\n        let target = e.target;\n        let isTree = closest(target, '.' + PARENTITEM);\n        let isFilter = closest(target, '.' + FILTERWRAP);\n        let isScroller = target.classList.contains(DROPDOWN) ? true :\n            (matches(target, '.e-ddt .e-popup') || matches(target, '.e-ddt .e-treeview'));\n        if ((this.isPopupOpen && (this.inputWrapper.contains(target) || isTree || isFilter || isScroller)) ||\n            ((this.allowMultiSelection || this.showCheckBox) && (this.isPopupOpen && target.classList.contains(CHIP_CLOSE) ||\n                (this.isPopupOpen && (target.classList.contains(CHECKALLPARENT) || target.classList.contains(ALLTEXT)\n                    || target.classList.contains(CHECKBOXFRAME)))))) {\n            this.isDocumentClick = false;\n            e.preventDefault();\n        }\n        else if (!this.inputWrapper.contains(target) && this.inputFocus) {\n            this.focusOut(e);\n        }\n    }\n    onActionFailure(e) {\n        this.trigger('actionFailure', e);\n        this.l10nUpdate(true);\n        addClass([this.popupDiv], NODATA);\n    }\n    OnDataBound(args) {\n        this.treeItems = args.data;\n        if (this.treeItems.length <= 0) {\n            this.l10nUpdate();\n            addClass([this.popupDiv], NODATA);\n            this.hideCheckAll(true);\n        }\n        else if (this.popupDiv.classList.contains(NODATA) && this.treeItems.length >= 1) {\n            removeClass([this.popupDiv], NODATA);\n            this.hideCheckAll(false);\n        }\n        this.treeDataType = this.getTreeDataType(this.treeItems, this.fields);\n        if (this.isFirstRender && this.isRemoteData) {\n            this.setTreeValue();\n            this.setTreeText();\n            this.updateHiddenValue();\n            this.setSelectedValue();\n            if (!this.wrapText) {\n                this.updateView();\n            }\n            this.treeObj.element.focus();\n        }\n        let eventArgs = { data: args.data };\n        this.trigger('dataBound', eventArgs);\n        if (this.isFilteredData) {\n            this.treeObj.expandAll();\n        }\n        if (this.isFilterRestore) {\n            this.restoreFilterSelection();\n            this.isFilterRestore = false;\n        }\n    }\n    restoreFilterSelection() {\n        if (this.showCheckBox) {\n            this.treeObj.checkedNodes = this.value ? this.value : [];\n        }\n        else {\n            this.treeObj.selectedNodes = this.value ? this.value : [];\n        }\n    }\n    /* To set cssclass for the dropdowntree */\n    setCssClass(newClass, oldClass) {\n        let elements = this.popupObj ? [this.inputWrapper, this.popupObj.element] : [this.inputWrapper];\n        if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n            removeClass(elements, oldClass.split(' '));\n        }\n        if (!isNullOrUndefined(newClass) && newClass !== '') {\n            addClass(elements, newClass.split(' '));\n        }\n    }\n    setEnableRTL(state) {\n        if (state) {\n            this.inputWrapper.classList.add(RTL);\n        }\n        else {\n            this.inputWrapper.classList.remove(RTL);\n        }\n        if (this.popupObj) {\n            this.popupObj.enableRtl = state;\n            this.popupObj.dataBind();\n        }\n        if (this.treeObj) {\n            this.treeObj.enableRtl = state;\n            this.treeObj.dataBind();\n        }\n    }\n    /* To set enable property */\n    setEnable() {\n        Input.setEnabled(this.enabled, this.inputEle);\n        if (this.enabled) {\n            removeClass([this.inputWrapper], DISABLED);\n            this.inputEle.setAttribute('aria-disabled', 'false');\n            this.inputWrapper.setAttribute('aria-disabled', 'false');\n        }\n        else {\n            if (this.isPopupOpen) {\n                this.hidePopup();\n            }\n            addClass([this.inputWrapper], DISABLED);\n            if (this.inputWrapper && this.inputWrapper.classList.contains(INPUTFOCUS)) {\n                removeClass([this.inputWrapper], [INPUTFOCUS]);\n            }\n            this.inputEle.setAttribute('aria-disabled', 'true');\n            this.inputWrapper.setAttribute('aria-disabled', 'true');\n        }\n    }\n    cloneFields(fields) {\n        let clonedField = {\n            dataSource: fields.dataSource, value: fields.value, text: fields.text, parentValue: fields.parentValue,\n            child: this.cloneChildField(fields.child), hasChildren: fields.hasChildren, expanded: fields.expanded,\n            iconCss: fields.iconCss, imageUrl: fields.imageUrl, htmlAttributes: fields.htmlAttributes, query: fields.query,\n            selected: fields.selected, tableName: fields.tableName, tooltip: fields.tooltip\n        };\n        return clonedField;\n    }\n    cloneChildField(fields) {\n        if (typeof fields === 'string') {\n            return fields;\n        }\n        else {\n            let clonedField = {\n                dataSource: fields.dataSource, value: fields.value, text: fields.text, parentValue: fields.parentValue,\n                child: (fields.child ? this.cloneChildField(fields.child) : null), hasChildren: fields.hasChildren,\n                expanded: fields.expanded, iconCss: fields.iconCss, imageUrl: fields.imageUrl, htmlAttributes: fields.htmlAttributes,\n                query: fields.query, selected: fields.selected, tableName: fields.tableName, tooltip: fields.tooltip\n            };\n            return clonedField;\n        }\n    }\n    getTreeFields(fields) {\n        let treeFields = {\n            dataSource: fields.dataSource, id: fields.value, text: fields.text, parentID: fields.parentValue,\n            child: this.getTreeChildren(fields.child), hasChildren: fields.hasChildren, expanded: fields.expanded,\n            iconCss: fields.iconCss, imageUrl: fields.imageUrl, isChecked: fields.selected,\n            htmlAttributes: fields.htmlAttributes, query: fields.query, selected: fields.selected,\n            tableName: fields.tableName, tooltip: fields.tooltip\n        };\n        return treeFields;\n    }\n    getTreeChildren(mapper) {\n        if (typeof mapper === 'string') {\n            return mapper;\n        }\n        else if (!isNullOrUndefined(mapper)) {\n            let childFields;\n            mapper = this.getActualProperties(mapper);\n            childFields = mapper;\n            if (mapper.value) {\n                childFields.id = mapper.value;\n            }\n            if (mapper.parentValue) {\n                childFields.parentID = mapper.parentValue;\n            }\n            if (mapper.child) {\n                childFields.child = this.getTreeChildren(mapper.child);\n            }\n            if (mapper.selected && this.showCheckBox) {\n                childFields.isChecked = mapper.selected;\n            }\n            return childFields;\n        }\n        return null;\n    }\n    getTreeDataType(ds, field) {\n        if (this.fields.dataSource instanceof DataManager) {\n            for (let i = 0; i < ds.length; i++) {\n                if ((typeof field.child === 'string') && isNullOrUndefined(getValue(field.child, ds[i]))) {\n                    return 1;\n                }\n            }\n            return 2;\n        }\n        for (let i = 0, len = ds.length; i < len; i++) {\n            if ((typeof field.child === 'string') && !isNullOrUndefined(getValue(field.child, ds[i]))) {\n                return 2;\n            }\n            if (!isNullOrUndefined(getValue(field.parentValue, ds[i])) || !isNullOrUndefined(getValue(field.hasChildren, ds[i]))) {\n                return 1;\n            }\n        }\n        return 1;\n    }\n    /* Triggers when the tree fields is changed dynamically */\n    setFields() {\n        this.resetValue();\n        this.treeObj.fields = this.getTreeFields(this.fields);\n        this.treeObj.dataBind();\n    }\n    getEventArgs(args) {\n        let checkData = args.data;\n        let selectData = args.nodeData;\n        let state;\n        if (this.showCheckBox) {\n            if (args.action === 'check') {\n                state = 'select';\n            }\n            else if (args.action === 'uncheck') {\n                state = 'un-select';\n            }\n        }\n        let eventArgs = {\n            action: this.showCheckBox ? state : args.action,\n            isInteracted: args.isInteracted,\n            item: args.node,\n            itemData: this.showCheckBox ? checkData[0] : selectData\n        };\n        return eventArgs;\n    }\n    onBeforeSelect(args) {\n        if (args.isInteracted) {\n            this.oldValue = this.value ? this.value.slice() : this.value;\n            if (this.value === null) {\n                this.setProperties({ value: [] }, true);\n            }\n        }\n    }\n    updateHiddenValue() {\n        if (this.allowMultiSelection || this.showCheckBox) {\n            return;\n        }\n        if (this.value && this.value.length) {\n            this.hiddenElement.innerHTML = '<option selected value =\"' + this.value[0] + '\">' + this.text + '</option>';\n        }\n        else {\n            this.hiddenElement.innerHTML = '';\n        }\n    }\n    /* Triggers when the tree node is selected */\n    onNodeSelected(args) {\n        if (this.showCheckBox) {\n            return;\n        }\n        let selectedText;\n        if (args.isInteracted) {\n            let id = getValue('id', args.nodeData).toString();\n            if (!this.allowMultiSelection) {\n                this.hiddenElement.innerHTML = '';\n                this.setProperties({ value: [id] }, true);\n                if (this.itemTemplate) {\n                    selectedText = getValue('text', this.treeObj.getNode(id));\n                }\n                else {\n                    selectedText = getValue('text', args.nodeData).toString();\n                }\n                Input.setValue(selectedText, this.inputEle, this.floatLabelType);\n                this.setProperties({ text: selectedText }, true);\n                this.currentText = this.text;\n                this.currentValue = this.value;\n                attributes(this.inputWrapper, { 'aria-describedby': this.element.id });\n                attributes(this.inputWrapper, { 'aria-activedescendant': id.toString() });\n                this.updateHiddenValue();\n                this.showOverAllClear();\n                this.hidePopup();\n                this.isNodeSelected = true;\n            }\n            else if (this.allowMultiSelection) {\n                this.setMultiSelect();\n            }\n        }\n        let eventArgs = this.getEventArgs(args);\n        this.trigger('select', eventArgs);\n        if (this.isValueChange && !this.changeOnBlur) {\n            this.triggerChangeEvent(this.keyEventArgs);\n            this.isValueChange = false;\n        }\n    }\n    onNodeClicked(args) {\n        if (!this.changeOnBlur && this.isNodeSelected) {\n            this.triggerChangeEvent(args.event);\n            this.isNodeSelected = false;\n        }\n        let target = args.event.target;\n        if ((target.classList.contains('e-fullrow') || target.classList.contains('e-list-text')) && this.showCheckBox) {\n            let getNodeDetails = this.treeObj.getNode(args.node);\n            if (getNodeDetails.isChecked === 'true') {\n                this.treeObj.uncheckAll([args.node]);\n            }\n            else {\n                this.treeObj.checkAll([args.node]);\n            }\n            this.setMultiSelect();\n            this.ensurePlaceHolder();\n        }\n        if (!this.changeOnBlur && (this.allowMultiSelection || this.showCheckBox)) {\n            this.triggerChangeEvent(args.event);\n        }\n    }\n    onNodeChecked(args) {\n        let eventArgs = this.getEventArgs(args);\n        this.trigger('select', eventArgs);\n        if (this.isFilteredData && args.action === 'uncheck') {\n            let id = getValue('id', args.data[0]).toString();\n            this.removeSelectedData(id, true);\n        }\n        if (!this.isChipDelete && args.isInteracted) {\n            this.setMultiSelect();\n            this.ensurePlaceHolder();\n        }\n        if (this.showSelectAll && this.checkBoxElement) {\n            let nodes = this.treeObj.element.querySelectorAll('li');\n            let checkedNodes = this.treeObj.element.querySelectorAll('li .e-checkbox-wrapper[aria-checked=true]');\n            let wrap = closest(this.checkBoxElement, '.' + CHECKBOXWRAP);\n            if (wrap && args.action === 'uncheck') {\n                this.isReverseUpdate = true;\n                this.changeState(wrap, 'uncheck');\n                this.isReverseUpdate = false;\n            }\n            else if (wrap && args.action === 'check' && checkedNodes.length === nodes.length) {\n                this.isReverseUpdate = true;\n                this.changeState(wrap, 'check');\n                this.isReverseUpdate = false;\n            }\n        }\n    }\n    beforeCheck(args) {\n        if (args.isInteracted) {\n            this.oldValue = this.value ? this.value.slice() : this.value;\n        }\n    }\n    updateClearButton(state) {\n        if (state) {\n            if (!this.inputWrapper.contains(this.overAllClear)) {\n                this.inputEle.parentElement.insertBefore(this.overAllClear, this.inputEle.nextSibling);\n            }\n            else {\n                removeClass([this.overAllClear], HIDEICON);\n                addClass([this.inputWrapper], SHOW_CLEAR);\n            }\n        }\n        else {\n            addClass([this.overAllClear], HIDEICON);\n            removeClass([this.inputWrapper], SHOW_CLEAR);\n        }\n        if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {\n            let chipClose = selectAll('.' + CHIP_CLOSE, this.chipWrapper);\n            for (let i = 0; i < chipClose.length; i++) {\n                if (!state) {\n                    addClass([chipClose[i]], HIDEICON);\n                }\n                else {\n                    removeClass([chipClose[i]], HIDEICON);\n                }\n            }\n        }\n    }\n    updateDropDownIconState(state) {\n        let spinIcon = select('.' + DDTICON, this.inputWrapper);\n        if (state) {\n            if (!spinIcon) {\n                Input.appendSpan(DROPDOWNICON, this.inputWrapper, this.createElement);\n            }\n            else {\n                removeClass([spinIcon], HIDEICON);\n            }\n            addClass([this.inputWrapper], SHOW_DD_ICON);\n        }\n        else {\n            addClass([spinIcon], HIDEICON);\n            removeClass([this.inputWrapper], SHOW_DD_ICON);\n        }\n    }\n    updateMode() {\n        if (this.mode !== 'Delimiter') {\n            if (!this.inputWrapper.contains(this.chipWrapper)) {\n                this.createChip();\n            }\n            let isValid = this.getValidMode();\n            if (this.chipWrapper.classList.contains(HIDEICON) && isValid) {\n                removeClass([this.chipWrapper], HIDEICON);\n                addClass([this.inputWrapper], SHOW_CHIP);\n            }\n            else if (!isValid) {\n                addClass([this.chipWrapper], HIDEICON);\n                removeClass([this.inputWrapper], SHOW_CHIP);\n            }\n            let isValue = this.value !== null ? (this.value.length !== 0 ? true : false) : false;\n            if (isValid && isValue) {\n                addClass([this.inputEle], CHIP_INPUT);\n            }\n            else {\n                removeClass([this.inputEle], CHIP_INPUT);\n            }\n        }\n        else if (this.inputEle.classList.contains(CHIP_INPUT)) {\n            removeClass([this.inputEle], CHIP_INPUT);\n            if (this.chipWrapper) {\n                addClass([this.chipWrapper], HIDEICON);\n                removeClass([this.inputWrapper], SHOW_CHIP);\n            }\n        }\n    }\n    ensurePlaceHolder() {\n        if (this.value && this.value.length === 0) {\n            removeClass([this.inputEle], CHIP_INPUT);\n            if (this.chipWrapper) {\n                addClass([this.chipWrapper], HIDEICON);\n            }\n        }\n    }\n    ensureClearIconPosition(floatLabelType) {\n        if (floatLabelType !== 'Never') {\n            this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);\n        }\n    }\n    setMultiSelectValue(newValues) {\n        if (!this.isFilteredData) {\n            this.setProperties({ value: newValues }, true);\n            if (newValues && newValues.length !== 0 && !this.showCheckBox) {\n                this.treeObj.selectedNodes = this.value.slice();\n                this.treeObj.dataBind();\n            }\n        }\n        else {\n            let selectedValues = isNullOrUndefined(this.value) ? [] : this.value;\n            for (let i = 0; i < newValues.length; i++) {\n                if (isNullOrUndefined(this.value) || this.value.indexOf(newValues[i]) === -1) {\n                    selectedValues.push(newValues[i]);\n                }\n            }\n            this.setProperties({ value: selectedValues }, true);\n        }\n    }\n    setMultiSelect() {\n        if (this.showCheckBox && !this.isDynamicChange) {\n            this.setMultiSelectValue(this.treeObj.checkedNodes);\n        }\n        else {\n            let ddtValue = this.allowMultiSelection ? (this.showCheckBox ? this.treeObj.checkedNodes\n                : this.treeObj.selectedNodes) : (this.value ? (this.showCheckBox ? this.value : [this.value[0]]) : null);\n            this.setMultiSelectValue(ddtValue);\n            if (this.showCheckBox && this.value !== null) {\n                this.treeObj.checkedNodes = this.value;\n                this.treeObj.dataBind();\n            }\n        }\n        this.selectedText = [];\n        let checkSelection = this.allowMultiSelection ? true : (this.showCheckBox ? true : false);\n        if (this.inputWrapper.contains(this.chipWrapper) && !checkSelection) {\n            removeClass([this.inputEle], CHIP_INPUT);\n            detach(this.chipWrapper);\n        }\n        let isValid = this.getValidMode();\n        if (isValid && this.value !== null) {\n            addClass([this.inputEle], CHIP_INPUT);\n            if (this.chipWrapper) {\n                removeClass([this.chipWrapper], HIDEICON);\n            }\n        }\n        let isValue = this.value ? (this.value.length ? true : false) : false;\n        if (this.chipWrapper && (this.mode === 'Box' && !isValue)) {\n            addClass([this.chipWrapper], HIDEICON);\n            removeClass([this.inputEle], CHIP_INPUT);\n        }\n        this.updateSelectedValues();\n    }\n    getSelectedData(value) {\n        let data = null;\n        if (this.isFilteredData) {\n            for (let i = 0; i < this.selectedData.length; i++) {\n                if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : 'id', this.selectedData[i]).toString() === value) {\n                    data = this.selectedData[i];\n                    break;\n                }\n            }\n        }\n        if (isNullOrUndefined(data)) {\n            if (this.treeSettings.loadOnDemand) {\n                data = this.treeObj.getTreeData(value)[0];\n            }\n            else {\n                data = this.treeObj.getNode(value);\n            }\n            if (!isNullOrUndefined(data)) {\n                this.selectedData.push(data);\n            }\n        }\n        return data;\n    }\n    removeSelectedData(value, muteOnChange) {\n        let selectedValues = isNullOrUndefined(this.value) ? [] : this.value.slice();\n        selectedValues.splice(selectedValues.indexOf(value), 1);\n        this.setProperties({ value: selectedValues }, muteOnChange);\n        for (let i = 0; i < this.selectedData.length; i++) {\n            if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : 'id', this.selectedData[i]).toString() === value) {\n                this.selectedData.splice(i, 1);\n                break;\n            }\n        }\n    }\n    updateSelectedValues() {\n        this.dataValue = '';\n        let temp;\n        let text;\n        let textValue = '';\n        let selectedData;\n        this.hiddenElement.innerHTML = '';\n        if ((!this.isChipDelete || this.treeSettings.autoCheck) && (this.inputWrapper.contains(this.chipWrapper))) {\n            this.chipCollection.innerHTML = '';\n        }\n        if (!this.isFilteredData) {\n            this.selectedData = [];\n        }\n        if (!isNullOrUndefined(this.value)) {\n            for (let i = 0, len = this.value.length; i < len; i++) {\n                selectedData = this.getSelectedData(this.value[i]);\n                text = getValue(this.treeSettings.loadOnDemand ? this.fields.text : 'text', selectedData);\n                this.selectedText.push(text);\n                temp = this.selectedText[this.selectedText.length - 1];\n                if (this.selectedText.length > 1) {\n                    this.dataValue += (this.delimiterChar + ' ' + temp);\n                    textValue += (',' + temp);\n                    this.setProperties({ text: textValue }, true);\n                }\n                else {\n                    this.dataValue += temp;\n                    textValue += temp;\n                }\n                if (this.mode !== 'Delimiter' && (!this.isChipDelete || this.treeSettings.autoCheck) &&\n                    (this.allowMultiSelection || this.showCheckBox)) {\n                    this.setChipValues(temp, this.value[i]);\n                }\n                this.hiddenElement.innerHTML += '<option selected value =\"' + this.value[i] + '\">' +\n                    this.selectedText[this.selectedText.length - 1] + '</option>';\n            }\n        }\n        let isValid = this.getValidMode();\n        if (this.mode !== 'Box' && (this.allowMultiSelection || this.showCheckBox) && !isValid) {\n            if (this.chipWrapper) {\n                addClass([this.chipWrapper], HIDEICON);\n                removeClass([this.inputWrapper], SHOW_CHIP);\n            }\n        }\n        Input.setValue(this.dataValue, this.inputEle, this.floatLabelType);\n        if (textValue === '') {\n            this.setProperties({ text: null }, true);\n        }\n        else {\n            this.setProperties({ text: textValue }, true);\n        }\n        if (this.showClearButton && this.inputFocus) {\n            this.showOverAllClear();\n        }\n        if ((this.allowMultiSelection || this.showCheckBox) && this.popupObj) {\n            this.popupObj.refreshPosition();\n        }\n        this.currentText = this.text;\n        this.currentValue = this.value;\n    }\n    setChipValues(text, value) {\n        if (!this.inputWrapper.contains(this.chipWrapper)) {\n            this.createChip();\n        }\n        let chip = this.createElement('span', {\n            className: CHIP,\n            attrs: { 'data-value': value }\n        });\n        let chipContent = this.createElement('span', { className: CHIP_CONTENT });\n        let chipClose = this.createElement('span', { className: CHIP_CLOSE + ' ' + ICONS });\n        chipContent.innerHTML = text;\n        chip.appendChild(chipContent);\n        this.chipCollection.appendChild(chip);\n        if (this.showClearButton) {\n            chip.appendChild(chipClose);\n            EventHandler.add(chipClose, 'mousedown', this.removeChip, this);\n        }\n    }\n    setSelectAllWrapper(state) {\n        if (this.isFirstRender) {\n            return;\n        }\n        if (state && !this.popupEle.contains(this.checkAllParent) && this.showCheckBox) {\n            this.createSelectAllWrapper();\n            this.popupEle.insertBefore(this.checkAllParent, this.popupDiv);\n        }\n        else if (this.popupEle.contains(this.checkAllParent)) {\n            detach(this.checkAllParent);\n            this.checkAllParent = null;\n        }\n    }\n    setHeaderTemplate() {\n        let compiledString;\n        if (this.header) {\n            this.header.innerHTML = '';\n        }\n        else {\n            this.header = this.createElement('div');\n            addClass([this.header], HEADER);\n        }\n        compiledString = this.templateComplier(this.headerTemplate);\n        for (let item of compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate)) {\n            this.header.appendChild(item);\n        }\n        this.ddtupdateBlazorTemplates(false, false, true, false);\n        this.popupEle.insertBefore(this.header, this.checkAllParent ? this.checkAllParent : this.popupDiv);\n    }\n    templateComplier(template) {\n        if (template) {\n            try {\n                if (document.querySelectorAll(template).length) {\n                    return compile(document.querySelector(template).innerHTML.trim());\n                }\n            }\n            catch (e) {\n                return compile(template);\n            }\n        }\n        return compile(template);\n    }\n    setFooterTemplate() {\n        let compiledString;\n        if (this.footer) {\n            this.footer.innerHTML = '';\n        }\n        else {\n            this.footer = this.createElement('div');\n            addClass([this.footer], FOOTER);\n        }\n        compiledString = this.templateComplier(this.footerTemplate);\n        for (let item of compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate)) {\n            this.footer.appendChild(item);\n        }\n        this.ddtupdateBlazorTemplates(false, false, false, true);\n        append([this.footer], this.popupEle);\n    }\n    clearAll(e) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        this.resetValue();\n        this.showOverAllClear();\n        if ((this.allowMultiSelection || this.showCheckBox)) {\n            if (this.popupObj) {\n                this.popupObj.refreshPosition();\n            }\n            if (!this.wrapText) {\n                this.updateOverflowWrapper(true);\n            }\n        }\n        if (e) {\n            this.isClearButtonClick = true;\n        }\n        if (!this.changeOnBlur) {\n            this.triggerChangeEvent(e);\n        }\n    }\n    removeChip(e) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        let element = e.target.parentElement;\n        let value = element.getAttribute('data-value');\n        if (this.chipCollection) {\n            if (element) {\n                remove(element);\n            }\n        }\n        this.isChipDelete = true;\n        this.isClearButtonClick = true;\n        this.removeSelectedData(value, true);\n        this.selectedText = [];\n        if (this.allowMultiSelection) {\n            this.treeObj.selectedNodes = this.value.slice();\n            this.updateSelectedValues();\n        }\n        if (this.showCheckBox) {\n            this.treeObj.uncheckAll([value]);\n            this.clearCheckAll();\n            this.setMultiSelect();\n        }\n        this.triggerChangeEvent(e);\n        this.isChipDelete = false;\n        this.ensurePlaceHolder();\n    }\n    resetValue(isDynamicChange) {\n        Input.setValue(null, this.inputEle, this.floatLabelType);\n        this.oldValue = this.value;\n        this.dataValue = null;\n        this.setProperties({ value: [] }, true);\n        this.setProperties({ text: null }, true);\n        this.selectedData = [];\n        setValue('selectedNodes', [], this.treeObj);\n        this.hiddenElement.innerHTML = '';\n        if (this.showCheckBox) {\n            this.treeObj.uncheckAll();\n            this.setMultiSelect();\n            this.clearCheckAll();\n        }\n        if (this.oldValue === null && !isDynamicChange) {\n            this.removeValue = true;\n        }\n        else if (isDynamicChange) {\n            this.triggerChangeEvent();\n        }\n        if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {\n            this.chipCollection.innerHTML = '';\n            this.ensurePlaceHolder();\n        }\n    }\n    clearCheckAll() {\n        if (this.showSelectAll && this.value.length === 0) {\n            this.setLocale(false);\n        }\n    }\n    selectAllItems(state) {\n        if (this.showCheckBox) {\n            state ? this.treeObj.checkAll() : this.treeObj.uncheckAll();\n            this.checkSelectAll = true;\n        }\n        else if (this.allowMultiSelection) {\n            if (!state) {\n                this.treeObj.selectedNodes = [];\n            }\n            else {\n                let li = selectAll('li', this.treeObj.element);\n                let id;\n                let arr = [];\n                for (let i = 0; i < li.length; i++) {\n                    id = li[i].getAttribute('data-uid').toString();\n                    arr.push(id);\n                }\n                this.treeObj.selectedNodes = arr;\n            }\n        }\n        this.updateMode();\n        this.setMultiSelect();\n        if (!this.wrapText) {\n            state ? this.updateView() : this.updateOverflowWrapper(true);\n        }\n    }\n    updateTreeSettings(prop) {\n        let value = Object.keys(prop.treeSettings)[0];\n        if (value === 'autoCheck') {\n            this.ensureAutoCheck();\n            this.treeObj.autoCheck = this.treeSettings.autoCheck;\n        }\n        else if (value === 'loadOnDemand') {\n            this.treeObj.loadOnDemand = this.treeSettings.loadOnDemand;\n        }\n        else if (value === 'expandOn') {\n            this.treeObj.expandOn = this.treeSettings.expandOn;\n            this.treeObj.dataBind();\n            return;\n        }\n        this.treeObj.dataBind();\n        this.setMultiSelect();\n    }\n    updateCheckBoxState(checkBox) {\n        if (!this.wrapText) {\n            this.updateOverflowWrapper(false);\n        }\n        this.treeObj.showCheckBox = checkBox;\n        this.treeObj.dataBind();\n        this.isDynamicChange = true;\n        this.setSelectAllWrapper(this.showSelectAll);\n        if (this.showSelectAll) {\n            this.setLocale();\n        }\n        if (this.showCheckBox) {\n            this.updateMode();\n        }\n        this.setMultiSelect();\n        this.isDynamicChange = false;\n    }\n    updateTemplate() {\n        if (this.popupObj) {\n            this.popupObj.destroy();\n            if (this.isPopupOpen) {\n                this.hidePopup();\n                this.isFirstRender = true;\n                this.renderPopup();\n            }\n            else {\n                this.isFirstRender = true;\n            }\n        }\n    }\n    l10nUpdate(actionFailure) {\n        if (this.noRecord) {\n            this.noRecord.innerHTML = '';\n        }\n        else {\n            this.noRecord = this.createElement('div');\n            addClass([this.noRecord], NODATACONTAINER);\n            prepend([this.noRecord], this.popupDiv);\n        }\n        if (this.noRecordsTemplate !== 'No Records Found' || this.actionFailureTemplate !== 'The Request Failed') {\n            let template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;\n            let compiledString;\n            let templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;\n            compiledString = this.templateComplier(template);\n            for (let item of compiledString({}, null, null, templateId, this.isStringTemplate)) {\n                this.noRecord.appendChild(item);\n            }\n            this.ddtupdateBlazorTemplates(!actionFailure, actionFailure);\n        }\n        else {\n            let l10nLocale = { noRecordsTemplate: 'No Records Found', actionFailureTemplate: 'The Request Failed' };\n            this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);\n            this.noRecord.innerHTML = actionFailure ?\n                this.l10n.getConstant('actionFailureTemplate') : this.l10n.getConstant('noRecordsTemplate');\n        }\n    }\n    ddtupdateBlazorTemplates(noRecord, action, header, footer, isEmpty) {\n        if (!this.isStringTemplate) {\n            if (this.noRecordsTemplate && noRecord) {\n                updateBlazorTemplate(this.noRecordsTemplateId, NORECORDSTEMPLATE, this, isEmpty);\n            }\n            if (this.actionFailureTemplate && action) {\n                updateBlazorTemplate(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE, this, isEmpty);\n            }\n            if (header) {\n                updateBlazorTemplate(this.headerTemplateId, HEADERTEMPLATE, this);\n            }\n            if (footer) {\n                updateBlazorTemplate(this.footerTemplateId, FOOTERTEMPLATE, this);\n            }\n        }\n    }\n    ddtresetBlazorTemplates(noRecord, action, header, footer) {\n        if (!this.isStringTemplate) {\n            if (this.noRecordsTemplate && noRecord) {\n                resetBlazorTemplate(this.noRecordsTemplateId, NORECORDSTEMPLATE);\n            }\n            if (this.actionFailureTemplate && action) {\n                resetBlazorTemplate(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE);\n            }\n            if (header) {\n                resetBlazorTemplate(this.headerTemplateId, HEADERTEMPLATE);\n            }\n            if (footer) {\n                resetBlazorTemplate(this.footerTemplateId, FOOTERTEMPLATE);\n            }\n        }\n    }\n    updateRecordTemplate(action) {\n        if (this.treeItems && this.treeItems.length <= 0) {\n            this.l10nUpdate(action);\n            this.updateTemplate();\n        }\n    }\n    updateOverflowWrapper(state) {\n        if (!state) {\n            if (!this.inputWrapper.contains(this.overFlowWrapper)) {\n                this.overFlowWrapper = this.createElement('span', { className: OVERFLOW_VIEW + ' ' + HIDEICON });\n                this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);\n            }\n        }\n        else if (this.inputWrapper.contains(this.overFlowWrapper) && state) {\n            this.overFlowWrapper.innerHTML = '';\n        }\n    }\n    updateMultiSelection(state) {\n        if (!this.wrapText) {\n            this.updateOverflowWrapper(false);\n        }\n        this.treeObj.allowMultiSelection = state;\n        this.treeObj.dataBind();\n        this.updateOption();\n        if (this.allowMultiSelection) {\n            this.updateMode();\n        }\n        this.setMultiSelect();\n    }\n    updateAllowFiltering(state) {\n        if (!this.isFirstRender) {\n            if (state) {\n                this.renderFilter();\n            }\n            else {\n                this.destroyFilter();\n            }\n        }\n        this.ensureAutoCheck();\n    }\n    updateFilterPlaceHolder() {\n        if (this.filterObj) {\n            this.filterObj.placeholder = this.filterBarPlaceholder;\n            this.filterObj.element.setAttribute('aria-label', this.filterBarPlaceholder);\n        }\n    }\n    updateValue(value) {\n        if (isNullOrUndefined(value) || value.length === 0) {\n            this.resetValue(true);\n        }\n        else {\n            this.setTreeValue();\n            if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n                this.updateOverflowWrapper(false);\n                this.updateView();\n            }\n        }\n        this.updateHiddenValue();\n    }\n    updateText(text) {\n        if (isNullOrUndefined(text)) {\n            this.resetValue();\n        }\n        else {\n            this.setTreeText();\n            if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n                this.updateOverflowWrapper(false);\n                this.updateView();\n            }\n        }\n        this.updateHiddenValue();\n    }\n    updateModelMode() {\n        let validMode = this.allowMultiSelection ? true : (this.showCheckBox ? true : false);\n        if (!validMode) {\n            return;\n        }\n        if (!this.wrapText) {\n            let overFlow = select('.' + OVERFLOW_VIEW, this.inputWrapper);\n            if (overFlow) {\n                overFlow.innerHTML = '';\n            }\n        }\n        this.updateMode();\n        this.setMultiSelect();\n        if (!this.wrapText && (this.value && this.value.length !== 0)) {\n            this.updateOverFlowView();\n            addClass([this.inputEle], CHIP_INPUT);\n            if (this.mode === 'Box') {\n                removeClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);\n            }\n            else {\n                addClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);\n            }\n        }\n    }\n    updateOption() {\n        if (!this.hiddenElement.hasAttribute('multiple') && (this.allowMultiSelection || this.showCheckBox)) {\n            this.hiddenElement.setAttribute('multiple', '');\n        }\n        else if (this.hiddenElement.hasAttribute('multiple') && (!this.allowMultiSelection && !this.showCheckBox)) {\n            this.hiddenElement.removeAttribute('multiple');\n        }\n    }\n    /**\n     * Dynamically change the value of properties.\n     * @private\n     */\n    // tslint:disable-next-line:max-func-body-length\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'width':\n                    this.setElementWidth(newProp.width);\n                    if (this.popupObj) {\n                        this.popupObj.element.style.width = this.setWidth();\n                    }\n                    break;\n                case 'placeholder':\n                    Input.setPlaceholder(newProp.placeholder, this.inputEle);\n                    break;\n                case 'cssClass':\n                    this.setCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'enableRtl':\n                    this.setEnableRTL(this.enableRtl);\n                    break;\n                case 'fields':\n                    this.setFields();\n                    break;\n                case 'readonly':\n                    Input.setReadonly(newProp.readonly, this.inputEle);\n                    break;\n                case 'enabled':\n                    this.setEnable();\n                    break;\n                case 'floatLabelType':\n                    Input.removeFloating(this.inputObj);\n                    Input.addFloating(this.inputEle, newProp.floatLabelType, this.placeholder, this.createElement);\n                    this.ensureClearIconPosition(newProp.floatLabelType);\n                    break;\n                case 'showClearButton':\n                    this.updateClearButton(newProp.showClearButton);\n                    break;\n                case 'allowFiltering':\n                    this.updateAllowFiltering(newProp.allowFiltering);\n                    break;\n                case 'filterBarPlaceholder':\n                    this.updateFilterPlaceHolder();\n                    break;\n                case 'value':\n                    this.updateValue(newProp.value);\n                    break;\n                case 'text':\n                    this.updateText(newProp.text);\n                    break;\n                case 'allowMultiSelection':\n                    this.updateMultiSelection(newProp.allowMultiSelection);\n                    break;\n                case 'mode':\n                    this.updateModelMode();\n                    break;\n                case 'delimiterChar':\n                    if (this.mode === 'Box') {\n                        return;\n                    }\n                    if (this.showCheckBox || this.allowMultiSelection) {\n                        this.setMultiSelect();\n                    }\n                    break;\n                case 'selectAllText':\n                    if (this.showCheckBox && this.showSelectAll) {\n                        this.setLocale();\n                    }\n                    break;\n                case 'unSelectAllText':\n                    if (this.showCheckBox && this.showSelectAll) {\n                        this.setLocale(false);\n                    }\n                    break;\n                case 'showSelectAll':\n                    if (this.showCheckBox) {\n                        this.setSelectAllWrapper(newProp.showSelectAll);\n                        this.updatePopupHeight();\n                    }\n                    break;\n                case 'showCheckBox':\n                    this.updateCheckBoxState(newProp.showCheckBox);\n                    this.updatePopupHeight();\n                    this.updateOption();\n                    break;\n                case 'treeSettings':\n                    this.updateTreeSettings(newProp);\n                    break;\n                case 'sortOrder':\n                    this.treeObj.sortOrder = newProp.sortOrder;\n                    this.treeObj.dataBind();\n                    break;\n                case 'showDropDownIcon':\n                    this.updateDropDownIconState(newProp.showDropDownIcon);\n                    break;\n                case 'popupWidth':\n                    if (this.popupObj) {\n                        this.popupObj.element.style.width = this.setWidth();\n                    }\n                    break;\n                case 'popupHeight':\n                    if (this.popupObj) {\n                        this.updatePopupHeight();\n                    }\n                    break;\n                case 'zIndex':\n                    if (this.popupObj) {\n                        this.popupObj.zIndex = newProp.zIndex;\n                        this.popupObj.dataBind();\n                    }\n                    break;\n                case 'headerTemplate':\n                    this.updateTemplate();\n                    break;\n                case 'footerTemplate':\n                    this.updateTemplate();\n                    break;\n                case 'itemTemplate':\n                    this.treeObj.nodeTemplate = newProp.itemTemplate;\n                    this.treeObj.dataBind();\n                    break;\n                case 'noRecordsTemplate':\n                    this.updateRecordTemplate();\n                    break;\n                case 'actionFailureTemplate':\n                    this.updateRecordTemplate(true);\n                    break;\n                case 'htmlAttributes':\n                    this.setHTMLAttributes();\n                    break;\n                case 'wrapText':\n                    this.updateOverflowWrapper(this.wrapText);\n                    if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n                        this.updateView();\n                    }\n                    else {\n                        addClass([this.overFlowWrapper], HIDEICON);\n                        if (this.chipWrapper && this.mode === 'Box') {\n                            removeClass([this.chipWrapper], HIDEICON);\n                        }\n                        else {\n                            removeClass([this.inputWrapper], SHOW_CHIP);\n                            removeClass([this.inputEle], CHIP_INPUT);\n                        }\n                        this.ensurePlaceHolder();\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Allows you to clear the selected values from the Dropdown Tree component.\n     * @method clear\n     * @return {void}.\n     */\n    clear() {\n        this.clearAll();\n        if (this.inputFocus) {\n            this.onFocusOut();\n        }\n        else {\n            if (this.changeOnBlur) {\n                this.triggerChangeEvent();\n            }\n            this.removeValue = false;\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.\n     * @method destroy\n     * @return {void}.\n     */\n    destroy() {\n        this.ddtresetBlazorTemplates(true, true, true, true);\n        this.unWireEvents();\n        this.setCssClass(null, this.cssClass);\n        this.resetValue();\n        this.treeObj.destroy();\n        this.destroyFilter();\n        if (this.popupObj) {\n            this.popupObj.destroy();\n            detach(this.popupObj.element);\n        }\n        if (this.element.tagName !== this.getDirective()) {\n            this.inputWrapper.parentElement.insertBefore(this.element, this.inputWrapper);\n        }\n        detach(this.inputWrapper);\n        detach(this.popupDiv);\n        this.element.classList.remove('e-input');\n        super.destroy();\n    }\n    destroyFilter() {\n        if (this.filterObj) {\n            this.filterObj.destroy();\n            detach(this.filterObj.element);\n            detach(this.filterContainer);\n            this.filterObj = null;\n        }\n    }\n    /**\n     * Ensures visibility of the Dropdown Tree item by using item value or item element.\n     * If many Dropdown Tree items are present, and we are in need to find a particular item, then the `ensureVisible` property\n     * helps you to bring the item to visibility by expanding the Dropdown Tree and scrolling to the specific item.\n     * @param  {string | Element} item - Specifies the value of Dropdown Tree item/ Dropdown Tree item element.\n     */\n    ensureVisible(item) {\n        this.treeObj.ensureVisible(item);\n    }\n    /**\n     * To get the updated data of source of the Dropdown Tree.\n     * @param  {string | Element} item - Specifies the value of Dropdown Tree item/ Dropdown Tree item element.\n     * @returns { { [key: string]: Object }[] }.\n     */\n    getData(item) {\n        return this.treeObj.getTreeData(item);\n    }\n    /**\n     * Close the Dropdown tree pop-up.\n     * @returns void.\n     */\n    hidePopup() {\n        let eventArgs = { popup: this.popupObj };\n        this.inputWrapper.classList.remove(ICONANIMATION);\n        if (this.popupEle) {\n            this.popupEle.style.display = 'none';\n        }\n        attributes(this.inputWrapper, { 'aria-expanded': 'false' });\n        if (this.popupObj && this.isPopupOpen) {\n            this.popupObj.hide();\n            if (this.inputFocus) {\n                this.inputWrapper.focus();\n                if (this.allowFiltering) {\n                    addClass([this.inputWrapper], [INPUTFOCUS]);\n                }\n            }\n            this.trigger('close', eventArgs);\n        }\n    }\n    /**\n     * Based on the state parameter, entire list item will be selected or deselected.\n     * parameter\n     * `true`   - Selects entire Dropdown Tree items.\n     * `false`  - Unselects entire Dropdown Tree items.\n     * @returns void\n     */\n    selectAll(state) {\n        this.selectAllItems(state);\n    }\n    /**\n     * Opens the popup that displays the Dropdown Tree items.\n     * @returns void.\n     */\n    showPopup() {\n        if (!this.enabled || this.readonly || this.isPopupOpen) {\n            return;\n        }\n        this.renderPopup();\n        this.focusIn();\n    }\n    /**\n     * Return the module name.\n     * @private\n     */\n    getModuleName() {\n        return 'dropdowntree';\n    }\n};\n__decorate$2([\n    Property('The Request Failed')\n], DropDownTree.prototype, \"actionFailureTemplate\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"allowFiltering\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"allowMultiSelection\", void 0);\n__decorate$2([\n    Property(true)\n], DropDownTree.prototype, \"changeOnBlur\", void 0);\n__decorate$2([\n    Property('')\n], DropDownTree.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property(',')\n], DropDownTree.prototype, \"delimiterChar\", void 0);\n__decorate$2([\n    Property(true)\n], DropDownTree.prototype, \"enabled\", void 0);\n__decorate$2([\n    Complex({}, Fields)\n], DropDownTree.prototype, \"fields\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"filterBarPlaceholder\", void 0);\n__decorate$2([\n    Property('StartsWith')\n], DropDownTree.prototype, \"filterType\", void 0);\n__decorate$2([\n    Property('Never')\n], DropDownTree.prototype, \"floatLabelType\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"footerTemplate\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"ignoreAccent\", void 0);\n__decorate$2([\n    Property(true)\n], DropDownTree.prototype, \"ignoreCase\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"headerTemplate\", void 0);\n__decorate$2([\n    Property({})\n], DropDownTree.prototype, \"htmlAttributes\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"itemTemplate\", void 0);\n__decorate$2([\n    Property('Default')\n], DropDownTree.prototype, \"mode\", void 0);\n__decorate$2([\n    Property('No Records Found')\n], DropDownTree.prototype, \"noRecordsTemplate\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"placeholder\", void 0);\n__decorate$2([\n    Property('300px')\n], DropDownTree.prototype, \"popupHeight\", void 0);\n__decorate$2([\n    Property('100%')\n], DropDownTree.prototype, \"popupWidth\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"readonly\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"showSelectAll\", void 0);\n__decorate$2([\n    Property('Select All')\n], DropDownTree.prototype, \"selectAllText\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"showCheckBox\", void 0);\n__decorate$2([\n    Property(true)\n], DropDownTree.prototype, \"showClearButton\", void 0);\n__decorate$2([\n    Property(true)\n], DropDownTree.prototype, \"showDropDownIcon\", void 0);\n__decorate$2([\n    Property('None')\n], DropDownTree.prototype, \"sortOrder\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"text\", void 0);\n__decorate$2([\n    Complex({}, TreeSettings)\n], DropDownTree.prototype, \"treeSettings\", void 0);\n__decorate$2([\n    Property('Unselect All')\n], DropDownTree.prototype, \"unSelectAllText\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"value\", void 0);\n__decorate$2([\n    Property('100%')\n], DropDownTree.prototype, \"width\", void 0);\n__decorate$2([\n    Property(1000)\n], DropDownTree.prototype, \"zIndex\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"wrapText\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"actionFailure\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"beforeOpen\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"change\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"close\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"blur\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"created\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"dataBound\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"destroyed\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"filtering\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"focus\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"keyPress\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"open\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"select\", void 0);\nDropDownTree = __decorate$2([\n    NotifyPropertyChanges\n], DropDownTree);\n\n/**\n * export all modules from current location\n */\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/// <reference path='../drop-down-list/drop-down-list-model.d.ts'/>\n/* tslint:disable */\n/* tslint:enable */\nconst SPINNER_CLASS = 'e-atc-spinner-icon';\ndropDownListClasses.root = 'e-combobox';\nlet inputObject$1 = {\n    container: null,\n    buttons: []\n};\n/**\n * The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n * ```html\n * <select id=\"list\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n *   let games:ComboBox = new ComboBox();\n *   games.appendTo(\"#list\");\n * ```\n */\nlet ComboBox = class ComboBox extends DropDownList {\n    /**\n     * *Constructor for creating the component\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    ;\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        super.preRender();\n    }\n    getLocaleName() {\n        return 'combo-box';\n    }\n    ;\n    wireEvent() {\n        if (this.getModuleName() === 'combobox') {\n            EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur, this);\n            EventHandler.add(this.inputWrapper.container, 'blur', this.onBlur, this);\n        }\n        if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {\n            EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick, this);\n        }\n        EventHandler.add(this.inputElement, 'focus', this.targetFocus, this);\n        if (!this.readonly) {\n            EventHandler.add(this.inputElement, 'input', this.onInput, this);\n            EventHandler.add(this.inputElement, 'keyup', this.onFilterUp, this);\n            EventHandler.add(this.inputElement, 'keydown', this.onFilterDown, this);\n            EventHandler.add(this.inputElement, 'paste', this.pasteHandler, this);\n        }\n        this.bindCommonEvent();\n    }\n    preventBlur(e) {\n        if ((!this.allowFiltering && document.activeElement !== this.inputElement &&\n            !document.activeElement.classList.contains(dropDownListClasses.input) && Browser.isDevice || !Browser.isDevice)) {\n            e.preventDefault();\n        }\n    }\n    onBlur(e) {\n        let inputValue = this.inputElement.value === '' ? null : this.inputElement.value;\n        if (!isNullOrUndefined(this.listData) && !isNullOrUndefined(inputValue) && inputValue !== this.text) {\n            this.customValue(e);\n        }\n        super.onBlur(e);\n    }\n    targetElement() {\n        return this.inputElement;\n    }\n    setOldText(text) {\n        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n        this.customValue();\n        this.removeSelection();\n    }\n    setOldValue(value) {\n        if (this.allowCustom) {\n            this.valueMuteChange(this.value);\n        }\n        else {\n            this.valueMuteChange(null);\n        }\n        this.removeSelection();\n        this.setHiddenValue();\n    }\n    valueMuteChange(value) {\n        let inputValue = isNullOrUndefined(value) ? null : value.toString();\n        Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);\n        this.setProperties({ value: value, text: value, index: null }, true);\n        this.activeIndex = this.index;\n        let fields = this.fields;\n        let dataItem = {};\n        dataItem[fields.text] = isNullOrUndefined(value) ? null : value.toString();\n        dataItem[fields.value] = isNullOrUndefined(value) ? null : value.toString();\n        this.itemData = dataItem;\n        this.item = null;\n        if (this.previousValue !== this.value) {\n            this.detachChangeEvent(null);\n        }\n    }\n    updateValues() {\n        if (!isNullOrUndefined(this.value)) {\n            let li = this.getElementByValue(this.value);\n            if (li) {\n                this.setSelection(li, null);\n            }\n            else if (this.allowCustom) {\n                this.valueMuteChange(this.value);\n            }\n            else {\n                this.valueMuteChange(null);\n            }\n        }\n        else if (this.text && isNullOrUndefined(this.value)) {\n            let li = this.getElementByText(this.text);\n            if (li) {\n                this.setSelection(li, null);\n            }\n            else {\n                Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n                this.customValue();\n            }\n        }\n        else {\n            this.setSelection(this.liCollections[this.activeIndex], null);\n        }\n        this.setHiddenValue();\n        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n    updateIconState() {\n        if (this.showClearButton) {\n            if (this.inputElement.value !== '' && !this.readonly) {\n                removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n            }\n            else {\n                addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n            }\n        }\n    }\n    getAriaAttributes() {\n        let ariaAttributes = {\n            'aria-owns': this.element.id + '_options',\n            'role': 'combobox',\n            'aria-autocomplete': 'both',\n            'aria-labelledby': this.hiddenElement.id,\n            'aria-hasPopup': 'true',\n            'aria-expanded': 'false',\n            'aria-readonly': this.readonly.toString(),\n            'autocomplete': 'off',\n            'autocorrect': 'off',\n            'autocapitalize': 'off',\n            'spellcheck': 'false'\n        };\n        return ariaAttributes;\n    }\n    searchLists(e) {\n        this.isTyped = true;\n        if (this.isFiltering()) {\n            super.searchLists(e);\n            if (this.ulElement && this.filterInput.value.trim() === '') {\n                this.setHoverList(this.ulElement.querySelector('.' + dropDownListClasses.li));\n            }\n        }\n        else {\n            if (this.ulElement && this.inputElement.value === '' && this.preventAutoFill) {\n                this.setHoverList(this.ulElement.querySelector('.' + dropDownListClasses.li));\n            }\n            this.incrementalSearch(e);\n        }\n    }\n    getNgDirective() {\n        return 'EJS-COMBOBOX';\n    }\n    setSearchBox() {\n        this.filterInput = this.inputElement;\n        return (this.isFiltering() ? this.inputWrapper : inputObject$1);\n    }\n    onActionComplete(ulElement, list, e, isUpdated) {\n        if (!this.isServerBlazor) {\n            super.onActionComplete(ulElement, list, e);\n        }\n        if (this.isSelectCustom) {\n            this.removeSelection();\n        }\n        if (!this.preventAutoFill && this.getModuleName() === 'combobox' && this.isTyped) {\n            this.inlineSearch();\n        }\n    }\n    getFocusElement() {\n        let dataItem = this.isSelectCustom ? { text: '' } : this.getItemData();\n        let selected = this.list.querySelector('.' + dropDownListClasses.selected);\n        let isSelected = dataItem.text === this.inputElement.value && !isNullOrUndefined(selected);\n        if (isSelected) {\n            return selected;\n        }\n        if ((Browser.isDevice && !this.isDropDownClick || !Browser.isDevice) &&\n            !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0) {\n            let inputValue = this.inputElement.value;\n            let activeItem = Search(inputValue, this.liCollections, 'StartsWith', true);\n            let activeElement = activeItem.item;\n            if (!isNullOrUndefined(activeElement)) {\n                let count = this.getIndexByValue(activeElement.getAttribute('data-value')) - 1;\n                let height = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue('height'), 10);\n                if (!isNaN(height) && this.getModuleName() !== 'autocomplete') {\n                    this.removeFocus();\n                    let fixedHead = this.fields.groupBy ? this.liCollections[0].offsetHeight : 0;\n                    this.list.scrollTop = count * height + fixedHead;\n                    addClass([activeElement], dropDownListClasses.focus);\n                }\n            }\n            else {\n                if (this.isSelectCustom && this.inputElement.value.trim() !== '') {\n                    this.removeFocus();\n                    this.list.scrollTop = 0;\n                }\n            }\n            return activeElement;\n        }\n        else {\n            return null;\n        }\n    }\n    setValue(e) {\n        if (e && e.type === 'keydown' && e.action === 'enter') {\n            this.removeFillSelection();\n        }\n        if (this.autofill && this.getModuleName() === 'combobox' && e && e.type === 'keydown' && e.action !== 'enter') {\n            this.preventAutoFill = false;\n            this.inlineSearch(e);\n            return false;\n        }\n        else {\n            return super.setValue(e);\n        }\n    }\n    checkCustomValue() {\n        this.itemData = this.getDataByValue(this.value);\n        let dataItem = this.getItemData();\n        if (!(this.allowCustom && isNullOrUndefined(dataItem.value) && isNullOrUndefined(dataItem.text))) {\n            this.setProperties({ 'value': dataItem.value, 'text': dataItem.text }, true);\n        }\n    }\n    /**\n     * Shows the spinner loader.\n     * @returns void.\n     * @deprecated\n     */\n    showSpinner() {\n        if (isNullOrUndefined(this.spinnerElement)) {\n            this.spinnerElement = (this.getModuleName() === 'autocomplete') ? (this.inputWrapper.buttons[0] ||\n                this.inputWrapper.clearButton ||\n                Input.appendSpan('e-input-group-icon ' + SPINNER_CLASS, this.inputWrapper.container, this.createElement)) :\n                (this.inputWrapper.buttons[0] || this.inputWrapper.clearButton);\n            addClass([this.spinnerElement], dropDownListClasses.disableIcon);\n            createSpinner({\n                target: this.spinnerElement,\n                width: Browser.isDevice ? '16px' : '14px'\n            }, this.createElement);\n            showSpinner(this.spinnerElement);\n        }\n    }\n    /**\n     * Hides the spinner loader.\n     * @returns void.\n     * @deprecated\n     */\n    hideSpinner() {\n        if (!isNullOrUndefined(this.spinnerElement)) {\n            hideSpinner(this.spinnerElement);\n            removeClass([this.spinnerElement], dropDownListClasses.disableIcon);\n            if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {\n                detach(this.spinnerElement);\n            }\n            else {\n                this.spinnerElement.innerHTML = '';\n            }\n            this.spinnerElement = null;\n        }\n    }\n    setAutoFill(activeElement, isHover) {\n        if (!isHover) {\n            this.setHoverList(activeElement);\n        }\n        if (this.autofill && !this.preventAutoFill) {\n            let currentValue = this.getTextByValue(activeElement.getAttribute('data-value')).toString();\n            let currentFillValue = this.getFormattedValue(activeElement.getAttribute('data-value'));\n            if (this.getModuleName() === 'combobox') {\n                if (!this.isSelected && this.previousValue !== currentFillValue) {\n                    this.updateSelectedItem(activeElement, null);\n                    this.isSelected = true;\n                    this.previousValue = this.getFormattedValue(activeElement.getAttribute('data-value'));\n                }\n                else {\n                    this.updateSelectedItem(activeElement, null, true);\n                }\n            }\n            if (!this.isAndroidAutoFill(currentValue)) {\n                this.setAutoFillSelection(currentValue);\n            }\n        }\n    }\n    isAndroidAutoFill(value) {\n        if (Browser.isAndroid) {\n            let currentPoints = this.getSelectionPoints();\n            let prevEnd = this.prevSelectPoints.end;\n            let curEnd = currentPoints.end;\n            let prevStart = this.prevSelectPoints.start;\n            let curStart = currentPoints.start;\n            if (prevEnd !== 0 && ((prevEnd === value.length && prevStart === value.length) ||\n                (prevStart > curStart && prevEnd > curEnd) || (prevEnd === curEnd && prevStart === curStart))) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    clearAll(e, property) {\n        if (isNullOrUndefined(property) || (!isNullOrUndefined(property) && isNullOrUndefined(property.dataSource))) {\n            super.clearAll(e);\n            if (this.isServerBlazor && this.isFiltering() && this.isPopupOpen && e) {\n                // tslint:disable-next-line\n                this.interopAdaptor.invokeMethodAsync('OnServerRenderList', this.beforePopupOpen, true);\n            }\n        }\n    }\n    isSelectFocusItem(element) {\n        return !isNullOrUndefined(element);\n    }\n    inlineSearch(e) {\n        let isKeyNavigate = (e && (e.action === 'down' || e.action === 'up' ||\n            e.action === 'home' || e.action === 'end' || e.action === 'pageUp' || e.action === 'pageDown'));\n        let activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();\n        if (!isNullOrUndefined(activeElement)) {\n            if (!isKeyNavigate) {\n                let value = this.getFormattedValue(activeElement.getAttribute('data-value'));\n                this.activeIndex = this.getIndexByValue(value);\n                this.activeIndex = !isNullOrUndefined(this.activeIndex) ? this.activeIndex : null;\n            }\n            this.preventAutoFill = this.inputElement.value === '' ? false : this.preventAutoFill;\n            this.setAutoFill(activeElement, isKeyNavigate);\n        }\n        else if (this.inputElement.value === '') {\n            this.activeIndex = null;\n            this.list.scrollTop = 0;\n            let focusItem = this.list.querySelector('.' + dropDownListClasses.li);\n            this.setHoverList(focusItem);\n        }\n        else {\n            this.activeIndex = null;\n            this.removeSelection();\n            if (this.liCollections && this.liCollections.length < 0) {\n                this.removeFocus();\n            }\n        }\n    }\n    incrementalSearch(e) {\n        this.showPopup();\n        if (!isNullOrUndefined(this.listData)) {\n            this.inlineSearch(e);\n            e.preventDefault();\n        }\n    }\n    ;\n    setAutoFillSelection(currentValue) {\n        let selection = this.getSelectionPoints();\n        let value = this.inputElement.value.substr(0, selection.start);\n        if (value && (value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase())) {\n            let inputValue = value + currentValue.substr(value.length, currentValue.length);\n            Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);\n            this.inputElement.setSelectionRange(selection.start, this.inputElement.value.length);\n        }\n        else {\n            Input.setValue(currentValue, this.inputElement, this.floatLabelType, this.showClearButton);\n            this.inputElement.setSelectionRange(0, this.inputElement.value.length);\n        }\n    }\n    ;\n    getValueByText(text) {\n        return super.getValueByText(text, true, this.ignoreAccent);\n    }\n    unWireEvent() {\n        if (this.getModuleName() === 'combobox') {\n            EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur);\n            EventHandler.remove(this.inputWrapper.container, 'blur', this.onBlur);\n        }\n        if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {\n            EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick);\n        }\n        EventHandler.remove(this.inputElement, 'focus', this.targetFocus);\n        if (!this.readonly) {\n            EventHandler.remove(this.inputElement, 'input', this.onInput);\n            EventHandler.remove(this.inputElement, 'keyup', this.onFilterUp);\n            EventHandler.remove(this.inputElement, 'keydown', this.onFilterDown);\n            EventHandler.remove(this.inputElement, 'paste', this.pasteHandler);\n        }\n        this.unBindCommonEvent();\n    }\n    setSelection(li, e) {\n        super.setSelection(li, e);\n        if (!isNullOrUndefined(li) && !this.autofill && !this.isDropDownClick) {\n            this.removeFocus();\n        }\n    }\n    selectCurrentItem(e) {\n        let li;\n        if (this.isPopupOpen) {\n            if (this.isSelected) {\n                li = this.list.querySelector('.' + dropDownListClasses.selected);\n            }\n            else {\n                li = this.list.querySelector('.' + dropDownListClasses.focus);\n            }\n            if (li) {\n                this.setSelection(li, e);\n                this.isTyped = false;\n            }\n            if (this.isSelected) {\n                this.isSelectCustom = false;\n                this.onChangeEvent(e);\n            }\n        }\n        if (e.action === 'enter' && this.inputElement.value.trim() === '') {\n            this.clearAll(e);\n        }\n        else if (this.isTyped && !this.isSelected && isNullOrUndefined(li)) {\n            this.customValue(e);\n        }\n        this.hidePopup();\n    }\n    setHoverList(li) {\n        this.removeSelection();\n        if (this.isValidLI(li) && !li.classList.contains(dropDownListClasses.selected)) {\n            this.removeFocus();\n            li.classList.add(dropDownListClasses.focus);\n        }\n    }\n    ;\n    targetFocus(e) {\n        if (Browser.isDevice && !this.allowFiltering) {\n            this.preventFocus = false;\n        }\n        this.onFocus(e);\n    }\n    dropDownClick(e) {\n        e.preventDefault();\n        if (Browser.isDevice && !this.allowFiltering) {\n            this.preventFocus = true;\n        }\n        super.dropDownClick(e);\n    }\n    customValue(e) {\n        let value = this.getValueByText(this.inputElement.value);\n        if (!this.allowCustom && this.inputElement.value !== '') {\n            let previousValue = this.previousValue;\n            let currentValue = this.value;\n            this.setProperties({ value: value });\n            if (isNullOrUndefined(this.value)) {\n                Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n            }\n            if (this.autofill && previousValue === this.value && currentValue !== this.value) {\n                this.onChangeEvent(null);\n            }\n        }\n        else if (this.inputElement.value.trim() !== '') {\n            let previousValue = this.value;\n            if (isNullOrUndefined(value)) {\n                let value = this.inputElement.value === '' ? null : this.inputElement.value;\n                let eventArgs;\n                eventArgs = { text: value, item: {} };\n                if (!this.initial) {\n                    this.trigger('customValueSpecifier', eventArgs, (eventArgs) => {\n                        this.updateCustomValueCallback(value, eventArgs, previousValue, e);\n                    });\n                }\n                else {\n                    this.updateCustomValueCallback(value, eventArgs, previousValue);\n                }\n            }\n            else {\n                this.isSelectCustom = false;\n                this.setProperties({ value: value });\n                if (previousValue !== this.value) {\n                    this.onChangeEvent(e);\n                }\n            }\n        }\n        else if (this.allowCustom) {\n            this.isSelectCustom = true;\n        }\n    }\n    updateCustomValueCallback(value, eventArgs, previousValue, e) {\n        let fields = this.fields;\n        let item = eventArgs.item;\n        let dataItem = {};\n        if (item && getValue(fields.text, item) && getValue(fields.value, item)) {\n            dataItem = item;\n        }\n        else {\n            setValue(fields.text, value, dataItem);\n            setValue(fields.value, value, dataItem);\n        }\n        this.itemData = dataItem;\n        let changeData = {\n            text: getValue(fields.text, this.itemData),\n            value: getValue(fields.value, this.itemData),\n            index: null\n        };\n        this.setProperties(changeData, true);\n        this.setSelection(null, null);\n        this.isSelectCustom = true;\n        if (previousValue !== this.value) {\n            this.onChangeEvent(e);\n        }\n    }\n    /**\n     * Dynamically change the value of properties.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (this.getModuleName() === 'combobox') {\n            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'readonly':\n                    Input.setReadonly(this.readonly, this.inputElement);\n                    if (this.readonly) {\n                        EventHandler.remove(this.inputElement, 'input', this.onInput);\n                        EventHandler.remove(this.inputElement, 'keyup', this.onFilterUp);\n                        EventHandler.remove(this.inputElement, 'keydown', this.onFilterDown);\n                    }\n                    else {\n                        EventHandler.add(this.inputElement, 'input', this.onInput, this);\n                        EventHandler.add(this.inputElement, 'keyup', this.onFilterUp, this);\n                        EventHandler.add(this.inputElement, 'keydown', this.onFilterDown, this);\n                    }\n                    break;\n                case 'allowFiltering':\n                    this.setSearchBox();\n                    if (this.isFiltering() && this.getModuleName() === 'combobox' && isNullOrUndefined(this.list)) {\n                        super.renderList();\n                    }\n                    break;\n                case 'allowCustom':\n                    break;\n                default:\n                    let comboProps;\n                    comboProps = this.getPropObject(prop, newProp, oldProp);\n                    super.onPropertyChanged(comboProps.newProperty, comboProps.oldProperty);\n                    break;\n            }\n        }\n    }\n    /**\n     * To initialize the control rendering.\n     * @private\n     */\n    render() {\n        super.render();\n        this.setSearchBox();\n        if (this.isFiltering() && this.getModuleName() === 'combobox' && isNullOrUndefined(this.list)) {\n            super.renderList();\n        }\n        this.renderComplete();\n    }\n    ;\n    /**\n     * Return the module name of this component.\n     * @private\n     */\n    getModuleName() {\n        return 'combobox';\n    }\n    /**\n     * Adds a new item to the combobox popup list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n     * @return {void}.\n     * @deprecated\n     */\n    addItem(items, itemIndex) {\n        super.addItem(items, itemIndex);\n    }\n    /**\n     * To filter the data from given data source by using query\n     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param  {Query} query - Specify the query to filter the data.\n     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @return {void}.\n     * @deprecated\n     */\n    filter(dataSource, query, fields) {\n        super.filter(dataSource, query, fields);\n    }\n    /**\n     * Opens the popup that displays the list of items.\n     * @returns void.\n     * @deprecated\n     */\n    showPopup() {\n        super.showPopup();\n    }\n    /**\n     * Hides the popup if it is in open state.\n     * @returns void.\n     * @deprecated\n     */\n    hidePopup(e) {\n        let inputValue = this.inputElement.value === '' ? null : this.inputElement.value;\n        if (!isNullOrUndefined(this.listData)) {\n            let isEscape = this.isEscapeKey;\n            if (this.isEscapeKey) {\n                Input.setValue(this.typedString, this.inputElement, this.floatLabelType, this.showClearButton);\n                this.isEscapeKey = false;\n            }\n            if (this.autofill) {\n                this.removeFillSelection();\n            }\n            let dataItem = this.isSelectCustom ? { text: '' } : this.getItemData();\n            let selected = this.list.querySelector('.' + dropDownListClasses.selected);\n            if (dataItem.text === this.inputElement.value && !isNullOrUndefined(selected)) {\n                if (this.isSelected) {\n                    this.onChangeEvent(e);\n                    this.isSelectCustom = false;\n                }\n                super.hidePopup(e);\n                return;\n            }\n            if (this.getModuleName() === 'combobox' && this.inputElement.value.trim() !== '') {\n                let searchItem = Search(this.inputElement.value, this.liCollections, 'Equal', true);\n                this.selectedLI = searchItem.item;\n                if (isNullOrUndefined(searchItem.index)) {\n                    searchItem.index = Search(this.inputElement.value, this.liCollections, 'StartsWith', true).index;\n                }\n                this.activeIndex = searchItem.index;\n                if (!isNullOrUndefined(this.selectedLI)) {\n                    this.updateSelectedItem(this.selectedLI, null, true);\n                }\n                else if (isEscape) {\n                    this.isSelectCustom = true;\n                    this.removeSelection();\n                }\n            }\n            if (!this.isEscapeKey && this.isTyped && !this.isInteracted) {\n                this.customValue(e);\n            }\n        }\n        if (isNullOrUndefined(this.listData) && this.allowCustom && !isNullOrUndefined(inputValue) && inputValue !== this.value) {\n            this.customValue();\n        }\n        super.hidePopup(e);\n    }\n    /**\n     * Sets the focus to the component for interaction.\n     * @returns void.\n     */\n    focusIn() {\n        if (!this.enabled) {\n            return;\n        }\n        if (Browser.isDevice && !this.allowFiltering) {\n            this.preventFocus = true;\n        }\n        super.focusIn();\n    }\n    /**\n     * Allows you to clear the selected values from the component.\n     * @returns void.\n     * @deprecated\n     */\n    clear() {\n        this.value = null;\n    }\n    /**\n     * Moves the focus from the component if the component is already focused.\n     * @returns void.\n     * @deprecated\n     */\n    focusOut(e) {\n        super.focusOut(e);\n    }\n    /**\n     * Gets all the list items bound on this component.\n     * @returns Element[].\n     * @deprecated\n     */\n    getItems() {\n        return super.getItems();\n    }\n    /**\n     * Gets the data Object that matches the given value.\n     * @param { string | number } value - Specifies the value of the list item.\n     * @returns Object.\n     * @blazorType object\n     * @deprecated\n     */\n    getDataByValue(value) {\n        return super.getDataByValue(value);\n    }\n    renderHightSearch() {\n        // update high light search \n    }\n};\n__decorate$3([\n    Property(false)\n], ComboBox.prototype, \"autofill\", void 0);\n__decorate$3([\n    Property(true)\n], ComboBox.prototype, \"allowCustom\", void 0);\n__decorate$3([\n    Property({})\n], ComboBox.prototype, \"htmlAttributes\", void 0);\n__decorate$3([\n    Property(false)\n], ComboBox.prototype, \"allowFiltering\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"query\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"index\", void 0);\n__decorate$3([\n    Property(true)\n], ComboBox.prototype, \"showClearButton\", void 0);\n__decorate$3([\n    Property(false)\n], ComboBox.prototype, \"enableRtl\", void 0);\n__decorate$3([\n    Event()\n], ComboBox.prototype, \"customValueSpecifier\", void 0);\n__decorate$3([\n    Event()\n], ComboBox.prototype, \"filtering\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"valueTemplate\", void 0);\n__decorate$3([\n    Property('Never')\n], ComboBox.prototype, \"floatLabelType\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"filterBarPlaceholder\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"cssClass\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"headerTemplate\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"footerTemplate\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"placeholder\", void 0);\n__decorate$3([\n    Property('100%')\n], ComboBox.prototype, \"width\", void 0);\n__decorate$3([\n    Property('300px')\n], ComboBox.prototype, \"popupHeight\", void 0);\n__decorate$3([\n    Property('100%')\n], ComboBox.prototype, \"popupWidth\", void 0);\n__decorate$3([\n    Property(false)\n], ComboBox.prototype, \"readonly\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"text\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"value\", void 0);\nComboBox = __decorate$3([\n    NotifyPropertyChanges\n], ComboBox);\n\n/**\n * export all modules from current location\n */\n\nvar __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/// <reference path='../combo-box/combo-box-model.d.ts'/>\n/* tslint:disable */\n/* tslint:enable */\ndropDownListClasses.root = 'e-autocomplete';\ndropDownListClasses.icon = 'e-input-group-icon e-ddl-icon e-search-icon';\n/**\n * The AutoComplete component provides the matched suggestion list when type into the input,\n * from which the user can select one.\n * ```html\n * <input id=\"list\" type=\"text\"/>\n * ```\n * ```typescript\n *   let atcObj:AutoComplete = new AutoComplete();\n *   atcObj.appendTo(\"#list\");\n * ```\n */\nlet AutoComplete = class AutoComplete extends ComboBox {\n    /**\n     * * Constructor for creating the widget\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isFiltered = false;\n    }\n    ;\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        super.preRender();\n    }\n    getLocaleName() {\n        return 'auto-complete';\n    }\n    ;\n    getNgDirective() {\n        return 'EJS-AUTOCOMPLETE';\n    }\n    getQuery(query) {\n        let filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n        let filterType = (this.queryString === '' && !isNullOrUndefined(this.value)) ? 'equal' : this.filterType;\n        let queryString = (this.queryString === '' && !isNullOrUndefined(this.value)) ? this.value : this.queryString;\n        if (this.isFiltered) {\n            return filterQuery;\n        }\n        if (this.queryString !== null && this.queryString !== '') {\n            let dataType = this.typeOfData(this.dataSource).typeof;\n            if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n                filterQuery.where('', filterType, queryString, this.ignoreCase, this.ignoreAccent);\n            }\n            else {\n                let mapping = !isNullOrUndefined(this.fields.value) ? this.fields.value : '';\n                filterQuery.where(mapping, filterType, queryString, this.ignoreCase, this.ignoreAccent);\n            }\n        }\n        if (!isNullOrUndefined(this.suggestionCount)) {\n            // Since defualt value of suggestioncount is 20, checked the condition\n            if (this.suggestionCount !== 20) {\n                for (let queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {\n                    if (filterQuery.queries[queryElements].fn === 'onTake') {\n                        filterQuery.queries.splice(queryElements, 1);\n                    }\n                }\n            }\n            filterQuery.take(this.suggestionCount);\n        }\n        return filterQuery;\n    }\n    searchLists(e) {\n        this.isTyped = true;\n        this.isDataFetched = this.isSelectCustom = false;\n        if (this.isServerBlazor) {\n            this.beforePopupOpen = (this.isFiltering() && !this.beforePopupOpen) ? !this.beforePopupOpen : this.beforePopupOpen;\n            this.queryString = this.filterInput.value;\n            if (this.queryString !== '' && (this.queryString.length >= this.minLength)) {\n                // tslint:disable-next-line\n                this.interopAdaptor.invokeMethodAsync('OnServerFilter', this.filterInput.value);\n            }\n            else {\n                this.hidePopup();\n            }\n        }\n        else {\n            if (isNullOrUndefined(this.list)) {\n                super.renderList(true);\n            }\n            this.queryString = this.filterInput.value;\n            if (e.keyCode === 40 || e.keyCode === 38) {\n                this.queryString = this.queryString === '' ? null : this.queryString;\n                this.beforePopupOpen = true;\n                this.resetList(this.dataSource, this.fields);\n                return;\n            }\n            this.isSelected = false;\n            this.activeIndex = null;\n            let eventArgs = {\n                preventDefaultAction: false,\n                text: this.filterInput.value,\n                updateData: (dataSource, query, fields) => {\n                    if (eventArgs.cancel) {\n                        return;\n                    }\n                    this.isFiltered = true;\n                    this.filterAction(dataSource, query, fields);\n                },\n                cancel: false\n            };\n            this.trigger('filtering', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel && !this.isFiltered && !eventArgs.preventDefaultAction) {\n                    this.filterAction(this.dataSource, null, this.fields);\n                }\n            });\n        }\n    }\n    /**\n     * To filter the data from given data source by using query\n     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param  {Query} query - Specify the query to filter the data.\n     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @return {void}.\n     * @deprecated\n     */\n    filter(dataSource, query, fields) {\n        this.isFiltered = true;\n        this.filterAction(dataSource, query, fields);\n    }\n    filterAction(dataSource, query, fields) {\n        this.beforePopupOpen = true;\n        if (this.queryString !== '' && (this.queryString.length >= this.minLength)) {\n            this.resetList(dataSource, fields, query);\n        }\n        else {\n            this.hidePopup();\n        }\n    }\n    clearAll(e, property) {\n        if (isNullOrUndefined(property) || (!isNullOrUndefined(property) && isNullOrUndefined(property.dataSource))) {\n            super.clearAll(e);\n        }\n        if (this.beforePopupOpen) {\n            this.hidePopup();\n        }\n    }\n    onActionComplete(ulElement, list, e, isUpdated) {\n        this.fixedHeaderElement = null;\n        super.onActionComplete(ulElement, list, e);\n        let item = this.list.querySelector('.' + dropDownListClasses.li);\n        if (!isNullOrUndefined(item)) {\n            removeClass([item], dropDownListClasses.focus);\n        }\n        this.postBackAction();\n    }\n    postBackAction() {\n        if (this.autofill && !isNullOrUndefined(this.liCollections[0])) {\n            let items = [this.liCollections[0]];\n            let searchItem = Search(this.inputElement.value, items, 'StartsWith', this.ignoreCase);\n            if (!isNullOrUndefined(searchItem.item)) {\n                super.setAutoFill(this.liCollections[0], true);\n            }\n        }\n    }\n    setSelection(li, e) {\n        if (!this.isValidLI(li)) {\n            return;\n        }\n        if (!isNullOrUndefined(e) && e.type === 'keydown' && e.action !== 'enter'\n            && e.action !== 'tab' && this.isValidLI(li)) {\n            let value = this.getFormattedValue(li.getAttribute('data-value'));\n            this.activeIndex = this.getIndexByValue(value);\n            if (this.isServerBlazor) {\n                this.removeHover();\n            }\n            this.setHoverList(li);\n            this.selectedLI = li;\n            this.setScrollPosition(e);\n            if (this.autofill && this.isPopupOpen) {\n                this.preventAutoFill = false;\n                super.setAutoFill(li);\n            }\n            attributes(this.inputElement, { 'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null });\n        }\n        else {\n            super.setSelection(li, e);\n        }\n    }\n    listOption(dataSource, fieldsSettings) {\n        let fields = super.listOption(dataSource, fieldsSettings);\n        if (isNullOrUndefined(fields.itemCreated)) {\n            fields.itemCreated = (e) => {\n                if (this.highlight) {\n                    if (this.element.tagName === this.getNgDirective() && this.itemTemplate) {\n                        setTimeout(() => { highlightSearch(e.item, this.queryString, this.ignoreCase, this.filterType); }, 0);\n                    }\n                    else {\n                        highlightSearch(e.item, this.queryString, this.ignoreCase, this.filterType);\n                    }\n                }\n            };\n        }\n        else {\n            let itemCreated = fields.itemCreated;\n            fields.itemCreated = (e) => {\n                if (this.highlight) {\n                    highlightSearch(e.item, this.queryString, this.ignoreCase, this.filterType);\n                }\n                itemCreated.apply(this, [e]);\n            };\n        }\n        return fields;\n    }\n    ;\n    isFiltering() {\n        return true;\n    }\n    renderPopup() {\n        this.list.scrollTop = 0;\n        super.renderPopup();\n    }\n    isEditTextBox() {\n        return true && this.inputElement.value.trim() !== '';\n    }\n    isPopupButton() {\n        return this.showPopupButton;\n    }\n    isSelectFocusItem(element) {\n        return false;\n    }\n    /**\n     * Search the entered text and show it in the suggestion list if available.\n     * @returns void.\n     * @deprecated\n     */\n    showPopup() {\n        if (!this.enabled) {\n            return;\n        }\n        if (this.beforePopupOpen && !this.isServerBlazor) {\n            this.refreshPopup();\n            return;\n        }\n        this.beforePopupOpen = true;\n        this.preventAutoFill = true;\n        if (isNullOrUndefined(this.list) || this.isServerBlazor) {\n            this.renderList();\n        }\n        else {\n            this.resetList(this.dataSource, this.fields);\n        }\n    }\n    /**\n     * Hides the popup if it is in open state.\n     * @returns void.\n     */\n    hidePopup() {\n        this.DropDownBaseresetBlazorTemplates(true, false, false, false);\n        super.hidePopup();\n        this.activeIndex = -1;\n    }\n    /**\n     * Dynamically change the value of properties.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (this.getModuleName() === 'autocomplete') {\n            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'showPopupButton':\n                    if (this.showPopupButton) {\n                        if (!this.isServerBlazor) {\n                            let button = Input.appendSpan(dropDownListClasses.icon, this.inputWrapper.container, this.createElement);\n                            this.inputWrapper.buttons[0] = button;\n                        }\n                        else if (this.inputWrapper && this.inputWrapper.container) {\n                            let button = this.inputWrapper.container.querySelector('.e-input-group-icon.e-ddl-icon');\n                            this.inputWrapper.buttons[0] = button;\n                        }\n                        if (this.inputWrapper && this.inputWrapper.buttons && this.inputWrapper.buttons[0]) {\n                            EventHandler.add(this.inputWrapper.buttons[0], 'click', this.dropDownClick, this);\n                        }\n                    }\n                    else if (!this.isServerBlazor) {\n                        detach(this.inputWrapper.buttons[0]);\n                        this.inputWrapper.buttons[0] = null;\n                    }\n                    break;\n                default:\n                    let atcProps;\n                    atcProps = this.getPropObject(prop, newProp, oldProp);\n                    super.onPropertyChanged(atcProps.newProperty, atcProps.oldProperty);\n                    break;\n            }\n        }\n    }\n    renderHightSearch() {\n        if (this.highlight) {\n            for (let i = 0; i < this.liCollections.length; i++) {\n                let isHighlight = this.ulElement.querySelector('.e-active');\n                if (!isHighlight) {\n                    revertHighlightSearch(this.liCollections[i]);\n                    highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType, this.isServerBlazor);\n                }\n            }\n        }\n    }\n    /**\n     * Return the module name of this component.\n     * @private\n     */\n    getModuleName() {\n        return 'autocomplete';\n    }\n    /**\n     * To initialize the control rendering\n     * @private\n     */\n    render() {\n        super.render();\n    }\n    ;\n};\n__decorate$4([\n    Complex({ value: null, iconCss: null, groupBy: null }, FieldSettings)\n], AutoComplete.prototype, \"fields\", void 0);\n__decorate$4([\n    Property(true)\n], AutoComplete.prototype, \"ignoreCase\", void 0);\n__decorate$4([\n    Property(false)\n], AutoComplete.prototype, \"showPopupButton\", void 0);\n__decorate$4([\n    Property(false)\n], AutoComplete.prototype, \"highlight\", void 0);\n__decorate$4([\n    Property(20)\n], AutoComplete.prototype, \"suggestionCount\", void 0);\n__decorate$4([\n    Property({})\n], AutoComplete.prototype, \"htmlAttributes\", void 0);\n__decorate$4([\n    Property(null)\n], AutoComplete.prototype, \"query\", void 0);\n__decorate$4([\n    Property(1)\n], AutoComplete.prototype, \"minLength\", void 0);\n__decorate$4([\n    Property('Contains')\n], AutoComplete.prototype, \"filterType\", void 0);\n__decorate$4([\n    Event()\n], AutoComplete.prototype, \"filtering\", void 0);\n__decorate$4([\n    Property(null)\n], AutoComplete.prototype, \"index\", void 0);\n__decorate$4([\n    Property('Never')\n], AutoComplete.prototype, \"floatLabelType\", void 0);\n__decorate$4([\n    Property(null)\n], AutoComplete.prototype, \"valueTemplate\", void 0);\n__decorate$4([\n    Property(null)\n], AutoComplete.prototype, \"filterBarPlaceholder\", void 0);\n__decorate$4([\n    Property(false)\n], AutoComplete.prototype, \"allowFiltering\", void 0);\n__decorate$4([\n    Property(null)\n], AutoComplete.prototype, \"text\", void 0);\nAutoComplete = __decorate$4([\n    NotifyPropertyChanges\n], AutoComplete);\n\n/**\n * export all modules from current location\n */\n\n/**\n * FloatLable Moduel\n * Specifies whether to display the floating label above the input element.\n */\nconst FLOATLINE = 'e-float-line';\nconst FLOATTEXT = 'e-float-text';\nconst LABELTOP = 'e-label-top';\nconst LABELBOTTOM = 'e-label-bottom';\n/**\n * Function to create Float Label element.\n * @param overAllWrapper - overall wrapper of multiselect.\n * @param element - the given html element.\n * @param inputElement - specify the input wrapper.\n * @param value - Value of the MultiSelect.\n * @param floatLabelType - Specify the FloatLabel Type.\n * @param placeholder - Specify the PlaceHolder text.\n */\nfunction createFloatLabel(overAllWrapper, searchWrapper, element, inputElement, value, floatLabelType, placeholder) {\n    let floatLinelement;\n    let floatLabelElement;\n    floatLinelement = createElement('span', { className: FLOATLINE });\n    floatLabelElement = createElement('label', { className: FLOATTEXT });\n    if (!isNullOrUndefined(element.id) && element.id !== '') {\n        floatLabelElement.id = 'label_' + element.id.replace(/ /g, '_');\n        attributes(element, { 'aria-labelledby': floatLabelElement.id });\n    }\n    if (!isNullOrUndefined(inputElement.placeholder) && inputElement.placeholder !== '') {\n        floatLabelElement.innerText = SanitizeHtmlHelper.sanitize(inputElement.placeholder);\n        inputElement.removeAttribute('placeholder');\n    }\n    floatLabelElement.innerText = SanitizeHtmlHelper.sanitize(placeholder);\n    searchWrapper.appendChild(floatLinelement);\n    searchWrapper.appendChild(floatLabelElement);\n    overAllWrapper.classList.add('e-float-input');\n    updateFloatLabelState(value, floatLabelElement);\n    if (floatLabelType === 'Always') {\n        if (floatLabelElement.classList.contains(LABELBOTTOM)) {\n            removeClass([floatLabelElement], LABELBOTTOM);\n        }\n        addClass([floatLabelElement], LABELTOP);\n    }\n}\n/**\n * Function to update status of the Float Label element.\n * @param value - Value of the MultiSelect.\n * @param label - float label element.\n */\nfunction updateFloatLabelState(value, label) {\n    if (value && value.length > 0) {\n        addClass([label], LABELTOP);\n        removeClass([label], LABELBOTTOM);\n    }\n    else {\n        removeClass([label], LABELTOP);\n        addClass([label], LABELBOTTOM);\n    }\n}\n/**\n * Function to remove Float Label element.\n * @param overAllWrapper - overall wrapper of multiselect.\n * @param componentWrapper - wrapper element of multiselect.\n * @param searchWrapper - search wrapper of multiselect.\n * @param inputElement - specify the input wrapper.\n * @param value - Value of the MultiSelect.\n * @param floatLabelType - Specify the FloatLabel Type.\n * @param placeholder - Specify the PlaceHolder text.\n */\nfunction removeFloating(overAllWrapper, componentWrapper, searchWrapper, inputElement, value, floatLabelType, placeholder) {\n    let placeholderElement = componentWrapper.querySelector('.' + FLOATTEXT);\n    let floatLine = componentWrapper.querySelector('.' + FLOATLINE);\n    let placeholderText;\n    if (!isNullOrUndefined(placeholderElement)) {\n        placeholderText = placeholderElement.innerText;\n        detach(searchWrapper.querySelector('.' + FLOATTEXT));\n        setPlaceHolder(value, inputElement, placeholderText);\n        if (!isNullOrUndefined(floatLine)) {\n            detach(searchWrapper.querySelector('.' + FLOATLINE));\n        }\n    }\n    else {\n        placeholderText = (placeholder !== null) ? placeholder : '';\n        setPlaceHolder(value, inputElement, placeholderText);\n    }\n    overAllWrapper.classList.remove('e-float-input');\n}\n/**\n * Function to set the placeholder to the element.\n * @param value - Value of the MultiSelect.\n * @param inputElement - specify the input wrapper.\n * @param placeholder - Specify the PlaceHolder text.\n */\nfunction setPlaceHolder(value, inputElement, placeholder) {\n    if (value && value.length) {\n        inputElement.placeholder = '';\n    }\n    else {\n        inputElement.placeholder = placeholder;\n    }\n}\n/**\n * Function for focusing the Float Element.\n * @param overAllWrapper - overall wrapper of multiselect.\n * @param componentWrapper - wrapper element of multiselect.\n */\nfunction floatLabelFocus(overAllWrapper, componentWrapper) {\n    overAllWrapper.classList.add('e-input-focus');\n    let label = componentWrapper.querySelector('.' + FLOATTEXT);\n    if (!isNullOrUndefined(label)) {\n        addClass([label], LABELTOP);\n        if (label.classList.contains(LABELBOTTOM)) {\n            removeClass([label], LABELBOTTOM);\n        }\n    }\n}\n/**\n * Function to focus the Float Label element.\n * @param overAllWrapper - overall wrapper of multiselect.\n * @param componentWrapper - wrapper element of multiselect.\n * @param value - Value of the MultiSelect.\n * @param floatLabelType - Specify the FloatLabel Type.\n * @param placeholder - Specify the PlaceHolder text.\n */\nfunction floatLabelBlur(overAllWrapper, componentWrapper, value, floatLabelType, placeholder) {\n    overAllWrapper.classList.remove('e-input-focus');\n    let label = componentWrapper.querySelector('.' + FLOATTEXT);\n    if (value && value.length <= 0 && floatLabelType === 'Auto' && !isNullOrUndefined(label)) {\n        if (label.classList.contains(LABELTOP)) {\n            removeClass([label], LABELTOP);\n        }\n        addClass([label], LABELBOTTOM);\n    }\n}\n\nvar __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\n/* tslint:disable */\n/* tslint:enable */\nconst FOCUS = 'e-input-focus';\nconst DISABLED$1 = 'e-disabled';\nconst OVER_ALL_WRAPPER = 'e-multiselect e-input-group e-control-wrapper';\nconst ELEMENT_WRAPPER = 'e-multi-select-wrapper';\nconst ELEMENT_MOBILE_WRAPPER = 'e-mob-wrapper';\nconst HIDE_LIST = 'e-hide-listitem';\nconst DELIMITER_VIEW = 'e-delim-view';\nconst CHIP_WRAPPER$1 = 'e-chips-collection';\nconst CHIP$1 = 'e-chips';\nconst CHIP_CONTENT$1 = 'e-chipcontent';\nconst CHIP_CLOSE$1 = 'e-chips-close';\nconst CHIP_SELECTED = 'e-chip-selected';\nconst SEARCHBOX_WRAPPER = 'e-searcher';\nconst DELIMITER_VIEW_WRAPPER = 'e-delimiter';\nconst ZERO_SIZE = 'e-zero-size';\nconst REMAIN_WRAPPER$1 = 'e-remain';\nconst CLOSEICON_CLASS$1 = 'e-chips-close e-close-hooker';\nconst DELIMITER_WRAPPER = 'e-delim-values';\nconst POPUP_WRAPPER = 'e-ddl e-popup e-multi-select-list-wrapper';\nconst INPUT_ELEMENT = 'e-dropdownbase';\nconst RTL_CLASS = 'e-rtl';\nconst CLOSE_ICON_HIDE = 'e-close-icon-hide';\nconst MOBILE_CHIP = 'e-mob-chip';\nconst FOOTER$1 = 'e-ddl-footer';\nconst HEADER$1 = 'e-ddl-header';\nconst DISABLE_ICON = 'e-ddl-disable-icon';\nconst SPINNER_CLASS$1 = 'e-ms-spinner-icon';\nconst HIDDEN_ELEMENT = 'e-multi-hidden';\nconst destroy = 'destroy';\nconst dropdownIcon = 'e-input-group-icon e-ddl-icon';\nconst iconAnimation = 'e-icon-anim';\nconst TOTAL_COUNT_WRAPPER$1 = 'e-delim-total';\nconst BOX_ELEMENT = 'e-multiselect-box';\nconst FILTERPARENT = 'e-filter-parent';\nconst CUSTOM_WIDTH = 'e-search-custom-width';\n/**\n * The Multiselect allows the user to pick a more than one value from list of predefined values.\n * ```html\n * <select id=\"list\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n * <script>\n *   var multiselectObj = new Multiselect();\n *   multiselectObj.appendTo(\"#list\");\n * </script>\n * ```\n */\nlet MultiSelect = class MultiSelect extends DropDownBase {\n    /**\n     * Constructor for creating the DropDownList widget.\n     */\n    constructor(option, element) {\n        super(option, element);\n        this.isValidKey = false;\n        this.selectAllEventData = [];\n        this.selectAllEventEle = [];\n        this.isDynamicDataChange = false;\n        this.scrollFocusStatus = false;\n        this.keyDownStatus = false;\n    }\n    ;\n    enableRTL(state) {\n        if (state) {\n            this.overAllWrapper.classList.add(RTL_CLASS);\n        }\n        else {\n            this.overAllWrapper.classList.remove(RTL_CLASS);\n        }\n        if (this.popupObj) {\n            this.popupObj.enableRtl = state;\n            this.popupObj.dataBind();\n        }\n    }\n    requiredModules() {\n        let modules = [];\n        if (this.mode === 'CheckBox') {\n            this.isGroupChecking = this.enableGroupCheckBox;\n            if (this.enableGroupCheckBox) {\n                let prevOnChange = this.isProtectedOnChange;\n                this.isProtectedOnChange = true;\n                this.enableSelectionOrder = false;\n                this.isProtectedOnChange = prevOnChange;\n            }\n            this.allowCustomValue = false;\n            this.hideSelectedItem = false;\n            this.closePopupOnSelect = false;\n            modules.push({\n                member: 'CheckBoxSelection',\n                args: [this]\n            });\n        }\n        return modules;\n    }\n    updateHTMLAttribute() {\n        if (Object.keys(this.htmlAttributes).length) {\n            for (let htmlAttr of Object.keys(this.htmlAttributes)) {\n                switch (htmlAttr) {\n                    case 'class':\n                        let updatedClassValue = (this.htmlAttributes[htmlAttr].replace(/\\s+/g, ' ')).trim();\n                        if (updatedClassValue !== '') {\n                            addClass([this.overAllWrapper], updatedClassValue.split(' '));\n                            addClass([this.popupWrapper], updatedClassValue.split(' '));\n                        }\n                        break;\n                    case 'disabled':\n                        this.enable(false);\n                        break;\n                    case 'placeholder':\n                        if (!this.placeholder) {\n                            this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                            this.setProperties({ placeholder: this.inputElement.placeholder }, true);\n                            this.refreshPlaceHolder();\n                        }\n                        break;\n                    default:\n                        let defaultAttr = ['id'];\n                        let validateAttr = ['name', 'required', 'aria-required', 'form'];\n                        let containerAttr = ['title', 'role', 'style', 'class'];\n                        if (defaultAttr.indexOf(htmlAttr) > -1) {\n                            this.element.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                        }\n                        else if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {\n                            this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                        }\n                        else if (containerAttr.indexOf(htmlAttr) > -1) {\n                            this.overAllWrapper.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                        }\n                        else {\n                            this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    updateReadonly(state) {\n        if (state || this.mode === 'CheckBox') {\n            this.inputElement.setAttribute('readonly', 'true');\n        }\n        else {\n            this.inputElement.removeAttribute('readonly');\n        }\n    }\n    updateClearButton(state) {\n        if (state) {\n            if (this.overAllClear.parentNode) {\n                this.overAllClear.style.display = '';\n            }\n            else {\n                this.componentWrapper.appendChild(this.overAllClear);\n            }\n            this.componentWrapper.classList.remove(CLOSE_ICON_HIDE);\n        }\n        else {\n            this.overAllClear.style.display = 'none';\n            this.componentWrapper.classList.add(CLOSE_ICON_HIDE);\n        }\n    }\n    updateCssClass() {\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            let updatedCssClassValues = this.cssClass;\n            updatedCssClassValues = (this.cssClass.replace(/\\s+/g, ' ')).trim();\n            if (updatedCssClassValues !== '') {\n                addClass([this.overAllWrapper], updatedCssClassValues.split(' '));\n                addClass([this.popupWrapper], updatedCssClassValues.split(' '));\n            }\n        }\n    }\n    updateOldPropCssClass(oldClass) {\n        if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n            oldClass = (oldClass.replace(/\\s+/g, ' ')).trim();\n            if (oldClass !== '') {\n                removeClass([this.overAllWrapper], oldClass.split(' '));\n                removeClass([this.popupWrapper], oldClass.split(' '));\n            }\n        }\n    }\n    onPopupShown() {\n        if (Browser.isDevice && (this.mode === 'CheckBox' && this.allowFiltering)) {\n            let proxy = this;\n            window.onpopstate = () => {\n                proxy.hidePopup();\n                proxy.inputElement.focus();\n            };\n            history.pushState({}, '');\n        }\n        let animModel = { name: 'FadeIn', duration: 100 };\n        let eventArgs = { popup: this.popupObj, cancel: false, animation: animModel };\n        this.trigger('open', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel) {\n                this.focusAtFirstListItem();\n                document.body.appendChild(this.popupObj.element);\n                if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n                    this.updateListItems(this.list.querySelectorAll('li.e-list-item'), this.mainList.querySelectorAll('li.e-list-item'));\n                }\n                if (this.mode === 'CheckBox' || this.showDropDownIcon) {\n                    addClass([this.overAllWrapper], [iconAnimation]);\n                }\n                this.refreshPopup();\n                this.popupObj.show(eventArgs.animation, (this.zIndex === 1000) ? this.element : null);\n                attributes(this.inputElement, { 'aria-expanded': 'true' });\n                if (this.isFirstClick) {\n                    this.loadTemplate();\n                }\n            }\n        });\n    }\n    updateListItems(listItems, mainListItems) {\n        for (let i = 0; i < listItems.length; i++) {\n            this.findGroupStart(listItems[i]);\n            this.findGroupStart(mainListItems[i]);\n        }\n        this.deselectHeader();\n    }\n    loadTemplate() {\n        this.refreshListItems(null);\n        if (this.mode === 'CheckBox') {\n            this.removeFocus();\n        }\n        this.notify('reOrder', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', e: this });\n    }\n    setScrollPosition() {\n        if (((!this.hideSelectedItem && this.mode !== 'CheckBox') || (this.mode === 'CheckBox' && !this.enableSelectionOrder)) &&\n            (!isNullOrUndefined(this.value) && (this.value.length > 0))) {\n            let valueEle = this.findListElement((this.hideSelectedItem ? this.ulElement : this.list), 'li', 'data-value', this.value[this.value.length - 1]);\n            if (!isNullOrUndefined(valueEle)) {\n                this.scrollBottom(valueEle);\n            }\n        }\n    }\n    focusAtFirstListItem() {\n        if (this.ulElement && this.ulElement.querySelector('li.'\n            + dropDownBaseClasses.li)) {\n            let element;\n            if (this.mode === 'CheckBox') {\n                this.removeFocus();\n                return;\n            }\n            else {\n                element = this.ulElement.querySelector('li.'\n                    + dropDownBaseClasses.li + ':not(.'\n                    + HIDE_LIST + ')');\n            }\n            if (element !== null) {\n                this.removeFocus();\n                this.addListFocus(element);\n            }\n        }\n    }\n    focusAtLastListItem(data) {\n        let activeElement;\n        if (data) {\n            activeElement = Search(data, this.liCollections, 'StartsWith', this.ignoreCase);\n        }\n        else {\n            if (this.value && this.value.length) {\n                Search(this.value[this.value.length - 1], this.liCollections, 'StartsWith', this.ignoreCase);\n            }\n            else {\n                activeElement = null;\n            }\n        }\n        if (activeElement && activeElement.item !== null) {\n            this.addListFocus(activeElement.item);\n            this.scrollBottom(activeElement.item, activeElement.index);\n        }\n    }\n    getAriaAttributes() {\n        let ariaAttributes = {\n            'aria-disabled': 'false',\n            'aria-owns': this.element.id + '_options',\n            'role': 'listbox',\n            'aria-multiselectable': 'true',\n            'aria-activedescendant': 'null',\n            'aria-haspopup': 'true',\n            'aria-expanded': 'false'\n        };\n        return ariaAttributes;\n    }\n    updateListARIA() {\n        attributes(this.ulElement, { 'id': this.element.id + '_options', 'role': 'listbox', 'aria-hidden': 'false' });\n        let disableStatus = (this.inputElement.disabled) ? true : false;\n        attributes(this.inputElement, this.getAriaAttributes());\n        if (disableStatus) {\n            attributes(this.inputElement, { 'aria-disabled': 'true' });\n        }\n        this.ensureAriaDisabled((disableStatus) ? 'true' : 'false');\n    }\n    ensureAriaDisabled(status) {\n        if (this.htmlAttributes && this.htmlAttributes['aria-disabled']) {\n            let attr = this.htmlAttributes;\n            extend(attr, { 'aria-disabled': status }, attr);\n            this.setProperties({ htmlAttributes: attr }, true);\n        }\n    }\n    removelastSelection(e) {\n        let elements;\n        elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP$1);\n        let value = elements[elements.length - 1].getAttribute('data-value');\n        if (!isNullOrUndefined(this.value)) {\n            this.tempValues = this.value.slice();\n        }\n        this.removeValue(value, e);\n        this.removeChipSelection();\n        this.updateDelimeter(this.delimiterChar, e);\n        this.makeTextBoxEmpty();\n        if (this.mainList && this.listData) {\n            this.refreshSelection();\n        }\n        this.checkPlaceholderSize();\n    }\n    onActionFailure(e) {\n        super.onActionFailure(e);\n        this.renderPopup();\n        this.onPopupShown();\n    }\n    targetElement() {\n        this.targetInputElement = this.inputElement;\n        if (this.mode === 'CheckBox' && this.allowFiltering) {\n            this.notify('targetElement', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n        }\n        return this.targetInputElement.value;\n    }\n    getForQuery(valuecheck) {\n        let predicate;\n        let field = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;\n        for (let i = 0; i < valuecheck.length; i++) {\n            if (i === 0) {\n                predicate = new Predicate(field, 'equal', valuecheck[i]);\n            }\n            else {\n                predicate = predicate.or(field, 'equal', valuecheck[i]);\n            }\n        }\n        return this.getQuery(this.query).where(predicate);\n    }\n    onActionComplete(ulElement, list, e, isUpdated) {\n        super.onActionComplete(ulElement, list, e);\n        this.updateSelectElementData(this.allowFiltering);\n        let proxy = this;\n        let valuecheck = [];\n        if (isBlazor() && this.isServerRendered && this.isDynamicDataChange && this.value !== null && this.value.length > 0) {\n            let items = [];\n            for (let k = 0; k < this.value.length; k++) {\n                let itemsData = this.getDataByValue(this.value[k]);\n                if (itemsData) {\n                    // tslint:disable-next-line\n                    items.push(itemsData[this.fields.value]); // remove the condition for hybrid\n                }\n            }\n            if (items.length === 0) {\n                this.setProperties({ 'value': null });\n            }\n        }\n        if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {\n            for (let i = 0; i < this.value.length; i++) {\n                let checkEle = this.findListElement(((this.allowFiltering && !isNullOrUndefined(this.mainList)) ? this.mainList : ulElement), 'li', 'data-value', proxy.value[i]);\n                if (!checkEle) {\n                    valuecheck.push(proxy.value[i]);\n                }\n            }\n        }\n        if (valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value)) {\n            this.dataSource.executeQuery(this.getForQuery(valuecheck)).then((e) => {\n                proxy.addItem(e.result, list.length);\n                proxy.updateActionList(ulElement, list, e);\n            });\n        }\n        else {\n            this.updateActionList(ulElement, list, e);\n        }\n        if (isBlazor() && this.isServerRendered && this.allowFiltering && this.mode === 'CheckBox') {\n            this.removeFocus();\n        }\n        if (isBlazor() && this.isServerRendered && this.isDynamicDataChange && this.value && this.value.length > 0) {\n            this.updateVal(this.value, null, 'value');\n            this.addValidInputClass();\n            this.isDynamicDataChange = false;\n        }\n        if (this.dataSource instanceof DataManager && this.mode === 'CheckBox' && this.allowFiltering &&\n            !(isBlazor() && this.isServerRendered)) {\n            this.removeFocus();\n        }\n    }\n    updateActionList(ulElement, list, e, isUpdated) {\n        if (this.mode === 'CheckBox' && this.showSelectAll) {\n            this.notify('selectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n        }\n        if (!this.mainList && !this.mainData) {\n            this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n            this.mainData = list;\n            this.mainListCollection = this.liCollections;\n        }\n        else if (!isNullOrUndefined(this.mainData) && this.mainData.length === 0) {\n            this.mainData = list;\n        }\n        if ((this.remoteCustomValue || list.length <= 0) && this.allowCustomValue && this.inputFocus && this.allowFiltering &&\n            this.inputElement.value && this.inputElement.value !== '') {\n            this.checkForCustomValue(this.tempQuery, this.fields);\n            return;\n        }\n        if (this.value && this.value.length && ((this.mode !== 'CheckBox' && this.inputElement.value !== '') ||\n            this.mode === 'CheckBox')) {\n            this.refreshSelection();\n        }\n        this.updateListARIA();\n        this.unwireListEvents();\n        this.wireListEvents();\n        if (!isNullOrUndefined(this.setInitialValue)) {\n            this.setInitialValue();\n        }\n        if (!isNullOrUndefined(this.selectAllAction)) {\n            this.selectAllAction();\n        }\n        if (this.setDynValue) {\n            if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n                this.initialTextUpdate();\n            }\n            this.initialValueUpdate();\n            this.initialUpdate();\n            this.refreshPlaceHolder();\n            if (this.mode !== 'CheckBox' && this.changeOnBlur) {\n                this.updateValueState(null, this.value, null);\n            }\n        }\n        this.renderPopup();\n        if (this.beforePopupOpen) {\n            this.beforePopupOpen = false;\n            this.onPopupShown();\n        }\n    }\n    refreshSelection() {\n        let value;\n        let element;\n        let className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        if (!isNullOrUndefined(this.value)) {\n            for (let index = 0; !isNullOrUndefined(this.value[index]); index++) {\n                value = this.value[index];\n                element = this.findListElement(this.list, 'li', 'data-value', value);\n                if (element) {\n                    addClass([element], className);\n                    if (this.hideSelectedItem && element.previousSibling\n                        && element.previousElementSibling.classList.contains(dropDownBaseClasses.group)\n                        && (!element.nextElementSibling ||\n                            element.nextElementSibling.classList.contains(dropDownBaseClasses.group))) {\n                        addClass([element.previousElementSibling], className);\n                    }\n                    if (this.hideSelectedItem && this.fields.groupBy && !element.previousElementSibling.classList.contains(HIDE_LIST)) {\n                        this.hideGroupItem(value);\n                    }\n                    if (this.hideSelectedItem && element.classList.contains(dropDownBaseClasses.focus)) {\n                        removeClass([element], dropDownBaseClasses.focus);\n                        let listEle = element.parentElement.querySelectorAll('.' +\n                            dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')');\n                        if (listEle.length > 0) {\n                            addClass([listEle[0]], dropDownBaseClasses.focus);\n                        }\n                        else {\n                            this.ulElement = this.ulElement.cloneNode ? this.ulElement.cloneNode(true) : this.ulElement;\n                            this.l10nUpdate();\n                            addClass([this.list], dropDownBaseClasses.noData);\n                        }\n                    }\n                    element.setAttribute('aria-selected', 'true');\n                    if (this.mode === 'CheckBox' && element.classList.contains('e-active')) {\n                        let ariaValue = element.firstElementChild.getAttribute('aria-checked');\n                        if (isNullOrUndefined(ariaValue) || ariaValue === 'false') {\n                            let args = {\n                                module: 'CheckBoxSelection',\n                                enable: this.mode === 'CheckBox',\n                                li: element,\n                                e: null\n                            };\n                            this.notify('updatelist', args);\n                        }\n                    }\n                }\n            }\n        }\n        this.checkSelectAll();\n        this.checkMaxSelection();\n    }\n    hideGroupItem(value) {\n        let element;\n        let element1;\n        let className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        element1 = element = this.findListElement(this.ulElement, 'li', 'data-value', value);\n        let i = 0;\n        let j = 0;\n        let temp = true;\n        let temp1 = true;\n        do {\n            if (element && element.previousElementSibling\n                && (!element.previousElementSibling.classList.contains(HIDE_LIST) &&\n                    element.previousElementSibling.classList.contains(dropDownBaseClasses.li))) {\n                temp = false;\n            }\n            if (!temp || !element || (element.previousElementSibling\n                && element.previousElementSibling.classList.contains(dropDownBaseClasses.group))) {\n                i = 10;\n            }\n            else {\n                element = element.previousElementSibling;\n            }\n            if (element1 && element1.nextElementSibling\n                && (!element1.nextElementSibling.classList.contains(HIDE_LIST) &&\n                    element1.nextElementSibling.classList.contains(dropDownBaseClasses.li))) {\n                temp1 = false;\n            }\n            if (!temp1 || !element1 || (element1.nextElementSibling\n                && element1.nextElementSibling.classList.contains(dropDownBaseClasses.group))) {\n                j = 10;\n            }\n            else {\n                element1 = element1.nextElementSibling;\n            }\n        } while (i < 10 || j < 10);\n        if (temp && temp1 && !element.previousElementSibling.classList.contains(HIDE_LIST)) {\n            addClass([element.previousElementSibling], className);\n        }\n        else if (temp && temp1 && element.previousElementSibling.classList.contains(HIDE_LIST)) {\n            removeClass([element.previousElementSibling], className);\n        }\n    }\n    checkSelectAll() {\n        let groupItemLength = this.list.querySelectorAll('li.e-list-group-item.e-active').length;\n        let listItem = this.list.querySelectorAll('li.e-list-item');\n        let searchCount = this.list.querySelectorAll('li.' + dropDownBaseClasses.li).length;\n        let searchActiveCount = this.list.querySelectorAll('li.' + dropDownBaseClasses.selected).length;\n        if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n            searchActiveCount = searchActiveCount - groupItemLength;\n        }\n        if ((searchCount === searchActiveCount || searchActiveCount === this.maximumSelectionLength)\n            && (this.mode === 'CheckBox' && this.showSelectAll)) {\n            this.notify('checkSelectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'check' });\n        }\n        else if ((searchCount !== searchActiveCount) && (this.mode === 'CheckBox' && this.showSelectAll)) {\n            this.notify('checkSelectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'uncheck' });\n        }\n        if (this.enableGroupCheckBox && this.fields.groupBy && !this.enableSelectionOrder) {\n            for (let i = 0; i < listItem.length; i++) {\n                this.findGroupStart(listItem[i]);\n            }\n            this.deselectHeader();\n        }\n    }\n    openClick(e) {\n        if (!this.openOnClick && this.mode !== 'CheckBox') {\n            if (this.targetElement() !== '') {\n                this.showPopup();\n            }\n            else {\n                this.hidePopup();\n            }\n        }\n        else if (!this.openOnClick && this.mode === 'CheckBox' && !this.isPopupOpen()) {\n            this.showPopup();\n        }\n    }\n    KeyUp(e) {\n        if (this.mode === 'CheckBox' && !this.openOnClick) {\n            let char = String.fromCharCode(e.keyCode);\n            let isWordCharacter = char.match(/\\w/);\n            if (!isNullOrUndefined(isWordCharacter)) {\n                this.isValidKey = true;\n            }\n        }\n        this.isValidKey = (this.isPopupOpen() && e.keyCode === 8) || this.isValidKey;\n        this.isValidKey = e.ctrlKey && e.keyCode === 86 ? false : this.isValidKey;\n        if (this.isValidKey) {\n            this.isValidKey = false;\n            this.expandTextbox();\n            this.showOverAllClear();\n            switch (e.keyCode) {\n                default:\n                    // For filtering works in mobile firefox\n                    this.search(e);\n            }\n        }\n    }\n    /**\n     * To filter the multiselect data from given data source by using query\n     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param  {Query} query - Specify the query to filter the data.\n     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @return {void}.\n     */\n    filter(dataSource, query, fields) {\n        this.isFiltered = true;\n        this.remoteFilterAction = true;\n        this.dataUpdater(dataSource, query, fields);\n    }\n    getQuery(query) {\n        let filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n        if (this.filterAction) {\n            if (this.targetElement() !== null) {\n                let dataType = this.typeOfData(this.dataSource).typeof;\n                if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n                    filterQuery.where('', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);\n                }\n                else {\n                    let fields = this.fields;\n                    filterQuery.where(!isNullOrUndefined(fields.text) ? fields.text : '', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);\n                }\n            }\n            return filterQuery;\n        }\n        else {\n            return query ? query : this.query ? this.query : new Query();\n        }\n    }\n    dataUpdater(dataSource, query, fields) {\n        this.isDataFetched = false;\n        if (this.targetElement().trim() === '') {\n            let list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n            if (this.backCommand) {\n                this.remoteCustomValue = false;\n                this.onActionComplete(list, this.mainData);\n                if (this.value && this.value.length) {\n                    this.refreshSelection();\n                }\n                if (this.keyCode !== 8) {\n                    this.focusAtFirstListItem();\n                }\n                this.notify('reOrder', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', e: this });\n            }\n        }\n        else {\n            this.resetList(dataSource, fields, query);\n            if (this.allowCustomValue) {\n                if (!(dataSource instanceof DataManager)) {\n                    this.checkForCustomValue(query, fields);\n                }\n                else {\n                    this.remoteCustomValue = true;\n                    this.tempQuery = query;\n                }\n            }\n        }\n        this.refreshPopup();\n        if (this.mode === 'CheckBox') {\n            this.removeFocus();\n        }\n    }\n    checkForCustomValue(query, fields) {\n        let dataChecks = !this.getValueByText(this.inputElement.value, this.ignoreCase);\n        if (this.allowCustomValue && dataChecks) {\n            let value = this.inputElement.value;\n            let field = fields ? fields : this.fields;\n            let customData = (!isNullOrUndefined(this.mainData) && this.mainData.length > 0) ?\n                this.mainData[0] : this.mainData;\n            if (typeof (customData) !== 'string') {\n                let dataItem = {};\n                setValue(field.text, value, dataItem);\n                setValue(field.value, value, dataItem);\n                let tempData = JSON.parse(JSON.stringify(this.listData));\n                tempData.splice(0, 0, dataItem);\n                this.resetList(tempData, field, query);\n            }\n            else {\n                let tempData = [this.inputElement.value];\n                this.resetList(tempData, field);\n            }\n        }\n        if (this.value && this.value.length) {\n            this.refreshSelection();\n        }\n    }\n    getNgDirective() {\n        return 'EJS-MULTISELECT';\n    }\n    wrapperClick(e) {\n        this.setDynValue = false;\n        if (!this.enabled) {\n            return;\n        }\n        if (e.target === this.overAllClear) {\n            e.preventDefault();\n            return;\n        }\n        if (!this.inputFocus) {\n            this.inputElement.focus();\n        }\n        if (!this.readonly) {\n            if (e.target && e.target.classList.toString().indexOf(CHIP_CLOSE$1) !== -1) {\n                if (this.isPopupOpen()) {\n                    this.refreshPopup();\n                }\n                return;\n            }\n            if (!this.isPopupOpen() &&\n                (this.openOnClick || (this.showDropDownIcon && e.target && e.target.className === dropdownIcon))) {\n                this.showPopup();\n            }\n            else {\n                this.hidePopup();\n                if (this.mode === 'CheckBox') {\n                    this.showOverAllClear();\n                    this.inputFocus = true;\n                    if (!this.overAllWrapper.classList.contains(FOCUS)) {\n                        this.overAllWrapper.classList.add(FOCUS);\n                    }\n                }\n            }\n        }\n        if (!(this.targetElement() && this.targetElement() !== '')) {\n            e.preventDefault();\n        }\n    }\n    enable(state) {\n        if (state) {\n            this.overAllWrapper.classList.remove(DISABLED$1);\n            this.inputElement.removeAttribute('disabled');\n            attributes(this.inputElement, { 'aria-disabled': 'false' });\n            this.ensureAriaDisabled('false');\n        }\n        else {\n            this.overAllWrapper.classList.add(DISABLED$1);\n            this.inputElement.setAttribute('disabled', 'true');\n            attributes(this.inputElement, { 'aria-disabled': 'true' });\n            this.ensureAriaDisabled('true');\n        }\n        if (this.enabled !== state) {\n            this.enabled = state;\n        }\n        this.hidePopup();\n    }\n    onBlur(eve, isDocClickFromCheck) {\n        let target;\n        if (!isNullOrUndefined(eve)) {\n            target = eve.relatedTarget;\n        }\n        if (this.popupObj && document.body.contains(this.popupObj.element) && this.popupObj.element.contains(target)) {\n            if (this.mode !== 'CheckBox') {\n                this.inputElement.focus();\n            }\n            else if ((this.floatLabelType === 'Auto' &&\n                ((this.overAllWrapper.classList.contains('e-outline')) || (this.overAllWrapper.classList.contains('e-filled'))))) {\n                addClass([this.overAllWrapper], 'e-valid-input');\n            }\n            return;\n        }\n        if (this.floatLabelType === 'Auto' && (this.overAllWrapper.classList.contains('e-outline')) && this.mode === 'CheckBox' &&\n            ((isNullOrUndefined(this.value)) || this.value.length === 0)) {\n            removeClass([this.overAllWrapper], 'e-valid-input');\n        }\n        if (this.mode === 'CheckBox' && Browser.isIE && !isNullOrUndefined(eve) && !isDocClickFromCheck) {\n            this.inputFocus = false;\n            this.overAllWrapper.classList.remove(FOCUS);\n            return;\n        }\n        if (this.scrollFocusStatus) {\n            if (!isNullOrUndefined(eve)) {\n                eve.preventDefault();\n            }\n            this.inputElement.focus();\n            this.scrollFocusStatus = false;\n            return;\n        }\n        this.inputFocus = false;\n        this.overAllWrapper.classList.remove(FOCUS);\n        this.refreshListItems(null);\n        if (this.mode !== 'Box' && this.mode !== 'CheckBox') {\n            this.updateDelimView();\n        }\n        if (this.changeOnBlur) {\n            this.updateValueState(eve, this.value, this.tempValues);\n            this.dispatchEvent(this.hiddenElement, 'change');\n        }\n        this.overAllClear.style.display = 'none';\n        if (this.isPopupOpen()) {\n            this.DropDownBaseresetBlazorTemplates(false, false, true, true, false, true, true);\n            this.hidePopup();\n        }\n        this.makeTextBoxEmpty();\n        this.trigger('blur');\n        this.focused = true;\n        if (Browser.isDevice && this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n            this.removeChipFocus();\n        }\n        this.removeChipSelection();\n        this.refreshInputHight();\n        floatLabelBlur(this.overAllWrapper, this.componentWrapper, this.value, this.floatLabelType, this.placeholder);\n        this.refreshPlaceHolder();\n        if ((this.allowFiltering || (this.enableSelectionOrder === true && this.mode === 'CheckBox'))\n            && !isNullOrUndefined(this.mainList)) {\n            this.ulElement = this.mainList;\n        }\n        this.checkPlaceholderSize();\n    }\n    checkPlaceholderSize() {\n        if (this.showDropDownIcon) {\n            let downIconWidth = this.dropIcon.offsetWidth +\n                parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);\n            this.setPlaceholderSize(downIconWidth);\n        }\n        else {\n            if (!isNullOrUndefined(this.dropIcon)) {\n                this.setPlaceholderSize(this.showDropDownIcon ? this.dropIcon.offsetWidth : 0);\n            }\n        }\n    }\n    setPlaceholderSize(downIconWidth) {\n        if (isNullOrUndefined(this.value) || this.value.length === 0) {\n            if (this.dropIcon.offsetWidth !== 0) {\n                this.searchWrapper.style.width = ('calc(100% - ' + (downIconWidth + 10)) + 'px';\n            }\n            else {\n                addClass([this.searchWrapper], CUSTOM_WIDTH);\n            }\n        }\n        else if (!isNullOrUndefined(this.value)) {\n            this.searchWrapper.removeAttribute('style');\n            removeClass([this.searchWrapper], CUSTOM_WIDTH);\n        }\n    }\n    refreshInputHight() {\n        if ((!this.value || !this.value.length) && (isNullOrUndefined(this.text) || this.text === '')) {\n            this.searchWrapper.classList.remove(ZERO_SIZE);\n        }\n        else {\n            this.searchWrapper.classList.add(ZERO_SIZE);\n        }\n    }\n    validateValues(newValue, oldValue) {\n        return JSON.stringify(newValue.slice().sort()) !== JSON.stringify(oldValue.slice().sort());\n    }\n    updateValueState(event, newVal, oldVal) {\n        let newValue = newVal ? newVal : [];\n        let oldValue = oldVal ? oldVal : [];\n        if (this.initStatus && this.validateValues(newValue, oldValue)) {\n            let eventArgs = {\n                e: event,\n                oldValue: oldVal,\n                value: newVal,\n                isInteracted: event ? true : false,\n                element: this.element\n            };\n            this.trigger('change', eventArgs);\n            this.updateTempValue();\n            if (!this.changeOnBlur) {\n                this.dispatchEvent(this.hiddenElement, 'change');\n            }\n        }\n    }\n    updateTempValue() {\n        if (!this.value) {\n            this.tempValues = this.value;\n        }\n        else {\n            this.tempValues = this.value.slice();\n        }\n    }\n    getPagingCount() {\n        let height = this.list.classList.contains(dropDownBaseClasses.noData) ? null :\n            getComputedStyle(this.getItems()[0], null).getPropertyValue('height');\n        return Math.round(this.list.offsetHeight / parseInt(height, 10));\n    }\n    pageUpSelection(steps) {\n        let collection = this.list.querySelectorAll('li.'\n            + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        let previousItem;\n        previousItem = steps >= 0 ? collection[steps + 1] : collection[0];\n        this.addListFocus(previousItem);\n        this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));\n    }\n    ;\n    pageDownSelection(steps) {\n        let list = this.getItems();\n        let collection = this.list.querySelectorAll('li.'\n            + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        let previousItem;\n        previousItem = steps <= collection.length ? collection[steps - 1] : collection[collection.length - 1];\n        this.addListFocus(previousItem);\n        this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));\n    }\n    getItems() {\n        if (!this.list) {\n            super.render();\n        }\n        return this.ulElement && this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li).length > 0 ?\n            this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li\n                + ':not(.' + HIDE_LIST + ')') : [];\n    }\n    focusInHandler(e) {\n        if (this.enabled) {\n            this.showOverAllClear();\n            this.inputFocus = true;\n            if (this.value && this.value.length) {\n                if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n                    this.chipCollectionWrapper.style.display = '';\n                }\n                else {\n                    this.showDelimWrapper();\n                }\n                if (this.mode !== 'CheckBox') {\n                    this.viewWrapper.style.display = 'none';\n                }\n            }\n            if (this.mode !== 'CheckBox') {\n                this.searchWrapper.classList.remove(ZERO_SIZE);\n            }\n            this.checkPlaceholderSize();\n            if (this.focused) {\n                let args = { isInteracted: e ? true : false, event: e };\n                this.trigger('focus', args);\n                this.focused = false;\n            }\n            if (!this.overAllWrapper.classList.contains(FOCUS)) {\n                this.overAllWrapper.classList.add(FOCUS);\n            }\n            floatLabelFocus(this.overAllWrapper, this.componentWrapper);\n            if (this.isPopupOpen()) {\n                this.refreshPopup();\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    showDelimWrapper() {\n        if (this.mode === 'CheckBox') {\n            this.viewWrapper.style.display = '';\n        }\n        else {\n            this.delimiterWrapper.style.display = '';\n        }\n        this.componentWrapper.classList.add(DELIMITER_VIEW_WRAPPER);\n    }\n    hideDelimWrapper() {\n        this.delimiterWrapper.style.display = 'none';\n        this.componentWrapper.classList.remove(DELIMITER_VIEW_WRAPPER);\n    }\n    expandTextbox() {\n        let size = 5;\n        if (this.placeholder) {\n            size = size > this.inputElement.placeholder.length ? size : this.inputElement.placeholder.length;\n        }\n        if (this.inputElement.value.length > size) {\n            this.inputElement.size = this.inputElement.value.length;\n        }\n        else {\n            this.inputElement.size = size;\n        }\n    }\n    isPopupOpen() {\n        return ((this.popupWrapper !== null) && (this.popupWrapper.parentElement !== null));\n    }\n    refreshPopup() {\n        if (this.popupObj && this.mobFilter) {\n            this.popupObj.setProperties({ width: this.calcPopupWidth() });\n            this.popupObj.refreshPosition(this.overAllWrapper);\n            this.popupObj.resolveCollision();\n        }\n    }\n    checkTextLength() {\n        return this.targetElement().length < 1;\n    }\n    popupKeyActions(e) {\n        switch (e.keyCode) {\n            case 38:\n                this.hidePopup();\n                if (this.mode === 'CheckBox') {\n                    this.inputElement.focus();\n                }\n                e.preventDefault();\n                break;\n            case 40:\n                if (!this.isPopupOpen()) {\n                    this.showPopup();\n                    e.preventDefault();\n                }\n                break;\n        }\n    }\n    updateAriaAttribute() {\n        let focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n        if (!isNullOrUndefined(focusedItem)) {\n            this.inputElement.setAttribute('aria-activedescendant', focusedItem.id);\n        }\n    }\n    homeNavigation(isHome) {\n        this.removeFocus();\n        let scrollEle = this.ulElement.querySelectorAll('li.' + dropDownBaseClasses.li\n            + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        if (scrollEle.length > 0) {\n            let element = scrollEle[(isHome) ? 0 : (scrollEle.length - 1)];\n            element.classList.add(dropDownBaseClasses.focus);\n            this.scrollBottom(element);\n        }\n    }\n    onKeyDown(e) {\n        if (this.readonly || !this.enabled && this.mode !== 'CheckBox') {\n            return;\n        }\n        this.keyDownStatus = true;\n        if (e.keyCode > 111 && e.keyCode < 124) {\n            return;\n        }\n        if (e.altKey) {\n            this.popupKeyActions(e);\n            return;\n        }\n        else if (this.isPopupOpen()) {\n            let focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n            let activeIndex;\n            switch (e.keyCode) {\n                case 36:\n                case 35:\n                    this.homeNavigation((e.keyCode === 36) ? true : false);\n                    break;\n                case 33:\n                    e.preventDefault();\n                    if (focusedItem) {\n                        this.getIndexByValue(focusedItem.getAttribute('data-value'));\n                        this.pageUpSelection(activeIndex - this.getPagingCount());\n                        this.updateAriaAttribute();\n                    }\n                    return;\n                case 34:\n                    e.preventDefault();\n                    if (focusedItem) {\n                        this.getIndexByValue(focusedItem.getAttribute('data-value'));\n                        this.pageDownSelection(activeIndex + this.getPagingCount());\n                        this.updateAriaAttribute();\n                    }\n                    return;\n                case 38:\n                    this.arrowUp(e);\n                    break;\n                case 40:\n                    this.arrowDown(e);\n                    break;\n                case 27:\n                    e.preventDefault();\n                    this.hidePopup();\n                    if (this.mode === 'CheckBox') {\n                        this.inputElement.focus();\n                    }\n                    return;\n                case 13:\n                    e.preventDefault();\n                    if (this.mode !== 'CheckBox') {\n                        this.selectByKey(e);\n                    }\n                    this.checkPlaceholderSize();\n                    return;\n                case 32:\n                    this.spaceKeySelection(e);\n                    return;\n                case 9:\n                    e.preventDefault();\n                    this.hidePopup();\n                    this.inputElement.focus();\n                    this.overAllWrapper.classList.add(FOCUS);\n            }\n        }\n        else {\n            switch (e.keyCode) {\n                case 13:\n                case 9:\n                case 16:\n                case 17:\n                case 20:\n                    return;\n                case 40:\n                    if (this.openOnClick) {\n                        this.showPopup();\n                    }\n                    break;\n                case 27:\n                    e.preventDefault();\n                    this.escapeAction();\n                    return;\n            }\n        }\n        if (this.checkTextLength()) {\n            this.keyNavigation(e);\n        }\n        if (this.mode === 'CheckBox' && this.enableSelectionOrder) {\n            this.checkBackCommand(e);\n        }\n        this.expandTextbox();\n        this.refreshPopup();\n    }\n    arrowDown(e) {\n        e.preventDefault();\n        this.moveByList(1);\n        this.keyAction = true;\n        if (document.activeElement.classList.contains('e-input-filter')\n            || (this.mode === 'CheckBox' && !this.allowFiltering && document.activeElement !== this.list)) {\n            this.list.focus();\n            EventHandler.add(this.list, 'keydown', this.onKeyDown, this);\n        }\n        this.updateAriaAttribute();\n    }\n    arrowUp(e) {\n        e.preventDefault();\n        this.keyAction = true;\n        let list = this.list.querySelectorAll('li.'\n            + dropDownBaseClasses.li\n            + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n            list = this.list.querySelectorAll('li.'\n                + dropDownBaseClasses.li + ',li.' + dropDownBaseClasses.group\n                + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        }\n        let focuseElem = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n        let index = Array.prototype.slice.call(list).indexOf(focuseElem);\n        if (index <= 0 && (this.mode === 'CheckBox' && this.allowFiltering)) {\n            this.keyAction = false;\n            this.notify('inputFocus', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'focus' });\n        }\n        else {\n            this.list.focus();\n        }\n        this.moveByList(-1);\n        this.updateAriaAttribute();\n    }\n    spaceKeySelection(e) {\n        if (this.mode === 'CheckBox') {\n            if (!document.activeElement.classList.contains('e-input-filter')) {\n                e.preventDefault();\n                this.keyAction = true;\n                this.list.focus();\n            }\n            this.selectByKey(e);\n        }\n        this.checkPlaceholderSize();\n    }\n    checkBackCommand(e) {\n        if (e.keyCode === 8 && this.targetElement() === '') {\n            this.backCommand = false;\n        }\n        else {\n            this.backCommand = true;\n        }\n    }\n    keyNavigation(e) {\n        if ((this.mode !== 'Delimiter' && this.mode !== 'CheckBox') && this.value && this.value.length) {\n            switch (e.keyCode) {\n                case 37: //left arrow   \n                    e.preventDefault();\n                    this.moveBy(-1, e);\n                    break;\n                case 39: //right arrow  \n                    e.preventDefault();\n                    this.moveBy(1, e);\n                    break;\n                case 8:\n                    this.removelastSelection(e);\n                    break;\n                case 46: //del\n                    this.removeSelectedChip(e);\n                    break;\n            }\n        }\n        else if (e.keyCode === 8 && this.mode === 'Delimiter') {\n            if (this.value && this.value.length) {\n                e.preventDefault();\n                let temp = this.value[this.value.length - 1];\n                this.removeValue(temp, e);\n                this.updateDelimeter(this.delimiterChar, e);\n                this.focusAtLastListItem(temp);\n            }\n        }\n    }\n    selectByKey(e) {\n        this.removeChipSelection();\n        this.selectListByKey(e);\n        if (this.hideSelectedItem) {\n            this.focusAtFirstListItem();\n        }\n    }\n    escapeAction() {\n        let temp = this.tempValues ? this.tempValues.slice() : [];\n        if (this.value && this.validateValues(this.value, temp)) {\n            if (this.mode !== 'CheckBox') {\n                this.value = temp;\n                this.initialValueUpdate();\n            }\n            if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n                this.chipCollectionWrapper.style.display = '';\n            }\n            else {\n                this.showDelimWrapper();\n            }\n            this.refreshPlaceHolder();\n            if (this.value.length) {\n                this.showOverAllClear();\n            }\n            else {\n                this.hideOverAllClear();\n            }\n        }\n        this.makeTextBoxEmpty();\n    }\n    scrollBottom(selectedLI, activeIndex) {\n        let currentOffset = this.list.offsetHeight;\n        let nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;\n        let nextOffset = this.list.scrollTop + nextBottom - currentOffset;\n        let boxRange = (selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop);\n        boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ?\n            boxRange - this.fixedHeaderElement.offsetHeight : boxRange;\n        if (activeIndex === 0) {\n            this.list.scrollTop = 0;\n        }\n        else if (nextBottom > currentOffset) {\n            this.list.scrollTop = nextOffset;\n        }\n        else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n            this.list.scrollTop = nextOffset;\n        }\n    }\n    scrollTop(selectedLI, activeIndex) {\n        let nextOffset = selectedLI.offsetTop - this.list.scrollTop;\n        let nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;\n        nextOffset = this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ?\n            nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;\n        let boxRange = (selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop);\n        if (activeIndex === 0) {\n            this.list.scrollTop = 0;\n        }\n        else if (nextOffset < 0) {\n            this.list.scrollTop = this.list.scrollTop + nextOffset;\n        }\n        else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n            this.list.scrollTop = selectedLI.offsetTop - (this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ?\n                this.fixedHeaderElement.offsetHeight : 0);\n        }\n    }\n    selectListByKey(e) {\n        let li = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n        let limit = this.value && this.value.length ? this.value.length : 0;\n        let target;\n        if (li !== null) {\n            if (li.classList.contains('e-active')) {\n                limit = limit - 1;\n            }\n            if (this.isValidLI(li) && limit < this.maximumSelectionLength) {\n                this.updateListSelection(li, e);\n                this.addListFocus(li);\n                if (this.mode === 'CheckBox') {\n                    this.updateDelimView();\n                    this.updateDelimeter(this.delimiterChar, e);\n                    this.refreshInputHight();\n                    this.checkPlaceholderSize();\n                    if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n                        target = li.firstElementChild.lastElementChild;\n                        this.findGroupStart(target);\n                        this.deselectHeader();\n                    }\n                }\n                else {\n                    this.updateDelimeter(this.delimiterChar, e);\n                }\n                this.makeTextBoxEmpty();\n                if (this.mode !== 'CheckBox') {\n                    this.refreshListItems(li.textContent);\n                }\n                if (!this.changeOnBlur) {\n                    this.updateValueState(e, this.value, this.tempValues);\n                }\n                this.refreshPopup();\n            }\n            else {\n                if (!this.isValidLI(li) && limit < this.maximumSelectionLength) {\n                    target = li.firstElementChild.lastElementChild;\n                    target.classList.contains('e-check') ? this.selectAllItem(false, e, li) : this.selectAllItem(true, e, li);\n                }\n            }\n            this.refreshSelection();\n            if (this.closePopupOnSelect) {\n                this.hidePopup();\n            }\n        }\n        this.refreshPlaceHolder();\n    }\n    refreshListItems(data) {\n        if ((this.allowFiltering || (this.mode === 'CheckBox' && this.enableSelectionOrder === true)\n            || this.allowCustomValue) && this.mainList && this.listData) {\n            let list;\n            list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n            this.onActionComplete(list, this.mainData);\n            this.focusAtLastListItem(data);\n            if (this.value && this.value.length) {\n                this.refreshSelection();\n            }\n        }\n    }\n    removeSelectedChip(e) {\n        let selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);\n        let temp;\n        if (selectedElem !== null) {\n            if (!isNullOrUndefined(this.value)) {\n                this.tempValues = this.value.slice();\n            }\n            temp = selectedElem.nextElementSibling;\n            if (temp !== null) {\n                this.removeChipSelection();\n                this.addChipSelection(temp, e);\n            }\n            this.removeValue(selectedElem.getAttribute('data-value'), e);\n            this.makeTextBoxEmpty();\n        }\n        if (this.closePopupOnSelect) {\n            this.hidePopup();\n        }\n        this.checkPlaceholderSize();\n    }\n    moveByTop(state) {\n        let elements = this.list.querySelectorAll('li.' + dropDownBaseClasses.li);\n        let index;\n        if (elements.length > 1) {\n            this.removeFocus();\n            index = state ? 0 : (elements.length - 1);\n            this.addListFocus(elements[index]);\n            this.scrollBottom(elements[index], index);\n        }\n        this.updateAriaAttribute();\n    }\n    moveByList(position) {\n        if (this.list) {\n            let elements = this.list.querySelectorAll('li.'\n                + dropDownBaseClasses.li\n                + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n            if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n                elements = this.list.querySelectorAll('li.'\n                    + dropDownBaseClasses.li + ',li.' + dropDownBaseClasses.group\n                    + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n            }\n            let selectedElem = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n            let temp = -1;\n            if (elements.length) {\n                for (let index = 0; index < elements.length; index++) {\n                    if (elements[index] === selectedElem) {\n                        temp = index;\n                        break;\n                    }\n                }\n                if (position > 0) {\n                    if (temp < (elements.length - 1)) {\n                        this.removeFocus();\n                        this.addListFocus(elements[++temp]);\n                        this.updateCheck(elements[temp]);\n                        this.scrollBottom(elements[temp], temp);\n                    }\n                }\n                else {\n                    if (temp > 0) {\n                        this.removeFocus();\n                        this.addListFocus(elements[--temp]);\n                        this.updateCheck(elements[temp]);\n                        this.scrollTop(elements[temp], temp);\n                    }\n                }\n            }\n        }\n    }\n    updateCheck(element) {\n        if (this.mode === 'CheckBox' && this.enableGroupCheckBox &&\n            !isNullOrUndefined(this.fields.groupBy)) {\n            let checkElement = element.firstElementChild.lastElementChild;\n            if (checkElement.classList.contains('e-check')) {\n                element.classList.add('e-active');\n            }\n            else {\n                element.classList.remove('e-active');\n            }\n        }\n    }\n    moveBy(position, e) {\n        let elements;\n        let selectedElem;\n        let temp;\n        elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP$1);\n        selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);\n        if (selectedElem === null) {\n            if (position < 0) {\n                this.addChipSelection(elements[elements.length - 1], e);\n            }\n        }\n        else {\n            if (position < 0) {\n                temp = selectedElem.previousElementSibling;\n                if (temp !== null) {\n                    this.removeChipSelection();\n                    this.addChipSelection(temp, e);\n                }\n            }\n            else {\n                temp = selectedElem.nextElementSibling;\n                this.removeChipSelection();\n                if (temp !== null) {\n                    this.addChipSelection(temp, e);\n                }\n            }\n        }\n    }\n    chipClick(e) {\n        if (this.enabled) {\n            let elem = closest(e.target, '.' + CHIP$1);\n            this.removeChipSelection();\n            this.addChipSelection(elem, e);\n        }\n    }\n    removeChipSelection() {\n        if (this.chipCollectionWrapper) {\n            this.removeChipFocus();\n        }\n    }\n    addChipSelection(element, e) {\n        addClass([element], CHIP_SELECTED);\n        this.trigger('chipSelection', e);\n    }\n    onChipRemove(e) {\n        if (e.which === 3 || e.button === 2) {\n            return;\n        }\n        if (this.enabled && !this.readonly) {\n            let element = e.target.parentElement;\n            let customVal = element.getAttribute('data-value');\n            let value = this.getFormattedValue(customVal);\n            if (this.allowCustomValue && ((customVal !== 'false' && value === false) ||\n                (!isNullOrUndefined(value) && value.toString() === 'NaN'))) {\n                value = customVal;\n            }\n            if (this.isPopupOpen() && this.mode !== 'CheckBox') {\n                this.hidePopup();\n            }\n            if (!this.inputFocus) {\n                this.inputElement.focus();\n            }\n            this.removeValue(value, e);\n            if (isNullOrUndefined(this.findListElement(this.list, 'li', 'data-value', value)) && this.mainList && this.listData) {\n                let list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n                this.onActionComplete(list, this.mainData);\n            }\n            this.updateDelimeter(this.delimiterChar, e);\n            if (this.placeholder && this.floatLabelType === 'Never') {\n                this.makeTextBoxEmpty();\n                this.checkPlaceholderSize();\n            }\n            else {\n                this.inputElement.value = '';\n            }\n            e.preventDefault();\n        }\n    }\n    makeTextBoxEmpty() {\n        this.inputElement.value = '';\n        this.refreshPlaceHolder();\n    }\n    refreshPlaceHolder() {\n        if (this.placeholder && this.floatLabelType === 'Never') {\n            if ((this.value && this.value.length) || (!isNullOrUndefined(this.text) && this.text !== '')) {\n                this.inputElement.placeholder = '';\n            }\n            else {\n                this.inputElement.placeholder = this.placeholder;\n            }\n        }\n        else {\n            this.setFloatLabelType();\n        }\n        this.expandTextbox();\n    }\n    removeValue(value, eve, length, isClearAll) {\n        let index = this.value.indexOf(this.getFormattedValue(value));\n        if (index === -1 && this.allowCustomValue && !isNullOrUndefined(value)) {\n            index = this.value.indexOf(value.toString());\n        }\n        let targetEle = eve && eve.target;\n        isClearAll = (isClearAll || targetEle && targetEle.classList.contains('e-close-hooker')) ? true : null;\n        let className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        if (index !== -1) {\n            let element = this.findListElement(this.list, 'li', 'data-value', value);\n            let val = this.getDataByValue(value);\n            let eventArgs = {\n                e: eve,\n                item: element,\n                itemData: val,\n                isInteracted: eve ? true : false,\n                cancel: false\n            };\n            this.trigger('removing', eventArgs, (eventArgs) => {\n                if (eventArgs.cancel) {\n                    this.removeIndex++;\n                }\n                else {\n                    let removeVal = this.value.slice(0);\n                    removeVal.splice(index, 1);\n                    if (isBlazor() && this.isServerRendered) {\n                        let removedValues = [].concat([], removeVal);\n                        this.setProperties({ value: removedValues.length === 0 ? null : removedValues }, true);\n                    }\n                    else {\n                        this.setProperties({ value: [].concat([], removeVal) }, true);\n                    }\n                    if (element !== null) {\n                        let hideElement = this.findListElement(this.mainList, 'li', 'data-value', value);\n                        element.setAttribute('aria-selected', 'false');\n                        removeClass([element], className);\n                        if (hideElement) {\n                            hideElement.setAttribute('aria-selected', 'false');\n                            removeClass([element, hideElement], className);\n                        }\n                        this.notify('activeList', {\n                            module: 'CheckBoxSelection',\n                            enable: this.mode === 'CheckBox', li: element,\n                            e: this, index: index\n                        });\n                        this.notify('updatelist', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', li: element, e: eve });\n                        attributes(this.inputElement, { 'aria-activedescendant': element.id });\n                        if ((this.value && this.value.length !== this.mainData.length)\n                            && (this.mode === 'CheckBox' && this.showSelectAll)) {\n                            this.notify('checkSelectAll', { module: 'CheckBoxSelection',\n                                enable: this.mode === 'CheckBox',\n                                value: 'uncheck' });\n                        }\n                    }\n                    if (this.hideSelectedItem && this.fields.groupBy) {\n                        this.hideGroupItem(value);\n                    }\n                    this.updateMainList(true, value);\n                    this.removeChip(value);\n                    this.updateChipStatus();\n                    let limit = this.value && this.value.length ? this.value.length : 0;\n                    if (limit < this.maximumSelectionLength) {\n                        let collection = this.list.querySelectorAll('li.'\n                            + dropDownBaseClasses.li + ':not(.e-active)');\n                        removeClass(collection, 'e-disable');\n                    }\n                    this.trigger('removed', eventArgs);\n                    let targetEle = eve && eve.currentTarget;\n                    let isSelectAll = (targetEle && targetEle.classList.contains('e-selectall-parent')) ? true : null;\n                    if (!this.changeOnBlur && !isClearAll && (eve && length && !isSelectAll)) {\n                        this.updateValueState(eve, this.value, this.tempValues);\n                    }\n                    if (length) {\n                        this.selectAllEventData.push(val);\n                        this.selectAllEventEle.push(element);\n                    }\n                    if (length === 1) {\n                        if (!this.changeOnBlur) {\n                            this.updateValueState(eve, this.value, this.tempValues);\n                        }\n                        let args = {\n                            event: eve,\n                            items: this.selectAllEventEle,\n                            itemData: this.selectAllEventData,\n                            isInteracted: eve ? true : false,\n                            isChecked: false\n                        };\n                        this.trigger('selectedAll', args);\n                        this.selectAllEventData = [];\n                        this.selectAllEventEle = [];\n                    }\n                    if (isClearAll && (length === 1 || length === null)) {\n                        this.clearAllCallback(eve, isClearAll);\n                    }\n                    if (isBlazor() && this.isServerRendered && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n                        this.updatedataValueItems(eve);\n                    }\n                }\n            });\n        }\n    }\n    updateMainList(state, value) {\n        if (this.allowFiltering || this.mode === 'CheckBox') {\n            let element2 = this.findListElement(this.mainList, 'li', 'data-value', value);\n            if (element2) {\n                if (state) {\n                    element2.setAttribute('aria-selected', 'false');\n                    removeClass([element2], this.hideSelectedItem ?\n                        HIDE_LIST :\n                        dropDownBaseClasses.selected);\n                    if (this.mode === 'CheckBox') {\n                        element2.firstElementChild.setAttribute('aria-checked', 'false');\n                        removeClass([element2.firstElementChild.lastElementChild], 'e-check');\n                    }\n                }\n                else {\n                    element2.setAttribute('aria-selected', 'true');\n                    addClass([element2], this.hideSelectedItem ?\n                        HIDE_LIST :\n                        dropDownBaseClasses.selected);\n                    if (this.mode === 'CheckBox') {\n                        element2.firstElementChild.setAttribute('aria-checked', 'true');\n                        addClass([element2.firstElementChild.lastElementChild], 'e-check');\n                    }\n                }\n            }\n        }\n    }\n    removeChip(value) {\n        if (this.chipCollectionWrapper) {\n            let element = this.findListElement(this.chipCollectionWrapper, 'span', 'data-value', value);\n            if (element) {\n                remove(element);\n            }\n        }\n    }\n    setWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.overAllWrapper.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                this.overAllWrapper.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n            }\n        }\n    }\n    updateChipStatus() {\n        if (this.value && this.value.length) {\n            if (!isNullOrUndefined(this.chipCollectionWrapper)) {\n                (this.chipCollectionWrapper.style.display = '');\n            }\n            if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n                this.showDelimWrapper();\n            }\n            this.showOverAllClear();\n        }\n        else {\n            if (!isNullOrUndefined(this.chipCollectionWrapper)) {\n                this.chipCollectionWrapper.style.display = 'none';\n            }\n            if (!isNullOrUndefined(this.delimiterWrapper)) {\n                (this.delimiterWrapper.style.display = 'none');\n            }\n            this.hideOverAllClear();\n        }\n    }\n    addValue(value, text, eve) {\n        if (!this.value) {\n            this.value = [];\n        }\n        if (this.value.indexOf(value) < 0) {\n            this.setProperties({ value: [].concat([], this.value, [value]) }, true);\n        }\n        let element = this.findListElement(this.list, 'li', 'data-value', value);\n        this.removeFocus();\n        if (element) {\n            this.addListFocus(element);\n            this.addListSelection(element);\n        }\n        if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n            this.addChip(text, value, eve);\n        }\n        if (this.hideSelectedItem && this.fields.groupBy) {\n            this.hideGroupItem(value);\n        }\n        this.updateChipStatus();\n        this.checkMaxSelection();\n    }\n    checkMaxSelection() {\n        let limit = this.value && this.value.length ? this.value.length : 0;\n        if (limit === this.maximumSelectionLength) {\n            let collection = this.list.querySelectorAll('li.'\n                + dropDownBaseClasses.li + ':not(.e-active)');\n            addClass(collection, 'e-disable');\n        }\n    }\n    dispatchSelect(value, eve, element, isNotTrigger, length) {\n        if (this.initStatus && !isNotTrigger) {\n            let val = this.getDataByValue(value);\n            let eventArgs = {\n                e: eve,\n                item: element,\n                itemData: val,\n                isInteracted: eve ? true : false,\n                cancel: false\n            };\n            this.trigger('select', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel) {\n                    if (length) {\n                        this.selectAllEventData.push(val);\n                        this.selectAllEventEle.push(element);\n                    }\n                    if (length === 1) {\n                        let args = {\n                            event: eve,\n                            items: this.selectAllEventEle,\n                            itemData: this.selectAllEventData,\n                            isInteracted: eve ? true : false,\n                            isChecked: true\n                        };\n                        this.trigger('selectedAll', args);\n                        this.selectAllEventData = [];\n                    }\n                    this.updateListSelectEventCallback(value, element, eve);\n                }\n            });\n        }\n    }\n    addChip(text, value, e) {\n        if (this.chipCollectionWrapper) {\n            this.getChip(text, value, e);\n        }\n    }\n    removeChipFocus() {\n        let elements;\n        let closeElements;\n        elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP$1);\n        closeElements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP_CLOSE$1.split(' ')[0]);\n        removeClass(elements, CHIP_SELECTED);\n        if (Browser.isDevice) {\n            for (let index = 0; index < closeElements.length; index++) {\n                closeElements[index].style.display = 'none';\n            }\n        }\n    }\n    onMobileChipInteraction(e) {\n        let chipElem = closest(e.target, '.' + CHIP$1);\n        let chipClose = chipElem.querySelector('span.' + CHIP_CLOSE$1.split(' ')[0]);\n        if (this.enabled && !this.readonly) {\n            if (!chipElem.classList.contains(CHIP_SELECTED)) {\n                this.removeChipFocus();\n                chipClose.style.display = '';\n                chipElem.classList.add(CHIP_SELECTED);\n            }\n            this.refreshPopup();\n            e.preventDefault();\n        }\n    }\n    multiCompiler(multiselectTemplate) {\n        let checkTemplate = false;\n        if (multiselectTemplate) {\n            try {\n                checkTemplate = (document.querySelectorAll(multiselectTemplate).length) ? true : false;\n            }\n            catch (exception) {\n                checkTemplate = false;\n            }\n        }\n        return checkTemplate;\n    }\n    getChip(data, value, e) {\n        let itemData = { text: value, value: value };\n        let chip = this.createElement('span', {\n            className: CHIP$1,\n            attrs: { 'data-value': value, 'title': data }\n        });\n        let compiledString;\n        let chipContent = this.createElement('span', { className: CHIP_CONTENT$1 });\n        let chipClose = this.createElement('span', { className: CHIP_CLOSE$1 });\n        if (this.mainData) {\n            itemData = (isBlazor() && this.isServerRendered) ? JSON.parse(JSON.stringify(this.getDataByValue(value)))\n                : this.getDataByValue(value);\n        }\n        if (this.valueTemplate && !isNullOrUndefined(itemData)) {\n            let valuecheck = this.multiCompiler(this.valueTemplate);\n            if (valuecheck) {\n                compiledString = compile(document.querySelector(this.valueTemplate).innerHTML.trim());\n            }\n            else {\n                compiledString = compile(this.valueTemplate);\n            }\n            for (let item of compiledString(itemData, null, null, this.valueTemplateId, this.isStringTemplate)) {\n                chipContent.appendChild(item);\n            }\n            this.DropDownBaseupdateBlazorTemplates(false, false, false, false, true, false, false, false);\n        }\n        else if (this.enableHtmlSanitizer) {\n            chipContent.innerText = data;\n        }\n        else {\n            chipContent.innerHTML = data;\n        }\n        chip.appendChild(chipContent);\n        let eventArgs = {\n            isInteracted: e ? true : false,\n            itemData: itemData,\n            e: e,\n            setClass: (classes) => {\n                addClass([chip], classes);\n            },\n            cancel: false\n        };\n        this.trigger('tagging', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel) {\n                if (eventArgs.setClass && typeof eventArgs.setClass === 'string' && (isBlazor() && this.isServerRendered)) {\n                    addClass([chip], eventArgs.setClass);\n                }\n                if (Browser.isDevice) {\n                    chip.classList.add(MOBILE_CHIP);\n                    append([chipClose], chip);\n                    chipClose.style.display = 'none';\n                    EventHandler.add(chip, 'click', this.onMobileChipInteraction, this);\n                }\n                else {\n                    EventHandler.add(chip, 'mousedown', this.chipClick, this);\n                    if (this.showClearButton) {\n                        chip.appendChild(chipClose);\n                    }\n                }\n                EventHandler.add(chipClose, 'mousedown', this.onChipRemove, this);\n                this.chipCollectionWrapper.appendChild(chip);\n                if (!this.changeOnBlur && e) {\n                    this.updateValueState(e, this.value, this.tempValues);\n                }\n            }\n        });\n    }\n    calcPopupWidth() {\n        let width = formatUnit(this.popupWidth);\n        if (width.indexOf('%') > -1) {\n            let inputWidth = (this.componentWrapper.offsetWidth) * parseFloat(width) / 100;\n            width = inputWidth.toString() + 'px';\n        }\n        return width;\n    }\n    mouseIn() {\n        if (this.enabled && !this.readonly) {\n            this.showOverAllClear();\n        }\n    }\n    mouseOut() {\n        if (!this.inputFocus) {\n            this.overAllClear.style.display = 'none';\n        }\n    }\n    listOption(dataSource, fields) {\n        let iconCss = isNullOrUndefined(fields.iconCss) ? false : true;\n        let fieldProperty = isNullOrUndefined(fields.properties) ? fields :\n            fields.properties;\n        this.listCurrentOptions = (fields.text !== null || fields.value !== null) ? {\n            fields: fieldProperty, showIcon: iconCss, ariaAttributes: { groupItemRole: 'presentation' }\n        } : { fields: { value: 'text' } };\n        extend(this.listCurrentOptions, this.listCurrentOptions, fields, true);\n        if (this.mode === 'CheckBox') {\n            this.notify('listoption', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', dataSource, fieldProperty });\n        }\n        return this.listCurrentOptions;\n    }\n    renderPopup() {\n        if (!this.list) {\n            super.render();\n        }\n        if (!this.popupObj) {\n            let args = { cancel: false };\n            this.trigger('beforeOpen', args, (args) => {\n                if (!args.cancel) {\n                    document.body.appendChild(this.popupWrapper);\n                    let checkboxFilter = this.popupWrapper.querySelector('.' + FILTERPARENT);\n                    if (this.mode === 'CheckBox' && !this.allowFiltering && checkboxFilter && this.filterParent) {\n                        checkboxFilter.remove();\n                        this.filterParent = null;\n                    }\n                    let overAllHeight = parseInt(this.popupHeight, 10);\n                    this.popupWrapper.style.visibility = 'hidden';\n                    if (this.headerTemplate) {\n                        this.setHeaderTemplate();\n                        overAllHeight -= this.header.offsetHeight;\n                    }\n                    append([this.list], this.popupWrapper);\n                    if (this.footerTemplate) {\n                        this.setFooterTemplate();\n                        overAllHeight -= this.footer.offsetHeight;\n                    }\n                    if (this.mode === 'CheckBox' && this.showSelectAll) {\n                        this.notify('selectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                        overAllHeight -= this.selectAllHeight;\n                    }\n                    else if (this.mode === 'CheckBox' && !this.showSelectAll && (!this.headerTemplate || !this.footerTemplate)) {\n                        this.notify('selectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                        overAllHeight = parseInt(this.popupHeight, 10);\n                    }\n                    else if (this.mode === 'CheckBox' && !this.showSelectAll) {\n                        this.notify('selectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                        overAllHeight = parseInt(this.popupHeight, 10);\n                        if (this.headerTemplate && this.header) {\n                            overAllHeight -= this.header.offsetHeight;\n                        }\n                        if (this.footerTemplate && this.footer) {\n                            overAllHeight -= this.footer.offsetHeight;\n                        }\n                    }\n                    if (this.mode === 'CheckBox') {\n                        let args = {\n                            module: 'CheckBoxSelection',\n                            enable: this.mode === 'CheckBox',\n                            popupElement: this.popupWrapper\n                        };\n                        if (this.allowFiltering) {\n                            this.notify('searchBox', args);\n                            overAllHeight -= this.searchBoxHeight;\n                        }\n                        addClass([this.popupWrapper], 'e-checkbox');\n                    }\n                    if (this.popupHeight !== 'auto') {\n                        this.list.style.maxHeight = formatUnit(overAllHeight);\n                        this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);\n                    }\n                    else {\n                        this.list.style.maxHeight = formatUnit(this.popupHeight);\n                    }\n                    this.popupObj = new Popup(this.popupWrapper, {\n                        width: this.calcPopupWidth(), targetType: 'relative', position: { X: 'left', Y: 'bottom' },\n                        relateTo: this.overAllWrapper, collision: { X: 'flip', Y: 'flip' }, offsetY: 1,\n                        enableRtl: this.enableRtl, zIndex: this.zIndex,\n                        close: () => {\n                            if (this.popupObj.element.parentElement) {\n                                this.popupObj.unwireScrollEvents();\n                                detach(this.popupObj.element);\n                            }\n                        },\n                        open: () => {\n                            this.popupObj.resolveCollision();\n                            if (!this.isFirstClick) {\n                                let ulElement = this.list.querySelector('ul');\n                                if (ulElement) {\n                                    if (this.itemTemplate && (isBlazor() && this.isServerRendered)) {\n                                        setTimeout(() => { this.mainList = this.ulElement; }, 0);\n                                    }\n                                    else if (!(this.mode !== 'CheckBox' && (this.allowFiltering || this.allowCustomValue) &&\n                                        this.targetElement().trim() !== '')) {\n                                        this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n                                    }\n                                }\n                                this.isFirstClick = true;\n                            }\n                            this.popupObj.wireScrollEvents();\n                            if (!(this.mode !== 'CheckBox' && (this.allowFiltering || this.allowCustomValue) &&\n                                this.targetElement().trim() !== '')) {\n                                this.loadTemplate();\n                            }\n                            this.setScrollPosition();\n                            if (this.allowFiltering) {\n                                this.notify('inputFocus', {\n                                    module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'focus'\n                                });\n                            }\n                        }, targetExitViewport: () => {\n                            if (!Browser.isDevice) {\n                                this.hidePopup();\n                            }\n                        }\n                    });\n                    if (this.mode === 'CheckBox' && Browser.isDevice && this.allowFiltering) {\n                        this.notify('deviceSearchBox', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                    }\n                    this.popupObj.close();\n                    this.popupWrapper.style.visibility = '';\n                }\n            });\n        }\n    }\n    setHeaderTemplate() {\n        let compiledString;\n        if (this.header) {\n            this.header.remove();\n        }\n        this.header = this.createElement('div');\n        addClass([this.header], HEADER$1);\n        let headercheck = this.multiCompiler(this.headerTemplate);\n        if (headercheck) {\n            compiledString = compile(document.querySelector(this.headerTemplate).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.headerTemplate);\n        }\n        let elements = compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate);\n        for (let temp = 0; temp < elements.length; temp++) {\n            this.header.appendChild(elements[temp]);\n        }\n        this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, true, false);\n        if (this.mode === 'CheckBox' && this.showSelectAll) {\n            prepend([this.header], this.popupWrapper);\n        }\n        else {\n            append([this.header], this.popupWrapper);\n        }\n        EventHandler.add(this.header, 'mousedown', this.onListMouseDown, this);\n    }\n    setFooterTemplate() {\n        let compiledString;\n        if (this.footer) {\n            this.footer.remove();\n        }\n        this.footer = this.createElement('div');\n        addClass([this.footer], FOOTER$1);\n        let footercheck = this.multiCompiler(this.footerTemplate);\n        if (footercheck) {\n            compiledString = compile(document.querySelector(this.footerTemplate).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.footerTemplate);\n        }\n        let elements = compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate);\n        for (let temp = 0; temp < elements.length; temp++) {\n            this.footer.appendChild(elements[temp]);\n        }\n        this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, false, true);\n        append([this.footer], this.popupWrapper);\n        EventHandler.add(this.footer, 'mousedown', this.onListMouseDown, this);\n    }\n    ClearAll(e) {\n        if (this.enabled && !this.readonly) {\n            let temp;\n            if (this.value && this.value.length > 0) {\n                let liElement = this.list && this.list.querySelectorAll('li.e-list-item');\n                if (liElement && liElement.length > 0) {\n                    this.selectAllItems(false, e);\n                }\n                else {\n                    this.removeIndex = 0;\n                    for (temp = this.value[this.removeIndex]; this.removeIndex < this.value.length; temp = this.value[this.removeIndex]) {\n                        this.removeValue(temp, e, null, true);\n                        if (this.value === null && isBlazor() && this.isServerRendered) {\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                this.clearAllCallback(e);\n            }\n        }\n    }\n    clearAllCallback(e, isClearAll) {\n        let tempValues = this.value ? this.value.slice() : [];\n        if (this.mainList && this.listData && ((this.allowFiltering && this.mode !== 'CheckBox') || this.allowCustomValue)) {\n            let list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n            this.onActionComplete(list, this.mainData);\n        }\n        this.focusAtFirstListItem();\n        this.updateDelimeter(this.delimiterChar, e);\n        if (this.mode !== 'Box' && (!this.inputFocus || this.mode === 'CheckBox')) {\n            this.updateDelimView();\n        }\n        this.makeTextBoxEmpty();\n        this.checkPlaceholderSize();\n        if (this.isPopupOpen()) {\n            this.refreshPopup();\n        }\n        if (!this.inputFocus) {\n            if (this.changeOnBlur) {\n                this.updateValueState(e, this.value, tempValues);\n            }\n            if (this.mode !== 'CheckBox') {\n                this.inputElement.focus();\n            }\n        }\n        if (this.mode === 'CheckBox') {\n            this.refreshPlaceHolder();\n            this.refreshInputHight();\n            if (this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n                this.updateValueState(e, this.value, this.tempValues);\n            }\n        }\n        if (!this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n            this.updateValueState(e, this.value, this.tempValues);\n        }\n        if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n            this.updateListItems(this.list.querySelectorAll('li.e-list-item'), this.mainList.querySelectorAll('li.e-list-item'));\n        }\n        e.preventDefault();\n    }\n    windowResize() {\n        this.refreshPopup();\n        if ((!this.inputFocus || this.mode === 'CheckBox') && this.viewWrapper && this.viewWrapper.parentElement) {\n            this.updateDelimView();\n        }\n    }\n    resetValueHandler(e) {\n        let formElement = closest(this.inputElement, 'form');\n        if (formElement && e.target === formElement) {\n            let textVal = (this.element.tagName === this.getNgDirective()) ? null : this.element.getAttribute('data-initial-value');\n            this.text = textVal;\n        }\n    }\n    wireEvent() {\n        EventHandler.add(this.componentWrapper, 'mousedown', this.wrapperClick, this);\n        EventHandler.add(window, 'resize', this.windowResize, this);\n        EventHandler.add(this.inputElement, 'focus', this.focusInHandler, this);\n        EventHandler.add(this.inputElement, 'keydown', this.onKeyDown, this);\n        EventHandler.add(this.inputElement, 'keyup', this.KeyUp, this);\n        if (this.mode !== 'CheckBox') {\n            EventHandler.add(this.inputElement, 'input', this.onInput, this);\n        }\n        EventHandler.add(this.inputElement, 'blur', this.onBlur, this);\n        EventHandler.add(this.componentWrapper, 'mousemove', this.mouseIn, this);\n        let formElement = closest(this.inputElement, 'form');\n        if (formElement) {\n            EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n        }\n        EventHandler.add(this.componentWrapper, 'mouseout', this.mouseOut, this);\n        EventHandler.add(this.overAllClear, 'mouseup', this.ClearAll, this);\n        EventHandler.add(this.inputElement, 'paste', this.pasteHandler, this);\n    }\n    onInput(e) {\n        if (this.keyDownStatus) {\n            this.isValidKey = true;\n        }\n        else {\n            this.isValidKey = false;\n        }\n        this.keyDownStatus = false;\n        // For Filtering works in mobile firefox\n        if (Browser.isDevice && Browser.info.name === 'mozilla') {\n            this.search(e);\n        }\n    }\n    pasteHandler(event) {\n        setTimeout(() => {\n            this.search(event);\n        });\n    }\n    search(e) {\n        if (!this.isPopupOpen() && this.openOnClick) {\n            this.showPopup();\n        }\n        this.openClick(e);\n        if (this.checkTextLength() && !this.allowFiltering && (e.keyCode !== 8)) {\n            this.focusAtFirstListItem();\n        }\n        else {\n            let text = this.targetElement();\n            this.keyCode = e.keyCode;\n            if (this.allowFiltering) {\n                let eventArgs = {\n                    preventDefaultAction: false,\n                    text: this.targetElement(),\n                    updateData: (dataSource, query, fields) => {\n                        if (eventArgs.cancel) {\n                            return;\n                        }\n                        this.isFiltered = true;\n                        this.remoteFilterAction = true;\n                        this.dataUpdater(dataSource, query, fields);\n                    },\n                    event: e,\n                    cancel: false\n                };\n                this.trigger('filtering', eventArgs, (eventArgs) => {\n                    if (!eventArgs.cancel) {\n                        if (!this.isFiltered && !eventArgs.preventDefaultAction) {\n                            this.filterAction = true;\n                            this.dataUpdater(this.dataSource, null, this.fields);\n                        }\n                    }\n                });\n            }\n            else if (this.allowCustomValue) {\n                let query = new Query();\n                query = (text !== '') ? query.where(this.fields.text, 'startswith', text, this.ignoreCase, this.ignoreAccent) : query;\n                this.dataUpdater(this.mainData, query, this.fields);\n            }\n            else {\n                let liCollections;\n                liCollections = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.e-hide-listitem)');\n                let activeElement = Search(this.targetElement(), liCollections, 'StartsWith', this.ignoreCase);\n                if (activeElement && activeElement.item !== null) {\n                    this.addListFocus(activeElement.item);\n                    this.list.scrollTop =\n                        activeElement.item.offsetHeight * activeElement.index;\n                }\n                else if (this.targetElement() !== '') {\n                    this.removeFocus();\n                }\n                else {\n                    this.focusAtFirstListItem();\n                }\n            }\n        }\n    }\n    preRender() {\n        if (this.allowFiltering === null) {\n            this.allowFiltering = (this.mode === 'CheckBox') ? true : false;\n        }\n        this.initializeData();\n        this.updateDataAttribute(this.htmlAttributes);\n        super.preRender();\n    }\n    getLocaleName() {\n        return 'multi-select';\n    }\n    ;\n    initializeData() {\n        this.mainListCollection = [];\n        this.beforePopupOpen = false;\n        this.filterAction = false;\n        this.remoteFilterAction = false;\n        this.isFirstClick = false;\n        this.mobFilter = true;\n        this.isFiltered = false;\n        this.focused = true;\n        this.initial = true;\n        this.backCommand = true;\n    }\n    updateData(delimiterChar, e) {\n        let data = '';\n        let delim = this.mode === 'Delimiter' || this.mode === 'CheckBox';\n        let text = [];\n        let temp;\n        let tempData = this.listData;\n        this.listData = this.mainData;\n        this.hiddenElement.innerHTML = '';\n        if (!isNullOrUndefined(this.value)) {\n            for (let index = 0; !isNullOrUndefined(this.value[index]); index++) {\n                if (this.listData) {\n                    temp = this.getTextByValue(this.value[index]);\n                }\n                else {\n                    temp = this.value[index];\n                }\n                data += temp + delimiterChar + ' ';\n                text.push(temp);\n                this.hiddenElement.innerHTML += '<option selected value =\"' + this.value[index] + '\">' + index + '</option>';\n            }\n        }\n        this.setProperties({ text: text.toString() }, true);\n        if (delim) {\n            this.updateWrapperText(this.delimiterWrapper, data);\n            this.delimiterWrapper.setAttribute('id', getUniqueID('delim_val'));\n            this.inputElement.setAttribute('aria-describedby', this.delimiterWrapper.id);\n        }\n        let targetEle = e && e.target;\n        let isClearAll = (targetEle && targetEle.classList.contains('e-close-hooker')) ? true : null;\n        if (!this.changeOnBlur && ((e && !isClearAll)) || this.isSelectAll) {\n            this.isSelectAll = false;\n            this.updateValueState(e, this.value, this.tempValues);\n        }\n        this.listData = tempData;\n        this.addValidInputClass();\n    }\n    initialTextUpdate() {\n        if (!isNullOrUndefined(this.text)) {\n            let textArr = this.text.split(this.delimiterChar);\n            let textVal = [];\n            for (let index = 0; textArr.length > index; index++) {\n                let val = this.getValueByText(textArr[index]);\n                if (!isNullOrUndefined(val)) {\n                    textVal.push(val);\n                }\n                else if (this.allowCustomValue) {\n                    textVal.push(textArr[index]);\n                }\n            }\n            if (textVal && textVal.length) {\n                this.setProperties({ value: textVal }, true);\n            }\n        }\n        else {\n            this.setProperties({ value: null }, true);\n        }\n    }\n    renderList(isEmptyData) {\n        if (!isEmptyData && this.allowCustomValue && this.list && (this.list.textContent === this.noRecordsTemplate\n            || this.list.querySelector('.e-ul') && this.list.querySelector('.e-ul').childElementCount === 0)) {\n            isEmptyData = true;\n        }\n        super.render(isEmptyData);\n        this.unwireListEvents();\n        this.wireListEvents();\n    }\n    initialValueUpdate() {\n        if (this.list) {\n            let text;\n            let element;\n            let value;\n            if (this.chipCollectionWrapper) {\n                this.chipCollectionWrapper.innerHTML = '';\n            }\n            this.removeListSelection();\n            if (!isNullOrUndefined(this.value)) {\n                for (let index = 0; !isNullOrUndefined(this.value[index]); index++) {\n                    value = this.value[index];\n                    element = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, 'li', 'data-value', value);\n                    text = this.getTextByValue(value);\n                    if ((element && (element.getAttribute('aria-selected') !== 'true')) ||\n                        (element && (element.getAttribute('aria-selected') === 'true' && this.hideSelectedItem) &&\n                            (this.mode === 'Box' || this.mode === 'Default'))) {\n                        this.addChip(text, value);\n                        this.addListSelection(element);\n                    }\n                    else if (value && this.allowCustomValue) {\n                        let indexItem = this.listData.length;\n                        let newValue = {};\n                        setValue(this.fields.text, value, newValue);\n                        setValue(this.fields.value, value, newValue);\n                        let noDataEle = this.popupWrapper.querySelector('.' + dropDownBaseClasses.noData);\n                        this.addItem(newValue, indexItem);\n                        if (this.popupWrapper.contains(noDataEle)) {\n                            this.list.setAttribute('style', noDataEle.getAttribute('style'));\n                            this.popupWrapper.replaceChild(this.list, noDataEle);\n                            this.wireListEvents();\n                        }\n                        this.addChip(text, value);\n                        this.addListSelection(element);\n                    }\n                }\n            }\n            if (this.mode === 'CheckBox') {\n                this.updateDelimView();\n                if (this.changeOnBlur) {\n                    this.updateValueState(null, this.value, this.tempValues);\n                }\n                this.updateDelimeter(this.delimiterChar);\n                this.refreshInputHight();\n            }\n            else {\n                this.updateDelimeter(this.delimiterChar);\n            }\n            if (this.mode === 'CheckBox' && this.showSelectAll && (isNullOrUndefined(this.value) || !this.value.length)) {\n                this.notify('checkSelectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'uncheck' });\n            }\n            if (this.mode === 'Box') {\n                this.chipCollectionWrapper.style.display = '';\n            }\n            else if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n                this.showDelimWrapper();\n            }\n        }\n    }\n    updateActionCompleteData(li, item) {\n        if (this.value && this.value.indexOf(li.getAttribute('data-value')) > -1) {\n            this.mainList = this.ulElement;\n            addClass([li], HIDE_LIST);\n        }\n    }\n    updateAddItemList(list, itemCount) {\n        if (this.popupObj && this.popupObj.element && this.popupObj.element.querySelector('.' + dropDownBaseClasses.noData) && list) {\n            this.list = list;\n            this.mainList = this.ulElement = list.querySelector('ul');\n            remove(this.popupWrapper.querySelector('.e-content'));\n            this.popupObj = null;\n            this.renderPopup();\n        }\n    }\n    updateDataList() {\n        if (this.mainList && this.ulElement && this.mainList.childElementCount < this.ulElement.childElementCount) {\n            this.mainList = this.ulElement.cloneNode ? this.ulElement.cloneNode(true) : this.ulElement;\n        }\n    }\n    isValidLI(li) {\n        return (li && !li.classList.contains(dropDownBaseClasses.disabled) && !li.classList.contains(dropDownBaseClasses.group) &&\n            li.classList.contains(dropDownBaseClasses.li));\n    }\n    ;\n    updateListSelection(li, e, length) {\n        let customVal = li.getAttribute('data-value');\n        let value = this.getFormattedValue(customVal);\n        if (this.allowCustomValue && ((customVal !== 'false' && value === false) ||\n            (!isNullOrUndefined(value) && value.toString() === 'NaN'))) {\n            value = customVal;\n        }\n        let text = this.getTextByValue(value);\n        this.removeHover();\n        if (!this.value || this.value.indexOf(value) === -1) {\n            this.dispatchSelect(value, e, li, (li.getAttribute('aria-selected') === 'true'), length);\n        }\n        else {\n            this.removeValue(value, e, length);\n        }\n    }\n    updateListSelectEventCallback(value, li, e) {\n        let text = this.getTextByValue(value);\n        if ((this.allowCustomValue || this.allowFiltering) && !this.findListElement(this.mainList, 'li', 'data-value', value)) {\n            let temp = li.cloneNode(true);\n            let data = this.getDataByValue(value);\n            let eventArgs = {\n                newData: data,\n                cancel: false\n            };\n            this.trigger('customValueSelection', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel) {\n                    append([temp], this.mainList);\n                    this.mainData.push(data);\n                    this.remoteCustomValue = false;\n                    this.addValue(value, text, e);\n                }\n            });\n        }\n        else {\n            this.remoteCustomValue = false;\n            this.addValue(value, text, e);\n        }\n        if (isBlazor() && this.isServerRendered && this.value && this.list &&\n            this.value.length === this.list.querySelectorAll('li.e-list-item').length ||\n            this.value.length === this.maximumSelectionLength) {\n            this.updatedataValueItems(e);\n            this.checkPlaceholderSize();\n        }\n        if (isBlazor() && this.isServerRendered) {\n            this.checkPlaceholderSize();\n            this.makeTextBoxEmpty();\n        }\n    }\n    removeListSelection() {\n        let className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        let selectedItems = this.list.querySelectorAll('.' + className);\n        let temp = selectedItems.length;\n        if (selectedItems && selectedItems.length) {\n            removeClass(selectedItems, className);\n            while (temp > 0) {\n                selectedItems[temp - 1].setAttribute('aria-selected', 'false');\n                temp--;\n            }\n        }\n        if (!isNullOrUndefined(this.mainList)) {\n            let selectItems = this.mainList.querySelectorAll('.' + className);\n            let temp1 = selectItems.length;\n            if (selectItems && selectItems.length) {\n                removeClass(selectItems, className);\n                while (temp1 > 0) {\n                    selectItems[temp1 - 1].setAttribute('aria-selected', 'false');\n                    if (this.mode === 'CheckBox') {\n                        if (selectedItems && (selectedItems.length > (temp1 - 1))) {\n                            selectedItems[temp1 - 1].firstElementChild.setAttribute('aria-checked', 'false');\n                            removeClass([selectedItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');\n                        }\n                        selectItems[temp1 - 1].firstElementChild.setAttribute('aria-checked', 'false');\n                        removeClass([selectItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');\n                    }\n                    temp1--;\n                }\n            }\n        }\n    }\n    ;\n    removeHover() {\n        let hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.hover);\n        if (hoveredItem && hoveredItem.length) {\n            removeClass(hoveredItem, dropDownBaseClasses.hover);\n        }\n    }\n    ;\n    removeFocus() {\n        if (this.list && this.mainList) {\n            let hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.focus);\n            let mainlist = this.mainList.querySelectorAll('.' + dropDownBaseClasses.focus);\n            if (hoveredItem && hoveredItem.length) {\n                removeClass(hoveredItem, dropDownBaseClasses.focus);\n                removeClass(mainlist, dropDownBaseClasses.focus);\n            }\n        }\n    }\n    ;\n    addListHover(li) {\n        if (this.enabled && this.isValidLI(li)) {\n            this.removeHover();\n            addClass([li], dropDownBaseClasses.hover);\n        }\n        else {\n            if ((li !== null && li.classList.contains('e-list-group-item')) && this.enableGroupCheckBox && this.mode === 'CheckBox'\n                && !isNullOrUndefined(this.fields.groupBy)) {\n                this.removeHover();\n                addClass([li], dropDownBaseClasses.hover);\n            }\n        }\n    }\n    ;\n    addListFocus(element) {\n        if (this.enabled && this.isValidLI(element)) {\n            this.removeFocus();\n            addClass([element], dropDownBaseClasses.focus);\n        }\n        else {\n            if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n                addClass([element], dropDownBaseClasses.focus);\n            }\n        }\n    }\n    addListSelection(element) {\n        let className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        if (this.isValidLI(element) && !element.classList.contains(dropDownBaseClasses.hover)) {\n            addClass([element], className);\n            this.updateMainList(false, element.getAttribute('data-value'));\n            element.setAttribute('aria-selected', 'true');\n            if (this.mode === 'CheckBox') {\n                let ariaCheck = element.firstElementChild.getAttribute('aria-checked');\n                if (ariaCheck === 'false' || isNullOrUndefined(ariaCheck)) {\n                    this.notify('updatelist', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', li: element, e: this });\n                }\n            }\n            this.notify('activeList', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', li: element, e: this });\n            if (this.chipCollectionWrapper !== null) {\n                this.removeChipSelection();\n            }\n            attributes(this.inputElement, { 'aria-activedescendant': element.id });\n        }\n    }\n    updateDelimeter(delimChar, e) {\n        this.updateData(delimChar, e);\n    }\n    onMouseClick(e) {\n        this.scrollFocusStatus = false;\n        let target = e.target;\n        let li = closest(target, '.' + dropDownBaseClasses.li);\n        let headerLi = closest(target, '.' + dropDownBaseClasses.group);\n        if (headerLi && this.enableGroupCheckBox && this.mode === 'CheckBox' && this.fields.groupBy) {\n            target = target.classList.contains('e-list-group-item') ? target.firstElementChild.lastElementChild\n                : e.target;\n            if (target.classList.contains('e-check')) {\n                this.selectAllItem(false, e);\n                target.classList.remove('e-check');\n                target.classList.remove('e-stop');\n                closest(target, '.' + 'e-list-group-item').classList.remove('e-active');\n                target.setAttribute('aria-selected', 'false');\n            }\n            else {\n                this.selectAllItem(true, e);\n                target.classList.remove('e-stop');\n                target.classList.add('e-check');\n                closest(target, '.' + 'e-list-group-item').classList.add('e-active');\n                target.setAttribute('aria-selected', 'true');\n            }\n            this.refreshSelection();\n            this.checkSelectAll();\n        }\n        else {\n            if (this.isValidLI(li)) {\n                let limit = this.value && this.value.length ? this.value.length : 0;\n                if (li.classList.contains('e-active')) {\n                    limit = limit - 1;\n                }\n                if (limit < this.maximumSelectionLength) {\n                    this.updateListSelection(li, e);\n                    this.checkPlaceholderSize();\n                    this.addListFocus(li);\n                    if ((this.allowCustomValue || this.allowFiltering) && this.mainList && this.listData) {\n                        if (this.mode !== 'CheckBox') {\n                            this.focusAtLastListItem(li.getAttribute('data-value'));\n                        }\n                        this.refreshSelection();\n                    }\n                    else {\n                        this.makeTextBoxEmpty();\n                    }\n                }\n                if (this.mode === 'CheckBox') {\n                    this.updateDelimView();\n                    this.updateDelimeter(this.delimiterChar, e);\n                    this.refreshInputHight();\n                }\n                else {\n                    this.updateDelimeter(this.delimiterChar, e);\n                }\n                this.checkSelectAll();\n                this.refreshPopup();\n                if (this.hideSelectedItem) {\n                    this.focusAtFirstListItem();\n                }\n                if (this.closePopupOnSelect) {\n                    this.hidePopup();\n                }\n                else {\n                    e.preventDefault();\n                }\n                this.makeTextBoxEmpty();\n                this.findGroupStart(target);\n            }\n            else {\n                e.preventDefault();\n            }\n            if (this.mode !== 'CheckBox') {\n                this.refreshListItems(isNullOrUndefined(li) ? null : li.textContent);\n            }\n            this.refreshPlaceHolder();\n            this.deselectHeader();\n        }\n    }\n    findGroupStart(target) {\n        if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n            let count = 0;\n            let liChecked = 0;\n            let liUnchecked = 0;\n            let groupValues;\n            if (this.itemTemplate && !target.getElementsByClassName('e-frame').length) {\n                while (!target.getElementsByClassName('e-frame').length) {\n                    target = target.parentElement;\n                }\n            }\n            if (target.classList.contains('e-frame')) {\n                target = target.parentElement.parentElement;\n            }\n            groupValues = this.findGroupAttrtibutes(target, liChecked, liUnchecked, count, 0);\n            groupValues = this.findGroupAttrtibutes(target, groupValues[0], groupValues[1], groupValues[2], 1);\n            while (!target.classList.contains('e-list-group-item')) {\n                if (target.classList.contains('e-list-icon')) {\n                    target = target.parentElement;\n                }\n                target = target.previousElementSibling;\n                if (target == null) {\n                    break;\n                }\n            }\n            this.updateCheckBox(target, groupValues[0], groupValues[1], groupValues[2]);\n        }\n    }\n    findGroupAttrtibutes(listElement, checked, unChecked, count, position) {\n        while (!listElement.classList.contains('e-list-group-item')) {\n            if (listElement.classList.contains('e-list-icon')) {\n                listElement = listElement.parentElement;\n            }\n            if (listElement.getElementsByClassName('e-frame')[0].classList.contains('e-check') &&\n                listElement.classList.contains('e-list-item')) {\n                checked++;\n            }\n            else if (listElement.classList.contains('e-list-item')) {\n                unChecked++;\n            }\n            count++;\n            listElement = position ? listElement.nextElementSibling : listElement.previousElementSibling;\n            if (listElement == null) {\n                break;\n            }\n        }\n        return [checked, unChecked, count];\n    }\n    updateCheckBox(groupHeader, checked, unChecked, count) {\n        if (groupHeader === null) {\n            return;\n        }\n        let checkBoxElement = groupHeader.getElementsByClassName('e-frame')[0];\n        if (count === checked) {\n            checkBoxElement.classList.remove('e-stop');\n            checkBoxElement.classList.add('e-check');\n            closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n            groupHeader.setAttribute('aria-selected', 'true');\n        }\n        else if (count === unChecked) {\n            checkBoxElement.classList.remove('e-check');\n            checkBoxElement.classList.remove('e-stop');\n            closest(checkBoxElement, '.' + 'e-list-group-item').classList.remove('e-active');\n            groupHeader.setAttribute('aria-selected', 'false');\n        }\n        else if (this.maximumSelectionLength === checked - 1) {\n            checkBoxElement.classList.remove('e-stop');\n            groupHeader.setAttribute('aria-selected', 'true');\n            closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n            checkBoxElement.classList.add('e-check');\n        }\n        else {\n            checkBoxElement.classList.remove('e-check');\n            checkBoxElement.classList.add('e-stop');\n            closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n            groupHeader.setAttribute('aria-selected', 'false');\n        }\n    }\n    deselectHeader() {\n        let limit = this.value && this.value.length ? this.value.length : 0;\n        let collection = this.list.querySelectorAll('li.e-list-group-item:not(.e-active)');\n        if (limit < this.maximumSelectionLength) {\n            removeClass(collection, 'e-disable');\n        }\n        if (limit === this.maximumSelectionLength) {\n            addClass(collection, 'e-disable');\n        }\n    }\n    onMouseOver(e) {\n        let currentLi = closest(e.target, '.' + dropDownBaseClasses.li);\n        if (currentLi === null && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)\n            && this.enableGroupCheckBox) {\n            currentLi = closest(e.target, '.' + dropDownBaseClasses.group);\n        }\n        this.addListHover(currentLi);\n    }\n    onMouseLeave(e) {\n        this.removeHover();\n    }\n    onListMouseDown(e) {\n        e.preventDefault();\n        this.scrollFocusStatus = true;\n    }\n    onDocumentClick(e) {\n        if (this.mode !== 'CheckBox') {\n            let target = e.target;\n            if (!(!isNullOrUndefined(this.popupObj) && closest(target, '#' + this.popupObj.element.id)) &&\n                !this.overAllWrapper.contains(e.target)) {\n                this.scrollFocusStatus = false;\n            }\n            else {\n                this.scrollFocusStatus = (Browser.isIE || Browser.info.name === 'edge') && (document.activeElement === this.inputElement);\n            }\n        }\n    }\n    wireListEvents() {\n        EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n        EventHandler.add(this.list, 'mousedown', this.onListMouseDown, this);\n        EventHandler.add(this.list, 'mouseup', this.onMouseClick, this);\n        EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);\n        EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);\n    }\n    ;\n    unwireListEvents() {\n        EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n        if (this.list) {\n            EventHandler.remove(this.list, 'mousedown', this.onListMouseDown);\n            EventHandler.remove(this.list, 'mouseup', this.onMouseClick);\n            EventHandler.remove(this.list, 'mouseover', this.onMouseOver);\n            EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);\n        }\n    }\n    ;\n    hideOverAllClear() {\n        if (!this.value || !this.value.length || this.inputElement.value === '') {\n            this.overAllClear.style.display = 'none';\n        }\n    }\n    showOverAllClear() {\n        if (((this.value && this.value.length) || this.inputElement.value !== '') && this.showClearButton && this.readonly !== true) {\n            this.overAllClear.style.display = '';\n        }\n        else {\n            this.overAllClear.style.display = 'none';\n        }\n    }\n    /**\n     * Sets the focus to widget for interaction.\n     * @returns void\n     */\n    focusIn() {\n        if (document.activeElement !== this.inputElement && this.enabled) {\n            this.inputElement.focus();\n        }\n    }\n    /**\n     * Remove the focus from widget, if the widget is in focus state.\n     * @returns void\n     */\n    focusOut() {\n        if (document.activeElement === this.inputElement && this.enabled) {\n            this.inputElement.blur();\n        }\n    }\n    /**\n     * Shows the spinner loader.\n     * @returns void.\n     */\n    showSpinner() {\n        if (isNullOrUndefined(this.spinnerElement)) {\n            if (this.overAllClear.style.display !== 'none') {\n                this.spinnerElement = this.overAllClear;\n            }\n            else {\n                this.spinnerElement = this.createElement('span', { className: CLOSEICON_CLASS$1 + ' ' + SPINNER_CLASS$1 });\n                this.componentWrapper.appendChild(this.spinnerElement);\n            }\n            createSpinner({ target: this.spinnerElement, width: Browser.isDevice ? '16px' : '14px' }, this.createElement);\n            addClass([this.spinnerElement], DISABLE_ICON);\n            showSpinner(this.spinnerElement);\n        }\n    }\n    /**\n     * Hides the spinner loader.\n     * @returns void.\n     */\n    hideSpinner() {\n        if (!isNullOrUndefined(this.spinnerElement)) {\n            hideSpinner(this.spinnerElement);\n            removeClass([this.spinnerElement], DISABLE_ICON);\n            if (this.spinnerElement.classList.contains(SPINNER_CLASS$1)) {\n                detach(this.spinnerElement);\n            }\n            else {\n                this.spinnerElement.innerHTML = '';\n            }\n            this.spinnerElement = null;\n        }\n    }\n    updateWrapperText(wrapperType, wrapperData) {\n        if (this.valueTemplate || !this.enableHtmlSanitizer) {\n            wrapperType.innerHTML = wrapperData;\n        }\n        else {\n            wrapperType.innerText = SanitizeHtmlHelper.sanitize(wrapperData);\n        }\n    }\n    updateDelimView() {\n        if (this.delimiterWrapper) {\n            this.hideDelimWrapper();\n        }\n        if (this.chipCollectionWrapper) {\n            this.chipCollectionWrapper.style.display = 'none';\n        }\n        this.viewWrapper.style.display = '';\n        this.viewWrapper.style.width = '';\n        this.viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER$1);\n        if (this.value && this.value.length) {\n            let data = '';\n            let temp;\n            let tempData;\n            let tempIndex = 1;\n            let wrapperleng;\n            let remaining;\n            let downIconWidth = 0;\n            let overAllContainer;\n            this.updateWrapperText(this.viewWrapper, data);\n            let l10nLocale = {\n                noRecordsTemplate: 'No records found',\n                actionFailureTemplate: 'Request failed',\n                overflowCountTemplate: '+${count} more..',\n                totalCountTemplate: '${count} selected'\n            };\n            let l10n = new L10n(this.getLocaleName(), {}, this.locale);\n            if (l10n.getConstant('actionFailureTemplate') === '') {\n                l10n = new L10n('dropdowns', l10nLocale, this.locale);\n            }\n            let remainContent = l10n.getConstant('overflowCountTemplate');\n            let raminElement = this.createElement('span', {\n                className: REMAIN_WRAPPER$1\n            });\n            let compiledString = compile(remainContent);\n            let totalCompiledString = compile(l10n.getConstant('totalCountTemplate'));\n            raminElement.appendChild(compiledString({ 'count': this.value.length }, null, null, null, !this.isStringTemplate)[0]);\n            this.viewWrapper.appendChild(raminElement);\n            let remainSize = raminElement.offsetWidth;\n            remove(raminElement);\n            if (this.showDropDownIcon) {\n                downIconWidth = this.dropIcon.offsetWidth +\n                    parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);\n            }\n            if (!isNullOrUndefined(this.value)) {\n                for (let index = 0; !isNullOrUndefined(this.value[index]); index++) {\n                    data += (index === 0) ? '' : this.delimiterChar + ' ';\n                    temp = this.getOverflowVal(index);\n                    data += temp;\n                    temp = this.viewWrapper.innerHTML;\n                    this.updateWrapperText(this.viewWrapper, data);\n                    wrapperleng = this.viewWrapper.offsetWidth +\n                        parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n                    overAllContainer = this.componentWrapper.offsetWidth -\n                        parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) -\n                        parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);\n                    if ((wrapperleng + downIconWidth) > overAllContainer) {\n                        if (tempData !== undefined && tempData !== '') {\n                            temp = tempData;\n                            index = tempIndex + 1;\n                        }\n                        this.updateWrapperText(this.viewWrapper, temp);\n                        remaining = this.value.length - index;\n                        wrapperleng = this.viewWrapper.offsetWidth;\n                        while (((wrapperleng + remainSize + downIconWidth) > overAllContainer) && wrapperleng !== 0\n                            && this.viewWrapper.innerHTML !== '') {\n                            let textArr = this.viewWrapper.innerHTML.split(this.delimiterChar);\n                            textArr.pop();\n                            this.viewWrapper.innerHTML = textArr.join(this.delimiterChar);\n                            if (this.viewWrapper.innerHTML === '') {\n                                remaining++;\n                            }\n                            wrapperleng = this.viewWrapper.offsetWidth;\n                        }\n                        break;\n                    }\n                    else if ((wrapperleng + remainSize + downIconWidth) <= overAllContainer) {\n                        tempData = data;\n                        tempIndex = index;\n                    }\n                    else if (index === 0) {\n                        tempData = '';\n                        tempIndex = -1;\n                    }\n                }\n            }\n            if (remaining > 0) {\n                let totalWidth = overAllContainer - downIconWidth;\n                this.viewWrapper.appendChild(this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, compiledString, totalCompiledString, totalWidth));\n                this.updateRemainWidth(this.viewWrapper, totalWidth);\n                this.updateRemainingText(raminElement, downIconWidth, remaining, compiledString, totalCompiledString);\n            }\n        }\n        else {\n            this.viewWrapper.innerHTML = '';\n            this.viewWrapper.style.display = 'none';\n        }\n    }\n    updateRemainWidth(viewWrapper, totalWidth) {\n        if (viewWrapper.classList.contains(TOTAL_COUNT_WRAPPER$1) && totalWidth < (viewWrapper.offsetWidth +\n            parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10)\n            + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10))) {\n            viewWrapper.style.width = totalWidth + 'px';\n        }\n    }\n    updateRemainTemplate(raminElement, viewWrapper, remaining, compiledString, totalCompiledString, totalWidth) {\n        if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 && viewWrapper.firstChild.nodeValue === '') {\n            viewWrapper.removeChild(viewWrapper.firstChild);\n        }\n        raminElement.innerHTML = '';\n        raminElement.appendChild((viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) ?\n            compiledString({ 'count': remaining }, null, null, null, !this.isStringTemplate)[0] :\n            totalCompiledString({ 'count': remaining }, null, null, null, !this.isStringTemplate)[0]);\n        if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) {\n            viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER$1);\n        }\n        else {\n            viewWrapper.classList.add(TOTAL_COUNT_WRAPPER$1);\n            this.updateRemainWidth(viewWrapper, totalWidth);\n        }\n        return raminElement;\n    }\n    updateRemainingText(raminElement, downIconWidth, remaining, compiledString, totalCompiledString) {\n        let overAllContainer = this.componentWrapper.offsetWidth -\n            parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) -\n            parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);\n        let wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n        if (((wrapperleng + downIconWidth) >= overAllContainer) && wrapperleng !== 0 && this.viewWrapper.firstChild &&\n            this.viewWrapper.firstChild.nodeType === 3) {\n            while (((wrapperleng + downIconWidth) > overAllContainer) && wrapperleng !== 0 && this.viewWrapper.firstChild &&\n                this.viewWrapper.firstChild.nodeType === 3) {\n                let textArr = this.viewWrapper.firstChild.nodeValue.split(this.delimiterChar);\n                textArr.pop();\n                this.viewWrapper.firstChild.nodeValue = textArr.join(this.delimiterChar);\n                if (this.viewWrapper.firstChild.nodeValue === '') {\n                    this.viewWrapper.removeChild(this.viewWrapper.firstChild);\n                }\n                remaining++;\n                wrapperleng = this.viewWrapper.offsetWidth;\n            }\n            let totalWidth = overAllContainer - downIconWidth;\n            this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, compiledString, totalCompiledString, totalWidth);\n        }\n    }\n    getOverflowVal(index) {\n        let temp;\n        if (this.mainData && this.mainData.length) {\n            if (this.mode === 'CheckBox') {\n                let newTemp = this.listData;\n                this.listData = this.mainData;\n                temp = this.getTextByValue(this.value[index]);\n                this.listData = newTemp;\n            }\n            else {\n                temp = this.getTextByValue(this.value[index]);\n            }\n        }\n        else {\n            temp = this.value[index];\n        }\n        return temp;\n    }\n    unWireEvent() {\n        EventHandler.remove(this.componentWrapper, 'mousedown', this.wrapperClick);\n        EventHandler.remove(window, 'resize', this.windowResize);\n        EventHandler.remove(this.inputElement, 'focus', this.focusInHandler);\n        EventHandler.remove(this.inputElement, 'keydown', this.onKeyDown);\n        if (this.mode !== 'CheckBox') {\n            EventHandler.remove(this.inputElement, 'input', this.onInput);\n        }\n        EventHandler.remove(this.inputElement, 'keyup', this.KeyUp);\n        let formElement = closest(this.inputElement, 'form');\n        if (formElement) {\n            EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n        }\n        EventHandler.remove(this.inputElement, 'blur', this.onBlur);\n        EventHandler.remove(this.componentWrapper, 'mousemove', this.mouseIn);\n        EventHandler.remove(this.componentWrapper, 'mouseout', this.mouseOut);\n        EventHandler.remove(this.overAllClear, 'mousedown', this.ClearAll);\n        EventHandler.remove(this.inputElement, 'paste', this.pasteHandler);\n    }\n    selectAllItem(state, event, list) {\n        let li;\n        li = this.list.querySelectorAll(state ?\n            'li.e-list-item:not([aria-selected=\"true\"]):not(.e-reorder-hide)' :\n            'li.e-list-item[aria-selected=\"true\"]:not(.e-reorder-hide)');\n        if (this.value && this.value.length && this.isPopupOpen() && event && event.target\n            && closest(event.target, '.e-close-hooker') && this.allowFiltering) {\n            li = this.mainList.querySelectorAll(state ?\n                'li.e-list-item:not([aria-selected=\"true\"]):not(.e-reorder-hide)' :\n                'li.e-list-item[aria-selected=\"true\"]:not(.e-reorder-hide)');\n        }\n        if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n            let target = (event ? event.target : null);\n            target = (event && event.keyCode === 32) ? list : target;\n            target = (target && target.classList.contains('e-frame')) ? target.parentElement.parentElement : target;\n            if (target && target.classList.contains('e-list-group-item')) {\n                let listElement = target.nextElementSibling;\n                if (isNullOrUndefined(listElement)) {\n                    return;\n                }\n                while (listElement.classList.contains('e-list-item')) {\n                    if (state) {\n                        if (!listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {\n                            let selectionLimit = this.value && this.value.length ? this.value.length : 0;\n                            if (listElement.classList.contains('e-active')) {\n                                selectionLimit -= 1;\n                            }\n                            if (selectionLimit < this.maximumSelectionLength) {\n                                this.updateListSelection(listElement, event);\n                            }\n                        }\n                    }\n                    else {\n                        if (listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {\n                            this.updateListSelection(listElement, event);\n                        }\n                    }\n                    listElement = listElement.nextElementSibling;\n                    if (listElement == null) {\n                        break;\n                    }\n                }\n                if (target.classList.contains('e-list-group-item')) {\n                    let focusedElement = this.list.getElementsByClassName('e-item-focus')[0];\n                    if (focusedElement) {\n                        focusedElement.classList.remove('e-item-focus');\n                    }\n                    state ? target.classList.add('e-active') : target.classList.remove('e-active');\n                    target.classList.add('e-item-focus');\n                }\n                this.textboxValueUpdate();\n                this.checkPlaceholderSize();\n                if (!this.changeOnBlur && event) {\n                    this.updateValueState(event, this.value, this.tempValues);\n                }\n            }\n            else {\n                this.updateValue(event, li, state);\n            }\n        }\n        else {\n            this.updateValue(event, li, state);\n        }\n    }\n    updateValue(event, li, state) {\n        let length = li.length;\n        if (li && li.length) {\n            let index = 0;\n            let count = 0;\n            if (this.enableGroupCheckBox) {\n                count = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : li.length;\n            }\n            else {\n                count = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : this.maximumSelectionLength;\n            }\n            while (index < length && index <= 50 && index < count) {\n                this.updateListSelection(li[index], event, length - index);\n                this.findGroupStart(li[index]);\n                index++;\n            }\n            if (length > 50) {\n                setTimeout(() => {\n                    while (index < length && index < count) {\n                        this.updateListSelection(li[index], event, length - index);\n                        this.findGroupStart(li[index]);\n                        index++;\n                    }\n                    if (!(isBlazor() && this.isServerRendered)) {\n                        this.updatedataValueItems(event);\n                    }\n                }, 0);\n            }\n        }\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.updatedataValueItems(event);\n            this.checkPlaceholderSize();\n        }\n    }\n    updatedataValueItems(event) {\n        this.deselectHeader();\n        this.textboxValueUpdate(event);\n    }\n    textboxValueUpdate(event) {\n        if (this.mode !== 'Box' && !this.isPopupOpen()) {\n            this.updateDelimView();\n        }\n        else {\n            this.searchWrapper.classList.remove(ZERO_SIZE);\n        }\n        if (this.mode === 'CheckBox') {\n            this.updateDelimView();\n            this.updateDelimeter(this.delimiterChar, event);\n            this.refreshInputHight();\n        }\n        else {\n            this.updateDelimeter(this.delimiterChar, event);\n        }\n        this.refreshPlaceHolder();\n    }\n    setZIndex() {\n        if (this.popupObj) {\n            this.popupObj.setProperties({ 'zIndex': this.zIndex });\n        }\n    }\n    updateDataSource(prop) {\n        if (isNullOrUndefined(this.list)) {\n            this.renderPopup();\n        }\n        else {\n            this.resetList(this.dataSource);\n        }\n        if (this.value && this.value.length && !(isBlazor() && this.isServerRendered)) {\n            this.setProperties({ 'value': this.value });\n            this.refreshSelection();\n        }\n    }\n    onLoadSelect() {\n        this.setDynValue = true;\n        this.renderPopup();\n    }\n    selectAllItems(state, event) {\n        if (isNullOrUndefined(this.list)) {\n            this.selectAllAction = () => {\n                if (this.mode === 'CheckBox' && this.showSelectAll) {\n                    let args = {\n                        module: 'CheckBoxSelection',\n                        enable: this.mode === 'CheckBox',\n                        value: state ? 'check' : 'uncheck'\n                    };\n                    this.notify('checkSelectAll', args);\n                }\n                this.selectAllItem(state, event);\n                this.selectAllAction = null;\n            };\n            super.render();\n        }\n        else {\n            this.selectAllAction = null;\n            if (this.mode === 'CheckBox' && this.showSelectAll) {\n                let args = {\n                    value: state ? 'check' : 'uncheck',\n                    enable: this.mode === 'CheckBox',\n                    module: 'CheckBoxSelection'\n                };\n                this.notify('checkSelectAll', args);\n            }\n            this.selectAllItem(state, event);\n        }\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     */\n    getPersistData() {\n        return this.addOnPersist(['value']);\n    }\n    ;\n    /**\n     * Dynamically change the value of properties.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource))\n            || newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {\n            this.mainList = null;\n            this.mainData = null;\n            this.isFirstClick = false;\n            this.isDynamicDataChange = true;\n        }\n        if (this.getModuleName() === 'multiselect') {\n            this.filterAction = false;\n            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'query':\n                case 'dataSource':\n                    if (this.mode === 'CheckBox' && this.showSelectAll) {\n                        if (!isNullOrUndefined(this.popupObj)) {\n                            this.popupObj.destroy();\n                            this.popupObj = null;\n                        }\n                        this.renderPopup();\n                    }\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttribute();\n                    break;\n                case 'showClearButton':\n                    this.updateClearButton(newProp.showClearButton);\n                    break;\n                case 'text':\n                    this.updateVal(this.value, this.value, 'text');\n                    break;\n                case 'value':\n                    this.updateVal(this.value, oldProp.value, 'value');\n                    this.addValidInputClass();\n                    break;\n                case 'width':\n                    this.setWidth(newProp.width);\n                    this.popupObj.setProperties({ width: this.calcPopupWidth() });\n                    break;\n                case 'placeholder':\n                    this.refreshPlaceHolder();\n                    break;\n                case 'filterBarPlaceholder':\n                    if (this.allowFiltering) {\n                        this.notify('filterBarPlaceholder', { filterBarPlaceholder: newProp.filterBarPlaceholder });\n                    }\n                    break;\n                case 'delimiterChar':\n                    if (this.mode !== 'Box') {\n                        this.updateDelimView();\n                    }\n                    this.updateData(newProp.delimiterChar);\n                    break;\n                case 'cssClass':\n                    this.updateOldPropCssClass(oldProp.cssClass);\n                    this.updateCssClass();\n                    break;\n                case 'enableRtl':\n                    this.enableRTL(newProp.enableRtl);\n                    super.onPropertyChanged(newProp, oldProp);\n                    break;\n                case 'readonly':\n                    this.updateReadonly(newProp.readonly);\n                    this.hidePopup();\n                    break;\n                case 'enabled':\n                    this.hidePopup();\n                    this.enable(newProp.enabled);\n                    break;\n                case 'showSelectAll':\n                    if (this.popupObj) {\n                        this.popupObj.destroy();\n                        this.popupObj = null;\n                    }\n                    this.renderPopup();\n                    break;\n                case 'showDropDownIcon':\n                    this.dropDownIcon();\n                    break;\n                case 'floatLabelType':\n                    this.setFloatLabelType();\n                    this.addValidInputClass();\n                    break;\n                case 'enableSelectionOrder':\n                    break;\n                case 'selectAllText':\n                    this.notify('selectAllText', false);\n                    break;\n                case 'popupHeight':\n                case 'headerTemplate':\n                case 'footerTemplate':\n                    this.reInitializePoup();\n                    break;\n                case 'allowFiltering':\n                    if (this.mode === 'CheckBox' && this.popupObj) {\n                        this.reInitializePoup();\n                    }\n                    this.updateSelectElementData(this.allowFiltering);\n                    break;\n                default:\n                    let msProps;\n                    msProps = this.getPropObject(prop, newProp, oldProp);\n                    super.onPropertyChanged(msProps.newProperty, msProps.oldProperty);\n                    break;\n            }\n        }\n    }\n    reInitializePoup() {\n        if (this.popupObj) {\n            this.popupObj.destroy();\n            this.popupObj = null;\n        }\n        this.renderPopup();\n    }\n    updateVal(newProp, oldProp, prop) {\n        if (!this.list) {\n            this.onLoadSelect();\n        }\n        else if (!this.inputFocus) {\n            if (prop === 'text') {\n                this.initialTextUpdate();\n                newProp = this.value;\n            }\n            if (isNullOrUndefined(this.value) || this.value.length === 0) {\n                this.tempValues = oldProp;\n            }\n            this.initialValueUpdate();\n            if (this.mode !== 'Box') {\n                this.updateDelimView();\n            }\n            this.refreshInputHight();\n            this.refreshPlaceHolder();\n            if (this.mode !== 'CheckBox' && this.changeOnBlur) {\n                this.updateValueState(null, newProp, oldProp);\n            }\n            this.checkPlaceholderSize();\n        }\n        if (!this.changeOnBlur) {\n            this.updateValueState(null, newProp, oldProp);\n        }\n    }\n    /**\n     * Adds a new item to the multiselect popup list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n     * @return {void}.\n     */\n    addItem(items, itemIndex) {\n        super.addItem(items, itemIndex);\n    }\n    /**\n     * Hides the popup, if the popup in a open state.\n     * @returns void\n     */\n    hidePopup() {\n        let delay = 100;\n        if (this.isPopupOpen()) {\n            let animModel = {\n                name: 'FadeOut',\n                duration: 100,\n                delay: delay ? delay : 0\n            };\n            let eventArgs = { popup: this.popupObj, cancel: false, animation: animModel };\n            this.trigger('close', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel) {\n                    this.beforePopupOpen = false;\n                    this.overAllWrapper.classList.remove(iconAnimation);\n                    this.popupObj.hide(new Animation(eventArgs.animation));\n                    attributes(this.inputElement, { 'aria-expanded': 'false' });\n                    if (this.allowFiltering) {\n                        this.notify('inputFocus', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'clear' });\n                    }\n                    this.popupObj.hide();\n                    removeClass([document.body, this.popupObj.element], 'e-popup-full-page');\n                    EventHandler.remove(this.list, 'keydown', this.onKeyDown);\n                }\n            });\n        }\n    }\n    /**\n     * Shows the popup, if the popup in a closed state.\n     * @returns void\n     */\n    showPopup() {\n        if (!this.enabled) {\n            return;\n        }\n        if ((isBlazor() && this.isServerRendered) && this.itemTemplate) {\n            this.DropDownBaseupdateBlazorTemplates(true, false, false, false, false, false, false, false);\n            if (this.mode !== 'CheckBox' && this.list) {\n                this.refreshSelection();\n            }\n        }\n        if (!this.ulElement) {\n            this.beforePopupOpen = true;\n            super.render();\n            if (this.mode === 'CheckBox' && Browser.isDevice && this.allowFiltering) {\n                this.notify('popupFullScreen', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n            }\n            return;\n        }\n        if (this.mode === 'CheckBox' && Browser.isDevice && this.allowFiltering) {\n            this.notify('popupFullScreen', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n        }\n        let mainLiLength = this.ulElement.querySelectorAll('li.' + 'e-list-item').length;\n        let liLength = this.ulElement.querySelectorAll('li.'\n            + dropDownBaseClasses.li + '.' + HIDE_LIST).length;\n        if (mainLiLength > 0 && (mainLiLength === liLength) && (liLength === this.mainData.length)) {\n            this.beforePopupOpen = false;\n            return;\n        }\n        this.onPopupShown();\n    }\n    /**\n     * Based on the state parameter, entire list item will be selected/deselected.\n     * parameter\n     * `true`   - Selects entire list items.\n     * `false`  - Un Selects entire list items.\n     * @returns void\n     */\n    selectAll(state) {\n        this.isSelectAll = true;\n        this.selectAllItems(state);\n    }\n    getModuleName() {\n        return 'multiselect';\n    }\n    ;\n    /**\n     * Allows you to clear the selected values from the Multiselect component.\n     * @returns void\n     */\n    clear() {\n        this.selectAll(false);\n        this.setProperties({ value: null }, true);\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.setDynValue = this.initStatus = false;\n        this.isSelectAll = false;\n        this.searchWrapper = this.createElement('span', { className: SEARCHBOX_WRAPPER + ' ' + ((this.mode === 'Box') ? BOX_ELEMENT : '') });\n        this.viewWrapper = this.createElement('span', { className: DELIMITER_VIEW + ' ' + DELIMITER_WRAPPER, styles: 'display:none;' });\n        this.overAllClear = this.createElement('span', {\n            className: CLOSEICON_CLASS$1, styles: 'display:none;'\n        });\n        this.componentWrapper = this.createElement('div', { className: ELEMENT_WRAPPER });\n        this.overAllWrapper = this.createElement('div', { className: OVER_ALL_WRAPPER });\n        if (this.mode === 'CheckBox') {\n            addClass([this.overAllWrapper], 'e-checkbox');\n        }\n        if (Browser.isDevice) {\n            this.componentWrapper.classList.add(ELEMENT_MOBILE_WRAPPER);\n        }\n        this.setWidth(this.width);\n        this.overAllWrapper.appendChild(this.componentWrapper);\n        this.popupWrapper = this.createElement('div', { id: this.element.id + '_popup', className: POPUP_WRAPPER });\n        if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n            this.delimiterWrapper = this.createElement('span', { className: DELIMITER_WRAPPER, styles: 'display:none' });\n            this.componentWrapper.appendChild(this.delimiterWrapper);\n        }\n        else {\n            this.chipCollectionWrapper = this.createElement('span', {\n                className: CHIP_WRAPPER$1,\n                styles: 'display:none'\n            });\n            if (this.mode === 'Default') {\n                this.chipCollectionWrapper.setAttribute('id', getUniqueID('chip_default'));\n            }\n            else if (this.mode === 'Box') {\n                this.chipCollectionWrapper.setAttribute('id', getUniqueID('chip_box'));\n            }\n            this.componentWrapper.appendChild(this.chipCollectionWrapper);\n        }\n        if (this.mode !== 'Box') {\n            this.componentWrapper.appendChild(this.viewWrapper);\n        }\n        this.componentWrapper.appendChild(this.searchWrapper);\n        if (this.showClearButton && !Browser.isDevice) {\n            this.componentWrapper.appendChild(this.overAllClear);\n        }\n        else {\n            this.componentWrapper.classList.add(CLOSE_ICON_HIDE);\n        }\n        this.dropDownIcon();\n        this.inputElement = this.createElement('input', {\n            className: INPUT_ELEMENT,\n            attrs: {\n                spellcheck: 'false',\n                type: 'text',\n                autocomplete: 'off',\n                tabindex: '0'\n            }\n        });\n        if (this.mode === 'Default' || this.mode === 'Box') {\n            this.inputElement.setAttribute('aria-describedby', this.chipCollectionWrapper.id);\n        }\n        if (this.element.tagName !== this.getNgDirective()) {\n            this.element.style.display = 'none';\n        }\n        if (this.element.tagName === this.getNgDirective()) {\n            this.element.appendChild(this.overAllWrapper);\n            this.searchWrapper.appendChild(this.inputElement);\n        }\n        else {\n            this.element.parentElement.insertBefore(this.overAllWrapper, this.element);\n            this.searchWrapper.appendChild(this.inputElement);\n            this.searchWrapper.appendChild(this.element);\n            this.element.removeAttribute('tabindex');\n        }\n        if (this.floatLabelType !== 'Never') {\n            createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n        }\n        else if (this.floatLabelType === 'Never') {\n            this.refreshPlaceHolder();\n        }\n        this.addValidInputClass();\n        this.element.style.opacity = '';\n        let id = this.element.getAttribute('id') ? this.element.getAttribute('id') : getUniqueID('ej2_dropdownlist');\n        this.element.id = id;\n        this.hiddenElement = this.createElement('select', {\n            attrs: { 'aria-hidden': 'true', 'class': HIDDEN_ELEMENT, 'tabindex': '-1', 'multiple': '' }\n        });\n        this.componentWrapper.appendChild(this.hiddenElement);\n        this.validationAttribute(this.element, this.hiddenElement);\n        if (this.mode !== 'CheckBox') {\n            this.hideOverAllClear();\n        }\n        this.wireEvent();\n        this.enable(this.enabled);\n        this.enableRTL(this.enableRtl);\n        this.checkInitialValue();\n        this.renderComplete();\n    }\n    checkInitialValue() {\n        let isData = this.dataSource instanceof Array ? (this.dataSource.length > 0)\n            : !isNullOrUndefined(this.dataSource);\n        if (!(this.value && this.value.length) &&\n            isNullOrUndefined(this.text) &&\n            !isData &&\n            this.element.tagName === 'SELECT' &&\n            this.element.options.length > 0) {\n            let optionsElement = this.element.options;\n            let valueCol = [];\n            let textCol = '';\n            for (let index = 0, optionsLen = optionsElement.length; index < optionsLen; index++) {\n                let opt = optionsElement[index];\n                if (!isNullOrUndefined(opt.getAttribute('selected'))) {\n                    (opt.getAttribute('value')) ? valueCol.push(opt.getAttribute('value')) : textCol += (opt.text + this.delimiterChar);\n                }\n            }\n            if (valueCol.length > 0) {\n                this.setProperties({ value: valueCol }, true);\n            }\n            else if (textCol !== '') {\n                this.setProperties({ text: textCol }, true);\n            }\n            if (valueCol.length > 0 || textCol !== '') {\n                this.refreshInputHight();\n                this.refreshPlaceHolder();\n            }\n        }\n        if ((this.value && this.value.length) || !isNullOrUndefined(this.text)) {\n            this.renderPopup();\n        }\n        if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n            this.initialTextUpdate();\n        }\n        if (this.value && this.value.length) {\n            if (!(this.dataSource instanceof DataManager)) {\n                this.initialValueUpdate();\n                this.initialUpdate();\n            }\n            else {\n                this.setInitialValue = () => {\n                    this.initStatus = false;\n                    this.initialValueUpdate();\n                    this.initialUpdate();\n                    this.setInitialValue = null;\n                    this.initStatus = true;\n                };\n            }\n            this.updateTempValue();\n        }\n        else {\n            this.initialUpdate();\n        }\n        this.initStatus = true;\n        this.checkAutoFocus();\n        if (!isNullOrUndefined(this.text)) {\n            this.element.setAttribute('data-initial-value', this.text);\n        }\n    }\n    checkAutoFocus() {\n        if (this.element.hasAttribute('autofocus')) {\n            this.inputElement.focus();\n        }\n    }\n    setFloatLabelType() {\n        removeFloating(this.overAllWrapper, this.componentWrapper, this.searchWrapper, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n        if (this.floatLabelType !== 'Never') {\n            createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n        }\n    }\n    addValidInputClass() {\n        if ((!isNullOrUndefined(this.value) && this.value.length) || this.floatLabelType === 'Always') {\n            addClass([this.overAllWrapper], 'e-valid-input');\n        }\n        else {\n            removeClass([this.overAllWrapper], 'e-valid-input');\n        }\n    }\n    dropDownIcon() {\n        if (this.showDropDownIcon) {\n            this.dropIcon = this.createElement('span', { className: dropdownIcon });\n            this.componentWrapper.appendChild(this.dropIcon);\n            addClass([this.componentWrapper], ['e-down-icon']);\n        }\n        else {\n            if (!isNullOrUndefined(this.dropIcon)) {\n                this.dropIcon.parentElement.removeChild(this.dropIcon);\n                removeClass([this.componentWrapper], ['e-down-icon']);\n            }\n        }\n    }\n    initialUpdate() {\n        if (this.mode !== 'Box') {\n            this.updateDelimView();\n        }\n        this.updateCssClass();\n        this.updateHTMLAttribute();\n        this.updateReadonly(this.readonly);\n        this.refreshInputHight();\n        this.checkPlaceholderSize();\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        if (this.popupObj) {\n            this.popupObj.hide();\n        }\n        this.notify(destroy, {});\n        this.unwireListEvents();\n        this.unWireEvent();\n        this.list = null;\n        this.popupObj = null;\n        this.mainList = null;\n        this.mainData = null;\n        this.filterParent = null;\n        this.ulElement = null;\n        super.destroy();\n        let temp = ['readonly', 'aria-disabled', 'aria-placeholder', 'placeholder'];\n        let length = temp.length;\n        while (length > 0) {\n            this.inputElement.removeAttribute(temp[length - 1]);\n            length--;\n        }\n        this.element.removeAttribute('data-initial-value');\n        this.element.style.display = 'block';\n        if (this.overAllWrapper.parentElement) {\n            if (this.overAllWrapper.parentElement.tagName === this.getNgDirective()) {\n                remove(this.overAllWrapper);\n            }\n            else {\n                this.overAllWrapper.parentElement.insertBefore(this.element, this.overAllWrapper);\n                remove(this.overAllWrapper);\n            }\n        }\n    }\n    ;\n};\n__decorate$5([\n    Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings)\n], MultiSelect.prototype, \"fields\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"enablePersistence\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"groupTemplate\", void 0);\n__decorate$5([\n    Property('No records found')\n], MultiSelect.prototype, \"noRecordsTemplate\", void 0);\n__decorate$5([\n    Property('Request failed')\n], MultiSelect.prototype, \"actionFailureTemplate\", void 0);\n__decorate$5([\n    Property('None')\n], MultiSelect.prototype, \"sortOrder\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"enabled\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$5([\n    Property([])\n], MultiSelect.prototype, \"dataSource\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"query\", void 0);\n__decorate$5([\n    Property('StartsWith')\n], MultiSelect.prototype, \"filterType\", void 0);\n__decorate$5([\n    Property(1000)\n], MultiSelect.prototype, \"zIndex\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"ignoreAccent\", void 0);\n__decorate$5([\n    Property()\n], MultiSelect.prototype, \"locale\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"enableGroupCheckBox\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"cssClass\", void 0);\n__decorate$5([\n    Property('100%')\n], MultiSelect.prototype, \"width\", void 0);\n__decorate$5([\n    Property('300px')\n], MultiSelect.prototype, \"popupHeight\", void 0);\n__decorate$5([\n    Property('100%')\n], MultiSelect.prototype, \"popupWidth\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"placeholder\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"filterBarPlaceholder\", void 0);\n__decorate$5([\n    Property({})\n], MultiSelect.prototype, \"htmlAttributes\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"valueTemplate\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"headerTemplate\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"footerTemplate\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"itemTemplate\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"allowFiltering\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"changeOnBlur\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"allowCustomValue\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"showClearButton\", void 0);\n__decorate$5([\n    Property(1000)\n], MultiSelect.prototype, \"maximumSelectionLength\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"readonly\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"text\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"value\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"hideSelectedItem\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"closePopupOnSelect\", void 0);\n__decorate$5([\n    Property('Default')\n], MultiSelect.prototype, \"mode\", void 0);\n__decorate$5([\n    Property(',')\n], MultiSelect.prototype, \"delimiterChar\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"ignoreCase\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"showDropDownIcon\", void 0);\n__decorate$5([\n    Property('Never')\n], MultiSelect.prototype, \"floatLabelType\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"showSelectAll\", void 0);\n__decorate$5([\n    Property('Select All')\n], MultiSelect.prototype, \"selectAllText\", void 0);\n__decorate$5([\n    Property('Unselect All')\n], MultiSelect.prototype, \"unSelectAllText\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"enableSelectionOrder\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"openOnClick\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"change\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"removing\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"removed\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"selectedAll\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"beforeOpen\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"open\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"close\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"blur\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"focus\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"chipSelection\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"filtering\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"tagging\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"customValueSelection\", void 0);\nMultiSelect = __decorate$5([\n    NotifyPropertyChanges\n], MultiSelect);\n\nconst ICON = 'e-icons';\nconst CHECKBOXFRAME$1 = 'e-frame';\nconst CHECK$1 = 'e-check';\nconst CHECKBOXWRAP$1 = 'e-checkbox-wrapper';\nconst INDETERMINATE = 'e-stop';\nconst checkAllParent = 'e-selectall-parent';\nconst searchBackIcon = 'e-input-group-icon e-back-icon e-icons';\nconst filterBarClearIcon = 'e-input-group-icon e-clear-icon e-icons';\nconst filterInput = 'e-input-filter';\nconst filterParent = 'e-filter-parent';\nconst mobileFilter = 'e-ddl-device-filter';\nconst clearIcon = 'e-clear-icon';\nconst popupFullScreen = 'e-popup-full-page';\nconst device = 'e-ddl-device';\nconst FOCUS$1 = 'e-input-focus';\n/**\n * The Multiselect enable CheckBoxSelection call this inject module.\n */\nclass CheckBoxSelection {\n    constructor(parent) {\n        this.activeLi = [];\n        this.activeEle = [];\n        this.parent = parent;\n        this.removeEventListener();\n        this.addEventListener();\n    }\n    getModuleName() {\n        return 'CheckBoxSelection';\n    }\n    addEventListener() {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on('updatelist', this.listSelection, this);\n        this.parent.on('listoption', this.listOption, this);\n        this.parent.on('selectAll', this.setSelectAll, this);\n        this.parent.on('checkSelectAll', this.checkSelectAll, this);\n        this.parent.on('searchBox', this.setSearchBox, this);\n        this.parent.on('blur', this.onBlur, this);\n        this.parent.on('targetElement', this.targetElement, this);\n        this.parent.on('deviceSearchBox', this.setDeviceSearchBox, this);\n        this.parent.on('inputFocus', this.getFocus, this);\n        this.parent.on('reOrder', this.setReorder, this);\n        this.parent.on('activeList', this.getActiveList, this);\n        this.parent.on('selectAllText', this.setLocale, this);\n        this.parent.on('filterBarPlaceholder', this.setPlaceholder, this);\n        EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n        this.parent.on('addItem', this.checboxCreate, this);\n        this.parent.on('popupFullScreen', this.setPopupFullScreen, this);\n    }\n    removeEventListener() {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('updatelist', this.listSelection);\n        this.parent.off('listoption', this.listOption);\n        this.parent.off('selectAll', this.setSelectAll);\n        this.parent.off('checkSelectAll', this.checkSelectAll);\n        this.parent.off('searchBox', this.setSearchBox);\n        this.parent.off('blur', this.onBlur);\n        this.parent.off('targetElement', this.targetElement);\n        this.parent.off('deviceSearchBox', this.setDeviceSearchBox);\n        this.parent.off('inputFocus', this.getFocus);\n        this.parent.off('reOrder', this.setReorder);\n        this.parent.off('activeList', this.getActiveList);\n        this.parent.off('selectAllText', this.setLocale);\n        this.parent.off('filterBarPlaceholder', this.setPlaceholder);\n        this.parent.off('addItem', this.checboxCreate);\n        EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n        this.parent.off('popupFullScreen', this.setPopupFullScreen);\n    }\n    listOption(args) {\n        if (isNullOrUndefined(this.parent.listCurrentOptions.itemCreated)) {\n            this.parent.listCurrentOptions.itemCreated = (e) => {\n                this.checboxCreate(e);\n            };\n        }\n        else {\n            let itemCreated = this.parent.listCurrentOptions.itemCreated;\n            this.parent.listCurrentOptions.itemCreated = (e) => {\n                this.checboxCreate(e);\n                itemCreated.apply(this, [e]);\n            };\n        }\n    }\n    ;\n    setPlaceholder(props) {\n        Input.setPlaceholder(props.filterBarPlaceholder, this.filterInput);\n    }\n    checboxCreate(e) {\n        let item;\n        if (!isNullOrUndefined(e.item)) {\n            item = e.item;\n        }\n        else {\n            item = e;\n        }\n        if (this.parent.enableGroupCheckBox || (item.className !== 'e-list-group-item '\n            && item.className !== 'e-list-group-item')) {\n            let checkboxEle = createCheckBox(this.parent.createElement, true);\n            let icon = select('div.' + ICON, item);\n            let id = item.getAttribute('data-uid');\n            item.insertBefore(checkboxEle, item.childNodes[isNullOrUndefined(icon) ? 0 : 1]);\n            select('.' + CHECKBOXFRAME$1, checkboxEle);\n            let frame = select('.' + CHECKBOXFRAME$1, checkboxEle);\n            if (this.parent.enableGroupCheckBox) {\n                this.parent.popupWrapper.classList.add('e-multiselect-group');\n            }\n            return item;\n        }\n        else {\n            return item;\n        }\n    }\n    setSelectAll() {\n        if (this.parent.showSelectAll) {\n            if (isNullOrUndefined(this.checkAllParent)) {\n                this.checkAllParent = this.parent.createElement('div', {\n                    className: checkAllParent\n                });\n                this.selectAllSpan = this.parent.createElement('span', {\n                    className: 'e-all-text'\n                });\n                this.selectAllSpan.textContent = '';\n                this.checkAllParent.appendChild(this.selectAllSpan);\n                this.setLocale();\n                this.checboxCreate(this.checkAllParent);\n                if (this.parent.headerTemplate) {\n                    if (!isNullOrUndefined(this.parent.filterParent)) {\n                        append([this.checkAllParent], this.parent.filterParent);\n                    }\n                    else {\n                        append([this.checkAllParent], this.parent.popupWrapper);\n                    }\n                }\n                if (!this.parent.headerTemplate) {\n                    if (!isNullOrUndefined(this.parent.filterParent)) {\n                        this.parent.filterParent.parentNode.insertBefore(this.checkAllParent, this.parent.filterParent.nextSibling);\n                    }\n                    else {\n                        prepend([this.checkAllParent], this.parent.popupWrapper);\n                    }\n                }\n                EventHandler.add(this.checkAllParent, 'mousedown', this.clickHandler, this);\n            }\n            if (this.parent.list.classList.contains('e-nodata') || (this.parent.listData && this.parent.listData.length <= 1)) {\n                this.checkAllParent.style.display = 'none';\n            }\n            else {\n                this.checkAllParent.style.display = 'block';\n            }\n            this.parent.selectAllHeight = this.checkAllParent.getBoundingClientRect().height;\n        }\n        else if (!isNullOrUndefined(this.checkAllParent)) {\n            this.checkAllParent.parentElement.removeChild(this.checkAllParent);\n            this.checkAllParent = null;\n        }\n    }\n    destroy() {\n        this.removeEventListener();\n    }\n    listSelection(args) {\n        let target;\n        let isBlazorListbox = isBlazor() && (args.module && args.module === 'listbox');\n        if (!isNullOrUndefined(args.e)) {\n            let frameElm = args.li.querySelector('.e-checkbox-wrapper .e-frame');\n            target = !isNullOrUndefined(args.e.target) ?\n                (args.e.target.classList.contains('e-frame')\n                    && (!this.parent.showSelectAll\n                        || (this.checkAllParent && !this.checkAllParent.contains(args.e.target)))) ?\n                    args.e.target : (isBlazorListbox ? frameElm : args.li.querySelector('.e-checkbox-wrapper').childNodes[1])\n                : (isBlazorListbox ? frameElm : args.li.querySelector('.e-checkbox-wrapper').childNodes[1]);\n        }\n        else {\n            let checkboxWrapper = args.li.querySelector('.e-checkbox-wrapper');\n            target = checkboxWrapper ? (isBlazorListbox ?\n                checkboxWrapper.querySelector('.e-frame') : checkboxWrapper.childNodes[1]) : args.li.lastElementChild.childNodes[1];\n        }\n        if (this.parent.itemTemplate || this.parent.enableGroupCheckBox) {\n            target = args.li.firstElementChild.childNodes[1];\n        }\n        if (!isNullOrUndefined(target)) {\n            this.checkWrapper = closest(target, '.' + CHECKBOXWRAP$1);\n        }\n        if (!isNullOrUndefined(this.checkWrapper)) {\n            let checkElement = select('.' + CHECKBOXFRAME$1, this.checkWrapper);\n            let selectAll$$1 = false;\n            this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK$1), args.li, args.e, selectAll$$1);\n        }\n    }\n    validateCheckNode(checkWrap, isCheck, li, e, selectAll$$1) {\n        this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true, selectAll$$1);\n    }\n    clickHandler(e) {\n        let target;\n        if (e.currentTarget.classList.contains(this.checkAllParent.className)) {\n            target = e.currentTarget.firstElementChild.lastElementChild;\n        }\n        else {\n            target = e.currentTarget;\n        }\n        this.checkWrapper = closest(target, '.' + CHECKBOXWRAP$1);\n        let selectAll$$1 = true;\n        if (!isNullOrUndefined(this.checkWrapper)) {\n            let checkElement = select('.' + CHECKBOXFRAME$1, this.checkWrapper);\n            this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK$1), null, e, selectAll$$1);\n        }\n        e.preventDefault();\n    }\n    changeState(wrapper, state, e, isPrevent, selectAll$$1) {\n        let ariaState;\n        let frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME$1)[0];\n        if (state === 'check' && !frameSpan.classList.contains(CHECK$1)) {\n            frameSpan.classList.remove(INDETERMINATE);\n            frameSpan.classList.add(CHECK$1);\n            ariaState = 'true';\n            if (selectAll$$1) {\n                this.parent.selectAllItems(true, e);\n                this.setLocale(true);\n            }\n        }\n        else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK$1) || frameSpan.classList.contains(INDETERMINATE))) {\n            removeClass([frameSpan], [CHECK$1, INDETERMINATE]);\n            ariaState = 'false';\n            if (selectAll$$1) {\n                this.parent.selectAllItems(false, e);\n                this.setLocale();\n            }\n        }\n        else if (state === 'indeterminate' && !(frameSpan.classList.contains(INDETERMINATE))) {\n            removeClass([frameSpan], [CHECK$1]);\n            frameSpan.classList.add(INDETERMINATE);\n            ariaState = 'false';\n            if (selectAll$$1) {\n                this.parent.selectAllItems(false, e);\n                this.setLocale();\n            }\n        }\n        ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n        if (!isNullOrUndefined(ariaState)) {\n            wrapper.setAttribute('aria-checked', ariaState);\n        }\n    }\n    setSearchBox(args) {\n        if (isNullOrUndefined(this.parent.filterParent)) {\n            this.parent.filterParent = this.parent.createElement('span', {\n                className: filterParent\n            });\n            this.filterInput = this.parent.createElement('input', {\n                attrs: { type: 'text' },\n                className: filterInput\n            });\n            this.parent.element.parentNode.insertBefore(this.filterInput, this.parent.element);\n            let backIcon = false;\n            if (Browser.isDevice) {\n                backIcon = true;\n                this.parent.mobFilter = false;\n            }\n            this.filterInputObj = Input.createInput({\n                element: this.filterInput,\n                buttons: backIcon ? [searchBackIcon, filterBarClearIcon] : [filterBarClearIcon],\n                properties: { placeholder: this.parent.filterBarPlaceholder }\n            }, this.parent.createElement);\n            if (!isNullOrUndefined(this.parent.cssClass)) {\n                if (this.parent.cssClass.split(' ').indexOf('e-outline') !== -1) {\n                    addClass([this.filterInputObj.container], 'e-outline');\n                }\n                else if (this.parent.cssClass.split(' ').indexOf('e-filled') !== -1) {\n                    addClass([this.filterInputObj.container], 'e-filled');\n                }\n            }\n            append([this.filterInputObj.container], this.parent.filterParent);\n            prepend([this.parent.filterParent], args.popupElement);\n            attributes(this.filterInput, {\n                'aria-disabled': 'false',\n                'aria-owns': this.parent.element.id + '_options',\n                'role': 'listbox',\n                'aria-activedescendant': null,\n                'autocomplete': 'off',\n                'autocorrect': 'off',\n                'autocapitalize': 'off',\n                'spellcheck': 'false'\n            });\n            this.clearIconElement = this.filterInput.parentElement.querySelector('.' + clearIcon);\n            if (!Browser.isDevice && this.clearIconElement) {\n                EventHandler.add(this.clearIconElement, 'mousedown', this.clearText, this);\n                this.clearIconElement.style.visibility = 'hidden';\n            }\n            EventHandler.add(this.filterInput, 'input', this.parent.onInput, this.parent);\n            EventHandler.add(this.filterInput, 'keyup', this.parent.KeyUp, this.parent);\n            EventHandler.add(this.filterInput, 'keydown', this.parent.onKeyDown, this.parent);\n            EventHandler.add(this.filterInput, 'blur', this.onBlur, this);\n            EventHandler.add(this.filterInput, 'paste', this.parent.pasteHandler, this.parent);\n            this.parent.searchBoxHeight = (this.filterInputObj.container.parentElement).getBoundingClientRect().height;\n            return this.filterInputObj;\n        }\n    }\n    ;\n    clickOnBackIcon(e) {\n        this.parent.hidePopup();\n        removeClass([document.body, this.parent.popupObj.element], popupFullScreen);\n        this.parent.inputElement.focus();\n    }\n    clearText(e) {\n        this.parent.targetInputElement.value = '';\n        this.parent.refreshPopup();\n        this.parent.refreshListItems(null);\n        this.clearIconElement.style.visibility = 'hidden';\n        this.filterInput.focus();\n        this.setReorder(e);\n        e.preventDefault();\n    }\n    setDeviceSearchBox() {\n        this.parent.popupObj.element.classList.add(device);\n        this.parent.popupObj.element.classList.add(mobileFilter);\n        this.parent.popupObj.position = { X: 0, Y: 0 };\n        this.parent.popupObj.dataBind();\n        this.setSearchBoxPosition();\n        this.backIconElement = this.filterInputObj.container.querySelector('.e-back-icon');\n        this.clearIconElement = this.filterInputObj.container.querySelector('.' + clearIcon);\n        this.clearIconElement.style.visibility = 'hidden';\n        EventHandler.add(this.backIconElement, 'click', this.clickOnBackIcon, this);\n        EventHandler.add(this.clearIconElement, 'click', this.clearText, this);\n    }\n    setSearchBoxPosition() {\n        let searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;\n        let selectAllHeight = 0;\n        if (this.checkAllParent) {\n            selectAllHeight = this.checkAllParent.getBoundingClientRect().height;\n        }\n        this.parent.popupObj.element.style.maxHeight = '100%';\n        this.parent.popupObj.element.style.width = '100%';\n        this.parent.list.style.maxHeight = (window.innerHeight - searchBoxHeight - selectAllHeight) + 'px';\n        this.parent.list.style.height = (window.innerHeight - searchBoxHeight - selectAllHeight) + 'px';\n        let clearElement = this.filterInput.parentElement.querySelector('.' + clearIcon);\n        detach(this.filterInput);\n        clearElement.parentElement.insertBefore(this.filterInput, clearElement);\n    }\n    setPopupFullScreen() {\n        attributes(this.parent.popupObj.element, { style: 'left:0px;right:0px;top:0px;bottom:0px;' });\n        addClass([document.body, this.parent.popupObj.element], popupFullScreen);\n        this.parent.popupObj.element.style.maxHeight = '100%';\n        this.parent.popupObj.element.style.width = '100%';\n    }\n    targetElement() {\n        if (!isNullOrUndefined(this.clearIconElement)) {\n            this.parent.targetInputElement = this.filterInput;\n            this.clearIconElement.style.visibility = this.parent.targetInputElement.value === '' ? 'hidden' : 'visible';\n        }\n        return this.parent.targetInputElement.value;\n    }\n    onBlur(e) {\n        if (!this.parent.element.classList.contains('e-listbox')) {\n            let target;\n            if (this.parent.keyAction) {\n                return;\n            }\n            if (Browser.isIE) {\n                target = !isNullOrUndefined(e) && e.target;\n            }\n            if (!Browser.isIE) {\n                target = !isNullOrUndefined(e) && e.relatedTarget;\n            }\n            if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && this.parent.popupObj.element.contains(target)\n                && !Browser.isIE && this.filterInput) {\n                this.filterInput.focus();\n                return;\n            }\n            if (this.parent.scrollFocusStatus && this.filterInput) {\n                e.preventDefault();\n                this.filterInput.focus();\n                this.parent.scrollFocusStatus = false;\n                return;\n            }\n            if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element)\n                && !this.parent.popupObj.element.classList.contains('e-popup-close')) {\n                this.parent.inputFocus = false;\n                this.parent.updateValueState(e, this.parent.value, this.parent.tempValues);\n                this.parent.dispatchEvent(this.parent.hiddenElement, 'change');\n            }\n            if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) &&\n                !this.parent.popupObj.element.classList.contains('e-popup-close')) {\n                this.parent.inputFocus = false;\n                this.parent.overAllWrapper.classList.remove(FOCUS$1);\n                this.parent.trigger('blur');\n                this.parent.focused = true;\n            }\n            if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) &&\n                !this.parent.popupObj.element.classList.contains('e-popup-close') && !Browser.isDevice) {\n                this.parent.hidePopup();\n            }\n        }\n    }\n    onDocumentClick(e) {\n        if (this.parent.getLocaleName() !== 'listbox') {\n            let target = e.target;\n            if (!isNullOrUndefined(this.parent.popupObj) && closest(target, '#' + this.parent.popupObj.element.id)) {\n                if (!(this.filterInput && this.filterInput.value !== '')) {\n                    e.preventDefault();\n                }\n            }\n            if (!(!isNullOrUndefined(this.parent.popupObj) && closest(target, '#' + this.parent.popupObj.element.id)) &&\n                !this.parent.overAllWrapper.contains(e.target)) {\n                if (this.parent.overAllWrapper.classList.contains(dropDownBaseClasses.focus) || this.parent.isPopupOpen()) {\n                    this.parent.inputFocus = false;\n                    this.parent.scrollFocusStatus = false;\n                    this.parent.hidePopup();\n                    this.parent.onBlur(e, true);\n                    this.parent.focused = true;\n                }\n            }\n            else {\n                this.parent.scrollFocusStatus = (Browser.isIE || Browser.info.name === 'edge') && (document.activeElement === this.filterInput);\n            }\n            if (!this.parent.overAllWrapper.contains(e.target) && this.parent.overAllWrapper.classList.contains('e-input-focus') &&\n                !this.parent.isPopupOpen()) {\n                if (Browser.isIE) {\n                    this.parent.onBlur();\n                }\n                else {\n                    this.parent.onBlur(e);\n                }\n            }\n            if (this.filterInput === target) {\n                this.filterInput.focus();\n            }\n        }\n    }\n    getFocus(e) {\n        this.parent.overAllWrapper.classList.remove(FOCUS$1);\n        if (this.parent.keyAction && e.value !== 'clear') {\n            this.parent.keyAction = false;\n            return;\n        }\n        if (e.value === 'focus') {\n            this.filterInput.focus();\n            this.parent.removeFocus();\n            EventHandler.remove(this.parent.list, 'keydown', this.parent.onKeyDown);\n        }\n        if (e.value === 'clear') {\n            this.filterInput.value = '';\n            this.clearIconElement.style.visibility = 'hidden';\n        }\n    }\n    checkSelectAll(e) {\n        if (e.value === 'check' && this.checkAllParent.getAttribute('aria-checked') !== 'true') {\n            this.changeState(this.checkAllParent, e.value, null, null, false);\n            this.setLocale(true);\n        }\n        if (e.value === 'uncheck') {\n            this.changeState(this.checkAllParent, e.value, null, null, false);\n            this.setLocale();\n        }\n        if (e.value === 'indeterminate') {\n            this.changeState(this.checkAllParent, e.value, null, null, false);\n            this.setLocale();\n        }\n    }\n    setLocale(unSelect) {\n        if (this.parent.selectAllText !== 'Select All' || this.parent.unSelectAllText !== 'Unselect All') {\n            let template = unSelect ? this.parent.unSelectAllText : this.parent.selectAllText;\n            let compiledString;\n            this.selectAllSpan.textContent = '';\n            compiledString = compile(template);\n            for (let item of compiledString({}, null, null, null, !this.parent.isStringTemplate)) {\n                this.selectAllSpan.textContent = item.textContent;\n            }\n        }\n        else {\n            let l10nLocale = { selectAllText: 'Select All', unSelectAllText: 'Unselect All' };\n            let l10n = new L10n(this.parent.getLocaleName(), {}, this.parent.locale);\n            if (l10n.getConstant('selectAllText') === '') {\n                l10n = new L10n('dropdowns', l10nLocale, this.parent.locale);\n            }\n            this.selectAllSpan.textContent = unSelect ? l10n.getConstant('unSelectAllText') : l10n.getConstant('selectAllText');\n        }\n    }\n    getActiveList(args) {\n        if (args.li.classList.contains('e-active')) {\n            this.activeLi.push(args.li.cloneNode(true));\n        }\n        else {\n            this.activeLi.splice(args.index, 1);\n        }\n    }\n    setReorder(args) {\n        if (this.parent.enableSelectionOrder && !isNullOrUndefined(this.parent.value)) {\n            let activeLiCount = this.parent.ulElement.querySelectorAll('li.e-active').length;\n            let remLi;\n            let ulEle = this.parent.createElement('ul', {\n                className: 'e-list-parent e-ul e-reorder'\n            });\n            let removeEle = this.parent.createElement('div');\n            if (activeLiCount > 0) {\n                append(this.parent.ulElement.querySelectorAll('li.e-active'), ulEle);\n                remLi = this.parent.ulElement.querySelectorAll('li.e-active');\n                addClass(remLi, 'e-reorder-hide');\n                prepend([ulEle], this.parent.list);\n            }\n            this.parent.focusAtFirstListItem();\n        }\n    }\n}\n\n/**\n * export all modules from current location\n */\n\nvar __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar ListBox_1;\n/// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\nconst ITEMTEMPLATE_PROPERTY$1 = 'ItemTemplate';\n/**\n * Defines the Selection settings of List Box.\n */\nclass SelectionSettings extends ChildProperty {\n}\n__decorate$6([\n    Property('Multiple')\n], SelectionSettings.prototype, \"mode\", void 0);\n__decorate$6([\n    Property(false)\n], SelectionSettings.prototype, \"showCheckbox\", void 0);\n__decorate$6([\n    Property(false)\n], SelectionSettings.prototype, \"showSelectAll\", void 0);\n__decorate$6([\n    Property('Left')\n], SelectionSettings.prototype, \"checkboxPosition\", void 0);\n/**\n * Defines the toolbar settings of List Box.\n */\nclass ToolbarSettings extends ChildProperty {\n}\n__decorate$6([\n    Property([])\n], ToolbarSettings.prototype, \"items\", void 0);\n__decorate$6([\n    Property('Right')\n], ToolbarSettings.prototype, \"position\", void 0);\n/**\n * The ListBox is a graphical user interface component used to display a list of items.\n * Users can select one or more items in the list using a checkbox or by keyboard selection.\n * It supports sorting, grouping, reordering and drag and drop of items.\n * ```html\n * <select id=\"listbox\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n * <script>\n *   var listObj = new ListBox();\n *   listObj.appendTo(\"#listbox\");\n * </script>\n * ```\n */\nlet ListBox = ListBox_1 = class ListBox extends DropDownBase {\n    /**\n     * Constructor for creating the ListBox component.\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isValidKey = false;\n        this.keyDownStatus = false;\n    }\n    /**\n     * Adds a new item to the popup list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n     * @return {void}.\n     * @private\n     */\n    addItem(items, itemIndex) {\n        super.addItem(items, itemIndex);\n    }\n    ;\n    /**\n     * Build and render the component\n     * @private\n     */\n    render() {\n        this.inputString = '';\n        this.initLoad = true;\n        this.isCustomFiltering = false;\n        this.initialSelectedOptions = this.value;\n        if (isBlazor() && this.isServerRendered) {\n            this.list = this.element.parentElement;\n            this.liCollections = this.list.querySelectorAll('.' + cssClass.li);\n            this.mainList = this.ulElement = this.list.querySelector('ul');\n            this.setSelection(this.value);\n            if (this.allowFiltering) {\n                this.setFiltering();\n            }\n            this.initToolbarAndStyles();\n            this.updateSelectionSettings();\n            this.wireEvents();\n            this.initDraggable();\n            this.initLoad = false;\n        }\n        else {\n            super.render();\n        }\n        this.renderComplete();\n    }\n    updateBlazorListData(data, isDataSource, select$$1) {\n        if (isDataSource) {\n            this.liCollections = this.list.querySelectorAll('.' + cssClass.li);\n            this.mainList = this.ulElement = this.list.querySelector('ul');\n            if (this.allowDragAndDrop && !this.ulElement.classList.contains('e-sortable')) {\n                this.initDraggable();\n            }\n            if (select$$1) {\n                this.selectItems(this.listData, false);\n            }\n        }\n        if (!isNullOrUndefined(data)) {\n            this.sortedData = this.jsonData = this.listData = data;\n        }\n    }\n    initWrapper() {\n        let hiddenSelect = this.createElement('select', { className: 'e-hidden-select', attrs: { 'multiple': '' } });\n        this.list.classList.add('e-listbox-wrapper');\n        if (this.itemTemplate) {\n            this.list.classList.add('e-list-template');\n        }\n        this.list.classList.add('e-wrapper');\n        if (this.element.tagName === 'EJS-LISTBOX') {\n            this.element.setAttribute('tabindex', '0');\n            if (this.initLoad) {\n                this.element.appendChild(this.list);\n            }\n        }\n        else {\n            if (this.initLoad) {\n                this.element.parentElement.insertBefore(this.list, this.element);\n            }\n            this.list.insertBefore(this.element, this.list.firstChild);\n            this.element.style.display = 'none';\n        }\n        this.list.insertBefore(hiddenSelect, this.list.firstChild);\n        if (this.list.getElementsByClassName('e-list-item')[0]) {\n            this.list.getElementsByClassName('e-list-item')[0].classList.remove(dropDownBaseClasses.focus);\n        }\n        removeClass([this.list], [dropDownBaseClasses.content, dropDownBaseClasses.root]);\n        this.validationAttribute(this.element, hiddenSelect);\n        this.list.setAttribute('role', 'listbox');\n        attributes(this.list, { 'role': 'listbox', 'aria-multiselectable': this.selectionSettings.mode === 'Multiple' ? 'true' : 'false' });\n        this.updateSelectionSettings();\n    }\n    updateSelectionSettings() {\n        if (this.selectionSettings.showCheckbox && this.selectionSettings.showSelectAll && this.liCollections.length) {\n            let l10nSelect = new L10n(this.getModuleName(), { selectAllText: 'Select All', unSelectAllText: 'Unselect All' }, this.locale);\n            this.showSelectAll = true;\n            this.selectAllText = l10nSelect.getConstant('selectAllText');\n            this.unSelectAllText = l10nSelect.getConstant('unSelectAllText');\n            this.popupWrapper = this.list;\n            this.checkBoxSelectionModule.checkAllParent = null;\n            this.notify('selectAll', {});\n        }\n    }\n    initDraggable() {\n        if (this.ulElement) {\n            this.ulElement.id = this.element.id + '_parent';\n        }\n        if (this.allowDragAndDrop) {\n            new Sortable(this.ulElement, {\n                scope: this.scope,\n                itemClass: 'e-list-item',\n                dragStart: this.triggerDragStart.bind(this),\n                drag: this.triggerDrag.bind(this),\n                beforeDrop: this.beforeDragEnd.bind(this),\n                drop: this.dragEnd.bind(this),\n                placeHolder: () => { return this.createElement('span', { className: 'e-placeholder' }); },\n                helper: (e) => {\n                    let wrapper = this.list.cloneNode();\n                    let ele = e.sender.cloneNode(true);\n                    wrapper.appendChild(ele);\n                    let refEle = this.getItems()[0];\n                    wrapper.style.width = refEle.offsetWidth + 'px';\n                    wrapper.style.height = refEle.offsetHeight + 'px';\n                    if ((this.value && this.value.length) > 1 && this.isSelected(ele)) {\n                        ele.appendChild(this.createElement('span', {\n                            className: 'e-list-badge', innerHTML: this.value.length + ''\n                        }));\n                    }\n                    wrapper.style.zIndex = getZindexPartial(this.element) + '';\n                    return wrapper;\n                }\n            });\n        }\n    }\n    updateActionCompleteData(li, item) {\n        this.jsonData.push(item);\n    }\n    initToolbar() {\n        let scope;\n        let pos = this.toolbarSettings.position;\n        let prevScope = this.element.getAttribute('data-value');\n        if (this.toolbarSettings.items.length) {\n            let toolElem = this.createElement('div', { className: 'e-listbox-tool', attrs: { 'role': 'toolbar' } });\n            let wrapper = this.createElement('div', {\n                className: 'e-listboxtool-wrapper e-' + pos.toLowerCase()\n            });\n            this.list.parentElement.insertBefore(wrapper, this.list);\n            wrapper.appendChild(pos === 'Right' ? this.list : toolElem);\n            wrapper.appendChild(pos === 'Right' ? toolElem : this.list);\n            this.createButtons(toolElem);\n            if (!this.element.id) {\n                this.element.id = getUniqueID('e-' + this.getModuleName());\n            }\n            if (this.scope) {\n                document.querySelector(this.scope).setAttribute('data-value', this.element.id);\n            }\n            else {\n                this.updateToolBarState();\n            }\n        }\n        scope = this.element.getAttribute('data-value');\n        if (prevScope && scope && (prevScope !== scope)) {\n            this.tBListBox = getComponent(document.getElementById(prevScope), this.getModuleName());\n            this.tBListBox.updateToolBarState();\n        }\n        else if (scope) {\n            this.tBListBox = getComponent(document.getElementById(scope), this.getModuleName());\n            this.tBListBox.updateToolBarState();\n        }\n    }\n    createButtons(toolElem) {\n        let btn;\n        let ele;\n        let title;\n        let l10n = new L10n(this.getModuleName(), {\n            moveUp: 'Move Up', moveDown: 'Move Down', moveTo: 'Move To',\n            moveFrom: 'Move From', moveAllTo: 'Move All To', moveAllFrom: 'Move All From'\n        }, this.locale);\n        this.toolbarSettings.items.forEach((value) => {\n            title = l10n.getConstant(value);\n            ele = this.createElement('button', {\n                attrs: {\n                    'type': 'button',\n                    'data-value': value,\n                    'title': title,\n                    'aria-label': title\n                }\n            });\n            toolElem.appendChild(ele);\n            btn = new Button({ iconCss: 'e-icons e-' + value.toLowerCase() }, ele);\n            btn.createElement = this.createElement;\n        });\n    }\n    validationAttribute(input, hiddenSelect) {\n        super.validationAttribute(input, hiddenSelect);\n        hiddenSelect.required = input.required;\n        input.required = false;\n    }\n    setHeight() {\n        let ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n        ele.style.height = formatUnit(this.height);\n        if (this.allowFiltering && this.height.toString().indexOf('%') < 0) {\n            addClass([this.list], 'e-filter-list');\n        }\n        else {\n            removeClass([this.list], 'e-filter-list');\n        }\n    }\n    setCssClass() {\n        let wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n        if (this.cssClass) {\n            addClass([wrap], this.cssClass.split(' '));\n        }\n        if (this.enableRtl) {\n            addClass([wrap], 'e-rtl');\n        }\n    }\n    setEnable() {\n        let ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n        if (this.enabled) {\n            removeClass([ele], cssClass.disabled);\n        }\n        else {\n            addClass([ele], cssClass.disabled);\n            if (isBlazor() && this.isServerRendered && this.toolbarSettings.items.length) {\n                removeClass([this.list], cssClass.disabled);\n            }\n        }\n    }\n    showSpinner() {\n        if (!this.spinner) {\n            this.spinner = this.createElement('div', { className: 'e-listbox-wrapper' });\n        }\n        this.spinner.style.height = formatUnit(this.height);\n        this.element.parentElement.insertBefore(this.spinner, this.element.nextSibling);\n        createSpinner({ target: this.spinner }, this.createElement);\n        showSpinner(this.spinner);\n    }\n    hideSpinner() {\n        if (this.spinner.querySelector('.e-spinner-pane')) {\n            hideSpinner(this.spinner);\n        }\n        if (this.spinner.parentElement) {\n            detach(this.spinner);\n        }\n    }\n    onInput() {\n        if (this.keyDownStatus) {\n            this.isValidKey = true;\n        }\n        else {\n            this.isValidKey = false;\n        }\n        this.keyDownStatus = false;\n        this.refreshClearIcon();\n    }\n    clearText() {\n        this.filterInput.value = '';\n        this.refreshClearIcon();\n        let event = document.createEvent('KeyboardEvent');\n        this.isValidKey = true;\n        this.KeyUp(event);\n    }\n    refreshClearIcon() {\n        if (this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon)) {\n            let clearElement = this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon);\n            clearElement.style.visibility = this.filterInput.value === '' ? 'hidden' : 'visible';\n        }\n    }\n    onActionComplete(ulElement, list, e) {\n        let searchEle;\n        if (this.allowFiltering && this.list.getElementsByClassName('e-filter-parent')[0]) {\n            if (isBlazor() && this.isServerRendered) {\n                searchEle = this.list.getElementsByClassName('e-filter-parent')[0];\n            }\n            else {\n                searchEle = this.list.getElementsByClassName('e-filter-parent')[0].cloneNode(true);\n            }\n        }\n        super.onActionComplete(ulElement, list, e);\n        if (this.allowFiltering && !isNullOrUndefined(searchEle)) {\n            this.list.insertBefore(searchEle, this.list.firstElementChild);\n            if (!isBlazor() && !this.isServerRendered) {\n                this.filterParent = this.list.getElementsByClassName('e-filter-parent')[0];\n                this.filterWireEvents(searchEle);\n            }\n        }\n        this.initWrapper();\n        this.setSelection();\n        this.initDraggable();\n        this.mainList = this.ulElement;\n        if (this.initLoad) {\n            this.jsonData = [];\n            extend(this.jsonData, list, []);\n            this.initToolbarAndStyles();\n            this.wireEvents();\n            if (this.showCheckbox) {\n                this.setCheckboxPosition();\n            }\n            if (this.allowFiltering) {\n                this.setFiltering();\n            }\n        }\n        else {\n            if (this.allowFiltering) {\n                let filterElem = this.list.getElementsByClassName('e-input-filter')[0];\n                let txtLength = this.filterInput.value.length;\n                filterElem.selectionStart = txtLength;\n                filterElem.selectionEnd = txtLength;\n                filterElem.focus();\n            }\n        }\n        this.initLoad = false;\n    }\n    initToolbarAndStyles() {\n        this.initToolbar();\n        this.setCssClass();\n        this.setEnable();\n        this.setHeight();\n    }\n    triggerDragStart(args) {\n        let badge;\n        args = extend(this.getDragArgs(args), { dragSelected: true });\n        if (Browser.isIos) {\n            this.list.style.overflow = 'hidden';\n        }\n        this.trigger('dragStart', args, (dragEventArgs) => {\n            this.allowDragAll = dragEventArgs.dragSelected;\n            if (!this.allowDragAll) {\n                badge = this.ulElement.getElementsByClassName('e-list-badge')[0];\n                if (badge) {\n                    detach(badge);\n                }\n            }\n            if (isBlazor()) {\n                args.bindEvents(args.dragElement);\n            }\n        });\n    }\n    triggerDrag(args) {\n        this.trigger('drag', this.getDragArgs(args));\n        let listObj = this.getComponent(args.target);\n        if (listObj && listObj.listData.length === 0) {\n            let noRecElem = listObj.ulElement.getElementsByClassName('e-list-nrt')[0];\n            if (noRecElem) {\n                listObj.ulElement.removeChild(noRecElem);\n            }\n        }\n    }\n    beforeDragEnd(args) {\n        let dragValue = args.droppedElement.getAttribute('data-value');\n        if (this.value.indexOf(dragValue) > -1) {\n            args.items = this.getDataByValues(this.value);\n        }\n        else {\n            args.items = this.getDataByValues([dragValue]);\n        }\n        this.trigger('beforeDrop', args);\n    }\n    // tslint:disable-next-line:max-func-body-length\n    dragEnd(args) {\n        let listData;\n        let liColl;\n        let jsonData;\n        let droppedData;\n        let selectedOptions;\n        let sortedData;\n        let dropValue = this.getFormattedValue(args.droppedElement.getAttribute('data-value'));\n        let listObj = this.getComponent(args.droppedElement);\n        let getArgs = this.getDragArgs({ target: args.droppedElement }, true);\n        let sourceArgs = { previousData: this.dataSource };\n        let destArgs = { previousData: listObj.dataSource };\n        let dragArgs = extend({}, getArgs, { target: args.target, source: { previousData: this.dataSource } });\n        if (listObj !== this) {\n            let sourceArgs1 = extend(sourceArgs, { currentData: this.listData });\n            dragArgs = extend(dragArgs, { source: sourceArgs1, destination: destArgs });\n        }\n        if (Browser.isIos) {\n            this.list.style.overflow = '';\n        }\n        if (listObj === this) {\n            let ul = this.ulElement;\n            listData = [].slice.call(this.listData);\n            liColl = [].slice.call(this.liCollections);\n            jsonData = [].slice.call(this.jsonData);\n            sortedData = [].slice.call(this.sortedData);\n            let toSortIdx = args.currentIndex;\n            let toIdx = args.currentIndex = this.getCurIdx(this, args.currentIndex);\n            let rIdx = listData.indexOf(this.getDataByValue(dropValue));\n            let jsonIdx = jsonData.indexOf(this.getDataByValue(dropValue));\n            let sIdx = sortedData.indexOf(this.getDataByValue(dropValue));\n            listData.splice(toIdx, 0, listData.splice(rIdx, 1)[0]);\n            sortedData.splice(toSortIdx, 0, sortedData.splice(sIdx, 1)[0]);\n            jsonData.splice(toIdx, 0, jsonData.splice(jsonIdx, 1)[0]);\n            if (!isBlazor()) {\n                liColl.splice(toIdx, 0, liColl.splice(rIdx, 1)[0]);\n            }\n            if (this.allowDragAll) {\n                selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 ? this.value : [dropValue];\n                selectedOptions.forEach((value) => {\n                    if (value !== dropValue) {\n                        let idx = listData.indexOf(this.getDataByValue(value));\n                        let jsonIdx = jsonData.indexOf(this.getDataByValue(value));\n                        let sIdx = sortedData.indexOf(this.getDataByValue(value));\n                        if (idx > toIdx) {\n                            toIdx++;\n                        }\n                        jsonData.splice(toIdx, 0, jsonData.splice(jsonIdx, 1)[0]);\n                        listData.splice(toIdx, 0, listData.splice(idx, 1)[0]);\n                        sortedData.splice(toSortIdx, 0, sortedData.splice(sIdx, 1)[0]);\n                        if (!isBlazor()) {\n                            liColl.splice(toIdx, 0, liColl.splice(idx, 1)[0]);\n                            ul.insertBefore(this.getItems()[this.getIndexByValue(value)], ul.getElementsByClassName('e-placeholder')[0]);\n                        }\n                    }\n                    else if (isBlazor()) {\n                        let lists = [].slice.call(this.ulElement.getElementsByClassName(cssClass.li));\n                        let refChild = this.ulElement.removeChild(lists[args.currentIndex]);\n                        lists.splice(args.currentIndex, 1);\n                        this.ulElement.insertBefore(refChild, lists[args.previousIndex]);\n                    }\n                });\n            }\n            this.listData = listData;\n            this.jsonData = jsonData;\n            this.sortedData = sortedData;\n            this.liCollections = liColl;\n            if (isBlazor()) {\n                let value = this.value;\n                // tslint:disable-next-line:no-any\n                this.interopAdaptor.invokeMethodAsync('UpdateListData', this.listData).then(() => {\n                    this.updateBlazorListData(null, true);\n                    this.selectItems(this.listData, false);\n                    this.selectItems(value);\n                });\n            }\n        }\n        else {\n            let li;\n            let fLiColl = [].slice.call(this.liCollections);\n            let currIdx = args.currentIndex = this.getCurIdx(listObj, args.currentIndex);\n            let ul = listObj.ulElement;\n            listData = [].slice.call(listObj.listData);\n            liColl = [].slice.call(listObj.liCollections);\n            jsonData = [].slice.call(listObj.jsonData);\n            sortedData = [].slice.call(listObj.sortedData);\n            selectedOptions = (this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 && this.allowDragAll)\n                ? this.value : [dropValue];\n            let fListData = [].slice.call(this.listData);\n            let fSortData = [].slice.call(this.sortedData);\n            selectedOptions.forEach((value, index) => {\n                droppedData = this.getDataByValue(value);\n                let srcIdx = this.listData.indexOf(droppedData);\n                let jsonSrcIdx = this.jsonData.indexOf(droppedData);\n                let sortIdx = this.sortedData.indexOf(droppedData);\n                fListData.splice(srcIdx, 1);\n                this.jsonData.splice(jsonSrcIdx, 1);\n                fSortData.splice(sortIdx, 1);\n                this.listData = fListData;\n                this.sortedData = fSortData;\n                let destIdx = value === dropValue ? args.currentIndex : currIdx;\n                listData.splice(destIdx, 0, droppedData);\n                jsonData.splice(destIdx, 0, droppedData);\n                sortedData.splice(destIdx, 0, droppedData);\n                if (!isBlazor()) {\n                    liColl.splice(destIdx, 0, fLiColl.splice(srcIdx, 1)[0]);\n                }\n                if (!value) {\n                    let liCollElem = this.getItems();\n                    for (let i = 0; i < liCollElem.length; i++) {\n                        if (liCollElem[i].getAttribute('data-value') === null && liCollElem[i].classList.contains('e-list-item')) {\n                            li = liCollElem[i];\n                            break;\n                        }\n                    }\n                }\n                else {\n                    li = this.getItems()[this.getIndexByValue(value)];\n                }\n                if (!li) {\n                    li = args.helper;\n                }\n                this.removeSelected(this, value === dropValue ? [args.droppedElement] : [li]);\n                if (isBlazor()) {\n                    if (index === 0) {\n                        this.ulElement.insertBefore(ul.getElementsByClassName(cssClass.li)[args.currentIndex], this.ulElement.getElementsByClassName(cssClass.li)[args.previousIndex]);\n                    }\n                }\n                else {\n                    ul.insertBefore(li, ul.getElementsByClassName('e-placeholder')[0]);\n                }\n                currIdx++;\n            });\n            if (isBlazor()) {\n                // tslint:disable\n                this.interopAdaptor.invokeMethodAsync('UpdateListData', this.listData).then(() => {\n                    this.updateSelectedOptions();\n                    if (this.fields.groupBy) {\n                        this.setSelection();\n                    }\n                    this.updateBlazorListData(null, true, this.value == null || !this.value.length);\n                });\n                listObj.interopAdaptor.invokeMethodAsync('UpdateListData', listData).then(() => {\n                    if (listObj.sortOrder !== 'None' || this.selectionSettings.showCheckbox\n                        !== listObj.selectionSettings.showCheckbox || listObj.fields.groupBy) {\n                        listObj.setSelection();\n                    }\n                    listObj.updateBlazorListData(null, true, listObj.value == null || !listObj.value.length);\n                });\n                // tslint:enable\n            }\n            else {\n                if (this.fields.groupBy) {\n                    this.ulElement.innerHTML = this.renderItems(this.listData, this.fields).innerHTML;\n                    this.setSelection();\n                }\n                if (listObj.sortOrder !== 'None' || this.selectionSettings.showCheckbox\n                    !== listObj.selectionSettings.showCheckbox || listObj.fields.groupBy) {\n                    let sortabale = getComponent(ul, 'sortable');\n                    ul.innerHTML = listObj.renderItems(listData, listObj.fields).innerHTML;\n                    if (sortabale.placeHolderElement) {\n                        ul.appendChild(sortabale.placeHolderElement);\n                    }\n                    ul.appendChild(args.helper);\n                    listObj.setSelection();\n                }\n                this.liCollections = fLiColl;\n                listObj.liCollections = liColl;\n            }\n            listObj.jsonData = extend([], [], jsonData, false);\n            listObj.listData = extend([], [], listData, false);\n            listObj.sortedData = extend([], [], sortedData, false);\n            if (this.listData.length === 0) {\n                this.l10nUpdate();\n            }\n        }\n        if (this === listObj) {\n            let sourceArgs1 = extend(sourceArgs, { currentData: listData });\n            dragArgs = extend(dragArgs, { source: sourceArgs1 });\n        }\n        else {\n            let dragArgs1 = extend(destArgs, { currentData: listData });\n            dragArgs = extend(dragArgs, { destination: dragArgs1 });\n        }\n        this.trigger('drop', dragArgs);\n    }\n    removeSelected(listObj, elems) {\n        if (listObj.selectionSettings.showCheckbox) {\n            elems.forEach((ele) => { ele.getElementsByClassName('e-frame')[0].classList.remove('e-check'); });\n        }\n        else {\n            removeClass(elems, cssClass.selected);\n        }\n    }\n    getCurIdx(listObj, idx) {\n        if (listObj.fields.groupBy) {\n            idx -= [].slice.call(listObj.ulElement.children).slice(0, idx)\n                .filter((ele) => ele.classList.contains(cssClass.group)).length;\n        }\n        return idx;\n    }\n    getComponent(li) {\n        let listObj;\n        let ele = (this.element.tagName === 'EJS-LISTBOX' ? closest(li, '.e-listbox')\n            : closest(li, '.e-listbox-wrapper') && closest(li, '.e-listbox-wrapper').querySelector('.e-listbox'));\n        if (ele) {\n            listObj = getComponent(ele, this.getModuleName());\n        }\n        return listObj;\n    }\n    listOption(dataSource, fields) {\n        this.listCurrentOptions = super.listOption(dataSource, fields);\n        this.listCurrentOptions = extend({}, this.listCurrentOptions, { itemCreated: this.triggerBeforeItemRender.bind(this) }, true);\n        this.notify('listoption', { module: 'CheckBoxSelection' });\n        return this.listCurrentOptions;\n    }\n    triggerBeforeItemRender(e) {\n        e.item.setAttribute('tabindex', '-1');\n        this.trigger('beforeItemRender', { element: e.item, item: e.curData });\n    }\n    requiredModules() {\n        let modules = [];\n        if (this.selectionSettings.showCheckbox) {\n            modules.push({\n                member: 'CheckBoxSelection',\n                args: [this]\n            });\n        }\n        return modules;\n    }\n    /**\n     * This method is used to enable or disable the items in the ListBox based on the items and enable argument.\n     * @param items Text items that needs to be enabled/disabled.\n     * @param enable Set `true`/`false` to enable/disable the list items.\n     * @param isValue - Set `true` if `items` parameter is a array of unique values.\n     * @returns void\n     */\n    enableItems(items, enable = true, isValue) {\n        let li;\n        items.forEach((item) => {\n            let text;\n            if (isBlazor() && typeof (item) === 'object') {\n                text = getValue(isValue ? this.fields.value : this.fields.text, item);\n                if (isNullOrUndefined(text)) {\n                    return;\n                }\n            }\n            else {\n                text = item;\n            }\n            li = this.findListElement(this.list, 'li', 'data-value', isValue ? text : this.getValueByText(text));\n            if (!li) {\n                return;\n            }\n            if (enable) {\n                removeClass([li], cssClass.disabled);\n                li.removeAttribute('aria-disabled');\n            }\n            else {\n                addClass([li], cssClass.disabled);\n                li.setAttribute('aria-disabled', 'true');\n            }\n        });\n    }\n    /**\n     * Based on the state parameter, specified list item will be selected/deselected.\n     * @param items Array of text value of the item.\n     * @param state Set `true`/`false` to select/un select the list items.\n     * @param isValue - Set `true` if `items` parameter is a array of unique values.\n     * @returns void\n     */\n    selectItems(items, state = true, isValue) {\n        this.setSelection(items, state, !isValue);\n        this.updateSelectedOptions();\n    }\n    /**\n     * Based on the state parameter, entire list item will be selected/deselected.\n     * @param state Set `true`/`false` to select/un select the entire list items.\n     * @returns void\n     */\n    selectAll(state = true) {\n        this.selectAllItems(state);\n    }\n    /**\n     * Adds a new item to the list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the list.\n     * @returns {void}.\n     */\n    addItems(items, itemIndex) {\n        super.addItem(items, itemIndex);\n    }\n    /**\n     * Removes a item from the list. By default, removed the last item in the list,\n     * but you can remove based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to remove the item from the list.\n     * @returns {void}.\n     */\n    removeItems(items, itemIndex) {\n        this.removeItem(items, itemIndex);\n    }\n    /**\n     * Removes a item from the list. By default, removed the last item in the list,\n     * but you can remove based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to remove the item from the list.\n     * @returns {void}.\n     */\n    removeItem(items, itemIndex) {\n        let liCollections = [];\n        let liElement = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n        if (items) {\n            items = (items instanceof Array ? items : [items]);\n            let fields = this.fields;\n            let dataValue;\n            let objValue;\n            let dupData = [];\n            let itemIdx;\n            extend(dupData, [], this.listData);\n            let removeIdxes = [];\n            let removeLiIdxes = [];\n            for (let j = 0; j < items.length; j++) {\n                if (items[j] instanceof Object) {\n                    dataValue = getValue(fields.value, items[j]);\n                }\n                else {\n                    dataValue = items[j].toString();\n                }\n                for (let i = 0, len = dupData.length; i < len; i++) {\n                    if (dupData[i] instanceof Object) {\n                        objValue = getValue(fields.value, dupData[i]);\n                    }\n                    else {\n                        objValue = dupData[i].toString();\n                    }\n                    if (objValue === dataValue) {\n                        itemIdx = this.getIndexByValue(dataValue);\n                        liCollections.push(liElement[itemIdx]);\n                        removeIdxes.push(i);\n                        removeLiIdxes.push(itemIdx);\n                    }\n                }\n            }\n            for (let k = removeIdxes.length - 1; k > 0; k--) {\n                this.listData.splice(removeIdxes[k], 1);\n            }\n            for (let k = removeLiIdxes.length - 1; k > 0; k--) {\n                this.liCollections.splice(removeLiIdxes[k], 1);\n            }\n        }\n        else {\n            itemIndex = itemIndex ? itemIndex : 0;\n            liCollections.push(liElement[itemIndex]);\n            this.listData.splice(itemIndex, 1);\n            this.updateLiCollection(itemIndex);\n        }\n        for (let i = 0; i < liCollections.length; i++) {\n            this.ulElement.removeChild(liCollections[i]);\n        }\n        if (this.listData.length === 0) {\n            this.l10nUpdate();\n        }\n    }\n    /**\n     * Gets the array of data Object that matches the given array of values.\n     * @param  { string[] | number[] | boolean[] } value - Specifies the array value of the list item.\n     * @returns object[].\n     */\n    getDataByValues(value) {\n        let data = [];\n        for (let i = 0; i < value.length; i++) {\n            data.push(this.getDataByValue(value[i]));\n        }\n        return data;\n    }\n    /**\n     * Moves the given value(s) / selected value(s) upwards.\n     * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).\n     * @returns {void}\n     */\n    moveUp(value) {\n        let elem = (value) ? this.getElemByValue(value) : this.getSelectedItems();\n        this.moveUpDown(true, false, elem);\n    }\n    /**\n     * Moves the given value(s) / selected value(s) downwards.\n     * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).\n     * @returns {void}\n     */\n    moveDown(value) {\n        let elem = (value) ? this.getElemByValue(value) : this.getSelectedItems();\n        this.moveUpDown(false, false, elem);\n    }\n    /**\n     * Moves the given value(s) / selected value(s) to the given / default scoped ListBox.\n     * @param  { string[] | number[] | boolean[] } value - Specifies the value or array value of the list item.\n     * @returns {void}\n     */\n    moveTo(value, index, targetId) {\n        let elem = (value) ? this.getElemByValue(value) : this.getSelectedItems();\n        let tlistbox = (targetId) ? getComponent(targetId, ListBox_1) : this.getScopedListBox();\n        this.moveData(this, tlistbox, false, elem, index);\n    }\n    /**\n     * Moves all the values from one ListBox to the scoped ListBox.\n     * @param  { string } targetId - Specifies the scoped ListBox ID.\n     * @param  { string } index - Specifies the index to where the items moved.\n     * @returns {void}\n     */\n    moveAllTo(targetId, index) {\n        let tlistbox = (targetId) ? getComponent(targetId, ListBox_1) : this.getScopedListBox();\n        this.moveAllData(this, tlistbox, false, index);\n    }\n    /**\n     * Returns the updated dataSource in ListBox\n     * @returns {{ [key: string]: Object }[] | string[] | boolean[] | number[]}\n     */\n    getDataList() {\n        return this.jsonData;\n    }\n    /**\n     * Returns the sorted Data in ListBox\n     * @returns {{ [key: string]: Object }[] | string[] | boolean[] | number[]}\n     */\n    getSortedList() {\n        let sortData;\n        let tempData;\n        sortData = tempData = this.sortedData;\n        if (this.fields.groupBy) {\n            sortData = [];\n            for (let i = 0; i < tempData.length; i++) {\n                if (tempData[i].isHeader) {\n                    continue;\n                }\n                sortData.push(tempData[i]);\n            }\n        }\n        return sortData;\n    }\n    getElemByValue(value) {\n        let elem = [];\n        for (let i = 0; i < value.length; i++) {\n            elem.push(this.ulElement.querySelector('[data-value =\"' + value[i] + '\"]'));\n        }\n        return elem;\n    }\n    updateLiCollection(index) {\n        let tempLi = [].slice.call(this.liCollections);\n        tempLi.splice(index, 1);\n        this.liCollections = tempLi;\n    }\n    selectAllItems(state, event) {\n        [].slice.call(this.getItems()).forEach((li) => {\n            if (!li.classList.contains(cssClass.disabled)) {\n                if (this.selectionSettings.showCheckbox) {\n                    let ele = li.getElementsByClassName('e-check')[0];\n                    if ((!ele && state) || (ele && !state)) {\n                        this.notify('updatelist', { li: li, module: 'listbox' });\n                        if (this.maximumSelectionLength >= this.list.querySelectorAll('.e-list-item span.e-check').length) {\n                            this.checkMaxSelection();\n                        }\n                    }\n                }\n                else {\n                    if (state) {\n                        li.classList.add(cssClass.selected);\n                    }\n                    else {\n                        li.classList.remove(cssClass.selected);\n                    }\n                }\n            }\n        });\n        this.updateSelectedOptions();\n        if (this.allowFiltering && this.selectionSettings.showCheckbox) {\n            let liEle = this.list.getElementsByTagName('li');\n            let index = 0;\n            if (state) {\n                for (index = 0; index < liEle.length; index++) {\n                    let dataValue1 = this.getFormattedValue(liEle[index].getAttribute('data-value'));\n                    if (!this.value.some((e) => e === dataValue1)) {\n                        this.value.push(this.getFormattedValue(liEle[index].getAttribute('data-value')));\n                    }\n                }\n            }\n            else {\n                for (index = 0; index < liEle.length; index++) {\n                    let dataValue2 = this.getFormattedValue(liEle[index].getAttribute('data-value'));\n                    this.value = this.value.filter((e) => e !== dataValue2);\n                }\n            }\n            if (document.querySelectorAll('ul').length < 2) {\n                this.updateMainList();\n            }\n        }\n        this.triggerChange(this.getSelectedItems(), event);\n    }\n    updateMainList() {\n        let mainList = this.mainList.querySelectorAll('.e-list-item');\n        let ulList = this.ulElement.querySelectorAll('.e-list-item');\n        let mainCount = mainList.length;\n        let ulEleCount = ulList.length;\n        if (this.selectionSettings.showCheckbox || (document.querySelectorAll('ul').length > 1 || mainCount !== ulEleCount)) {\n            let listindex = 0;\n            let valueindex = 0;\n            let count = 0;\n            for (listindex; listindex < mainCount;) {\n                if (this.value) {\n                    for (valueindex; valueindex < this.value.length; valueindex++) {\n                        if (mainList[listindex].getAttribute('data-value') === this.value[valueindex]) {\n                            count++;\n                        }\n                    }\n                }\n                if (!count && this.selectionSettings.showCheckbox) {\n                    mainList[listindex].getElementsByClassName('e-frame')[0].classList.remove('e-check');\n                }\n                if (document.querySelectorAll('ul').length > 1 && count && mainCount !== ulEleCount) {\n                    this.mainList.removeChild(this.mainList.getElementsByTagName('li')[listindex]);\n                    listindex = 0;\n                }\n                else {\n                    listindex++;\n                }\n                count = 0;\n                valueindex = 0;\n            }\n        }\n    }\n    wireEvents() {\n        let form = closest(this.element, 'form');\n        let wrapper = this.element.tagName === 'EJS-LISTBOX' ? this.element : this.list;\n        EventHandler.add(this.list, 'click', this.clickHandler, this);\n        EventHandler.add(wrapper, 'keydown', this.keyDownHandler, this);\n        EventHandler.add(wrapper, 'focusout', this.focusOutHandler, this);\n        this.wireToolbarEvent();\n        if (this.selectionSettings.showCheckbox) {\n            EventHandler.remove(document, 'mousedown', this.checkBoxSelectionModule.onDocumentClick);\n        }\n        if (this.fields.groupBy || this.element.querySelector('select>optgroup')) {\n            EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n        }\n        if (form) {\n            EventHandler.add(form, 'reset', this.formResetHandler, this);\n        }\n    }\n    wireToolbarEvent() {\n        if (this.toolbarSettings.items.length) {\n            EventHandler.add(this.getToolElem(), 'click', this.toolbarClickHandler, this);\n        }\n    }\n    unwireEvents() {\n        let form = closest(this.element, 'form');\n        let wrapper = this.element.tagName === 'EJS-LISTBOX' ? this.element : this.list;\n        EventHandler.remove(this.list, 'click', this.clickHandler);\n        EventHandler.remove(wrapper, 'keydown', this.keyDownHandler);\n        EventHandler.remove(wrapper, 'focusout', this.focusOutHandler);\n        if (this.allowFiltering && this.clearFilterIconElem) {\n            EventHandler.remove(this.clearFilterIconElem, 'click', this.clearText);\n        }\n        if (this.toolbarSettings.items.length) {\n            EventHandler.remove(this.getToolElem(), 'click', this.toolbarClickHandler);\n        }\n        if (form) {\n            EventHandler.remove(form, 'reset', this.formResetHandler);\n        }\n    }\n    clickHandler(e) {\n        this.selectHandler(e);\n    }\n    ;\n    checkSelectAll() {\n        let searchCount = 0;\n        let liItems = this.list.querySelectorAll('li.' + dropDownBaseClasses.li);\n        for (let i = 0; i < liItems.length; i++) {\n            if (!liItems[i].classList.contains('e-disabled')) {\n                searchCount++;\n            }\n        }\n        let len = this.getSelectedItems().length;\n        if (this.showSelectAll && searchCount) {\n            this.notify('checkSelectAll', { module: 'CheckBoxSelection',\n                value: (searchCount === len) ? 'check' : (len === 0) ? 'uncheck' : 'indeterminate' });\n        }\n    }\n    getQuery(query) {\n        let filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n        if (this.allowFiltering) {\n            let filterType = this.inputString === '' ? 'contains' : this.filterType;\n            let dataType = this.typeOfData(this.dataSource).typeof;\n            if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n                filterQuery.where('', filterType, this.inputString, this.ignoreCase, this.ignoreAccent);\n            }\n            else {\n                let fields = (this.fields.text) ? this.fields.text : '';\n                filterQuery.where(fields, filterType, this.inputString, this.ignoreCase, this.ignoreAccent);\n            }\n        }\n        else {\n            filterQuery = query ? query : this.query ? this.query : new Query();\n        }\n        return filterQuery;\n    }\n    setFiltering() {\n        let filterInputObj;\n        if (isNullOrUndefined(this.filterParent)) {\n            if (isBlazor() && this.isServerRendered) {\n                this.filterParent = this.list.querySelector('.e-filter-parent');\n                this.filterInput = this.list.querySelector('.e-input-filter');\n            }\n            else {\n                this.filterParent = this.createElement('span', {\n                    className: listBoxClasses.filterParent\n                });\n                this.filterInput = this.createElement('input', {\n                    attrs: { type: 'text' },\n                    className: listBoxClasses.filterInput\n                });\n                this.element.parentNode.insertBefore(this.filterInput, this.element);\n                if (Browser.isDevice) {\n                    \n                }\n                filterInputObj = Input.createInput({\n                    element: this.filterInput,\n                    buttons: [listBoxClasses.filterBarClearIcon],\n                    properties: { placeholder: this.filterBarPlaceholder }\n                }, this.createElement);\n                append([filterInputObj.container], this.filterParent);\n                prepend([this.filterParent], this.list);\n                attributes(this.filterInput, {\n                    'aria-disabled': 'false',\n                    'aria-owns': this.element.id + '_options',\n                    'role': 'listbox',\n                    'aria-activedescendant': null,\n                    'autocomplete': 'off',\n                    'autocorrect': 'off',\n                    'autocapitalize': 'off',\n                    'spellcheck': 'false'\n                });\n            }\n            if (this.height.toString().indexOf('%') < 0) {\n                addClass([this.list], 'e-filter-list');\n            }\n            this.inputString = this.filterInput.value;\n            this.filterWireEvents();\n            return filterInputObj;\n        }\n    }\n    filterWireEvents(filterElem) {\n        if (filterElem) {\n            this.filterInput = filterElem.querySelector('.e-input-filter');\n        }\n        this.clearFilterIconElem = this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon);\n        if (this.clearFilterIconElem) {\n            EventHandler.add(this.clearFilterIconElem, 'click', this.clearText, this);\n            if (!filterElem) {\n                this.clearFilterIconElem.style.visibility = 'hidden';\n            }\n        }\n        EventHandler.add(this.filterInput, 'input', this.onInput, this);\n        EventHandler.add(this.filterInput, 'keyup', this.KeyUp, this);\n        EventHandler.add(this.filterInput, 'keydown', this.onKeyDown, this);\n    }\n    selectHandler(e, isKey) {\n        let isSelect = true;\n        let currSelIdx;\n        let li = closest(e.target, '.' + 'e-list-item');\n        let selectedLi = [li];\n        if (li) {\n            currSelIdx = [].slice.call(li.parentElement.children).indexOf(li);\n            if (!this.selectionSettings.showCheckbox) {\n                if ((e.ctrlKey || Browser.isDevice) && this.isSelected(li)) {\n                    li.classList.remove(cssClass.selected);\n                    li.removeAttribute('aria-selected');\n                    isSelect = false;\n                }\n                else if (!(this.selectionSettings.mode === 'Multiple' && (e.ctrlKey || Browser.isDevice))) {\n                    this.getSelectedItems().forEach((ele) => {\n                        ele.removeAttribute('aria-selected');\n                    });\n                    removeClass(this.getSelectedItems(), cssClass.selected);\n                }\n            }\n            else {\n                isSelect = !li.getElementsByClassName('e-frame')[0].classList.contains('e-check');\n            }\n            if (e.shiftKey && !this.selectionSettings.showCheckbox && this.selectionSettings.mode !== 'Single') {\n                selectedLi = [].slice.call(li.parentElement.children)\n                    .slice(Math.min(currSelIdx, this.prevSelIdx), Math.max(currSelIdx, this.prevSelIdx) + 1)\n                    .filter((ele) => { return ele.classList.contains('e-list-item'); });\n            }\n            else {\n                this.prevSelIdx = [].slice.call(li.parentElement.children).indexOf(li);\n            }\n            if (isSelect) {\n                if (!this.selectionSettings.showCheckbox) {\n                    addClass(selectedLi, cssClass.selected);\n                }\n                selectedLi.forEach((ele) => {\n                    ele.setAttribute('aria-selected', 'true');\n                });\n                this.list.setAttribute('aria-activedescendant', li.id);\n            }\n            if (!isKey && (this.maximumSelectionLength > (this.value && this.value.length) || !isSelect) &&\n                (this.maximumSelectionLength >= (this.value && this.value.length) || !isSelect) &&\n                !(this.maximumSelectionLength < (this.value && this.value.length))) {\n                this.notify('updatelist', { li: li, e: e, module: 'listbox' });\n            }\n            if (this.allowFiltering && !isKey) {\n                let liDataValue = this.getFormattedValue(li.getAttribute('data-value'));\n                if (!isSelect) {\n                    this.value = this.value.filter((value1) => value1 !== liDataValue);\n                }\n                else {\n                    let values = [];\n                    extend(values, this.value);\n                    values.push(liDataValue);\n                    this.value = values;\n                }\n                if (document.querySelectorAll('ul').length < 2) {\n                    this.updateMainList();\n                }\n            }\n            this.updateSelectedOptions();\n            this.triggerChange(this.getSelectedItems(), e);\n            this.checkMaxSelection();\n        }\n    }\n    triggerChange(selectedLis, event) {\n        this.trigger('change', { elements: selectedLis, items: this.getDataByElements(selectedLis), value: this.value, event: event });\n    }\n    getDataByElems(elems) {\n        let data = [];\n        for (let i = 0, len = elems.length; i < len; i++) {\n            data.push(this.getDataByValue(this.getFormattedValue(elems[i].getAttribute('data-value'))));\n        }\n        return data;\n    }\n    getDataByElements(elems) {\n        let data = [];\n        let value;\n        let sIdx = 0;\n        if (!isNullOrUndefined(this.listData)) {\n            let type = this.typeOfData(this.listData).typeof;\n            if (type === 'string' || type === 'number' || type === 'boolean') {\n                for (let item of this.listData) {\n                    for (let i = sIdx, len = elems.length; i < len; i++) {\n                        value = this.getFormattedValue(elems[i].getAttribute('data-value'));\n                        if (!isNullOrUndefined(item) && item === value) {\n                            sIdx = i;\n                            data.push(item);\n                            break;\n                        }\n                    }\n                    if (elems.length === data.length) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (let item of this.listData) {\n                    for (let i = sIdx, len = elems.length; i < len; i++) {\n                        value = this.getFormattedValue(elems[i].getAttribute('data-value'));\n                        if (!isNullOrUndefined(item) && getValue((this.fields.value ? this.fields.value : 'value'), item) === value) {\n                            sIdx = i;\n                            data.push(item);\n                            break;\n                        }\n                    }\n                    if (elems.length === data.length) {\n                        break;\n                    }\n                }\n            }\n            return data;\n        }\n        return null;\n    }\n    checkMaxSelection() {\n        let limit = this.list.querySelectorAll('.e-list-item span.e-check').length;\n        if (this.selectionSettings.showCheckbox) {\n            let index = 0;\n            let liCollElem;\n            liCollElem = this.list.getElementsByClassName('e-list-item');\n            for (index; index < liCollElem.length; index++) {\n                if (!liCollElem[index].querySelector('.e-frame.e-check')) {\n                    if (limit === this.maximumSelectionLength) {\n                        liCollElem[index].classList.add('e-disable');\n                    }\n                    else if (liCollElem[index].classList.contains('e-disable')) {\n                        liCollElem[index].classList.remove('e-disable');\n                    }\n                }\n            }\n        }\n    }\n    toolbarClickHandler(e) {\n        let btn = closest(e.target, 'button');\n        if (btn) {\n            this.toolbarAction = btn.getAttribute('data-value');\n            if (btn.disabled) {\n                return;\n            }\n            switch (this.toolbarAction) {\n                case 'moveUp':\n                    this.moveUpDown(true);\n                    break;\n                case 'moveDown':\n                    this.moveUpDown();\n                    break;\n                case 'moveTo':\n                    this.moveItemTo();\n                    break;\n                case 'moveFrom':\n                    this.moveItemFrom();\n                    break;\n                case 'moveAllTo':\n                    this.moveAllItemTo();\n                    break;\n                case 'moveAllFrom':\n                    this.moveAllItemFrom();\n                    break;\n            }\n        }\n    }\n    moveUpDown(isUp, isKey, value) {\n        let elems = this.getSelectedItems();\n        let tempItems;\n        if (value) {\n            elems = value;\n        }\n        if (((isUp && this.isSelected(this.ulElement.firstElementChild))\n            || (!isUp && this.isSelected(this.ulElement.lastElementChild))) && !value) {\n            return;\n        }\n        tempItems = this.getDataByElems(elems);\n        let localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };\n        this.trigger('actionBegin', localDataArgs);\n        if (localDataArgs.cancel) {\n            return;\n        }\n        (isUp ? elems : elems.reverse()).forEach((ele) => {\n            let jsonToIdx = Array.prototype.indexOf.call(this.ulElement.querySelectorAll('.e-list-item'), ele);\n            let idx = Array.prototype.indexOf.call(this.ulElement.children, ele);\n            moveTo(this.ulElement, this.ulElement, [idx], isUp ? idx - 1 : idx + 2);\n            this.changeData(idx, isUp ? idx - 1 : idx + 1, isUp ? jsonToIdx - 1 : jsonToIdx + 1, ele);\n        });\n        this.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n        elems[0].focus();\n        if (!isKey && this.toolbarSettings.items.length) {\n            this.getToolElem().querySelector('[data-value=' + (isUp ? 'moveUp' : 'moveDown') + ']').focus();\n        }\n        this.updateToolBarState();\n    }\n    moveItemTo() {\n        this.moveData(this, this.getScopedListBox());\n    }\n    moveItemFrom() {\n        this.moveData(this.getScopedListBox(), this);\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @returns void\n     * @private\n     */\n    // tslint:disable-next-line:max-func-body-length\n    moveData(fListBox, tListBox, isKey, value, index) {\n        let idx = [];\n        let dataIdx = [];\n        let jsonIdx = [];\n        let sortIdx = [];\n        let listData = [].slice.call(fListBox.listData);\n        let tListData = [].slice.call(tListBox.listData);\n        let sortData = [].slice.call(fListBox.sortedData);\n        let tSortData = [].slice.call(tListBox.sortedData);\n        let fliCollections = [].slice.call(fListBox.liCollections);\n        let dataLiIdx = [];\n        let tliCollections = [].slice.call(tListBox.liCollections);\n        let tempItems = [];\n        let data = [];\n        let elems = fListBox.getSelectedItems();\n        if (value) {\n            elems = value;\n        }\n        let isRefresh = tListBox.sortOrder !== 'None' ||\n            (tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox) || tListBox.fields.groupBy;\n        fListBox.value = [];\n        if (elems.length) {\n            this.removeSelected(fListBox, elems);\n            elems.forEach((ele, i) => {\n                idx.push(Array.prototype.indexOf.call(fListBox.ulElement.children, ele)); // update sortable elem\n                // To update lb view data\n                dataLiIdx.push(Array.prototype.indexOf.call(fListBox.ulElement.querySelectorAll('.e-list-item'), ele));\n                // To update lb listdata data\n                dataIdx.push(Array.prototype.indexOf.call(fListBox.listData, fListBox.getDataByElems([ele])[0]));\n                // To update lb sorted data\n                sortIdx.push(Array.prototype.indexOf.call(fListBox.sortedData, fListBox.getDataByElems([ele])[0]));\n                // To update lb original data\n                jsonIdx.push(Array.prototype.indexOf.call(fListBox.jsonData, fListBox.getDataByElems([ele])[0]));\n            });\n            if (this.sortOrder !== 'None') {\n                sortIdx.forEach((i) => {\n                    tempItems.push(fListBox.sortedData[i]);\n                });\n            }\n            else {\n                jsonIdx.forEach((i) => {\n                    tempItems.push(fListBox.jsonData[i]);\n                });\n            }\n            let localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };\n            fListBox.trigger('actionBegin', localDataArgs);\n            if (localDataArgs.cancel) {\n                return;\n            }\n            if (!isBlazor()) {\n                let rLiCollection = [];\n                dataLiIdx.sort((n1, n2) => n1 - n2).reverse().forEach((i) => {\n                    rLiCollection.push(fliCollections.splice(i, 1)[0]);\n                });\n                fListBox.liCollections = fliCollections;\n                if (index) {\n                    let toColl = tliCollections.splice(0, index);\n                    tListBox.liCollections = toColl.concat(rLiCollection.reverse()).concat(tliCollections);\n                }\n                else {\n                    tListBox.liCollections = tliCollections.concat(rLiCollection.reverse());\n                }\n                if (tListBox.listData.length === 0) {\n                    let noRecElem = tListBox.ulElement.getElementsByClassName('e-list-nrt')[0];\n                    if (noRecElem) {\n                        tListBox.ulElement.removeChild(noRecElem);\n                    }\n                }\n            }\n            dataIdx.sort((n1, n2) => n2 - n1).forEach((i) => {\n                listData.splice(i, 1)[0];\n            });\n            sortIdx.sort((n1, n2) => n2 - n1).forEach((i) => {\n                sortData.splice(i, 1)[0];\n            });\n            jsonIdx.slice().reverse().forEach((i) => {\n                data.push(fListBox.jsonData.splice(i, 1)[0]);\n            });\n            if (!isBlazor()) {\n                if (isRefresh) {\n                    if (fListBox.fields.groupBy) {\n                        fListBox.ulElement.innerHTML = fListBox.renderItems(listData, fListBox.fields).innerHTML;\n                    }\n                    else {\n                        elems.forEach((ele) => { detach(ele); });\n                    }\n                }\n                else {\n                    moveTo(fListBox.ulElement, tListBox.ulElement, idx, index);\n                    fListBox.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n                }\n                if (tListBox.mainList.childElementCount !== tListBox.jsonData.length) {\n                    tListBox.mainList = tListBox.ulElement;\n                }\n                fListBox.updateMainList();\n            }\n            let tJsonData = [].slice.call(tListBox.jsonData);\n            tSortData = [].slice.call(tListBox.sortedData);\n            if (!isBlazor()) {\n                this.selectNextList(elems, dataLiIdx, dataIdx, fListBox);\n            }\n            if (isKey) {\n                this.list.focus();\n            }\n            fListBox.listData = listData;\n            fListBox.sortedData = sortData;\n            index = (index) ? index : tListData.length;\n            for (let i = tempItems.length - 1; i >= 0; i--) {\n                tListData.splice(index, 0, tempItems[i]);\n                tJsonData.splice(index, 0, tempItems[i]);\n                tSortData.splice(index, 0, tempItems[i]);\n            }\n            tListBox.listData = tListData;\n            tListBox.jsonData = tJsonData;\n            tListBox.sortedData = tSortData;\n            if (isBlazor()) {\n                // tslint:disable\n                fListBox.interopAdaptor.invokeMethodAsync('UpdateListData', fListBox.listData).then(() => {\n                    fListBox.updateBlazorListData(null, true);\n                    this.selectNextList(elems, dataLiIdx, dataIdx, fListBox);\n                    fListBox.updateSelectedOptions();\n                });\n                tListBox.interopAdaptor.invokeMethodAsync('UpdateListData', tListBox.listData).then(() => {\n                    if (isRefresh) {\n                        tListBox.setSelection();\n                    }\n                    tListBox.updateBlazorListData(null, true);\n                    fListBox.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n                });\n                // tslint:enable\n            }\n            else {\n                if (isRefresh) {\n                    tListBox.ulElement.innerHTML = tListBox.renderItems(tListData, tListBox.fields).innerHTML;\n                    tListBox.setSelection();\n                }\n                fListBox.updateSelectedOptions();\n            }\n            if (fListBox.listData.length === 0) {\n                // tslint:disable-next-line\n                fListBox.l10nUpdate();\n            }\n        }\n        if (fListBox.value.length === 1 && fListBox.getSelectedItems().length) {\n            fListBox.value[0] = fListBox.getFormattedValue(fListBox.getSelectedItems()[0].getAttribute('data-value'));\n        }\n    }\n    selectNextList(elems, dataLiIdx, dataIdx, inst) {\n        let childCnt = inst.ulElement.querySelectorAll('.e-list-item').length;\n        let ele;\n        let liIdx;\n        let validIdx = -1;\n        if (elems.length === 1 && childCnt && !inst.selectionSettings.showCheckbox) {\n            liIdx = childCnt <= dataLiIdx[0] ? childCnt - 1 : dataLiIdx[0];\n            ele = inst.ulElement.querySelectorAll('.e-list-item')[liIdx];\n            validIdx = inst.getValidIndex(ele, liIdx, childCnt === dataIdx[0] ? 38 : 40);\n            if (validIdx > -1) {\n                (inst.ulElement.querySelectorAll('.e-list-item')[validIdx].classList.add(cssClass.selected));\n            }\n        }\n    }\n    moveAllItemTo() {\n        this.moveAllData(this, this.getScopedListBox());\n    }\n    moveAllItemFrom() {\n        this.moveAllData(this.getScopedListBox(), this);\n    }\n    moveAllData(fListBox, tListBox, isKey, index) {\n        let listData = [].slice.call(tListBox.listData);\n        let jsonData = [].slice.call(tListBox.jsonData);\n        let isRefresh = tListBox.sortOrder !== 'None' ||\n            (tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox) || tListBox.fields.groupBy;\n        this.removeSelected(fListBox, fListBox.getSelectedItems());\n        let tempItems = [].slice.call(fListBox.jsonData);\n        let localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };\n        fListBox.trigger('actionBegin', localDataArgs);\n        if (localDataArgs.cancel) {\n            return;\n        }\n        if (!isBlazor()) {\n            if (tListBox.listData.length === 0) {\n                let noRecElem = tListBox.ulElement.getElementsByClassName('e-list-nrt')[0];\n                if (noRecElem) {\n                    tListBox.ulElement.removeChild(noRecElem);\n                }\n            }\n            if (isRefresh) {\n                let noRecElem = fListBox.ulElement.getElementsByClassName('e-list-nrt')[0];\n                if (noRecElem) {\n                    fListBox.ulElement.removeChild(noRecElem);\n                }\n            }\n            else {\n                moveTo(fListBox.ulElement, tListBox.ulElement, Array.apply(null, { length: fListBox.ulElement.childElementCount }).map(Number.call, Number), index);\n                this.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n            }\n        }\n        if (isKey) {\n            this.list.focus();\n        }\n        index = (index) ? index : listData.length;\n        for (let i = 0; i < fListBox.listData.length; i++) {\n            listData.splice(index + i, 0, fListBox.listData[i]);\n        }\n        for (let i = 0; i < fListBox.jsonData.length; i++) {\n            jsonData.splice(index + i, 0, fListBox.jsonData[i]);\n        }\n        if (!isBlazor()) {\n            let fliCollections = [].slice.call(fListBox.liCollections);\n            let tliCollections = [].slice.call(tListBox.liCollections);\n            fListBox.liCollections = [];\n            if (index) {\n                let toColl = tliCollections.splice(0, index);\n                tListBox.liCollections = toColl.concat(fliCollections).concat(tliCollections);\n            }\n            else {\n                tListBox.liCollections = tliCollections.concat(fliCollections);\n            }\n        }\n        fListBox.value = [];\n        listData = listData\n            .filter((data) => data.isHeader !== true);\n        tListBox.listData = listData;\n        tListBox.jsonData = jsonData;\n        fListBox.listData = fListBox.sortedData = fListBox.jsonData = [];\n        if (isBlazor()) {\n            if (!isRefresh) {\n                tListBox.sortedData = listData;\n            }\n            // tslint:disable\n            fListBox.interopAdaptor.invokeMethodAsync('UpdateListData', fListBox.listData).then(() => {\n                fListBox.updateBlazorListData(null, true);\n                fListBox.updateSelectedOptions();\n            });\n            tListBox.interopAdaptor.invokeMethodAsync('UpdateListData', tListBox.listData).then(() => {\n                tListBox.updateBlazorListData(null, true);\n                fListBox.updateSelectedOptions();\n                fListBox.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n            });\n            // tslint:enable\n        }\n        else {\n            if (isRefresh) {\n                tListBox.ulElement.innerHTML = tListBox.renderItems(listData, tListBox.fields).innerHTML;\n                this.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n            }\n            else {\n                tListBox.sortedData = listData;\n            }\n            fListBox.updateSelectedOptions();\n        }\n        if (fListBox.listData.length === 0) {\n            // tslint:disable-next-line\n            fListBox.l10nUpdate();\n        }\n    }\n    changeData(fromIdx, toIdx, jsonToIdx, ele) {\n        let listData = [].slice.call(this.listData);\n        let jsonData = [].slice.call(this.jsonData);\n        let sortData = [].slice.call(this.sortedData);\n        let jsonIdx = Array.prototype.indexOf.call(this.jsonData, this.getDataByElems([ele])[0]);\n        let sortIdx = Array.prototype.indexOf.call(this.sortedData, this.getDataByElems([ele])[0]);\n        let liColl = [].slice.call(this.liCollections);\n        listData.splice(toIdx, 0, listData.splice(fromIdx, 1)[0]);\n        jsonData.splice(jsonToIdx, 0, jsonData.splice(jsonIdx, 1)[0]);\n        sortData.splice(toIdx, 0, sortData.splice(sortIdx, 1)[0]);\n        liColl.splice(toIdx, 0, liColl.splice(fromIdx, 1)[0]);\n        this.listData = listData;\n        this.jsonData = jsonData;\n        this.liCollections = liColl;\n        this.sortedData = sortData;\n    }\n    getSelectedItems() {\n        let ele = [];\n        if (this.selectionSettings.showCheckbox) {\n            [].slice.call(this.ulElement.getElementsByClassName('e-check')).forEach((cbox) => {\n                ele.push(closest(cbox, '.' + 'e-list-item'));\n            });\n        }\n        else {\n            ele = [].slice.call(this.ulElement.getElementsByClassName(cssClass.selected));\n        }\n        return ele;\n    }\n    getScopedListBox() {\n        let listObj;\n        if (this.scope) {\n            [].slice.call(document.querySelectorAll(this.scope)).forEach((ele) => {\n                if (getComponent(ele, this.getModuleName())) {\n                    listObj = getComponent(ele, this.getModuleName());\n                }\n            });\n        }\n        return listObj;\n    }\n    getDragArgs(args, isDragEnd) {\n        let elems = this.getSelectedItems();\n        if (elems.length) {\n            elems.pop();\n            if (isDragEnd) {\n                elems.push(args.target);\n            }\n        }\n        else {\n            elems = [args.target];\n        }\n        if (isBlazor()) {\n            return { elements: elems, items: this.getDataByElems(elems), bindEvents: args.bindEvents,\n                dragElement: args.dragElement };\n        }\n        else {\n            return { elements: elems, items: this.getDataByElems(elems) };\n        }\n    }\n    onKeyDown(e) {\n        this.keyDownHandler(e);\n        event.stopPropagation();\n    }\n    keyDownHandler(e) {\n        if ([32, 35, 36, 37, 38, 39, 40, 65].indexOf(e.keyCode) > -1 && !this.allowFiltering) {\n            e.preventDefault();\n            if (e.keyCode === 32 && this.ulElement.children.length) {\n                this.selectHandler({\n                    target: this.ulElement.getElementsByClassName('e-focused')[0],\n                    ctrlKey: e.ctrlKey, shiftKey: e.shiftKey\n                });\n            }\n            else if (e.keyCode === 65 && e.ctrlKey) {\n                this.selectAll();\n            }\n            else if ((e.keyCode === 38 || e.keyCode === 40) && e.ctrlKey && e.shiftKey) {\n                this.moveUpDown(e.keyCode === 38 ? true : false, true);\n            }\n            else if ((this.toolbarSettings.items.length || this.tBListBox) && (e.keyCode === 39 || e.keyCode === 37) && e.ctrlKey) {\n                let listObj = this.tBListBox || this.getScopedListBox();\n                if (e.keyCode === 39) {\n                    e.shiftKey ? this.moveAllData(this, listObj, true) : this.moveData(this, listObj, true);\n                }\n                else {\n                    e.shiftKey ? this.moveAllData(listObj, this, true) : this.moveData(listObj, this, true);\n                }\n            }\n            else if (e.keyCode !== 37 && e.keyCode !== 39) {\n                this.upDownKeyHandler(e);\n            }\n        }\n        else if (this.allowFiltering) {\n            if (e.keyCode === 40 || e.keyCode === 38) {\n                this.upDownKeyHandler(e);\n            }\n        }\n    }\n    upDownKeyHandler(e) {\n        let ul = this.ulElement;\n        let defaultIdx = (e.keyCode === 40 || e.keyCode === 36) ? 0 : ul.childElementCount - 1;\n        let fliIdx = defaultIdx;\n        let fli = ul.getElementsByClassName('e-focused')[0] || ul.getElementsByClassName(cssClass.selected)[0];\n        if (fli) {\n            if (e.keyCode !== 35 && e.keyCode !== 36) {\n                fliIdx = Array.prototype.indexOf.call(ul.children, fli);\n                e.keyCode === 40 ? fliIdx++ : fliIdx--;\n                if (fliIdx < 0 || fliIdx > ul.childElementCount - 1) {\n                    return;\n                }\n            }\n            removeClass([fli], 'e-focused');\n        }\n        let cli = ul.children[fliIdx];\n        if (cli) {\n            fliIdx = this.getValidIndex(cli, fliIdx, e.keyCode);\n            if (fliIdx === -1) {\n                addClass([fli], 'e-focused');\n                return;\n            }\n            ul.children[fliIdx].focus();\n            ul.children[fliIdx].classList.add('e-focused');\n            if (!e.ctrlKey) {\n                this.selectHandler({ target: ul.children[fliIdx], ctrlKey: e.ctrlKey, shiftKey: e.shiftKey }, true);\n            }\n        }\n    }\n    KeyUp(e) {\n        let char = String.fromCharCode(e.keyCode);\n        let isWordCharacter = char.match(/\\w/);\n        if (!isNullOrUndefined(isWordCharacter)) {\n            this.isValidKey = true;\n        }\n        this.isValidKey = (e.keyCode === 8) || this.isValidKey;\n        if (this.isValidKey) {\n            this.isValidKey = false;\n            switch (e.keyCode) {\n                default:\n                    let text = this.targetElement();\n                    let keyCode = e.keyCode;\n                    if (this.allowFiltering) {\n                        let eventArgsData = {\n                            preventDefaultAction: false,\n                            text: this.targetElement(),\n                            updateData: (dataSource, query, fields) => {\n                                if (eventArgsData.cancel) {\n                                    return;\n                                }\n                                this.isFiltered = true;\n                                this.remoteFilterAction = true;\n                                this.dataUpdater(dataSource, query, fields);\n                            },\n                            event: e,\n                            cancel: false\n                        };\n                        this.trigger('filtering', eventArgsData, (args) => {\n                            this.isDataFetched = false;\n                            if (eventArgsData.cancel || (this.filterInput.value !== '' && this.isFiltered)) {\n                                return;\n                            }\n                            if (!eventArgsData.cancel && !this.isCustomFiltering && !eventArgsData.preventDefaultAction) {\n                                this.inputString = this.filterInput.value;\n                                this.filteringAction(this.jsonData, new Query(), this.fields);\n                            }\n                            if (!this.isFiltered && !this.isCustomFiltering && !eventArgsData.preventDefaultAction) {\n                                this.dataUpdater(this.jsonData, new Query(), this.fields);\n                            }\n                        });\n                    }\n            }\n        }\n    }\n    /**\n     * To filter the data from given data source by using query\n     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param  {Query} query - Specify the query to filter the data.\n     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @return {void}.\n     */\n    filter(dataSource, query, fields) {\n        this.isCustomFiltering = true;\n        this.filteringAction(dataSource, query, fields);\n    }\n    filteringAction(dataSource, query, fields) {\n        this.resetList(dataSource, fields, query);\n    }\n    targetElement() {\n        this.targetInputElement = this.list.getElementsByClassName('e-input-filter')[0];\n        return this.targetInputElement.value;\n    }\n    dataUpdater(dataSource, query, fields) {\n        this.isDataFetched = false;\n        let backCommand = true;\n        if (this.targetElement().trim() === '') {\n            let list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n            if (backCommand) {\n                this.remoteCustomValue = false;\n                this.onActionComplete(list, this.jsonData);\n                this.notify('reOrder', { module: 'CheckBoxSelection', enable: this.selectionSettings.showCheckbox, e: this });\n            }\n        }\n        else {\n            this.resetList(dataSource, fields, query);\n        }\n    }\n    focusOutHandler() {\n        let ele = this.list.getElementsByClassName('e-focused')[0];\n        if (ele) {\n            ele.classList.remove('e-focused');\n        }\n        if (this.allowFiltering) {\n            this.refreshClearIcon();\n        }\n    }\n    getValidIndex(cli, index, keyCode) {\n        let cul = this.ulElement;\n        if (cli.classList.contains('e-disabled') || cli.classList.contains(cssClass.group)) {\n            (keyCode === 40 || keyCode === 36) ? index++ : index--;\n        }\n        if (index < 0 || index === cul.childElementCount) {\n            return -1;\n        }\n        cli = cul.querySelectorAll('.e-list-item')[index];\n        if (cli.classList.contains('e-disabled') || cli.classList.contains(cssClass.group)) {\n            index = this.getValidIndex(cli, index, keyCode);\n        }\n        return index;\n    }\n    updateSelectedOptions() {\n        let selectedOptions = [];\n        let values = [];\n        extend(values, this.value);\n        this.getSelectedItems().forEach((ele) => {\n            if (!ele.classList.contains('e-grabbed')) {\n                selectedOptions.push(this.getFormattedValue(ele.getAttribute('data-value')));\n            }\n        });\n        if (this.mainList.childElementCount === this.ulElement.childElementCount) {\n            if (this.allowFiltering && this.selectionSettings.showCheckbox) {\n                for (let i = 0; i < selectedOptions.length; i++) {\n                    if (values.indexOf(selectedOptions[i]) > -1) {\n                        continue;\n                    }\n                    else {\n                        values.push(selectedOptions[i]);\n                    }\n                }\n                this.setProperties({ value: values }, true);\n            }\n            else {\n                this.setProperties({ value: selectedOptions }, true);\n            }\n        }\n        this.updateSelectTag();\n        this.updateToolBarState();\n        if (this.tBListBox) {\n            this.tBListBox.updateToolBarState();\n        }\n    }\n    clearSelection(values = this.value) {\n        if (this.selectionSettings.showCheckbox) {\n            let dvalue;\n            this.getSelectedItems().forEach((li) => {\n                dvalue = this.getFormattedValue(li.getAttribute('data-value'));\n                if (values.indexOf(dvalue) < 0) {\n                    li.getElementsByClassName('e-check')[0].classList.remove('e-check');\n                    li.getElementsByClassName('e-checkbox-wrapper')[0].removeAttribute('aria-checked');\n                    li.removeAttribute('aria-selected');\n                }\n            });\n        }\n    }\n    ;\n    setSelection(values = this.value, isSelect = true, isText = false) {\n        let li;\n        let liselect;\n        if (values) {\n            values.forEach((value) => {\n                let text;\n                if (isText) {\n                    if (isBlazor() && typeof (value) === 'object') {\n                        text = value[this.fields.text || 'text'];\n                        if (isNullOrUndefined(text)) {\n                            return;\n                        }\n                        text = this.getValueByText(text);\n                    }\n                    else {\n                        text = this.getValueByText(value);\n                    }\n                }\n                else {\n                    text = value;\n                }\n                li = this.list.querySelector('[data-value=\"' + text + '\"]');\n                if (li) {\n                    if (this.selectionSettings.showCheckbox) {\n                        liselect = li.getElementsByClassName('e-frame')[0].classList.contains('e-check');\n                    }\n                    else {\n                        liselect = li.classList.contains('e-selected');\n                    }\n                    if (!isSelect && liselect || isSelect && !liselect && li) {\n                        if (this.selectionSettings.showCheckbox) {\n                            this.notify('updatelist', { li: li, module: 'listbox' });\n                        }\n                        else {\n                            if (isSelect) {\n                                li.classList.add(cssClass.selected);\n                                li.setAttribute('aria-selected', 'true');\n                            }\n                            else {\n                                li.classList.remove(cssClass.selected);\n                                li.removeAttribute('aria-selected');\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        this.updateSelectTag();\n    }\n    updateSelectTag() {\n        let ele = this.getSelectTag();\n        let innerHTML = '';\n        ele.innerHTML = '';\n        if (this.value) {\n            for (let i = 0, len = this.value.length; i < len; i++) {\n                innerHTML += '<option selected value=\"' + this.value[i] + '\"></option>';\n            }\n            ele.innerHTML += innerHTML;\n        }\n        this.checkSelectAll();\n    }\n    checkDisabledState(inst) {\n        return (isBlazor() ? inst.ulElement.querySelectorAll('.' + cssClass.li).length : inst.ulElement.childElementCount) === 0;\n    }\n    updateToolBarState() {\n        if (this.toolbarSettings.items.length) {\n            let listObj = this.getScopedListBox();\n            let wrap = this.list.parentElement.getElementsByClassName('e-listbox-tool')[0];\n            this.toolbarSettings.items.forEach((value) => {\n                let btn = wrap.querySelector('[data-value=\"' + value + '\"]');\n                switch (value) {\n                    case 'moveAllTo':\n                        btn.disabled = this.checkDisabledState(this);\n                        break;\n                    case 'moveAllFrom':\n                        btn.disabled = this.checkDisabledState(listObj);\n                        break;\n                    case 'moveFrom':\n                        btn.disabled = listObj.value && listObj.value.length ? false : true;\n                        break;\n                    case 'moveUp':\n                        btn.disabled = this.value && this.value.length\n                            && !this.isSelected(this.ulElement.children[0]) ? false : true;\n                        break;\n                    case 'moveDown':\n                        btn.disabled = this.value && this.value.length\n                            && !this.isSelected(this.ulElement.children[this.ulElement.childElementCount - 1]) ? false : true;\n                        break;\n                    default:\n                        btn.disabled = this.value && this.value.length ? false : true;\n                        break;\n                }\n            });\n        }\n    }\n    setCheckboxPosition() {\n        let listWrap = this.list;\n        if (!this.initLoad && this.selectionSettings.checkboxPosition === 'Left') {\n            listWrap.classList.remove('e-right');\n        }\n        if (this.selectionSettings.checkboxPosition === 'Right') {\n            listWrap.classList.add('e-right');\n        }\n    }\n    showCheckbox(showCheckbox) {\n        let index = 0;\n        let liColl = this.list.lastElementChild.querySelectorAll('li');\n        let liCollLen = this.list.lastElementChild.getElementsByClassName('e-list-item').length;\n        if (showCheckbox) {\n            if (!isBlazor()) {\n                this.ulElement = this.renderItems(this.listData, this.fields);\n                this.mainList = this.ulElement;\n                this.list.removeChild(this.list.getElementsByTagName('ul')[0]);\n                this.list.appendChild(this.ulElement);\n            }\n            if (this.selectionSettings.showSelectAll && !this.list.getElementsByClassName('e-selectall-parent')[0]) {\n                let l10nShow = new L10n(this.getModuleName(), { selectAllText: 'Select All', unSelectAllText: 'Unselect All' }, this.locale);\n                this.showSelectAll = true;\n                this.selectAllText = l10nShow.getConstant('selectAllText');\n                this.unSelectAllText = l10nShow.getConstant('unSelectAllText');\n                this.popupWrapper = this.list;\n                this.checkBoxSelectionModule.checkAllParent = null;\n                this.notify('selectAll', {});\n                this.checkSelectAll();\n            }\n        }\n        else {\n            if (this.list.getElementsByClassName('e-selectall-parent')[0]) {\n                this.list.removeChild(this.list.getElementsByClassName('e-selectall-parent')[0]);\n            }\n            if (!isBlazor()) {\n                for (index; index < liCollLen; index++) {\n                    if (liColl[index].classList.contains('e-list-item')) {\n                        liColl[index].removeChild(liColl[index].getElementsByClassName('e-checkbox-wrapper')[0]);\n                    }\n                    if (liColl[index].hasAttribute('aria-selected')) {\n                        liColl[index].removeAttribute('aria-selected');\n                    }\n                }\n                this.mainList = this.ulElement;\n            }\n        }\n        this.value = [];\n    }\n    isSelected(ele) {\n        if (!isNullOrUndefined(ele)) {\n            return ele.classList.contains(cssClass.selected) || ele.querySelector('.e-check') !== null;\n        }\n        else {\n            return false;\n        }\n    }\n    getSelectTag() {\n        return this.list.getElementsByClassName('e-hidden-select')[0];\n    }\n    getToolElem() {\n        return this.list.parentElement.getElementsByClassName('e-listbox-tool')[0];\n    }\n    formResetHandler() {\n        this.value = this.initialSelectedOptions;\n    }\n    /**\n     * Return the module name.\n     * @private\n     */\n    getModuleName() {\n        return 'listbox';\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     */\n    getPersistData() {\n        return this.addOnPersist(['value']);\n    }\n    getLocaleName() {\n        return 'listbox';\n    }\n    ;\n    destroy() {\n        if (this.itemTemplate) {\n            resetBlazorTemplate(`${this.element.id}${ITEMTEMPLATE_PROPERTY$1}`, ITEMTEMPLATE_PROPERTY$1);\n        }\n        this.unwireEvents();\n        if (this.element.tagName === 'EJS-LISTBOX') {\n            this.element.innerHTML = '';\n        }\n        else {\n            if (!isBlazor() || (isBlazor() && !this.isServerRendered)) {\n                this.element.style.display = 'inline-block';\n                if (this.toolbarSettings.items.length) {\n                    this.list.parentElement.parentElement.insertBefore(this.list, this.list.parentElement);\n                    detach(this.list.nextElementSibling);\n                }\n                this.list.parentElement.insertBefore(this.element, this.list);\n            }\n        }\n        if (!isBlazor() || (isBlazor() && !this.isServerRendered)) {\n            super.destroy();\n        }\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @returns void\n     * @private\n     */\n    // tslint:disable-next-line:max-func-body-length\n    onPropertyChanged(newProp, oldProp) {\n        let wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n        super.onPropertyChanged(newProp, oldProp);\n        this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([wrap], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([wrap], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        wrap.classList.add('e-rtl');\n                    }\n                    else {\n                        wrap.classList.remove('e-rtl');\n                    }\n                    break;\n                case 'value':\n                    removeClass(this.list.querySelectorAll('.' + cssClass.selected), cssClass.selected);\n                    this.clearSelection(this.value);\n                    this.setSelection();\n                    break;\n                case 'height':\n                    this.setHeight();\n                    break;\n                case 'enabled':\n                    this.setEnable();\n                    break;\n                case 'allowDragAndDrop':\n                    if (newProp.allowDragAndDrop) {\n                        this.initDraggable();\n                    }\n                    else {\n                        getComponent(this.ulElement, 'sortable').destroy();\n                    }\n                    break;\n                case 'allowFiltering':\n                    if (this.allowFiltering) {\n                        this.setFiltering();\n                    }\n                    else {\n                        this.list.removeChild(this.list.getElementsByClassName('e-filter-parent')[0]);\n                        this.filterParent = null;\n                        removeClass([this.list], 'e-filter-list');\n                    }\n                    break;\n                case 'filterBarPlaceholder':\n                    if (this.allowFiltering) {\n                        if (this.filterInput) {\n                            Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);\n                        }\n                    }\n                    break;\n                case 'scope':\n                    if (this.allowDragAndDrop) {\n                        getComponent(this.ulElement, 'sortable').scope = newProp.scope;\n                    }\n                    if (this.toolbarSettings.items.length) {\n                        if (oldProp.scope) {\n                            getComponent(document.querySelector(oldProp.scope), this.getModuleName())\n                                .tBListBox = null;\n                        }\n                        if (newProp.scope) {\n                            getComponent(document.querySelector(newProp.scope), this.getModuleName())\n                                .tBListBox = this;\n                        }\n                    }\n                    break;\n                case 'toolbarSettings':\n                    let ele;\n                    let pos = newProp.toolbarSettings.position;\n                    let toolElem = this.getToolElem();\n                    if (pos) {\n                        removeClass([wrap], ['e-right', 'e-left']);\n                        wrap.classList.add('e-' + pos.toLowerCase());\n                        if (pos === 'Left') {\n                            wrap.insertBefore(toolElem, this.list);\n                        }\n                        else {\n                            wrap.appendChild(toolElem);\n                        }\n                    }\n                    if (newProp.toolbarSettings.items) {\n                        if (oldProp.toolbarSettings.items.length) {\n                            ele = this.list.parentElement;\n                            ele.parentElement.insertBefore(this.list, ele);\n                            detach(ele);\n                        }\n                        this.initToolbarAndStyles();\n                        this.wireToolbarEvent();\n                    }\n                    break;\n                case 'selectionSettings':\n                    let showSelectAll = newProp.selectionSettings.showSelectAll;\n                    let showCheckbox = newProp.selectionSettings.showCheckbox;\n                    if (!isNullOrUndefined(showSelectAll)) {\n                        this.showSelectAll = showSelectAll;\n                        if (this.showSelectAll) {\n                            let l10nSel = new L10n(this.getModuleName(), { selectAllText: 'Select All', unSelectAllText: 'Unselect All' }, this.locale);\n                            this.checkBoxSelectionModule.checkAllParent = null;\n                            this.showSelectAll = true;\n                            this.selectAllText = l10nSel.getConstant('selectAllText');\n                            this.unSelectAllText = l10nSel.getConstant('selectAllText');\n                            this.popupWrapper = this.list;\n                        }\n                        this.notify('selectAll', {});\n                        this.checkSelectAll();\n                    }\n                    if (!isNullOrUndefined(showCheckbox)) {\n                        this.showCheckbox(showCheckbox);\n                    }\n                    if (this.selectionSettings.showCheckbox) {\n                        this.setCheckboxPosition();\n                    }\n                    break;\n                case 'dataSource':\n                    this.jsonData = [].slice.call(this.dataSource);\n                    break;\n            }\n        }\n    }\n};\n__decorate$6([\n    Property('')\n], ListBox.prototype, \"cssClass\", void 0);\n__decorate$6([\n    Property([])\n], ListBox.prototype, \"value\", void 0);\n__decorate$6([\n    Property('')\n], ListBox.prototype, \"height\", void 0);\n__decorate$6([\n    Property(false)\n], ListBox.prototype, \"allowDragAndDrop\", void 0);\n__decorate$6([\n    Property(1000)\n], ListBox.prototype, \"maximumSelectionLength\", void 0);\n__decorate$6([\n    Property(false)\n], ListBox.prototype, \"allowFiltering\", void 0);\n__decorate$6([\n    Property('')\n], ListBox.prototype, \"scope\", void 0);\n__decorate$6([\n    Property(true)\n], ListBox.prototype, \"ignoreCase\", void 0);\n__decorate$6([\n    Property(null)\n], ListBox.prototype, \"filterBarPlaceholder\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"beforeItemRender\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"filtering\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"select\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"change\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"beforeDrop\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"dragStart\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"drag\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"drop\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"dataBound\", void 0);\n__decorate$6([\n    Property(null)\n], ListBox.prototype, \"groupTemplate\", void 0);\n__decorate$6([\n    Property('No records found')\n], ListBox.prototype, \"noRecordsTemplate\", void 0);\n__decorate$6([\n    Property('Request failed')\n], ListBox.prototype, \"actionFailureTemplate\", void 0);\n__decorate$6([\n    Property(1000)\n], ListBox.prototype, \"zIndex\", void 0);\n__decorate$6([\n    Property(false)\n], ListBox.prototype, \"ignoreAccent\", void 0);\n__decorate$6([\n    Complex({}, ToolbarSettings)\n], ListBox.prototype, \"toolbarSettings\", void 0);\n__decorate$6([\n    Complex({}, SelectionSettings)\n], ListBox.prototype, \"selectionSettings\", void 0);\nListBox = ListBox_1 = __decorate$6([\n    NotifyPropertyChanges\n], ListBox);\nconst listBoxClasses = {\n    backIcon: 'e-input-group-icon e-back-icon e-icons',\n    filterBarClearIcon: 'e-input-group-icon e-clear-icon e-icons',\n    filterInput: 'e-input-filter',\n    filterParent: 'e-filter-parent',\n    clearIcon: 'e-clear-icon',\n};\n\n/**\n * export all modules from current location\n */\n\n/**\n * export all modules from current location\n */\n\nexport { incrementalSearch, Search, highlightSearch, revertHighlightSearch, FieldSettings, dropDownBaseClasses, DropDownBase, dropDownListClasses, DropDownList, Fields, TreeSettings, DropDownTree, ComboBox, AutoComplete, MultiSelect, CheckBoxSelection, createFloatLabel, updateFloatLabelState, removeFloating, setPlaceHolder, floatLabelFocus, floatLabelBlur, SelectionSettings, ToolbarSettings, ListBox };\n//# sourceMappingURL=ej2-dropdowns.es2015.js.map\n","/*!\n* sweetalert2 v8.17.1\n* Released under the MIT License.\n*/\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.Sweetalert2 = factory());\n}(this, (function () { 'use strict';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nvar consolePrefix = 'SweetAlert2:';\n/**\n * Filter the unique values into a new array\n * @param arr\n */\n\nvar uniqueArray = function uniqueArray(arr) {\n  var result = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n\n  return result;\n};\n/**\n * Returns the array ob object values (Object.values isn't supported in IE11)\n * @param obj\n */\n\nvar objectValues = function objectValues(obj) {\n  return Object.keys(obj).map(function (key) {\n    return obj[key];\n  });\n};\n/**\n * Convert NodeList to Array\n * @param nodeList\n */\n\nvar toArray = function toArray(nodeList) {\n  return Array.prototype.slice.call(nodeList);\n};\n/**\n * Standardise console warnings\n * @param message\n */\n\nvar warn = function warn(message) {\n  console.warn(\"\".concat(consolePrefix, \" \").concat(message));\n};\n/**\n * Standardise console errors\n * @param message\n */\n\nvar error = function error(message) {\n  console.error(\"\".concat(consolePrefix, \" \").concat(message));\n};\n/**\n * Private global state for `warnOnce`\n * @type {Array}\n * @private\n */\n\nvar previousWarnOnceMessages = [];\n/**\n * Show a console warning, but only if it hasn't already been shown\n * @param message\n */\n\nvar warnOnce = function warnOnce(message) {\n  if (!(previousWarnOnceMessages.indexOf(message) !== -1)) {\n    previousWarnOnceMessages.push(message);\n    warn(message);\n  }\n};\n/**\n * Show a one-time console warning about deprecated params/methods\n */\n\nvar warnAboutDepreation = function warnAboutDepreation(deprecatedParam, useInstead) {\n  warnOnce(\"\\\"\".concat(deprecatedParam, \"\\\" is deprecated and will be removed in the next major release. Please use \\\"\").concat(useInstead, \"\\\" instead.\"));\n};\n/**\n * If `arg` is a function, call it (with no arguments or context) and return the result.\n * Otherwise, just pass the value through\n * @param arg\n */\n\nvar callIfFunction = function callIfFunction(arg) {\n  return typeof arg === 'function' ? arg() : arg;\n};\nvar isPromise = function isPromise(arg) {\n  return arg && Promise.resolve(arg) === arg;\n};\n\nvar DismissReason = Object.freeze({\n  cancel: 'cancel',\n  backdrop: 'backdrop',\n  close: 'close',\n  esc: 'esc',\n  timer: 'timer'\n});\n\nvar argsToParams = function argsToParams(args) {\n  var params = {};\n\n  switch (_typeof(args[0])) {\n    case 'object':\n      _extends(params, args[0]);\n\n      break;\n\n    default:\n      ['title', 'html', 'type'].forEach(function (name, index) {\n        switch (_typeof(args[index])) {\n          case 'string':\n            params[name] = args[index];\n            break;\n\n          case 'undefined':\n            break;\n\n          default:\n            error(\"Unexpected type of \".concat(name, \"! Expected \\\"string\\\", got \").concat(_typeof(args[index])));\n        }\n      });\n  }\n\n  return params;\n};\n\nvar swalPrefix = 'swal2-';\nvar prefix = function prefix(items) {\n  var result = {};\n\n  for (var i in items) {\n    result[items[i]] = swalPrefix + items[i];\n  }\n\n  return result;\n};\nvar swalClasses = prefix(['container', 'shown', 'height-auto', 'iosfix', 'popup', 'modal', 'no-backdrop', 'toast', 'toast-shown', 'toast-column', 'fade', 'show', 'hide', 'noanimation', 'close', 'title', 'header', 'content', 'actions', 'confirm', 'cancel', 'footer', 'icon', 'image', 'input', 'file', 'range', 'select', 'radio', 'checkbox', 'label', 'textarea', 'inputerror', 'validation-message', 'progress-steps', 'active-progress-step', 'progress-step', 'progress-step-line', 'loading', 'styled', 'top', 'top-start', 'top-end', 'top-left', 'top-right', 'center', 'center-start', 'center-end', 'center-left', 'center-right', 'bottom', 'bottom-start', 'bottom-end', 'bottom-left', 'bottom-right', 'grow-row', 'grow-column', 'grow-fullscreen', 'rtl']);\nvar iconTypes = prefix(['success', 'warning', 'info', 'question', 'error']);\n\nvar states = {\n  previousBodyPadding: null\n};\nvar hasClass = function hasClass(elem, className) {\n  return elem.classList.contains(className);\n};\nvar applyCustomClass = function applyCustomClass(elem, customClass, className) {\n  // Clean up previous custom classes\n  toArray(elem.classList).forEach(function (className) {\n    if (!(objectValues(swalClasses).indexOf(className) !== -1) && !(objectValues(iconTypes).indexOf(className) !== -1)) {\n      elem.classList.remove(className);\n    }\n  });\n\n  if (customClass && customClass[className]) {\n    addClass(elem, customClass[className]);\n  }\n};\nfunction getInput(content, inputType) {\n  if (!inputType) {\n    return null;\n  }\n\n  switch (inputType) {\n    case 'select':\n    case 'textarea':\n    case 'file':\n      return getChildByClass(content, swalClasses[inputType]);\n\n    case 'checkbox':\n      return content.querySelector(\".\".concat(swalClasses.checkbox, \" input\"));\n\n    case 'radio':\n      return content.querySelector(\".\".concat(swalClasses.radio, \" input:checked\")) || content.querySelector(\".\".concat(swalClasses.radio, \" input:first-child\"));\n\n    case 'range':\n      return content.querySelector(\".\".concat(swalClasses.range, \" input\"));\n\n    default:\n      return getChildByClass(content, swalClasses.input);\n  }\n}\nvar focusInput = function focusInput(input) {\n  input.focus(); // place cursor at end of text in text input\n\n  if (input.type !== 'file') {\n    // http://stackoverflow.com/a/2345915\n    var val = input.value;\n    input.value = '';\n    input.value = val;\n  }\n};\nvar toggleClass = function toggleClass(target, classList, condition) {\n  if (!target || !classList) {\n    return;\n  }\n\n  if (typeof classList === 'string') {\n    classList = classList.split(/\\s+/).filter(Boolean);\n  }\n\n  classList.forEach(function (className) {\n    if (target.forEach) {\n      target.forEach(function (elem) {\n        condition ? elem.classList.add(className) : elem.classList.remove(className);\n      });\n    } else {\n      condition ? target.classList.add(className) : target.classList.remove(className);\n    }\n  });\n};\nvar addClass = function addClass(target, classList) {\n  toggleClass(target, classList, true);\n};\nvar removeClass = function removeClass(target, classList) {\n  toggleClass(target, classList, false);\n};\nvar getChildByClass = function getChildByClass(elem, className) {\n  for (var i = 0; i < elem.childNodes.length; i++) {\n    if (hasClass(elem.childNodes[i], className)) {\n      return elem.childNodes[i];\n    }\n  }\n};\nvar applyNumericalStyle = function applyNumericalStyle(elem, property, value) {\n  if (value || parseInt(value) === 0) {\n    elem.style[property] = typeof value === 'number' ? value + 'px' : value;\n  } else {\n    elem.style.removeProperty(property);\n  }\n};\nvar show = function show(elem) {\n  var display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flex';\n  elem.style.opacity = '';\n  elem.style.display = display;\n};\nvar hide = function hide(elem) {\n  elem.style.opacity = '';\n  elem.style.display = 'none';\n};\nvar toggle = function toggle(elem, condition, display) {\n  condition ? show(elem, display) : hide(elem);\n}; // borrowed from jquery $(elem).is(':visible') implementation\n\nvar isVisible = function isVisible(elem) {\n  return !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));\n};\nvar isScrollable = function isScrollable(elem) {\n  return !!(elem.scrollHeight > elem.clientHeight);\n}; // borrowed from https://stackoverflow.com/a/46352119\n\nvar hasCssAnimation = function hasCssAnimation(elem) {\n  var style = window.getComputedStyle(elem);\n  var animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');\n  var transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');\n  return animDuration > 0 || transDuration > 0;\n};\nvar contains = function contains(haystack, needle) {\n  if (typeof haystack.contains === 'function') {\n    return haystack.contains(needle);\n  }\n};\n\nvar getContainer = function getContainer() {\n  return document.body.querySelector('.' + swalClasses.container);\n};\nvar elementBySelector = function elementBySelector(selectorString) {\n  var container = getContainer();\n  return container ? container.querySelector(selectorString) : null;\n};\n\nvar elementByClass = function elementByClass(className) {\n  return elementBySelector('.' + className);\n};\n\nvar getPopup = function getPopup() {\n  return elementByClass(swalClasses.popup);\n};\nvar getIcons = function getIcons() {\n  var popup = getPopup();\n  return toArray(popup.querySelectorAll('.' + swalClasses.icon));\n};\nvar getIcon = function getIcon() {\n  var visibleIcon = getIcons().filter(function (icon) {\n    return isVisible(icon);\n  });\n  return visibleIcon.length ? visibleIcon[0] : null;\n};\nvar getTitle = function getTitle() {\n  return elementByClass(swalClasses.title);\n};\nvar getContent = function getContent() {\n  return elementByClass(swalClasses.content);\n};\nvar getImage = function getImage() {\n  return elementByClass(swalClasses.image);\n};\nvar getProgressSteps = function getProgressSteps() {\n  return elementByClass(swalClasses['progress-steps']);\n};\nvar getValidationMessage = function getValidationMessage() {\n  return elementByClass(swalClasses['validation-message']);\n};\nvar getConfirmButton = function getConfirmButton() {\n  return elementBySelector('.' + swalClasses.actions + ' .' + swalClasses.confirm);\n};\nvar getCancelButton = function getCancelButton() {\n  return elementBySelector('.' + swalClasses.actions + ' .' + swalClasses.cancel);\n};\nvar getActions = function getActions() {\n  return elementByClass(swalClasses.actions);\n};\nvar getHeader = function getHeader() {\n  return elementByClass(swalClasses.header);\n};\nvar getFooter = function getFooter() {\n  return elementByClass(swalClasses.footer);\n};\nvar getCloseButton = function getCloseButton() {\n  return elementByClass(swalClasses.close);\n}; // https://github.com/jkup/focusable/blob/master/index.js\n\nvar focusable = \"\\n  a[href],\\n  area[href],\\n  input:not([disabled]),\\n  select:not([disabled]),\\n  textarea:not([disabled]),\\n  button:not([disabled]),\\n  iframe,\\n  object,\\n  embed,\\n  [tabindex=\\\"0\\\"],\\n  [contenteditable],\\n  audio[controls],\\n  video[controls],\\n  summary\\n\";\nvar getFocusableElements = function getFocusableElements() {\n  var focusableElementsWithTabindex = toArray(getPopup().querySelectorAll('[tabindex]:not([tabindex=\"-1\"]):not([tabindex=\"0\"])')) // sort according to tabindex\n  .sort(function (a, b) {\n    a = parseInt(a.getAttribute('tabindex'));\n    b = parseInt(b.getAttribute('tabindex'));\n\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    }\n\n    return 0;\n  });\n  var otherFocusableElements = toArray(getPopup().querySelectorAll(focusable)).filter(function (el) {\n    return el.getAttribute('tabindex') !== '-1';\n  });\n  return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter(function (el) {\n    return isVisible(el);\n  });\n};\nvar isModal = function isModal() {\n  return !isToast() && !document.body.classList.contains(swalClasses['no-backdrop']);\n};\nvar isToast = function isToast() {\n  return document.body.classList.contains(swalClasses['toast-shown']);\n};\nvar isLoading = function isLoading() {\n  return getPopup().hasAttribute('data-loading');\n};\n\n// Detect Node env\nvar isNodeEnv = function isNodeEnv() {\n  return typeof window === 'undefined' || typeof document === 'undefined';\n};\n\nvar sweetHTML = \"\\n <div aria-labelledby=\\\"\".concat(swalClasses.title, \"\\\" aria-describedby=\\\"\").concat(swalClasses.content, \"\\\" class=\\\"\").concat(swalClasses.popup, \"\\\" tabindex=\\\"-1\\\">\\n   <div class=\\\"\").concat(swalClasses.header, \"\\\">\\n     <ul class=\\\"\").concat(swalClasses['progress-steps'], \"\\\"></ul>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.error, \"\\\">\\n       <span class=\\\"swal2-x-mark\\\"><span class=\\\"swal2-x-mark-line-left\\\"></span><span class=\\\"swal2-x-mark-line-right\\\"></span></span>\\n     </div>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.question, \"\\\"></div>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.warning, \"\\\"></div>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.info, \"\\\"></div>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.success, \"\\\">\\n       <div class=\\\"swal2-success-circular-line-left\\\"></div>\\n       <span class=\\\"swal2-success-line-tip\\\"></span> <span class=\\\"swal2-success-line-long\\\"></span>\\n       <div class=\\\"swal2-success-ring\\\"></div> <div class=\\\"swal2-success-fix\\\"></div>\\n       <div class=\\\"swal2-success-circular-line-right\\\"></div>\\n     </div>\\n     <img class=\\\"\").concat(swalClasses.image, \"\\\" />\\n     <h2 class=\\\"\").concat(swalClasses.title, \"\\\" id=\\\"\").concat(swalClasses.title, \"\\\"></h2>\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.close, \"\\\"></button>\\n   </div>\\n   <div class=\\\"\").concat(swalClasses.content, \"\\\">\\n     <div id=\\\"\").concat(swalClasses.content, \"\\\"></div>\\n     <input class=\\\"\").concat(swalClasses.input, \"\\\" />\\n     <input type=\\\"file\\\" class=\\\"\").concat(swalClasses.file, \"\\\" />\\n     <div class=\\\"\").concat(swalClasses.range, \"\\\">\\n       <input type=\\\"range\\\" />\\n       <output></output>\\n     </div>\\n     <select class=\\\"\").concat(swalClasses.select, \"\\\"></select>\\n     <div class=\\\"\").concat(swalClasses.radio, \"\\\"></div>\\n     <label for=\\\"\").concat(swalClasses.checkbox, \"\\\" class=\\\"\").concat(swalClasses.checkbox, \"\\\">\\n       <input type=\\\"checkbox\\\" />\\n       <span class=\\\"\").concat(swalClasses.label, \"\\\"></span>\\n     </label>\\n     <textarea class=\\\"\").concat(swalClasses.textarea, \"\\\"></textarea>\\n     <div class=\\\"\").concat(swalClasses['validation-message'], \"\\\" id=\\\"\").concat(swalClasses['validation-message'], \"\\\"></div>\\n   </div>\\n   <div class=\\\"\").concat(swalClasses.actions, \"\\\">\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.confirm, \"\\\">OK</button>\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.cancel, \"\\\">Cancel</button>\\n   </div>\\n   <div class=\\\"\").concat(swalClasses.footer, \"\\\">\\n   </div>\\n </div>\\n\").replace(/(^|\\n)\\s*/g, '');\n\nvar resetOldContainer = function resetOldContainer() {\n  var oldContainer = getContainer();\n\n  if (!oldContainer) {\n    return;\n  }\n\n  oldContainer.parentNode.removeChild(oldContainer);\n  removeClass([document.documentElement, document.body], [swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['has-column']]);\n};\n\nvar oldInputVal; // IE11 workaround, see #1109 for details\n\nvar resetValidationMessage = function resetValidationMessage(e) {\n  if (Swal.isVisible() && oldInputVal !== e.target.value) {\n    Swal.resetValidationMessage();\n  }\n\n  oldInputVal = e.target.value;\n};\n\nvar addInputChangeListeners = function addInputChangeListeners() {\n  var content = getContent();\n  var input = getChildByClass(content, swalClasses.input);\n  var file = getChildByClass(content, swalClasses.file);\n  var range = content.querySelector(\".\".concat(swalClasses.range, \" input\"));\n  var rangeOutput = content.querySelector(\".\".concat(swalClasses.range, \" output\"));\n  var select = getChildByClass(content, swalClasses.select);\n  var checkbox = content.querySelector(\".\".concat(swalClasses.checkbox, \" input\"));\n  var textarea = getChildByClass(content, swalClasses.textarea);\n  input.oninput = resetValidationMessage;\n  file.onchange = resetValidationMessage;\n  select.onchange = resetValidationMessage;\n  checkbox.onchange = resetValidationMessage;\n  textarea.oninput = resetValidationMessage;\n\n  range.oninput = function (e) {\n    resetValidationMessage(e);\n    rangeOutput.value = range.value;\n  };\n\n  range.onchange = function (e) {\n    resetValidationMessage(e);\n    range.nextSibling.value = range.value;\n  };\n};\n\nvar getTarget = function getTarget(target) {\n  return typeof target === 'string' ? document.querySelector(target) : target;\n};\n\nvar setupAccessibility = function setupAccessibility(params) {\n  var popup = getPopup();\n  popup.setAttribute('role', params.toast ? 'alert' : 'dialog');\n  popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');\n\n  if (!params.toast) {\n    popup.setAttribute('aria-modal', 'true');\n  }\n};\n\nvar setupRTL = function setupRTL(targetElement) {\n  if (window.getComputedStyle(targetElement).direction === 'rtl') {\n    addClass(getContainer(), swalClasses.rtl);\n  }\n};\n/*\n * Add modal + backdrop to DOM\n */\n\n\nvar init = function init(params) {\n  // Clean up the old popup container if it exists\n  resetOldContainer();\n  /* istanbul ignore if */\n\n  if (isNodeEnv()) {\n    error('SweetAlert2 requires document to initialize');\n    return;\n  }\n\n  var container = document.createElement('div');\n  container.className = swalClasses.container;\n  container.innerHTML = sweetHTML;\n  var targetElement = getTarget(params.target);\n  targetElement.appendChild(container);\n  setupAccessibility(params);\n  setupRTL(targetElement);\n  addInputChangeListeners();\n};\n\nvar parseHtmlToContainer = function parseHtmlToContainer(param, target) {\n  // DOM element\n  if (param instanceof HTMLElement) {\n    target.appendChild(param); // JQuery element(s)\n  } else if (_typeof(param) === 'object') {\n    handleJqueryElem(target, param); // Plain string\n  } else if (param) {\n    target.innerHTML = param;\n  }\n};\n\nvar handleJqueryElem = function handleJqueryElem(target, elem) {\n  target.innerHTML = '';\n\n  if (0 in elem) {\n    for (var i = 0; i in elem; i++) {\n      target.appendChild(elem[i].cloneNode(true));\n    }\n  } else {\n    target.appendChild(elem.cloneNode(true));\n  }\n};\n\nvar animationEndEvent = function () {\n  // Prevent run in Node env\n\n  /* istanbul ignore if */\n  if (isNodeEnv()) {\n    return false;\n  }\n\n  var testEl = document.createElement('div');\n  var transEndEventNames = {\n    WebkitAnimation: 'webkitAnimationEnd',\n    OAnimation: 'oAnimationEnd oanimationend',\n    animation: 'animationend'\n  };\n\n  for (var i in transEndEventNames) {\n    if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== 'undefined') {\n      return transEndEventNames[i];\n    }\n  }\n\n  return false;\n}();\n\n// Measure width of scrollbar\n// https://github.com/twbs/bootstrap/blob/master/js/modal.js#L279-L286\nvar measureScrollbar = function measureScrollbar() {\n  var supportsTouch = 'ontouchstart' in window || navigator.msMaxTouchPoints;\n\n  if (supportsTouch) {\n    return 0;\n  }\n\n  var scrollDiv = document.createElement('div');\n  scrollDiv.style.width = '50px';\n  scrollDiv.style.height = '50px';\n  scrollDiv.style.overflow = 'scroll';\n  document.body.appendChild(scrollDiv);\n  var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  document.body.removeChild(scrollDiv);\n  return scrollbarWidth;\n};\n\nvar renderActions = function renderActions(instance, params) {\n  var actions = getActions();\n  var confirmButton = getConfirmButton();\n  var cancelButton = getCancelButton(); // Actions (buttons) wrapper\n\n  if (!params.showConfirmButton && !params.showCancelButton) {\n    hide(actions);\n  } // Custom class\n\n\n  applyCustomClass(actions, params.customClass, 'actions'); // Render confirm button\n\n  renderButton(confirmButton, 'confirm', params); // render Cancel Button\n\n  renderButton(cancelButton, 'cancel', params);\n\n  if (params.buttonsStyling) {\n    handleButtonsStyling(confirmButton, cancelButton, params);\n  } else {\n    removeClass([confirmButton, cancelButton], swalClasses.styled);\n    confirmButton.style.backgroundColor = confirmButton.style.borderLeftColor = confirmButton.style.borderRightColor = '';\n    cancelButton.style.backgroundColor = cancelButton.style.borderLeftColor = cancelButton.style.borderRightColor = '';\n  }\n\n  if (params.reverseButtons) {\n    confirmButton.parentNode.insertBefore(cancelButton, confirmButton);\n  }\n};\n\nfunction handleButtonsStyling(confirmButton, cancelButton, params) {\n  addClass([confirmButton, cancelButton], swalClasses.styled); // Buttons background colors\n\n  if (params.confirmButtonColor) {\n    confirmButton.style.backgroundColor = params.confirmButtonColor;\n  }\n\n  if (params.cancelButtonColor) {\n    cancelButton.style.backgroundColor = params.cancelButtonColor;\n  } // Loading state\n\n\n  var confirmButtonBackgroundColor = window.getComputedStyle(confirmButton).getPropertyValue('background-color');\n  confirmButton.style.borderLeftColor = confirmButtonBackgroundColor;\n  confirmButton.style.borderRightColor = confirmButtonBackgroundColor;\n}\n\nfunction renderButton(button, buttonType, params) {\n  toggle(button, params['showC' + buttonType.substring(1) + 'Button'], 'inline-block');\n  button.innerHTML = params[buttonType + 'ButtonText']; // Set caption text\n\n  button.setAttribute('aria-label', params[buttonType + 'ButtonAriaLabel']); // ARIA label\n  // Add buttons custom classes\n\n  button.className = swalClasses[buttonType];\n  applyCustomClass(button, params.customClass, buttonType + 'Button');\n  addClass(button, params[buttonType + 'ButtonClass']);\n}\n\nfunction handleBackdropParam(container, backdrop) {\n  if (typeof backdrop === 'string') {\n    container.style.background = backdrop;\n  } else if (!backdrop) {\n    addClass([document.documentElement, document.body], swalClasses['no-backdrop']);\n  }\n}\n\nfunction handlePositionParam(container, position) {\n  if (position in swalClasses) {\n    addClass(container, swalClasses[position]);\n  } else {\n    warn('The \"position\" parameter is not valid, defaulting to \"center\"');\n    addClass(container, swalClasses.center);\n  }\n}\n\nfunction handleGrowParam(container, grow) {\n  if (grow && typeof grow === 'string') {\n    var growClass = 'grow-' + grow;\n\n    if (growClass in swalClasses) {\n      addClass(container, swalClasses[growClass]);\n    }\n  }\n}\n\nvar renderContainer = function renderContainer(instance, params) {\n  var container = getContainer();\n\n  if (!container) {\n    return;\n  }\n\n  handleBackdropParam(container, params.backdrop);\n\n  if (!params.backdrop && params.allowOutsideClick) {\n    warn('\"allowOutsideClick\" parameter requires `backdrop` parameter to be set to `true`');\n  }\n\n  handlePositionParam(container, params.position);\n  handleGrowParam(container, params.grow); // Custom class\n\n  applyCustomClass(container, params.customClass, 'container');\n\n  if (params.customContainerClass) {\n    // @deprecated\n    addClass(container, params.customContainerClass);\n  }\n};\n\n/**\n * This module containts `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n * This is the approach that Babel will probably take to implement private methods/fields\n *   https://github.com/tc39/proposal-private-methods\n *   https://github.com/babel/babel/pull/7555\n * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n *   then we can use that language feature.\n */\nvar privateProps = {\n  promise: new WeakMap(),\n  innerParams: new WeakMap(),\n  domCache: new WeakMap()\n};\n\nvar inputTypes = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea'];\nvar renderInput = function renderInput(instance, params) {\n  var content = getContent();\n  var innerParams = privateProps.innerParams.get(instance);\n  var rerender = !innerParams || params.input !== innerParams.input;\n  inputTypes.forEach(function (inputType) {\n    var inputClass = swalClasses[inputType];\n    var inputContainer = getChildByClass(content, inputClass); // set attributes\n\n    setAttributes(inputType, params.inputAttributes); // set class\n\n    setClass(inputContainer, inputClass, params);\n\n    if (rerender) {\n      hide(inputContainer);\n    }\n  });\n\n  if (params.input && rerender) {\n    showInput(params);\n  }\n};\n\nvar showInput = function showInput(params) {\n  if (!renderInputType[params.input]) {\n    return error(\"Unexpected type of input! Expected \\\"text\\\", \\\"email\\\", \\\"password\\\", \\\"number\\\", \\\"tel\\\", \\\"select\\\", \\\"radio\\\", \\\"checkbox\\\", \\\"textarea\\\", \\\"file\\\" or \\\"url\\\", got \\\"\".concat(params.input, \"\\\"\"));\n  }\n\n  var input = renderInputType[params.input](params);\n  show(input); // input autofocus\n\n  setTimeout(function () {\n    focusInput(input);\n  });\n};\n\nvar removeAttributes = function removeAttributes(input) {\n  for (var i = 0; i < input.attributes.length; i++) {\n    var attrName = input.attributes[i].name;\n\n    if (!(['type', 'value', 'style'].indexOf(attrName) !== -1)) {\n      input.removeAttribute(attrName);\n    }\n  }\n};\n\nvar setAttributes = function setAttributes(inputType, inputAttributes) {\n  var input = getInput(getContent(), inputType);\n\n  if (!input) {\n    return;\n  }\n\n  removeAttributes(input);\n\n  for (var attr in inputAttributes) {\n    // Do not set a placeholder for <input type=\"range\">\n    // it'll crash Edge, #1298\n    if (inputType === 'range' && attr === 'placeholder') {\n      continue;\n    }\n\n    input.setAttribute(attr, inputAttributes[attr]);\n  }\n};\n\nvar setClass = function setClass(inputContainer, inputClass, params) {\n  inputContainer.className = inputClass;\n\n  if (params.inputClass) {\n    addClass(inputContainer, params.inputClass);\n  }\n\n  if (params.customClass) {\n    addClass(inputContainer, params.customClass.input);\n  }\n};\n\nvar setInputPlaceholder = function setInputPlaceholder(input, params) {\n  if (!input.placeholder || params.inputPlaceholder) {\n    input.placeholder = params.inputPlaceholder;\n  }\n};\n\nvar renderInputType = {};\n\nrenderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = function (params) {\n  var input = getChildByClass(getContent(), swalClasses.input);\n\n  if (typeof params.inputValue === 'string' || typeof params.inputValue === 'number') {\n    input.value = params.inputValue;\n  } else if (!isPromise(params.inputValue)) {\n    warn(\"Unexpected type of inputValue! Expected \\\"string\\\", \\\"number\\\" or \\\"Promise\\\", got \\\"\".concat(_typeof(params.inputValue), \"\\\"\"));\n  }\n\n  setInputPlaceholder(input, params);\n  input.type = params.input;\n  return input;\n};\n\nrenderInputType.file = function (params) {\n  var input = getChildByClass(getContent(), swalClasses.file);\n  setInputPlaceholder(input, params);\n  input.type = params.input;\n  return input;\n};\n\nrenderInputType.range = function (params) {\n  var range = getChildByClass(getContent(), swalClasses.range);\n  var rangeInput = range.querySelector('input');\n  var rangeOutput = range.querySelector('output');\n  rangeInput.value = params.inputValue;\n  rangeInput.type = params.input;\n  rangeOutput.value = params.inputValue;\n  return range;\n};\n\nrenderInputType.select = function (params) {\n  var select = getChildByClass(getContent(), swalClasses.select);\n  select.innerHTML = '';\n\n  if (params.inputPlaceholder) {\n    var placeholder = document.createElement('option');\n    placeholder.innerHTML = params.inputPlaceholder;\n    placeholder.value = '';\n    placeholder.disabled = true;\n    placeholder.selected = true;\n    select.appendChild(placeholder);\n  }\n\n  return select;\n};\n\nrenderInputType.radio = function () {\n  var radio = getChildByClass(getContent(), swalClasses.radio);\n  radio.innerHTML = '';\n  return radio;\n};\n\nrenderInputType.checkbox = function (params) {\n  var checkbox = getChildByClass(getContent(), swalClasses.checkbox);\n  var checkboxInput = getInput(getContent(), 'checkbox');\n  checkboxInput.type = 'checkbox';\n  checkboxInput.value = 1;\n  checkboxInput.id = swalClasses.checkbox;\n  checkboxInput.checked = Boolean(params.inputValue);\n  var label = checkbox.querySelector('span');\n  label.innerHTML = params.inputPlaceholder;\n  return checkbox;\n};\n\nrenderInputType.textarea = function (params) {\n  var textarea = getChildByClass(getContent(), swalClasses.textarea);\n  textarea.value = params.inputValue;\n  setInputPlaceholder(textarea, params);\n\n  if ('MutationObserver' in window) {\n    // #1699\n    var initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);\n    var popupPadding = parseInt(window.getComputedStyle(getPopup()).paddingLeft) + parseInt(window.getComputedStyle(getPopup()).paddingRight);\n\n    var outputsize = function outputsize() {\n      var contentWidth = textarea.offsetWidth + popupPadding;\n\n      if (contentWidth > initialPopupWidth) {\n        getPopup().style.width = contentWidth + 'px';\n      } else {\n        getPopup().style.width = null;\n      }\n    };\n\n    new MutationObserver(outputsize).observe(textarea, {\n      attributes: true,\n      attributeFilter: ['style']\n    });\n  }\n\n  return textarea;\n};\n\nvar renderContent = function renderContent(instance, params) {\n  var content = getContent().querySelector('#' + swalClasses.content); // Content as HTML\n\n  if (params.html) {\n    parseHtmlToContainer(params.html, content);\n    show(content, 'block'); // Content as plain text\n  } else if (params.text) {\n    content.textContent = params.text;\n    show(content, 'block'); // No content\n  } else {\n    hide(content);\n  }\n\n  renderInput(instance, params); // Custom class\n\n  applyCustomClass(getContent(), params.customClass, 'content');\n};\n\nvar renderFooter = function renderFooter(instance, params) {\n  var footer = getFooter();\n  toggle(footer, params.footer);\n\n  if (params.footer) {\n    parseHtmlToContainer(params.footer, footer);\n  } // Custom class\n\n\n  applyCustomClass(footer, params.customClass, 'footer');\n};\n\nvar renderCloseButton = function renderCloseButton(instance, params) {\n  var closeButton = getCloseButton();\n  closeButton.innerHTML = params.closeButtonHtml; // Custom class\n\n  applyCustomClass(closeButton, params.customClass, 'closeButton');\n  toggle(closeButton, params.showCloseButton);\n  closeButton.setAttribute('aria-label', params.closeButtonAriaLabel);\n};\n\nvar renderIcon = function renderIcon(instance, params) {\n  var innerParams = privateProps.innerParams.get(instance); // if the icon with the given type already rendered,\n  // apply the custom class without re-rendering the icon\n\n  if (innerParams && params.type === innerParams.type && getIcon()) {\n    applyCustomClass(getIcon(), params.customClass, 'icon');\n    return;\n  }\n\n  hideAllIcons();\n\n  if (!params.type) {\n    return;\n  }\n\n  adjustSuccessIconBackgoundColor();\n\n  if (Object.keys(iconTypes).indexOf(params.type) !== -1) {\n    var icon = elementBySelector(\".\".concat(swalClasses.icon, \".\").concat(iconTypes[params.type]));\n    show(icon); // Custom class\n\n    applyCustomClass(icon, params.customClass, 'icon'); // Animate icon\n\n    toggleClass(icon, \"swal2-animate-\".concat(params.type, \"-icon\"), params.animation);\n  } else {\n    error(\"Unknown type! Expected \\\"success\\\", \\\"error\\\", \\\"warning\\\", \\\"info\\\" or \\\"question\\\", got \\\"\".concat(params.type, \"\\\"\"));\n  }\n};\n\nvar hideAllIcons = function hideAllIcons() {\n  var icons = getIcons();\n\n  for (var i = 0; i < icons.length; i++) {\n    hide(icons[i]);\n  }\n}; // Adjust success icon background color to match the popup background color\n\n\nvar adjustSuccessIconBackgoundColor = function adjustSuccessIconBackgoundColor() {\n  var popup = getPopup();\n  var popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');\n  var successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');\n\n  for (var i = 0; i < successIconParts.length; i++) {\n    successIconParts[i].style.backgroundColor = popupBackgroundColor;\n  }\n};\n\nvar renderImage = function renderImage(instance, params) {\n  var image = getImage();\n\n  if (!params.imageUrl) {\n    return hide(image);\n  }\n\n  show(image); // Src, alt\n\n  image.setAttribute('src', params.imageUrl);\n  image.setAttribute('alt', params.imageAlt); // Width, height\n\n  applyNumericalStyle(image, 'width', params.imageWidth);\n  applyNumericalStyle(image, 'height', params.imageHeight); // Class\n\n  image.className = swalClasses.image;\n  applyCustomClass(image, params.customClass, 'image');\n\n  if (params.imageClass) {\n    addClass(image, params.imageClass);\n  }\n};\n\nvar createStepElement = function createStepElement(step) {\n  var stepEl = document.createElement('li');\n  addClass(stepEl, swalClasses['progress-step']);\n  stepEl.innerHTML = step;\n  return stepEl;\n};\n\nvar createLineElement = function createLineElement(params) {\n  var lineEl = document.createElement('li');\n  addClass(lineEl, swalClasses['progress-step-line']);\n\n  if (params.progressStepsDistance) {\n    lineEl.style.width = params.progressStepsDistance;\n  }\n\n  return lineEl;\n};\n\nvar renderProgressSteps = function renderProgressSteps(instance, params) {\n  var progressStepsContainer = getProgressSteps();\n\n  if (!params.progressSteps || params.progressSteps.length === 0) {\n    return hide(progressStepsContainer);\n  }\n\n  show(progressStepsContainer);\n  progressStepsContainer.innerHTML = '';\n  var currentProgressStep = parseInt(params.currentProgressStep === null ? Swal.getQueueStep() : params.currentProgressStep);\n\n  if (currentProgressStep >= params.progressSteps.length) {\n    warn('Invalid currentProgressStep parameter, it should be less than progressSteps.length ' + '(currentProgressStep like JS arrays starts from 0)');\n  }\n\n  params.progressSteps.forEach(function (step, index) {\n    var stepEl = createStepElement(step);\n    progressStepsContainer.appendChild(stepEl);\n\n    if (index === currentProgressStep) {\n      addClass(stepEl, swalClasses['active-progress-step']);\n    }\n\n    if (index !== params.progressSteps.length - 1) {\n      var lineEl = createLineElement(step);\n      progressStepsContainer.appendChild(lineEl);\n    }\n  });\n};\n\nvar renderTitle = function renderTitle(instance, params) {\n  var title = getTitle();\n  toggle(title, params.title || params.titleText);\n\n  if (params.title) {\n    parseHtmlToContainer(params.title, title);\n  }\n\n  if (params.titleText) {\n    title.innerText = params.titleText;\n  } // Custom class\n\n\n  applyCustomClass(title, params.customClass, 'title');\n};\n\nvar renderHeader = function renderHeader(instance, params) {\n  var header = getHeader(); // Custom class\n\n  applyCustomClass(header, params.customClass, 'header'); // Progress steps\n\n  renderProgressSteps(instance, params); // Icon\n\n  renderIcon(instance, params); // Image\n\n  renderImage(instance, params); // Title\n\n  renderTitle(instance, params); // Close button\n\n  renderCloseButton(instance, params);\n};\n\nvar renderPopup = function renderPopup(instance, params) {\n  var popup = getPopup(); // Width\n\n  applyNumericalStyle(popup, 'width', params.width); // Padding\n\n  applyNumericalStyle(popup, 'padding', params.padding); // Background\n\n  if (params.background) {\n    popup.style.background = params.background;\n  } // Default Class\n\n\n  popup.className = swalClasses.popup;\n\n  if (params.toast) {\n    addClass([document.documentElement, document.body], swalClasses['toast-shown']);\n    addClass(popup, swalClasses.toast);\n  } else {\n    addClass(popup, swalClasses.modal);\n  } // Custom class\n\n\n  applyCustomClass(popup, params.customClass, 'popup');\n\n  if (typeof params.customClass === 'string') {\n    addClass(popup, params.customClass);\n  } // CSS animation\n\n\n  toggleClass(popup, swalClasses.noanimation, !params.animation);\n};\n\nvar render = function render(instance, params) {\n  renderPopup(instance, params);\n  renderContainer(instance, params);\n  renderHeader(instance, params);\n  renderContent(instance, params);\n  renderActions(instance, params);\n  renderFooter(instance, params);\n\n  if (typeof params.onRender === 'function') {\n    params.onRender(getPopup());\n  }\n};\n\n/*\n * Global function to determine if SweetAlert2 popup is shown\n */\n\nvar isVisible$1 = function isVisible$$1() {\n  return isVisible(getPopup());\n};\n/*\n * Global function to click 'Confirm' button\n */\n\nvar clickConfirm = function clickConfirm() {\n  return getConfirmButton() && getConfirmButton().click();\n};\n/*\n * Global function to click 'Cancel' button\n */\n\nvar clickCancel = function clickCancel() {\n  return getCancelButton() && getCancelButton().click();\n};\n\nfunction fire() {\n  var Swal = this;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _construct(Swal, args);\n}\n\n/**\n * Returns an extended version of `Swal` containing `params` as defaults.\n * Useful for reusing Swal configuration.\n *\n * For example:\n *\n * Before:\n * const textPromptOptions = { input: 'text', showCancelButton: true }\n * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })\n * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })\n *\n * After:\n * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })\n * const {value: firstName} = await TextPrompt('What is your first name?')\n * const {value: lastName} = await TextPrompt('What is your last name?')\n *\n * @param mixinParams\n */\nfunction mixin(mixinParams) {\n  var MixinSwal =\n  /*#__PURE__*/\n  function (_this) {\n    _inherits(MixinSwal, _this);\n\n    function MixinSwal() {\n      _classCallCheck(this, MixinSwal);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(MixinSwal).apply(this, arguments));\n    }\n\n    _createClass(MixinSwal, [{\n      key: \"_main\",\n      value: function _main(params) {\n        return _get(_getPrototypeOf(MixinSwal.prototype), \"_main\", this).call(this, _extends({}, mixinParams, params));\n      }\n    }]);\n\n    return MixinSwal;\n  }(this);\n\n  return MixinSwal;\n}\n\n// private global state for the queue feature\nvar currentSteps = [];\n/*\n * Global function for chaining sweetAlert popups\n */\n\nvar queue = function queue(steps) {\n  var Swal = this;\n  currentSteps = steps;\n\n  var resetAndResolve = function resetAndResolve(resolve, value) {\n    currentSteps = [];\n    document.body.removeAttribute('data-swal2-queue-step');\n    resolve(value);\n  };\n\n  var queueResult = [];\n  return new Promise(function (resolve) {\n    (function step(i, callback) {\n      if (i < currentSteps.length) {\n        document.body.setAttribute('data-swal2-queue-step', i);\n        Swal.fire(currentSteps[i]).then(function (result) {\n          if (typeof result.value !== 'undefined') {\n            queueResult.push(result.value);\n            step(i + 1, callback);\n          } else {\n            resetAndResolve(resolve, {\n              dismiss: result.dismiss\n            });\n          }\n        });\n      } else {\n        resetAndResolve(resolve, {\n          value: queueResult\n        });\n      }\n    })(0);\n  });\n};\n/*\n * Global function for getting the index of current popup in queue\n */\n\nvar getQueueStep = function getQueueStep() {\n  return document.body.getAttribute('data-swal2-queue-step');\n};\n/*\n * Global function for inserting a popup to the queue\n */\n\nvar insertQueueStep = function insertQueueStep(step, index) {\n  if (index && index < currentSteps.length) {\n    return currentSteps.splice(index, 0, step);\n  }\n\n  return currentSteps.push(step);\n};\n/*\n * Global function for deleting a popup from the queue\n */\n\nvar deleteQueueStep = function deleteQueueStep(index) {\n  if (typeof currentSteps[index] !== 'undefined') {\n    currentSteps.splice(index, 1);\n  }\n};\n\n/**\n * Show spinner instead of Confirm button and disable Cancel button\n */\n\nvar showLoading = function showLoading() {\n  var popup = getPopup();\n\n  if (!popup) {\n    Swal.fire('');\n  }\n\n  popup = getPopup();\n  var actions = getActions();\n  var confirmButton = getConfirmButton();\n  var cancelButton = getCancelButton();\n  show(actions);\n  show(confirmButton);\n  addClass([popup, actions], swalClasses.loading);\n  confirmButton.disabled = true;\n  cancelButton.disabled = true;\n  popup.setAttribute('data-loading', true);\n  popup.setAttribute('aria-busy', true);\n  popup.focus();\n};\n\nvar RESTORE_FOCUS_TIMEOUT = 100;\n\nvar globalState = {};\nvar focusPreviousActiveElement = function focusPreviousActiveElement() {\n  if (globalState.previousActiveElement && globalState.previousActiveElement.focus) {\n    globalState.previousActiveElement.focus();\n    globalState.previousActiveElement = null;\n  } else if (document.body) {\n    document.body.focus();\n  }\n}; // Restore previous active (focused) element\n\n\nvar restoreActiveElement = function restoreActiveElement() {\n  return new Promise(function (resolve) {\n    var x = window.scrollX;\n    var y = window.scrollY;\n    globalState.restoreFocusTimeout = setTimeout(function () {\n      focusPreviousActiveElement();\n      resolve();\n    }, RESTORE_FOCUS_TIMEOUT); // issues/900\n\n    if (typeof x !== 'undefined' && typeof y !== 'undefined') {\n      // IE doesn't have scrollX/scrollY support\n      window.scrollTo(x, y);\n    }\n  });\n};\n\n/**\n * If `timer` parameter is set, returns number of milliseconds of timer remained.\n * Otherwise, returns undefined.\n */\n\nvar getTimerLeft = function getTimerLeft() {\n  return globalState.timeout && globalState.timeout.getTimerLeft();\n};\n/**\n * Stop timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\n\nvar stopTimer = function stopTimer() {\n  return globalState.timeout && globalState.timeout.stop();\n};\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\n\nvar resumeTimer = function resumeTimer() {\n  return globalState.timeout && globalState.timeout.start();\n};\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\n\nvar toggleTimer = function toggleTimer() {\n  var timer = globalState.timeout;\n  return timer && (timer.running ? timer.stop() : timer.start());\n};\n/**\n * Increase timer. Returns number of milliseconds of an updated timer.\n * If `timer` parameter isn't set, returns undefined.\n */\n\nvar increaseTimer = function increaseTimer(n) {\n  return globalState.timeout && globalState.timeout.increase(n);\n};\n/**\n * Check if timer is running. Returns true if timer is running\n * or false if timer is paused or stopped.\n * If `timer` parameter isn't set, returns undefined\n */\n\nvar isTimerRunning = function isTimerRunning() {\n  return globalState.timeout && globalState.timeout.isRunning();\n};\n\nvar defaultParams = {\n  title: '',\n  titleText: '',\n  text: '',\n  html: '',\n  footer: '',\n  type: null,\n  toast: false,\n  customClass: '',\n  customContainerClass: '',\n  target: 'body',\n  backdrop: true,\n  animation: true,\n  heightAuto: true,\n  allowOutsideClick: true,\n  allowEscapeKey: true,\n  allowEnterKey: true,\n  stopKeydownPropagation: true,\n  keydownListenerCapture: false,\n  showConfirmButton: true,\n  showCancelButton: false,\n  preConfirm: null,\n  confirmButtonText: 'OK',\n  confirmButtonAriaLabel: '',\n  confirmButtonColor: null,\n  confirmButtonClass: '',\n  cancelButtonText: 'Cancel',\n  cancelButtonAriaLabel: '',\n  cancelButtonColor: null,\n  cancelButtonClass: '',\n  buttonsStyling: true,\n  reverseButtons: false,\n  focusConfirm: true,\n  focusCancel: false,\n  showCloseButton: false,\n  closeButtonHtml: '&times;',\n  closeButtonAriaLabel: 'Close this dialog',\n  showLoaderOnConfirm: false,\n  imageUrl: null,\n  imageWidth: null,\n  imageHeight: null,\n  imageAlt: '',\n  imageClass: '',\n  timer: null,\n  width: null,\n  padding: null,\n  background: null,\n  input: null,\n  inputPlaceholder: '',\n  inputValue: '',\n  inputOptions: {},\n  inputAutoTrim: true,\n  inputClass: '',\n  inputAttributes: {},\n  inputValidator: null,\n  validationMessage: null,\n  grow: false,\n  position: 'center',\n  progressSteps: [],\n  currentProgressStep: null,\n  progressStepsDistance: null,\n  onBeforeOpen: null,\n  onOpen: null,\n  onRender: null,\n  onClose: null,\n  onAfterClose: null,\n  scrollbarPadding: true\n};\nvar updatableParams = ['title', 'titleText', 'text', 'html', 'type', 'customClass', 'showConfirmButton', 'showCancelButton', 'confirmButtonText', 'confirmButtonAriaLabel', 'confirmButtonColor', 'confirmButtonClass', 'cancelButtonText', 'cancelButtonAriaLabel', 'cancelButtonColor', 'cancelButtonClass', 'buttonsStyling', 'reverseButtons', 'imageUrl', 'imageWidth', 'imageHeigth', 'imageAlt', 'imageClass', 'progressSteps', 'currentProgressStep'];\nvar deprecatedParams = {\n  customContainerClass: 'customClass',\n  confirmButtonClass: 'customClass',\n  cancelButtonClass: 'customClass',\n  imageClass: 'customClass',\n  inputClass: 'customClass'\n};\nvar toastIncompatibleParams = ['allowOutsideClick', 'allowEnterKey', 'backdrop', 'focusConfirm', 'focusCancel', 'heightAuto', 'keydownListenerCapture'];\n/**\n * Is valid parameter\n * @param {String} paramName\n */\n\nvar isValidParameter = function isValidParameter(paramName) {\n  return Object.prototype.hasOwnProperty.call(defaultParams, paramName);\n};\n/**\n * Is valid parameter for Swal.update() method\n * @param {String} paramName\n */\n\nvar isUpdatableParameter = function isUpdatableParameter(paramName) {\n  return updatableParams.indexOf(paramName) !== -1;\n};\n/**\n * Is deprecated parameter\n * @param {String} paramName\n */\n\nvar isDeprecatedParameter = function isDeprecatedParameter(paramName) {\n  return deprecatedParams[paramName];\n};\n\nvar checkIfParamIsValid = function checkIfParamIsValid(param) {\n  if (!isValidParameter(param)) {\n    warn(\"Unknown parameter \\\"\".concat(param, \"\\\"\"));\n  }\n};\n\nvar checkIfToastParamIsValid = function checkIfToastParamIsValid(param) {\n  if (toastIncompatibleParams.indexOf(param) !== -1) {\n    warn(\"The parameter \\\"\".concat(param, \"\\\" is incompatible with toasts\"));\n  }\n};\n\nvar checkIfParamIsDeprecated = function checkIfParamIsDeprecated(param) {\n  if (isDeprecatedParameter(param)) {\n    warnAboutDepreation(param, isDeprecatedParameter(param));\n  }\n};\n/**\n * Show relevant warnings for given params\n *\n * @param params\n */\n\n\nvar showWarningsForParams = function showWarningsForParams(params) {\n  for (var param in params) {\n    checkIfParamIsValid(param);\n\n    if (params.toast) {\n      checkIfToastParamIsValid(param);\n    }\n\n    checkIfParamIsDeprecated();\n  }\n};\n\n\n\nvar staticMethods = Object.freeze({\n\tisValidParameter: isValidParameter,\n\tisUpdatableParameter: isUpdatableParameter,\n\tisDeprecatedParameter: isDeprecatedParameter,\n\targsToParams: argsToParams,\n\tisVisible: isVisible$1,\n\tclickConfirm: clickConfirm,\n\tclickCancel: clickCancel,\n\tgetContainer: getContainer,\n\tgetPopup: getPopup,\n\tgetTitle: getTitle,\n\tgetContent: getContent,\n\tgetImage: getImage,\n\tgetIcon: getIcon,\n\tgetIcons: getIcons,\n\tgetCloseButton: getCloseButton,\n\tgetActions: getActions,\n\tgetConfirmButton: getConfirmButton,\n\tgetCancelButton: getCancelButton,\n\tgetHeader: getHeader,\n\tgetFooter: getFooter,\n\tgetFocusableElements: getFocusableElements,\n\tgetValidationMessage: getValidationMessage,\n\tisLoading: isLoading,\n\tfire: fire,\n\tmixin: mixin,\n\tqueue: queue,\n\tgetQueueStep: getQueueStep,\n\tinsertQueueStep: insertQueueStep,\n\tdeleteQueueStep: deleteQueueStep,\n\tshowLoading: showLoading,\n\tenableLoading: showLoading,\n\tgetTimerLeft: getTimerLeft,\n\tstopTimer: stopTimer,\n\tresumeTimer: resumeTimer,\n\ttoggleTimer: toggleTimer,\n\tincreaseTimer: increaseTimer,\n\tisTimerRunning: isTimerRunning\n});\n\n/**\n * Enables buttons and hide loader.\n */\n\nfunction hideLoading() {\n  var innerParams = privateProps.innerParams.get(this);\n  var domCache = privateProps.domCache.get(this);\n\n  if (!innerParams.showConfirmButton) {\n    hide(domCache.confirmButton);\n\n    if (!innerParams.showCancelButton) {\n      hide(domCache.actions);\n    }\n  }\n\n  removeClass([domCache.popup, domCache.actions], swalClasses.loading);\n  domCache.popup.removeAttribute('aria-busy');\n  domCache.popup.removeAttribute('data-loading');\n  domCache.confirmButton.disabled = false;\n  domCache.cancelButton.disabled = false;\n}\n\nfunction getInput$1(instance) {\n  var innerParams = privateProps.innerParams.get(instance || this);\n  var domCache = privateProps.domCache.get(instance || this);\n\n  if (!domCache) {\n    return null;\n  }\n\n  return getInput(domCache.content, innerParams.input);\n}\n\nvar fixScrollbar = function fixScrollbar() {\n  // for queues, do not do this more than once\n  if (states.previousBodyPadding !== null) {\n    return;\n  } // if the body has overflow\n\n\n  if (document.body.scrollHeight > window.innerHeight) {\n    // add padding so the content doesn't shift after removal of scrollbar\n    states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'));\n    document.body.style.paddingRight = states.previousBodyPadding + measureScrollbar() + 'px';\n  }\n};\nvar undoScrollbar = function undoScrollbar() {\n  if (states.previousBodyPadding !== null) {\n    document.body.style.paddingRight = states.previousBodyPadding + 'px';\n    states.previousBodyPadding = null;\n  }\n};\n\n/* istanbul ignore next */\n\nvar iOSfix = function iOSfix() {\n  var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n  if (iOS && !hasClass(document.body, swalClasses.iosfix)) {\n    var offset = document.body.scrollTop;\n    document.body.style.top = offset * -1 + 'px';\n    addClass(document.body, swalClasses.iosfix);\n    lockBodyScroll();\n  }\n};\n\nvar lockBodyScroll = function lockBodyScroll() {\n  // #1246\n  var container = getContainer();\n  var preventTouchMove;\n\n  container.ontouchstart = function (e) {\n    preventTouchMove = e.target === container || !isScrollable(container) && e.target.tagName !== 'INPUT' // #1603\n    ;\n  };\n\n  container.ontouchmove = function (e) {\n    if (preventTouchMove) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n};\n/* istanbul ignore next */\n\n\nvar undoIOSfix = function undoIOSfix() {\n  if (hasClass(document.body, swalClasses.iosfix)) {\n    var offset = parseInt(document.body.style.top, 10);\n    removeClass(document.body, swalClasses.iosfix);\n    document.body.style.top = '';\n    document.body.scrollTop = offset * -1;\n  }\n};\n\nvar isIE11 = function isIE11() {\n  return !!window.MSInputMethodContext && !!document.documentMode;\n}; // Fix IE11 centering sweetalert2/issues/933\n\n/* istanbul ignore next */\n\n\nvar fixVerticalPositionIE = function fixVerticalPositionIE() {\n  var container = getContainer();\n  var popup = getPopup();\n  container.style.removeProperty('align-items');\n\n  if (popup.offsetTop < 0) {\n    container.style.alignItems = 'flex-start';\n  }\n};\n/* istanbul ignore next */\n\n\nvar IEfix = function IEfix() {\n  if (typeof window !== 'undefined' && isIE11()) {\n    fixVerticalPositionIE();\n    window.addEventListener('resize', fixVerticalPositionIE);\n  }\n};\n/* istanbul ignore next */\n\nvar undoIEfix = function undoIEfix() {\n  if (typeof window !== 'undefined' && isIE11()) {\n    window.removeEventListener('resize', fixVerticalPositionIE);\n  }\n};\n\n// Adding aria-hidden=\"true\" to elements outside of the active modal dialog ensures that\n// elements not within the active modal dialog will not be surfaced if a user opens a screen\n// reader’s list of elements (headings, form controls, landmarks, etc.) in the document.\n\nvar setAriaHidden = function setAriaHidden() {\n  var bodyChildren = toArray(document.body.children);\n  bodyChildren.forEach(function (el) {\n    if (el === getContainer() || contains(el, getContainer())) {\n      return;\n    }\n\n    if (el.hasAttribute('aria-hidden')) {\n      el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden'));\n    }\n\n    el.setAttribute('aria-hidden', 'true');\n  });\n};\nvar unsetAriaHidden = function unsetAriaHidden() {\n  var bodyChildren = toArray(document.body.children);\n  bodyChildren.forEach(function (el) {\n    if (el.hasAttribute('data-previous-aria-hidden')) {\n      el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden'));\n      el.removeAttribute('data-previous-aria-hidden');\n    } else {\n      el.removeAttribute('aria-hidden');\n    }\n  });\n};\n\n/**\n * This module containts `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n * This is the approach that Babel will probably take to implement private methods/fields\n *   https://github.com/tc39/proposal-private-methods\n *   https://github.com/babel/babel/pull/7555\n * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n *   then we can use that language feature.\n */\nvar privateMethods = {\n  swalPromiseResolve: new WeakMap()\n};\n\n/*\n * Instance method to close sweetAlert\n */\n\nfunction removePopupAndResetState(instance, container, isToast, onAfterClose) {\n  if (isToast) {\n    triggerOnAfterCloseAndDispose(instance, onAfterClose);\n  } else {\n    restoreActiveElement().then(function () {\n      return triggerOnAfterCloseAndDispose(instance, onAfterClose);\n    });\n    globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {\n      capture: globalState.keydownListenerCapture\n    });\n    globalState.keydownHandlerAdded = false;\n  }\n\n  if (container.parentNode) {\n    container.parentNode.removeChild(container);\n  }\n\n  if (isModal()) {\n    undoScrollbar();\n    undoIOSfix();\n    undoIEfix();\n    unsetAriaHidden();\n  }\n\n  removeBodyClasses();\n}\n\nfunction removeBodyClasses() {\n  removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses['height-auto'], swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['toast-column']]);\n}\n\nfunction disposeSwal(instance) {\n  // Unset this.params so GC will dispose it (#1569)\n  delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)\n\n  delete globalState.keydownHandler;\n  delete globalState.keydownTarget; // Unset WeakMaps so GC will be able to dispose them (#1569)\n\n  unsetWeakMaps(privateProps);\n  unsetWeakMaps(privateMethods);\n}\n\nfunction close(resolveValue) {\n  var popup = getPopup();\n\n  if (!popup || hasClass(popup, swalClasses.hide)) {\n    return;\n  }\n\n  var innerParams = privateProps.innerParams.get(this);\n\n  if (!innerParams) {\n    return;\n  }\n\n  var swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);\n  removeClass(popup, swalClasses.show);\n  addClass(popup, swalClasses.hide);\n  handlePopupAnimation(this, popup, innerParams); // Resolve Swal promise\n\n  swalPromiseResolve(resolveValue || {});\n}\n\nvar handlePopupAnimation = function handlePopupAnimation(instance, popup, innerParams) {\n  var container = getContainer(); // If animation is supported, animate\n\n  var animationIsSupported = animationEndEvent && hasCssAnimation(popup);\n  var onClose = innerParams.onClose,\n      onAfterClose = innerParams.onAfterClose;\n\n  if (onClose !== null && typeof onClose === 'function') {\n    onClose(popup);\n  }\n\n  if (animationIsSupported) {\n    animatePopup(instance, popup, container, onAfterClose);\n  } else {\n    // Otherwise, remove immediately\n    removePopupAndResetState(instance, container, isToast(), onAfterClose);\n  }\n};\n\nvar animatePopup = function animatePopup(instance, popup, container, onAfterClose) {\n  globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, isToast(), onAfterClose);\n  popup.addEventListener(animationEndEvent, function (e) {\n    if (e.target === popup) {\n      globalState.swalCloseEventFinishedCallback();\n      delete globalState.swalCloseEventFinishedCallback;\n    }\n  });\n};\n\nvar unsetWeakMaps = function unsetWeakMaps(obj) {\n  for (var i in obj) {\n    obj[i] = new WeakMap();\n  }\n};\n\nvar triggerOnAfterCloseAndDispose = function triggerOnAfterCloseAndDispose(instance, onAfterClose) {\n  setTimeout(function () {\n    if (onAfterClose !== null && typeof onAfterClose === 'function') {\n      onAfterClose();\n    }\n\n    if (!getPopup()) {\n      disposeSwal(instance);\n    }\n  });\n};\n\nfunction setButtonsDisabled(instance, buttons, disabled) {\n  var domCache = privateProps.domCache.get(instance);\n  buttons.forEach(function (button) {\n    domCache[button].disabled = disabled;\n  });\n}\n\nfunction setInputDisabled(input, disabled) {\n  if (!input) {\n    return false;\n  }\n\n  if (input.type === 'radio') {\n    var radiosContainer = input.parentNode.parentNode;\n    var radios = radiosContainer.querySelectorAll('input');\n\n    for (var i = 0; i < radios.length; i++) {\n      radios[i].disabled = disabled;\n    }\n  } else {\n    input.disabled = disabled;\n  }\n}\n\nfunction enableButtons() {\n  setButtonsDisabled(this, ['confirmButton', 'cancelButton'], false);\n}\nfunction disableButtons() {\n  setButtonsDisabled(this, ['confirmButton', 'cancelButton'], true);\n} // @deprecated\n\nfunction enableConfirmButton() {\n  warnAboutDepreation('Swal.enableConfirmButton()', \"Swal.getConfirmButton().removeAttribute('disabled')\");\n  setButtonsDisabled(this, ['confirmButton'], false);\n} // @deprecated\n\nfunction disableConfirmButton() {\n  warnAboutDepreation('Swal.disableConfirmButton()', \"Swal.getConfirmButton().setAttribute('disabled', '')\");\n  setButtonsDisabled(this, ['confirmButton'], true);\n}\nfunction enableInput() {\n  return setInputDisabled(this.getInput(), false);\n}\nfunction disableInput() {\n  return setInputDisabled(this.getInput(), true);\n}\n\nfunction showValidationMessage(error) {\n  var domCache = privateProps.domCache.get(this);\n  domCache.validationMessage.innerHTML = error;\n  var popupComputedStyle = window.getComputedStyle(domCache.popup);\n  domCache.validationMessage.style.marginLeft = \"-\".concat(popupComputedStyle.getPropertyValue('padding-left'));\n  domCache.validationMessage.style.marginRight = \"-\".concat(popupComputedStyle.getPropertyValue('padding-right'));\n  show(domCache.validationMessage);\n  var input = this.getInput();\n\n  if (input) {\n    input.setAttribute('aria-invalid', true);\n    input.setAttribute('aria-describedBy', swalClasses['validation-message']);\n    focusInput(input);\n    addClass(input, swalClasses.inputerror);\n  }\n} // Hide block with validation message\n\nfunction resetValidationMessage$1() {\n  var domCache = privateProps.domCache.get(this);\n\n  if (domCache.validationMessage) {\n    hide(domCache.validationMessage);\n  }\n\n  var input = this.getInput();\n\n  if (input) {\n    input.removeAttribute('aria-invalid');\n    input.removeAttribute('aria-describedBy');\n    removeClass(input, swalClasses.inputerror);\n  }\n}\n\nfunction getProgressSteps$1() {\n  warnAboutDepreation('Swal.getProgressSteps()', \"const swalInstance = Swal.fire({progressSteps: ['1', '2', '3']}); const progressSteps = swalInstance.params.progressSteps\");\n  var innerParams = privateProps.innerParams.get(this);\n  return innerParams.progressSteps;\n}\nfunction setProgressSteps(progressSteps) {\n  warnAboutDepreation('Swal.setProgressSteps()', 'Swal.update()');\n  var innerParams = privateProps.innerParams.get(this);\n\n  var updatedParams = _extends({}, innerParams, {\n    progressSteps: progressSteps\n  });\n\n  renderProgressSteps(this, updatedParams);\n  privateProps.innerParams.set(this, updatedParams);\n}\nfunction showProgressSteps() {\n  var domCache = privateProps.domCache.get(this);\n  show(domCache.progressSteps);\n}\nfunction hideProgressSteps() {\n  var domCache = privateProps.domCache.get(this);\n  hide(domCache.progressSteps);\n}\n\nvar Timer =\n/*#__PURE__*/\nfunction () {\n  function Timer(callback, delay) {\n    _classCallCheck(this, Timer);\n\n    this.callback = callback;\n    this.remaining = delay;\n    this.running = false;\n    this.start();\n  }\n\n  _createClass(Timer, [{\n    key: \"start\",\n    value: function start() {\n      if (!this.running) {\n        this.running = true;\n        this.started = new Date();\n        this.id = setTimeout(this.callback, this.remaining);\n      }\n\n      return this.remaining;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.running) {\n        this.running = false;\n        clearTimeout(this.id);\n        this.remaining -= new Date() - this.started;\n      }\n\n      return this.remaining;\n    }\n  }, {\n    key: \"increase\",\n    value: function increase(n) {\n      var running = this.running;\n\n      if (running) {\n        this.stop();\n      }\n\n      this.remaining += n;\n\n      if (running) {\n        this.start();\n      }\n\n      return this.remaining;\n    }\n  }, {\n    key: \"getTimerLeft\",\n    value: function getTimerLeft() {\n      if (this.running) {\n        this.stop();\n        this.start();\n      }\n\n      return this.remaining;\n    }\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      return this.running;\n    }\n  }]);\n\n  return Timer;\n}();\n\nvar defaultInputValidators = {\n  email: function email(string, validationMessage) {\n    return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z0-9-]{2,24}$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid email address');\n  },\n  url: function url(string, validationMessage) {\n    // taken from https://stackoverflow.com/a/3809435 with a small change from #1306\n    return /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,63}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid URL');\n  }\n};\n\nfunction setDefaultInputValidators(params) {\n  // Use default `inputValidator` for supported input types if not provided\n  if (!params.inputValidator) {\n    Object.keys(defaultInputValidators).forEach(function (key) {\n      if (params.input === key) {\n        params.inputValidator = defaultInputValidators[key];\n      }\n    });\n  }\n}\n\nfunction validateCustomTargetElement(params) {\n  // Determine if the custom target element is valid\n  if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {\n    warn('Target parameter is not valid, defaulting to \"body\"');\n    params.target = 'body';\n  }\n}\n/**\n * Set type, text and actions on popup\n *\n * @param params\n * @returns {boolean}\n */\n\n\nfunction setParameters(params) {\n  setDefaultInputValidators(params); // showLoaderOnConfirm && preConfirm\n\n  if (params.showLoaderOnConfirm && !params.preConfirm) {\n    warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\\n' + 'https://sweetalert2.github.io/#ajax-request');\n  } // params.animation will be actually used in renderPopup.js\n  // but in case when params.animation is a function, we need to call that function\n  // before popup (re)initialization, so it'll be possible to check Swal.isVisible()\n  // inside the params.animation function\n\n\n  params.animation = callIfFunction(params.animation);\n  validateCustomTargetElement(params); // Replace newlines with <br> in title\n\n  if (typeof params.title === 'string') {\n    params.title = params.title.split('\\n').join('<br />');\n  }\n\n  init(params);\n}\n\nfunction swalOpenAnimationFinished(popup, container) {\n  popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);\n  container.style.overflowY = 'auto';\n}\n/**\n * Open popup, add necessary classes and styles, fix scrollbar\n *\n * @param {Array} params\n */\n\n\nvar openPopup = function openPopup(params) {\n  var container = getContainer();\n  var popup = getPopup();\n\n  if (typeof params.onBeforeOpen === 'function') {\n    params.onBeforeOpen(popup);\n  }\n\n  addClasses(container, popup, params); // scrolling is 'hidden' until animation is done, after that 'auto'\n\n  setScrollingVisibility(container, popup);\n\n  if (isModal()) {\n    fixScrollContainer(container, params.scrollbarPadding);\n  }\n\n  if (!isToast() && !globalState.previousActiveElement) {\n    globalState.previousActiveElement = document.activeElement;\n  }\n\n  if (typeof params.onOpen === 'function') {\n    setTimeout(function () {\n      return params.onOpen(popup);\n    });\n  }\n};\n\nvar setScrollingVisibility = function setScrollingVisibility(container, popup) {\n  if (animationEndEvent && hasCssAnimation(popup)) {\n    container.style.overflowY = 'hidden';\n    popup.addEventListener(animationEndEvent, swalOpenAnimationFinished.bind(null, popup, container));\n  } else {\n    container.style.overflowY = 'auto';\n  }\n};\n\nvar fixScrollContainer = function fixScrollContainer(container, scrollbarPadding) {\n  iOSfix();\n  IEfix();\n  setAriaHidden();\n\n  if (scrollbarPadding) {\n    fixScrollbar();\n  } // sweetalert2/issues/1247\n\n\n  setTimeout(function () {\n    container.scrollTop = 0;\n  });\n};\n\nvar addClasses = function addClasses(container, popup, params) {\n  if (params.animation) {\n    addClass(popup, swalClasses.show);\n    addClass(container, swalClasses.fade);\n  }\n\n  show(popup);\n  addClass([document.documentElement, document.body, container], swalClasses.shown);\n\n  if (params.heightAuto && params.backdrop && !params.toast) {\n    addClass([document.documentElement, document.body], swalClasses['height-auto']);\n  }\n};\n\nvar handleInputOptionsAndValue = function handleInputOptionsAndValue(instance, params) {\n  if (params.input === 'select' || params.input === 'radio') {\n    handleInputOptions(instance, params);\n  } else if (['text', 'email', 'number', 'tel', 'textarea'].indexOf(params.input) !== -1 && isPromise(params.inputValue)) {\n    handleInputValue(instance, params);\n  }\n};\n\nvar handleInputOptions = function handleInputOptions(instance, params) {\n  var content = getContent();\n\n  var processInputOptions = function processInputOptions(inputOptions) {\n    return populateInputOptions[params.input](content, formatInputOptions(inputOptions), params);\n  };\n\n  if (isPromise(params.inputOptions)) {\n    showLoading();\n    params.inputOptions.then(function (inputOptions) {\n      instance.hideLoading();\n      processInputOptions(inputOptions);\n    });\n  } else if (_typeof(params.inputOptions) === 'object') {\n    processInputOptions(params.inputOptions);\n  } else {\n    error(\"Unexpected type of inputOptions! Expected object, Map or Promise, got \".concat(_typeof(params.inputOptions)));\n  }\n};\n\nvar handleInputValue = function handleInputValue(instance, params) {\n  var input = instance.getInput();\n  hide(input);\n  params.inputValue.then(function (inputValue) {\n    input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : inputValue + '';\n    show(input);\n    input.focus();\n    instance.hideLoading();\n  })[\"catch\"](function (err) {\n    error('Error in inputValue promise: ' + err);\n    input.value = '';\n    show(input);\n    input.focus();\n    instance.hideLoading();\n  });\n};\n\nvar populateInputOptions = {\n  select: function select(content, inputOptions, params) {\n    var select = getChildByClass(content, swalClasses.select);\n    inputOptions.forEach(function (inputOption) {\n      var optionValue = inputOption[0];\n      var optionLabel = inputOption[1];\n      var option = document.createElement('option');\n      option.value = optionValue;\n      option.innerHTML = optionLabel;\n\n      if (params.inputValue.toString() === optionValue.toString()) {\n        option.selected = true;\n      }\n\n      select.appendChild(option);\n    });\n    select.focus();\n  },\n  radio: function radio(content, inputOptions, params) {\n    var radio = getChildByClass(content, swalClasses.radio);\n    inputOptions.forEach(function (inputOption) {\n      var radioValue = inputOption[0];\n      var radioLabel = inputOption[1];\n      var radioInput = document.createElement('input');\n      var radioLabelElement = document.createElement('label');\n      radioInput.type = 'radio';\n      radioInput.name = swalClasses.radio;\n      radioInput.value = radioValue;\n\n      if (params.inputValue.toString() === radioValue.toString()) {\n        radioInput.checked = true;\n      }\n\n      var label = document.createElement('span');\n      label.innerHTML = radioLabel;\n      label.className = swalClasses.label;\n      radioLabelElement.appendChild(radioInput);\n      radioLabelElement.appendChild(label);\n      radio.appendChild(radioLabelElement);\n    });\n    var radios = radio.querySelectorAll('input');\n\n    if (radios.length) {\n      radios[0].focus();\n    }\n  }\n  /**\n   * Converts `inputOptions` into an array of `[value, label]`s\n   * @param inputOptions\n   */\n\n};\n\nvar formatInputOptions = function formatInputOptions(inputOptions) {\n  var result = [];\n\n  if (typeof Map !== 'undefined' && inputOptions instanceof Map) {\n    inputOptions.forEach(function (value, key) {\n      result.push([key, value]);\n    });\n  } else {\n    Object.keys(inputOptions).forEach(function (key) {\n      result.push([key, inputOptions[key]]);\n    });\n  }\n\n  return result;\n};\n\nvar handleConfirmButtonClick = function handleConfirmButtonClick(instance, innerParams) {\n  instance.disableButtons();\n\n  if (innerParams.input) {\n    handleConfirmWithInput(instance, innerParams);\n  } else {\n    confirm(instance, innerParams, true);\n  }\n};\nvar handleCancelButtonClick = function handleCancelButtonClick(instance, dismissWith) {\n  instance.disableButtons();\n  dismissWith(DismissReason.cancel);\n};\n\nvar handleConfirmWithInput = function handleConfirmWithInput(instance, innerParams) {\n  var inputValue = getInputValue(instance, innerParams);\n\n  if (innerParams.inputValidator) {\n    instance.disableInput();\n    var validationPromise = Promise.resolve().then(function () {\n      return innerParams.inputValidator(inputValue, innerParams.validationMessage);\n    });\n    validationPromise.then(function (validationMessage) {\n      instance.enableButtons();\n      instance.enableInput();\n\n      if (validationMessage) {\n        instance.showValidationMessage(validationMessage);\n      } else {\n        confirm(instance, innerParams, inputValue);\n      }\n    });\n  } else if (!instance.getInput().checkValidity()) {\n    instance.enableButtons();\n    instance.showValidationMessage(innerParams.validationMessage);\n  } else {\n    confirm(instance, innerParams, inputValue);\n  }\n};\n\nvar succeedWith = function succeedWith(instance, value) {\n  instance.closePopup({\n    value: value\n  });\n};\n\nvar confirm = function confirm(instance, innerParams, value) {\n  if (innerParams.showLoaderOnConfirm) {\n    showLoading(); // TODO: make showLoading an *instance* method\n  }\n\n  if (innerParams.preConfirm) {\n    instance.resetValidationMessage();\n    var preConfirmPromise = Promise.resolve().then(function () {\n      return innerParams.preConfirm(value, innerParams.validationMessage);\n    });\n    preConfirmPromise.then(function (preConfirmValue) {\n      if (isVisible(getValidationMessage()) || preConfirmValue === false) {\n        instance.hideLoading();\n      } else {\n        succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);\n      }\n    });\n  } else {\n    succeedWith(instance, value);\n  }\n};\n\nvar getInputValue = function getInputValue(instance, innerParams) {\n  var input = instance.getInput();\n\n  if (!input) {\n    return null;\n  }\n\n  switch (innerParams.input) {\n    case 'checkbox':\n      return getCheckboxValue(input);\n\n    case 'radio':\n      return getRadioValue(input);\n\n    case 'file':\n      return getFileValue(input);\n\n    default:\n      return innerParams.inputAutoTrim ? input.value.trim() : input.value;\n  }\n};\n\nvar getCheckboxValue = function getCheckboxValue(input) {\n  return input.checked ? 1 : 0;\n};\n\nvar getRadioValue = function getRadioValue(input) {\n  return input.checked ? input.value : null;\n};\n\nvar getFileValue = function getFileValue(input) {\n  return input.files.length ? input.files[0] : null;\n};\n\nvar addKeydownHandler = function addKeydownHandler(instance, globalState, innerParams, dismissWith) {\n  if (globalState.keydownTarget && globalState.keydownHandlerAdded) {\n    globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {\n      capture: globalState.keydownListenerCapture\n    });\n    globalState.keydownHandlerAdded = false;\n  }\n\n  if (!innerParams.toast) {\n    globalState.keydownHandler = function (e) {\n      return keydownHandler(instance, e, innerParams, dismissWith);\n    };\n\n    globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();\n    globalState.keydownListenerCapture = innerParams.keydownListenerCapture;\n    globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {\n      capture: globalState.keydownListenerCapture\n    });\n    globalState.keydownHandlerAdded = true;\n  }\n}; // Focus handling\n\nvar setFocus = function setFocus(innerParams, index, increment) {\n  var focusableElements = getFocusableElements(innerParams.focusCancel); // search for visible elements and select the next possible match\n\n  for (var i = 0; i < focusableElements.length; i++) {\n    index = index + increment; // rollover to first item\n\n    if (index === focusableElements.length) {\n      index = 0; // go to last item\n    } else if (index === -1) {\n      index = focusableElements.length - 1;\n    }\n\n    return focusableElements[index].focus();\n  } // no visible focusable elements, focus the popup\n\n\n  getPopup().focus();\n};\nvar arrowKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Left', 'Right', 'Up', 'Down' // IE11\n];\nvar escKeys = ['Escape', 'Esc' // IE11\n];\n\nvar keydownHandler = function keydownHandler(instance, e, innerParams, dismissWith) {\n  if (innerParams.stopKeydownPropagation) {\n    e.stopPropagation();\n  } // ENTER\n\n\n  if (e.key === 'Enter') {\n    handleEnter(instance, e, innerParams); // TAB\n  } else if (e.key === 'Tab') {\n    handleTab(e, innerParams); // ARROWS - switch focus between buttons\n  } else if (arrowKeys.indexOf(e.key) !== -1) {\n    handleArrows(); // ESC\n  } else if (escKeys.indexOf(e.key) !== -1) {\n    handleEsc(e, innerParams, dismissWith);\n  }\n};\n\nvar handleEnter = function handleEnter(instance, e, innerParams) {\n  // #720 #721\n  if (e.isComposing) {\n    return;\n  }\n\n  if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {\n    if (['textarea', 'file'].indexOf(innerParams.input) !== -1) {\n      return; // do not submit\n    }\n\n    clickConfirm();\n    e.preventDefault();\n  }\n};\n\nvar handleTab = function handleTab(e, innerParams) {\n  var targetElement = e.target;\n  var focusableElements = getFocusableElements(innerParams.focusCancel);\n  var btnIndex = -1;\n\n  for (var i = 0; i < focusableElements.length; i++) {\n    if (targetElement === focusableElements[i]) {\n      btnIndex = i;\n      break;\n    }\n  }\n\n  if (!e.shiftKey) {\n    // Cycle to the next button\n    setFocus(innerParams, btnIndex, 1);\n  } else {\n    // Cycle to the prev button\n    setFocus(innerParams, btnIndex, -1);\n  }\n\n  e.stopPropagation();\n  e.preventDefault();\n};\n\nvar handleArrows = function handleArrows() {\n  var confirmButton = getConfirmButton();\n  var cancelButton = getCancelButton(); // focus Cancel button if Confirm button is currently focused\n\n  if (document.activeElement === confirmButton && isVisible(cancelButton)) {\n    cancelButton.focus(); // and vice versa\n  } else if (document.activeElement === cancelButton && isVisible(confirmButton)) {\n    confirmButton.focus();\n  }\n};\n\nvar handleEsc = function handleEsc(e, innerParams, dismissWith) {\n  if (callIfFunction(innerParams.allowEscapeKey)) {\n    e.preventDefault();\n    dismissWith(DismissReason.esc);\n  }\n};\n\nvar handlePopupClick = function handlePopupClick(domCache, innerParams, dismissWith) {\n  if (innerParams.toast) {\n    handleToastClick(domCache, innerParams, dismissWith);\n  } else {\n    // Ignore click events that had mousedown on the popup but mouseup on the container\n    // This can happen when the user drags a slider\n    handleModalMousedown(domCache); // Ignore click events that had mousedown on the container but mouseup on the popup\n\n    handleContainerMousedown(domCache);\n    handleModalClick(domCache, innerParams, dismissWith);\n  }\n};\n\nvar handleToastClick = function handleToastClick(domCache, innerParams, dismissWith) {\n  // Closing toast by internal click\n  domCache.popup.onclick = function () {\n    if (innerParams.showConfirmButton || innerParams.showCancelButton || innerParams.showCloseButton || innerParams.input) {\n      return;\n    }\n\n    dismissWith(DismissReason.close);\n  };\n};\n\nvar ignoreOutsideClick = false;\n\nvar handleModalMousedown = function handleModalMousedown(domCache) {\n  domCache.popup.onmousedown = function () {\n    domCache.container.onmouseup = function (e) {\n      domCache.container.onmouseup = undefined; // We only check if the mouseup target is the container because usually it doesn't\n      // have any other direct children aside of the popup\n\n      if (e.target === domCache.container) {\n        ignoreOutsideClick = true;\n      }\n    };\n  };\n};\n\nvar handleContainerMousedown = function handleContainerMousedown(domCache) {\n  domCache.container.onmousedown = function () {\n    domCache.popup.onmouseup = function (e) {\n      domCache.popup.onmouseup = undefined; // We also need to check if the mouseup target is a child of the popup\n\n      if (e.target === domCache.popup || domCache.popup.contains(e.target)) {\n        ignoreOutsideClick = true;\n      }\n    };\n  };\n};\n\nvar handleModalClick = function handleModalClick(domCache, innerParams, dismissWith) {\n  domCache.container.onclick = function (e) {\n    if (ignoreOutsideClick) {\n      ignoreOutsideClick = false;\n      return;\n    }\n\n    if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {\n      dismissWith(DismissReason.backdrop);\n    }\n  };\n};\n\nfunction _main(userParams) {\n  showWarningsForParams(userParams); // Check if there is another Swal closing\n\n  if (getPopup() && globalState.swalCloseEventFinishedCallback) {\n    globalState.swalCloseEventFinishedCallback();\n    delete globalState.swalCloseEventFinishedCallback;\n  } // Check if there is a swal disposal defer timer\n\n\n  if (globalState.deferDisposalTimer) {\n    clearTimeout(globalState.deferDisposalTimer);\n    delete globalState.deferDisposalTimer;\n  }\n\n  var innerParams = _extends({}, defaultParams, userParams);\n\n  setParameters(innerParams);\n  Object.freeze(innerParams); // clear the previous timer\n\n  if (globalState.timeout) {\n    globalState.timeout.stop();\n    delete globalState.timeout;\n  } // clear the restore focus timeout\n\n\n  clearTimeout(globalState.restoreFocusTimeout);\n  var domCache = populateDomCache(this);\n  render(this, innerParams);\n  privateProps.innerParams.set(this, innerParams);\n  return swalPromise(this, domCache, innerParams);\n}\n\nvar swalPromise = function swalPromise(instance, domCache, innerParams) {\n  return new Promise(function (resolve) {\n    // functions to handle all closings/dismissals\n    var dismissWith = function dismissWith(dismiss) {\n      instance.closePopup({\n        dismiss: dismiss\n      });\n    };\n\n    privateMethods.swalPromiseResolve.set(instance, resolve);\n    setupTimer(globalState, innerParams, dismissWith);\n\n    domCache.confirmButton.onclick = function () {\n      return handleConfirmButtonClick(instance, innerParams);\n    };\n\n    domCache.cancelButton.onclick = function () {\n      return handleCancelButtonClick(instance, dismissWith);\n    };\n\n    domCache.closeButton.onclick = function () {\n      return dismissWith(DismissReason.close);\n    };\n\n    handlePopupClick(domCache, innerParams, dismissWith);\n    addKeydownHandler(instance, globalState, innerParams, dismissWith);\n\n    if (innerParams.toast && (innerParams.input || innerParams.footer || innerParams.showCloseButton)) {\n      addClass(document.body, swalClasses['toast-column']);\n    } else {\n      removeClass(document.body, swalClasses['toast-column']);\n    }\n\n    handleInputOptionsAndValue(instance, innerParams);\n    openPopup(innerParams);\n    initFocus(domCache, innerParams); // Scroll container to top on open (#1247)\n\n    domCache.container.scrollTop = 0;\n  });\n};\n\nvar populateDomCache = function populateDomCache(instance) {\n  var domCache = {\n    popup: getPopup(),\n    container: getContainer(),\n    content: getContent(),\n    actions: getActions(),\n    confirmButton: getConfirmButton(),\n    cancelButton: getCancelButton(),\n    closeButton: getCloseButton(),\n    validationMessage: getValidationMessage(),\n    progressSteps: getProgressSteps()\n  };\n  privateProps.domCache.set(instance, domCache);\n  return domCache;\n};\n\nvar setupTimer = function setupTimer(globalState$$1, innerParams, dismissWith) {\n  if (innerParams.timer) {\n    globalState$$1.timeout = new Timer(function () {\n      dismissWith('timer');\n      delete globalState$$1.timeout;\n    }, innerParams.timer);\n  }\n};\n\nvar initFocus = function initFocus(domCache, innerParams) {\n  if (innerParams.toast) {\n    return;\n  }\n\n  if (!callIfFunction(innerParams.allowEnterKey)) {\n    return blurActiveElement();\n  }\n\n  if (innerParams.focusCancel && isVisible(domCache.cancelButton)) {\n    return domCache.cancelButton.focus();\n  }\n\n  if (innerParams.focusConfirm && isVisible(domCache.confirmButton)) {\n    return domCache.confirmButton.focus();\n  }\n\n  setFocus(innerParams, -1, 1);\n};\n\nvar blurActiveElement = function blurActiveElement() {\n  if (document.activeElement && typeof document.activeElement.blur === 'function') {\n    document.activeElement.blur();\n  }\n};\n\n/**\n * Updates popup parameters.\n */\n\nfunction update(params) {\n  var validUpdatableParams = {}; // assign valid params from `params` to `defaults`\n\n  Object.keys(params).forEach(function (param) {\n    if (Swal.isUpdatableParameter(param)) {\n      validUpdatableParams[param] = params[param];\n    } else {\n      warn(\"Invalid parameter to update: \\\"\".concat(param, \"\\\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js\"));\n    }\n  });\n  var innerParams = privateProps.innerParams.get(this);\n\n  var updatedParams = _extends({}, innerParams, validUpdatableParams);\n\n  render(this, updatedParams);\n  privateProps.innerParams.set(this, updatedParams);\n  Object.defineProperties(this, {\n    params: {\n      value: _extends({}, this.params, params),\n      writable: false,\n      enumerable: true\n    }\n  });\n}\n\n\n\nvar instanceMethods = Object.freeze({\n\thideLoading: hideLoading,\n\tdisableLoading: hideLoading,\n\tgetInput: getInput$1,\n\tclose: close,\n\tclosePopup: close,\n\tcloseModal: close,\n\tcloseToast: close,\n\tenableButtons: enableButtons,\n\tdisableButtons: disableButtons,\n\tenableConfirmButton: enableConfirmButton,\n\tdisableConfirmButton: disableConfirmButton,\n\tenableInput: enableInput,\n\tdisableInput: disableInput,\n\tshowValidationMessage: showValidationMessage,\n\tresetValidationMessage: resetValidationMessage$1,\n\tgetProgressSteps: getProgressSteps$1,\n\tsetProgressSteps: setProgressSteps,\n\tshowProgressSteps: showProgressSteps,\n\thideProgressSteps: hideProgressSteps,\n\t_main: _main,\n\tupdate: update\n});\n\nvar currentInstance; // SweetAlert constructor\n\nfunction SweetAlert() {\n  // Prevent run in Node env\n\n  /* istanbul ignore if */\n  if (typeof window === 'undefined') {\n    return;\n  } // Check for the existence of Promise\n\n  /* istanbul ignore if */\n\n\n  if (typeof Promise === 'undefined') {\n    error('This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)');\n  }\n\n  currentInstance = this;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var outerParams = Object.freeze(this.constructor.argsToParams(args));\n  Object.defineProperties(this, {\n    params: {\n      value: outerParams,\n      writable: false,\n      enumerable: true,\n      configurable: true\n    }\n  });\n\n  var promise = this._main(this.params);\n\n  privateProps.promise.set(this, promise);\n} // `catch` cannot be the name of a module export, so we define our thenable methods here instead\n\n\nSweetAlert.prototype.then = function (onFulfilled) {\n  var promise = privateProps.promise.get(this);\n  return promise.then(onFulfilled);\n};\n\nSweetAlert.prototype[\"finally\"] = function (onFinally) {\n  var promise = privateProps.promise.get(this);\n  return promise[\"finally\"](onFinally);\n}; // Assign instance methods from src/instanceMethods/*.js to prototype\n\n\n_extends(SweetAlert.prototype, instanceMethods); // Assign static methods from src/staticMethods/*.js to constructor\n\n\n_extends(SweetAlert, staticMethods); // Proxy to instance methods to constructor, for now, for backwards compatibility\n\n\nObject.keys(instanceMethods).forEach(function (key) {\n  SweetAlert[key] = function () {\n    if (currentInstance) {\n      var _currentInstance;\n\n      return (_currentInstance = currentInstance)[key].apply(_currentInstance, arguments);\n    }\n  };\n});\nSweetAlert.DismissReason = DismissReason;\nSweetAlert.version = '8.17.1';\n\nvar Swal = SweetAlert;\nSwal[\"default\"] = Swal;\n\nreturn Swal;\n\n})));\nif (typeof this !== 'undefined' && this.Sweetalert2){  this.swal = this.sweetAlert = this.Swal = this.SweetAlert = this.Sweetalert2}\n\n\"undefined\"!=typeof document&&function(e,t){var n=e.createElement(\"style\");if(e.getElementsByTagName(\"head\")[0].appendChild(n),n.styleSheet)n.styleSheet.disabled||(n.styleSheet.cssText=t);else try{n.innerHTML=t}catch(e){n.innerText=t}}(document,\"@charset \\\"UTF-8\\\";@-webkit-keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@-webkit-keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@-webkit-keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.875em;width:1.5625em}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.875em;width:1.5625em}}@-webkit-keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@-webkit-keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@-webkit-keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@-webkit-keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}body.swal2-toast-shown .swal2-container{background-color:transparent}body.swal2-toast-shown .swal2-container.swal2-shown{background-color:transparent}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-left,body.swal2-toast-shown .swal2-container.swal2-top-start{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-left,body.swal2-toast-shown .swal2-container.swal2-center-start{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%,-50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-left,body.swal2-toast-shown .swal2-container.swal2-bottom-start{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}body.swal2-toast-column .swal2-toast{flex-direction:column;align-items:stretch}body.swal2-toast-column .swal2-toast .swal2-actions{flex:1;align-self:stretch;height:2.2em;margin-top:.3125em}body.swal2-toast-column .swal2-toast .swal2-loading{justify-content:center}body.swal2-toast-column .swal2-toast .swal2-input{height:2em;margin:.3125em auto;font-size:1em}body.swal2-toast-column .swal2-toast .swal2-validation-message{font-size:1em}.swal2-popup.swal2-toast{flex-direction:row;align-items:center;width:auto;padding:.625em;overflow-y:hidden;box-shadow:0 0 .625em #d9d9d9}.swal2-popup.swal2-toast .swal2-header{flex-direction:row}.swal2-popup.swal2-toast .swal2-title{flex-grow:1;justify-content:flex-start;margin:0 .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{position:static;width:.8em;height:.8em;line-height:.8}.swal2-popup.swal2-toast .swal2-content{justify-content:flex-start;font-size:1em}.swal2-popup.swal2-toast .swal2-icon{width:2em;min-width:2em;height:2em;margin:0}.swal2-popup.swal2-toast .swal2-icon::before{display:flex;align-items:center;font-size:2em;font-weight:700}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-popup.swal2-toast .swal2-icon::before{font-size:.25em}}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{flex-basis:auto!important;width:auto;height:auto;margin:0 .3125em}.swal2-popup.swal2-toast .swal2-styled{margin:0 .3125em;padding:.3125em .625em;font-size:1em}.swal2-popup.swal2-toast .swal2-styled:focus{box-shadow:0 0 0 .0625em #fff,0 0 0 .125em rgba(50,100,150,.4)}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.8em;left:-.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast.swal2-show{-webkit-animation:swal2-toast-show .5s;animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{-webkit-animation:swal2-toast-hide .1s forwards;animation:swal2-toast-hide .1s forwards}.swal2-popup.swal2-toast .swal2-animate-success-icon .swal2-success-line-tip{-webkit-animation:swal2-toast-animate-success-line-tip .75s;animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-animate-success-icon .swal2-success-line-long{-webkit-animation:swal2-toast-animate-success-line-long .75s;animation:swal2-toast-animate-success-line-long .75s}@-webkit-keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@-webkit-keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@-webkit-keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@-webkit-keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto!important}body.swal2-no-backdrop .swal2-shown{top:auto;right:auto;bottom:auto;left:auto;max-width:calc(100% - .625em * 2);background-color:transparent}body.swal2-no-backdrop .swal2-shown>.swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}body.swal2-no-backdrop .swal2-shown.swal2-top{top:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-shown.swal2-top-left,body.swal2-no-backdrop .swal2-shown.swal2-top-start{top:0;left:0}body.swal2-no-backdrop .swal2-shown.swal2-top-end,body.swal2-no-backdrop .swal2-shown.swal2-top-right{top:0;right:0}body.swal2-no-backdrop .swal2-shown.swal2-center{top:50%;left:50%;transform:translate(-50%,-50%)}body.swal2-no-backdrop .swal2-shown.swal2-center-left,body.swal2-no-backdrop .swal2-shown.swal2-center-start{top:50%;left:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-shown.swal2-center-end,body.swal2-no-backdrop .swal2-shown.swal2-center-right{top:50%;right:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-shown.swal2-bottom{bottom:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-shown.swal2-bottom-left,body.swal2-no-backdrop .swal2-shown.swal2-bottom-start{bottom:0;left:0}body.swal2-no-backdrop .swal2-shown.swal2-bottom-end,body.swal2-no-backdrop .swal2-shown.swal2-bottom-right{right:0;bottom:0}.swal2-container{display:flex;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;flex-direction:row;align-items:center;justify-content:center;padding:.625em;overflow-x:hidden;background-color:transparent;-webkit-overflow-scrolling:touch}.swal2-container.swal2-top{align-items:flex-start}.swal2-container.swal2-top-left,.swal2-container.swal2-top-start{align-items:flex-start;justify-content:flex-start}.swal2-container.swal2-top-end,.swal2-container.swal2-top-right{align-items:flex-start;justify-content:flex-end}.swal2-container.swal2-center{align-items:center}.swal2-container.swal2-center-left,.swal2-container.swal2-center-start{align-items:center;justify-content:flex-start}.swal2-container.swal2-center-end,.swal2-container.swal2-center-right{align-items:center;justify-content:flex-end}.swal2-container.swal2-bottom{align-items:flex-end}.swal2-container.swal2-bottom-left,.swal2-container.swal2-bottom-start{align-items:flex-end;justify-content:flex-start}.swal2-container.swal2-bottom-end,.swal2-container.swal2-bottom-right{align-items:flex-end;justify-content:flex-end}.swal2-container.swal2-bottom-end>:first-child,.swal2-container.swal2-bottom-left>:first-child,.swal2-container.swal2-bottom-right>:first-child,.swal2-container.swal2-bottom-start>:first-child,.swal2-container.swal2-bottom>:first-child{margin-top:auto}.swal2-container.swal2-grow-fullscreen>.swal2-modal{display:flex!important;flex:1;align-self:stretch;justify-content:center}.swal2-container.swal2-grow-row>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container.swal2-grow-column{flex:1;flex-direction:column}.swal2-container.swal2-grow-column.swal2-bottom,.swal2-container.swal2-grow-column.swal2-center,.swal2-container.swal2-grow-column.swal2-top{align-items:center}.swal2-container.swal2-grow-column.swal2-bottom-left,.swal2-container.swal2-grow-column.swal2-bottom-start,.swal2-container.swal2-grow-column.swal2-center-left,.swal2-container.swal2-grow-column.swal2-center-start,.swal2-container.swal2-grow-column.swal2-top-left,.swal2-container.swal2-grow-column.swal2-top-start{align-items:flex-start}.swal2-container.swal2-grow-column.swal2-bottom-end,.swal2-container.swal2-grow-column.swal2-bottom-right,.swal2-container.swal2-grow-column.swal2-center-end,.swal2-container.swal2-grow-column.swal2-center-right,.swal2-container.swal2-grow-column.swal2-top-end,.swal2-container.swal2-grow-column.swal2-top-right{align-items:flex-end}.swal2-container.swal2-grow-column>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container:not(.swal2-top):not(.swal2-top-start):not(.swal2-top-end):not(.swal2-top-left):not(.swal2-top-right):not(.swal2-center-start):not(.swal2-center-end):not(.swal2-center-left):not(.swal2-center-right):not(.swal2-bottom):not(.swal2-bottom-start):not(.swal2-bottom-end):not(.swal2-bottom-left):not(.swal2-bottom-right):not(.swal2-grow-fullscreen)>.swal2-modal{margin:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-container .swal2-modal{margin:0!important}}.swal2-container.swal2-fade{transition:background-color .1s}.swal2-container.swal2-shown{background-color:rgba(0,0,0,.4)}.swal2-popup{display:none;position:relative;box-sizing:border-box;flex-direction:column;justify-content:center;width:32em;max-width:100%;padding:1.25em;border:none;border-radius:.3125em;background:#fff;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:0}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-header{display:flex;flex-direction:column;align-items:center}.swal2-title{position:relative;max-width:100%;margin:0 0 .4em;padding:0;color:#595959;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;flex-wrap:wrap;align-items:center;justify-content:center;width:100%;margin:1.25em auto 0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}.swal2-actions.swal2-loading .swal2-styled.swal2-confirm{box-sizing:border-box;width:2.5em;height:2.5em;margin:.46875em;padding:0;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:.25em solid transparent;border-radius:100%;border-color:transparent;background-color:transparent!important;color:transparent;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-actions.swal2-loading .swal2-styled.swal2-cancel{margin-right:30px;margin-left:30px}.swal2-actions.swal2-loading :not(.swal2-styled).swal2-confirm::after{content:\\\"\\\";display:inline-block;width:15px;height:15px;margin-left:5px;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:3px solid #999;border-radius:50%;border-right-color:transparent;box-shadow:1px 1px 1px #fff}.swal2-styled{margin:.3125em;padding:.625em 2em;box-shadow:none;font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#3085d6;color:#fff;font-size:1.0625em}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#aaa;color:#fff;font-size:1.0625em}.swal2-styled:focus{outline:0;box-shadow:0 0 0 2px #fff,0 0 0 4px rgba(50,100,150,.4)}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1.25em 0 0;padding:1em 0 0;border-top:1px solid #eee;color:#545454;font-size:1em}.swal2-image{max-width:100%;margin:1.25em auto}.swal2-close{position:absolute;z-index:2;top:0;right:0;justify-content:center;width:1.2em;height:1.2em;padding:0;overflow:hidden;transition:color .1s ease-out;border:none;border-radius:0;outline:initial;background:0 0;color:#ccc;font-family:serif;font-size:2.5em;line-height:1.2;cursor:pointer}.swal2-close:hover{transform:none;background:0 0;color:#f27474}.swal2-content{z-index:1;justify-content:center;margin:0;padding:0;color:#545454;font-size:1.125em;font-weight:400;line-height:normal;text-align:center;word-wrap:break-word}.swal2-checkbox,.swal2-file,.swal2-input,.swal2-radio,.swal2-select,.swal2-textarea{margin:1em auto}.swal2-file,.swal2-input,.swal2-textarea{box-sizing:border-box;width:100%;transition:border-color .3s,box-shadow .3s;border:1px solid #d9d9d9;border-radius:.1875em;background:inherit;box-shadow:inset 0 1px 1px rgba(0,0,0,.06);color:inherit;font-size:1.125em}.swal2-file.swal2-inputerror,.swal2-input.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474!important;box-shadow:0 0 2px #f27474!important}.swal2-file:focus,.swal2-input:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:0;box-shadow:0 0 3px #c4e6f5}.swal2-file::-webkit-input-placeholder,.swal2-input::-webkit-input-placeholder,.swal2-textarea::-webkit-input-placeholder{color:#ccc}.swal2-file::-moz-placeholder,.swal2-input::-moz-placeholder,.swal2-textarea::-moz-placeholder{color:#ccc}.swal2-file:-ms-input-placeholder,.swal2-input:-ms-input-placeholder,.swal2-textarea:-ms-input-placeholder{color:#ccc}.swal2-file::-ms-input-placeholder,.swal2-input::-ms-input-placeholder,.swal2-textarea::-ms-input-placeholder{color:#ccc}.swal2-file::placeholder,.swal2-input::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em auto;background:inherit}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-input[type=number]{max-width:10em}.swal2-file{background:inherit;font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:inherit;color:inherit;font-size:1.125em}.swal2-checkbox,.swal2-radio{align-items:center;justify-content:center;background:inherit;color:inherit}.swal2-checkbox label,.swal2-radio label{margin:0 .6em;font-size:1.125em}.swal2-checkbox input,.swal2-radio input{margin:0 .4em}.swal2-validation-message{display:none;align-items:center;justify-content:center;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:\\\"!\\\";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;zoom:normal;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}@supports (-ms-accelerator:true){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@-moz-document url-prefix(){.swal2-close:focus{outline:2px solid rgba(50,100,150,.4)}}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:1.25em auto 1.875em;zoom:normal;border:.25em solid transparent;border-radius:50%;font-family:inherit;line-height:5em;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-icon::before{display:flex;align-items:center;height:92%;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-warning::before{content:\\\"!\\\"}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-info::before{content:\\\"i\\\"}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-question::before{content:\\\"?\\\"}.swal2-icon.swal2-question.swal2-arabic-question-mark::before{content:\\\"؟\\\"}.swal2-icon.swal2-success{border-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-.25em;left:-.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.875em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-progress-steps{align-items:center;margin:0 0 1.25em;padding:0;background:inherit;font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;width:2em;height:2em;border-radius:2em;background:#3085d6;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#3085d6}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;width:2.5em;height:.4em;margin:0 -1px;background:#3085d6}[class^=swal2]{-webkit-tap-highlight-color:transparent}.swal2-show{-webkit-animation:swal2-show .3s;animation:swal2-show .3s}.swal2-show.swal2-noanimation{-webkit-animation:none;animation:none}.swal2-hide{-webkit-animation:swal2-hide .15s forwards;animation:swal2-hide .15s forwards}.swal2-hide.swal2-noanimation{-webkit-animation:none;animation:none}.swal2-rtl .swal2-close{right:auto;left:0}.swal2-animate-success-icon .swal2-success-line-tip{-webkit-animation:swal2-animate-success-line-tip .75s;animation:swal2-animate-success-line-tip .75s}.swal2-animate-success-icon .swal2-success-line-long{-webkit-animation:swal2-animate-success-line-long .75s;animation:swal2-animate-success-line-long .75s}.swal2-animate-success-icon .swal2-success-circular-line-right{-webkit-animation:swal2-rotate-success-circular-line 4.25s ease-in;animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-animate-error-icon{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-animate-error-icon .swal2-x-mark{-webkit-animation:swal2-animate-error-x-mark .5s;animation:swal2-animate-error-x-mark .5s}@-webkit-keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll!important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static!important}}\");","<div class=\"sidebar\" data-color=\"white\" data-active-color=\"danger\">\n  <!--\n      Tip 1: You can change the color of the sidebar using: data-color=\"blue | green | orange | red | yellow | Darkblue\"\n  -->\n  <div class=\"logo\">\n    <a routerLink=\"/pages/dashboard/\" class=\"simple-text logo-mini\">\n      <div class=\"logo-image-small\">\n        <img [src]='sideBarCompanyLogo'>\n      </div>\n    </a>\n    <a routerLink=\"/pages/dashboard\" style=\"cursor: pointer\" class=\"simple-text logo-normal\">\n     {{ sideBarCompanyName }}\n    </a>\n  </div>\n  <div class=\"sidebar-wrapper\">\n    <ul class=\"nav\">\n      <li class=\"list-group\">\n        <a routerLink=\"/pages/dashboard/\">\n          <i class=\"fa fa-home\"></i>\n          <p>Dashboard</p>\n        </a>\n      </li>\n      <li class=\"list-group\" *ngIf=\"adminStatus\">\n        <a routerLink=\"/pages/roles/\" >\n          <i class=\"fas fa-user-tag\"></i>\n          <p>Roles</p>\n        </a>\n      </li>\n      <li class=\"list-group\" *ngIf=\"adminStatus\">\n        <a routerLink=\"/pages/sub-user/\">\n          <i class=\"fa fa-users\"></i>\n          <p>Users</p>\n        </a>\n      </li>\n      <li class=\"list-group\" [ngStyle]=\"{'display':companyLength > 0 ? 'block' : 'none'}\">\n        <a routerLink=\"/pages/branches/\">\n          <i class=\"fas fa-building\"></i>\n          <p>Branches</p>\n        </a>\n      </li>\n      <li class=\"list-group\" [ngStyle]=\"{'display':companyLength > 0 ? 'block' : 'none'}\">\n        <a routerLink=\"/pages/department/\">\n          <i class=\"fa fa-sitemap\"></i>\n          <p>Departments</p>\n        </a>\n      </li>\n      <li [ngStyle]=\"{'display':companyLength > 0 ? 'block' : 'none'}\">\n        <a data-toggle=\"collapse\" href=\"#pagesExamples\" class=\"collapsed\" aria-expanded=\"false\">\n          <i class=\"fa fa-forward\"></i>\n          <p>Employee Masters<b class=\"caret\"></b></p>\n        </a>\n        <div class=\"collapse\" id=\"pagesExamples\" >\n          <ul class=\"nav\">\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/leave-types/\">\n                <i class=\"fa fa-life-saver sub-menu-icon\"></i>\n                <p>Leave Types</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/job-profile/\">\n                <i class=\"fas fa-id-card sub-menu-icon\"></i>\n                <p>Job Profiles</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/job-category/\">\n                <i class=\"fa fa-tasks sub-menu-icon\"></i>\n                <p>Job Categories</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/skill-category/\">\n                <i class=\"fa fa-shekel sub-menu-icon\"></i>\n                <p>Skill Categories</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/document-types/\">\n                <i class=\"fa fa-file sub-menu-icon\"></i>\n                <p>Document Types</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/holiday/\">\n                <i class=\"fa fa-bed sub-menu-icon\"></i>\n                <p>Holidays</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/payment-heads/\">\n                <i class=\"fas fa-chart-area\"></i>\n                <p>Payment Heads</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/graderule/\">\n                <i class=\"fab fa-pied-piper-hat\"></i>\n                <p>Grade Rule</p>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </li>\n      <li class=\"list-group\" [ngStyle]=\"{'display':companyLength > 0 ? 'block' : 'none'}\">\n        <a routerLink=\"/pages/employee-wizard/\">\n          <i class=\"fa fa-group\"></i>\n          <p>Employees</p>\n        </a>\n      </li>\n\n      <li [ngStyle]=\"{'display':employeeLength > 0 ? 'block' : 'none'}\">\n        <a data-toggle=\"collapse\" href=\"#leaveManagement\" class=\"collapsed\" aria-expanded=\"false\">\n          <i class=\"fa fa-forward\"></i>\n          <p>Leave Management<b class=\"caret\"></b></p>\n        </a>\n        <div class=\"collapse\" id=\"leaveManagement\" >\n          <ul class=\"nav\">\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/leave-management/\">\n                <i class=\"fa fa-life-saver sub-menu-icon\"></i>\n                <p>Manage Earned Leave</p>\n              </a>\n            </li>\n          </ul>\n          <ul class=\"nav\">\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/leave-management/list-leave\">\n                <i class=\"fas fa-door-open sub-menu-icon\"></i>\n                <p>Manage Leave Status</p>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </li>\n\n      <li [ngStyle]=\"{'display':employeeLength > 0 ? 'block' : 'none'}\">\n        <a data-toggle=\"collapse\" href=\"#payrollManagement\" class=\"collapsed\" aria-expanded=\"false\">\n          <i class=\"fa fa-forward\"></i>\n          <p>Payroll<b class=\"caret\"></b></p>\n        </a>\n        <div class=\"collapse\" id=\"payrollManagement\" >\n          <ul class=\"nav\">\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/payroll\">\n                <i class=\"fa fa-money sub-menu-icon\"></i>\n                <p>Salary Slips</p>\n              </a>\n            </li>\n          </ul>\n          <ul class=\"nav\">\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/payroll/payroll-sheet\">\n                <i class=\"fa fa-file-excel-o sub-menu-icon\"></i>\n                <p>Salary Sheets</p>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </li>\n      <li class=\"list-group\" [ngStyle]=\"{'display':companyLength > 0 ? 'block' : 'none'}\">\n        <a routerLink=\"/pages/company/company-report\">\n          <i class=\"fa fa-file\"></i>\n          <p>Company Report</p>\n        </a>\n      </li>\n\n\n\n    </ul>\n  </div>","import { Component, OnInit } from '@angular/core';\nimport { ApiService } from 'src/app/services/api.service';\nimport { environment } from '../../../environments/environment';\nimport { EmployeeService } from 'src/app/pages/employee-wizard/services/employee.service';\ndeclare const $: any;\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss']\n})\nexport class SidebarComponent implements OnInit {\ncompanyLength: any;\nsideBarCompanyName: any;\nsideBarCompanyLogo: any;\nemployeeLength: any;\nadminStatus: Boolean;\n\n\n  constructor(private api: ApiService,\n    private companyEmployeeListAPI: EmployeeService) { }\n\n  ngOnInit() {\n      $('.list-group').click(function() {\n          $(this).addClass('active').siblings().removeClass('active');\n      });\n\n       // Get Company List Length\n    this.api.getListData().subscribe((data)=> {\n      if(data.status === 'success'){\n        this.companyLength = data.company.length;\n        if(this.companyLength > 0){\n          for(var i = 0; i<this.companyLength; i++){\n            var sessionId = sessionStorage.getItem('companyId');\n            if(sessionId === undefined){\n              this.sideBarCompanyName = 'AryaVrat payroll';\n              this.sideBarCompanyLogo = `${environment.apiBaseUrl}/assets/images/aryavrat-infotech-squarelogo-1533534321648.png`;\n              break;\n            }\n            if(data.company[i]._id == sessionId){\n              this.sideBarCompanyName = data.company[i].name;\n              if(data.company[i].logoUrl === `${environment.apiBaseUrl}/assets/images/aryavrat-infotech-squarelogo-1533534321648.png`){\n                this,this.sideBarCompanyLogo = `${environment.apiBaseUrl}/assets/images/aryavrat-infotech-squarelogo-1533534321648.png`;\n              } else{\n                this.sideBarCompanyLogo = `${environment.apiBaseUrl}/${data.company[i].logoUrl.substr(data.company[i].logoUrl.indexOf('public')+6)}`;\n              }\n            }\n          }\n        } else {\n          this.sideBarCompanyName = 'AryaVrat payroll';\n          this.sideBarCompanyLogo = `${environment.apiBaseUrl}/assets/images/aryavrat-infotech-squarelogo-1533534321648.png`;\n        }\n      }\n    })\n\n    // Get Employees List For individual company\n    this.companyEmployeeListAPI.getEmployeeList('Active').subscribe((data)=>{\n      if(data.status === 'success'){\n        this.employeeLength = data.data.length;\n      }\n    })\n\n    // Get Admin Status\n    this.companyEmployeeListAPI.isAdmin().subscribe((data)=>{\n      if(data.status === 'success'){\n        this.adminStatus = data.data;\n      }\n    })\n    }\n\n  }\n\n\n","<nav class=\"navbar navbar-expand-lg navbar-absolute fixed-top navbar-transparent\">\n  <div class=\"container-fluid\">\n    <div class=\"navbar-wrapper\">\n      <div class=\"navbar-toggle\">\n        <button type=\"button\" class=\"navbar-toggler\" data-toggle=\"navbar-collapse\" >\n          <span class=\"navbar-toggler-bar bar1\"></span>\n          <span class=\"navbar-toggler-bar bar2\"></span>\n          <span class=\"navbar-toggler-bar bar3\"></span>\n        </button>\n      </div>\n      <a *ngIf=\"companyName !== 'No Company Added'\"class=\"navbar-brand\" routerLink=\"/pages/dashboard\"><strong>{{ companyName }} Payroll</strong></a>\n      <a *ngIf=\"companyName === 'No Company Added' \"class=\"navbar-brand\" routerLink=\"/pages/dashboard\"><strong>Aryavrat Payroll</strong></a>\n    </div>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"navbar-collapse\"\n      aria-controls=\"navigation-index\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" (click)=\"toggleNavbar()\">\n      <span class=\"navbar-toggler-bar navbar-kebab\"></span>\n      <span class=\"navbar-toggler-bar navbar-kebab\"></span>\n      <span class=\"navbar-toggler-bar navbar-kebab\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse justify-content-end \" id=\"navigation\" [ngClass]=\"{'show':navbarOpen}\">\n        <form>\n            <div class=\"input-group no-border form-group\">\n              <select class=\"dropdown dropdown-toggle form-control\" id=\"headerCompanyDropDown\" Name=\"Company\" (change)=\"onSelect($event.target.value)\"\n              #selectOption>\n              <option class=\"dropdown-item\"  selected disabled>{{ companyName }}</option>\n              <option class=\"dropdown-item\"  *ngFor=\"let company of companyListData\" value=\"{{company._id}}\">{{ company.name }}</option>\n          </select>\n              </div>\n        </form>\n          &nbsp;\n      <form>\n        <!-- <div class=\"input-group no-border\">\n          <input type=\"text\" value=\"\" class=\"form-control\" placeholder=\"Search...\">\n          <div class=\"input-group-append\">\n            <div class=\"input-group-text\">\n              <i class=\"fa fa-search\"></i>\n            </div>\n          </div>\n        </div> -->\n      </form>\n      <div class=\"nav-item btn-rotate dropdown\">\n          <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n             <img [src]='url' style=\"width: 40px; height: 40px;\" class=\"rounded-circle\" alt=\"Cinque Terre\">\n            <p>\n              <span class=\"d-lg-none d-md-block\">Account</span>\n            </p>\n          </a>\n          <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"navbarDropdownMenuLink\">\n            <a class=\"dropdown-item\" style=\"cursor:pointer\">{{userId}}</a>\n            <a class=\"dropdown-item\" style=\"cursor:pointer\" routerLink='/pages/update-profile' >Update Profile</a>\n            <a class=\"dropdown-item\"  (click)=\"logout()\" style=\"cursor: pointer\">Logout</a>\n          </div>\n      </div>\n    </div>\n  </div>\n</nav>","import { Component, OnInit } from '@angular/core';\nimport { ApiService } from '../services/api.service';\nimport { UtilitiesService } from '../utilities/utilities.service';\n\n@Component({\n  selector: 'app-pages',\n  templateUrl: './pages.component.html',\n  styleUrls: ['./pages.component.scss']\n})\n\nexport class PagesComponent implements OnInit{\n\n  constructor(\n\n  ) { }\n\n  ngOnInit(){\n\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ApiService } from 'src/app/services/api.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  companyListData: any[];\n  filterListData: any[];\n  navbarOpen = false;\n  companyName: String;\n  public userId;\n  url: any;\n\n  toggleNavbar() {\n    this.navbarOpen = !this.navbarOpen;\n  }\n\n  constructor(private apiService: ApiService, private route: Router, private ngZone: NgZone, ) { }\n\n  ngOnInit() {\n    this.userProfile();\n    this.getList();\n    this.getIndividualList();\n    let getmyVal: any = JSON.parse(localStorage.getItem(\"myVal\"));\n    let id = getmyVal.split('@');\n    this.userId = id[0];\n  }\n\n  //Method for show data in the list\n  getList() {\n    try {\n      this.apiService.getListData().subscribe(data => {\n        if (data.status === 'success' || data.status === 200) {\n          if (data.company.length === 0) {\n            this.ngZone.run(() => this.route.navigateByUrl('/pages/company/add-company'));\n          } else {\n            this.companyListData = data.company;\n          }\n        }\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for show dropdown selected value\n  getIndividualList() {\n    try {\n      if (sessionStorage.getItem('companyId') === \"undefined\") {\n        this.companyName = \"No Company Added\";\n      } else {\n        this.apiService.getIndividualData(sessionStorage.getItem('companyId')).subscribe((data) => {\n          if(data.status === 'success'){\n            this.companyName = data.data.name;\n            this.filterCompanyId();\n          } else {\n            console.log(data.message);\n          }\n        })\n      }\n\n    } catch (err) { }\n  }\n\n  //Method for set selected valuein session storage\n  onSelect(companyId: string) {\n    try {\n      sessionStorage.setItem('companyId', companyId);\n      localStorage.setItem('companyId',companyId);\n      window.location.reload();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n //Method for filter company Name by companyId\n  filterCompanyId() {\n    let companyId = sessionStorage.getItem('companyId');\n    if(companyId != undefined){\n      this.filterListData = this.companyListData.filter(e => e._id !== companyId);\n      this.companyListData = this.filterListData;\n    }\n  }\n\n\n  logout(): void {\n    this.apiService.submitLogout();\n    this.route.navigateByUrl('/users');\n  }\n\n  // User Profile Details\n  userProfile(){\n    try {\n      this.apiService.getUserDetails().subscribe((data)=>{\n        if(data.status === 'success'){\n          this.url = data.data.avatar;\n          if(data.data.name.length > 0){\n            this.userId = data.data.name;\n          }\n        }\n      })\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  ngOnDestroy() {\n  }\n\n}\n","<footer class=\"footer footer-black  \">\n        <div class=\"container-fluid\" >\n          <div class=\"row\">\n            <nav class=\"footer-nav\">\n              <ul>\n                <li>\n                  <!-- <a href=\"https://www.creative-tim.com\" target=\"_blank\">Creative Tim</a> -->\n                </li>\n                <li>\n                  <!-- <a href=\"http://blog.creative-tim.com/\" target=\"_blank\">Blog</a> -->\n                </li>\n                <li>\n                  <!-- <a href=\"https://www.creative-tim.com/license\" target=\"_blank\">Licenses</a> -->\n                </li>\n              </ul>\n            </nav>\n            <div class=\"credits ml-auto\">\n              <span class=\"copyright\">\n                ©\n                <script>\n                  document.write(new Date().getFullYear())\n                </script>made with <i class=\"fa fa-heart heart\"></i> by Aryavrat\n              </span>\n            </div>\n          </div>\n        </div>\n      </footer>\n","\n<div class=\"wrapper\">\n    <div class=\"sidebar-wrapper\">\n        <app-sidebar></app-sidebar>\n    </div>\n\n    <div class=\"main-panel\">\n        <app-header></app-header>\n        <div class=\"content\">\n            <router-outlet></router-outlet>\n        </div>\n        <app-footer></app-footer>\n    </div>\n</div>","<div class=\"card\">\n    <div class=\"card-header\">\n    </div>\n    <div class=\"card-body\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <div class=\"card\">\n\n                        <div class=\"card-body\" style=\"background-color:whitesmoke;\">\n                            <div class=\"card-title mb-4\">\n                                <div class=\"d-flex justify-content-start\">\n                                    <div class=\"image-container\">\n                                        <img [src]='url' id=\"imgProfile\" style=\"width: 150px; height: 150px\" class=\"rounded\" />\n                                        <div class=\"middle\">\n                                            <input type=\"file\" style=\"display: none;\" accept=\"image/*\" id=\"profilePicture\" #file (change)=\"onSelectFile($event)\"/>\n                                            <input type=\"button\" class=\"btn btn-secondary\" id=\"btnChangePicture\" value=\"Change\" (click)=\"file.click()\" />\n                                        </div>\n                                    </div>\n                                    <div class=\"userData ml-3\">\n                                        <h2 class=\"d-block\" style=\"font-size: 1.5rem; font-weight: bold; color: #51cbce; margin-top: 59px\">{{ cardProfileName }}</h2>\n                                        <!-- <h6 class=\"d-block\"><a href=\"javascript:void(0)\">1,500</a> Video Uploads</h6>\n                                        <h6 class=\"d-block\"><a href=\"javascript:void(0)\">300</a> Blog Posts</h6> -->\n                                    </div>\n                                    <div class=\"ml-auto\" *ngIf=\"discardChanges\">\n                                        <input type=\"button\" class=\"btn btn-danger\" id=\"btnDiscard\" value=\"Discard Changes\" (click)=\"discardFunctionality()\"/>\n                                    </div>\n                                </div>\n                            </div>\n                            <form class=\"form-horizontal\" [formGroup]=\"updateProfileForm\" role=\"form\" (ngSubmit)=\"updateProfileData()\" novalidate>\n                                <div class=\"row\">\n                                    <div class=\"col-12\">\n                                        <ul class=\"nav nav-tabs mb-4\" id=\"myTab\" role=\"tablist\">\n                                            <li class=\"nav-item\">\n                                                <a class=\"nav-link active\" id=\"basicInfo-tab\" data-toggle=\"tab\" href=\"#basicInfo\" role=\"tab\" aria-controls=\"basicInfo\" aria-selected=\"true\">Basic Info</a>\n                                            </li>\n                                            <!-- <li class=\"nav-item\">\n                                                <a class=\"nav-link\" id=\"connectedServices-tab\" data-toggle=\"tab\" href=\"#connectedServices\" role=\"tab\" aria-controls=\"connectedServices\" aria-selected=\"false\">Connected Services</a>\n                                            </li> -->\n                                        </ul>\n                                        <div class=\"tab-content ml-1\" id=\"myTabContent\">\n                                            <div class=\"tab-pane fade show active\" id=\"basicInfo\" role=\"tabpanel\" aria-labelledby=\"basicInfo-tab\">\n\n\n                                                <div class=\"row\">\n                                                    <div class=\"col-sm-3 col-md-2 col-5\">\n                                                        <label style=\"font-weight:bold;\">Full Name</label>\n                                                    </div>\n                                                    <div class=\"col-md-8 col-6\">\n                                                        <input class=\"form-demo\" type=\"text\" id=\"profileName\" placeholder=\"Enter Full Name\" formControlName=\"name\" (input)='changeName()'/>\n                                                    </div>\n                                                </div>\n                                                <hr />\n\n                                                <div class=\"row\">\n                                                    <div class=\"col-sm-3 col-md-2 col-5\">\n                                                        <label style=\"font-weight:bold;\">Birth Date</label>\n                                                    </div>\n                                                    <div class=\"col-md-8 col-6\">\n                                                        <input class=\"form-demo\" type=\"date\" placeholder=\"Select DOB\" formControlName=\"birthday\"/>\n                                                    </div>\n                                                </div>\n                                                <hr />\n\n\n                                                <div class=\"row\">\n                                                    <div class=\"col-sm-3 col-md-2 col-5\">\n                                                        <label style=\"font-weight:bold;\">Gender</label>\n                                                    </div>\n                                                    <div class=\"col-md-8 col-6\">\n                                                        <select class=\"dropdown dropdown-toggle form-demo single\" Name=\"Company\" formControlName=\"gender\">\n                                                            <option class=\"dropdown-item\" *ngFor=\"let gender of genderList\" selected=\"{{ gender }}\"\n                                                                value=\"{{ gender }}\">\n                                                                {{ gender }}\n                                                            </option>\n                                                        </select>\n                                                    </div>\n                                                </div>\n                                                <hr />\n                                                <div class=\"row\">\n                                                    <div class=\"col-sm-3 col-md-2 col-5\">\n                                                        <label style=\"font-weight:bold;\">Phone No.</label>\n                                                    </div>\n                                                    <div class=\"col-md-8 col-6\">\n                                                        <input class=\"form-demo\" type=\"text\"  placeholder=\"Enter Phone Number\" formControlName=\"phone\"/>\n                                                        <div *ngFor=\"let validation of validationMessage.phone\">\n                                                            <div style=\"color: red;margin-left: 14px;\"\n                                                              *ngIf=\"updateProfileForm.get('phone').hasError(validation.type) && (updateProfileForm.get('phone').dirty || updateProfileForm.get('phone').touched)\"\n                                                              style=\"color: red;margin-left: 14px;\">\n                                                              {{ validation.message }}\n                                                            </div>\n                                                          </div>\n                                                    </div>\n                                                </div>\n                                                <hr />\n                                                <div class=\"row\">\n                                                    <div class=\"col-sm-3 col-md-2 col-5\">\n                                                        <label style=\"font-weight:bold;\">TimeZone:</label>\n                                                    </div>\n                                                    <div class=\"col-md-8 col-6\">\n                                                        <div class=\"stackblitz-container material\">\n                                                            <div class=\"control-section col-lg-8\">\n                                                            <div class=\"control-wrapper\">\n                                                            <input type=\"text\" id=\"checkbox\">\n                                                            </div>\n                                                            </div>\n                                                            <div class=\"col-lg-4 property-section\">\n                                                            <div id=\"property\" title=\"Properties\">\n                                                            <table id=\"property\" title=\"Properties\">\n                                                            </table>\n                                                            </div>\n                                                            </div>\n                                                            </div>\n                                                    </div>\n                                                </div>\n                                                <hr />\n\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <div class=\"col-sm-offset-2 col-sm-10\">\n                                                  <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"updateProfileForm.invalid\">Update Profile</button>\n                                                  <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"/pages/dashboard/company-list\">Cancel</button>\n\n\n                                                </div>\n                                              </div>\n                                            <!-- <div class=\"tab-pane fade\" id=\"connectedServices\" role=\"tabpanel\" aria-labelledby=\"ConnectedServices-tab\">\n                                                Facebook, Google, Twitter Account that are connected to this account\n                                            </div> -->\n                                        </div>\n                                    </div>\n                                </div>\n                            </form>\n\n\n\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n        </div>\n    </div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport { environment } from '../../../environments/environment';\nimport { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\n/**\n * MultiSelect Checkbox Samples\n */\nimport { MultiSelect, CheckBoxSelection } from '@syncfusion/ej2-dropdowns';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\nimport Swal from 'sweetalert2';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-update-profile',\n  templateUrl: './update-profile.component.html',\n  styleUrls: ['./update-profile.component.scss']\n})\nexport class UpdateProfileComponent implements OnInit {\nurl = '../../../assets/image/profile-image.png';\ndiscardChanges = false;\ngenderList = ['Male','Female','Other','N/A'];\nupdateProfileForm: any;\ncardProfileName = '';\nexistingUrl= '../../../assets/image/profile-image.png';\ntimeZone: any;\nmultiObj: MultiSelect;\ndefaultTimeZone: any;\nuserAvatar: any;\n\n  constructor(public fb: FormBuilder, private APIService: ApiService, private util: UtilitiesService, private router: Router) { }\n\n  ngOnInit() {\n    this.existUpadteProfileForm();\n    this.loadUpadteProfileForm();\n    this.userProfileForm();\n    this.APIService.getTimeZone().subscribe((data)=>{\n      if(data.status === 'success'){\n        this.timeZone = data.data;\n        MultiSelect.Inject(CheckBoxSelection);\n        // initialize the MultiSelect component\n        this.multiObj = new MultiSelect({\n          // set the country data to dataSource property\n          dataSource: this.timeZone,\n          // map the appropriate columns to fields property\n          fields: { text: 'Name', value: 'Code' },\n          // set the type of mode for checkbox to visualized the checkbox added in li element.\n          mode: 'CheckBox',\n          // set the placeholder to MultiSelect input element\n          placeholder: 'Select TimeZone',\n          // set maximum selection length in Multiselect.\n          maximumSelectionLength: 1,\n          // set true for enable the dropdown icon.\n          showDropDownIcon: true,\n          // set the placeholder to MultiSelect filter input element\n          filterBarPlaceholder: 'Search TimeZone',\n          // set the MultiSelect popup height\n          popupHeight: '350px',\n\n        });\n        this.multiObj.appendTo('#checkbox');\n        this.multiObj.value = [this.util.timeZone];\n      }\n    })\n\n  }\n\n  // Load Default Form\n  loadUpadteProfileForm(){\n    try {\n      this.updateProfileForm = this.fb.group({\n        name: new FormControl(''),\n        gender: new FormControl(''),\n        phone: new FormControl('',Validators.compose([\n          Validators.minLength(10),\n          Validators.maxLength(15),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n        ])),\n        birthday: new FormControl('')\n      })\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Fill value With Exists value\n  existUpadteProfileForm(){\n    try {\n      // Get User Details\n      this.APIService.getUserDetails().subscribe((data)=>{\n        if(data.status === 'success'){\n          this.cardProfileName = data.data.name;\n          this.util.timeZone = data.data.timeZone;\n          if(data.data.avatar !== `${environment.apiBaseUrl}/assets/images/aryavrat-infotech-squarelogo-1533534321648.png`){\n            this.url = data.data.avatar;\n            this.existingUrl = data.data.avatar;\n          }\n          this.updateProfileForm = this.fb.group({\n            name: new FormControl(data.data.name),\n            gender: new FormControl(data.data.gender),\n            phone: new FormControl(data.data.phone,Validators.compose([\n              Validators.minLength(10),\n              Validators.maxLength(15),\n              Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n            ])),\n            birthday: new FormControl(data.data.birthday.substring(0,10))\n          })\n        }\n      })\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  validationMessage = {\n    'phone': [\n      { type: 'minlength', message: 'Number too short' },\n      { type: 'maxlength', message: 'Number is too large' },\n      { type: 'pattern', message: 'Company Number not valid' }],\n  }\n\n\n  onSelectFile(event) {\n\n    if (event.target.files && event.target.files[0]) {\n      this.discardChanges = true;\n      var reader = new FileReader();\n\n      reader.readAsDataURL(event.target.files[0]); // read file as data url\n\n      reader.onload = (event: any) => { // called once readAsDataURL is completed\n        this.url = event.target.result;\n      }\n      if (event.target.files.length > 0) {\n        const file = event.target.files[0];\n        this.userAvatar.get('avatar').setValue(file);\n      }\n    }\n  }\n\n  // Discard Image Value\n  discardFunctionality(){\n    try {\n     this.url = this.existingUrl;\n     this.discardChanges = false;\n     this.userAvatar.get('avatar').setValue(['']);\n     (document.getElementById('profilePicture')as HTMLInputElement).value = '';\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Change Profile Name\n  changeName(){\n    try {\n      this.cardProfileName = (document.getElementById('profileName') as HTMLInputElement).value;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Submit form\n  updateProfileData(){\n    try {\n      let cleanUpdateProfileForm = this.util.cleanFormLevelOne(this.updateProfileForm);\n      this.APIService.updateUSerProfile(cleanUpdateProfileForm.value,this.multiObj.value[0]).subscribe((data)=>{\n        if(data.status === 'success'){\n          if((document.getElementById('profilePicture')as HTMLInputElement).value.length > 0){\n            this.APIService.uploadProfileImage(this.userAvatar,\"User\",undefined).subscribe((updateProfile)=>{\n              if(updateProfile.status === 'success'){\n\n                const swalWithBootstrapButtons = Swal.mixin({\n                  customClass: {\n                    confirmButton: 'btn btn-success',\n                    cancelButton: 'btn btn-danger'\n                  },\n                  buttonsStyling: false\n                })\n                swalWithBootstrapButtons.fire({\n                  title: 'Status',\n                  text: data.message,\n                  type: 'success',\n                  showCancelButton: false,\n                  confirmButtonText: 'Ok',\n                  reverseButtons: true,\n                  allowOutsideClick: false\n                }).then((result) => {\n                  if (result.value) {\n                    window.location.reload();\n                  }\n                })\n              }\n            })\n          } else {\n            const swalWithBootstrapButtons = Swal.mixin({\n              customClass: {\n                confirmButton: 'btn btn-success',\n                cancelButton: 'btn btn-danger'\n              },\n              buttonsStyling: false\n            })\n            swalWithBootstrapButtons.fire({\n              title: 'Status',\n              text: data.message,\n              type: 'success',\n              showCancelButton: false,\n              confirmButtonText: 'Ok',\n              reverseButtons: true,\n              allowOutsideClick: false\n            }).then((result) => {\n              if (result.value) {\n                window.location.reload();\n              }\n            })\n          }\n        } else if(data.status === 'error'){\n          console.log(data.message);\n        }\n      })\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Profile Image Form\n  userProfileForm(){\n    try {\n      this.userAvatar = this.fb.group({\n        avatar: ['']\n      })\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PagesComponent } from './pages.component';\nimport { PaymentHeadsModule } from './Payment Heads/payment-heads.module';\nimport { UpdateProfileComponent } from './update-profile/update-profile.component';\nimport { AuthGuard } from '../authGuard/auth.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PagesComponent,\n    canActivate:[AuthGuard],\n    children: [\n      {\n        path: 'dashboard',\n        loadChildren: () => import('./dashboard/dashboard.module')\n        .then(m => m.DashboardModule)\n      },\n      {\n        path: 'sub-user',\n        loadChildren: () => import('./sub-user/sub-user.module')\n        .then(m => m.SubUserModule)\n      },\n      {\n        path: 'company',\n        loadChildren: () => import('./company/company.module')\n        .then(m => m.CompanyModule),\n      },\n      {\n        path: 'branches',\n        loadChildren: () => import('./branches/branches.module')\n        .then(m => m.BranchesModule)\n      },\n      {\n        path: 'leave-types',\n        loadChildren: () => import('./leave-types/leave-types.module')\n        .then(m => m.LeavetypesModule)\n      },\n      {\n        path:'employee-wizard',\n        loadChildren:() => import('./employee-wizard/employee-wizard.module')\n        .then(m => m.EmployeeWizardModule)\n      },\n      // {\n      //   path:'employee-wizard',\n      //   loadChildren:() => import('./employee-wizard/employee-wizard.module')\n      //   .then(m => m.EmployeeWizardModule)\n      // },\n      {\n        path:'job-profile',\n        loadChildren:() => import('./job-profile/job-profile.module')\n        .then(m => m.JobProfileModule)\n      },\n      {\n        path: 'job-category',\n        loadChildren: () => import('./job category/job-category.module')\n        .then(m => m.JobCategoryModule)\n      },\n      {\n        path: 'document-types',\n        loadChildren:() => import('./document-types/document-types.module')\n        .then(m=> m.DocumenttypesModule)\n      },\n      {\n        path: 'skill-category',\n        loadChildren:() => import('./skill-category/skill-category.module')\n        .then(m => m.SkillCategoryModule)\n      },\n      {\n        path: 'holiday',\n        loadChildren:() => import('./holiday/holiday.module')\n        .then(m => m.HolidayModule)\n      },\n      {\n        path: 'payment-heads',\n        loadChildren:()=> import('./Payment Heads/payment-heads.module')\n        .then(m=>PaymentHeadsModule)\n      },\n      {\n        path: 'report',\n        loadChildren:()=>import('./report/report.module')\n        .then(m=>m.ReportModule)\n      },\n      {\n        path: 'payroll',\n        loadChildren:()=>import('./payroll/payroll.module')\n        .then(m=>m.PayrollModule)\n      },\n      {\n        path: 'calendar',\n        loadChildren:()=>import('./calendar/calendar.module')\n        .then(m=>m.CalendarModule)\n      },\n      {\n        path: 'department',\n        loadChildren:()=>import('./department/department.module')\n        .then(m=>m.DepartmentModule)\n      },\n      {\n        path: 'graderule',\n        loadChildren: ()=>import('./graderule/graderule.module')\n        .then(m=>m.GraderuleModule)\n      },\n      {\n        path: 'leave-management',\n        loadChildren: ()=>import('./leave-management/leave-management.module')\n        .then(m=>m.LeaveManagementModule)\n      },\n      {\n        path: 'roles',\n        loadChildren: ()=>import('./roles/roles.module')\n        .then(m=>m.RolesModule)\n      },\n      {\n        path: 'update-profile',\n        component: UpdateProfileComponent\n      },\n      {\n        path: '',\n        redirectTo: 'company',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        redirectTo: 'branches',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        redirectTo: 'leave-types',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        redirectTo: 'employee-wizard',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        redirectTo: 'job-profile',\n        pathMatch: 'full',\n      },\n      {\n        path:'',\n        redirectTo: 'job-category',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        redirectTo: 'document-types',\n        pathMatch:'full'\n      },\n      {\n        path: '',\n        redirectTo: 'skill-category',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'holiday',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'payment-heads',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'report',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'payroll',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'calendar',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'department',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'graderule',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'leave-management',\n        pathMatch: 'full'\n      },\n    ],\n  },\n]\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n  ]\n})\nexport class PagesRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PagesRoutingModule } from './pages-routing.module';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HeaderComponent } from '../themes/header/header.component';\nimport { SidebarComponent } from '../themes/sidebar/sidebar.component';\nimport { FooterComponent } from '../themes/footer/footer.component';\nimport { PagesComponent } from './pages.component';\nimport { LeaveManagementComponent } from './leave-management/leave-management.component';\nimport { UpdateProfileComponent } from './update-profile/update-profile.component';\nimport { NotifierModule } from 'angular-notifier';\n\n\n\n@NgModule({\n  declarations: [HeaderComponent,SidebarComponent,FooterComponent,PagesComponent, LeaveManagementComponent, UpdateProfileComponent],\n  imports: [\n    CommonModule,\n    PagesRoutingModule,\n    RouterModule,\n    ReactiveFormsModule,\n    FormsModule,\n    NotifierModule,\n  ]\n})\n\nexport class PagesModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-payment-heads',\n  templateUrl: './payment-heads.component.html',\n  styleUrls: ['./payment-heads.component.scss']\n})\n\nexport class PaymentHeadsComponent implements OnInit {\n\n  constructor() {}\n  ngOnInit() {\n  \n  }\n\n}","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport { Payment } from  '../../../auth/payment'; \nimport { UpdatePaymentHeadl } from '../../../auth/updatePaymentHeadl';\n \n@Injectable({\n  providedIn: 'root'\n})\n\nexport class paymentHeadApiService {\n\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n/**Create method for manage errors when request and return response from the server*/\nerrorMgmt(error: HttpErrorResponse) {\n  try {\n    let errorMessage = '';\n    /** Handle client side error */\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    }\n    /** Handle server side error */\n    else {\n      errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n  catch (err) {\n    console.log(err.message);\n  }\n}\n\n/**get payment heads data  */\ngetPaymentHeadData():Observable<any>{\n  try{\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/company/list-payment-heads/${companyId}`;\n    return this.http.get(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Individual Payment Heads Details\npaymentHeadDetails(paymentHeadId:string):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/company/payment-head-details/${paymentHeadId}`;\n    return this.http.get(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n/** add payment heads */\naddPaymentHeads(data:Payment):Observable<any>{\n  try{\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL =`${this.endpoint}/company/add-payment-head/${companyId}`;\n    return this.http.post(apiURL,data).pipe(\n      \n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n/**update payment heads */\nupdatePaymentHeads(data:UpdatePaymentHeadl,paymentHeadId:String):Observable<any>{\n  try{\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/company/update-payment-head/${companyId}/${paymentHeadId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n/**remove payment head */ \nremovePaymentHead(paymentHeadId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/company/delete-payment-head/${paymentHeadId}`;\n    return this.http.delete(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n}\n\n","<router-outlet></router-outlet>","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Payment Heads</h2>\n        <button [disabled]=\"permissionInfo.search('Create PaymentHeads') === -1\"\n        class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/payment-heads/add-payment-heads\" style=\"float:right;\" (click)= \"addPaymentHeads()\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Payment Heads</button>\n    </div>\n    <table class=\"table\" style=\"text-align: center;\">\n        <thead class=\" text-primary\">\n            <tr>\n            <th> S.No </th>\n            <th> Title </th>\n            <th >Type</th>\n            <th >Action</th>\n            </tr>\n        </thead>\n        <tbody *ngFor=\"let list of paymentData; let i = index\">\n            <tr >\n            <td><b>{{ i+1 }}.</b></td>\n            <td> {{ list.title }} </td>\n            <td *ngIf=\"list.type === 'Addition'\"><i id=\"plus\" class=\"fas fa-plus-square\"></i></td>\n            <td *ngIf=\"list.type === 'Deduction'\"><i id=\"minus\" class=\"fas fa-minus-square\"></i></td>\n            <td>\n                <a [class.disabled]=\"permissionInfo.search('Edit PaymentHeads') === -1\"\n                routerLink=\"/pages/payment-heads/update-payment-heads/{{list._id}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>&nbsp;\n                <button [disabled]=\"permissionInfo.search('Delete PaymentHeads') === -1\"\n                class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i></button>\n            </td>\n            </tr>\n    </table>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { paymentHeadApiService } from '../payment-heads-service/payment-heads-api.service';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component ({\n    selector: 'app-list-payment-heads',\n    templateUrl: './list-payment-heads.component.html',\n    styleUrls: ['./list-payment-heads.component.scss']\n})\n\nexport class ListPaymentHeadsComponent implements OnInit {\n\n  paymentData: any[];\n  permissionInfo: any;\n\n  constructor(private api:paymentHeadApiService,public route:Router, private util:UtilitiesService){}\n\n  ngOnInit() {\n    this.listPaymentHeads();\n    this.permissionInfo = this.util.permissionRoleInfo;\n  }\n\n  listPaymentHeads(){\n    try{\n      this.api.getPaymentHeadData().subscribe(data =>{\n        if (data.status === 'success' || data.status === 200) {\n        this.paymentData = data.data;\n        const len = Object.keys(this.paymentData).length;\n        if(len == 0){\n          this.route.navigateByUrl(\"pages/payment-heads/add-payment-heads\");\n        }else{\n          this.paymentData = data.data;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err.message);\n    }\n  }\n\n  showConfirmationMessage(paymentHeadId:String){\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removePaymentHead(paymentHeadId).subscribe((data)=>{\n            if(data.status === \"success\" || data.status === 200){\n          swalWithBootstrapButtons.fire(\n            'Deleted!',\n            data.message,\n            'success'\n          )\n          this.listPaymentHeads();\n            }\n        })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your Payment Head Data is Safe',\n            'error'\n          )\n        }\n      })\n  }\n  addPaymentHeads(){\n    try{\n      this.util.paymentHeadStatus = 1;\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n}","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Payment Head Details</h2>\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{ errMsg }}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{ successMsg }}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"paymentHeadForm\" (ngSubmit)=\"paymentHeadData()\" novalidate>\n         <div class=\"row\">\n            <div class=\"col-md\">\n               <div class=\"form-group\">\n                     <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                     <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" id=\"title\" placeholder=\"Enter Title\"\n                           formControlName=\"title\" >\n                        <div *ngFor=\"let validation of validationMessage.title\">\n                           <div style=\"color: red;margin-left: 14px;\"\n                              *ngIf=\"paymentHeadForm.get('title').hasError(validation.type) && (paymentHeadForm.get('title').dirty || paymentHeadForm.get('title').touched)\"\n                              style=\"color: red;margin-left: 14px;\">\n                              {{ validation.message }}\n                           </div>\n                        </div>\n                     </div>\n                  </div>\n            </div>\n            <div class=\"col-md\">\n               <div class=\"form-group\">\n                     <label class=\"col-sm-6 control-label\"><b>Type:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                     <div class=\"col-sm-offset-2\">\n                     <select id=\"type\" class=\"dropdown dropdown-toggle form-control\" formControlName=\"type\" style=\"width:100%; height: 40px;\">\n                           <option ng-selected=\"true\" value=\"\" disabled>----------Select Payment Head Type----------</option>\n                        <option *ngFor=\"let type of paymentHeadTypes\" [value]=\"type\">{{type}}</option>\n                     </select>\n                     <div *ngFor=\"let validation of validationMessage.type\">\n                           <div style=\"color: red;margin-left: 14px;\"\n                              *ngIf=\"paymentHeadForm.get('type').hasError(validation.type) && (paymentHeadForm.get('type').dirty || paymentHeadForm.get('type').touched)\"\n                              style=\"color: red;margin-left: 14px;\">\n                              {{ validation.message }}\n                           </div>\n                        </div>\n                     </div>\n                  </div>\n            </div>\n         </div>\n\n         <!-- <label class=\"col-sm-6 control-label\"><b>ParentId:</b></label>\n         <input class=\"form-control\" type=\"text\" id=\"parentId\" placeholder=\"Enter parentId\"formControlName=\"parentId\"> -->\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"paymentHeadForm.invalid || permissionInfo.search('Create PaymentHeads') === -1\">Submit</button>\n               <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"../list-payment-heads\">Cancel</button>\n            </div>\n         </div>\n      </form>\n   </div>\n</div>","<div class=\"card card-u</div>ser\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Update Payment Heads</h2>\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{errMsg}}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{successMsg}}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"paymentHeadUpdateForm\" (ngSubmit)=\"updatePaymenthead()\" >\n         <div class=\"row\">\n            <div class=\"col-md\">\n               <div class=\"form-group\">\n                     <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                     <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" id=\"title\" placeholder=\"Enter Title\"\n                           formControlName=\"title\">\n                           <div *ngFor=\"let validation of validationMessage.title\">\n                              <div style=\"color: red;margin-left: 14px;\"\n                                 *ngIf=\"paymentHeadUpdateForm.get('title').hasError(validation.type) && (paymentHeadUpdateForm.get('title').dirty || paymentHeadUpdateForm.get('title').touched)\"\n                                 style=\"color: red;margin-left: 14px;\">\n                                 {{ validation.message }}\n                              </div>\n                           </div>\n                     </div>\n                  </div>\n            </div>\n            <div class=\"col-md\">\n               <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Type:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <div class=\"col-sm-offset-2\">\n                        <select id=\"type\" class=\"dropdown dropdown-toggle form-control\" formControlName=\"type\" style=\"width:100%; height: 40px;\">\n                              <option *ngFor=\"let h of paymentHeadTypes\" [value]=\"h\">{{h}}</option>\n                        </select>\n                        <div *ngFor=\"let validation of validationMessage.type\">\n                           <div style=\"color: red;margin-left: 14px;\"\n                              *ngIf=\"paymentHeadUpdateForm.get('type').hasError(validation.type) && (paymentHeadUpdateForm.get('type').dirty || paymentHeadUpdateForm.get('type').touched)\"\n                              style=\"color: red;margin-left: 14px;\">\n                              {{ validation.message }}\n                           </div>\n                        </div>\n                        </div>\n                     </div>\n            </div>\n         </div>\n\n            <div class=\"form-group\">\n               <div class=\"col-sm-offset-2 col-sm-10\">\n                  <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"paymentHeadUpdateForm.invalid || permissionInfo.search('Edit PaymentHeads') === -1\">Update</button>\n                  <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"../../list-payment-heads\">Cancel</button>\n               </div>\n            </div>\n         </form>\n   </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PaymentHeadsComponent } from './payment-heads.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListPaymentHeadsComponent } from './list-payment-heads/list-payment-heads.component';\nimport { AddPaymentHeadsComponent } from './add-payment-heads/add-payment-heads.component';\nimport { UpdatePaymentHeadsComponent } from './update-payment-heads/update-payment-heads.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : PaymentHeadsComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-payment-heads',\n        component: ListPaymentHeadsComponent,\n      },\n      {\n        path: 'add-payment-heads',\n        component: AddPaymentHeadsComponent\n      },\n      {\n        path: 'update-payment-heads/:jobCategoryId',\n        component: UpdatePaymentHeadsComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-payment-heads',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class PaymentHeadsRoutingModule { }","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { paymentHeadApiService } from '../payment-heads-service/payment-heads-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-payment-heads',\n  templateUrl: 'update-payment-heads.component.html'\n})\n\nexport class UpdatePaymentHeadsComponent implements OnInit {\n\n  paymentHeadUpdateForm: any;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  companyNameStore: [];\n  showCard: any;\n  companyNameId: any;\n  public companyName: [];\n  public companyId: any;\n  public leaveTypeId: any;\n  public jobCategoryId: any;\n  existingData: any;\n  paymentHeadTypes = ['Addition','Deduction'];\n  paymentHeadId;\n  permissionInfo: any;\n\n\n\nconstructor(private api:paymentHeadApiService, private fb:FormBuilder,private route:ActivatedRoute,private ngZone: NgZone,private router:Router,\n  private util: UtilitiesService){\n    this.paymentHeadId = this.route.snapshot.paramMap.get(\"jobCategoryId\");\n    this.util.moduleExists(this.paymentHeadId,'PaymentHead').subscribe((data)=>{\n      if(data.status === 'success'){\n        if(!data.data){\n          this.router.navigateByUrl('/pages/payment-heads/list-payment-heads');\n        }\n      }\n    })\n  }\n\nngOnInit() {\n  this.existingDataList();\n  this.updatePaymentHeadValidation();\n  this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Edit PaymentHeads') === -1){\n        this.paymentHeadUpdateForm.disable();\n      }\n}\n\nupdatePaymentHeadValidation() {\n  try {\n    this.paymentHeadUpdateForm = this.fb.group({\n        title: new FormControl('',Validators.required),\n        type: new FormControl('',Validators.required)\n      })\n    }\n  catch (err) {\n    console.log(err);\n  }\n}\n\nexistingDataList(){\n  this.api.paymentHeadDetails(this.paymentHeadId).subscribe(data=>{\n    this.existingData = data.data;\n      this.paymentHeadUpdateForm = this.fb.group({\n        title: new FormControl(this.existingData.title,Validators.required),\n        type: new FormControl(this.existingData.type,Validators.required),\n      })\n  })\n}\n\nupdatePaymenthead(){\n  try{\n    let cleanPaymentHeadUpdateForm = this.util.cleanFormLevelOne(this.paymentHeadUpdateForm);\n    this.api.updatePaymentHeads(cleanPaymentHeadUpdateForm.value,this.paymentHeadId).subscribe(data=>{\n      if(data.status === 'success'){\n        this.successMessage = true ;\n        this.errorMsg = false ;\n        this.successMsg = data.message;\n        setTimeout(() =>{\n          this.handleErrors();\n          this.ngZone.run(() => this.router.navigateByUrl('/pages/payment-heads/list-payment-heads'));\n        },2000);\n      }else{\n        this.errorMsg = true;\n        this.successMessage = false;\n        this.errMsg = data.message;\n        setTimeout(()=>{\n          this.handleErrors();\n        },3000)\n      }\n    })\n  } catch(err){\n    console.log(err);\n  }\n}\n\nvalidationMessage = {\n  'title':[{\n    type: 'required', message: 'Payement Head Title is Required'\n  },],\n  'type':[\n    {type:'required', message: 'Payement Head Type is Required'}\n  ],\n}\n\n\nhandleErrors(){\n  this.errorMsg = false;\n  this.successMessage = false;\n  this.errMsg = '';\n  this.successMsg = '';\n}\n\n}","import { Component, OnInit,NgZone } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { paymentHeadApiService } from '../payment-heads-service/payment-heads-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n\n@Component({\n    selector: 'app-add-payment-heads',\n    templateUrl: './add-payment-heads.component.html'\n})\n\nexport class AddPaymentHeadsComponent implements OnInit {\n\n  paymentHeadForm: FormGroup;\n    successMsg: String;\n    successMessage: boolean = false;\n    errMsg: String;\n    errorMsg: boolean = false;\n    companyNameStore: any;\n    showCard: any;\n    companyNameId: any;\n    public companyName:any= [];\n    public companyId: any;\n    paymentHeadTypes = ['Addition','Deduction'];\n  permissionInfo: any;\n\n\n    constructor(public fb: FormBuilder,private api:paymentHeadApiService,private ngZone:NgZone,\n      private router:Router,private util: UtilitiesService){\n        this.isListAvaliable();\n      }\n\n    ngOnInit() {\n      this.paymentHeadValidate();\n      this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Create PaymentHeads') === -1){\n        this.paymentHeadForm.disable();\n      }\n    }\n\n    paymentHeadData(){\n      try{\n        let cleanPaymentHeadForm = this.util.cleanFormLevelOne(this.paymentHeadForm);\n        this.api.addPaymentHeads(cleanPaymentHeadForm.value).subscribe(data=>{\n          if(data.status === 'success'){\n            this.successMessage = true ;\n            this.errorMsg = false ;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n              this.ngZone.run(()=>this.router.navigateByUrl('/pages/payment-heads/list-payment-heads'));\n            },2000)\n          }else{\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(()=>{\n              this.handleErrors();\n            },3000)\n          }\n        })\n      } catch(err){\n        console.log(err);\n      }\n    }\n\n    paymentHeadValidate() {\n      try {\n        this.paymentHeadForm = this.fb.group({\n          title: new FormControl('',Validators.required),\n          type:new FormControl('', Validators.required),\n          // parentId: new FormControl(null)\n          })\n        }\n      catch (err) {\n        console.log(err);\n      }\n    }\n\n    validationMessage = {\n      'title':[{\n        type: 'required', message: 'Payement Head Title is Required'\n      },],\n      'type':[\n        {type:'required', message: 'Payement Head Type is Required'}\n      ],\n    }\n\n    handleErrors(){\n      this.errorMsg = false;\n      this.successMessage = false;\n      this.errMsg = '';\n      this.successMsg = '';\n  }\n  isListAvaliable(){\n    try{\n      this.api.getPaymentHeadData().subscribe((data) =>{\n        if(data.status === 'success'){\n          if(data.data.length > 0 && this.util.paymentHeadStatus !== 1){\n            this.router.navigateByUrl(\"/pages/payment-heads/list-payment-heads\");\n            this.util.paymentHeadStatus = 0;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaymentHeadsRoutingModule } from './payment-heads-routing.module';\nimport { PaymentHeadsComponent } from './payment-heads.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListPaymentHeadsComponent } from './list-payment-heads/list-payment-heads.component';\nimport { AddPaymentHeadsComponent } from './add-payment-heads/add-payment-heads.component';\nimport { UpdatePaymentHeadsComponent } from './update-payment-heads/update-payment-heads.component';\n\n@NgModule({\n  declarations: [\n    PaymentHeadsComponent,\n    ListPaymentHeadsComponent,\n    AddPaymentHeadsComponent,\n    UpdatePaymentHeadsComponent\n  ],\n  \n  imports: [\n    CommonModule,\n    PaymentHeadsRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\nexport class PaymentHeadsModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { throwError, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Employee } from 'src/app/auth/employee';\nimport { Address } from 'src/app/auth/employee-address';\nimport { Educational } from 'src/app/auth/educational';\nimport { EmployeeBio } from 'src/app/auth/employeeBio';\nimport { BankDetails } from '../../../auth/BankDetails';\nimport { AddExprience } from '../../../auth/addExprience';\nimport { Auth } from 'src/app/auth/auth';\nimport { UpdateAddess } from '../../../auth/updateAddess';\nimport { AddFamily } from '../../../auth/addFamily';\nimport { UpdateEducation } from '../../../auth/educationUpdate';\nimport { UpdateExprience} from '../../../auth/updateExprience';\nimport { PayrollData } from '../../../auth/payrollData';\nimport { LanguageSkill } from '../../../auth/languageSkill';\nimport { updateLanguageSkill } from '../../../auth/updateLanguageSkills'\nimport { AddLeaveSettings } from 'src/app/auth/addLeaveSettings';\nimport { AssignTl } from 'src/app/auth/assignTl';\nimport { IdentityProofs } from '../../../auth/identityProofs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeeService {\n  endpoint: String = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n  //Get Company List Data\n  getCompanyData(): Observable<any> {\n    try {\n      const parentUserId = localStorage.getItem(\"token\");\n      let apiUrl = `${this.endpoint}/company/company-list/${parentUserId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method for get branch list Data\n  getBranchListData(companyParentId: String): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/company/branch-list/${companyParentId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for get job profile data\n  getJobProfileListData(companyId:String):Observable<any>{\n    try{\n      let api = `${this.endpoint}/company/list-all-job-profiles/${companyId}`;\n      return this.http.get(api).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n  }\n\n  //Method for get department list\n  getDepartmentData(branchId: String): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/branch/list-department/${branchId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for get the job profile data\n  getJobProfileData(companyId: String): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/company/list-all-job-profiles/${companyId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method to Add Employee form Data\n  submitData(data: Employee): Observable<any> {\n    try {\n      data.isActive = true;\n      const parentUserId = localStorage.getItem('token');\n      let apiUrl = `${this.endpoint}/user/add-employee/${parentUserId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n\n    }\n  }\n\n  // Method For Update Employee Profile with basic details\n  updateEmployeeBasicDetails(data:Employee, employeeId:String): Observable<any>{\n    try{\n      const parentUserId = localStorage.getItem('token');\n      let apiUrl = `${this.endpoint}/employee/update-employee-profile/${employeeId}/${parentUserId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch(err){\n      return err;\n    }\n  }\n\n\n  //Create method for manage errors when request and return response from the server\n  errorMgmt(error: HttpErrorResponse) {\n    try {\n      let errorMessage = '';\n      //Handle client side error\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      }\n      //Handle server side error\n      else {\n        errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n      }\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for submit address\n  submitAddress(data:Address,employeeId:String):Observable<any>{\n    try{\n      let apiUrl = `${this.endpoint}/employee/add-employee-address/${employeeId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n  }\n\n  /**add employe bank details */\n  employBank(data:BankDetails,employeeId:String):Observable<any>{\n    try{\n      let apiUrl =`${this.endpoint}/employee/add-employee-bank-details/${employeeId}`;\n      return this.http.post(apiUrl,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n  }\n\n  /** add work experience  */\n  experiAdd(data:AddExprience,employeeId:String):Observable<any>{\n  try{\n    let apiUrl =`${this.endpoint}/employee/add-employee-work-experiences/${employeeId}`;\n    return this.http.post(apiUrl,data).pipe(\n      catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n  }\n\n  /** add family members of employee */\n  addFamilyMember(data:AddFamily,employeeId:String):Observable<any>{\n    try{\n      let apiUrl = `${this.endpoint}/employee/add-employee-family/${employeeId}`;\n      return this.http.post(apiUrl,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n\n//Method for submit educational details\nsubmitEducationalData(data:Educational,employeeId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/employee/add-employee-educational-details/${employeeId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n}\n\n//Method for submit employee bio details\nsubmitBioData(data:EmployeeBio,employeeId:String):Observable<any>{\n    try{\n      let api = `${this.endpoint}/employee/add-employee-bio/${employeeId}`;\n      return this.http.post( api, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n  catch(err){\n    console.log(err.message);\n  }\n}\n\n// Update the Employee Bio Profile\nupdateBio(data:EmployeeBio,employeeId:String): Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/update-bio/${employeeId}`;\n      return this.http.post( api, data).pipe(\n        catchError(this.errorMgmt)\n      )\n  } catch(err){\n    console.log(err);\n  }\n}\n\n//Method for get employee list\ngetEmployeeList(status):Observable<any>{\n  try{\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let api =`${this.endpoint}/company/list-employees/${companyId}/${status}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n//Method for filter employee list\nfilterEmployeeList(employeeId):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-details/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n//Method for set Password of employee\nsetPassword(data:Auth,employeeId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/user/employee-set-password/${employeeId}`;\n    return this.http.post(api, data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n/** List employee address */\noldAddress(employeeId:String):Observable<any> {\n    try{\n      let apiURL = `${this.endpoint}/employee/list-addresses/${employeeId}`;\n      return this.http.get(apiURL).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch(err){\n        console.log(err.message);\n    }\n}\n\n/** Update address employee*/\nupdateAddess(data:UpdateAddess,employeeId:String,addressId:String):Observable<any> {\n    try{\n      let api = `${this.endpoint}/employee/update-address/${employeeId}/${addressId}`;\n      return this.http.post(api,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n}\n\n/**Delete employee address */\ndeleteAddress(employeeId:String,addressId:String):Observable<any>{\n    try{\n      let apiURL = `${this.endpoint}/employee/delete-address/${employeeId}/${addressId}`;\n      return this.http.delete(apiURL).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err){\n      console.log(err.message);\n    }\n}\n\n//Method for get employee family-details\ngetFamilyData(employeeId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/list-family-details/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n//Method for remove employee family details\nremoveFamilyDetails(employeeId:String,familyId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/delete-family-detail/${employeeId}/${familyId}`;\n    return this.http.delete(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n//Method for update employee family details\nupdateFamilyDetails(data:AddFamily, employeeId:String,familyId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/update-family-details/${employeeId}/${familyId}`;\n    return this.http.post(api, data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n/** list of education details */\nremoveEducation(employeeId:String,educationId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/delete-educational-detail/${employeeId}/${educationId}`;\n    return this.http.delete(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\neducationDetails(employeeId:String):Observable<any> {\n  try{\n    let api = `${this.endpoint}/employee/list-educational-details/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\nupdateEducation(data:UpdateEducation,employeeId:String,educationId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/update-educational-detail/${employeeId}/${educationId}`;\n    return this.http.post(api,data).pipe(\n      catchError(this.errorMgmt))\n    }catch(err){\n      console.log(err.message);\n    }\n}\n\n/**work Exprience start */\nremoveExprience(employeeId:String,workExperienceId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/delete-work-experience/${employeeId}/${workExperienceId}`;\n    return this.http.delete(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\nworkExprience(employeeId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/list-work-experiences/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  } catch(err){\n    console.log(err.message);\n  }\n}\n\nupdateWokExprience(data:UpdateExprience,employeeId:String,workExperienceId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/update-work-experiences/${employeeId}/${workExperienceId}`;\n    return this.http.post(api,data).pipe(\n      catchError(this.errorMgmt))\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n/** Bank details */\nbankDetailsList(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-bank-details/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch (err){\n    console.log(err.message);\n  }\n}\n\n/** submit payroll setting data  */\npayrollDataSubmit(data:PayrollData,employeeId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/employee/add-payroll-setting/${employeeId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Update Payroll Settings\nupdatePayrollSettings(data:PayrollData,employeeId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/employee/update-payroll-setting/${employeeId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\npayollDataList(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-payroll-settings/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Grade Rule List\ngradeRuleList():Observable<any>{\n  try{\n    let companyId = sessionStorage.getItem('companyId');\n    let api =`${this.endpoint}/company/list-all-grade-rule/${companyId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  } catch(err){\n    console.log(err)\n  }\n}\n\n/** bio list api configation */\nbioDataList(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-bio/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n/** language skill api configation  */\naddLanguageSkill(data:LanguageSkill,employeeId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/employee/add-employee-language-skills/${employeeId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n\nupdateLanguageSkill(data:updateLanguageSkill,employeeId:String,languageId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/employee/update-language-skill/${employeeId}/${languageId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n\n\n\nLanguageSkill(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-language-skills/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n\n\nemployeeList(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-details/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Employee Leave Settings Details\n\nleaveEmployeeDataList(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-leave-settings/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Add Leave Settings\n\naddLeaveSettings(data: AddLeaveSettings,employeeId:String):Observable<any>{\n  try{\n    let userId = localStorage.getItem('token');\n    let apiURL =`${this.endpoint}/employee/add-leave-settings/${employeeId}/${userId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Update Leave Settings\nupdateLeaveSettings(data:AddLeaveSettings, employeeId:String,leaveSettingId:String):Observable<any>{\n  try{\n    console.log(data);\n    let userId = localStorage.getItem('token');\n    let apiURL =`${this.endpoint}/employee/update-leave-settings/${leaveSettingId}/${employeeId}/${userId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Employee Id Proofs List Details\nemployeeIdProofsDataList(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-identity-proofs/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Add Employee Identity Proofs  Details\n\naddEmployeeIdProofs(data:IdentityProofs,employeeId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/employee/add-employee-identity-proofs/${employeeId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n// Update Id Proofs Settings\nupdateIdProofsSettings(data:IdentityProofs, employeeId:String,proofId:String):Observable<any>{\n  try{\n\n    let apiURL =`${this.endpoint}/employee/update-identity-proofs/${employeeId}/${proofId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n//Method for Delete employee Id Proofs details\nremoveIdProofsDetails(employeeId:String,proofId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/delete-identity-proof/${employeeId}/${proofId}`;\n    return this.http.delete(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n\n// Get company TL/Manager List\ngetTlList():Observable<any>{\n  try{\n    let companyId = sessionStorage.getItem('companyId');\n    let api =`${this.endpoint}/company/get-tl-list/${companyId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  } catch(err){\n    console.log(err)\n  }\n}\n\n// Assign Tl to Employee\nassignTl(data: AssignTl, userId): Observable<any>{\n  try{\n    let apiURL =`${this.endpoint}/user/assign-parentId/${userId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Employee TL List\nemployeeTlList(employeeId): Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/parent-child-ids/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  } catch(err){\n    console.log(err);\n  }\n}\n\n// Unassign TL/Manager\nunassignTl(userId, parentUserId): Observable<any>{\n  try{\n    let api =`${this.endpoint}/user/unassign-parentId/${userId}/${parentUserId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// update employee status\nupdateEmployeeStatus(employeeId,status): Observable<any>{\n  try{\n    let api =`${this.endpoint}/company/employee-status/${employeeId}/${status}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Get Employee Documnet which is not yet uploaded\nuploadedDocuments(employeeId): Observable<any>{\n  try{\n    let companyId = sessionStorage.getItem('companyId');\n    let api =`${this.endpoint}/employee/uploaded-documnets/${employeeId}/${companyId}`;\n      return this.http.get(api).pipe(\n        catchError(this.errorMgmt)\n      )\n  } catch(err){\n    console.log(err);\n  }\n}\n\n// Upload Employee Documents\nuploadDocuments(data,documentTypeId,employeeId,type): Observable<any>{\n  try{\n      const formData = new FormData();\n      formData.append('document',data.get('document').value);\n      let userId = localStorage.getItem('token');\n      let companyId = sessionStorage.getItem('companyId')\n      let apiUrl = `${this.endpoint}/user/upload-documents/${userId}/${documentTypeId}/${employeeId}/${type}/${companyId}`;\n      return this.http.post<any>(apiUrl, formData).pipe(\n        catchError(this.errorMgmt)\n      )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Get uploaded document by employee\nemployeeDocumentList(employeeId): Observable<any>{\n  try{\n    let api =`${this.endpoint}/user/list-documents/${employeeId}`;\n      return this.http.get(api).pipe(\n        catchError(this.errorMgmt)\n      )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Delete Employee Document\ndeleteEmployeeDocument(documentTypeId,employeeId): Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/user/remove-documnets/${documentTypeId}/${employeeId}`;\n      return this.http.delete(apiURL).pipe(\n        catchError(this.errorMgmt)\n      )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Get employee count\nemployeeCount(): Observable<any>{\n  try{\n    let companyId = sessionStorage.getItem('companyId');\n    let api =`${this.endpoint}/company/employee-count/${companyId}`;\n      return this.http.get(api).pipe(\n        catchError(this.errorMgmt)\n      )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Is Admin\nisAdmin():Observable<any>{\n  try {\n    let userId = localStorage.getItem('token');\n    let api =`${this.endpoint}/user/is-admin/${userId}`;\n      return this.http.get(api).pipe(\n        catchError(this.errorMgmt)\n      )\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n}"]}