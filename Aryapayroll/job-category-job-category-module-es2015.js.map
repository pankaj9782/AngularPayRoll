{"version":3,"sources":["./src/app/pages/job category/list-job-category/list-job-category.component.ts","./src/app/pages/job category/list-job-category/list-job-category.component.html","./src/app/pages/job category/job-category-routing.module.ts","./src/app/pages/job category/job-category.component.ts","./src/app/pages/job category/job-category.component.html","./src/app/pages/job category/update-job-category/update-job-category.component.ts","./src/app/pages/job category/update-job-category/update-job-category.component.html","./src/app/pages/job category/add-job-category/add-job-category.component.ts","./src/app/pages/job category/add-job-category/add-job-category.component.html","./src/app/pages/job category/job-category.module.ts"],"names":[],"mappings":"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","file":"job-category-job-category-module-es2015.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { JobCategoryApiService } from '../jobCategory-service/jobCategory-api.service';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component ({\n    selector: 'app-list-job-category',\n    templateUrl: './list-job-category.component.html'\n})\n\nexport class ListJobCategoryComponent implements OnInit {\n\n    showCard:any = {};\n    // leaveListData: any = Object;\n    companyShowData: any = [];\n    leaveListData: any=[];\n    public isActive: any;\n    public isNot: any;\n    permissionInfo: any;\n\n    constructor(private api: JobCategoryApiService,public route:Router, private _Activatedroute:ActivatedRoute, private util:UtilitiesService) {}\n\n    ngOnInit() {\n      this.jobList();\n      this.permissionInfo = this.util.permissionRoleInfo;\n    }\n\n    jobList() {\n      try{\n        this.api.getJobCategoryData().subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.leaveListData = data.jobCategory;\n            if(this.leaveListData.length == 0){\n               this.route.navigateByUrl(\"/pages/job-category/add-job-category\");\n            }else{\n            for (var i = 0; i < this.leaveListData.length; i++) {\n              this.showCard[this.leaveListData[i]._id] = true;\n              this.isActive = data.jobCategory[i].isActive == true ;\n            }\n          }\n          }\n        })\n      }catch(err){\n        console.log(err.message);\n      }\n    }\n\n    showConfirmationMessage(jobCategoryId:String){\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeData(jobCategoryId).subscribe((data)=>{\n            if(data.status === \"success\" || data.status === 200){\n          swalWithBootstrapButtons.fire(\n            'Deleted!',\n            data.message,\n            'success'\n          )\n          this.jobList();\n            }\n        })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your list data safe',\n            'error'\n          )\n        }\n      })\n    }\n    addJobCategory(){\n      try{\n        this.util.jobCategoryStatus = 1;\n      }catch(err){\n        console.log(err)\n      }\n    }\n\n}","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Job Category</h2>\n        <button [disabled]=\"permissionInfo.search('Create JobCategory')=== -1\"\n         class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/job-category/add-job-category\"style=\"float: right;\" (click)= \"addJobCategory()\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Job Category</button\n            >\n    </div>\n    <!-- <div class=\"panel-body\">\n        <ul class=\"list-group\">\n            <li class=\"list-group-item\" *ngFor=\"let list of leaveListData\">\n                <div class=\"row\">\n                    <div class=\"col-md-5\">\n                        <p><b>Category Name: </b> {{list?.categoryName}} </p>\n                    </div>\n                    <div class=\"col-md-5\">\n                        <p *ngIf=\"list?.isActive\" ngIfElse=\"\"> <b>Is Active: </b>Yes</p>\n                        <p *ngIf=\"!list?.isActive\"> <b>Is Active: </b>No</p>\n                    </div>\n                    <div class=\"cpl-md-2\">\n                        <a routerLink=\"/pages/job-category/update-job-category/{{list._id}}\"style=\"float: right\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>\n                        <button style=\"float: right;\" class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i></button>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div> -->\n    <table class=\"table\" style=\"text-align: center;\">\n        <thead class=\" text-primary\">\n            <tr>\n            <th> S.No</th>\n            <th> Category Name</th>\n            <th> Is Active</th>\n            </tr>\n        </thead>\n        <tbody *ngFor=\"let list of leaveListData; let i = index\">\n            <tr >\n            <td> <b>{{ i+1 }}.</b> </td>\n            <td> {{ list.categoryName }} </td>\n            <td *ngIf=\"list.isActive\"><i class=\"fa fa-check\" style=\"color: green; font-size: 25px;\"></i></td>\n            <td *ngIf=\"!list.isActive\"><i class=\"fa fa-times\" style=\"color: red; font-size: 25px;\"></i></td>\n            <td>\n                <a [class.disabled]=\"permissionInfo.search('Edit JobCategory')=== -1\"\n                 routerLink=\"/pages/job-category/update-job-category/{{list._id}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a\n                    >&nbsp;\n                <button [disabled]=\"permissionInfo.search('Delete JobCategory')=== -1\"\n                 class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i></button>\n            </td>\n            </tr>\n    </table>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { JobCategoryComponent } from './job-category.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListJobCategoryComponent } from './list-job-category/list-job-category.component';\nimport { AddJobCategoryComponent } from './add-job-category/add-job-category.component';\nimport { UpdateJobCategoryComponent } from './update-job-category/update-job-category.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : JobCategoryComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-job-category',\n        component: ListJobCategoryComponent,\n      },\n      {\n        path: 'add-job-category',\n        component: AddJobCategoryComponent\n      },\n      {\n        path: 'update-job-category/:jobCategoryId',\n        component: UpdateJobCategoryComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-job-category',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class JobCategoryRoutingModule { }","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-job-category',\n  templateUrl: './job-category.component.html',\n  styleUrls: ['./job-category.component.scss']\n})\n\nexport class JobCategoryComponent implements OnInit {\n\n  constructor() {}\n  ngOnInit() {}\n\n}","<router-outlet></router-outlet>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { JobCategoryApiService } from '../jobCategory-service/jobCategory-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-job-category',\n  templateUrl: 'update-job-category.component.html'\n})\n\nexport class UpdateJobCategoryComponent implements OnInit {\n\n  jobForm: FormGroup;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  companyNameStore: [];\n  showCard: any;\n  companyNameId: any;\n  public companyName: [];\n  public companyId: any;\n  public leaveTypeId: any;\n  public jobCategoryId: any;\n  // leaveData: Object[] = [];\n  // leaveFormData: Object;\n  public leaveData:any = [];\n  public leaveFormData:any;\n  permissionInfo: any;\n\n  constructor(\n    public fb: FormBuilder,\n    private router: Router, private ngZone: NgZone, private route: ActivatedRoute, private api: JobCategoryApiService,\n    private util: UtilitiesService) {\n      this.jobCategoryId = this.route.snapshot.paramMap.get(\"jobCategoryId\");\n      this.util.moduleExists(this.jobCategoryId,'JobCategory').subscribe((data)=>{\n        if(data.status === 'success'){\n          if(!data.data){\n            this.router.navigateByUrl('/pages/job-category/list-job-category');\n          }\n        }\n      })\n    }\n\n  ngOnInit() {\n    this.companyDataValidate();\n    this.getExistingData();\n    this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Edit JobCategory') === -1){\n        this.jobForm.disable();\n      }\n  }\n\n  getExistingData() {\n    this.api.jobCategoryDetails(this.jobCategoryId).subscribe(data => {\n        this.leaveFormData = data.data;\n            this.jobForm = this.fb.group({\n              categoryName: new FormControl(this.leaveFormData.categoryName),\n              isActive: new FormControl(this.leaveFormData.isActive)\n            })\n    });\n  }\n\n  companyDataValidate() {\n    try {\n      this.jobForm = this.fb.group({\n          categoryName: new FormControl('',Validators.required),\n          isActive: new FormControl(false)\n        })\n      }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n\n  updateJobForm() {\n    try {\n      let cleanJobPofileUpdateForm = this.util.cleanFormLevelOne(this.jobForm);\n      if (this.jobForm.value) {\n        this.api.updateJobCategory(cleanJobPofileUpdateForm.value,  this.jobCategoryId).subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            setTimeout(()=> {\n              this.handleErrors();\n              this.ngZone.run(() => this.router.navigateByUrl('/pages/job-category/list-job-category'));\n            },2000);\n          } else if (data.status == \"error\") {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(()=> {\n              this.handleErrors();\n            },3000);\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  validationMessage = {\n    'categoryName':[{\n      type: 'required', message: 'Category Name is required'\n    },],\n  }\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n}","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Update Job Category</h2>\n      <!-- <button type=\"button\" class=\"btn btn-primary btn-circle\" routerLink=\"../../list-job-category\"  style=\"float: right;\" ><i class=\"fa  fa-arrow-right\"></i></button> -->\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{errMsg}}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{successMsg}}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"jobForm\" (ngSubmit)=\"updateJobForm()\" novalidate>\n            <div class=\"form-group\">\n               <label class=\"col-sm-6 control-label\"><b>Category Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n               <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"CategoryName\" placeholder=\"Enter Category Name\"\n                     formControlName=\"categoryName\" required>\n                  <div *ngFor=\"let validation of validationMessage.categoryName\">\n                     <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"jobForm.get('categoryName').hasError(validation.type) && (jobForm.get('categoryName').dirty || jobForm.get('categoryName').touched)\"\n                        >\n                        {{validation.message}}\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div class=\"form-group\">\n               <div class=\"col-sm-offset-2\">\n                  <label><b>Is Active: </b></label><input type=\"checkbox\" formControlName=\"isActive\">\n               </div>\n            </div>\n            <div class=\"form-group\">\n               <div class=\"col-sm-offset-2 col-sm-10\">\n                  <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"jobForm.invalid || permissionInfo.search('Edit JobCategory') === -1\">Update</button>\n                  <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"../../list-job-category\" >Cancel</button>\n\n\n               </div>\n            </div>\n         </form>\n   </div>\n</div>\n","import { Component, OnInit,NgZone } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { JobCategoryApiService } from '../jobCategory-service/jobCategory-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n    selector: 'app-add-job-category',\n    templateUrl: './add-job-category.component.html'\n})\n\nexport class AddJobCategoryComponent implements OnInit {\n\n    jobForm: FormGroup;\n    successMsg: String;\n    successMessage: boolean = false;\n    errMsg: String;\n    errorMsg: boolean = false;\n    companyNameStore: any;\n    showCard: any;\n    companyNameId: any;\n    public companyName:any= [];\n    public companyId: any;\n    permissionInfo: any;\n\n    constructor(\n      public fb: FormBuilder,\n      private ngZone: NgZone,\n      private router: Router,\n      private api:JobCategoryApiService,\n      private util: UtilitiesService){\n        this.isListAvaliable();\n      }\n\n    ngOnInit() {\n      this.companyDataValidate();\n      this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Create JobCategory') === -1){\n        this.jobForm.disable();\n      }\n    }\n\n    companyDataValidate() {\n      try {\n        this.jobForm = this.fb.group({\n            categoryName: new FormControl('',Validators.required),\n            isActive: new FormControl(false)\n          })\n        }\n      catch (err) {\n        console.log(err);\n      }\n    }\n\n    jobFormData() {\n      try{\n        let cleanJobCategoryForm = this.util.cleanFormLevelOne(this.jobForm);\n        if (this.jobForm.value) {\n          this.api.addJobCategoy(cleanJobCategoryForm.value).subscribe((data) => {\n            if(data.status === \"success\" || data.status === 200){\n              this.successMessage = true ;\n              this.errorMsg = false ;\n              this.successMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n                this.ngZone.run(()=>this.router.navigateByUrl('/pages/job-category/list-job-category'));\n              }, 2000);\n            }\n            else if(data.status === \"error\"|| data.status === 404){\n              this.errorMsg = true;\n              this.successMessage = false;\n              this.errMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n              }, 3000);\n            }\n          })\n        }\n      } catch(err){\n        console.log(err);\n      }\n\n    }\n\n    validationMessage = {\n      'categoryName':[{\n        type: 'required', message: 'Category Name is Required'\n      },],\n    }\n\n    handleErrors(){\n      this.errorMsg = false;\n      this.successMessage = false;\n      this.errMsg = '';\n      this.successMsg = '';\n  }\n  isListAvaliable(){\n    try{\n      this.api.getJobCategoryData().subscribe((data) =>{\n        if(data.status === 'success'){\n          if(data.jobCategory.length > 0 && this.util.jobCategoryStatus !== 1){\n            this.router.navigateByUrl(\"/pages/job-category/list-job-category\");\n            this.util.jobCategoryStatus = 0;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n}","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Job Category Details</h2>\n\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{ errMsg }}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{ successMsg }}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"jobForm\" (ngSubmit)=\"jobFormData()\" novalidate>\n         <div class=\"form-group\">\n             <label class=\"col-sm-6 control-label\"><b>Category Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"CategoryName\" placeholder=\"Enter Category Name\"\n                  formControlName=\"categoryName\" required>\n               <div *ngFor=\"let validation of validationMessage.categoryName\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"jobForm.get('categoryName').hasError(validation.type) && (jobForm.get('categoryName').dirty || jobForm.get('categoryName').touched)\"\n                     style=\"color: red;margin-left: 14px;\">\n                     {{ validation.message }}\n                  </div>\n               </div>\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2\">\n               <label><b>Is Active: </b></label><input type=\"checkbox\" formControlName=\"isActive\">\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"jobForm.invalid || permissionInfo.search('Create JobCategory') === -1\">Submit</button>\n               <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../list-job-category\">Cancel</button>\n\n            </div>\n         </div>\n      </form>\n   </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { JobCategoryRoutingModule } from './job-category-routing.module';\nimport { JobCategoryComponent } from './job-category.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListJobCategoryComponent } from './list-job-category/list-job-category.component';\nimport { AddJobCategoryComponent } from './add-job-category/add-job-category.component';\nimport { UpdateJobCategoryComponent } from './update-job-category/update-job-category.component';\n\n@NgModule({\n  declarations: [\n    JobCategoryComponent,\n    ListJobCategoryComponent,\n    AddJobCategoryComponent,\n    UpdateJobCategoryComponent\n  ],\n  \n  imports: [\n    CommonModule,\n    JobCategoryRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\nexport class JobCategoryModule { }\n"],"sourceRoot":"webpack:///"}