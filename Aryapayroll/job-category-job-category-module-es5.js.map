{"version":3,"sources":["webpack:///src/app/pages/job category/list-job-category/list-job-category.component.ts","webpack:///src/app/pages/job category/list-job-category/list-job-category.component.html","webpack:///src/app/pages/job category/job-category-routing.module.ts","webpack:///src/app/pages/job category/job-category.component.ts","webpack:///src/app/pages/job category/job-category.component.html","webpack:///src/app/pages/job category/update-job-category/update-job-category.component.ts","webpack:///src/app/pages/job category/update-job-category/update-job-category.component.html","webpack:///src/app/pages/job category/add-job-category/add-job-category.component.ts","webpack:///src/app/pages/job category/add-job-category/add-job-category.component.html","webpack:///src/app/pages/job category/job-category.module.ts"],"names":["ListJobCategoryComponent","api","route","_Activatedroute","util","showCard","companyShowData","leaveListData","jobList","permissionInfo","permissionRoleInfo","getJobCategoryData","subscribe","data","status","jobCategory","length","navigateByUrl","i","_id","isActive","err","console","log","message","jobCategoryId","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","type","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","value","removeData","dismiss","DismissReason","cancel","jobCategoryStatus","addJobCategory","selector","templateUrl","path","component","canActivate","children","redirectTo","pathMatch","JobCategoryRoutingModule","forChild","declarations","imports","JobCategoryComponent","styleUrls","UpdateJobCategoryComponent","fb","router","ngZone","successMessage","errorMsg","leaveData","validationMessage","snapshot","paramMap","get","moduleExists","companyDataValidate","getExistingData","search","jobForm","disable","jobCategoryDetails","leaveFormData","group","categoryName","required","cleanJobPofileUpdateForm","cleanFormLevelOne","updateJobCategory","successMsg","setTimeout","handleErrors","run","errMsg","updateJobForm","AddJobCategoryComponent","companyName","isListAvaliable","cleanJobCategoryForm","addJobCategoy","jobFormData","JobCategoryModule"],"mappings":"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","file":"job-category-job-category-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { JobCategoryApiService } from '../jobCategory-service/jobCategory-api.service';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component ({\n    selector: 'app-list-job-category',\n    templateUrl: './list-job-category.component.html'\n})\n\nexport class ListJobCategoryComponent implements OnInit {\n\n    showCard:any = {};\n    // leaveListData: any = Object;\n    companyShowData: any = [];\n    leaveListData: any=[];\n    public isActive: any;\n    public isNot: any;\n    permissionInfo: any;\n\n    constructor(private api: JobCategoryApiService,public route:Router, private _Activatedroute:ActivatedRoute, private util:UtilitiesService) {}\n\n    ngOnInit() {\n      this.jobList();\n      this.permissionInfo = this.util.permissionRoleInfo;\n    }\n\n    jobList() {\n      try{\n        this.api.getJobCategoryData().subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.leaveListData = data.jobCategory;\n            if(this.leaveListData.length == 0){\n               this.route.navigateByUrl(\"/pages/job-category/add-job-category\");\n            }else{\n            for (var i = 0; i < this.leaveListData.length; i++) {\n              this.showCard[this.leaveListData[i]._id] = true;\n              this.isActive = data.jobCategory[i].isActive == true ;\n            }\n          }\n          }\n        })\n      }catch(err){\n        console.log(err.message);\n      }\n    }\n\n    showConfirmationMessage(jobCategoryId:String){\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeData(jobCategoryId).subscribe((data)=>{\n            if(data.status === \"success\" || data.status === 200){\n          swalWithBootstrapButtons.fire(\n            'Deleted!',\n            data.message,\n            'success'\n          )\n          this.jobList();\n            }\n        })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your list data safe',\n            'error'\n          )\n        }\n      })\n    }\n    addJobCategory(){\n      try{\n        this.util.jobCategoryStatus = 1;\n      }catch(err){\n        console.log(err)\n      }\n    }\n\n}","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Job Category</h2>\n        <button [disabled]=\"permissionInfo.search('Create JobCategory')=== -1\"\n         class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/job-category/add-job-category\"style=\"float: right;\" (click)= \"addJobCategory()\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Job Category</button\n            >\n    </div>\n    <!-- <div class=\"panel-body\">\n        <ul class=\"list-group\">\n            <li class=\"list-group-item\" *ngFor=\"let list of leaveListData\">\n                <div class=\"row\">\n                    <div class=\"col-md-5\">\n                        <p><b>Category Name: </b> {{list?.categoryName}} </p>\n                    </div>\n                    <div class=\"col-md-5\">\n                        <p *ngIf=\"list?.isActive\" ngIfElse=\"\"> <b>Is Active: </b>Yes</p>\n                        <p *ngIf=\"!list?.isActive\"> <b>Is Active: </b>No</p>\n                    </div>\n                    <div class=\"cpl-md-2\">\n                        <a routerLink=\"/pages/job-category/update-job-category/{{list._id}}\"style=\"float: right\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>\n                        <button style=\"float: right;\" class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i></button>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div> -->\n    <table class=\"table\" style=\"text-align: center;\">\n        <thead class=\" text-primary\">\n            <tr>\n            <th> S.No</th>\n            <th> Category Name</th>\n            <th> Is Active</th>\n            </tr>\n        </thead>\n        <tbody *ngFor=\"let list of leaveListData; let i = index\">\n            <tr >\n            <td> <b>{{ i+1 }}.</b> </td>\n            <td> {{ list.categoryName }} </td>\n            <td *ngIf=\"list.isActive\"><i class=\"fa fa-check\" style=\"color: green; font-size: 25px;\"></i></td>\n            <td *ngIf=\"!list.isActive\"><i class=\"fa fa-times\" style=\"color: red; font-size: 25px;\"></i></td>\n            <td>\n                <a [class.disabled]=\"permissionInfo.search('Edit JobCategory')=== -1\"\n                 routerLink=\"/pages/job-category/update-job-category/{{list._id}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a\n                    >&nbsp;\n                <button [disabled]=\"permissionInfo.search('Delete JobCategory')=== -1\"\n                 class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i></button>\n            </td>\n            </tr>\n    </table>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { JobCategoryComponent } from './job-category.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListJobCategoryComponent } from './list-job-category/list-job-category.component';\nimport { AddJobCategoryComponent } from './add-job-category/add-job-category.component';\nimport { UpdateJobCategoryComponent } from './update-job-category/update-job-category.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : JobCategoryComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-job-category',\n        component: ListJobCategoryComponent,\n      },\n      {\n        path: 'add-job-category',\n        component: AddJobCategoryComponent\n      },\n      {\n        path: 'update-job-category/:jobCategoryId',\n        component: UpdateJobCategoryComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-job-category',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class JobCategoryRoutingModule { }","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-job-category',\n  templateUrl: './job-category.component.html',\n  styleUrls: ['./job-category.component.scss']\n})\n\nexport class JobCategoryComponent implements OnInit {\n\n  constructor() {}\n  ngOnInit() {}\n\n}","<router-outlet></router-outlet>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { JobCategoryApiService } from '../jobCategory-service/jobCategory-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-job-category',\n  templateUrl: 'update-job-category.component.html'\n})\n\nexport class UpdateJobCategoryComponent implements OnInit {\n\n  jobForm: FormGroup;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  companyNameStore: [];\n  showCard: any;\n  companyNameId: any;\n  public companyName: [];\n  public companyId: any;\n  public leaveTypeId: any;\n  public jobCategoryId: any;\n  // leaveData: Object[] = [];\n  // leaveFormData: Object;\n  public leaveData:any = [];\n  public leaveFormData:any;\n  permissionInfo: any;\n\n  constructor(\n    public fb: FormBuilder,\n    private router: Router, private ngZone: NgZone, private route: ActivatedRoute, private api: JobCategoryApiService,\n    private util: UtilitiesService) {\n      this.jobCategoryId = this.route.snapshot.paramMap.get(\"jobCategoryId\");\n      this.util.moduleExists(this.jobCategoryId,'JobCategory').subscribe((data)=>{\n        if(data.status === 'success'){\n          if(!data.data){\n            this.router.navigateByUrl('/pages/job-category/list-job-category');\n          }\n        }\n      })\n    }\n\n  ngOnInit() {\n    this.companyDataValidate();\n    this.getExistingData();\n    this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Edit JobCategory') === -1){\n        this.jobForm.disable();\n      }\n  }\n\n  getExistingData() {\n    this.api.jobCategoryDetails(this.jobCategoryId).subscribe(data => {\n        this.leaveFormData = data.data;\n            this.jobForm = this.fb.group({\n              categoryName: new FormControl(this.leaveFormData.categoryName),\n              isActive: new FormControl(this.leaveFormData.isActive)\n            })\n    });\n  }\n\n  companyDataValidate() {\n    try {\n      this.jobForm = this.fb.group({\n          categoryName: new FormControl('',Validators.required),\n          isActive: new FormControl(false)\n        })\n      }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n\n  updateJobForm() {\n    try {\n      let cleanJobPofileUpdateForm = this.util.cleanFormLevelOne(this.jobForm);\n      if (this.jobForm.value) {\n        this.api.updateJobCategory(cleanJobPofileUpdateForm.value,  this.jobCategoryId).subscribe(data => {\n          if (data.status === 'success' || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            setTimeout(()=> {\n              this.handleErrors();\n              this.ngZone.run(() => this.router.navigateByUrl('/pages/job-category/list-job-category'));\n            },2000);\n          } else if (data.status == \"error\") {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(()=> {\n              this.handleErrors();\n            },3000);\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  validationMessage = {\n    'categoryName':[{\n      type: 'required', message: 'Category Name is required'\n    },],\n  }\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n}","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Update Job Category</h2>\n      <!-- <button type=\"button\" class=\"btn btn-primary btn-circle\" routerLink=\"../../list-job-category\"  style=\"float: right;\" ><i class=\"fa  fa-arrow-right\"></i></button> -->\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{errMsg}}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{successMsg}}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"jobForm\" (ngSubmit)=\"updateJobForm()\" novalidate>\n            <div class=\"form-group\">\n               <label class=\"col-sm-6 control-label\"><b>Category Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n               <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"CategoryName\" placeholder=\"Enter Category Name\"\n                     formControlName=\"categoryName\" required>\n                  <div *ngFor=\"let validation of validationMessage.categoryName\">\n                     <div style=\"color: red;margin-left: 14px;\"\n                        *ngIf=\"jobForm.get('categoryName').hasError(validation.type) && (jobForm.get('categoryName').dirty || jobForm.get('categoryName').touched)\"\n                        >\n                        {{validation.message}}\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div class=\"form-group\">\n               <div class=\"col-sm-offset-2\">\n                  <label><b>Is Active: </b></label><input type=\"checkbox\" formControlName=\"isActive\">\n               </div>\n            </div>\n            <div class=\"form-group\">\n               <div class=\"col-sm-offset-2 col-sm-10\">\n                  <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"jobForm.invalid || permissionInfo.search('Edit JobCategory') === -1\">Update</button>\n                  <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"../../list-job-category\" >Cancel</button>\n\n\n               </div>\n            </div>\n         </form>\n   </div>\n</div>\n","import { Component, OnInit,NgZone } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { JobCategoryApiService } from '../jobCategory-service/jobCategory-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n    selector: 'app-add-job-category',\n    templateUrl: './add-job-category.component.html'\n})\n\nexport class AddJobCategoryComponent implements OnInit {\n\n    jobForm: FormGroup;\n    successMsg: String;\n    successMessage: boolean = false;\n    errMsg: String;\n    errorMsg: boolean = false;\n    companyNameStore: any;\n    showCard: any;\n    companyNameId: any;\n    public companyName:any= [];\n    public companyId: any;\n    permissionInfo: any;\n\n    constructor(\n      public fb: FormBuilder,\n      private ngZone: NgZone,\n      private router: Router,\n      private api:JobCategoryApiService,\n      private util: UtilitiesService){\n        this.isListAvaliable();\n      }\n\n    ngOnInit() {\n      this.companyDataValidate();\n      this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Create JobCategory') === -1){\n        this.jobForm.disable();\n      }\n    }\n\n    companyDataValidate() {\n      try {\n        this.jobForm = this.fb.group({\n            categoryName: new FormControl('',Validators.required),\n            isActive: new FormControl(false)\n          })\n        }\n      catch (err) {\n        console.log(err);\n      }\n    }\n\n    jobFormData() {\n      try{\n        let cleanJobCategoryForm = this.util.cleanFormLevelOne(this.jobForm);\n        if (this.jobForm.value) {\n          this.api.addJobCategoy(cleanJobCategoryForm.value).subscribe((data) => {\n            if(data.status === \"success\" || data.status === 200){\n              this.successMessage = true ;\n              this.errorMsg = false ;\n              this.successMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n                this.ngZone.run(()=>this.router.navigateByUrl('/pages/job-category/list-job-category'));\n              }, 2000);\n            }\n            else if(data.status === \"error\"|| data.status === 404){\n              this.errorMsg = true;\n              this.successMessage = false;\n              this.errMsg = data.message;\n              setTimeout(() => {\n                this.handleErrors();\n              }, 3000);\n            }\n          })\n        }\n      } catch(err){\n        console.log(err);\n      }\n\n    }\n\n    validationMessage = {\n      'categoryName':[{\n        type: 'required', message: 'Category Name is Required'\n      },],\n    }\n\n    handleErrors(){\n      this.errorMsg = false;\n      this.successMessage = false;\n      this.errMsg = '';\n      this.successMsg = '';\n  }\n  isListAvaliable(){\n    try{\n      this.api.getJobCategoryData().subscribe((data) =>{\n        if(data.status === 'success'){\n          if(data.jobCategory.length > 0 && this.util.jobCategoryStatus !== 1){\n            this.router.navigateByUrl(\"/pages/job-category/list-job-category\");\n            this.util.jobCategoryStatus = 0;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n}","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Job Category Details</h2>\n\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{ errMsg }}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{ successMsg }}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"jobForm\" (ngSubmit)=\"jobFormData()\" novalidate>\n         <div class=\"form-group\">\n             <label class=\"col-sm-6 control-label\"><b>Category Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"CategoryName\" placeholder=\"Enter Category Name\"\n                  formControlName=\"categoryName\" required>\n               <div *ngFor=\"let validation of validationMessage.categoryName\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                     *ngIf=\"jobForm.get('categoryName').hasError(validation.type) && (jobForm.get('categoryName').dirty || jobForm.get('categoryName').touched)\"\n                     style=\"color: red;margin-left: 14px;\">\n                     {{ validation.message }}\n                  </div>\n               </div>\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2\">\n               <label><b>Is Active: </b></label><input type=\"checkbox\" formControlName=\"isActive\">\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"jobForm.invalid || permissionInfo.search('Create JobCategory') === -1\">Submit</button>\n               <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../list-job-category\">Cancel</button>\n\n            </div>\n         </div>\n      </form>\n   </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { JobCategoryRoutingModule } from './job-category-routing.module';\nimport { JobCategoryComponent } from './job-category.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListJobCategoryComponent } from './list-job-category/list-job-category.component';\nimport { AddJobCategoryComponent } from './add-job-category/add-job-category.component';\nimport { UpdateJobCategoryComponent } from './update-job-category/update-job-category.component';\n\n@NgModule({\n  declarations: [\n    JobCategoryComponent,\n    ListJobCategoryComponent,\n    AddJobCategoryComponent,\n    UpdateJobCategoryComponent\n  ],\n  \n  imports: [\n    CommonModule,\n    JobCategoryRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\nexport class JobCategoryModule { }\n"]}