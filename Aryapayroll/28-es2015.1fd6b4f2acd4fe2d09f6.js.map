{"version":3,"sources":["webpack:///src/app/pages/sub-user/sub-user.component.ts","webpack:///src/app/pages/sub-user/sub-user.component.html","webpack:///src/app/pages/sub-user/sub-user-service/sub-user.service.ts","webpack:///src/app/pages/sub-user/add-subusers/add-subusers.component.html","webpack:///src/app/pages/sub-user/add-subusers/add-subusers.component.ts","webpack:///src/app/pages/sub-user/show-subusers-list/show-subusers-list.component.html","webpack:///src/app/pages/sub-user/show-subusers-list/show-subusers-list.component.ts","webpack:///src/app/pages/sub-user/update-subusers-data/update-subusers-data.component.html","webpack:///src/app/pages/sub-user/update-subusers-data/update-subusers-data.component.ts","webpack:///src/app/pages/sub-user/sub-user-routing.module.ts","webpack:///src/app/pages/sub-user/sub-user.module.ts"],"names":["SubUserComponent","SubUserService","http","endpoint","environment","apiBaseUrl","headers","set","data","redirectUrl","appBaseUrl","parentUserId","localStorage","getItem","this","post","pipe","catchError","errorMgmt","err","console","log","get","subUserId","delete","error","errorMessage","ErrorEvent","message","status","throwError","userId","AddSubusersComponent","fb","api","ngZone","router","spinner","util","roleAPI","successMessage","errorMsg","genderList","validationMessage","type","subUserFormValidation","rolePermission","subUserForm","group","name","compose","required","pattern","phone","minLength","maxLength","email","roleId","cleansubUserForm","cleanFormLevelOne","show","addSubUsersData","value","subscribe","successMsg","hide","setTimeout","handleErrroMessage","run","navigateByUrl","setValue","errMsg","listAllRole","rolePermissionInfo","subUserFormData","ShowSubusersListComponent","showCard","subUsersListData","getSubUsersList","getSubUsersListData","users","length","len","Object","keys","i","_id","subUsersId","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","removeSubUsersData","dismiss","DismissReason","cancel","UpdateSubusersDataComponent","route","snapshotParam","String","snapshot","paramMap","getSubUserExistingData","updateSubUserForm","birthday","zipCode","gender","cleanUpdateSubUserForm","submitUpdateSubUserData","handleErrors","subUserDetails","updateSubUserFormData","path","component","canActivate","children","redirectTo","pathMatch","SubUserRoutingModule","forChild","SubUserModule"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-sub-user',\n  templateUrl: './sub-user.component.html',\n  styleUrls: ['./sub-user.component.scss']\n})\nexport class SubUserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<router-outlet></router-outlet>","import { Injectable } from '@angular/core';\nimport { HttpHeaders,HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { SubUserData } from 'src/app/auth/sub-user';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubUserService {\n\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n  constructor(private http: HttpClient) { }\n\n//Method for add new sub-users and submit sub-users form data\n\naddSubUsersData(data:SubUserData):Observable<any>{\n  try{\n    data.redirectUrl = `${environment.appBaseUrl}/users/generate-password`;\n    const parentUserId = localStorage.getItem(\"token\");\n    let apiURL = `${this.endpoint}/user/add-subuser/${parentUserId}`;\n    return this.http.post(apiURL, data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }\n  catch(err){\n    console.log(err);\n  }\n}\n\n// Method for get data from server and show company list\ngetSubUsersListData(): Observable<any> {\ntry {\n  const parentUserId = localStorage.getItem(\"token\");\n  let apiURL = `${this.endpoint}/user/list-subusers/${parentUserId}`;\n   return this.http.get(apiURL).pipe(\n     catchError(this.errorMgmt)\n   )\n}\ncatch (err) {\n  console.log(err);\n}\n}\n\n//Method for Delete data of company list\nremoveSubUsersData(subUserId:String):Observable<any>{\n  try{\n    const parentUserId = localStorage.getItem(\"token\");\n    let apiURL = `${this.endpoint}/user/delete-subuser/${parentUserId}/${subUserId}`;\n    return this.http.delete(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }\n  catch(err){\n    console.log(err);\n  }\n}\n\n//Method for submit updated subusres details  Data and calling API\nsubmitUpdateSubUserData(data:SubUserData,subUserId: String): Observable<any> {\n  try {\n    const parentUserId = localStorage.getItem(\"token\");\n    let apiURL = `${this.endpoint}/user/update-subuser/${parentUserId}/${subUserId}`;\n    return this.http.post(apiURL, data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n\n\n //Create method for manage errors when request and return response from the server\n errorMgmt(error: HttpErrorResponse) {\n  try {\n    let errorMessage = '';\n    //Handle client side error\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    }\n    //Handle server side error\n    else {\n      errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n\n// Sub User Details\nsubUserDetails(userId):Observable<any>{\n  try {\n  let apiURL = `${this.endpoint}/user/subuser-details/${userId}`;\n   return this.http.get(apiURL).pipe(\n     catchError(this.errorMgmt)\n   )\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n}\n","\n<div class=\"card card-user\">\n        <ngx-spinner\n        bdColor=\"rgba(51,51,51,0.8)\"\n        size=\"medium\"\n        color=\"#fff\"\n        type=\"ball-scale-ripple-multiple\"\n        >\n        <p style=\"font-size: 20px; color: white\">Loading...</p>\n        </ngx-spinner>\n    <div class=\"card-header\">\n        <h2 class=\"card-title\">Sub-Users Details</h2>\n\n    </div>\n    <div class=\"card-body\">\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                <strong>{{ errMsg }}</strong>\n            </p>\n        </div>\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                <strong>{{ successMsg }}</strong>\n            </p>\n        </div>\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"subUserForm\" (ngSubmit)=\"subUserFormData()\" novalidate>\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Full Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Full Name\"\n                        formControlName=\"name\" required>\n                    <div *ngFor=\"let validation of validationMessage.name\">\n                        <div style=\"color: red;margin-left: 1%;\"\n                            *ngIf=\"subUserForm.get('name').hasError(validation.type) && (subUserForm.get('name').dirty || subUserForm.get('name').touched)\"\n                            style=\"color: red;margin-left: 1%;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Phone Number:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"inputPhone\" placeholder=\"Enter Phone Number\"\n                        formControlName=\"phone\">\n                    <div *ngFor=\"let validation of validationMessage.phone\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                            *ngIf=\"subUserForm.get('phone').hasError(validation.type) && (subUserForm.get('phone').dirty || subUserForm.get('phone').touched)\"\n                            style=\"color: red;margin-left: 14px;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Email:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <div class=\"col-sm-offset-2\">\n                            <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Email \"\n                                formControlName=\"email\" required>\n                            <div *ngFor=\"let validation of validationMessage.email\">\n                                <div style=\"color: red;margin-left: 14px;\"\n                                    *ngIf=\"subUserForm.get('email').hasError(validation.type) && (subUserForm.get('email').dirty || subUserForm.get('email').touched)\"\n                                    style=\"color: red;margin-left: 14px;\">\n                                    {{ validation.message }}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-6\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Assign Role:&nbsp;<span\n                              style=\"color: darkred\">*</span></b></label>\n                        <select class=\"dropdown dropdown-toggle form-control\" Name=\"branchId\" formControlName=\"roleId\">\n                           <option class='dropdown-item' ng-selected=\"true\" value=\"\" disabled selected>----------Select Role----------</option>\n                           <option class=\"dropdown-item\" *ngFor=\"let role of rolePermissionInfo\" value=\"{{role._id}}\">\n                              {{role.title}}\n                           </option>\n                        </select>\n                        <div *ngFor=\"let validation of validationMessage.roleId\">\n                              <div style=\"color: red;margin-left: 14px;\"\n                                *ngIf=\"subUserForm.get('roleId').hasError(validation.type) && (subUserForm.get('roleId').dirty || subUserForm.get('roleId').touched)\"\n                                >\n                                {{ validation.message }}\n                              </div>\n                            </div>\n                     </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"subUserForm.invalid\">Add Subuser</button>\n                    <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../show-subusers-list\">Cancel</button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { SubUserService } from '../sub-user-service/sub-user.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\nimport { RolesService } from '../../roles/roles-service/roles.service';\n\n@Component({\n  selector: 'app-add-subusers',\n  templateUrl: './add-subusers.component.html',\n  styleUrls: ['./add-subusers.component.scss']\n})\nexport class AddSubusersComponent implements OnInit {\n\n  subUserForm: FormGroup;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  genderList:String[]= ['Male','Female','Others','N/A'];\n  rolePermissionInfo: any;\n\n  constructor(public fb: FormBuilder, private api:SubUserService,private ngZone: NgZone, private router: Router,\n    private spinner: NgxSpinnerService,\n    private util: UtilitiesService,\n    private roleAPI: RolesService\n     ) { }\n\n  ngOnInit() {\n    this.subUserFormValidation();\n    this.rolePermission();\n  }\n\n  //method for sub user validation\n  subUserFormValidation(){\n    try{\n    this.subUserForm = this.fb.group({\n    name:new FormControl('',Validators.compose([\n      Validators.required,\n      Validators.pattern('^[a-zA-Z ]*$'),\n    ])),\n      phone: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(10),\n        Validators.maxLength(15),\n        Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n      ])),\n      email:new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n      ])),\n      roleId: new FormControl('',Validators.required)\n    })\n  }\n  catch(err){\n    console.log(err);\n  }\n}\n\n//Method for submit add new sub-users form data an\nsubUserFormData(){\n  try{\n    let cleansubUserForm = this.util.cleanFormLevelOne(this.subUserForm);\n    this.spinner.show();\n    this.api.addSubUsersData(cleansubUserForm.value).subscribe(data=>{\n      if(data.status === \"success\"|| data.status === 200){\n        this.successMessage = true ;\n        this.errorMsg = false ;\n        this.successMsg = data.message;\n        this.spinner.hide();\n        setTimeout(() => {\n          this.handleErrroMessage();\n          this.ngZone.run(()=>this.router.navigateByUrl('/pages/sub-user/show-subusers-list'));\n        }, 7000);\n      }\n      else if(data.status == \"error\"){\n        this.subUserForm.get('email').setValue('');\n        this.errorMsg = true;\n        this.successMessage = false;\n        this.errMsg = data.message;\n        this.spinner.hide();\n        setTimeout(()=> {\n          this.handleErrroMessage();\n        },2000)\n      }\n    })\n  } catch(err){\n    console.log(err);\n  }\n\n  }\n\n\n//Property for show error message\nvalidationMessage = {\n  'name': [\n    { type: 'required', message: 'Name is required' },\n    { type: 'pattern', message: 'Not a valid name' }\n  ],\n  'email': [\n    { type: 'required', message: 'Email is required' },\n    { type: 'pattern', message: 'Enter a valid email' }\n  ],\n  'phone': [\n    { type: 'required', message: 'Phone No. is required' },\n    { type: 'minlength', message: 'Not a phone number ' },\n    { type: 'maxlength', message: 'Phone no. is too large' },\n    { type: 'pattern', message: 'Phone Number not valid' },\n  ],\n  'roleId': [\n    { type: 'required', message: 'Role is required' },\n  ],\n}\n// Error Handling Message\nhandleErrroMessage(){\n  this.successMessage = false;\n  this.errorMsg = false;\n  this.successMsg = '';\n  this.errMsg = '';\n}\n\n// roles permissions\nrolePermission(){\n  try {\n    this.roleAPI.listAllRole().subscribe((data)=>{\n      if(data.status === 'success'){\n        this.rolePermissionInfo = data.data;\n      }\n    })\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n}\n\n\n","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Sub-Users List</h2>\n        <a class=\"btn btn-primary\" routerLink=\"../add-subuser\" style=\"float:right;\"><i class=\"fa fa-plus\"></i>&nbsp;\n            Add User</a>\n    </div>\n\n    <div class=\"panel-body\">\n        <ul class=\"list-group\">\n            <li class=\"list-group-item\" *ngFor=\"let list of subUsersListData\">\n                <strong><b (click)=\"showData(list._id)\"\n                        style=\"cursor: pointer\">{{list.profile.contactInfo?.firstName + \" \" + list.profile.contactInfo?.lastName}}</b></strong>\n                <div style=\"float: right;\">\n                    <i class=\"dropdown-toggle\" (click)=\"showData(list._id)\"></i>\n                </div>\n                <div class=\"card\" style=\"background-color:ghostwhite\" [hidden]=\"showCard[list._id]\">\n                    <table class=\"table\" style=\"margin: auto\">\n                        <tr>\n                            <td><strong>Name:</strong></td>\n                            <td>{{list.profile.contactInfo?.firstName + \" \" + list.profile.contactInfo?.lastName}}</td>\n                        </tr>\n                        <tr>\n                            <td><strong>Phone No.</strong></td>\n                            <td>{{ list.profile.contactInfo.phone }}</td>\n                        </tr>\n                        <tr>\n                            <td><strong>Email:</strong></td>\n                            <td>{{ list.local.email }}</td>\n                        </tr>\n                    </table>\n                    <div>\n                        <a routerLink=\"../update-subuser-data/{{list._id}}\" style=\"float: right;\"\n                            class=\"btn btn-primary\">\n                            <i class=\"fa fa-pencil-square-o\"></i></a>\n                        <button style=\"float: right;\" class=\"btn btn-danger\" type=\"button\"\n                            (click)=\"deleteSubUserListData(list._id)\">\n                            <i class=\"fa fa-trash\"></i></button>\n\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { SubUserService } from '../sub-user-service/sub-user.service';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-show-subusers-list',\n  templateUrl: './show-subusers-list.component.html',\n  styleUrls: ['./show-subusers-list.component.scss']\n})\nexport class ShowSubusersListComponent implements OnInit {\n\n  showCard = {};\n  // subUsersListData: any = Object;\n  subUsersListData: any = []; \n\n\n  constructor(private api: SubUserService, public fb: FormBuilder, private ngZone: NgZone, private router: Router) { }\n\n  ngOnInit() {\n    this.getSubUsersList();\n  }\n  \n  //Method for show sub-users in the list\n  getSubUsersList() {\n    try{\n    this.api.getSubUsersListData().subscribe(data => {\n      if (data.status === 'success' || data.status === 200) {\n        this.subUsersListData = data.users;\n        if(data.users.length == 0){\n          this.router.navigateByUrl(\"/pages/sub-user/add-subuser\");\n        }\n        else{\n          const len = Object.keys(this.subUsersListData).length;\n          for (var i = 0; i < len; i++) {\n            this.showCard[this.subUsersListData[i]._id] = true;\n          }\n        }\n      }\n    })\n  }\n  catch(err){\n    console.log(err);\n  }\n  }\n\n//Method For collapsed List Data\n  showData(subUsersId: String) {\n    try{\n    this.showCard[`${subUsersId}`] = !this.showCard[`${subUsersId}`];\n    }\n    catch(err){\n      console.log(err);\n    }\n  }\n\n\n  //Method for remove company list\n  deleteSubUserListData(subUserId: String) {\n    try{\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeSubUsersData(subUserId).subscribe((data) => {\n            if (data.status === \"success\" || data.status === 200) {\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                data.message,\n                'success'\n              )\n              this.getSubUsersList();\n            }\n          })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your Data Safe',\n            'error'\n          )\n        }\n      })\n    }\n    catch(err){\n      console.log(err);\n    }\n  }\n\n\n}\n","<div class=\"card card-user\">\n    <div class=\"card-header\">\n        <h2 class=\"card-title\">Update Sub-User Details</h2>\n        <!-- <a routerLink=\"/pages/sub-user/show-subusers-list\" class=\"btn btn-primary btn-circle\" style=\"float: right;\"><i class=\"fa  fa-arrow-right\"></i></a> -->\n    </div>\n    <div class=\"card-body\">\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                <strong>{{ errMsg }}</strong>\n            </p>\n        </div>\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                <strong>{{ successMsg }}</strong>\n            </p>\n        </div>\n\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"updateSubUserForm\" (ngSubmit)=\"updateSubUserFormData()\">\n            <div class=\"form-group\">\n                 <label class=\"col-sm-6 control-label\"><b>Full Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"name\"\n                        formControlName=\"name\" required>\n                    <div *ngFor=\"let validation of validationMessage.name\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                            *ngIf=\"updateSubUserForm.get('name').hasError(validation.type) && (updateSubUserForm.get('name').dirty || updateSubUserForm.get('name').touched)\"\n                            style=\"color: red;margin-left: 14px;\">\n                            {{validation.message}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                 <label class=\"col-sm-6 control-label\"><b>Phone Number:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"phone\" formControlName=\"phone\">\n                    <div *ngFor=\"let validation of validationMessage.phone\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                            *ngIf=\"updateSubUserForm.get('phone').hasError(validation.type) && (updateSubUserForm.get('phone').dirty || updateSubUserForm.get('phone').touched)\"\n                            style=\"color: red;margin-left: 14px;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Email:</b></label>\n                    <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"email\" id=\"email\"  formControlName=\"email\" disabled >\n                    </div>\n                </div>\n<!----------------- For Further Work ---------------------------->\n\n            <!-- <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>DOB</b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"date\" id=\"inputEmail\" placeholder=\"DOB \"\n                        value=\"{{ list.profile.contactInfo.birthday }}\" formControlName=\"birthday\" required>\n                    <div *ngFor=\"let validation of validationMessage.birthday\">\n                        <div class=\"alert alert-danger\"\n                            *ngIf=\"updateSubUserForm.get('birthday').hasError(validation.type) && (updateSubUserForm.get('birthday').dirty || updateSubUserForm.get('birthday').touched)\"\n                            class=\"alert alert-danger\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Zip Code</b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"inputZipcode\" placeholder=\"Enter Zip Code\"\n                        value=\"{{ list.profile.contactInfo.zipCode }}\" formControlName=\"zipCode\">\n                    <div *ngFor=\"let validation of validationMessage.zipCode\">\n                        <div class=\"alert alert-danger\"\n                            *ngIf=\"updateSubUserForm.get('zipCode').hasError(validation.type) && (updateSubUserForm.get('zipCode').dirty || updateSubUserForm.get('zipCode').touched)\"\n                            class=\"alert alert-danger\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label \"><b>Gender:-</b></label>\n                <select class=\"dropdown dropdown-toggle form-control\" Name=\"gender\" formControlName=\"gender\"\n                    value=\"{{ list.profile.contactInfo.gender }}\">\n                    <option class=\"dropdown-item\" value=\"blank\" selected disabled>Choose Gender</option>\n                    <option class=\"dropdown-item\" value=\"Male\">Male</option>\n                    <option class=\"dropdown-item\" value=\"Female\">Female</option>\n                    <option class=\"dropdown-item\" value=\"Others\">Others</option>\n                    <option class=\"dropdown-item\" value=\"N/A\">N/A</option>\n                </select>\n            </div> -->\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"updateSubUserForm.invalid\">Update</button>\n                    <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"/pages/sub-user/show-subusers-list\">Cancel</button>\n                </div>\n            </div>\n        </form>\n\n\n    </div>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { SubUserService } from '../sub-user-service/sub-user.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-subusers-data',\n  templateUrl: './update-subusers-data.component.html',\n  styleUrls: ['./update-subusers-data.component.scss']\n})\nexport class UpdateSubusersDataComponent implements OnInit {\n\n  snapshotParam:any = String;\n  updateSubUserForm: FormGroup;\n  successMsg:any= String;\n  successMessage: Boolean = false;\n  errMsg:any= String;\n  errorMsg: Boolean = false;\n  genderList: String[]= ['Male','Female','Others','N/A']\n\n\n\n  constructor(private route: ActivatedRoute, private api: SubUserService, public fb: FormBuilder, private ngZone: NgZone,\n    private router: Router,\n    private util: UtilitiesService) { }\n\n  ngOnInit() {\n    this.snapshotParam = this.route.snapshot.paramMap.get(\"subUserId\");\n    this.subUserFormValidation();\n    this.getSubUserExistingData();\n  }\n\n\n  //method for sub user validation\n  subUserFormValidation() {\n    try {\n      this.updateSubUserForm = this.fb.group({\n        name: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z ]*$'),\n        ])),\n        phone: new FormControl('', Validators.compose([\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(15),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n        ])),\n        birthday: new FormControl(),\n        zipCode: new FormControl('', Validators.compose([\n          Validators.pattern('^[0-9]{6}(?:-[0-9]{4})?$'),\n        ])),\n        gender: new FormControl(),\n        email:new FormControl(),\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n//Method for Update Sub-User Details\n  updateSubUserFormData() {\n    try {\n      let cleanUpdateSubUserForm = this.util.cleanFormLevelOne(this.updateSubUserForm);\n      this.api.submitUpdateSubUserData(cleanUpdateSubUserForm.value, this.snapshotParam).subscribe((data) => {\n        if (data.status === \"success\" || data.status === 200) {\n          this.getSubUserExistingData();\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() => {\n            this.handleErrors();\n            this.router.navigateByUrl('/pages/sub-user/show-subusers-list');\n          }, 2000);\n        }\n        else if (data.status == \"error\") {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(() => {\n            this.handleErrors();\n          },3000)\n        }\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for Get existing data load on the form(autofill form)\n  getSubUserExistingData() {\n    try {\n      this.api.subUserDetails(this.snapshotParam).subscribe(data => {\n        if (data.status === \"success\") {\n              this.updateSubUserForm = this.fb.group({\n                name: new FormControl(data.data.name, Validators.compose([\n                  Validators.required,\n                  Validators.pattern('^[a-zA-Z ]*$'),\n                ])),\n                phone: new FormControl(data.data.phone, Validators.compose([\n                  Validators.required,\n                  Validators.minLength(10),\n                  Validators.maxLength(15),\n                  Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$'),\n                ])),\n                birthday: new FormControl(),\n                zipCode: new FormControl('', Validators.compose([\n                  Validators.pattern('^[0-9]{6}(?:-[0-9]{4})?$'),\n                ])),\n                gender: new FormControl(),\n                email:new FormControl(data.data.email),\n              })\n        }\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Property for show error message\n  validationMessage = {\n    'name': [\n      { type: 'required', message: 'Name Is Required'},\n      { type: 'pattern', message: 'Not a valid' }\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone Number Is Required'},\n      { type: 'minlength', message: 'Not a phone number ' },\n      { type: 'maxlength', message: 'Phone no. is too large' },\n      { type: 'pattern', message: 'Phone Number not valid' },\n    ],\n    'zipCode': [\n      { type: 'pattern', message: 'ZIP code not valid' },\n    ],\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SubUserComponent } from './sub-user.component';\nimport { AddSubusersComponent } from './add-subusers/add-subusers.component';\nimport { ShowSubusersListComponent } from './show-subusers-list/show-subusers-list.component';\nimport { UpdateSubusersDataComponent } from './update-subusers-data/update-subusers-data.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\n\nconst route : Routes = [\n    {\n      path :'',\n      component : SubUserComponent,\n      canActivate:[AuthGuard],\n      children :[\n        {\n         path: 'add-subuser',\n        component: AddSubusersComponent,\n        },\n        {\n          path: 'show-subusers-list',\n          component:ShowSubusersListComponent,\n        },\n        {\n          path: 'update-subuser-data/:subUserId',\n          component:UpdateSubusersDataComponent,\n        },\n        {\n          path:'',\n          redirectTo :'show-subusers-list',\n          pathMatch:'full',\n        },\n      ],\n    }\n  ];\n\n@NgModule({\n    declarations: [],\n    imports: [\n      CommonModule,\n      RouterModule.forChild(route),\n    ]\n  })\n\n  export class SubUserRoutingModule{}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { SubUserRoutingModule } from './sub-user-routing.module';\nimport { SubUserComponent } from './sub-user.component';\nimport { AddSubusersComponent } from './add-subusers/add-subusers.component';\nimport { ShowSubusersListComponent } from './show-subusers-list/show-subusers-list.component';\nimport { SubUserService } from './sub-user-service/sub-user.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { UpdateSubusersDataComponent } from './update-subusers-data/update-subusers-data.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { NgxSpinnerModule } from 'ngx-spinner';\n\n\n@NgModule({\n    declarations: [SubUserComponent,AddSubusersComponent, ShowSubusersListComponent, UpdateSubusersDataComponent],\n    imports: [\n        CommonModule,\n        SubUserRoutingModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule,\n        HttpClientModule,\n        NgxSpinnerModule   \n    ],\n    providers: [SubUserService,AuthGuard],\n})\nexport class SubUserModule { }"]}