{"version":3,"sources":["webpack:///src/app/pages/document-types/document-types.component.ts","webpack:///src/app/pages/document-types/document-types.component.html","webpack:///src/app/pages/document-types/list-document-types/list-document-types.component.html","webpack:///src/app/pages/document-types/list-document-types/list-document-types.component.ts","webpack:///src/app/pages/document-types/add-document-types/add-document-types.component.html","webpack:///src/app/pages/document-types/update-document-types/update-document-types.component.html","webpack:///src/app/pages/document-types/document-types-routing.module.ts","webpack:///src/app/pages/document-types/update-document-types/update-document-types.component.ts","webpack:///src/app/pages/document-types/add-document-types/add-document-types.component.ts","webpack:///src/app/pages/document-types/document-types.module.ts"],"names":["DocumenttypesComponent","ListDocumentTypesComponent","api","route","util","document","Array","showCard","this","documentList","permissionInfo","permissionRoleInfo","documentData","subscribe","data","status","length","navigateByUrl","err","console","log","message","title","leaveTypeId","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","text","type","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","value","removeDocument","dismiss","DismissReason","cancel","documentTypeStatus","addDocumentType","UpdateDocumentTypesComponent","AddDocumentTypesComponent","DocumenttypesModule","DocumenttypesRoutingModule","path","component","canActivate","children","fob","router","ngzone","successMessage","errorMsg","validationMessage","isListAvaliable","documentValidation","search","documentForm","disable","group","required","description","isRequired","cleanDocumnetTypeForm","cleanFormLevelOne","addDocumentSubmit","companyId","successMsg","setTimeout","handleErrors","run","errMsg","ngZone","val","documentTypeId","snapshot","paramMap","get","moduleExists","valueCheck","documentTypeDetails","existingValue","cleanDocumnetTypeUpdateForm","updateDocument","updateDoc","redirectTo","pathMatch","forChild"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-document-types',\n  templateUrl: './document-types.component.html'\n})\nexport class DocumenttypesComponent implements OnInit {\n\n  constructor(){}\n  ngOnInit(){\n\n  }\n \n\n}","<router-outlet></router-outlet>","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Document Type</h2>\n        <button [disabled]=\"permissionInfo.search('Create DocumentType') === -1\"\n         class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/document-types/add-document-types\" style=\"float: right;\" (click)= \"addDocumentType()\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Document Type</button\n            >\n    </div>\n    <div class=\"table-responsive-lg\">\n        <table class=\"table\" style=\"text-align: center;\">\n            <thead class=\" text-primary\">\n                <tr>\n                <th> S.No </th>\n                <th> Title </th>\n                <th>Description</th>\n                <th>Is Required</th>\n                <th>Action</th>\n                </tr>\n            </thead>\n            <tbody *ngFor=\"let list of document; let i = index\">\n                <tr >\n                <td><b>{{ i+1 }}.</b></td>\n                <td> {{ list.title }} </td>\n                <td > {{list.description}}</td>\n                <td *ngIf=\"list.isRequired\"><i class=\"fa fa-check\" style=\"color: green; font-size: 25px;\"></i></td>\n                <td *ngIf=\"!list.isRequired\"><i class=\"fa fa-times\" style=\"color: red; font-size: 25px;\"></i></td>\n                <td>\n                    <a [class.disabled]=\"permissionInfo.search('Edit DocumentType') === -1\"\n                    routerLink=\"/pages/document-types/update-document-types/{{list.companyId}}/{{list._id}}\" class=\"btn btn-primary\" ><i class=\"fa fa-pencil-square-o\"></i></a>&nbsp;\n                    <button [disabled]=\"permissionInfo.search('Delete DocumentType') === -1\"\n                     class=\"btn btn-danger\" type=\"button\" (click)=\"removeDocument(list._id)\"><i class=\"fa fa-trash\"></i></button\n                        >\n                </td>\n                </tr>\n        </table>\n    </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport { DocumentServices } from '../document-services/document.services';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component ({\n    selector: 'app-list-document-types',\n    templateUrl: './list-document-types.component.html'\n})\n\nexport class ListDocumentTypesComponent implements OnInit {\n\n  public document = new Array();\n  showCard:any = {};\n  permissionInfo: any;\n\n  constructor(private api: DocumentServices,\n    public route:Router,\n    private util: UtilitiesService) {}\n\n  ngOnInit() {\n    this.documentList();\n    this.permissionInfo = this.util.permissionRoleInfo\n  }\n\n  documentList() {\n    try{\n      this.api.documentData().subscribe(data=>{\n      if(data.status === 200 || data.status === \"success\") {\n      const len = data.data.length;\n      if(len == 0){\n        this.route.navigateByUrl(\"/pages/document-types/add-document-types\");\n      } else {\n        this.document = data.data;\n      }\n      }\n    })\n    }catch(err){\n      console.log(err.message);\n    }\n  }\n\n  showData(title: String) {\n      this.showCard[`${title}`] = !this.showCard[`${title}`];\n  }\n\n  removeDocument(leaveTypeId:String){\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeDocument(leaveTypeId).subscribe((data)=>{\n            if(data.status === 'success'){\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                data.message,\n                'success'\n              );\n              this.documentList();\n            } else if(data.status === 'error'){\n              swalWithBootstrapButtons.fire(\n                'ERROR!',\n                data.message,\n                'error'\n              );\n            }\n        });\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your list data safe',\n            'error'\n          )\n        }\n      })\n  }\n  addDocumentType(){\n    try{\n      this.util.documentTypeStatus = 1;\n    }catch(err){\n      console.log(err)\n    }\n  }\n}","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Document Type Details</h2>\n      <button [disabled]=\"permissionInfo.search('Create DocumentType') === -1\"\n      class=\"btn btn-primary\" type=\"button\" routerLink=\"../list-document-types\" style=\"float: right;\"><i class=\"fa fa-list\"></i>&nbsp; Show Document List</button>\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{ errMsg }}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{ successMsg }}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"documentForm\" (ngSubmit)=\"addDocumentType()\" novalidate>\n         <div class=\"form-group\">\n             <label class=\"col-sm-6 control-label\"><b>Title: &nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"titleDoc\" placeholder=\"Enter Title\" formControlName=\"title\" >\n               <div *ngFor=\"let validation of validationMessage.title\">\n                  <div style=\"color: red;margin-left: 14px;\" *ngIf=\"documentForm.get('title').hasError(validation.type) && (documentForm.get('title').dirty || documentForm.get('title').touched)\" style=\"color: red;margin-left: 14px;\">{{ validation.message }}</div>\n               </div>\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Description: </b></label>\n            <div class=\"col-sm-offset-2\">\n               <textarea class=\"form-control\" type=\"textarea\" id=\"descriptionDoc\" placeholder=\"Enter description\" formControlName=\"description\"></textarea>\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <label class=\"control-label\">Is Required </label>: <input type=\"checkbox\" name=\"required\" formControlName=\"isRequired\">\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\"\n                class=\"btn btn-success\" [disabled]=\"documentForm.invalid || permissionInfo.search('Create DocumentType') === -1\">Submit</button>\n               <button type=\"button\"\n                class=\"btn btn-danger\" routerLink=\"../list-document-types\">cancel</button>\n            </div>\n         </div>\n      </form>\n   </div>\n</div>","<div class=\"card card-user\">\n    <div class=\"card-header\">\n       <h2 class=\"card-title text-center\">Update Document Type</h2>\n    </div>\n    <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{errMsg}}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{successMsg}}</strong>\n         </p>\n      </div>\n\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"documentForm\" (ngSubmit)=\"updateDoc()\" novalidate>\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"title\" placeholder=\"Enter Title\"  formControlName=\"title\">\n\n               <div *ngFor=\"let validation of validationMessage.title\">\n                  <div style=\"color: red;margin-left: 14px;\"\n                  *ngIf=\"documentForm.get('title').hasError(validation.type) && (documentForm.get('title').dirty || documentForm.get('title').touched)\"\n                  >\n                  {{ validation.message }}</div>\n               </div>\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Description: </b></label>\n            <div class=\"col-sm-offset-2\">\n               <textarea class=\"form-control\" type=\"textarea\" id=\"description\" placeholder=\"Enter description\" formControlName=\"description\"\n                  ></textarea>\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <label class=\"control-label\">Is Required ?</label>:\n            <input type=\"checkbox\" name=\"required\" formControlName=\"isRequired\">\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\"\n               class=\"btn btn-success\" [disabled]=\"documentForm.invalid || permissionInfo.search('Edit DocumentType') === -1\">Update</button>\n               <button type=\"button\"\n               class=\"btn btn-danger\" routerLink=\"../../../list-document-types\">cancel</button>\n            </div>\n         </div>\n      </form>\n\n\n   </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DocumenttypesComponent } from './document-types.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListDocumentTypesComponent } from './list-document-types/list-document-types.component';\nimport { AddDocumentTypesComponent } from './add-document-types/add-document-types.component';\nimport { UpdateDocumentTypesComponent } from './update-document-types/update-document-types.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : DocumenttypesComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-document-types',\n        component: ListDocumentTypesComponent,\n      },\n      {\n        path: 'add-document-types',\n        component: AddDocumentTypesComponent\n      },\n      {\n        // path: 'update-document-type/:companyId/:leaveTypeId',\n        path: 'update-document-types/:companyId/:documentTypeId',\n        component: UpdateDocumentTypesComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-document-types',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class DocumenttypesRoutingModule { }","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DocumentServices } from '../document-services/document.services';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-document-types',\n  templateUrl: 'update-document-types.component.html'\n})\n\nexport class UpdateDocumentTypesComponent implements OnInit {\n\n    public companyId: any;\n    public documentTypeId: any;\n    documentForm: any;\n    successMsg: String;\n    successMessage: boolean = false;\n    errMsg: String;\n    errorMsg: boolean = false;\n    existingValue:any;\n    public val: any= [];\n  permissionInfo: any;\n\n    constructor(private route: ActivatedRoute, private fob:FormBuilder, private router: Router,\n            private api: DocumentServices,private ngZone: NgZone,\n            private util: UtilitiesService ){\n              this.documentTypeId = this.route.snapshot.paramMap.get(\"documentTypeId\");\n              this.util.moduleExists(this.documentTypeId,'DocumentTypes').subscribe((data)=>{\n                if(data.status === 'success'){\n                  if(!data.data){\n                    this.router.navigateByUrl('/pages/document-types/list-document-types');\n                  }\n                }\n              })\n            }\n\n    ngOnInit() {\n      this.companyId = this.route.snapshot.paramMap.get(\"companyId\");\n      this.valueCheck();\n      this.documentValidation();\n      this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Edit DocumentType') === -1){\n        this.documentForm.disable();\n      }\n    }\n\n    valueCheck() {\n      this.api.documentTypeDetails(this.documentTypeId).subscribe(data=>{\n        if(data.status === 200 || data.status === 'success') {\n          this.existingValue = data.data;\n            this.documentForm = this.fob.group({\n              title: new FormControl(this.existingValue.title,Validators.required),\n              description: new FormControl(this.existingValue.description),\n              isRequired: new FormControl(this.existingValue.isRequired)\n            })\n        }\n      })\n    }\n\n    updateDoc() {\n      try{\n        let cleanDocumnetTypeUpdateForm = this.util.cleanFormLevelOne(this.documentForm);\n        this.api.updateDocument(cleanDocumnetTypeUpdateForm.value,this.companyId,this.documentTypeId).subscribe(data=>{\n          if(data.status === 'success' || data.status === 200) {\n            this.successMessage = true ;\n            this.errorMsg = false ;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n              this.ngZone.run(()=>this.router.navigateByUrl('/pages/document-types/list-document-types'));\n            },2000);\n          } else if(data.status == \"error\") {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n            },3000);\n          }\n        })\n      } catch(err){\n        console.log(err);\n      }\n\n    }\n\n    documentValidation() {\n      try {\n        this.documentForm = this.fob.group({\n          title: new FormControl('',Validators.required),\n          description: new FormControl(''),\n          isRequired: new FormControl(false)\n          })\n        }\n      catch (err) {\n        console.log(err);\n      }\n    }\n\n\n    validationMessage = {\n      'title': [\n        { type: 'required', message: 'Title is Required' },\n      ],\n  }\n\n    handleErrors(){\n      this.errorMsg = false;\n      this.successMessage = false;\n      this.errMsg = '';\n      this.successMsg = '';\n  }\n}","import { Component, OnInit,NgZone } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { DocumentServices } from '../document-services/document.services';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n    selector: 'app-add-document-types',\n    templateUrl: './add-document-types.component.html'\n})\n\nexport class AddDocumentTypesComponent implements OnInit {\n\n    documentForm:FormGroup;\n    public companyId;\n    successMsg: String;\n    successMessage: boolean = false;\n    errMsg: String;\n    errorMsg: boolean = false;\n    permissionInfo: any;\n\n    constructor(private api: DocumentServices,\n            private fob: FormBuilder,\n            private router: Router,\n            private ngzone: NgZone,\n            private util: UtilitiesService ){\n              this.isListAvaliable();\n            }\n\n    ngOnInit() {\n      this.documentValidation();\n      this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Create DocumentType') === -1){\n        this.documentForm.disable();\n      }\n    }\n\n    documentValidation() {\n        try {\n          this.documentForm = this.fob.group({\n            title: new FormControl('',Validators.required),\n            description: new FormControl(''),\n            isRequired: new FormControl(false)\n            })\n          }\n        catch (err) {\n          console.log(err);\n        }\n    }\n\n    addDocumentType() {\n      try{\n        let cleanDocumnetTypeForm = this.util.cleanFormLevelOne(this.documentForm);\n        this.api.addDocumentSubmit(cleanDocumnetTypeForm.value, this.companyId).subscribe(data=>{\n          if(data.status === 'success' || data.status === 200) {\n              this.successMessage = true ;\n              this.errorMsg = false ;\n              this.successMsg = data.message;\n              setTimeout(() =>{\n                this.handleErrors();\n                this.ngzone.run(()=>this.router.navigateByUrl('/pages/document-types/list-document-types'));\n              },2000);\n          } else if(data.status === \"error\"|| data.status === 404){\n              this.errorMsg = true;\n              this.successMessage = false;\n              this.errMsg = data.message;\n              setTimeout(() =>{\n                this.handleErrors();\n              },3000);\n            }\n          })\n      } catch(err){\n        console.log(err);\n      }\n\n    }\n\n    validationMessage = {\n        'title': [\n          { type: 'required', message: 'Title is required' },\n        ],\n    }\n\n    handleErrors(){\n      this.errorMsg = false;\n      this.successMessage = false;\n      this.errMsg = '';\n      this.successMsg = '';\n  }\n  isListAvaliable(){\n    try{\n      this.api.documentData().subscribe((data) =>{\n        if(data.status === 'success'){\n          if(data.data.length > 0 && this.util.documentTypeStatus !== 1){\n            this.router.navigateByUrl(\"/pages/document-types/list-document-types\");\n            this.util.documentTypeStatus = 0;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DocumenttypesRoutingModule } from './document-types-routing.module';\nimport { DocumenttypesComponent } from './document-types.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListDocumentTypesComponent } from './list-document-types/list-document-types.component';\nimport { AddDocumentTypesComponent } from './add-document-types/add-document-types.component';\nimport { UpdateDocumentTypesComponent } from './update-document-types/update-document-types.component';\n\n@NgModule({\n  declarations: [\n     DocumenttypesComponent,\n     ListDocumentTypesComponent,\n     AddDocumentTypesComponent,\n     UpdateDocumentTypesComponent\n    ],\n  \n  imports: [\n    CommonModule,\n    DocumenttypesRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\nexport class DocumenttypesModule { }\n"]}